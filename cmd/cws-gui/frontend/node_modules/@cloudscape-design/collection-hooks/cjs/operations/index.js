"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.itemsAreEqual = exports.processSelectedItems = exports.getTrackableValue = void 0;
exports.processItems = processItems;
const filter_js_1 = require("./filter.js");
const property_filter_js_1 = require("./property-filter.js");
const sort_js_1 = require("./sort.js");
const pagination_js_1 = require("./pagination.js");
const items_tree_js_1 = require("./items-tree.js");
const compose_filters_js_1 = require("./compose-filters.js");
function processItems(items, { filteringText, sortingState, currentPageIndex, propertyFilteringQuery }, { filtering, sorting, pagination, propertyFiltering, expandableRows }) {
    const itemsTree = new items_tree_js_1.ItemsTree(items, expandableRows);
    const filterPredicate = (0, compose_filters_js_1.composeFilters)((0, property_filter_js_1.createPropertyFilterPredicate)(propertyFiltering, propertyFilteringQuery), (0, filter_js_1.createFilterPredicate)(filtering, filteringText));
    if (filterPredicate) {
        itemsTree.filter(filterPredicate);
    }
    const comparator = (0, sort_js_1.createComparator)(sorting, sortingState);
    if (comparator) {
        itemsTree.sort(comparator);
    }
    const allPageItems = itemsTree.getItems();
    const filteredItemsCount = filterPredicate ? itemsTree.getSize() : undefined;
    const pageProps = (0, pagination_js_1.createPageProps)(pagination, currentPageIndex, allPageItems);
    if (pageProps) {
        return {
            items: allPageItems.slice((pageProps.pageIndex - 1) * pageProps.pageSize, pageProps.pageIndex * pageProps.pageSize),
            allPageItems: allPageItems,
            filteredItemsCount,
            pagesCount: pageProps === null || pageProps === void 0 ? void 0 : pageProps.pagesCount,
            actualPageIndex: pageProps === null || pageProps === void 0 ? void 0 : pageProps.pageIndex,
            itemsTree,
        };
    }
    return {
        items: allPageItems,
        allPageItems: allPageItems,
        filteredItemsCount,
        pagesCount: undefined,
        actualPageIndex: undefined,
        itemsTree,
    };
}
const getTrackableValue = (trackBy, item) => {
    if (!trackBy) {
        return item;
    }
    if (typeof trackBy === 'function') {
        return trackBy(item);
    }
    return item[trackBy];
};
exports.getTrackableValue = getTrackableValue;
const processSelectedItems = (items, selectedItems, trackBy) => {
    const selectedSet = new Set();
    selectedItems.forEach(item => selectedSet.add((0, exports.getTrackableValue)(trackBy, item)));
    return items.filter(item => selectedSet.has((0, exports.getTrackableValue)(trackBy, item)));
};
exports.processSelectedItems = processSelectedItems;
const itemsAreEqual = (items1, items2, trackBy) => {
    if (items1.length !== items2.length) {
        return false;
    }
    const set1 = new Set();
    items1.forEach(item => set1.add((0, exports.getTrackableValue)(trackBy, item)));
    return items2.every(item => set1.has((0, exports.getTrackableValue)(trackBy, item)));
};
exports.itemsAreEqual = itemsAreEqual;

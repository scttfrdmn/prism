{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/list/interfaces.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { ReactNode } from 'react';\n\nimport { SortableAreaProps } from '../internal/components/sortable-area';\nimport { NonCancelableEventHandler } from '../internal/events';\n\nexport interface ListProps<T = any> {\n  /**\n   * The items to display in the list.\n   */\n  items: ReadonlyArray<T>;\n\n  /**\n   * Render an item. The function should return an object with the following keys:\n   * * `id` (string) - A unique identifier for the item.\n   * * `content` (React.ReactNode) - The content of the item.\n   * * `secondaryContent` (React.ReactNode) - (Optional) Secondary content, for example item description.\n   * * `icon` (React.ReactNode) - (Optional) An icon, displayed at the start.\n   * * `action` (React.ReactNode) - (Optional) Action button(s).\n   * * `announcementLabel` (string) - (Optional) An announcement label for the item, used when sorting.\n   *    By default, the `content` is used: a custom label should be provided if `content` is not a string.\n   */\n  renderItem: (item: T) => {\n    id: string;\n    content: ReactNode;\n    secondaryContent?: ReactNode;\n    icon?: ReactNode;\n    action?: ReactNode;\n    announcementLabel?: string;\n  };\n\n  /**\n   * The HTML tag to render. By default `ul` is used for standard lists and `ol` for sortable lists.\n   */\n  tagOverride?: 'ol' | 'ul';\n\n  /**\n   * Adds an aria-label to the list.\n   */\n  ariaLabel?: string;\n  /**\n   * Adds an aria-labelledby to the list.\n   */\n  ariaLabelledby?: string;\n  /**\n   * Adds an aria-describedby to the list.\n   */\n  ariaDescribedby?: string;\n  /**\n   * Makes the list sortable by enabling drag and drop functionality.\n   */\n  sortable?: boolean;\n  /**\n   * Disables sorting drag handles. Use this to temporarily prevent users from reordering the list.\n   */\n  sortDisabled?: boolean;\n  /**\n   * Removes padding around and inside list items.\n   */\n  disableItemPaddings?: boolean;\n  /**\n   * Removes top and bottom padding around the list. Does not apply for sortable lists.\n   */\n  disablePaddings?: boolean;\n  /**\n   * Called when items are reordered in a sortable list.\n   */\n  onSortingChange?: NonCancelableEventHandler<ListProps.SortingState<T>>;\n  /**\n   * An object containing all the localized strings required by the component.\n   *\n   * - `liveAnnouncementDndStarted` ((position: number, total: number) => string) - (Optional) Adds a message to be announced by screen readers when an item is picked for reordering.\n   * - `liveAnnouncementDndDiscarded` (string) - (Optional) Adds a message to be announced by screen readers when a reordering action is canceled.\n   * - `liveAnnouncementDndItemReordered` ((initialPosition: number, currentPosition: number, total: number) => string) - (Optional) Adds a message to be announced by screen readers when an item is being moved.\n   * - `liveAnnouncementDndItemCommitted` ((initialPosition: number, finalPosition: number, total: number) => string) - (Optional) Adds a message to be announced by screen readers when a reordering action is committed.\n   * - `dragHandleAriaDescription` (string) - (Optional) Adds an ARIA description for the drag handle.\n   * - `dragHandleAriaLabel` (string) - (Optional) Adds an ARIA label for the drag handle.\n   *\n   * @i18n\n   */\n  i18nStrings?: ListProps.I18nStrings;\n}\n\nexport namespace ListProps {\n  export interface SortingState<T> {\n    items: ReadonlyArray<T>;\n  }\n\n  export type I18nStrings = SortableAreaProps.DndAreaI18nStrings;\n}\n"]}
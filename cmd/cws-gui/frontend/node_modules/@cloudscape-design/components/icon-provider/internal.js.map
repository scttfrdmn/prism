{"version":3,"file":"internal.js","sourceRoot":"","sources":["../../../src/icon-provider/internal.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AAEtC,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAE1C,OAAO,cAAc,MAAM,yBAAyB,CAAC;AACrD,OAAO,EAAE,mBAAmB,EAAE,MAAM,WAAW,CAAC;AAGhD,SAAS,oBAAoB,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAqB;IAClE,MAAM,YAAY,GAAG,UAAU,CAAC,mBAAmB,CAAC,CAAC;IAErD,IAAI,cAAc,GAA4B,cAAc,CAAC;IAE7D,8HAA8H;IAC9H,IAAI,KAAK,KAAK,IAAI,EAAE;QAClB,MAAM,WAAW,qBAAQ,KAAK,CAAE,CAAC;QAEjC,uDAAuD;QACvD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACtC,MAAM,QAAQ,GAAG,IAAmC,CAAC;YACrD,IAAI,QAAQ,IAAI,cAAc,IAAI,WAAW,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE;gBAChE,WAAW,CAAC,QAAQ,CAAC,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;aAClD;QACH,CAAC,CAAC,CAAC;QAEH,cAAc,mCAAQ,YAAY,GAAK,WAAW,CAAE,CAAC;KACtD;IAED,OAAO,oBAAC,mBAAmB,CAAC,QAAQ,IAAC,KAAK,EAAE,cAAc,IAAG,QAAQ,CAAgC,CAAC;AACxG,CAAC;AAED,eAAe,oBAAoB,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useContext } from 'react';\n\nimport generatedIcons from '../icon/generated/icons';\nimport { InternalIconContext } from './context';\nimport { IconProviderProps } from './interfaces';\n\nfunction InternalIconProvider({ children, icons }: IconProviderProps) {\n  const contextIcons = useContext(InternalIconContext);\n\n  let iconsToProvide: IconProviderProps.Icons = generatedIcons;\n\n  // Merge the context icons with the custom icons, this allows child instances of IconProvider to persist parent configurations\n  if (icons !== null) {\n    const clonedIcons = { ...icons };\n\n    // Reset null icon values to their original definitions\n    Object.keys(clonedIcons).forEach(name => {\n      const iconName = name as keyof typeof generatedIcons;\n      if (iconName in generatedIcons && clonedIcons[iconName] === null) {\n        clonedIcons[iconName] = generatedIcons[iconName];\n      }\n    });\n\n    iconsToProvide = { ...contextIcons, ...clonedIcons };\n  }\n\n  return <InternalIconContext.Provider value={iconsToProvide}>{children}</InternalIconContext.Provider>;\n}\n\nexport default InternalIconProvider;\n"]}
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { useEffect, useRef, useState } from 'react';
import { useStableCallback } from '@cloudscape-design/component-toolkit/internal';
import { fireNonCancelableEvent } from '../../internal/events';
import { metrics } from '../../internal/metrics';
import { getAppLayoutInitialState, registerAppLayoutHandler } from '../../internal/plugins/widget/internal';
import { assertNever } from '../../internal/types';
import { mapRuntimeConfigToAiDrawer } from '../runtime-drawer';
const DEFAULT_ON_CHANGE_PARAMS = { initiatedByUserAction: true };
function useRuntimeAiDrawer(isEnabled, activeAiDrawerId, onActiveAiDrawerChange, onActiveAiDrawerResize) {
    const [aiDrawer, setAiDrawer] = useState(null);
    const appLayoutMessageHandler = useStableCallback((event) => {
        if (event.type === 'registerLeftDrawer') {
            setAiDrawer(event.payload);
            if (!aiDrawerWasOpenRef.current && event.payload.defaultActive) {
                onAiDrawersChangeStable(event.payload.id, { initiatedByUserAction: false });
            }
            return;
        }
        if (aiDrawer && aiDrawer.id !== event.payload.id) {
            metrics.sendOpsMetricObject('awsui-widget-drawer-incorrect-id', { oldId: aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.id, newId: event.payload.id });
            return;
        }
        switch (event.type) {
            case 'updateDrawerConfig':
                setAiDrawer(current => (current ? Object.assign(Object.assign({}, current), event.payload) : current));
                break;
            case 'openDrawer':
                onActiveAiDrawerChangeStable(event.payload.id, { initiatedByUserAction: false });
                break;
            case 'closeDrawer':
                onActiveAiDrawerChangeStable(null, { initiatedByUserAction: false });
                break;
            case 'resizeDrawer':
                onActiveAiDrawerResizeStable(event.payload.size);
                break;
            /* istanbul ignore next: this code is not intended to be visited */
            default:
                assertNever(event);
        }
    });
    const onAiDrawersChangeStable = useStableCallback(onActiveAiDrawerChange);
    const onActiveAiDrawerResizeStable = useStableCallback(onActiveAiDrawerResize);
    const onActiveAiDrawerChangeStable = useStableCallback(onActiveAiDrawerChange);
    const aiDrawerWasOpenRef = useRef(false);
    aiDrawerWasOpenRef.current = aiDrawerWasOpenRef.current || !!activeAiDrawerId;
    useEffect(() => {
        var _a;
        if (!isEnabled) {
            return;
        }
        const initialDrawerMessage = (_a = getAppLayoutInitialState()) === null || _a === void 0 ? void 0 : _a.find(message => message.type === 'registerLeftDrawer');
        if (initialDrawerMessage && initialDrawerMessage.type === 'registerLeftDrawer') {
            setAiDrawer(initialDrawerMessage.payload);
            if (!aiDrawerWasOpenRef.current && initialDrawerMessage.payload.defaultActive) {
                onAiDrawersChangeStable(initialDrawerMessage.payload.id, { initiatedByUserAction: false });
            }
        }
        const unsubscribe = registerAppLayoutHandler(appLayoutMessageHandler);
        return () => {
            unsubscribe();
            setAiDrawer(null);
        };
    }, [isEnabled, appLayoutMessageHandler, onAiDrawersChangeStable, onActiveAiDrawerResizeStable]);
    return aiDrawer && mapRuntimeConfigToAiDrawer(aiDrawer);
}
const MIN_DRAWER_SIZE = 400;
export function useAiDrawer({ isEnabled, onAiDrawerFocus, expandedDrawerId, setExpandedDrawerId }) {
    var _a, _b;
    const [activeAiDrawerId, setActiveAiDrawerId] = useState(null);
    const [size, setSize] = useState(null);
    function onActiveAiDrawerResize(size) {
        setSize(size);
        fireNonCancelableEvent(activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.onResize, { id: activeAiDrawerId, size });
    }
    function onActiveAiDrawerChange(newDrawerId, { initiatedByUserAction } = DEFAULT_ON_CHANGE_PARAMS) {
        setActiveAiDrawerId(newDrawerId);
        if (newDrawerId) {
            fireNonCancelableEvent(aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.onToggle, { isOpen: true, initiatedByUserAction });
        }
        if (activeAiDrawerId) {
            fireNonCancelableEvent(aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.onToggle, { isOpen: false, initiatedByUserAction });
            if (activeAiDrawerId === expandedDrawerId) {
                setExpandedDrawerId === null || setExpandedDrawerId === void 0 ? void 0 : setExpandedDrawerId(null);
            }
        }
        onAiDrawerFocus === null || onAiDrawerFocus === void 0 ? void 0 : onAiDrawerFocus();
    }
    const aiDrawer = useRuntimeAiDrawer(isEnabled, activeAiDrawerId, onActiveAiDrawerChange, onActiveAiDrawerResize);
    const activeAiDrawer = activeAiDrawerId && activeAiDrawerId === (aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.id) ? aiDrawer : null;
    const activeAiDrawerSize = activeAiDrawerId ? ((_a = size !== null && size !== void 0 ? size : activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.defaultSize) !== null && _a !== void 0 ? _a : MIN_DRAWER_SIZE) : 0;
    const minAiDrawerSize = Math.min((_b = activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.defaultSize) !== null && _b !== void 0 ? _b : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);
    return {
        aiDrawer,
        onActiveAiDrawerChange,
        activeAiDrawer,
        activeAiDrawerId,
        activeAiDrawerSize,
        minAiDrawerSize,
        onActiveAiDrawerResize,
    };
}
//# sourceMappingURL=use-ai-drawer.js.map
/// <reference types="react" />
import { AppLayoutProps } from '../../interfaces';
import { OnChangeParams } from '../../utils/use-ai-drawer';
import { FocusControlState } from '../../utils/use-focus-control';
import { AppLayoutInternals, InternalDrawer } from '../interfaces';
interface AIDrawerProps {
  activeAiDrawerSize: number;
  minAiDrawerSize: number;
  aiDrawer: AppLayoutProps.Drawer | undefined;
  maxAiDrawerSize: number;
  ariaLabels: any;
  aiDrawerFocusControl: FocusControlState | undefined;
  isMobile: boolean;
  drawersOpenQueue: ReadonlyArray<string> | undefined;
  onActiveAiDrawerChange: undefined | ((newDrawerId: string | null, params?: OnChangeParams) => void);
  onActiveDrawerResize: (detail: {
    id: string;
    size: number;
  }) => void;
  expandedDrawerId?: string | null;
  setExpandedDrawerId: (value: string | null) => void;
}
interface AppLayoutGlobalAiDrawerImplementationProps {
  appLayoutInternals: AppLayoutInternals;
  show: boolean;
  activeAiDrawer: InternalDrawer | null;
  aiDrawerProps: AIDrawerProps;
}
export declare function AppLayoutGlobalAiDrawerImplementation({
  appLayoutInternals,
  show,
  activeAiDrawer,
  aiDrawerProps
}: AppLayoutGlobalAiDrawerImplementationProps): JSX.Element;
export {};
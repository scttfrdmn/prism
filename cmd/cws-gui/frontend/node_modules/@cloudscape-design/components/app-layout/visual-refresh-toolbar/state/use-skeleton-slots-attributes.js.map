{"version":3,"file":"use-skeleton-slots-attributes.js","sourceRoot":"","sources":["../../../../../src/app-layout/visual-refresh-toolbar/state/use-skeleton-slots-attributes.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\n\nimport customCssProps from '../../../internal/generated/custom-css-properties';\nimport { useMobile } from '../../../internal/hooks/use-mobile';\nimport globalVars from '../../../internal/styles/global-vars';\nimport { AppLayoutInternalProps, AppLayoutState } from '../interfaces';\nimport { SkeletonSlotsAttributes } from '../skeleton/interfaces';\n\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from '../skeleton/styles.css.js';\n\nconst contentTypeCustomWidths: Array<string | undefined> = ['dashboard', 'cards', 'table'];\n\nexport const useSkeletonSlotsAttributes = (\n  hasToolbar: boolean,\n  appLayoutProps: AppLayoutInternalProps,\n  appLayoutState: AppLayoutState\n): SkeletonSlotsAttributes => {\n  const {\n    isNested,\n    activeDrawerSize,\n    navigationOpen,\n    verticalOffsets,\n    splitPanelOffsets,\n    activeDrawer,\n    expandedDrawerId,\n    activeAiDrawer,\n  } = appLayoutState.widgetizedState ?? {};\n  const { contentType, placement, maxContentWidth, navigationWidth, minContentWidth, disableContentPaddings } =\n    appLayoutProps;\n  const isMobile = useMobile();\n  const toolsOpen = !!activeDrawer;\n  const drawerExpandedMode = !!expandedDrawerId;\n  const aiDrawerExpandedMode = expandedDrawerId === activeAiDrawer?.id;\n  const anyPanelOpen = navigationOpen || toolsOpen;\n  const isMaxWidth = maxContentWidth === Number.MAX_VALUE || maxContentWidth === Number.MAX_SAFE_INTEGER;\n\n  const wrapperElAttributes = {\n    className: clsx(styles.root, testutilStyles.root, {\n      [styles['has-adaptive-widths-default']]: !contentTypeCustomWidths.includes(contentType),\n      [styles['has-adaptive-widths-dashboard']]: contentType === 'dashboard',\n      [styles['drawer-expanded-mode']]: drawerExpandedMode,\n      [styles['ai-drawer-expanded-mode']]: aiDrawerExpandedMode,\n    }),\n    style: {\n      minBlockSize: isNested ? '100%' : `calc(100vh - ${placement.insetBlockStart + placement.insetBlockEnd}px)`,\n      [customCssProps.maxContentWidth]: isMaxWidth ? '100%' : maxContentWidth ? `${maxContentWidth}px` : '',\n      [customCssProps.navigationWidth]: `${navigationWidth}px`,\n      [customCssProps.toolsWidth]: `${activeDrawerSize}px`,\n    },\n    'data-awsui-app-layout-widget-loaded': true,\n  };\n\n  const mainElAttributes = {\n    className: clsx(\n      styles['main-landmark'],\n      isMobile && anyPanelOpen && styles['unfocusable-mobile'],\n      drawerExpandedMode && styles.hidden\n    ),\n  };\n\n  const contentWrapperElAttributes = {\n    className: clsx(styles.main, { [styles['main-disable-paddings']]: disableContentPaddings }),\n    style: {\n      paddingBlockEnd: splitPanelOffsets?.mainContentPaddingBlockEnd,\n      ...(hasToolbar || !isNested\n        ? {\n            [globalVars.stickyVerticalTopOffset]: `${verticalOffsets?.header ?? 0}px`,\n            [globalVars.stickyVerticalBottomOffset]: `${splitPanelOffsets?.stickyVerticalBottomOffset ?? 0}px`,\n          }\n        : {}),\n      ...(!isMobile ? { minWidth: `${minContentWidth}px` } : {}),\n    },\n  };\n\n  const contentHeaderElAttributes = {\n    className: styles['content-header'],\n  };\n\n  const contentElAttributes = {\n    className: clsx(styles.content, testutilStyles.content),\n  };\n\n  return {\n    wrapperElAttributes,\n    mainElAttributes,\n    contentWrapperElAttributes,\n    contentHeaderElAttributes,\n    contentElAttributes,\n  };\n};\n"]}
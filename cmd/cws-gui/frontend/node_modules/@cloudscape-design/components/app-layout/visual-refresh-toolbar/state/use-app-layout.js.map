{"version":3,"file":"use-app-layout.js","sourceRoot":"","sources":["../../../../../src/app-layout/visual-refresh-toolbar/state/use-app-layout.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { ForwardedRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';\n\nimport { useMergeRefs, useStableCallback, useUniqueId } from '@cloudscape-design/component-toolkit/internal';\n\nimport { SplitPanelSideToggleProps } from '../../../internal/context/split-panel-context';\nimport { fireNonCancelableEvent } from '../../../internal/events';\nimport { useControllable } from '../../../internal/hooks/use-controllable';\nimport { useIntersectionObserver } from '../../../internal/hooks/use-intersection-observer';\nimport { useMobile } from '../../../internal/hooks/use-mobile';\nimport { useGetGlobalBreadcrumbs } from '../../../internal/plugins/helpers/use-global-breadcrumbs';\nimport globalVars from '../../../internal/styles/global-vars';\nimport { getSplitPanelDefaultSize } from '../../../split-panel/utils/size-utils';\nimport { AppLayoutProps } from '../../interfaces';\nimport { SplitPanelProviderProps } from '../../split-panel';\nimport { useAiDrawer } from '../../utils/use-ai-drawer';\nimport { MIN_DRAWER_SIZE, OnChangeParams, useDrawers } from '../../utils/use-drawers';\nimport { useAsyncFocusControl, useMultipleFocusControl } from '../../utils/use-focus-control';\nimport { useGlobalScrollPadding } from '../../utils/use-global-scroll-padding';\nimport { useSplitPanelFocusControl } from '../../utils/use-split-panel-focus-control';\nimport {\n  computeHorizontalLayout,\n  computeSplitPanelOffsets,\n  computeVerticalLayout,\n  CONTENT_PADDING,\n} from '../compute-layout';\nimport { AppLayoutState } from '../interfaces';\nimport { AppLayoutInternalProps, AppLayoutInternals } from '../interfaces';\n\nexport const useAppLayout = (\n  hasToolbar: boolean,\n  {\n    ariaLabels,\n    navigationOpen,\n    navigationWidth,\n    navigation,\n    navigationHide,\n    onNavigationChange,\n    tools,\n    toolsOpen: controlledToolsOpen,\n    onToolsChange,\n    toolsHide,\n    toolsWidth,\n    headerVariant,\n    breadcrumbs,\n    stickyNotifications,\n    splitPanelPreferences: controlledSplitPanelPreferences,\n    splitPanelOpen: controlledSplitPanelOpen,\n    splitPanel,\n    splitPanelSize: controlledSplitPanelSize,\n    onSplitPanelToggle,\n    onSplitPanelResize,\n    onSplitPanelPreferencesChange,\n    minContentWidth,\n    placement,\n    navigationTriggerHide,\n    ...rest\n  }: AppLayoutInternalProps,\n  forwardRef: ForwardedRef<AppLayoutProps.Ref>\n): AppLayoutState => {\n  const isMobile = useMobile();\n  const splitPanelControlId = useUniqueId('split-panel');\n  const [toolbarState, setToolbarState] = useState<'show' | 'hide'>('show');\n  const [toolbarHeight, setToolbarHeight] = useState(0);\n  const [notificationsHeight, setNotificationsHeight] = useState(0);\n  const [navigationAnimationDisabled, setNavigationAnimationDisabled] = useState(true);\n  const [splitPanelAnimationDisabled, setSplitPanelAnimationDisabled] = useState(true);\n  const [isNested, setIsNested] = useState(false);\n  const rootRefInternal = useRef<HTMLDivElement>(null);\n  // This workaround ensures the ref is defined before checking if the app layout is nested.\n  // On initial render, the ref might be undefined because this component loads asynchronously via the widget API.\n  const onMountRootRef = useCallback(node => {\n    setIsNested(getIsNestedInAppLayout(node));\n  }, []);\n\n  const [toolsOpen = false, setToolsOpen] = useControllable(controlledToolsOpen, onToolsChange, false, {\n    componentName: 'AppLayout',\n    controlledProp: 'toolsOpen',\n    changeHandler: 'onToolsChange',\n  });\n  const onToolsToggle = (open: boolean) => {\n    setToolsOpen(open);\n    drawersFocusControl.setFocus();\n    fireNonCancelableEvent(onToolsChange, { open });\n  };\n\n  const onGlobalDrawerFocus = (drawerId: string, open: boolean) => {\n    globalDrawersFocusControl.setFocus({ force: true, drawerId, open });\n  };\n\n  const onAddNewActiveDrawer = (drawerId: string) => {\n    // If a local drawer is already open, and we attempt to open a new one,\n    // it will replace the existing one instead of opening an additional drawer,\n    // since only one local drawer is supported. Therefore, layout calculations are not necessary.\n    if (activeDrawer && drawers?.find(drawer => drawer.id === drawerId)) {\n      return;\n    }\n    // get the size of drawerId. it could be either local or global drawer\n    const combinedDrawers = [...(drawers || []), ...globalDrawers];\n    const newDrawer = combinedDrawers.find(drawer => drawer.id === drawerId);\n    if (!newDrawer) {\n      return;\n    }\n    const newDrawerSize = Math.min(newDrawer.defaultSize ?? drawerSizes[drawerId] ?? MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);\n    //   check if the active drawers could be resized to fit the new drawers\n    //   to do this, we need to take all active drawers, sum up their min sizes, truncate it from resizableSpaceAvailable\n    //   and compare a given number with the new drawer id min size\n\n    // the total size of all global drawers resized to their min size\n    const availableSpaceForNewDrawer = resizableSpaceAvailable - totalActiveDrawersMinSize;\n    if (availableSpaceForNewDrawer >= newDrawerSize) {\n      return;\n    }\n\n    // now we made sure we cannot accommodate the new drawer with existing ones\n    closeFirstDrawer();\n  };\n\n  const {\n    drawers,\n    activeDrawer,\n    minDrawerSize,\n    minGlobalDrawersSizes,\n    activeDrawerSize,\n    ariaLabelsWithDrawers,\n    globalDrawers,\n    activeGlobalDrawers,\n    activeGlobalDrawersIds,\n    activeGlobalDrawersSizes,\n    drawerSizes,\n    drawersOpenQueue,\n    onActiveDrawerChange,\n    onActiveDrawerResize,\n    onActiveGlobalDrawersChange,\n    expandedDrawerId,\n    setExpandedDrawerId,\n  } = useDrawers({ ...rest, onGlobalDrawerFocus, onAddNewActiveDrawer }, ariaLabels, {\n    ariaLabels,\n    toolsHide,\n    toolsOpen,\n    tools,\n    toolsWidth,\n    onToolsToggle,\n  });\n  const {\n    aiDrawer,\n    onActiveAiDrawerChange,\n    activeAiDrawer,\n    activeAiDrawerId,\n    activeAiDrawerSize,\n    minAiDrawerSize,\n    onActiveAiDrawerResize,\n  } = useAiDrawer({\n    isEnabled: hasToolbar,\n    onAiDrawerFocus: () => aiDrawerFocusControl.setFocus(),\n    expandedDrawerId,\n    setExpandedDrawerId,\n  });\n  const aiDrawerFocusControl = useAsyncFocusControl(!!activeAiDrawer?.id, true, activeAiDrawer?.id);\n\n  const onActiveDrawerChangeHandler = (\n    drawerId: string | null,\n    params: OnChangeParams = { initiatedByUserAction: true }\n  ) => {\n    onActiveDrawerChange(drawerId, params);\n    drawersFocusControl.setFocus();\n  };\n\n  const [splitPanelOpen = false, setSplitPanelOpen] = useControllable(\n    controlledSplitPanelOpen,\n    onSplitPanelToggle,\n    false,\n    {\n      componentName: 'AppLayout',\n      controlledProp: 'splitPanelOpen',\n      changeHandler: 'onSplitPanelToggle',\n    }\n  );\n\n  const onSplitPanelToggleHandler = () => {\n    setSplitPanelAnimationDisabled(false);\n    setSplitPanelOpen(!splitPanelOpen);\n    splitPanelFocusControl.setLastInteraction({ type: splitPanelOpen ? 'close' : 'open' });\n    fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });\n  };\n\n  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable(\n    controlledSplitPanelPreferences,\n    onSplitPanelPreferencesChange,\n    undefined,\n    {\n      componentName: 'AppLayout',\n      controlledProp: 'splitPanelPreferences',\n      changeHandler: 'onSplitPanelPreferencesChange',\n    }\n  );\n\n  const onSplitPanelPreferencesChangeHandler = (detail: AppLayoutProps.SplitPanelPreferences) => {\n    setSplitPanelPreferences(detail);\n    splitPanelFocusControl.setLastInteraction({ type: 'position' });\n    fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);\n  };\n\n  const [splitPanelSize = 0, setSplitPanelSize] = useControllable(\n    controlledSplitPanelSize,\n    onSplitPanelResize,\n    getSplitPanelDefaultSize(splitPanelPreferences?.position ?? 'bottom'),\n    { componentName: 'AppLayout', controlledProp: 'splitPanelSize', changeHandler: 'onSplitPanelResize' }\n  );\n\n  const [splitPanelReportedSize, setSplitPanelReportedSize] = useState(0);\n  const [splitPanelHeaderBlockSize, setSplitPanelHeaderBlockSize] = useState(0);\n\n  const onSplitPanelResizeHandler = (size: number) => {\n    setSplitPanelSize(size);\n    fireNonCancelableEvent(onSplitPanelResize, { size });\n  };\n\n  const [splitPanelToggleConfig, setSplitPanelToggleConfig] = useState<SplitPanelSideToggleProps>({\n    ariaLabel: undefined,\n    displayed: false,\n  });\n\n  const globalDrawersFocusControl = useMultipleFocusControl(true, activeGlobalDrawersIds);\n  const drawersFocusControl = useAsyncFocusControl(!!activeDrawer?.id, true, activeDrawer?.id);\n  const navigationFocusControl = useAsyncFocusControl(navigationOpen, navigationTriggerHide);\n  const splitPanelFocusControl = useSplitPanelFocusControl([splitPanelPreferences, splitPanelOpen]);\n\n  const onNavigationToggle = useStableCallback((open: boolean) => {\n    setNavigationAnimationDisabled(false);\n    navigationFocusControl.setFocus();\n    fireNonCancelableEvent(onNavigationChange, { open });\n  });\n\n  useImperativeHandle(forwardRef, () => ({\n    closeNavigationIfNecessary: () => isMobile && onNavigationToggle(false),\n    openTools: () => onToolsToggle(true),\n    focusToolsClose: () => drawersFocusControl.setFocus(true),\n    focusActiveDrawer: () => drawersFocusControl.setFocus(true),\n    focusSplitPanel: () => splitPanelFocusControl.setLastInteraction({ type: 'open' }),\n    focusNavigation: () => navigationFocusControl.setFocus(true),\n  }));\n\n  const resolvedStickyNotifications = !!stickyNotifications && !isMobile;\n  //navigation must be null if hidden so toolbar knows to hide the toggle button\n  const resolvedNavigation = navigationHide ? null : navigation || <></>;\n  //navigation must not be open if navigationHide is true\n  const resolvedNavigationOpen = !!resolvedNavigation && navigationOpen;\n  const {\n    maxDrawerSize,\n    maxSplitPanelSize,\n    splitPanelForcedPosition,\n    splitPanelPosition,\n    maxGlobalDrawersSizes,\n    resizableSpaceAvailable,\n    maxAiDrawerSize,\n  } = computeHorizontalLayout({\n    activeDrawerSize: activeDrawer ? activeDrawerSize : 0,\n    splitPanelSize,\n    minContentWidth,\n    navigationOpen: resolvedNavigationOpen,\n    navigationWidth,\n    placement,\n    splitPanelOpen,\n    splitPanelPosition: splitPanelPreferences?.position,\n    isMobile,\n    activeGlobalDrawersSizes,\n    activeAiDrawerSize,\n  });\n\n  const verticalOffsets = computeVerticalLayout({\n    topOffset: placement.insetBlockStart,\n    hasVisibleToolbar: hasToolbar && toolbarState !== 'hide',\n    notificationsHeight: notificationsHeight ?? 0,\n    toolbarHeight: toolbarHeight ?? 0,\n    stickyNotifications: resolvedStickyNotifications,\n  });\n\n  const { ref: intersectionObserverRef, isIntersecting } = useIntersectionObserver({ initialState: true });\n\n  const rootRef = useMergeRefs(rootRefInternal, intersectionObserverRef, onMountRootRef);\n\n  const discoveredBreadcrumbs = useGetGlobalBreadcrumbs(hasToolbar && !breadcrumbs);\n\n  useGlobalScrollPadding(verticalOffsets.header ?? 0);\n\n  const appLayoutInternals: AppLayoutInternals = {\n    ariaLabels: ariaLabelsWithDrawers,\n    headerVariant,\n    isMobile,\n    breadcrumbs,\n    discoveredBreadcrumbs,\n    stickyNotifications: resolvedStickyNotifications,\n    navigationOpen: resolvedNavigationOpen,\n    navigation: resolvedNavigation,\n    navigationFocusControl,\n    activeDrawer,\n    activeDrawerSize,\n    minDrawerSize,\n    maxDrawerSize,\n    minGlobalDrawersSizes,\n    maxGlobalDrawersSizes,\n    drawers: drawers!,\n    globalDrawers,\n    activeGlobalDrawers,\n    activeGlobalDrawersIds,\n    activeGlobalDrawersSizes,\n    onActiveGlobalDrawersChange,\n    drawersFocusControl,\n    globalDrawersFocusControl,\n    splitPanelPosition,\n    splitPanelToggleConfig,\n    splitPanelOpen,\n    splitPanelControlId,\n    splitPanelFocusControl,\n    placement,\n    toolbarState,\n    setToolbarState,\n    verticalOffsets,\n    drawersOpenQueue,\n    setToolbarHeight,\n    setNotificationsHeight,\n    onSplitPanelToggle: onSplitPanelToggleHandler,\n    onNavigationToggle,\n    onActiveDrawerChange: onActiveDrawerChangeHandler,\n    onActiveDrawerResize,\n    splitPanelAnimationDisabled,\n    expandedDrawerId,\n    setExpandedDrawerId,\n    aiDrawer,\n    onActiveAiDrawerChange,\n    activeAiDrawer,\n    activeAiDrawerId,\n    activeAiDrawerSize,\n    minAiDrawerSize,\n    maxAiDrawerSize,\n    aiDrawerFocusControl,\n    onActiveAiDrawerResize,\n  };\n\n  const splitPanelInternals: SplitPanelProviderProps = {\n    bottomOffset: 0,\n    getMaxHeight: useStableCallback(() => {\n      const availableHeight =\n        document.documentElement.clientHeight - placement.insetBlockStart - placement.insetBlockEnd;\n      // If the page is likely zoomed in at 200%, allow the split panel to fill the content area.\n      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;\n    }),\n    maxWidth: maxSplitPanelSize,\n    isForcedPosition: splitPanelForcedPosition,\n    isOpen: splitPanelOpen,\n    leftOffset: 0,\n    onPreferencesChange: onSplitPanelPreferencesChangeHandler,\n    onResize: onSplitPanelResizeHandler,\n    onToggle: onSplitPanelToggleHandler,\n    position: splitPanelPosition,\n    reportSize: useStableCallback(size => setSplitPanelReportedSize(size)),\n    reportHeaderHeight: useStableCallback(size => setSplitPanelHeaderBlockSize(size)),\n    headerHeight: splitPanelHeaderBlockSize,\n    rightOffset: 0,\n    size: splitPanelSize,\n    topOffset: 0,\n    setSplitPanelToggle: setSplitPanelToggleConfig,\n    refs: splitPanelFocusControl.refs,\n  };\n\n  const closeFirstDrawer = useStableCallback(() => {\n    const drawerToClose = drawersOpenQueue[drawersOpenQueue.length - 1];\n    if (activeDrawer && activeDrawer?.id === drawerToClose) {\n      onActiveDrawerChange(null, { initiatedByUserAction: true });\n    } else if (activeGlobalDrawersIds.includes(drawerToClose)) {\n      onActiveGlobalDrawersChange(drawerToClose, { initiatedByUserAction: true });\n    }\n  });\n\n  useEffect(() => {\n    // Close navigation drawer on mobile so that the main content is visible\n    if (isMobile) {\n      onNavigationToggle(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isMobile]);\n\n  const getTotalActiveDrawersMinSize = () => {\n    const combinedDrawers = [...(drawers || []), ...globalDrawers];\n    let result = activeGlobalDrawersIds\n      .map(activeDrawerId =>\n        Math.min(\n          combinedDrawers.find(drawer => drawer.id === activeDrawerId)?.defaultSize ?? MIN_DRAWER_SIZE,\n          MIN_DRAWER_SIZE\n        )\n      )\n      .reduce((acc, curr) => acc + curr, 0);\n    if (activeDrawer) {\n      result += Math.min(activeDrawer?.defaultSize ?? MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);\n    }\n    if (activeAiDrawer) {\n      result += Math.min(activeAiDrawer?.defaultSize ?? MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);\n    }\n\n    return result;\n  };\n\n  const totalActiveDrawersMinSize = getTotalActiveDrawersMinSize();\n\n  useEffect(() => {\n    if (isMobile) {\n      return;\n    }\n\n    const activeNavigationWidth = !navigationHide && navigationOpen ? navigationWidth : 0;\n    const scrollWidth = activeNavigationWidth + CONTENT_PADDING + totalActiveDrawersMinSize;\n    const hasHorizontalScroll = scrollWidth > placement.inlineSize;\n    if (hasHorizontalScroll) {\n      if (!navigationHide && navigationOpen) {\n        onNavigationToggle(false);\n        return;\n      }\n\n      closeFirstDrawer();\n    }\n  }, [\n    totalActiveDrawersMinSize,\n    closeFirstDrawer,\n    isMobile,\n    navigationHide,\n    navigationOpen,\n    navigationWidth,\n    onNavigationToggle,\n    placement.inlineSize,\n  ]);\n\n  /**\n   * Returns true if the AppLayout is nested\n   * Does not apply to iframe\n   */\n  const getIsNestedInAppLayout = (element: HTMLElement | null): boolean => {\n    let currentElement: Element | null = element?.parentElement ?? null;\n\n    // this traverse is needed only for JSDOM\n    // in real browsers the globalVar will be propagated to all descendants and this loops exits after initial iteration\n    while (currentElement) {\n      if (getComputedStyle(currentElement).getPropertyValue(globalVars.stickyVerticalTopOffset)) {\n        return true;\n      }\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  };\n\n  const splitPanelOffsets = computeSplitPanelOffsets({\n    placement,\n    hasSplitPanel: !!splitPanel,\n    splitPanelOpen,\n    splitPanelPosition,\n    splitPanelFullHeight: splitPanelReportedSize,\n    splitPanelHeaderHeight: splitPanelHeaderBlockSize,\n  });\n\n  return {\n    rootRef,\n    isIntersecting,\n    appLayoutInternals,\n    splitPanelInternals,\n    widgetizedState: {\n      ...appLayoutInternals,\n      aiDrawerExpandedMode: expandedDrawerId === activeAiDrawer?.id,\n      isNested,\n      navigationAnimationDisabled,\n      verticalOffsets,\n      splitPanelOffsets,\n    },\n  };\n};\n"]}
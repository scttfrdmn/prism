{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/date-input/utils.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AAEtC,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAI1C,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,6BAA6B,CAAC;AAEtE,MAAM,QAAQ,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;AACjE,MAAM,SAAS,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;AACjD,MAAM,OAAO,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,iBAAiB,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;AAE9D,SAAS,iBAAiB,CAAC,KAAa;IACtC,mGAAmG;IACnG,iHAAiH;IACjH,MAAM,QAAQ,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACrD,OAAO,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC7C,CAAC;AAMD,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,EAC/B,WAAW,GAAG,KAAK;AACnB;;;GAGG;AACH,KAAK,GAAG,KAAK,MACY,EAAE,EAAY,EAAE;IACzC,OAAO;QACL,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG;QAC5B,eAAe,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAC1D,QAAQ,EAAE,WAAW,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC;KAC3F,CAAC;AACJ,CAAC,CAAC;AAEF;;;;;;GAMG;AACH,MAAM,UAAU,sBAAsB,CAAC,UAAkB,EAAE,WAAsC;IAC/F,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,EAAE,CAAC;KACX;IACD,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAC5E,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,EAAE,CAAC;KACX;IACD,MAAM,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;IACnC,IAAI,WAAW,KAAK,KAAK,IAAI,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,MAAK,CAAC,IAAI,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,MAAK,CAAC,EAAE;QACrE,OAAO,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG,EAAE,CAAC;KAClC;IACD,IAAI,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,MAAK,CAAC,EAAE;QACvB,OAAO,GAAG,IAAI,IAAI,KAAK,EAAE,CAAC;KAC3B;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { getDaysInMonth } from 'date-fns';\n\nimport { CalendarProps } from '../calendar/interfaces';\nimport { MaskArgs } from '../internal/components/masked-input/utils/mask-format';\nimport { displayToIso, parseDate } from '../internal/utils/date-time';\n\nconst yearMask = { min: 0, max: 9999, default: 2000, length: 4 };\nconst monthMask = { min: 1, max: 12, length: 2 };\nconst dayMask = { min: 1, max: getMaxDaysForDate, length: 2 };\n\nfunction getMaxDaysForDate(value: string): number {\n  // Forcing to first day in month to ensure the correct month is used in case the date is incorrect.\n  // For example, the date '2018-02-30' is parsed as '2018-03-02' (because there is only 28 days in February 2018).\n  const baseDate = displayToIso(value).substring(0, 7);\n  return getDaysInMonth(parseDate(baseDate));\n}\n\nexport interface GenerateMaskArgsProps extends Pick<CalendarProps, 'granularity'> {\n  isIso?: boolean;\n}\n\nexport const generateMaskArgs = ({\n  granularity = 'day',\n  /**\n   * There are only two options, 'iso' and 'slashed' which is our current default format. If more formats are entered\n   * we should take the formatting type rather than the boolean when we make an update.\n   */\n  isIso = false,\n}: GenerateMaskArgsProps = {}): MaskArgs => {\n  return {\n    separator: isIso ? '-' : '/',\n    inputSeparators: isIso ? ['/', '.', ' '] : ['-', '.', ' '],\n    segments: granularity === 'month' ? [yearMask, monthMask] : [yearMask, monthMask, dayMask],\n  };\n};\n\n/**\n * Normalizes a partial ISO date string by trimming incomplete segments.\n *\n * @param dateString - The date string to normalize (e.g., \"2012-\", \"2012-0\", \"2012-01-3\").\n * @param granularity - The level of detail required ('month' or 'day').\n * @returns a properly formatted date string or empty string, if invalid.\n */\nexport function normalizeIsoDateString(dateString: string, granularity: CalendarProps.Granularity): string {\n  if (!dateString) {\n    return '';\n  }\n  const match = dateString.match(/^(\\d{4})(?:-(\\d{1,2})?)?(?:-(\\d{1,2})?)?$/);\n  if (!match) {\n    return '';\n  }\n  const [, year, month, day] = match;\n  if (granularity === 'day' && month?.length === 2 && day?.length === 2) {\n    return `${year}-${month}-${day}`;\n  }\n  if (month?.length === 2) {\n    return `${year}-${month}`;\n  }\n  return year;\n}\n"]}
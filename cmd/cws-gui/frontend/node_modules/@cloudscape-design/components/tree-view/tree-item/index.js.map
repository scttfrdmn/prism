{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/tree-view/tree-item/index.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport { useInternalI18n } from '../../i18n/context';\nimport { ExpandToggleButton } from '../../internal/components/expand-toggle-button';\nimport InternalStructuredItem from '../../internal/components/structured-item';\nimport { joinStrings } from '../../internal/utils/strings';\nimport { TreeViewProps } from '../interfaces';\nimport FocusTarget from './focus-target';\n\nimport testUtilStyles from '../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\ninterface InternalTreeItemProps<T>\n  extends Pick<\n    TreeViewProps,\n    'expandedItems' | 'renderItem' | 'getItemId' | 'getItemChildren' | 'renderItemToggleIcon' | 'i18nStrings'\n  > {\n  item: T;\n  index: number;\n  level: number;\n  onItemToggle: (detail: TreeViewProps.ItemToggleDetail<T>) => void;\n  allVisibleItemsIndices: {\n    [key: string]: number;\n  };\n}\n\nconst InternalTreeItem = <T,>({\n  item,\n  index,\n  level,\n  i18nStrings,\n  expandedItems = [],\n  renderItemToggleIcon,\n  renderItem,\n  getItemId,\n  getItemChildren,\n  onItemToggle,\n  allVisibleItemsIndices,\n}: InternalTreeItemProps<T>) => {\n  const i18n = useInternalI18n('tree-view');\n\n  const { icon, content, secondaryContent, actions, announcementLabel } = renderItem(item, index);\n  const id = getItemId(item, index);\n  const children = getItemChildren(item, index) || [];\n  const isExpandable = children.length > 0;\n  const isExpanded = isExpandable && expandedItems.includes(id);\n  const nextLevel = level + 1;\n\n  let customIcon: React.ReactNode | undefined = undefined;\n  if (isExpandable && renderItemToggleIcon) {\n    customIcon = renderItemToggleIcon({ expanded: isExpanded });\n  }\n\n  const itemLabelToAnnounce = announcementLabel\n    ? announcementLabel\n    : typeof content === 'string'\n      ? (content as string)\n      : '';\n\n  return (\n    <li\n      role=\"treeitem\"\n      id={id}\n      className={clsx(\n        styles.treeitem,\n        testUtilStyles.treeitem,\n        level > 1 && styles.offset,\n        isExpandable && [testUtilStyles.expandable],\n        isExpanded && [testUtilStyles.expanded]\n      )}\n      aria-expanded={isExpandable ? isExpanded : undefined}\n      aria-level={level}\n      data-testid={`awsui-treeitem-${id}`}\n      data-awsui-tree-item-index={allVisibleItemsIndices[id]}\n    >\n      <div className={styles['treeitem-content-wrapper']}>\n        <div className={styles['expand-toggle-wrapper']}>\n          <div className={styles.toggle}>\n            {isExpandable ? (\n              <ExpandToggleButton\n                isExpanded={isExpanded}\n                customIcon={customIcon}\n                expandButtonLabel={joinStrings(\n                  i18n('i18nStrings.expandButtonLabel', i18nStrings?.expandButtonLabel?.(item)),\n                  itemLabelToAnnounce\n                )}\n                collapseButtonLabel={joinStrings(\n                  i18n('i18nStrings.collapseButtonLabel', i18nStrings?.collapseButtonLabel?.(item)),\n                  itemLabelToAnnounce\n                )}\n                onExpandableItemToggle={() => onItemToggle({ id, item, expanded: !isExpanded })}\n                className={styles['tree-item-focus-target']}\n                disableFocusHighlight={true}\n              />\n            ) : (\n              <FocusTarget ariaLabel={itemLabelToAnnounce} />\n            )}\n          </div>\n        </div>\n\n        <div className={styles['structured-item-wrapper']}>\n          <InternalStructuredItem\n            icon={icon}\n            content={content}\n            secondaryContent={secondaryContent}\n            actions={actions}\n            wrapActions={false}\n            className={styles['tree-item-structured-item']}\n          />\n        </div>\n      </div>\n\n      {isExpanded && children.length && (\n        <ul role=\"group\" className={styles['treeitem-group']}>\n          {children.map((child, index) => {\n            const itemId = getItemId(child, index);\n            return (\n              <InternalTreeItem<T>\n                item={child}\n                index={index}\n                key={itemId}\n                level={nextLevel}\n                expandedItems={expandedItems}\n                i18nStrings={i18nStrings}\n                onItemToggle={onItemToggle}\n                renderItem={renderItem}\n                getItemId={getItemId}\n                getItemChildren={getItemChildren}\n                renderItemToggleIcon={renderItemToggleIcon}\n                allVisibleItemsIndices={allVisibleItemsIndices}\n              />\n            );\n          })}\n        </ul>\n      )}\n    </li>\n  );\n};\n\nexport default InternalTreeItem;\n"]}
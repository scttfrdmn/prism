import type { Activators, SensorContext, SensorInstance, SensorProps, UniqueIdentifier } from '@dnd-kit/core';
import { KeyboardSensorOptions } from '@dnd-kit/core';
import { Coordinates } from '@dnd-kit/utilities';
export type KeyboardAndUAPCoordinateGetter = (event: Event, args: {
  active: UniqueIdentifier;
  currentCoordinates: Coordinates;
  context: SensorContext;
}) => Coordinates | void;
type KeyboardAndUAPSensorOptions = KeyboardSensorOptions & {
  coordinateGetter: KeyboardAndUAPCoordinateGetter;
  onActivation?({
    event
  }: {
    event: KeyboardEvent | MouseEvent;
  }): void;
};
export declare class KeyboardAndUAPSensor implements SensorInstance {
  private props;
  autoScrollEnabled: boolean;
  private referenceCoordinates;
  private listeners;
  private windowListeners;
  constructor(props: SensorProps<KeyboardAndUAPSensorOptions>);
  private attach;
  private handleStart;
  private handleKeyDown;
  private handleCustomDirectionEvent;
  private handleDirectionalMove;
  private handleMove;
  private handleEnd;
  private handleCancel;
  private detach;
  static activators: Activators<KeyboardAndUAPSensorOptions>;
}
export {};
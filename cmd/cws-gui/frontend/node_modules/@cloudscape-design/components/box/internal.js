import { __rest } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import clsx from 'clsx';
import { getBaseProps } from '../internal/base-component';
import WithNativeAttributes from '../internal/utils/with-native-attributes';
import styles from './styles.css.js';
export default function InternalBox(_a) {
    var { variant = 'div', tagOverride, margin = {}, padding = {}, display, textAlign, float, fontSize, fontWeight, color, children, nativeAttributes, __internalRootRef } = _a, props = __rest(_a, ["variant", "tagOverride", "margin", "padding", "display", "textAlign", "float", "fontSize", "fontWeight", "color", "children", "nativeAttributes", "__internalRootRef"]);
    const baseProps = getBaseProps(props);
    const marginsClassNamesSuffices = getClassNamesSuffixes(margin);
    const paddingsClassNamesSuffices = getClassNamesSuffixes(padding);
    const className = clsx(baseProps.className, styles.root, styles.box, styles[`${variant.replace(/^awsui-/, '')}-variant`], marginsClassNamesSuffices.map(suffix => styles[`m-${suffix}`]), paddingsClassNamesSuffices.map(suffix => styles[`p-${suffix}`]), styles[`d-${display}`], styles[`f-${float}`], styles[`color-${color || 'default'}`], styles[`font-size-${fontSize || 'default'}`], styles[`font-weight-${fontWeight || 'default'}`], styles[`t-${textAlign}`]);
    return (React.createElement(WithNativeAttributes, Object.assign({}, baseProps, { tag: getTag(variant, tagOverride), componentName: "Box", nativeAttributes: nativeAttributes, className: className, ref: __internalRootRef }), children));
}
const getClassNamesSuffixes = (value) => {
    if (typeof value === 'string') {
        return [value];
    }
    const sides = ['top', 'right', 'bottom', 'left', 'horizontal', 'vertical'];
    return sides.filter(side => !!value[side]).map(side => `${side}-${value[side]}`);
};
const getTag = (variant, tagOverride) => {
    if (tagOverride) {
        return tagOverride;
    }
    if (variant === 'awsui-value-large') {
        return 'span';
    }
    if (variant === 'awsui-key-label' || variant === 'awsui-gen-ai-label') {
        return 'div';
    }
    return variant;
};
//# sourceMappingURL=internal.js.map
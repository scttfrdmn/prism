import {
  require_react_dom
} from "./chunk-E7WO3H7Z.js";
import {
  require_react
} from "./chunk-JEBY6MC3.js";
import {
  __commonJS,
  __toESM
} from "./chunk-5WRI5ZAA.js";

// node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object2) {
          if (typeof object2 === "object" && object2 !== null) {
            var $$typeof = object2.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object2.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment2 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object2) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object2) || typeOf(object2) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object2) {
          return typeOf(object2) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object2) {
          return typeOf(object2) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object2) {
          return typeOf(object2) === REACT_PROVIDER_TYPE;
        }
        function isElement(object2) {
          return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object2) {
          return typeOf(object2) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment2(object2) {
          return typeOf(object2) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object2) {
          return typeOf(object2) === REACT_LAZY_TYPE;
        }
        function isMemo(object2) {
          return typeOf(object2) === REACT_MEMO_TYPE;
        }
        function isPortal(object2) {
          return typeOf(object2) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object2) {
          return typeOf(object2) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object2) {
          return typeOf(object2) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object2) {
          return typeOf(object2) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment2;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal2;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment2;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/prop-types/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i2 = 0; i2 < 10; i2++) {
          test2["_" + String.fromCharCode(i2)] = i2;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols2;
      for (var s4 = 1; s4 < arguments.length; s4++) {
        from = Object(arguments[s4]);
        for (var key2 in from) {
          if (hasOwnProperty.call(from, key2)) {
            to[key2] = from[key2];
          }
        }
        if (getOwnPropertySymbols) {
          symbols2 = getOwnPropertySymbols(from);
          for (var i2 = 0; i2 < symbols2.length; i2++) {
            if (propIsEnumerable.call(from, symbols2[i2])) {
              to[symbols2[i2]] = from[symbols2[i2]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x3) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values2, location, componentName3, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName3 || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values2, typeSpecName, componentName3, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName3 || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign2 = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x3) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement3, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x3, y4) {
        if (x3 === y4) {
          return x3 !== 0 || 1 / x3 === 1 / y4;
        } else {
          return x3 !== x3 && y4 !== y4;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate3) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props2, propName, componentName3, location, propFullName, secret) {
          componentName3 = componentName3 || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName3 + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName3 + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props2[propName] == null) {
            if (isRequired) {
              if (props2[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName3 + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName3 + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate3(props2, propName, componentName3, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate3(props2, propName, componentName3, location, propFullName, secret) {
          var propValue = props2[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName3 + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate3);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate3(props2, propName, componentName3, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName3 + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props2[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName3 + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName3, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate3);
      }
      function createElementTypeChecker() {
        function validate3(props2, propName, componentName3, location, propFullName) {
          var propValue = props2[propName];
          if (!isValidElement3(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName3 + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate3);
      }
      function createElementTypeTypeChecker() {
        function validate3(props2, propName, componentName3, location, propFullName) {
          var propValue = props2[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName3 + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate3);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate3(props2, propName, componentName3, location, propFullName) {
          if (!(props2[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName4(props2[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName3 + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate3);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate3(props2, propName, componentName3, location, propFullName) {
          var propValue = props2[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key2, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName3 + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate3);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate3(props2, propName, componentName3, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName3 + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props2[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName3 + "`, expected an object."));
          }
          for (var key2 in propValue) {
            if (has(propValue, key2)) {
              var error = typeChecker(propValue, key2, componentName3, location, propFullName + "." + key2, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate3);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate3(props2, propName, componentName3, location, propFullName) {
          var expectedTypes = [];
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            var checkerResult = checker2(props2, propName, componentName3, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName3 + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate3);
      }
      function createNodeChecker() {
        function validate3(props2, propName, componentName3, location, propFullName) {
          if (!isNode4(props2[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName3 + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate3);
      }
      function invalidValidatorError(componentName3, location, propFullName, key2, type) {
        return new PropTypeError(
          (componentName3 || "React class") + ": " + location + " type `" + propFullName + "." + key2 + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate3(props2, propName, componentName3, location, propFullName) {
          var propValue = props2[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName3 + "`, expected `object`."));
          }
          for (var key2 in shapeTypes) {
            var checker = shapeTypes[key2];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName3, location, propFullName, key2, getPreciseType(checker));
            }
            var error = checker(propValue, key2, componentName3, location, propFullName + "." + key2, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate3);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate3(props2, propName, componentName3, location, propFullName) {
          var propValue = props2[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName3 + "`, expected `object`."));
          }
          var allKeys = assign2({}, props2[propName], shapeTypes);
          for (var key2 in allKeys) {
            var checker = shapeTypes[key2];
            if (has(shapeTypes, key2) && typeof checker !== "function") {
              return invalidValidatorError(componentName3, location, propFullName, key2, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key2 + "` supplied to `" + componentName3 + "`.\nBad object: " + JSON.stringify(props2[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key2, componentName3, location, propFullName + "." + key2, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate3);
      }
      function isNode4(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode4);
            }
            if (propValue === null || isValidElement3(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step2;
              if (iteratorFn !== propValue.entries) {
                while (!(step2 = iterator.next()).done) {
                  if (!isNode4(step2.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step2 = iterator.next()).done) {
                  var entry = step2.value;
                  if (entry) {
                    if (!isNode4(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName4(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/react-keyed-flatten-children/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development2 = __commonJS({
  "node_modules/react-keyed-flatten-children/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function typeOf(object2) {
          if (typeof object2 === "object" && object2 !== null) {
            var $$typeof = object2.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object2.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_SERVER_CONTEXT_TYPE:
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment2 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object2) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object2) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer(object2) {
          return typeOf(object2) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object2) {
          return typeOf(object2) === REACT_PROVIDER_TYPE;
        }
        function isElement(object2) {
          return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object2) {
          return typeOf(object2) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment2(object2) {
          return typeOf(object2) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object2) {
          return typeOf(object2) === REACT_LAZY_TYPE;
        }
        function isMemo(object2) {
          return typeOf(object2) === REACT_MEMO_TYPE;
        }
        function isPortal(object2) {
          return typeOf(object2) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object2) {
          return typeOf(object2) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object2) {
          return typeOf(object2) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object2) {
          return typeOf(object2) === REACT_SUSPENSE_TYPE;
        }
        function isSuspenseList(object2) {
          return typeOf(object2) === REACT_SUSPENSE_LIST_TYPE;
        }
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment2;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal2;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.SuspenseList = SuspenseList;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment2;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isSuspenseList = isSuspenseList;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-keyed-flatten-children/node_modules/react-is/index.js
var require_react_is2 = __commonJS({
  "node_modules/react-keyed-flatten-children/node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development2();
    }
  }
});

// node_modules/@cloudscape-design/components/alert/index.js
var import_react58 = __toESM(require_react());

// node_modules/tslib/tslib.es6.mjs
function __rest(s4, e3) {
  var t2 = {};
  for (var p in s4) if (Object.prototype.hasOwnProperty.call(s4, p) && e3.indexOf(p) < 0)
    t2[p] = s4[p];
  if (s4 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p = Object.getOwnPropertySymbols(s4); i2 < p.length; i2++) {
      if (e3.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s4, p[i2]))
        t2[p[i2]] = s4[p[i2]];
    }
  return t2;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step2(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step2(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step2(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step2((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}

// node_modules/@cloudscape-design/components/alert/internal-do-not-use-core.js
var import_react57 = __toESM(require_react());

// node_modules/@cloudscape-design/component-toolkit/internal/base-component/component-metadata.js
var import_react = __toESM(require_react());
var COMPONENT_METADATA_KEY = "__awsuiMetadata__";
function useComponentMetadata(componentName3, packageMetadata, analyticsMetadata) {
  const elementRef = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(() => {
    if (elementRef.current) {
      const pkgMetadata = typeof packageMetadata === "string" ? { version: packageMetadata } : packageMetadata;
      const node = elementRef.current;
      const metadata = Object.assign(Object.assign({}, pkgMetadata), { name: componentName3 });
      if (analyticsMetadata && Object.keys(analyticsMetadata).length > 0) {
        metadata.analytics = analyticsMetadata;
      }
      Object.freeze(metadata);
      Object.defineProperty(node, COMPONENT_METADATA_KEY, { value: metadata, writable: false, configurable: true });
    }
  });
  return elementRef;
}

// node_modules/@cloudscape-design/component-toolkit/internal/base-component/component-metrics.js
var import_react2 = __toESM(require_react());

// node_modules/@cloudscape-design/component-toolkit/internal/base-component/metrics/log-clients.js
var AWSUI_EVENT = "awsui";
function validateLength(value, maxLength) {
  return !value || value.length <= maxLength;
}
var CLogClient = class {
  /**
   * Sends metric but only if Console Platform client logging JS API is present in the page.
   */
  sendMetric(metricName, value, detail) {
    if (!metricName || !/^[a-zA-Z0-9_-]+$/.test(metricName)) {
      console.error(`Invalid metric name: ${metricName}`);
      return;
    }
    if (!validateLength(metricName, 1e3)) {
      console.error(`Metric name ${metricName} is too long`);
      return;
    }
    if (!validateLength(detail, 4e3)) {
      console.error(`Detail for metric ${metricName} is too long: ${detail}`);
      return;
    }
    const wasSent = new PanoramaClient().sendMetric({
      eventContext: metricName,
      eventDetail: detail,
      eventValue: `${value}`,
      timestamp: Date.now()
    });
    if (wasSent) {
      return;
    }
    const AWSC = this.findAWSC(window);
    if (typeof AWSC === "object" && typeof AWSC.Clog === "object" && typeof AWSC.Clog.log === "function") {
      AWSC.Clog.log(metricName, value, detail);
    }
  }
  findAWSC(currentWindow) {
    try {
      if (typeof (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC) === "object") {
        return currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.AWSC;
      }
      if (!currentWindow || currentWindow.parent === currentWindow) {
        return void 0;
      }
      return this.findAWSC(currentWindow.parent);
    } catch (ex) {
      return void 0;
    }
  }
};
var PanoramaClient = class {
  /**
   * Sends metric but only if Console Platform client v2 logging JS API is present in the page.
   */
  sendMetric(metric) {
    const panorama = this.findPanorama(window);
    if (!panorama) {
      return false;
    }
    const payload = Object.assign(Object.assign({ eventType: AWSUI_EVENT, timestamp: Date.now() }, metric), { eventDetail: typeof metric.eventDetail === "object" ? JSON.stringify(metric.eventDetail) : metric.eventDetail, eventValue: typeof metric.eventValue === "object" ? JSON.stringify(metric.eventValue) : metric.eventValue });
    if (!validateLength(payload.eventDetail, 4e3)) {
      this.onMetricError(`Event detail for metric is too long: ${payload.eventDetail}`);
      return true;
    }
    if (!validateLength(payload.eventValue, 4e3)) {
      this.onMetricError(`Event value for metric is too long: ${payload.eventValue}`);
      return true;
    }
    if (!validateLength(payload.eventContext, 4e3)) {
      this.onMetricError(`Event context for metric is too long: ${payload.eventContext}`);
      return true;
    }
    panorama("trackCustomEvent", payload);
    return true;
  }
  onMetricError(message) {
    console.error(message);
    const panorama = this.findPanorama(window);
    if (panorama) {
      panorama("trackCustomEvent", {
        eventType: AWSUI_EVENT,
        eventContext: "awsui-metric-error",
        eventDetail: message.slice(0, 4e3),
        timestamp: Date.now()
      });
    }
  }
  findPanorama(currentWindow) {
    try {
      if (typeof (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.panorama) === "function") {
        return currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow.panorama;
      }
      const panoramaSymbol = Symbol.for("panorama");
      const symbolProperty = currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow[panoramaSymbol];
      if (typeof symbolProperty === "function") {
        return symbolProperty;
      }
      if (!currentWindow || currentWindow.parent === currentWindow) {
        return void 0;
      }
      return this.findPanorama(currentWindow.parent);
    } catch (ex) {
      return void 0;
    }
  }
};

// node_modules/@cloudscape-design/component-toolkit/internal/base-component/metrics/formatters.js
function buildMetricDetail(detail, context) {
  const metricOrigin = typeof AWSUI_METRIC_ORIGIN !== "undefined" ? AWSUI_METRIC_ORIGIN : "main";
  const detailObject = Object.assign({
    o: metricOrigin,
    t: context.theme,
    // React is the only framework we're using.
    f: "react",
    // Remove spaces from the version string for compactness
    v: context.packageVersion.replace(/\s/g, "")
  }, detail);
  return jsonStringify(detailObject);
}
function buildComponentMetricDetail({ componentName: componentName3, action, configuration, packageSource }, context) {
  return buildMetricDetail({
    a: action,
    s: componentName3,
    p: packageSource,
    c: configuration
  }, context);
}
function jsonStringify(detailObject) {
  return JSON.stringify(detailObject, detailSerializer);
}
function detailSerializer(key2, value) {
  if (typeof value === "number" && !Number.isFinite(value)) {
    return `${value}`;
  }
  return value;
}
function getMajorVersion(versionString) {
  const majorVersionMatch = versionString.match(/^(\d+\.\d+)/);
  return majorVersionMatch ? majorVersionMatch[1].replace(".", "") : "";
}

// node_modules/@cloudscape-design/component-toolkit/internal/base-component/metrics/metrics.js
var oneTimeMetrics = /* @__PURE__ */ new Set();
var Metrics = class {
  constructor(...args) {
    this.clog = new CLogClient();
    this.panorama = new PanoramaClient();
    if (args.length === 1) {
      this.context = args[0];
    } else {
      const [packageSource, packageVersion] = args;
      this.context = { packageSource, packageVersion, theme: "unknown" };
    }
  }
  sendComponentMetric(metric) {
    this.sendMetricOnce(`awsui_${metric.componentName}_${this.context.theme.charAt(0)}${getMajorVersion(this.context.packageVersion)}`, 1, buildComponentMetricDetail(metric, this.context));
  }
  /*
   * Calls Console Platform's client logging only the first time the provided metricName is used.
   * Subsequent calls with the same metricName are ignored.
   */
  sendMetricOnce(metricName, value, detail) {
    const key2 = [metricName + value + detail].join("|");
    if (!oneTimeMetrics.has(key2)) {
      this.clog.sendMetric(metricName, value, detail);
      oneTimeMetrics.add(key2);
    }
  }
  /**
   * Calls Console Platform's client v2 logging JS API with provided metric name and detail.
   * Does nothing if Console Platform client logging JS is not present in page.
   */
  sendPanoramaMetric(metric) {
    this.panorama.sendMetric(metric);
  }
  sendOpsMetricObject(metricName, detail) {
    this.sendMetricOnce(metricName, 1, buildMetricDetail(detail, this.context));
  }
  sendOpsMetricValue(metricName, value) {
    this.sendMetricOnce(metricName, value);
  }
  /*
   * Reports a metric value 1 to Console Platform's client logging service to indicate that the
   * component was loaded. The component load event will only be reported as used to client logging
   * service once per page view.
   */
  logComponentsLoaded() {
    this.sendComponentMetric({ componentName: this.context.packageSource, action: "loaded" });
  }
  /*
   * Reports a metric value 1 to Console Platform's client logging service to indicate that the
   * component was used in the page.  A component will only be reported as used to client logging
   * service once per page view.
   */
  logComponentUsed(componentName3, configuration) {
    this.sendComponentMetric({
      action: "used",
      componentName: componentName3,
      configuration,
      packageSource: this.context.packageSource
    });
  }
};

// node_modules/@cloudscape-design/component-toolkit/internal/base-component/component-metrics.js
function useComponentMetrics(componentName3, settings, configuration = { props: {} }) {
  (0, import_react2.useEffect)(() => {
    const metrics2 = new Metrics(settings);
    if (typeof window !== "undefined") {
      metrics2.sendOpsMetricValue("awsui-viewport-width", window.innerWidth || 0);
      metrics2.sendOpsMetricValue("awsui-viewport-height", window.innerHeight || 0);
    }
    metrics2.logComponentsLoaded();
    metrics2.logComponentUsed(componentName3.toLowerCase(), configuration);
  }, []);
}

// node_modules/@cloudscape-design/component-toolkit/internal/base-component/init-awsui-versions.js
function initAwsUiVersions(source, packageVersion) {
  if (typeof window !== "undefined") {
    if (!window.awsuiVersions) {
      window.awsuiVersions = {};
    }
    if (!window.awsuiVersions[source]) {
      window.awsuiVersions[source] = [];
    }
    window.awsuiVersions[source].push(packageVersion);
  }
}

// node_modules/@cloudscape-design/component-toolkit/internal/container-queries/use-resize-observer.js
var import_react_dom = __toESM(require_react_dom());
var import_react4 = __toESM(require_react());

// node_modules/@cloudscape-design/component-toolkit/internal/stable-callback/index.js
var import_react3 = __toESM(require_react());
function useStableCallback(fn) {
  const ref = (0, import_react3.useRef)();
  (0, import_react3.useEffect)(() => {
    ref.current = fn;
  });
  return (0, import_react3.useCallback)((...args) => {
    var _a2;
    return (_a2 = ref.current) === null || _a2 === void 0 ? void 0 : _a2.apply(void 0, args);
  }, []);
}

// node_modules/@cloudscape-design/component-toolkit/internal/container-queries/use-resize-observer.js
function useResizeObserver(elementRef, onObserve) {
  const stableOnObserve = useStableCallback(onObserve);
  (0, import_react4.useLayoutEffect)(
    () => {
      const element = typeof elementRef === "function" ? elementRef() : elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;
      if (element) {
        const rect = element.getBoundingClientRect();
        onObserve(convertElementToEntry(element, rect));
      }
    },
    // This effect is only needed for the first render to provide a synchronous update.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );
  (0, import_react4.useEffect)(() => {
    const element = typeof elementRef === "function" ? elementRef() : elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;
    if (element && typeof ResizeObserver !== "undefined") {
      let connected = true;
      const observer2 = new ResizeObserver((entries) => {
        if (connected) {
          (0, import_react_dom.unstable_batchedUpdates)(() => {
            stableOnObserve(convertResizeObserverEntry(entries[0]));
          });
        }
      });
      observer2.observe(element, { box: "border-box" });
      return () => {
        connected = false;
        observer2.disconnect();
      };
    }
  }, [elementRef, stableOnObserve]);
}
function convertResizeObserverEntry(entry) {
  return {
    target: entry.target,
    contentBoxWidth: entry.contentBoxSize[0].inlineSize,
    contentBoxHeight: entry.contentBoxSize[0].blockSize,
    borderBoxWidth: entry.borderBoxSize[0].inlineSize,
    borderBoxHeight: entry.borderBoxSize[0].blockSize
  };
}
function convertElementToEntry(element, rect) {
  const computedStyle = window.getComputedStyle(element);
  const paddingLeft = parseFloat(computedStyle.paddingLeft) || 0;
  const paddingRight = parseFloat(computedStyle.paddingRight) || 0;
  const paddingTop = parseFloat(computedStyle.paddingTop) || 0;
  const paddingBottom = parseFloat(computedStyle.paddingBottom) || 0;
  const borderLeft = parseFloat(computedStyle.borderLeftWidth) || 0;
  const borderRight = parseFloat(computedStyle.borderRightWidth) || 0;
  const borderTop = parseFloat(computedStyle.borderTopWidth) || 0;
  const borderBottom = parseFloat(computedStyle.borderBottomWidth) || 0;
  return {
    target: element,
    contentBoxWidth: rect.width - paddingLeft - paddingRight - borderLeft - borderRight,
    contentBoxHeight: rect.height - paddingTop - paddingBottom - borderTop - borderBottom,
    borderBoxWidth: rect.width,
    borderBoxHeight: rect.height
  };
}

// node_modules/@cloudscape-design/component-toolkit/internal/singleton-handler/index.js
var import_react5 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());
function createSingletonHandler(factory) {
  const listeners = [];
  const callback = (value) => {
    (0, import_react_dom2.unstable_batchedUpdates)(() => {
      for (const listener of listeners) {
        listener(value);
      }
    });
  };
  let cleanup;
  return function useSingleton(listener) {
    (0, import_react5.useEffect)(() => {
      if (listeners.length === 0) {
        cleanup = factory(callback);
      }
      listeners.push(listener);
      return () => {
        listeners.splice(listeners.indexOf(listener), 1);
        if (listeners.length === 0) {
          cleanup();
          cleanup = void 0;
        }
      };
    }, []);
  };
}
function createSingletonState({ factory, initialState: initialState2 }) {
  const useSingleton = createSingletonHandler(factory);
  return function useSingletonState() {
    const [state, setState] = (0, import_react5.useState)(initialState2);
    useSingleton(setState);
    return state;
  };
}

// node_modules/@cloudscape-design/component-toolkit/internal/visual-mode/index.js
var import_react6 = __toESM(require_react());

// node_modules/@cloudscape-design/component-toolkit/dom/element-types.js
function isNode(target) {
  return target instanceof Node || target !== null && typeof target === "object" && "nodeType" in target && typeof target.nodeType === "number" && "nodeName" in target && typeof target.nodeName === "string" && "parentNode" in target && typeof target.parentNode === "object";
}
function isHTMLElement(target) {
  return target instanceof HTMLElement || isNode(target) && target.nodeType === Node.ELEMENT_NODE && "style" in target && typeof target.style === "object" && typeof target.ownerDocument === "object" && !isSVGElement(target);
}
function isSVGElement(target) {
  return target instanceof SVGElement || isNode(target) && target.nodeType === Node.ELEMENT_NODE && "ownerSVGElement" in target && typeof target.ownerSVGElement === "object";
}

// node_modules/@cloudscape-design/component-toolkit/dom/find-up-until.js
function findUpUntil(from, test) {
  let current = from;
  while (current && !test(current)) {
    current = current.parentElement;
    while (current && !isHTMLElement(current)) {
      current = current.parentElement;
    }
  }
  return current;
}

// node_modules/@cloudscape-design/component-toolkit/dom/node-contains.js
function nodeContains(parent, descendant) {
  if (!parent || !descendant || !isNode(descendant)) {
    return false;
  }
  return parent.contains(descendant);
}

// node_modules/@cloudscape-design/component-toolkit/dom/node-belongs.js
function nodeBelongs(container, target) {
  var _a2;
  if (!isNode(target)) {
    return false;
  }
  const portal = findUpUntil(target, (node) => node === container || isHTMLElement(node) && !!node.dataset.awsuiReferrerId);
  if (portal && portal === container) {
    return true;
  }
  const referrer = isHTMLElement(portal) ? document.getElementById((_a2 = portal.dataset.awsuiReferrerId) !== null && _a2 !== void 0 ? _a2 : "") : null;
  return referrer ? nodeContains(container, referrer) : nodeContains(container, target);
}

// node_modules/@cloudscape-design/component-toolkit/internal/is-development.js
var isDevelopment = true;

// node_modules/@cloudscape-design/component-toolkit/internal/logging.js
var messageCache = /* @__PURE__ */ new Set();
function warnOnce(component, message) {
  if (isDevelopment) {
    const warning = `[AwsUi] [${component}] ${message}`;
    if (!messageCache.has(warning)) {
      messageCache.add(warning);
      console.warn(warning);
    }
  }
}

// node_modules/@cloudscape-design/component-toolkit/internal/global-flags/index.js
var awsuiVisualRefreshFlag = Symbol.for("awsui-visual-refresh-flag");
var awsuiGlobalFlagsSymbol = Symbol.for("awsui-global-flags");
var getTopWindow = () => {
  return window.top;
};
function getGlobal() {
  return typeof window !== "undefined" ? window : globalThis;
}
function readFlag(holder, flagName) {
  var _a2;
  return (_a2 = holder === null || holder === void 0 ? void 0 : holder[awsuiGlobalFlagsSymbol]) === null || _a2 === void 0 ? void 0 : _a2[flagName];
}
var getGlobalFlag = (flagName) => {
  try {
    const ownFlag = readFlag(getGlobal(), flagName);
    if (ownFlag !== void 0) {
      return ownFlag;
    }
    return readFlag(getTopWindow(), flagName);
  } catch (e3) {
    return void 0;
  }
};

// node_modules/@cloudscape-design/component-toolkit/internal/visual-mode/index.js
function safeMatchMedia(element, query) {
  var _a2, _b, _c, _d;
  try {
    const targetWindow = (_b = (_a2 = element.ownerDocument) === null || _a2 === void 0 ? void 0 : _a2.defaultView) !== null && _b !== void 0 ? _b : window;
    return (_d = (_c = targetWindow.matchMedia) === null || _c === void 0 ? void 0 : _c.call(targetWindow, query).matches) !== null && _d !== void 0 ? _d : false;
  } catch (error) {
    console.warn(error);
    return false;
  }
}
function isMotionDisabled(element) {
  return !!findUpUntil(element, (node) => node.classList.contains("awsui-motion-disabled")) || safeMatchMedia(element, "(prefers-reduced-motion: reduce)");
}
function useCurrentMode(elementRef) {
  const [value, setValue] = (0, import_react6.useState)("light");
  useMutationObserver(elementRef, (node) => {
    const darkModeParent = findUpUntil(node, (node2) => node2.classList.contains("awsui-polaris-dark-mode") || node2.classList.contains("awsui-dark-mode"));
    const newValue = darkModeParent ? "dark" : "light";
    if (newValue !== value) {
      setValue(newValue);
    }
  });
  return value;
}
function useDensityMode(elementRef) {
  const [value, setValue] = (0, import_react6.useState)("comfortable");
  useMutationObserver(elementRef, (node) => {
    const compactModeParent = findUpUntil(node, (node2) => node2.classList.contains("awsui-polaris-compact-mode") || node2.classList.contains("awsui-compact-mode"));
    const newValue = compactModeParent ? "compact" : "comfortable";
    if (newValue !== value) {
      setValue(newValue);
    }
  });
  return value;
}
function useReducedMotion(elementRef) {
  const [value, setValue] = (0, import_react6.useState)(false);
  useMutationObserver(elementRef, (node) => {
    const newValue = isMotionDisabled(node);
    if (newValue !== value) {
      setValue(newValue);
    }
  });
  return value;
}
var useMutationSingleton = createSingletonHandler((handler) => {
  const observer2 = new MutationObserver(() => handler());
  observer2.observe(document.body, { attributes: true, subtree: true });
  return () => observer2.disconnect();
});
function useMutationObserver(elementRef, onChange) {
  const handler = useStableCallback(() => {
    if (elementRef.current) {
      onChange(elementRef.current);
    }
  });
  useMutationSingleton(handler);
  (0, import_react6.useEffect)(() => {
    handler();
  }, [handler]);
}
var visualRefreshState = void 0;
function detectVisualRefreshClassName() {
  return typeof document !== "undefined" && !!document.querySelector(".awsui-visual-refresh");
}
function detectVisualRefreshFlag() {
  var _a2, _b;
  const global = getGlobal();
  return (_b = (_a2 = global === null || global === void 0 ? void 0 : global[awsuiVisualRefreshFlag]) === null || _a2 === void 0 ? void 0 : _a2.call(global)) !== null && _b !== void 0 ? _b : false;
}
function useRuntimeVisualRefresh() {
  if (visualRefreshState === void 0) {
    visualRefreshState = detectVisualRefreshClassName();
    if (!visualRefreshState) {
      if (detectVisualRefreshFlag()) {
        visualRefreshState = true;
        if (typeof document !== "undefined") {
          document.body.classList.add("awsui-visual-refresh");
        }
      }
    }
  }
  if (isDevelopment) {
    const newVisualRefreshState = detectVisualRefreshClassName() || detectVisualRefreshFlag();
    if (newVisualRefreshState !== visualRefreshState) {
      warnOnce("Visual Refresh", "Dynamic visual refresh change detected. This is not supported. Make sure `awsui-visual-refresh` is attached to the `<body>` element before initial React render");
    }
  }
  return visualRefreshState;
}

// node_modules/@cloudscape-design/component-toolkit/internal/direction/index.js
function getIsRtl(element) {
  if (!element) {
    return false;
  }
  return getComputedStyle(element).direction === "rtl";
}
function getOffsetInlineStart(element) {
  var _a2, _b;
  const offsetParentWidth = (_b = (_a2 = element.offsetParent) === null || _a2 === void 0 ? void 0 : _a2.clientWidth) !== null && _b !== void 0 ? _b : 0;
  return getIsRtl(element) ? offsetParentWidth - element.offsetWidth - element.offsetLeft : element.offsetLeft;
}
function getScrollInlineStart(element) {
  return getIsRtl(element) ? Math.floor(element.scrollLeft) * -1 : Math.ceil(element.scrollLeft);
}
function getLogicalClientX(event, IsRtl) {
  return IsRtl ? document.documentElement.clientWidth - event.clientX : event.clientX;
}
function getLogicalBoundingClientRect(element) {
  const boundingClientRect = element.getBoundingClientRect();
  const blockSize = boundingClientRect.height;
  const inlineSize = boundingClientRect.width;
  const insetBlockStart = boundingClientRect.top;
  const insetBlockEnd = boundingClientRect.bottom;
  const insetInlineStart = getIsRtl(element) ? document.documentElement.clientWidth - boundingClientRect.right : boundingClientRect.left;
  const insetInlineEnd = insetInlineStart + inlineSize;
  return {
    blockSize,
    inlineSize,
    insetBlockStart,
    insetBlockEnd,
    insetInlineStart,
    insetInlineEnd
  };
}
function getLogicalPageX(event) {
  return event.target instanceof HTMLElement && getIsRtl(event.target) ? document.documentElement.clientWidth - event.pageX : event.pageX;
}

// node_modules/@cloudscape-design/component-toolkit/internal/focus-visible/index.js
var import_react7 = __toESM(require_react());

// node_modules/@cloudscape-design/component-toolkit/internal/keycode.js
var KeyCode;
(function(KeyCode3) {
  KeyCode3[KeyCode3["pageUp"] = 33] = "pageUp";
  KeyCode3[KeyCode3["pageDown"] = 34] = "pageDown";
  KeyCode3[KeyCode3["end"] = 35] = "end";
  KeyCode3[KeyCode3["home"] = 36] = "home";
  KeyCode3[KeyCode3["backspace"] = 8] = "backspace";
  KeyCode3[KeyCode3["space"] = 32] = "space";
  KeyCode3[KeyCode3["down"] = 40] = "down";
  KeyCode3[KeyCode3["left"] = 37] = "left";
  KeyCode3[KeyCode3["right"] = 39] = "right";
  KeyCode3[KeyCode3["up"] = 38] = "up";
  KeyCode3[KeyCode3["escape"] = 27] = "escape";
  KeyCode3[KeyCode3["enter"] = 13] = "enter";
  KeyCode3[KeyCode3["tab"] = 9] = "tab";
  KeyCode3[KeyCode3["shift"] = 16] = "shift";
  KeyCode3[KeyCode3["control"] = 17] = "control";
  KeyCode3[KeyCode3["alt"] = 18] = "alt";
  KeyCode3[KeyCode3["meta"] = 91] = "meta";
})(KeyCode || (KeyCode = {}));
function isModifierKey(event) {
  return [KeyCode.shift, KeyCode.alt, KeyCode.control, KeyCode.meta].indexOf(event.keyCode) > -1;
}

// node_modules/@cloudscape-design/component-toolkit/internal/focus-visible/index.js
var frames = /* @__PURE__ */ new Map();
function setIsKeyboard(active) {
  if (active) {
    for (const currentDocument of frames.keys()) {
      currentDocument.body.setAttribute("data-awsui-focus-visible", "true");
    }
  } else {
    for (const currentDocument of frames.keys()) {
      currentDocument.body.removeAttribute("data-awsui-focus-visible");
    }
  }
}
function handleMousedown() {
  setIsKeyboard(false);
}
function handleKeydown(event) {
  if (!isModifierKey(event)) {
    setIsKeyboard(true);
  }
}
function addListeners(currentDocument) {
  const abortController = new AbortController();
  currentDocument.addEventListener("mousedown", handleMousedown, { signal: abortController.signal });
  currentDocument.addEventListener("keydown", handleKeydown, { signal: abortController.signal });
  return abortController;
}
function useFocusVisible(componentRef) {
  (0, import_react7.useEffect)(() => {
    var _a2, _b;
    const currentDocument = (_b = (_a2 = componentRef === null || componentRef === void 0 ? void 0 : componentRef.current) === null || _a2 === void 0 ? void 0 : _a2.ownerDocument) !== null && _b !== void 0 ? _b : document;
    let frame = frames.get(currentDocument);
    if (frame) {
      frame.componentsCount++;
    } else {
      const abortController = addListeners(currentDocument);
      frame = { componentsCount: 1, abortController };
      frames.set(currentDocument, frame);
    }
    return () => {
      frame.componentsCount--;
      if (frame.componentsCount === 0) {
        frame.abortController.abort();
        frames.delete(currentDocument);
      }
    };
  }, [componentRef]);
}

// node_modules/@cloudscape-design/component-toolkit/internal/single-tab-stop/index.js
var import_react9 = __toESM(require_react());

// node_modules/@cloudscape-design/component-toolkit/internal/use-effect-on-update/index.js
var import_react8 = __toESM(require_react());
function useEffectOnUpdate(callback, deps) {
  const isFirstRender = (0, import_react8.useRef)(true);
  (0, import_react8.useEffect)(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
    } else {
      return callback();
    }
  }, deps);
}

// node_modules/@cloudscape-design/component-toolkit/internal/single-tab-stop/index.js
var defaultValue = {
  navigationActive: false,
  registerFocusable: () => () => {
  },
  resetFocusTarget: () => {
  }
};
var SingleTabStopNavigationContext = (0, import_react9.createContext)(defaultValue);
function useSingleTabStopNavigation(focusable, options) {
  var _a2;
  const { navigationActive: contextNavigationActive, registerFocusable } = (0, import_react9.useContext)(SingleTabStopNavigationContext);
  const [focusTargetActive, setFocusTargetActive] = (0, import_react9.useState)(false);
  const navigationDisabled = (options === null || options === void 0 ? void 0 : options.tabIndex) && (options === null || options === void 0 ? void 0 : options.tabIndex) < 0;
  const navigationActive = contextNavigationActive && !navigationDisabled;
  (0, import_react9.useLayoutEffect)(() => {
    if (navigationActive && focusable && focusable.current) {
      const unregister = registerFocusable(focusable.current, (isFocusable3) => setFocusTargetActive(isFocusable3));
      return () => unregister();
    }
  });
  let tabIndex = options === null || options === void 0 ? void 0 : options.tabIndex;
  if (navigationActive) {
    tabIndex = !focusTargetActive ? -1 : (_a2 = options === null || options === void 0 ? void 0 : options.tabIndex) !== null && _a2 !== void 0 ? _a2 : 0;
  }
  return { navigationActive, tabIndex };
}
function SingleTabStopNavigationReset({ children: children2 }) {
  return import_react9.default.createElement(SingleTabStopNavigationContext.Provider, { value: defaultValue }, children2);
}
var SingleTabStopNavigationProvider = (0, import_react9.forwardRef)(({ navigationActive, children: children2, getNextFocusTarget, isElementSuppressed, onRegisterFocusable, onUnregisterActive }, ref) => {
  const focusables = (0, import_react9.useRef)(/* @__PURE__ */ new Set());
  const focusHandlers = (0, import_react9.useRef)(/* @__PURE__ */ new Map());
  const focusablesState = (0, import_react9.useRef)(/* @__PURE__ */ new WeakMap());
  const focusTarget = (0, import_react9.useRef)(null);
  function onUnregisterFocusable(focusableElement) {
    const isUnregisteringFocusedNode = nodeBelongs(focusableElement, document.activeElement);
    if (isUnregisteringFocusedNode) {
      setTimeout(() => onUnregisterActive === null || onUnregisterActive === void 0 ? void 0 : onUnregisterActive(focusableElement), 0);
    }
  }
  function registerFocusable(focusableElement, changeHandler) {
    const parentUnregister = parentContext.registerFocusable(focusableElement, changeHandler);
    focusables.current.add(focusableElement);
    focusHandlers.current.set(focusableElement, changeHandler);
    const isFocusable3 = !!focusablesState.current.get(focusableElement);
    const newIsFocusable = focusTarget.current === focusableElement || !!(isElementSuppressed === null || isElementSuppressed === void 0 ? void 0 : isElementSuppressed(focusableElement));
    if (newIsFocusable !== isFocusable3) {
      focusablesState.current.set(focusableElement, newIsFocusable);
      changeHandler(newIsFocusable);
    }
    onRegisterFocusable === null || onRegisterFocusable === void 0 ? void 0 : onRegisterFocusable(focusableElement);
    return () => {
      parentUnregister();
      unregisterFocusable(focusableElement);
    };
  }
  function unregisterFocusable(focusableElement) {
    focusables.current.delete(focusableElement);
    focusHandlers.current.delete(focusableElement);
    onUnregisterFocusable === null || onUnregisterFocusable === void 0 ? void 0 : onUnregisterFocusable(focusableElement);
  }
  function updateFocusTarget(forceUpdate = false) {
    var _a2;
    focusTarget.current = getNextFocusTarget();
    for (const focusableElement of focusables.current) {
      const isFocusable3 = (_a2 = focusablesState.current.get(focusableElement)) !== null && _a2 !== void 0 ? _a2 : false;
      const newIsFocusable = focusTarget.current === focusableElement || !!(isElementSuppressed === null || isElementSuppressed === void 0 ? void 0 : isElementSuppressed(focusableElement));
      if (newIsFocusable !== isFocusable3 || forceUpdate) {
        focusablesState.current.set(focusableElement, newIsFocusable);
        focusHandlers.current.get(focusableElement)(newIsFocusable);
      }
    }
  }
  function resetFocusTarget() {
    updateFocusTarget(true);
  }
  function getFocusTarget() {
    return focusTarget.current;
  }
  function isRegistered(element) {
    return focusables.current.has(element);
  }
  (0, import_react9.useImperativeHandle)(ref, () => ({ updateFocusTarget, getFocusTarget, isRegistered }));
  const parentContext = (0, import_react9.useContext)(SingleTabStopNavigationContext);
  const value = parentContext.navigationActive ? parentContext : { navigationReset: false, navigationActive, registerFocusable, updateFocusTarget, resetFocusTarget };
  useEffectOnUpdate(() => {
    if (parentContext.navigationActive) {
      parentContext.resetFocusTarget();
    } else {
      resetFocusTarget();
    }
  }, [parentContext.navigationActive]);
  return import_react9.default.createElement(SingleTabStopNavigationContext.Provider, { value }, children2);
});

// node_modules/@cloudscape-design/component-toolkit/internal/focus-lock-utils/utils.js
var tabbables = [
  "button:enabled",
  "select:enabled",
  "textarea:enabled",
  "input:enabled",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[tabindex]",
  "[contenteditable]",
  "[autofocus]"
].join(",");

// node_modules/@cloudscape-design/component-toolkit/internal/portal/index.js
var import_react10 = __toESM(require_react());
var import_react_dom3 = __toESM(require_react_dom());
function manageDefaultContainer(setState) {
  const newContainer = document.createElement("div");
  document.body.appendChild(newContainer);
  setState(newContainer);
  return () => {
    document.body.removeChild(newContainer);
  };
}
function manageAsyncContainer(getContainer, removeContainer, setState) {
  let newContainer;
  getContainer().then((container) => {
    newContainer = container;
    setState(container);
  }, (error) => {
    console.warn("[AwsUi] [portal]: failed to load portal root", error);
  });
  return () => {
    removeContainer(newContainer);
  };
}
function Portal({ container, getContainer, removeContainer, children: children2 }) {
  const [activeContainer, setActiveContainer] = (0, import_react10.useState)(container !== null && container !== void 0 ? container : null);
  (0, import_react10.useLayoutEffect)(() => {
    if (container) {
      setActiveContainer(container);
      return;
    }
    if (isDevelopment) {
      if (getContainer && !removeContainer) {
        warnOnce("portal", "`removeContainer` is required when `getContainer` is provided");
      }
      if (!getContainer && removeContainer) {
        warnOnce("portal", "`getContainer` is required when `removeContainer` is provided");
      }
    }
    if (getContainer && removeContainer) {
      return manageAsyncContainer(getContainer, removeContainer, setActiveContainer);
    }
    return manageDefaultContainer(setActiveContainer);
  }, [container, getContainer, removeContainer]);
  return activeContainer && (0, import_react_dom3.createPortal)(children2, activeContainer);
}

// node_modules/@cloudscape-design/component-toolkit/internal/use-merge-refs/index.js
var import_react11 = __toESM(require_react());
function useMergeRefs(...refs) {
  return (0, import_react11.useMemo)(() => {
    if (refs.every((ref) => ref === null || ref === void 0)) {
      return null;
    }
    return (value) => {
      refs.forEach((ref) => {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref !== null && ref !== void 0) {
          ref.current = value;
        }
      });
    };
  }, refs);
}

// node_modules/@cloudscape-design/component-toolkit/internal/use-unique-id/index.js
var import_react12 = __toESM(require_react());
var _a;
var counter = 0;
var useRandomId = () => {
  const idRef = (0, import_react12.useRef)(null);
  if (!idRef.current) {
    idRef.current = `${counter++}-${Date.now()}-${Math.round(Math.random() * 1e4)}`;
  }
  return idRef.current;
};
var useId = (_a = import_react12.default.useId) !== null && _a !== void 0 ? _a : useRandomId;
function useUniqueId(prefix) {
  return `${prefix ? prefix : ""}` + useId();
}

// node_modules/@cloudscape-design/component-toolkit/internal/base-component/validate-props.js
function validateProps(componentName3, props2, excludedProps, allowedEnums, systemName) {
  if (!isDevelopment) {
    return;
  }
  for (const [prop, value] of Object.entries(props2)) {
    if (excludedProps.includes(prop)) {
      throw new Error(`${componentName3} does not support "${prop}" property when used in ${systemName} system`);
    }
    if (value && allowedEnums[prop] && !allowedEnums[prop].includes(value)) {
      throw new Error(`${componentName3} does not support "${prop}" with value "${value}" when used in ${systemName} system`);
    }
  }
}

// node_modules/@cloudscape-design/component-toolkit/internal/analytics-metadata/attributes.js
var METADATA_ATTRIBUTE = "data-awsui-analytics";
var LABEL_ATTRIBUTE = "data-awsui-analytics-label";
var activated = getGlobalFlag("analyticsMetadata");
var getAnalyticsMetadataAttribute = (metadata) => activated ? {
  [METADATA_ATTRIBUTE]: JSON.stringify(metadata)
} : {};
var copyAnalyticsMetadataAttribute = (props2) => activated ? {
  [METADATA_ATTRIBUTE]: props2[METADATA_ATTRIBUTE]
} : {};
var getAnalyticsLabelAttribute = (labelIdentifierString) => activated ? {
  [LABEL_ATTRIBUTE]: labelIdentifierString
} : {};

// node_modules/@cloudscape-design/components/internal/analytics/index.js
var FunnelMetrics = {
  funnelStart() {
    return "";
  },
  funnelError() {
  },
  funnelComplete() {
  },
  funnelSuccessful() {
  },
  funnelCancelled() {
  },
  funnelChange() {
  },
  funnelStepStart() {
  },
  funnelStepComplete() {
  },
  funnelStepNavigation() {
  },
  funnelStepError() {
  },
  funnelStepChange() {
  },
  funnelSubStepStart() {
  },
  funnelSubStepComplete() {
  },
  funnelSubStepError() {
  },
  helpPanelInteracted() {
  },
  externalLinkInteracted() {
  }
};
var PerformanceMetrics = {
  tableInteraction() {
  },
  taskCompletionData() {
  },
  modalPerformanceData() {
  }
};
var ComponentMetrics = {
  componentMounted() {
    return "";
  },
  componentUpdated() {
  }
};

// node_modules/@cloudscape-design/components/internal/analytics/hooks/use-funnel.js
var import_react14 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/utils/dom.js
function isContainingBlock(element) {
  var _a2;
  const computedStyle = getComputedStyle(element);
  return !!computedStyle.transform && computedStyle.transform !== "none" || !!computedStyle.perspective && computedStyle.perspective !== "none" || ((_a2 = computedStyle.contain) === null || _a2 === void 0 ? void 0 : _a2.split(" ").some((s4) => ["layout", "paint", "strict", "content"].includes(s4)));
}
function getContainingBlock(startElement) {
  if (!startElement.parentElement) {
    return null;
  }
  return findUpUntil(startElement.parentElement, isContainingBlock);
}
function findUpUntilMultiple({ startElement, tests }) {
  const keys = Object.keys(tests);
  const elements = {};
  let current = startElement;
  while (current && Object.keys(elements).length < keys.length) {
    current = current.parentElement;
    while (current && !isHTMLElement2(current)) {
      current = current.parentElement;
    }
    for (const key2 of keys) {
      if (!elements[key2] && current && tests[key2](current)) {
        elements[key2] = current;
      }
    }
  }
  return elements;
}
function isNode2(target) {
  return target instanceof Node || target !== null && typeof target === "object" && "nodeType" in target && typeof target.nodeType === "number" && "nodeName" in target && typeof target.nodeName === "string" && "parentNode" in target && typeof target.parentNode === "object";
}
function isHTMLElement2(target) {
  return target instanceof HTMLElement || isNode2(target) && target.nodeType === Node.ELEMENT_NODE && "style" in target && typeof target.style === "object" && typeof target.ownerDocument === "object" && !isSVGElement2(target);
}
function isSVGElement2(target) {
  return target instanceof SVGElement || isNode2(target) && target.nodeType === Node.ELEMENT_NODE && "ownerSVGElement" in target && typeof target.ownerSVGElement === "object";
}

// node_modules/@cloudscape-design/components/internal/utils/node-belongs.js
function nodeBelongs2(container, target) {
  var _a2;
  if (!isNode2(target)) {
    return false;
  }
  const portal = findUpUntil(target, (node) => node === container || isHTMLElement2(node) && !!node.dataset.awsuiReferrerId);
  if (portal && portal === container) {
    return true;
  }
  const referrer = isHTMLElement2(portal) ? document.getElementById((_a2 = portal.dataset.awsuiReferrerId) !== null && _a2 !== void 0 ? _a2 : "") : null;
  return referrer ? nodeContains(container, referrer) : nodeContains(container, target);
}

// node_modules/@cloudscape-design/components/internal/analytics/context/analytics-context.js
var import_react13 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/analytics/selectors.js
var DATA_ATTR_FUNNEL = "data-analytics-funnel";
var DATA_ATTR_FUNNEL_INTERACTION_ID = `${DATA_ATTR_FUNNEL}-interaction-id`;
var DATA_ATTR_FUNNEL_KEY = `${DATA_ATTR_FUNNEL}-key`;
var DATA_ATTR_FUNNEL_VALUE = `${DATA_ATTR_FUNNEL}-value`;
var DATA_ATTR_FUNNEL_STEP = `${DATA_ATTR_FUNNEL}-step`;
var DATA_ATTR_FUNNEL_SUBSTEP = `${DATA_ATTR_FUNNEL}-substep`;
var DATA_ATTR_RESOURCE_TYPE = `${DATA_ATTR_FUNNEL}-resource-type`;
var DATA_ATTR_MODAL_ID = "data-analytics-modal-id";
var DATA_ATTR_FIELD_LABEL = "data-analytics-field-label";
var DATA_ATTR_FIELD_ERROR = "data-analytics-field-error";
var DATA_ATTR_ANALYTICS_ALERT = "data-analytics-alert";
var DATA_ATTR_ANALYTICS_FLASHBAR = "data-analytics-flashbar";
var DATA_ATTR_ANALYTICS_SUPPRESS_FLOW_EVENTS = "data-analytics-suppress-flow-events";
var FUNNEL_KEY_FUNNEL_NAME = "funnel-name";
var FUNNEL_KEY_STEP_NAME = "step-name";
var FUNNEL_KEY_SUBSTEP_NAME = "substep-name";
var getFunnelNameSelector = () => `[${DATA_ATTR_FUNNEL_KEY}="${FUNNEL_KEY_FUNNEL_NAME}"]`;
var getFunnelValueSelector = (value) => `[${DATA_ATTR_FUNNEL_VALUE}="${value}"]`;
var getSubStepAllSelector = () => `[${DATA_ATTR_FUNNEL_SUBSTEP}]`;
var getSubStepSelector = (subStepId) => `[${DATA_ATTR_FUNNEL_SUBSTEP}="${subStepId}"]`;
var getSubStepNameSelector = (subStepId) => [subStepId ? getSubStepSelector(subStepId) : "", `[${DATA_ATTR_FUNNEL_KEY}="${FUNNEL_KEY_SUBSTEP_NAME}"]`].join(" ");
var getFieldSlotSeletor = (id) => id ? `[id="${id}"]` : void 0;
var getTextFromSelector = (selector) => {
  var _a2, _b;
  return selector ? (_b = (_a2 = document.querySelector(selector)) === null || _a2 === void 0 ? void 0 : _a2.textContent) === null || _b === void 0 ? void 0 : _b.trim() : void 0;
};

// node_modules/@cloudscape-design/components/internal/analytics/context/analytics-context.js
var FunnelContext = (0, import_react13.createContext)({
  funnelInteractionId: void 0,
  funnelNameSelector: getFunnelNameSelector(),
  setFunnelInteractionId: () => {
  },
  funnelType: "single-page",
  optionalStepNumbers: [],
  totalFunnelSteps: 0,
  funnelSubmit: () => {
  },
  funnelCancel: () => {
  },
  submissionAttempt: 0,
  funnelNextOrSubmitAttempt: () => {
  },
  funnelState: { current: "default" },
  errorCount: { current: 0 },
  loadingButtonCount: { current: 0 },
  latestFocusCleanupFunction: { current: void 0 },
  isInFunnel: false,
  wizardCount: { current: 0 }
});
var FunnelStepContext = (0, import_react13.createContext)({
  stepNameSelector: "",
  stepNumber: 0,
  subStepCount: { current: 0 },
  isInStep: false,
  funnelInteractionId: void 0,
  onStepChange: () => {
  },
  subStepConfiguration: { current: /* @__PURE__ */ new Map() }
});
var FunnelSubStepContext = (0, import_react13.createContext)({
  subStepId: "",
  subStepSelector: "",
  subStepNameSelector: "",
  subStepRef: { current: null },
  isNestedSubStep: false,
  mousePressed: { current: false },
  isFocusedSubStep: { current: false },
  focusCleanupFunction: { current: void 0 }
});
var FunnelNameSelectorContext = (0, import_react13.createContext)(void 0);

// node_modules/@cloudscape-design/components/internal/analytics/hooks/use-funnel.js
var useFunnelSubStep = () => {
  const context = (0, import_react14.useContext)(FunnelSubStepContext);
  const { funnelInteractionId, funnelIdentifier, funnelState, latestFocusCleanupFunction } = useFunnel();
  const { stepNumber, stepIdentifier, stepNameSelector, subStepConfiguration } = useFunnelStep();
  const { subStepIdentifier, subStepId, subStepSelector, subStepNameSelector, subStepRef, isNestedSubStep, mousePressed, isFocusedSubStep, focusCleanupFunction } = context;
  if (isNestedSubStep) {
    return context;
  }
  const onFocus = (event) => __awaiter(void 0, void 0, void 0, function* () {
    var _a2, _b, _c, _d;
    const element = event.target;
    yield new Promise((r2) => setTimeout(r2, 1));
    if (document.activeElement !== element) {
      return;
    }
    if (isFocusedSubStep.current) {
      return;
    }
    isFocusedSubStep.current = true;
    if (funnelInteractionId && subStepId) {
      (_a2 = latestFocusCleanupFunction.current) === null || _a2 === void 0 ? void 0 : _a2.call(latestFocusCleanupFunction);
      const subStepName = getTextFromSelector(subStepNameSelector);
      const stepName = getTextFromSelector(stepNameSelector);
      const subStepNumber = (_d = (_c = (_b = subStepConfiguration.current) === null || _b === void 0 ? void 0 : _b.get(stepNumber)) === null || _c === void 0 ? void 0 : _c.find((step2) => step2.name === subStepName)) === null || _d === void 0 ? void 0 : _d.number;
      FunnelMetrics.funnelSubStepStart({
        funnelIdentifier,
        funnelInteractionId,
        subStepIdentifier,
        subStepSelector,
        subStepNameSelector,
        subStepName,
        subStepNumber,
        stepIdentifier,
        stepNumber,
        stepName,
        stepNameSelector,
        subStepAllSelector: getSubStepAllSelector()
      });
      let cleanupFunctionHasBeenRun = false;
      focusCleanupFunction.current = () => {
        var _a3, _b2, _c2;
        if (cleanupFunctionHasBeenRun) {
          return;
        }
        cleanupFunctionHasBeenRun = true;
        const subStepNumber2 = (_c2 = (_b2 = (_a3 = subStepConfiguration.current) === null || _a3 === void 0 ? void 0 : _a3.get(stepNumber)) === null || _b2 === void 0 ? void 0 : _b2.find((s4) => s4.name === subStepName)) === null || _c2 === void 0 ? void 0 : _c2.number;
        if (funnelState.current !== "cancelled") {
          FunnelMetrics.funnelSubStepComplete({
            funnelIdentifier,
            funnelInteractionId,
            subStepIdentifier,
            subStepSelector,
            subStepNameSelector,
            subStepName,
            subStepNumber: subStepNumber2,
            stepIdentifier,
            stepNumber,
            stepName,
            stepNameSelector,
            subStepAllSelector: getSubStepAllSelector()
          });
        }
      };
      latestFocusCleanupFunction.current = focusCleanupFunction.current;
    }
  });
  const onBlur = (event) => {
    var _a2;
    if (mousePressed.current) {
      return;
    }
    if (!subStepRef.current || !event.relatedTarget || !nodeBelongs2(subStepRef.current, event.relatedTarget)) {
      isFocusedSubStep.current = false;
      if (funnelInteractionId && subStepId && funnelState.current !== "cancelled") {
        (_a2 = focusCleanupFunction.current) === null || _a2 === void 0 ? void 0 : _a2.call(focusCleanupFunction);
      }
    }
  };
  const funnelSubStepProps = funnelInteractionId ? {
    [DATA_ATTR_FUNNEL_SUBSTEP]: subStepId,
    onFocus,
    onBlur
  } : {};
  return Object.assign({ funnelSubStepProps }, context);
};
var useFunnelStep = () => {
  const context = (0, import_react14.useContext)(FunnelStepContext);
  return context;
};
var useFunnelStepRef = () => {
  const funnelStep = useFunnelStep();
  const funnelStepRef = (0, import_react14.useRef)(funnelStep);
  funnelStepRef.current = funnelStep;
  return funnelStepRef;
};
var useFunnel = () => {
  const context = (0, import_react14.useContext)(FunnelContext);
  const funnelProps = context.funnelInteractionId ? {
    [DATA_ATTR_FUNNEL_INTERACTION_ID]: context.funnelInteractionId
  } : {};
  return Object.assign({ funnelProps }, context);
};
var useFunnelNameSelector = () => {
  const context = (0, import_react14.useContext)(FunnelNameSelectorContext);
  return context;
};

// node_modules/@cloudscape-design/components/internal/environment.js
var PACKAGE_SOURCE = "components";
var PACKAGE_VERSION = "3.0.0 (d52c074d)";
var GIT_SHA = "d52c074d";
var THEME = "open-source-visual-refresh";
var SYSTEM = "console";
var ALWAYS_VISUAL_REFRESH = true;

// node_modules/@cloudscape-design/components/internal/base-component/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/base-component/styles.scoped.css";

// node_modules/@cloudscape-design/components/internal/base-component/index.js
initAwsUiVersions(PACKAGE_SOURCE, PACKAGE_VERSION);
function getBaseProps(props2) {
  const baseProps = {};
  Object.keys(props2).forEach((prop) => {
    if (prop === "id" || prop === "className" || prop.match(/^data-/)) {
      baseProps[prop] = props2[prop];
    }
  });
  return baseProps;
}
function getAnalyticsMetadataProps(props2) {
  return Object.assign(Object.assign({}, props2 === null || props2 === void 0 ? void 0 : props2.analyticsMetadata), props2 === null || props2 === void 0 ? void 0 : props2.__analyticsMetadata);
}

// node_modules/@cloudscape-design/components/internal/utils/get-visual-theme.js
var getVisualTheme = (theme, isVR) => {
  if (theme === "polaris" && isVR) {
    return "vr";
  }
  return theme;
};

// node_modules/@cloudscape-design/components/internal/hooks/use-visual-mode/index.js
var useVisualRefresh = ALWAYS_VISUAL_REFRESH ? () => true : useRuntimeVisualRefresh;

// node_modules/@cloudscape-design/components/internal/hooks/use-base-component/styles-check.js
var import_react15 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/metrics.js
var metrics = new Metrics({ packageSource: PACKAGE_SOURCE, packageVersion: PACKAGE_VERSION, theme: THEME });

// node_modules/@cloudscape-design/components/internal/hooks/use-base-component/styles-check.js
function checkMissingStyles(ownerDocument) {
  const result = getComputedStyle(ownerDocument.body).getPropertyValue(`--awsui-version-info-${GIT_SHA}`);
  if (!result) {
    console.error(`Missing AWS-UI CSS for theme "${THEME}", version "${PACKAGE_VERSION}", and git sha "${GIT_SHA}".`);
    metrics.sendOpsMetricObject("awsui-missing-css-asset", {});
  }
}
function idleWithDelay(cb) {
  if (typeof requestIdleCallback !== "function") {
    return;
  }
  let aborted = false;
  setTimeout(() => {
    if (aborted) {
      return;
    }
    requestIdleCallback(() => {
      if (aborted) {
        return;
      }
      cb();
    });
  }, 1e3);
  return () => {
    aborted = true;
  };
}
var checkedDocs = /* @__PURE__ */ new WeakMap();
var checkMissingStylesOnce = (elementRef) => {
  var _a2, _b;
  const ownerDocument = (_b = (_a2 = elementRef.current) === null || _a2 === void 0 ? void 0 : _a2.ownerDocument) !== null && _b !== void 0 ? _b : document;
  const checked = checkedDocs.get(ownerDocument);
  if (!checked) {
    checkMissingStyles(ownerDocument);
    checkedDocs.set(ownerDocument, true);
  }
};
function useMissingStylesCheck(elementRef) {
  (0, import_react15.useEffect)(() => {
    return idleWithDelay(() => checkMissingStylesOnce(elementRef));
  }, [elementRef]);
}

// node_modules/@cloudscape-design/components/internal/hooks/use-base-component/index.js
function useBaseComponent(componentName3, config, analyticsMetadata) {
  const isVisualRefresh = useVisualRefresh();
  const theme = getVisualTheme(THEME, isVisualRefresh);
  useComponentMetrics(componentName3, { packageSource: PACKAGE_SOURCE, packageVersion: PACKAGE_VERSION, theme }, config);
  const elementRef = useComponentMetadata(componentName3, { packageName: PACKAGE_SOURCE, version: PACKAGE_VERSION, theme }, analyticsMetadata);
  useMissingStylesCheck(elementRef);
  useFocusVisible(elementRef);
  return { __internalRootRef: elementRef };
}

// node_modules/@cloudscape-design/components/internal/utils/apply-display-name.js
function applyDisplayName(component, displayName) {
  component.displayName = displayName;
}

// node_modules/@cloudscape-design/components/alert/internal.js
var import_react56 = __toESM(require_react());

// node_modules/clsx/dist/clsx.m.js
function r(e3) {
  var t2, f, n = "";
  if ("string" == typeof e3 || "number" == typeof e3) n += e3;
  else if ("object" == typeof e3) if (Array.isArray(e3)) for (t2 = 0; t2 < e3.length; t2++) e3[t2] && (f = r(e3[t2])) && (n && (n += " "), n += f);
  else for (t2 in e3) e3[t2] && (n && (n += " "), n += t2);
  return n;
}
function clsx() {
  for (var e3, t2, f = 0, n = ""; f < arguments.length; ) (e3 = arguments[f++]) && (t2 = r(e3)) && (n && (n += " "), n += t2);
  return n;
}
var clsx_m_default = clsx;

// node_modules/@cloudscape-design/components/button/internal.js
var import_react48 = __toESM(require_react());

// node_modules/@cloudscape-design/components/i18n/context.js
var import_react16 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/debounce.js
var DEBOUNCE_DEFAULT_DELAY = 200;
function debounce(func, delay = DEBOUNCE_DEFAULT_DELAY) {
  let timeout2;
  return function(...args) {
    if (timeout2) {
      clearTimeout(timeout2);
    }
    timeout2 = setTimeout(() => {
      timeout2 = null;
      func(...args);
    }, delay);
  };
}

// node_modules/@cloudscape-design/components/internal/plugins/helpers/utils.js
function sortByPriority(items) {
  return items.slice().sort((a4, b2) => {
    var _a2, _b;
    if (b2.orderPriority !== a4.orderPriority) {
      return Math.sign(((_a2 = b2.orderPriority) !== null && _a2 !== void 0 ? _a2 : 0) - ((_b = a4.orderPriority) !== null && _b !== void 0 ? _b : 0));
    }
    return b2.id < a4.id ? 1 : -1;
  });
}

// node_modules/@cloudscape-design/components/internal/plugins/controllers/action-buttons.js
var ActionButtonsController = class {
  constructor() {
    this.listeners = [];
    this.actions = [];
    this.scheduleUpdate = debounce(() => {
      this.listeners.forEach((listener) => listener(this.actions));
    }, 0);
    this.registerAction = (action) => {
      this.actions.push(action);
      this.actions = sortByPriority(this.actions);
      this.scheduleUpdate();
    };
    this.clearRegisteredActions = () => {
      this.actions = [];
    };
    this.onActionRegistered = (listener) => {
      this.listeners.push(listener);
      this.scheduleUpdate();
      return () => {
        this.listeners = this.listeners.filter((item) => item !== listener);
      };
    };
  }
  installPublic(api = {}) {
    var _a2;
    (_a2 = api.registerAction) !== null && _a2 !== void 0 ? _a2 : api.registerAction = this.registerAction;
    return api;
  }
  installInternal(internalApi = {}) {
    var _a2, _b;
    (_a2 = internalApi.clearRegisteredActions) !== null && _a2 !== void 0 ? _a2 : internalApi.clearRegisteredActions = this.clearRegisteredActions;
    (_b = internalApi.onActionRegistered) !== null && _b !== void 0 ? _b : internalApi.onActionRegistered = this.onActionRegistered;
    return internalApi;
  }
};

// node_modules/@cloudscape-design/components/internal/plugins/helpers/metrics.js
function reportRuntimeApiLoadMetric() {
  metrics.sendPanoramaMetric({ eventContext: "awsui-runtime-api-loaded", eventDetail: { version: PACKAGE_VERSION } });
}
function reportRuntimeApiWarning(component, message) {
  console.warn("[AwsUi]", `[${component}]`, message);
  metrics.sendPanoramaMetric({
    eventContext: "awsui-runtime-api-warning",
    eventDetail: { version: PACKAGE_VERSION, component, message }
  });
}

// node_modules/@cloudscape-design/components/internal/plugins/controllers/alert-flash-content.js
var _AlertFlashContentController_listeners;
var _AlertFlashContentController_cleanups;
var _AlertFlashContentController_provider;
var _AlertFlashContentController_scheduleUpdate;
var AlertFlashContentController = class {
  constructor() {
    _AlertFlashContentController_listeners.set(this, []);
    _AlertFlashContentController_cleanups.set(this, /* @__PURE__ */ new Map());
    _AlertFlashContentController_provider.set(this, void 0);
    _AlertFlashContentController_scheduleUpdate.set(this, debounce(() => __classPrivateFieldGet(this, _AlertFlashContentController_listeners, "f").forEach((listener) => {
      if (__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f")) {
        const cleanup = listener(__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f"));
        __classPrivateFieldGet(this, _AlertFlashContentController_cleanups, "f").set(listener, cleanup);
      }
    }), 0));
    this.registerContentReplacer = (content) => {
      if (__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f")) {
        reportRuntimeApiWarning("alert-flash-content", `Cannot call \`registerContentReplacer\` with new provider: provider with id "${__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f").id}" already registered.`);
        return;
      }
      __classPrivateFieldSet(this, _AlertFlashContentController_provider, content, "f");
      __classPrivateFieldGet(this, _AlertFlashContentController_scheduleUpdate, "f").call(this);
    };
    this.clearRegisteredReplacer = () => {
      __classPrivateFieldSet(this, _AlertFlashContentController_provider, void 0, "f");
    };
    this.initialCheck = (context) => {
      var _a2;
      if ((_a2 = __classPrivateFieldGet(this, _AlertFlashContentController_provider, "f")) === null || _a2 === void 0 ? void 0 : _a2.initialCheck) {
        return __classPrivateFieldGet(this, _AlertFlashContentController_provider, "f").initialCheck(context);
      }
      return false;
    };
    this.onContentRegistered = (listener) => {
      if (__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f")) {
        const cleanup = listener(__classPrivateFieldGet(this, _AlertFlashContentController_provider, "f"));
        __classPrivateFieldGet(this, _AlertFlashContentController_listeners, "f").push(listener);
        __classPrivateFieldGet(this, _AlertFlashContentController_cleanups, "f").set(listener, cleanup);
      } else {
        __classPrivateFieldGet(this, _AlertFlashContentController_listeners, "f").push(listener);
      }
      return () => {
        var _a2;
        (_a2 = __classPrivateFieldGet(this, _AlertFlashContentController_cleanups, "f").get(listener)) === null || _a2 === void 0 ? void 0 : _a2();
        __classPrivateFieldSet(this, _AlertFlashContentController_listeners, __classPrivateFieldGet(this, _AlertFlashContentController_listeners, "f").filter((item) => item !== listener), "f");
        __classPrivateFieldGet(this, _AlertFlashContentController_cleanups, "f").delete(listener);
      };
    };
  }
  installPublic(api = {}) {
    var _a2;
    (_a2 = api.registerContentReplacer) !== null && _a2 !== void 0 ? _a2 : api.registerContentReplacer = this.registerContentReplacer;
    return api;
  }
  installInternal(internalApi = {}) {
    var _a2, _b, _c;
    (_a2 = internalApi.clearRegisteredReplacer) !== null && _a2 !== void 0 ? _a2 : internalApi.clearRegisteredReplacer = this.clearRegisteredReplacer;
    (_b = internalApi.onContentRegistered) !== null && _b !== void 0 ? _b : internalApi.onContentRegistered = this.onContentRegistered;
    (_c = internalApi.initialCheck) !== null && _c !== void 0 ? _c : internalApi.initialCheck = this.initialCheck;
    return internalApi;
  }
};
_AlertFlashContentController_listeners = /* @__PURE__ */ new WeakMap(), _AlertFlashContentController_cleanups = /* @__PURE__ */ new WeakMap(), _AlertFlashContentController_provider = /* @__PURE__ */ new WeakMap(), _AlertFlashContentController_scheduleUpdate = /* @__PURE__ */ new WeakMap();

// node_modules/@cloudscape-design/components/internal/plugins/controllers/app-layout-widget.js
var _AppLayoutWidgetController_registrations;
var _AppLayoutWidgetController_findPrimary;
var _AppLayoutWidgetController_update;
var _AppLayoutWidgetController_scheduleUpdate;
var AppLayoutWidgetController = class {
  constructor() {
    _AppLayoutWidgetController_registrations.set(this, []);
    _AppLayoutWidgetController_findPrimary.set(this, () => {
      const forcedPrimary = __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").find((registration) => registration.forceType === "primary");
      if (forcedPrimary) {
        return forcedPrimary;
      }
      for (const registration of __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").slice()) {
        if (registration.forceType !== "secondary") {
          return registration;
        }
      }
      return void 0;
    });
    _AppLayoutWidgetController_update.set(this, () => {
      const primary = __classPrivateFieldGet(this, _AppLayoutWidgetController_findPrimary, "f").call(this);
      const discoveredProps = __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").filter((registration) => registration !== primary).map((registration) => registration.props);
      for (const registration of __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f")) {
        if (registration === primary) {
          registration.onChange({
            type: "primary",
            discoveredProps
          });
        } else {
          registration.onChange(registration.secondaryInstance);
        }
      }
    });
    _AppLayoutWidgetController_scheduleUpdate.set(this, debounce(() => __classPrivateFieldGet(this, _AppLayoutWidgetController_update, "f").call(this), 0));
    this.register = (forceType, onRegistrationChange) => {
      const hasForcedPrimary = __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").some((instance) => instance.forceType === "primary");
      if (forceType === "primary" && hasForcedPrimary) {
        throw new Error("Double primary registration attempt");
      }
      const registration = {
        forceType,
        onChange: onRegistrationChange,
        props: {},
        secondaryInstance: {
          type: "secondary",
          update: (props2) => {
            registration.props = props2;
            __classPrivateFieldGet(this, _AppLayoutWidgetController_scheduleUpdate, "f").call(this);
          }
        }
      };
      __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").push(registration);
      __classPrivateFieldGet(this, _AppLayoutWidgetController_update, "f").call(this);
      return () => {
        __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").splice(__classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f").indexOf(registration), 1);
        __classPrivateFieldGet(this, _AppLayoutWidgetController_scheduleUpdate, "f").call(this);
      };
    };
    this.getStateForTesting = () => {
      return {
        registrations: __classPrivateFieldGet(this, _AppLayoutWidgetController_registrations, "f")
      };
    };
    this.installInternal = (internalApi = {}) => {
      var _a2, _b;
      (_a2 = internalApi.register) !== null && _a2 !== void 0 ? _a2 : internalApi.register = this.register;
      (_b = internalApi.getStateForTesting) !== null && _b !== void 0 ? _b : internalApi.getStateForTesting = this.getStateForTesting;
      return internalApi;
    };
  }
};
_AppLayoutWidgetController_registrations = /* @__PURE__ */ new WeakMap(), _AppLayoutWidgetController_findPrimary = /* @__PURE__ */ new WeakMap(), _AppLayoutWidgetController_update = /* @__PURE__ */ new WeakMap(), _AppLayoutWidgetController_scheduleUpdate = /* @__PURE__ */ new WeakMap();

// node_modules/@cloudscape-design/components/internal/plugins/controllers/breadcrumbs.js
var _BreadcrumbsController_appLayoutUpdateCallback;
var _BreadcrumbsController_breadcrumbInstances;
var _BreadcrumbsController_breadcrumbRegistrations;
var _BreadcrumbsController_notifyAppLayout;
var _BreadcrumbsController_notifyBreadcrumbs;
var BreadcrumbsController = class {
  constructor() {
    _BreadcrumbsController_appLayoutUpdateCallback.set(this, null);
    _BreadcrumbsController_breadcrumbInstances.set(this, []);
    _BreadcrumbsController_breadcrumbRegistrations.set(this, []);
    _BreadcrumbsController_notifyAppLayout.set(this, debounce(() => {
      var _a2;
      if (!__classPrivateFieldGet(this, _BreadcrumbsController_appLayoutUpdateCallback, "f")) {
        return;
      }
      const latestBreadcrumb = __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f")[__classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f").length - 1];
      __classPrivateFieldGet(this, _BreadcrumbsController_appLayoutUpdateCallback, "f").call(this, (_a2 = latestBreadcrumb === null || latestBreadcrumb === void 0 ? void 0 : latestBreadcrumb.props) !== null && _a2 !== void 0 ? _a2 : null);
    }, 0));
    _BreadcrumbsController_notifyBreadcrumbs.set(this, debounce(() => {
      __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbRegistrations, "f").forEach((listener) => listener(!!__classPrivateFieldGet(this, _BreadcrumbsController_appLayoutUpdateCallback, "f")));
    }, 0));
    this.registerAppLayout = (changeCallback) => {
      if (__classPrivateFieldGet(this, _BreadcrumbsController_appLayoutUpdateCallback, "f")) {
        return;
      }
      __classPrivateFieldSet(this, _BreadcrumbsController_appLayoutUpdateCallback, changeCallback, "f");
      __classPrivateFieldGet(this, _BreadcrumbsController_notifyBreadcrumbs, "f").call(this);
      return () => {
        __classPrivateFieldSet(this, _BreadcrumbsController_appLayoutUpdateCallback, null, "f");
        __classPrivateFieldGet(this, _BreadcrumbsController_notifyBreadcrumbs, "f").call(this);
      };
    };
    this.registerBreadcrumbs = (props2, onRegistered) => {
      const instance = { props: props2 };
      __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f").push(instance);
      __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbRegistrations, "f").push(onRegistered);
      __classPrivateFieldGet(this, _BreadcrumbsController_notifyBreadcrumbs, "f").call(this);
      __classPrivateFieldGet(this, _BreadcrumbsController_notifyAppLayout, "f").call(this);
      return {
        update: (props3) => {
          instance.props = props3;
          __classPrivateFieldGet(this, _BreadcrumbsController_notifyAppLayout, "f").call(this);
        },
        cleanup: () => {
          __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f").splice(__classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f").indexOf(instance), 1);
          __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbRegistrations, "f").splice(__classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbRegistrations, "f").indexOf(onRegistered), 1);
          __classPrivateFieldGet(this, _BreadcrumbsController_notifyAppLayout, "f").call(this);
        }
      };
    };
    this.getStateForTesting = () => {
      return {
        appLayoutUpdateCallback: __classPrivateFieldGet(this, _BreadcrumbsController_appLayoutUpdateCallback, "f"),
        breadcrumbInstances: __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbInstances, "f"),
        breadcrumbRegistrations: __classPrivateFieldGet(this, _BreadcrumbsController_breadcrumbRegistrations, "f")
      };
    };
  }
  installInternal(internalApi = {}) {
    var _a2, _b, _c;
    (_a2 = internalApi.registerBreadcrumbs) !== null && _a2 !== void 0 ? _a2 : internalApi.registerBreadcrumbs = this.registerBreadcrumbs;
    (_b = internalApi.registerAppLayout) !== null && _b !== void 0 ? _b : internalApi.registerAppLayout = this.registerAppLayout;
    (_c = internalApi.getStateForTesting) !== null && _c !== void 0 ? _c : internalApi.getStateForTesting = this.getStateForTesting;
    return internalApi;
  }
};
_BreadcrumbsController_appLayoutUpdateCallback = /* @__PURE__ */ new WeakMap(), _BreadcrumbsController_breadcrumbInstances = /* @__PURE__ */ new WeakMap(), _BreadcrumbsController_breadcrumbRegistrations = /* @__PURE__ */ new WeakMap(), _BreadcrumbsController_notifyAppLayout = /* @__PURE__ */ new WeakMap(), _BreadcrumbsController_notifyBreadcrumbs = /* @__PURE__ */ new WeakMap();

// node_modules/@cloudscape-design/components/internal/plugins/controllers/drawers.js
var updatableProperties = [
  "badge",
  "resizable",
  "defaultSize",
  "orderPriority",
  "defaultActive",
  "onResize"
];
var DrawersController = class {
  constructor() {
    this.drawers = [];
    this.drawersRegistrationListener = null;
    this.drawerOpenedListener = null;
    this.drawerClosedListener = null;
    this.drawersUpdateListeners = [];
    this.drawerResizeListener = null;
    this.scheduleUpdate = debounce(() => {
      var _a2;
      (_a2 = this.drawersRegistrationListener) === null || _a2 === void 0 ? void 0 : _a2.call(this, this.drawers);
      this.drawersUpdateListeners.forEach((drawersUpdateListeners) => {
        drawersUpdateListeners === null || drawersUpdateListeners === void 0 ? void 0 : drawersUpdateListeners(this.drawers);
      });
    }, 0);
    this.registerDrawer = (config) => {
      if (this.drawers.find((drawer) => drawer.id === config.id)) {
        reportRuntimeApiWarning("app-layout-drawers", `drawer with id "${config.id}" is already registered`);
      }
      this.drawers = this.drawers.concat(config);
      this.scheduleUpdate();
    };
    this.updateDrawer = (_a2) => {
      var _b;
      var { id: drawerId } = _a2, rest = __rest(_a2, ["id"]);
      const drawerIndex = this.drawers.findIndex(({ id }) => id === drawerId);
      const oldDrawerConfig = (_b = this.drawers) === null || _b === void 0 ? void 0 : _b[drawerIndex];
      if (!oldDrawerConfig) {
        throw new Error(`[AwsUi] [runtime drawers] drawer with id ${drawerId} not found`);
      }
      const drawers = this.drawers.slice();
      const updatedDrawer = Object.assign({}, oldDrawerConfig);
      for (const key2 of updatableProperties) {
        if (key2 in rest) {
          updatedDrawer[key2] = rest[key2];
        }
      }
      drawers[drawerIndex] = updatedDrawer;
      this.drawers = drawers;
      this.scheduleUpdate();
    };
    this.onDrawersRegistered = (listener) => {
      if (this.drawersRegistrationListener !== null) {
        reportRuntimeApiWarning("app-layout-drawers", "multiple app layout instances detected when calling onDrawersRegistered");
      }
      this.drawersRegistrationListener = listener;
      this.scheduleUpdate();
      return () => {
        this.drawersRegistrationListener = null;
        this.drawersUpdateListeners = [];
      };
    };
    this.clearRegisteredDrawers = () => {
      this.drawers = [];
    };
    this.onDrawerOpened = (listener) => {
      if (this.drawerOpenedListener !== null) {
        reportRuntimeApiWarning("app-layout-drawers", "multiple app layout instances detected when calling onDrawerOpened");
      }
      this.drawerOpenedListener = listener;
      return () => {
        this.drawerOpenedListener = null;
      };
    };
    this.onDrawerClosed = (listener) => {
      if (this.drawerClosedListener !== null) {
        reportRuntimeApiWarning("app-layout-drawers", "multiple app layout instances detected when calling onDrawerClosed");
      }
      this.drawerClosedListener = listener;
      return () => {
        this.drawerClosedListener = null;
      };
    };
    this.openDrawer = (drawerId, params) => {
      var _a2;
      (_a2 = this.drawerOpenedListener) === null || _a2 === void 0 ? void 0 : _a2.call(this, drawerId, params);
    };
    this.closeDrawer = (drawerId, params) => {
      var _a2;
      (_a2 = this.drawerClosedListener) === null || _a2 === void 0 ? void 0 : _a2.call(this, drawerId, params);
    };
    this.onDrawersUpdated = (listener) => {
      this.drawersUpdateListeners.push(listener);
      return () => {
        this.drawersUpdateListeners = this.drawersUpdateListeners.filter((item) => item !== listener);
      };
    };
    this.onDrawerResize = (listener) => {
      if (this.drawerResizeListener !== null) {
        reportRuntimeApiWarning("app-layout-drawers", "multiple app layout instances detected when calling onDrawerResize");
      }
      this.drawerResizeListener = listener;
      return () => {
        this.drawerResizeListener = null;
      };
    };
    this.resizeDrawer = (drawerId, size) => {
      var _a2;
      (_a2 = this.drawerResizeListener) === null || _a2 === void 0 ? void 0 : _a2.call(this, drawerId, size);
    };
    this.getDrawersState = () => {
      return this.drawers;
    };
  }
  installPublic(api = {}) {
    var _a2, _b, _c, _d, _e;
    (_a2 = api.registerDrawer) !== null && _a2 !== void 0 ? _a2 : api.registerDrawer = this.registerDrawer;
    (_b = api.updateDrawer) !== null && _b !== void 0 ? _b : api.updateDrawer = this.updateDrawer;
    (_c = api.openDrawer) !== null && _c !== void 0 ? _c : api.openDrawer = this.openDrawer;
    (_d = api.closeDrawer) !== null && _d !== void 0 ? _d : api.closeDrawer = this.closeDrawer;
    (_e = api.resizeDrawer) !== null && _e !== void 0 ? _e : api.resizeDrawer = this.resizeDrawer;
    return api;
  }
  installInternal(internalApi = {}) {
    var _a2, _b, _c, _d, _e, _f, _g;
    (_a2 = internalApi.clearRegisteredDrawers) !== null && _a2 !== void 0 ? _a2 : internalApi.clearRegisteredDrawers = this.clearRegisteredDrawers;
    (_b = internalApi.onDrawersRegistered) !== null && _b !== void 0 ? _b : internalApi.onDrawersRegistered = this.onDrawersRegistered;
    (_c = internalApi.onDrawerOpened) !== null && _c !== void 0 ? _c : internalApi.onDrawerOpened = this.onDrawerOpened;
    (_d = internalApi.onDrawerClosed) !== null && _d !== void 0 ? _d : internalApi.onDrawerClosed = this.onDrawerClosed;
    (_e = internalApi.onDrawerResize) !== null && _e !== void 0 ? _e : internalApi.onDrawerResize = this.onDrawerResize;
    (_f = internalApi.onDrawersUpdated) !== null && _f !== void 0 ? _f : internalApi.onDrawersUpdated = this.onDrawersUpdated;
    (_g = internalApi.getDrawersState) !== null && _g !== void 0 ? _g : internalApi.getDrawersState = this.getDrawersState;
    return internalApi;
  }
};

// node_modules/@cloudscape-design/components/internal/plugins/controllers/shared-react-contexts.js
var _SharedReactContexts_registeredContexts;
var SharedReactContexts = class {
  constructor() {
    _SharedReactContexts_registeredContexts.set(this, /* @__PURE__ */ new WeakMap());
    this.createContext = (ReactInstance, contextName) => {
      let contexts = __classPrivateFieldGet(this, _SharedReactContexts_registeredContexts, "f").get(ReactInstance);
      if (!contexts) {
        contexts = /* @__PURE__ */ new Map();
        __classPrivateFieldGet(this, _SharedReactContexts_registeredContexts, "f").set(ReactInstance, contexts);
      }
      let cachedContext = contexts.get(contextName);
      if (!cachedContext) {
        cachedContext = ReactInstance.createContext(void 0);
        contexts.set(contextName, cachedContext);
      }
      return cachedContext;
    };
  }
  installInternal(internalApi = {}) {
    var _a2;
    (_a2 = internalApi.createContext) !== null && _a2 !== void 0 ? _a2 : internalApi.createContext = this.createContext;
    return internalApi;
  }
};
_SharedReactContexts_registeredContexts = /* @__PURE__ */ new WeakMap();

// node_modules/@cloudscape-design/components/internal/plugins/api.js
var storageKey = Symbol.for("awsui-plugin-api");
function findUpApi(currentWindow) {
  try {
    if (currentWindow === null || currentWindow === void 0 ? void 0 : currentWindow[storageKey]) {
      return currentWindow[storageKey];
    }
    if (!currentWindow || currentWindow.parent === currentWindow) {
      return void 0;
    }
    return findUpApi(currentWindow.parent);
  } catch (ex) {
    return void 0;
  }
}
function loadApi() {
  if (typeof window === "undefined") {
    return installApi({});
  }
  const win = window;
  const existingApi = findUpApi(win);
  if (!existingApi) {
    reportRuntimeApiLoadMetric();
  }
  win[storageKey] = installApi(existingApi !== null && existingApi !== void 0 ? existingApi : {});
  return win[storageKey];
}
var { awsuiPlugins, awsuiPluginsInternal } = loadApi();
function installApi(api) {
  var _a2, _b;
  (_a2 = api.awsuiPlugins) !== null && _a2 !== void 0 ? _a2 : api.awsuiPlugins = {};
  (_b = api.awsuiPluginsInternal) !== null && _b !== void 0 ? _b : api.awsuiPluginsInternal = {};
  const appLayoutDrawers = new DrawersController();
  api.awsuiPlugins.appLayout = appLayoutDrawers.installPublic(api.awsuiPlugins.appLayout);
  api.awsuiPluginsInternal.appLayout = appLayoutDrawers.installInternal(api.awsuiPluginsInternal.appLayout);
  const appLayoutController = new AppLayoutWidgetController();
  api.awsuiPluginsInternal.appLayoutWidget = appLayoutController.installInternal(api.awsuiPluginsInternal.appLayoutWidget);
  const alertActions = new ActionButtonsController();
  api.awsuiPlugins.alert = alertActions.installPublic(api.awsuiPlugins.alert);
  api.awsuiPluginsInternal.alert = alertActions.installInternal(api.awsuiPluginsInternal.alert);
  const alertContent = new AlertFlashContentController();
  api.awsuiPlugins.alertContent = alertContent.installPublic(api.awsuiPlugins.alertContent);
  api.awsuiPluginsInternal.alertContent = alertContent.installInternal(api.awsuiPluginsInternal.alertContent);
  const flashContent = new AlertFlashContentController();
  api.awsuiPlugins.flashContent = flashContent.installPublic(api.awsuiPlugins.flashContent);
  api.awsuiPluginsInternal.flashContent = flashContent.installInternal(api.awsuiPluginsInternal.flashContent);
  const flashbarActions = new ActionButtonsController();
  api.awsuiPlugins.flashbar = flashbarActions.installPublic(api.awsuiPlugins.flashbar);
  api.awsuiPluginsInternal.flashbar = flashbarActions.installInternal(api.awsuiPluginsInternal.flashbar);
  const breadcrumbs = new BreadcrumbsController();
  api.awsuiPluginsInternal.breadcrumbs = breadcrumbs.installInternal(api.awsuiPluginsInternal.breadcrumbs);
  const sharedReactContexts = new SharedReactContexts();
  api.awsuiPluginsInternal.sharedReactContexts = sharedReactContexts.installInternal(api.awsuiPluginsInternal.sharedReactContexts);
  return api;
}

// node_modules/@cloudscape-design/components/i18n/context.js
var namespace = "cloudscape-design-components";
var defaultContextValue = {
  locale: null,
  format: (_namespace, _component, _key, provided) => provided
};
var InternalI18nContext = awsuiPluginsInternal.sharedReactContexts.createContext(import_react16.default, "InternalI18nContext");
function useLocale() {
  var _a2;
  return ((_a2 = (0, import_react16.useContext)(InternalI18nContext)) !== null && _a2 !== void 0 ? _a2 : defaultContextValue).locale;
}
function useInternalI18n(componentName3) {
  var _a2;
  const { format: format3 } = (_a2 = (0, import_react16.useContext)(InternalI18nContext)) !== null && _a2 !== void 0 ? _a2 : defaultContextValue;
  return (key2, provided, customHandler) => {
    return format3(namespace, componentName3, key2, provided, customHandler);
  };
}

// node_modules/@cloudscape-design/components/icon/internal.js
var import_react20 = __toESM(require_react());

// node_modules/@cloudscape-design/components/icon-provider/context.js
var import_react18 = __toESM(require_react());

// node_modules/@cloudscape-design/components/icon/generated/icons.js
var import_react17 = __toESM(require_react());
var icons = {
  "add-plus": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M2.01 8h12M8 14l.01-12" })
  ),
  "anchor-link": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M5 8h6M7 12H5c-2.21 0-4-1.79-4-4s1.79-4 4-4h2M9 12h2c2.21 0 4-1.79 4-4s-1.79-4-4-4H9", className: "stroke-linejoin-round" })
  ),
  "angle-down": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m2 5 6 6 6-6", className: "stroke-linejoin-round" })
  ),
  "angle-left-double": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M8 2 2 8l6 6", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M13 2 7 8l6 6", className: "stroke-linejoin-round" })
  ),
  "angle-left": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M11 2 5 8l6 6", className: "stroke-linejoin-round" })
  ),
  "angle-right-double": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m8 2 6 6-6 6", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "m3 2 6 6-6 6", className: "stroke-linejoin-round" })
  ),
  "angle-right": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m5 2 6 6-6 6", className: "stroke-linejoin-round" })
  ),
  "angle-up": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m2 11 6-6 6 6", className: "stroke-linejoin-round" })
  ),
  "arrow-down": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m3 9 5 5 5-5M8 14V1", className: "stroke-linejoin-round" })
  ),
  "arrow-left": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M7 3 2 8l5 5M2 8h13", className: "stroke-linejoin-round" })
  ),
  "arrow-right": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m9 3 5 5-5 5M14 8H1", className: "stroke-linejoin-round" })
  ),
  "arrow-up": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M13 7 8 2 3 7M8 2v13", className: "stroke-linejoin-round" })
  ),
  "at-symbol": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M8.907 1.005c1.273 0 2.363.23 3.268.688.915.449 1.615 1.1 2.1 1.955.483.845.725 1.862.725 3.051 0 .99-.158 1.867-.474 2.628-.315.761-.752 1.356-1.31 1.783-.557.428-1.204.64-1.94.641-.485 0-.906-.088-1.263-.266a1.81 1.81 0 0 1-.806-.75 3.177 3.177 0 0 1-1.025.766c-.41.188-.821.281-1.232.281-.789 0-1.393-.245-1.814-.735-.421-.49-.632-1.194-.632-2.111 0-.626.095-1.22.284-1.784a5.35 5.35 0 0 1 .774-1.502c.326-.437.699-.782 1.12-1.032a2.64 2.64 0 0 1 1.341-.375c.748 0 1.343.277 1.785.83l.094-.236c.053-.146.11-.24.173-.281.074-.052.185-.078.332-.078h.853c.22 0 .33.093.33.28 0 .063-.015.184-.047.361l-.726 4.208a3.133 3.133 0 0 0-.047.422c0 .375.21.563.631.563.348 0 .658-.156.932-.47.284-.312.504-.74.662-1.281.158-.543.237-1.158.237-1.846 0-1.335-.379-2.352-1.136-3.05-.747-.71-1.831-1.064-3.251-1.064-.853 0-1.642.16-2.368.484a5.644 5.644 0 0 0-1.878 1.33 6.032 6.032 0 0 0-1.232 2.018c-.294.771-.441 1.616-.441 2.534 0 1.428.368 2.524 1.104 3.285.737.772 1.795 1.157 3.173 1.157.368 0 .7-.026.994-.078.305-.042.621-.104.948-.187.147-.042.252-.073.315-.094.063-.01.116-.016.158-.016.2 0 .3.11.3.328v.704a.53.53 0 0 1-.08.313c-.041.073-.13.135-.268.187-.757.292-1.61.439-2.556.439-1.252 0-2.33-.24-3.236-.72a4.975 4.975 0 0 1-2.068-2.064C1.236 11.324 1 10.249 1 8.998c0-1.147.195-2.205.584-3.175.4-.98.952-1.83 1.657-2.55A7.598 7.598 0 0 1 5.751 1.6c.968-.397 2.02-.595 3.156-.595Zm-.426 4.74c-.347 0-.663.135-.947.406-.284.271-.515.636-.694 1.095-.169.449-.253.95-.253 1.502 0 1.022.369 1.533 1.105 1.533.474 0 .9-.23 1.279-.688 0-.115.015-.287.047-.517l.521-3.05a2.266 2.266 0 0 0-1.058-.282Z", className: "filled no-stroke" })
  ),
  "audio-full": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M6.47 13.707 4 10.997H1v-6h3l2.47-2.71c.54-.59 1.53-.21 1.53.59v10.23c0 .8-.99 1.19-1.53.59v.01Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M10 12.997c2.76 0 5-2.24 5-5s-2.24-5-5-5" }),
    import_react17.default.createElement("path", { d: "M10 9.997c1.1 0 2-.9 2-2s-.9-2-2-2" })
  ),
  "audio-half": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M7.47 13.41 5 10.7H2v-6h3l2.47-2.71C8.01 1.4 9 1.78 9 2.58v10.23c0 .8-.99 1.19-1.53.59v.01Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M11 9.71c1.1 0 2-.9 2-2s-.9-2-2-2" })
  ),
  "audio-off": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M6.47 13.41 4 10.7H1v-6h3l2.47-2.71C7.01 1.4 8 1.78 8 2.58v10.23c0 .8-.99 1.19-1.53.59v.01ZM11 5.71l3.99 4M15 5.71 11 9.7", className: "stroke-linejoin-round" })
  ),
  "backward-10-seconds": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M5.95 14.01h-.96c-.56 0-1.02-.46-1.02-1.02v-2.96c0-.56.45-1.01 1.01-1.02h.96c.56 0 1.02.45 1.02 1.02v2.96c0 .56-.46 1.02-1.02 1.02h.01Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M1 9v5", className: "stroke-linecap-square" }),
    import_react17.default.createElement("path", { d: "M1 0v5h5", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M9.976 15A7.154 7.154 0 0 0 15 8.164C15 4.204 11.804 1 7.852 1A7.148 7.148 0 0 0 1.5 4.875", className: "stroke-linejoin-round" })
  ),
  "bug": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M12 5.71a4 4 0 0 0-8 0v4a4 4 0 1 0 8 0v-4ZM15 8.71h-3M4 8.71H1M12 6H4M15 3.63l-3 2.08M15 13.78l-3-2.07M1 3.63l3 2.08M1 13.78l3-2.07" })
  ),
  "calendar": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M14 2H2v12h12V2Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M4 6V4h2v2H4ZM7 6V4h2v2H7ZM10 6V4h2v2h-2ZM4 9V7h2v2H4ZM7 9V7h2v2H7ZM4 12v-2h2v2H4ZM7 12v-2h2v2H7ZM10 9V7h2v2h-2Z", className: "filled no-stroke" })
  ),
  "call": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M13.99 7.083c0-2.76-2.24-5-5-5M11.07 10.002c-.6.58-1.55.61-2.14.02l-2.88-2.88a1.49 1.49 0 0 1 0-2.12c.52-.52.52-1.36 0-1.88l-.85-.85a.996.996 0 0 0-1.41 0l-.38.38a4.83 4.83 0 0 0 0 6.82l3.17 3.17a4.83 4.83 0 0 0 6.82 0l.38-.38a.996.996 0 0 0 0-1.41l-.85-.85c-.51-.51-1.34-.52-1.86-.02Z", className: "stroke-linejoin-round" })
  ),
  "caret-down-filled": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m8 11 4-6H4l4 6Z", className: "filled stroke-linejoin-round" })
  ),
  "caret-down": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m8 11 4-6H4l4 6Z", className: "stroke-linejoin-round" })
  ),
  "caret-left-filled": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m5 8 6 4V4L5 8Z", className: "filled stroke-linejoin-round" })
  ),
  "caret-right-filled": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m11 8-6 4V4l6 4Z", className: "filled stroke-linejoin-round" })
  ),
  "caret-up-filled": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m8 5 4 6H4l4-6Z", className: "filled stroke-linejoin-round" })
  ),
  "caret-up": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m8 5 4 6H4l4-6Z", className: "stroke-linejoin-round" })
  ),
  "check": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m1 9 4 4L15 2", className: "stroke-linejoin-round" })
  ),
  "close": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m2 1.71 12 12M2 13.71l12-12", className: "stroke-linejoin-round" })
  ),
  "closed-caption-unavailable": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M15 1H1v14h14V1Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M7.51 10H5c-.55 0-.99-.44-.99-.99V7c0-.55.44-.99.99-.99h1.01M13 10h-2.51c-.55 0-.99-.44-.99-.99V7c0-.55.44-.99.99-.99H13M1 1l14 14", className: "stroke-linejoin-round" })
  ),
  "closed-caption": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M15 1H1v14h14V1Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M7.51 10H5c-.55 0-.99-.44-.99-.99V7c0-.55.44-.99.99-.99h2.51M13 10h-2.51c-.55 0-.99-.44-.99-.99V7c0-.55.44-.99.99-.99H13", className: "stroke-linejoin-round" })
  ),
  "command-prompt": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M15 1H1v14h14V1ZM12 11H9", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M4.71 11.3 8 8 4.71 4.71", className: "stroke-linejoin-round" })
  ),
  "contact": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M14 12c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1H2c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1h4v3l4-3h4Z", className: "stroke-linejoin-round" })
  ),
  "copy": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M15 5H5v10h10V5Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M13 1H1v11", className: "stroke-linejoin-round" })
  ),
  "delete-marker": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M3 7V1h6l4 4v10h-3", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M8 1v5h5M2 15l6-6M2 9.01l6.01 6", className: "stroke-linejoin-round" })
  ),
  "download": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M1 15h14M13 6l-5 5-5-5M8 10V1", className: "stroke-linejoin-round" })
  ),
  "drag-indicator": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "5.5", cy: "2.5", r: "1.5", className: "filled no-stroke" }),
    import_react17.default.createElement("circle", { cx: "5.5", cy: "13.5", r: "1.5", className: "filled no-stroke" }),
    import_react17.default.createElement("circle", { cx: "5.5", cy: "8", r: "1.5", className: "filled no-stroke" }),
    import_react17.default.createElement("circle", { cx: "10.5", cy: "2.5", r: "1.5", className: "filled no-stroke" }),
    import_react17.default.createElement("circle", { cx: "10.5", cy: "13.5", r: "1.5", className: "filled no-stroke" }),
    import_react17.default.createElement("circle", { cx: "10.5", cy: "8", r: "1.5", className: "filled no-stroke" })
  ),
  "edit": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m6.19 13.275-4.19.7.7-4.19 7.2-7.2c.78-.78 2.05-.78 2.83 0l.66.66c.78.78.78 2.05 0 2.83l-7.2 7.2ZM9 3.995l3 3", className: "stroke-linejoin-round" })
  ),
  "ellipsis": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "8", cy: "2.5", r: "1.5", className: "filled no-stroke" }),
    import_react17.default.createElement("circle", { cx: "8", cy: "13.5", r: "1.5", className: "filled no-stroke" }),
    import_react17.default.createElement("circle", { cx: "8", cy: "8", r: "1.5", className: "filled no-stroke" })
  ),
  "envelope": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m1 3 7 6 7-6", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M15 3H1v10h14V3Z", className: "stroke-linejoin-round" })
  ),
  "exit-full-screen": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M1 10.01h5V15M10 15v-5h5M6 1v5H1M15 6h-5V1", className: "stroke-linejoin-round" })
  ),
  "expand": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M14 7V2H9M10 6l4-4M6.99 14H2V9M6 10l-4 4M9 14h5V9M10 10l4 4M2 6.99V2h5M6 6 2 2", className: "stroke-linejoin-round" })
  ),
  "external": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M14 8.01v-6H8M14.02 2 8 8.01M6 2.01H2v12h12v-3.99", className: "stroke-linejoin-round" })
  ),
  "face-happy-filled": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M7.995 1.103a6.887 6.887 0 0 0-6.892 6.892 6.887 6.887 0 0 0 6.892 6.892 6.887 6.887 0 0 0 6.892-6.892 6.887 6.887 0 0 0-6.892-6.892Zm-2.002 7.61A2.148 2.148 0 0 0 8 10.134c.914 0 1.706-.592 2.007-1.423l1.646.596c-.54 1.489-1.966 2.577-3.653 2.577-1.686 0-3.114-1.088-3.653-2.577l1.646-.596ZM7.148 6.03a1.125 1.125 0 1 1-2.25 0 1.125 1.125 0 0 1 2.25 0Zm3.95 0a1.125 1.125 0 1 1-2.25 0 1.125 1.125 0 0 1 2.25 0Z", className: "filled no-stroke" }),
    import_react17.default.createElement("path", { d: "M8 .5A7.495 7.495 0 0 0 .5 8c0 4.146 3.354 7.5 7.5 7.5s7.5-3.354 7.5-7.5S12.146.5 8 .5Zm0 1.559c3.61 0 6.008 2.566 6.008 5.941 0 2.404-2.044 6.014-6.008 6.014-3.818 0-6.01-2.9-6.01-6.014 0-2.603 1.712-5.941 6.01-5.941Z", className: "filled no-stroke" })
  ),
  "face-happy": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react17.default.createElement("path", { d: "M6 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2ZM10.01 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z", className: "filled no-stroke" }),
    import_react17.default.createElement("path", { d: "M10.83 9.01c-.42 1.16-1.53 2-2.83 2s-2.41-.84-2.83-2", className: "stroke-linejoin-round" })
  ),
  "face-neutral-filled": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M7.995 1.103a6.887 6.887 0 0 0-6.892 6.892 6.887 6.887 0 0 0 6.892 6.892 6.887 6.887 0 0 0 6.892-6.892 6.887 6.887 0 0 0-6.892-6.892ZM11 10.875H5v-1.75h6v1.75ZM7.148 6.03a1.125 1.125 0 1 1-2.25 0 1.125 1.125 0 0 1 2.25 0Zm3.95 0a1.125 1.125 0 1 1-2.25 0 1.125 1.125 0 0 1 2.25 0Z", className: "filled no-stroke" }),
    import_react17.default.createElement("path", { d: "M8 .5A7.495 7.495 0 0 0 .5 8c0 4.146 3.354 7.5 7.5 7.5s7.5-3.354 7.5-7.5S12.146.5 8 .5Zm0 1.559c3.61 0 6.008 2.566 6.008 5.941 0 2.404-2.044 6.014-6.008 6.014-3.818 0-6.01-2.9-6.01-6.014 0-2.603 1.712-5.941 6.01-5.941Z", className: "filled no-stroke" })
  ),
  "face-neutral": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react17.default.createElement("path", { d: "M6 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2ZM10.01 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z", className: "filled no-stroke" }),
    import_react17.default.createElement("path", { d: "M5 10h6", className: "stroke-linejoin-round" })
  ),
  "face-sad-filled": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M7.995 1.103a6.887 6.887 0 0 0-6.892 6.892 6.887 6.887 0 0 0 6.892 6.892 6.887 6.887 0 0 0 6.892-6.892 6.887 6.887 0 0 0-6.892-6.892Zm-3.648 9.6C4.887 9.212 6.314 8.124 8 8.124c1.687 0 3.114 1.088 3.653 2.577l-1.646.596A2.148 2.148 0 0 0 8 9.875c-.913 0-1.706.592-2.007 1.423l-1.646-.596ZM7.148 6.03a1.125 1.125 0 1 1-2.25 0 1.125 1.125 0 0 1 2.25 0Zm3.95 0a1.125 1.125 0 1 1-2.25 0 1.125 1.125 0 0 1 2.25 0Z", className: "filled no-stroke" }),
    import_react17.default.createElement("path", { d: "M8 .5A7.495 7.495 0 0 0 .5 8c0 4.146 3.354 7.5 7.5 7.5s7.5-3.354 7.5-7.5S12.146.5 8 .5Zm0 1.559c3.61 0 6.008 2.566 6.008 5.941 0 2.404-2.044 6.014-6.008 6.014-3.818 0-6.01-2.9-6.01-6.014 0-2.603 1.712-5.941 6.01-5.941Z", className: "filled no-stroke" })
  ),
  "face-sad": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react17.default.createElement("path", { d: "M6 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2ZM10.01 7a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z", className: "filled no-stroke" }),
    import_react17.default.createElement("path", { d: "M10.83 11C10.41 9.84 9.3 9 8 9s-2.41.84-2.83 2", className: "stroke-linejoin-round" })
  ),
  "file-open": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M13 15H3V1h6l4 4v10Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M8 1v5h5M3 8l7 7", className: "stroke-linejoin-round" })
  ),
  "file": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M13 15H3V1h6l4 4v10Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M8 1v5h5", className: "stroke-linejoin-round" })
  ),
  "filter": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m1 3 5 5v7l4-2V8l5-5V1H1v2Z", className: "stroke-linejoin-round" })
  ),
  "flag": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M1.99 16V1M2 2.14c4 2.71 8-2.99 12-.28v7.28c-4-2.89-8 2.61-12-.28", className: "stroke-linejoin-round" })
  ),
  "folder-open": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M6 14h8l-3-7H1l2 7h3Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M2 7V2h6l1 2h5c.55 0 1 .45 1 1v8c0 .55-.45 1-1 1h-1", className: "stroke-linejoin-round" })
  ),
  "folder": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M15 5v9H2V2h6l1 2h5c.55 0 1 .45 1 1Z", className: "stroke-linejoin-round" })
  ),
  "forward-10-seconds": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M13.95 14.01h-.96c-.56 0-1.02-.46-1.02-1.02v-2.96c0-.56.45-1.01 1.01-1.02h.96c.56 0 1.02.45 1.02 1.02v2.96c0 .56-.46 1.02-1.02 1.02h.01Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M9 9v5", className: "stroke-linecap-square" }),
    import_react17.default.createElement("path", { d: "M15 0v5h-5", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M6.024 15A7.154 7.154 0 0 1 1 8.164C1 4.204 4.196 1 8.148 1A7.148 7.148 0 0 1 14.5 4.875", className: "stroke-linejoin-round" })
  ),
  "full-screen": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M6 15H1v-5M15 10v5h-5M1 6V1h5M10 1h5v5", className: "stroke-linejoin-round" })
  ),
  "gen-ai": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M6.15 10.365 8 15.005l1.86-4.64 4.64-1.86-4.64-1.85L8 2.005l-1.85 4.65-4.65 1.85 4.65 1.86Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M2.38 4.915c.02.05.07.08.12.08.05 0 .12-.08.12-.08l.66-1.64 1.64-.66a.13.13 0 0 0 .08-.12c0-.05-.08-.12-.08-.12l-1.64-.66-.66-1.64c-.04-.1-.2-.1-.24 0l-.66 1.64-1.64.66a.13.13 0 0 0-.08.12c0 .05.08.12.08.12l1.64.66.66 1.64Z", className: "filled no-stroke" })
  ),
  "globe": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react17.default.createElement("path", { d: "M8 15c1.657 0 3-3.134 3-7S9.657 1 8 1 5 4.134 5 8s1.343 7 3 7ZM1 8h14", className: "stroke-linejoin-round" })
  ),
  "grid-view": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M6 10H2v4h4v-4ZM14 10h-4v4h4v-4ZM6 2H2v4h4V2ZM14 2h-4v4h4V2Z", className: "stroke-linejoin-round" })
  ),
  "group-active": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "11", cy: "7", r: "3", className: "filled no-stroke" }),
    import_react17.default.createElement("circle", { cx: "4.25", cy: "4.25", r: "2.75", className: "filled no-stroke" }),
    import_react17.default.createElement("path", { d: "M6 14a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v2H6v-2Z", className: "filled no-stroke" }),
    import_react17.default.createElement("path", { d: "M7.126 8H3a3 3 0 0 0-3 3v3h5a4 4 0 0 1 3.405-3.956A4 4 0 0 1 7.126 8Z", className: "filled no-stroke" })
  ),
  "group": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M15 16v-2a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2" }),
    import_react17.default.createElement("circle", { cx: "11.25", cy: "6.75", r: "2.25" }),
    import_react17.default.createElement("path", { d: "M6.254 8.99H3a2.005 2.005 0 0 0-2.005 2.005v2h.01v-2C1.005 9.893 1.898 9 3 9h3.261a8.678 8.678 0 0 1-.007-.01Z", className: "filled" }),
    import_react17.default.createElement("circle", { cx: "4.25", cy: "4.25", r: "2.25" })
  ),
  "heart-filled": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M13.49 3.546C12.124 2.31 10.312 2.689 9 4L8 5 7 4c-1.301-1.302-3.114-1.69-4.491-.454a3.409 3.409 0 0 0-.133 4.95L7.952 14s.067.028.086 0l5.576-5.505a3.409 3.409 0 0 0-.133-4.95h.01Z", className: "filled stroke-linejoin-round" })
  ),
  "heart": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M13.752 2.873c-1.44-1.3-3.7-1.1-5.08.28l-.7.7-.7-.7c-1.37-1.37-3.63-1.58-5.08-.28a3.588 3.588 0 0 0-.14 5.21l5.87 5.87s.07.03.09 0l5.87-5.87a3.588 3.588 0 0 0-.14-5.21h.01Z", className: "stroke-linejoin-round" })
  ),
  "history": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M8 16.005c4.422 0 8-3.578 8-8 0-4.422-3.578-8-8-8a7.982 7.982 0 0 0-6 2.708V.005H0v5a1 1 0 0 0 1.008 1l5-.04-.016-2-2.444.02A5.985 5.985 0 0 1 8 2.004c3.318 0 6 2.682 6 6s-2.682 6-6 6-6-2.682-6-6H0c0 4.422 3.578 8 8 8Z", className: "filled no-stroke" }),
    import_react17.default.createElement("path", { d: "M9 10.005a1 1 0 0 0 1-1v-5H8v4H5v2h4Z", className: "filled no-stroke" })
  ),
  "insert-row": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M6 11H1V2h14v4M12 7v8M8 11h8", className: "stroke-linejoin-round" })
  ),
  "key": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M10 1a5.002 5.002 0 0 0-4.6 6.96L1 12.36v2.65h4v-2h3v-2.42c.61.27 1.29.42 2 .42 2.76 0 5-2.24 5-5s-2.24-5-5-5V1Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M10.5 7a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z", className: "filled no-stroke" })
  ),
  "keyboard": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M15 2H1v12h14V2ZM4 11h8M4 8h2M4 5h2M7 8h2M7 5h2M10 8h2M10 5h2" })
  ),
  "list-view": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M5 3h10M5 8h10M5 13h10" }),
    import_react17.default.createElement("path", { d: "M2.01 3.01H2V3h.01v.01ZM2.01 8.01H2V8h.01v.01ZM2.01 13.01H2V13h.01v.01Z", className: "filled" })
  ),
  "location-pin": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M8 8a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M12.01 9c.63-.83 1-1.87 1-3 0-2.76-2.24-5-5-5a5.002 5.002 0 0 0-4 8l4 6 4-6Z", className: "stroke-linejoin-round" })
  ),
  "lock-private": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M12 7H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1ZM5 7V4c0-1.65 1.35-3 3-3s3 1.35 3 3v3", className: "stroke-linejoin-round" })
  ),
  "map": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M2 12.8V2l3.61 1.21V14L2 12.8ZM10.4 12.8V2L14 3.05V14l-3.6-1.2ZM5.61 14l4.79-1.2M5.61 3.21 10.4 2", className: "stroke-linejoin-round" })
  ),
  "menu": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M15 3H1M15 8H1M15 13H1", className: "stroke-linejoin-round" })
  ),
  "microphone-off": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M3 15.01h10M8 15v-3" }),
    import_react17.default.createElement("path", { d: "M6.6 8.43c.36.36.86.59 1.41.59 1.1 0 2-.9 2-2v-2L6.6 8.43Z", className: "filled" }),
    import_react17.default.createElement("path", { d: "M13 7.01c0 2.76-2.24 5-5 5-1.28 0-2.45-.48-3.33-1.28M3 12.01l10-10" }),
    import_react17.default.createElement("path", { d: "M8.01 1.01c-1.1 0-2 .9-2 2v1.67l3.23-3.23c-.34-.27-.77-.44-1.23-.44Z", className: "filled" }),
    import_react17.default.createElement("path", { d: "M3.01 7.01c0 .482-.162 1.263.33 1.75" })
  ),
  "microphone": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M3 15h10M8 15v-3M10 3a2 2 0 1 0-4 0v4a2 2 0 1 0 4 0V3Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M13 7c0 2.76-2.24 5-5 5S3 9.76 3 7", className: "stroke-linejoin-round" })
  ),
  "mini-player": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M14 10.01H8v4h6v-4Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M5 14H2V2h12v5", className: "stroke-linejoin-round" })
  ),
  "multiscreen": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M15 5H5v7h10V5Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M11 3V1.01L1.01 1 1 8h1.998M10 12v3M7 15h6", className: "stroke-linejoin-round" })
  ),
  "notification": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M14 12H2c-.39 0-.63-.44-.41-.76L4 8V5c0-2.21 1.79-4 4-4s4 1.79 4 4v3l2.41 3.24c.22.33-.02.76-.41.76ZM6 13c0 1.1.9 2 2 2s2-.9 2-2", className: "stroke-linejoin-round" })
  ),
  "pause": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M5 2v12M11 2v12", className: "stroke-linejoin-round" })
  ),
  "play": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m4 13.03 8-5-8-5v10Z", className: "stroke-linejoin-round filled" })
  ),
  "redo": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m11 2 4 4-4 4", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M14 6H5.5C3.01 6 1 8.01 1 10.5S3.01 15 5.5 15H8", className: "stroke-linejoin-round" })
  ),
  "refresh": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M15 0v5l-5-.04", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M15 8c0 3.87-3.13 7-7 7s-7-3.13-7-7 3.13-7 7-7c2.79 0 5.2 1.63 6.33 4" })
  ),
  "remove": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M1 5h14M13 5l-1 10H4L3 5M5 5V2h6v3", className: "stroke-linejoin-round" })
  ),
  "resize-area": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M14 4 4 14M10 14l4-4", className: "stroke-linejoin-round" })
  ),
  "script": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M5 4 1 8l4 4M11 4l4 4-4 4", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M7 13 9 3" })
  ),
  "search": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m11 11 4 4M7 12A5 5 0 1 0 7 2a5 5 0 0 0 0 10Z", className: "stroke-linejoin-round" })
  ),
  "security": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M8 1C6.29 2.53 4.13 3.32 2 3.48v3.48c0 2.05.76 3.88 1.71 5.14.92 1.22 2.32 2.21 4.29 2.9 1.97-.69 3.37-1.68 4.29-2.9A8.684 8.684 0 0 0 14 6.96V3.48C11.87 3.32 9.71 2.52 8 1Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M8 4v5M8 10v2" })
  ),
  "send": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m1 1 14 6.92L1 15l3-7-3-7ZM4 8h11", className: "stroke-linejoin-round" })
  ),
  "settings": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M6.11 1.729c.07-.42.44-.729.86-.729h2.02c.43 0 .79.31.86.729l.17.999c.05.29.24.529.5.679.06.03.11.06.17.1.25.15.56.2.84.1l.95-.35c.4-.15.85 0 1.07.38l1.01 1.747c.21.37.13.839-.2 1.108l-.78.64c-.23.189-.34.479-.33.768v.2c0 .29.11.579.33.769l.78.639c.33.27.42.739.2 1.108l-1.01 1.748c-.21.37-.66.529-1.06.38l-.95-.35a.966.966 0 0 0-.84.1c-.06.03-.11.07-.17.1-.26.14-.45.389-.5.679l-.17.998A.878.878 0 0 1 9 15H6.98a.87.87 0 0 1-.86-.729l-.17-.998a.988.988 0 0 0-.5-.68c-.06-.03-.11-.06-.17-.1a.996.996 0 0 0-.84-.1l-.95.35c-.4.15-.85 0-1.06-.38l-1.01-1.747a.873.873 0 0 1 .2-1.108l.78-.64c.23-.189.34-.479.33-.768v-.2c0-.3-.11-.579-.33-.769l-.78-.639a.861.861 0 0 1-.2-1.108l1.01-1.748c.21-.37.66-.529 1.07-.38l.95.35c.28.1.58.06.84-.1.06-.03.11-.07.17-.1.26-.14.45-.379.5-.678l.15-1Z", className: "stroke-linecap-round stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M10 8c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2Z", className: "stroke-linecap-round stroke-linejoin-round" })
  ),
  "share": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M3.5 11a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM12.5 6a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM12.5 15a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5ZM10.326 4.7 5.678 7.293M10.223 11.483l-4.448-1.96" })
  ),
  "shrink": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M10 1v5h5M10.71 5.29 15 1M1 10h5v5M5.3 10.7 1 15", className: "stroke-linejoin-round" })
  ),
  "slash": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M10.969 5.059 7 12.005l-1.736-.992 3.968-6.947 1.737.993Z", className: "filled no-stroke" }),
    import_react17.default.createElement("path", { d: "M14 .005a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-12a2 2 0 0 1 2-2h12Zm-12 14h12v-12H2v12Z", className: "filled no-stroke" })
  ),
  "star-filled": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m8 1 2.16 4.38 4.84.71-3.5 3.41.83 4.81L8 12.04l-4.33 2.27.83-4.81L1 6.09l4.84-.71L8 1Z", className: "filled stroke-linejoin-round" })
  ),
  "star-half": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M8 1v11.04l-4.33 2.27.83-4.81L1 6.09l4.84-.71L8 1Z", className: "filled no-stroke" }),
    import_react17.default.createElement("path", { d: "m8 1 2.16 4.38 4.84.71-3.5 3.41.83 4.81L8 12.04l-4.33 2.27.83-4.81L1 6.09l4.84-.71L8 1Z", className: "stroke-linejoin-round" })
  ),
  "star": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m8 1 2.16 4.38 4.84.71-3.5 3.41.83 4.81L8 12.04l-4.33 2.27.83-4.81L1 6.09l4.84-.71L8 1Z", className: "stroke-linejoin-round" })
  ),
  "status-in-progress": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react17.default.createElement("path", { d: "M9 7H7v2h2V7ZM6 7H4v2h2V7ZM12 7h-2v2h2V7Z", className: "filled no-stroke" })
  ),
  "status-info": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react17.default.createElement("path", { d: "M8 12V7M8 6V4" })
  ),
  "status-negative": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react17.default.createElement("path", { d: "m5.5 5.5 5 5M10.5 5.5l-5 5" })
  ),
  "status-pending": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react17.default.createElement("path", { d: "M8 4v5H4", className: "stroke-linejoin-round" })
  ),
  "status-positive": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react17.default.createElement("path", { d: "M4.5 7.5 7 10l4-5", className: "stroke-linejoin-round" })
  ),
  "status-stopped": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react17.default.createElement("path", { d: "M5 8h6" })
  ),
  "status-warning": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M8 5v4M8 10v2M6.52 1.88l-5.33 9.76c-.13.23-.19.5-.19.76 0 .88.71 1.59 1.59 1.59H13.4c.88 0 1.59-.71 1.59-1.59 0-.27-.07-.53-.19-.76L9.48 1.88C9.18 1.34 8.62 1 8 1s-1.18.34-1.48.88Z", className: "stroke-linejoin-round" })
  ),
  "subtract-minus": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M2 8h12", className: "stroke-linejoin-round" })
  ),
  "suggestions": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M8.12 15h-2l-.99-5.02C3.92 9.07 3.12 7.63 3.12 6c0-2.76 2.24-5 5-5s5 2.24 5 5c0 1.63-.8 3.07-2.01 3.98L10.12 15h-2ZM11.12 12h-6", className: "stroke-linejoin-round" })
  ),
  "support": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "8", cy: "8", r: "7" }),
    import_react17.default.createElement("path", { d: "M5.75 6.338c.13-1.178.811-2.339 2.37-2.339 1.472 0 2.435 1.312 2.042 2.468-.215.633-.916 1.132-1.385 1.578C8.162 8.631 8 9.2 8 10" }),
    import_react17.default.createElement("path", { d: "M8 12.01h.01V12H8v.01Z", className: "filled" })
  ),
  "thumbs-down-filled": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M1 1h2.01v9H1c-.55 0-1-.45-1-1V2c0-.55.45-1 1-1Zm14.14 6.22-1.69-5.03C13.21 1.48 12.54 1 11.79 1H4.01v9l3.23 3.88c.6.72 1.77.29 1.77-.64V9h4.86c.92 0 1.57-.91 1.28-1.78h-.01Z", className: "filled no-stroke" })
  ),
  "thumbs-down": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M9 13.13V9h4.12c.6 0 1.02-.59.83-1.16l-1.6-4.77A1.58 1.58 0 0 0 10.86 2H1v8h4l2.41 3.61c.48.72 1.59.38 1.59-.48ZM5 2v8", className: "stroke-linejoin-round" })
  ),
  "thumbs-up-filled": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M3 15.001H1c-.55 0-1-.45-1-1v-7c0-.55.45-1 1-1h2v9Zm10.86-8H9v-4.24c0-.93-1.17-1.36-1.77-.64L4 6.001v9h7.78c.75 0 1.42-.48 1.66-1.19l1.69-5.03c.29-.87-.36-1.78-1.28-1.78h.01Z", className: "filled no-stroke" })
  ),
  "thumbs-up": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M9 2.871v4.13h4.12c.6 0 1.02.59.83 1.16l-1.6 4.77a1.58 1.58 0 0 1-1.49 1.07H1v-8h4l2.41-3.61c.48-.72 1.59-.38 1.59.48ZM5 14.001v-8", className: "stroke-linejoin-round" })
  ),
  "ticket": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M13 8c0-1.1.9-2 2-2V3H1v3c1.1 0 2 .9 2 2s-.9 2-2 2v3h14v-3c-1.1 0-2-.9-2-2Z", className: "stroke-linejoin-round" })
  ),
  "transcript": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M15 1H1v14h14V1ZM9 10H4M12 6H4", className: "stroke-linejoin-round" })
  ),
  "treeview-collapse": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M14 2H2v12h12V2ZM5 8h6", className: "stroke-linejoin-round" })
  ),
  "treeview-expand": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M14 2H2v12h12V2ZM8 5v6M5 8h6", className: "stroke-linejoin-round" })
  ),
  "undo": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M5 2 1 6l4 4", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M2 6h8.5c2.49 0 4.5 2.01 4.5 4.5S12.99 15 10.5 15H8", className: "stroke-linejoin-round" })
  ),
  "unlocked": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M11 7H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1ZM9 7V4c0-1.65 1.35-3 3-3s3 1.35 3 3", className: "stroke-linejoin-round" })
  ),
  "upload-download": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m7 7-3 3-3-3M4 9V1M15 9l-3-3-3 3M12 7v8M0 14h8M8 2h8", className: "stroke-linejoin-round" })
  ),
  "upload": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M1 1h14M13 10 8 5l-5 5M8 6v9", className: "stroke-linejoin-round" })
  ),
  "user-profile-active": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M8 6a2.5 2.5 0 0 0 0-5 2.5 2.5 0 0 0 0 5ZM2 15.5v-3c0-1.66 1.34-3 3-3h6c1.66 0 3 1.34 3 3v3", className: "filled" }),
    import_react17.default.createElement("path", { d: "M2 15.5v-3c0-1.66 1.34-3 3-3h6c1.66 0 3 1.34 3 3v3", className: "stroke-linejoin-round" })
  ),
  "user-profile": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M8 7c1.66 0 3-1.34 3-3S9.66 1 8 1 5 2.34 5 4s1.34 3 3 3Z" }),
    import_react17.default.createElement("path", { d: "M2 16v-3c0-1.66 1.34-3 3-3h6c1.66 0 3 1.34 3 3v3", className: "stroke-linejoin-round" })
  ),
  "video-camera-off": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M11 6V3H1v9.97h10V9.98L15 13V3.04L11 6ZM4 6l4 4M8 6.01 4 10", className: "stroke-linejoin-round" })
  ),
  "video-camera-on": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M11 6V3H1v9.97L11 13v-3l4 3V3.04L11 6Z", className: "stroke-linejoin-round" })
  ),
  "video-camera-unavailable": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M11 5.99V3H1v9.97h10V9.98L15 13V3.04l-4 2.95ZM4 8h4", className: "stroke-linejoin-round" })
  ),
  "video-off": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "8", cy: "7", r: "5" }),
    import_react17.default.createElement("path", { d: "M3 15h10M8 15v-3M6.01 5.01 10 9M10 5 6 9", className: "stroke-linejoin-round" })
  ),
  "video-on": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "8", cy: "7", r: "5" }),
    import_react17.default.createElement("circle", { cx: "8", cy: "7", r: "2", className: "filled no-stroke" }),
    import_react17.default.createElement("path", { d: "M3 15h10M8 15v-3" })
  ),
  "video-unavailable": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "8", cy: "7", r: "5" }),
    import_react17.default.createElement("path", { d: "M3 15h10M6 7h4M8 15v-3" })
  ),
  "view-full": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M15 1H1v14h14V1Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M11.5 4h-7a.5.5 0 0 0-.5.5v7a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.5-.5Z", className: "filled no-stroke" })
  ),
  "view-horizontal": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M15 15V1H1v14h14Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M11.5 7h-7a.5.5 0 0 0-.5.5v4a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5v-4a.5.5 0 0 0-.5-.5Z", className: "filled no-stroke" })
  ),
  "view-vertical": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M15 1H1v14h14V1Z", className: "stroke-linejoin-round" }),
    import_react17.default.createElement("path", { d: "M11.5 4h-4a.5.5 0 0 0-.5.5v7a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.5-.5Z", className: "filled no-stroke" })
  ),
  "zoom-in": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("circle", { cx: "7", cy: "7", r: "6" }),
    import_react17.default.createElement("path", { d: "m11 11 4 4M7 4v6M4 7l6 .01" })
  ),
  "zoom-out": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "m11 11 4 4" }),
    import_react17.default.createElement("circle", { cx: "7", cy: "7", r: "6" }),
    import_react17.default.createElement("path", { d: "m4 7 6 .01" })
  ),
  "zoom-to-fit": import_react17.default.createElement(
    "svg",
    { viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true" },
    import_react17.default.createElement("path", { d: "M11 5H5v6h6V5ZM6 1H1v5M10 1h5v5M6 15H1v-5M10 15h5v-5", className: "stroke-linejoin-round" })
  )
};
var icons_default = icons;

// node_modules/@cloudscape-design/components/icon-provider/context.js
var InternalIconContext = (0, import_react18.createContext)(icons_default);

// node_modules/@cloudscape-design/components/internal/utils/with-native-attributes.js
var import_react19 = __toESM(require_react());
function processAttributes(rest, nativeAttributes, componentName3, skipWarnings) {
  return Object.entries(nativeAttributes || {}).reduce((acc, [key2, value]) => {
    if (key2 === "className") {
      acc[key2] = clsx_m_default(rest.className, value);
    } else if (key2 === "style") {
      acc[key2] = Object.assign(Object.assign({}, rest.style), value);
    } else if (key2.match(/^on[A-Z]/) && typeof value === "function" && key2 in rest) {
      acc[key2] = (event) => {
        value(event);
        if (!event.defaultPrevented) {
          rest[key2](event);
        }
      };
    } else {
      if (key2 in rest && (!skipWarnings || skipWarnings !== true && !skipWarnings.includes(key2))) {
        warnOnce(componentName3, `Overriding native attribute [${key2}] which has a Cloudscape-provided value`);
      }
      acc[key2] = value;
    }
    return acc;
  }, Object.assign({}, rest));
}
var with_native_attributes_default = import_react19.default.forwardRef((_a2, ref) => {
  var { tag, nativeAttributes, children: children2, skipWarnings, componentName: componentName3 } = _a2, rest = __rest(_a2, ["tag", "nativeAttributes", "children", "skipWarnings", "componentName"]);
  const Tag = tag;
  const processedAttributes = processAttributes(rest, nativeAttributes, componentName3, skipWarnings);
  return import_react19.default.createElement(Tag, Object.assign({}, processedAttributes, { ref }), children2);
});

// node_modules/@cloudscape-design/components/icon/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/icon/styles.scoped.css";
var styles_css_default = {
  "icon": "awsui_icon_h11ix_6vdye_189",
  "icon-flex-height": "awsui_icon-flex-height_h11ix_6vdye_197",
  "size-small": "awsui_size-small_h11ix_6vdye_225",
  "size-small-mapped-height": "awsui_size-small-mapped-height_h11ix_6vdye_229",
  "size-normal": "awsui_size-normal_h11ix_6vdye_244",
  "size-normal-mapped-height": "awsui_size-normal-mapped-height_h11ix_6vdye_248",
  "size-medium": "awsui_size-medium_h11ix_6vdye_263",
  "size-medium-mapped-height": "awsui_size-medium-mapped-height_h11ix_6vdye_267",
  "size-big": "awsui_size-big_h11ix_6vdye_282",
  "size-big-mapped-height": "awsui_size-big-mapped-height_h11ix_6vdye_286",
  "size-large": "awsui_size-large_h11ix_6vdye_301",
  "size-large-mapped-height": "awsui_size-large-mapped-height_h11ix_6vdye_305",
  "variant-normal": "awsui_variant-normal_h11ix_6vdye_320",
  "variant-disabled": "awsui_variant-disabled_h11ix_6vdye_323",
  "variant-inverted": "awsui_variant-inverted_h11ix_6vdye_326",
  "variant-subtle": "awsui_variant-subtle_h11ix_6vdye_329",
  "variant-warning": "awsui_variant-warning_h11ix_6vdye_332",
  "variant-error": "awsui_variant-error_h11ix_6vdye_335",
  "variant-success": "awsui_variant-success_h11ix_6vdye_338",
  "variant-link": "awsui_variant-link_h11ix_6vdye_341",
  "name-angle-left-double": "awsui_name-angle-left-double_h11ix_6vdye_344",
  "name-angle-left": "awsui_name-angle-left_h11ix_6vdye_344",
  "name-angle-right-double": "awsui_name-angle-right-double_h11ix_6vdye_346",
  "name-angle-right": "awsui_name-angle-right_h11ix_6vdye_346",
  "name-arrow-left": "awsui_name-arrow-left_h11ix_6vdye_348",
  "name-arrow-right": "awsui_name-arrow-right_h11ix_6vdye_349",
  "name-caret-left-filled": "awsui_name-caret-left-filled_h11ix_6vdye_350",
  "name-caret-right-filled": "awsui_name-caret-right-filled_h11ix_6vdye_351",
  "name-audio-full": "awsui_name-audio-full_h11ix_6vdye_352",
  "name-audio-half": "awsui_name-audio-half_h11ix_6vdye_353",
  "name-audio-off": "awsui_name-audio-off_h11ix_6vdye_354",
  "name-external": "awsui_name-external_h11ix_6vdye_355",
  "name-redo": "awsui_name-redo_h11ix_6vdye_356",
  "name-resize-area": "awsui_name-resize-area_h11ix_6vdye_357",
  "name-send": "awsui_name-send_h11ix_6vdye_358",
  "name-shrink": "awsui_name-shrink_h11ix_6vdye_359",
  "name-undo": "awsui_name-undo_h11ix_6vdye_360",
  "name-view-vertical": "awsui_name-view-vertical_h11ix_6vdye_361",
  "badge": "awsui_badge_h11ix_6vdye_385"
};

// node_modules/@cloudscape-design/components/icon/internal.js
function iconSizeMap(height) {
  if (height === null) {
    return "normal";
  }
  if (height >= 50) {
    return "large";
  } else if (height >= 36) {
    return "big";
  } else if (height >= 24) {
    return "medium";
  } else if (height <= 16) {
    return "small";
  } else {
    return "normal";
  }
}
var InternalIcon = (_a2) => {
  var { name, size = "normal", variant = "normal", url, alt, ariaLabel, svg, badge, nativeAttributes, __internalRootRef } = _a2, props2 = __rest(_a2, ["name", "size", "variant", "url", "alt", "ariaLabel", "svg", "badge", "nativeAttributes", "__internalRootRef"]);
  const icons2 = (0, import_react20.useContext)(InternalIconContext);
  const iconRef = (0, import_react20.useRef)(null);
  useVisualRefresh();
  const [parentHeight, setParentHeight] = (0, import_react20.useState)(null);
  const contextualSize = size === "inherit";
  const iconSize = contextualSize ? iconSizeMap(parentHeight) : size;
  const inlineStyles = contextualSize && parentHeight !== null ? { height: `${parentHeight}px` } : {};
  const baseProps = getBaseProps(props2);
  baseProps.className = clsx_m_default(baseProps.className, styles_css_default.icon, contextualSize && styles_css_default["icon-flex-height"], badge && styles_css_default.badge, !contextualSize && styles_css_default[`size-${iconSize}-mapped-height`], styles_css_default[`size-${iconSize}`], styles_css_default[`variant-${variant}`], styles_css_default[`name-${name}`]);
  (0, import_react20.useLayoutEffect)(() => {
    if (!contextualSize || !iconRef.current) {
      return;
    }
    const { lineHeight } = getComputedStyle(iconRef.current);
    const newParentHeight = parseInt(lineHeight, 10);
    setParentHeight(newParentHeight);
  });
  const mergedRef = useMergeRefs(iconRef, __internalRootRef);
  const hasAriaLabel = typeof ariaLabel === "string";
  const labelAttributes = hasAriaLabel ? { role: "img", "aria-label": ariaLabel } : {};
  if (svg) {
    if (url) {
      warnOnce("Icon", "You have specified both `url` and `svg`. `svg` will take precedence and `url` will be ignored.");
    }
    return import_react20.default.createElement(with_native_attributes_default, Object.assign({}, baseProps, labelAttributes, { tag: "span", componentName: "Icon", nativeAttributes, ref: mergedRef, "aria-hidden": !hasAriaLabel, style: inlineStyles }), svg);
  }
  if (url) {
    return import_react20.default.createElement(
      with_native_attributes_default,
      Object.assign({}, baseProps, { tag: "span", componentName: "Icon", nativeAttributes, ref: mergedRef, style: inlineStyles }),
      import_react20.default.createElement("img", { src: url, alt: ariaLabel !== null && ariaLabel !== void 0 ? ariaLabel : alt })
    );
  }
  const validIcon = name && Object.prototype.hasOwnProperty.call(icons2, name);
  function iconMap(name2) {
    if (name2 === "gen-ai" && iconSize === "small") {
      return import_react20.default.createElement(
        "svg",
        { width: "12", height: "12", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", focusable: "false", "aria-hidden": "true", "data-testid": "gen-ai-filled" },
        import_react20.default.createElement("path", { d: "m8 4.4 1.018 2.582L11.6 8 9.018 9.018 8 11.6 6.982 9.018 4.4 8l2.582-1.018L8 4.4ZM2.405 2.41l.002-.003.003-.002-.003-.002-.002-.003-.002.003-.003.002.003.002.002.003Z", className: "filled" })
      );
    } else {
      return icons2[name2];
    }
  }
  return import_react20.default.createElement(with_native_attributes_default, Object.assign({}, baseProps, labelAttributes, { tag: "span", componentName: "Icon", nativeAttributes, ref: mergedRef, style: inlineStyles }), validIcon ? iconMap(name) : void 0);
};
var internal_default = InternalIcon;

// node_modules/@cloudscape-design/components/internal/components/tooltip/index.js
var import_react37 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/arrow.js
var import_react21 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/popover/styles.scoped.css";
var styles_css_default2 = {
  "arrow": "awsui_arrow_xjuzf_1ao80_153",
  "arrow-outer": "awsui_arrow-outer_xjuzf_1ao80_157",
  "arrow-inner": "awsui_arrow-inner_xjuzf_1ao80_157",
  "arrow-position-right-top": "awsui_arrow-position-right-top_xjuzf_1ao80_199",
  "arrow-position-right-bottom": "awsui_arrow-position-right-bottom_xjuzf_1ao80_199",
  "arrow-position-left-top": "awsui_arrow-position-left-top_xjuzf_1ao80_202",
  "arrow-position-left-bottom": "awsui_arrow-position-left-bottom_xjuzf_1ao80_202",
  "arrow-position-top-center": "awsui_arrow-position-top-center_xjuzf_1ao80_205",
  "arrow-position-top-right": "awsui_arrow-position-top-right_xjuzf_1ao80_205",
  "arrow-position-top-left": "awsui_arrow-position-top-left_xjuzf_1ao80_205",
  "arrow-position-top-responsive": "awsui_arrow-position-top-responsive_xjuzf_1ao80_205",
  "arrow-position-bottom-center": "awsui_arrow-position-bottom-center_xjuzf_1ao80_208",
  "arrow-position-bottom-right": "awsui_arrow-position-bottom-right_xjuzf_1ao80_208",
  "arrow-position-bottom-left": "awsui_arrow-position-bottom-left_xjuzf_1ao80_208",
  "arrow-position-bottom-responsive": "awsui_arrow-position-bottom-responsive_xjuzf_1ao80_208",
  "body": "awsui_body_xjuzf_1ao80_220",
  "body-overflow-visible": "awsui_body-overflow-visible_xjuzf_1ao80_256",
  "body-variant-chart": "awsui_body-variant-chart_xjuzf_1ao80_259",
  "has-dismiss": "awsui_has-dismiss_xjuzf_1ao80_264",
  "dismiss": "awsui_dismiss_xjuzf_1ao80_269",
  "dismiss-control": "awsui_dismiss-control_xjuzf_1ao80_277",
  "header-row": "awsui_header-row_xjuzf_1ao80_281",
  "header": "awsui_header_xjuzf_1ao80_281",
  "content": "awsui_content_xjuzf_1ao80_306",
  "content-overflow-visible": "awsui_content-overflow-visible_xjuzf_1ao80_315",
  "container": "awsui_container_xjuzf_1ao80_327",
  "container-arrow-position-bottom-left": "awsui_container-arrow-position-bottom-left_xjuzf_1ao80_338",
  "container-arrow-position-bottom-center": "awsui_container-arrow-position-bottom-center_xjuzf_1ao80_338",
  "container-arrow-position-bottom-right": "awsui_container-arrow-position-bottom-right_xjuzf_1ao80_338",
  "container-arrow-position-top-left": "awsui_container-arrow-position-top-left_xjuzf_1ao80_343",
  "container-arrow-position-top-center": "awsui_container-arrow-position-top-center_xjuzf_1ao80_343",
  "container-arrow-position-top-right": "awsui_container-arrow-position-top-right_xjuzf_1ao80_343",
  "container-arrow-position-right-top": "awsui_container-arrow-position-right-top_xjuzf_1ao80_348",
  "container-arrow-position-right-bottom": "awsui_container-arrow-position-right-bottom_xjuzf_1ao80_348",
  "container-arrow-position-left-top": "awsui_container-arrow-position-left-top_xjuzf_1ao80_353",
  "container-arrow-position-left-bottom": "awsui_container-arrow-position-left-bottom_xjuzf_1ao80_353",
  "container-body": "awsui_container-body_xjuzf_1ao80_359",
  "container-body-variant-annotation": "awsui_container-body-variant-annotation_xjuzf_1ao80_399",
  "container-body-size-small": "awsui_container-body-size-small_xjuzf_1ao80_404",
  "fixed-width": "awsui_fixed-width_xjuzf_1ao80_407",
  "container-body-size-medium": "awsui_container-body-size-medium_xjuzf_1ao80_411",
  "container-body-size-large": "awsui_container-body-size-large_xjuzf_1ao80_418",
  "container-arrow": "awsui_container-arrow_xjuzf_1ao80_338",
  "container-arrow-position-top-responsive": "awsui_container-arrow-position-top-responsive_xjuzf_1ao80_468",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_xjuzf_1ao80_1",
  "refresh": "awsui_refresh_xjuzf_1ao80_526",
  "root": "awsui_root_xjuzf_1ao80_548",
  "no-wrap": "awsui_no-wrap_xjuzf_1ao80_580",
  "root-filtering-token": "awsui_root-filtering-token_xjuzf_1ao80_584",
  "trigger": "awsui_trigger_xjuzf_1ao80_588",
  "overflow-ellipsis": "awsui_overflow-ellipsis_xjuzf_1ao80_595",
  "trigger-type-text-inline": "awsui_trigger-type-text-inline_xjuzf_1ao80_603",
  "trigger-type-text": "awsui_trigger-type-text_xjuzf_1ao80_603",
  "trigger-type-filtering-token": "awsui_trigger-type-filtering-token_xjuzf_1ao80_671",
  "popover-inline-content": "awsui_popover-inline-content_xjuzf_1ao80_675",
  "hover-area": "awsui_hover-area_xjuzf_1ao80_679"
};

// node_modules/@cloudscape-design/components/popover/arrow.js
var Arrow = (props2) => {
  const isVisualRefresh = useVisualRefresh();
  return import_react21.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default2.arrow, props2.position && styles_css_default2[`arrow-position-${props2.position}`]) },
    import_react21.default.createElement("div", { className: styles_css_default2["arrow-outer"] }),
    import_react21.default.createElement("div", { className: clsx_m_default(styles_css_default2["arrow-inner"], isVisualRefresh && styles_css_default2.refresh) })
  );
};
var arrow_default = import_react21.default.memo(Arrow);

// node_modules/@cloudscape-design/components/popover/body.js
var import_react24 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/focus-lock/index.js
var import_react23 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/tab-trap/index.js
var import_react22 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/tab-trap/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/tab-trap/styles.scoped.css";
var styles_css_default3 = {
  "root": "awsui_root_oip5a_160mh_5"
};

// node_modules/@cloudscape-design/components/internal/components/tab-trap/index.js
function TabTrap({ focusNextCallback, disabled = false }) {
  return import_react22.default.createElement("div", { className: styles_css_default3.root, tabIndex: disabled ? -1 : 0, onFocus: focusNextCallback });
}

// node_modules/@cloudscape-design/components/internal/components/focus-lock/utils.js
var tabbables2 = [
  "button:enabled",
  "select:enabled",
  "textarea:enabled",
  "input:enabled",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[tabindex]",
  "[contenteditable]",
  "[autofocus]"
].join(",");
function isFocusable2(element) {
  return element.matches(tabbables2);
}
function getAllFocusables2(container) {
  return Array.prototype.slice.call(container.querySelectorAll(tabbables2));
}
function getFocusables(container) {
  return getAllFocusables2(container).filter((element) => element.tabIndex !== -1);
}
function getFirstFocusable2(container) {
  var _a2;
  const focusables = getFocusables(container);
  return (_a2 = focusables[0]) !== null && _a2 !== void 0 ? _a2 : null;
}
function getLastFocusable2(container) {
  var _a2;
  const focusables = getFocusables(container);
  return (_a2 = focusables[focusables.length - 1]) !== null && _a2 !== void 0 ? _a2 : null;
}

// node_modules/@cloudscape-design/components/internal/components/focus-lock/index.js
function FocusLock({ className: className2, disabled, autoFocus, restoreFocus, children: children2 }, ref) {
  const restoreFocusTargetRef = (0, import_react23.useRef)(null);
  const containerRef = (0, import_react23.useRef)(null);
  const focusFirst = () => {
    var _a2;
    if (containerRef.current) {
      (_a2 = getFirstFocusable2(containerRef.current)) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  };
  const focusLast = () => {
    var _a2;
    if (containerRef.current) {
      (_a2 = getLastFocusable2(containerRef.current)) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  };
  (0, import_react23.useEffect)(() => {
    const assignRestoreFocusTarget = () => {
      var _a2;
      if (document.activeElement && !((_a2 = containerRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(document.activeElement))) {
        restoreFocusTargetRef.current = document.activeElement;
      }
    };
    if (autoFocus && !disabled) {
      assignRestoreFocusTarget();
      focusFirst();
    }
  }, [autoFocus, disabled]);
  const [previouslyDisabled, setPreviouslyDisabled] = (0, import_react23.useState)(!!disabled);
  (0, import_react23.useEffect)(() => {
    var _a2;
    if (previouslyDisabled !== !!disabled) {
      setPreviouslyDisabled(!!disabled);
      if (restoreFocus && disabled) {
        (_a2 = restoreFocusTargetRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
        restoreFocusTargetRef.current = null;
      }
    }
  }, [previouslyDisabled, disabled, restoreFocus]);
  const restoreFocusHandler = (0, import_react23.useCallback)((elem) => {
    var _a2;
    if (elem === null && restoreFocus) {
      (_a2 = restoreFocusTargetRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      restoreFocusTargetRef.current = null;
    }
  }, [restoreFocus]);
  (0, import_react23.useImperativeHandle)(ref, () => ({ focusFirst }));
  const mergedRef = useMergeRefs(containerRef, restoreFocusHandler);
  return import_react23.default.createElement(
    import_react23.default.Fragment,
    null,
    import_react23.default.createElement(TabTrap, { disabled, focusNextCallback: focusLast }),
    import_react23.default.createElement("div", { className: className2, ref: mergedRef }, children2),
    import_react23.default.createElement(TabTrap, { disabled, focusNextCallback: focusFirst })
  );
}
var focus_lock_default = import_react23.default.forwardRef(FocusLock);

// node_modules/@cloudscape-design/components/internal/keycode.js
var KeyCode2;
(function(KeyCode3) {
  KeyCode3[KeyCode3["pageUp"] = 33] = "pageUp";
  KeyCode3[KeyCode3["pageDown"] = 34] = "pageDown";
  KeyCode3[KeyCode3["end"] = 35] = "end";
  KeyCode3[KeyCode3["home"] = 36] = "home";
  KeyCode3[KeyCode3["backspace"] = 8] = "backspace";
  KeyCode3[KeyCode3["space"] = 32] = "space";
  KeyCode3[KeyCode3["down"] = 40] = "down";
  KeyCode3[KeyCode3["left"] = 37] = "left";
  KeyCode3[KeyCode3["right"] = 39] = "right";
  KeyCode3[KeyCode3["up"] = 38] = "up";
  KeyCode3[KeyCode3["escape"] = 27] = "escape";
  KeyCode3[KeyCode3["enter"] = 13] = "enter";
  KeyCode3[KeyCode3["tab"] = 9] = "tab";
})(KeyCode2 || (KeyCode2 = {}));

// node_modules/@cloudscape-design/components/popover/body.js
function PopoverBody({ dismissButton: showDismissButton, dismissAriaLabel, header, children: children2, onDismiss, variant, overflowVisible, className: className2, ariaLabelledby, closeAnalyticsAction }) {
  const i18n = useInternalI18n("popover");
  const labelledById = useUniqueId("awsui-popover-");
  const dismissButtonFocused = (0, import_react24.useRef)(false);
  const dismissButtonRef = (0, import_react24.useRef)(null);
  const onKeyDown = (0, import_react24.useCallback)((event) => {
    if (event.keyCode === KeyCode2.escape) {
      event.stopPropagation();
      onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss();
    }
  }, [onDismiss]);
  (0, import_react24.useEffect)(() => {
    var _a2;
    if (showDismissButton && !dismissButtonFocused.current) {
      (_a2 = dismissButtonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus({ preventScroll: true });
    }
    dismissButtonFocused.current = showDismissButton;
  }, [showDismissButton]);
  const dismissButton3 = (showDismissButton !== null && showDismissButton !== void 0 ? showDismissButton : null) && import_react24.default.createElement(
    "div",
    Object.assign({ className: styles_css_default2.dismiss }, closeAnalyticsAction ? getAnalyticsMetadataAttribute({ action: closeAnalyticsAction }) : {}),
    import_react24.default.createElement(InternalButton, { variant: "icon", formAction: "none", iconName: "close", className: styles_css_default2["dismiss-control"], ariaLabel: i18n("dismissAriaLabel", dismissAriaLabel), onClick: () => onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(), ref: dismissButtonRef })
  );
  const isDialog = showDismissButton;
  const shouldTrapFocus = showDismissButton && variant !== "annotation";
  const dialogProps = isDialog ? {
    role: "dialog",
    "aria-labelledby": ariaLabelledby !== null && ariaLabelledby !== void 0 ? ariaLabelledby : header ? labelledById : void 0
  } : {};
  return import_react24.default.createElement(
    "div",
    Object.assign({ className: clsx_m_default(styles_css_default2.body, styles_css_default2[`body-variant-${variant}`], className2, {
      [styles_css_default2["body-overflow-visible"]]: overflowVisible === "both"
    }), onKeyDown }, dialogProps),
    import_react24.default.createElement(
      focus_lock_default,
      { disabled: !shouldTrapFocus, autoFocus: false },
      header && import_react24.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default2["header-row"], showDismissButton && styles_css_default2["has-dismiss"]) },
        dismissButton3,
        import_react24.default.createElement(
          "div",
          { className: styles_css_default2.header, id: labelledById },
          import_react24.default.createElement("h2", null, header)
        )
      ),
      import_react24.default.createElement(
        "div",
        { className: !header && showDismissButton ? styles_css_default2["has-dismiss"] : void 0 },
        !header && dismissButton3,
        import_react24.default.createElement("div", { className: clsx_m_default(styles_css_default2.content, { [styles_css_default2["content-overflow-visible"]]: !!overflowVisible }) }, children2)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/popover/container.js
var import_react27 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/use-popover-position.js
var import_react25 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/utils/scrollable-containers.js
var getOverflowParents = (element) => {
  const parents = [];
  let node = element;
  while ((node = node.parentElement) && node !== element.ownerDocument.body) {
    if (getComputedStyle(node).overflow !== "visible") {
      parents.push(node);
    }
  }
  return parents;
};
var getOverflowParentDimensions = ({ element, excludeClosestParent = false, expandToViewport = false, canExpandOutsideViewport = false }) => {
  var _a2, _b, _c, _d, _e;
  const parents = expandToViewport ? [] : getOverflowParents(element).map((el) => {
    const { height, width, top, left } = el.getBoundingClientRect();
    return {
      // Treat the whole scrollable area as the available height
      // if we're allowed to expand past the viewport.
      blockSize: canExpandOutsideViewport ? el.scrollHeight : height,
      inlineSize: width,
      insetBlockStart: top,
      insetInlineStart: left
    };
  });
  if (canExpandOutsideViewport && !expandToViewport) {
    const document2 = element.ownerDocument;
    const documentDimensions = document2.documentElement.getBoundingClientRect();
    parents.push({
      inlineSize: Math.max(documentDimensions.width, document2.documentElement.clientWidth),
      blockSize: Math.max(documentDimensions.height, document2.documentElement.clientHeight),
      insetBlockStart: documentDimensions.top,
      insetInlineStart: documentDimensions.left
    });
  } else {
    const owningWindow = (_a2 = element.ownerDocument.defaultView) !== null && _a2 !== void 0 ? _a2 : window;
    parents.push({
      blockSize: (_c = (_b = owningWindow.visualViewport) === null || _b === void 0 ? void 0 : _b.height) !== null && _c !== void 0 ? _c : owningWindow.innerHeight,
      inlineSize: (_e = (_d = owningWindow.visualViewport) === null || _d === void 0 ? void 0 : _d.width) !== null && _e !== void 0 ? _e : owningWindow.innerWidth,
      insetBlockStart: 0,
      insetInlineStart: 0
    });
  }
  if (excludeClosestParent && !expandToViewport) {
    parents.shift();
  }
  return parents;
};
function scrollElementIntoView(element, options = { block: "nearest", inline: "nearest" }) {
  var _a2;
  (_a2 = element === null || element === void 0 ? void 0 : element.scrollIntoView) === null || _a2 === void 0 ? void 0 : _a2.call(element, options);
}
function calculateScroll({ insetBlockStart, blockSize }) {
  if (insetBlockStart < 0) {
    return insetBlockStart;
  } else if (insetBlockStart + blockSize > window.innerHeight) {
    if (blockSize > window.innerHeight) {
      return insetBlockStart;
    } else {
      return insetBlockStart + blockSize - window.innerHeight;
    }
  }
  return 0;
}
function scrollRectangleIntoView(box, scrollableParent) {
  const scrollAmount = calculateScroll(box);
  if (scrollAmount) {
    (scrollableParent || window).scrollBy(0, scrollAmount);
  }
}
function getFirstScrollableParent(element) {
  return findUpUntil(element, (el) => {
    const overflows = el.scrollHeight > el.clientHeight;
    return overflows && ["scroll", "auto"].includes(getComputedStyle(el).overflowY);
  }) || void 0;
}

// node_modules/@cloudscape-design/components/popover/utils/positions.js
var ARROW_OFFSET = 12;
var PRIORITY_MAPPING = {
  top: [
    "top-center",
    "top-right",
    "top-left",
    "bottom-center",
    "bottom-right",
    "bottom-left",
    "right-top",
    "right-bottom",
    "left-top",
    "left-bottom"
  ],
  bottom: [
    "bottom-center",
    "bottom-right",
    "bottom-left",
    "top-center",
    "top-right",
    "top-left",
    "right-top",
    "right-bottom",
    "left-top",
    "left-bottom"
  ],
  left: [
    "left-top",
    "left-bottom",
    "right-top",
    "right-bottom",
    "bottom-center",
    "top-center",
    "bottom-left",
    "top-left",
    "bottom-right",
    "top-right"
  ],
  right: [
    "right-top",
    "right-bottom",
    "left-top",
    "left-bottom",
    "bottom-center",
    "top-center",
    "bottom-right",
    "top-right",
    "bottom-left",
    "top-left"
  ]
};
var RECTANGLE_CALCULATIONS = {
  "top-center": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart - body.blockSize - arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 - body.inlineSize / 2,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "top-right": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart - body.blockSize - arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 - ARROW_OFFSET - arrow2.inlineSize / 2,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "top-left": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart - body.blockSize - arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 + ARROW_OFFSET + arrow2.inlineSize / 2 - body.inlineSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "bottom-center": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize + arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 - body.inlineSize / 2,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "bottom-right": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize + arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 - ARROW_OFFSET - arrow2.inlineSize / 2,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "bottom-left": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize + arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize / 2 + ARROW_OFFSET + arrow2.inlineSize / 2 - body.inlineSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "right-top": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize / 2 - ARROW_OFFSET - arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize + arrow2.blockSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "right-bottom": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize / 2 - body.blockSize + ARROW_OFFSET + arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart + trigger.inlineSize + arrow2.blockSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "left-top": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize / 2 - ARROW_OFFSET - arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart - body.inlineSize - arrow2.blockSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  },
  "left-bottom": ({ body, trigger, arrow: arrow2 }) => {
    return {
      insetBlockStart: trigger.insetBlockStart + trigger.blockSize / 2 - body.blockSize + ARROW_OFFSET + arrow2.blockSize,
      insetInlineStart: trigger.insetInlineStart - body.inlineSize - arrow2.blockSize,
      inlineSize: body.inlineSize,
      blockSize: body.blockSize
    };
  }
};
function fitIntoContainer(inner, outer) {
  let { insetInlineStart, inlineSize, insetBlockStart, blockSize } = inner;
  if (insetInlineStart < outer.insetInlineStart) {
    inlineSize = insetInlineStart + inlineSize - outer.insetInlineStart;
    insetInlineStart = outer.insetInlineStart;
  } else if (insetInlineStart + inlineSize > outer.insetInlineStart + outer.inlineSize) {
    inlineSize = outer.insetInlineStart + outer.inlineSize - insetInlineStart;
  }
  if (insetBlockStart < outer.insetBlockStart) {
    blockSize = insetBlockStart + blockSize - outer.insetBlockStart;
    insetBlockStart = outer.insetBlockStart;
  } else if (insetBlockStart + blockSize > outer.insetBlockStart + outer.blockSize) {
    blockSize = outer.insetBlockStart + outer.blockSize - insetBlockStart;
  }
  return { insetInlineStart, inlineSize, insetBlockStart, blockSize };
}
function getTallestRect(rect1, rect2) {
  return rect1.blockSize >= rect2.blockSize ? rect1 : rect2;
}
function getIntersection(rectangles) {
  let boundingBox = null;
  for (const currentRect of rectangles) {
    if (!boundingBox) {
      boundingBox = currentRect;
      continue;
    }
    const insetInlineStart = Math.max(boundingBox.insetInlineStart, currentRect.insetInlineStart);
    const insetBlockStart = Math.max(boundingBox.insetBlockStart, currentRect.insetBlockStart);
    const insetInlineEnd = Math.min(boundingBox.insetInlineStart + boundingBox.inlineSize, currentRect.insetInlineStart + currentRect.inlineSize);
    const insetBlockEnd = Math.min(boundingBox.insetBlockStart + boundingBox.blockSize, currentRect.insetBlockStart + currentRect.blockSize);
    if (insetInlineEnd < insetInlineStart || insetBlockEnd < insetBlockStart) {
      return null;
    }
    boundingBox = {
      insetInlineStart,
      insetBlockStart,
      inlineSize: insetInlineEnd - insetInlineStart,
      blockSize: insetBlockEnd - insetBlockStart
    };
  }
  return boundingBox;
}
function calculatePosition({
  preferredPosition,
  fixedInternalPosition,
  trigger,
  arrow: arrow2,
  body,
  container,
  viewport,
  // the popover is only bound by the viewport if it is rendered in a portal
  renderWithPortal,
  allowVerticalOverflow,
  minVisibleBlockSize
}) {
  let bestOption = null;
  const preferredInternalPositions = fixedInternalPosition ? [fixedInternalPosition] : PRIORITY_MAPPING[preferredPosition];
  for (const internalPosition2 of preferredInternalPositions) {
    const rect2 = RECTANGLE_CALCULATIONS[internalPosition2]({ body, trigger, arrow: arrow2 });
    const visibleArea = renderWithPortal ? getIntersection([rect2, viewport]) : getIntersection([rect2, viewport, container]);
    const fitsBlockSize = minVisibleBlockSize === void 0 ? visibleArea && visibleArea.blockSize === body.blockSize : visibleArea && visibleArea.blockSize >= Math.min(body.blockSize, minVisibleBlockSize);
    const fitsInlineSize = visibleArea && visibleArea.inlineSize === body.inlineSize;
    if (fitsBlockSize && fitsInlineSize) {
      const scrollable2 = visibleArea && visibleArea.blockSize < body.blockSize;
      return { internalPosition: internalPosition2, rect: scrollable2 ? fitIntoContainer(rect2, viewport) : rect2, scrollable: scrollable2 };
    }
    const newOption = { rect: rect2, internalPosition: internalPosition2, visibleArea };
    bestOption = getBestOption(newOption, bestOption);
  }
  const internalPosition = (bestOption === null || bestOption === void 0 ? void 0 : bestOption.internalPosition) || "right-top";
  const rect = RECTANGLE_CALCULATIONS[internalPosition]({ body, trigger, arrow: arrow2 });
  const tallestBoundingContainer = getTallestRect(viewport, container);
  const boundingContainer = allowVerticalOverflow && isTopOrBottom(internalPosition) ? {
    insetBlockStart: tallestBoundingContainer.insetBlockStart,
    blockSize: tallestBoundingContainer.blockSize,
    insetInlineStart: viewport.insetInlineStart,
    inlineSize: viewport.inlineSize
  } : viewport;
  const optimizedRect = fitIntoContainer(rect, boundingContainer);
  const scrollable = optimizedRect.blockSize < rect.blockSize;
  return { internalPosition, rect: optimizedRect, scrollable };
}
function getBestOption(option1, option2) {
  if (!(option2 === null || option2 === void 0 ? void 0 : option2.visibleArea)) {
    return option1;
  }
  if (!option1.visibleArea) {
    return option2;
  }
  if (option1.visibleArea.inlineSize === option2.visibleArea.inlineSize) {
    return option1.visibleArea.blockSize > option2.visibleArea.blockSize ? option1 : option2;
  }
  return option1.visibleArea.inlineSize > option2.visibleArea.inlineSize ? option1 : option2;
}
function getOffsetDimensions(element) {
  return { offsetHeight: element.offsetHeight, offsetWidth: element.offsetWidth };
}
function getDimensions(element) {
  const computedStyle = getComputedStyle(element);
  return {
    inlineSize: parseFloat(computedStyle.inlineSize),
    blockSize: parseFloat(computedStyle.blockSize)
  };
}
function isTopOrBottom(internalPosition) {
  return ["top", "bottom"].includes(internalPosition.split("-")[0]);
}
function isCenterOutside(child, parent) {
  const childCenter = child.insetBlockStart + child.blockSize / 2;
  const overflowsBlockStart = childCenter < parent.insetBlockStart;
  const overflowsBlockEnd = childCenter > parent.insetBlockEnd;
  return overflowsBlockStart || overflowsBlockEnd;
}

// node_modules/@cloudscape-design/components/popover/use-popover-position.js
function usePopoverPosition({ popoverRef, bodyRef, arrowRef, getTrack, contentRef, allowScrollToFit, allowVerticalOverflow, preferredPosition, renderWithPortal, keepPosition, hideOnOverscroll, minVisibleBlockSize }) {
  const previousInternalPositionRef = (0, import_react25.useRef)(null);
  const [popoverStyle, setPopoverStyle] = (0, import_react25.useState)({});
  const [internalPosition, setInternalPosition] = (0, import_react25.useState)(null);
  const [isOverscrolling, setIsOverscrolling] = (0, import_react25.useState)(false);
  const positionHandlerRef = (0, import_react25.useRef)(() => {
  });
  const scrollableContainerRectRef = (0, import_react25.useRef)(null);
  const updatePositionHandler = (0, import_react25.useCallback)((onContentResize = false) => {
    var _a2;
    const track = getTrack();
    if (!track || !popoverRef.current || !bodyRef.current || !contentRef.current || !arrowRef.current) {
      return;
    }
    const popover = popoverRef.current;
    const body = bodyRef.current;
    const arrow2 = arrowRef.current;
    const document2 = popover.ownerDocument;
    const { offsetWidth, offsetHeight } = getOffsetDimensions(popover);
    if (offsetWidth === 0 || offsetHeight === 0 || !nodeContains(document2.body, track)) {
      return;
    }
    const prevInsetBlockStart = popover.style.insetBlockStart;
    const prevInsetInlineStart = popover.style.insetInlineStart;
    popover.style.insetBlockStart = "0";
    popover.style.insetInlineStart = "0";
    body.style.maxBlockSize = "";
    body.style.overflowX = "";
    body.style.overflowY = "";
    const viewportRect = getViewportRect(document2.defaultView);
    const trackRect = getLogicalBoundingClientRect(track);
    const arrowRect = getDimensions(arrow2);
    const { containingBlock, boundary } = findUpUntilMultiple({
      startElement: popover,
      tests: {
        containingBlock: isContainingBlock,
        boundary: (element) => isContainingBlock(element) || isBoundary(element)
      }
    });
    const containingBlockRect = containingBlock ? getLogicalBoundingClientRect(containingBlock) : viewportRect;
    const boundaryRect = boundary ? getLogicalBoundingClientRect(boundary) : getDocumentRect(document2);
    const bodyBorderWidth = getBorderWidth(body);
    const contentRect = getLogicalBoundingClientRect(contentRef.current);
    const contentBoundingBox = {
      inlineSize: contentRect.inlineSize + 2 * bodyBorderWidth,
      blockSize: contentRect.blockSize + 2 * bodyBorderWidth
    };
    const shouldKeepPosition = keepPosition && onContentResize && !!previousInternalPositionRef.current;
    const fixedInternalPosition = (_a2 = shouldKeepPosition && previousInternalPositionRef.current) !== null && _a2 !== void 0 ? _a2 : void 0;
    const { scrollable, internalPosition: newInternalPosition, rect } = calculatePosition({
      preferredPosition,
      fixedInternalPosition,
      trigger: trackRect,
      arrow: arrowRect,
      body: contentBoundingBox,
      container: boundaryRect,
      viewport: viewportRect,
      renderWithPortal,
      allowVerticalOverflow,
      minVisibleBlockSize
    });
    const popoverOffset = toRelativePosition(rect, containingBlockRect);
    const trackRelativeOffset = toRelativePosition(popoverOffset, toRelativePosition(trackRect, containingBlockRect));
    popover.style.insetBlockStart = prevInsetBlockStart;
    popover.style.insetInlineStart = prevInsetInlineStart;
    if (scrollable) {
      body.style.maxBlockSize = rect.blockSize + "px";
      body.style.overflowX = "hidden";
      body.style.overflowY = "auto";
    }
    previousInternalPositionRef.current = newInternalPosition;
    setInternalPosition(newInternalPosition);
    const shouldScroll = allowScrollToFit && !shouldKeepPosition;
    const insetBlockStart = shouldScroll ? popoverOffset.insetBlockStart + calculateScroll(rect) : popoverOffset.insetBlockStart;
    setPopoverStyle({ insetBlockStart, insetInlineStart: popoverOffset.insetInlineStart });
    if (shouldScroll) {
      const scrollableParent = getFirstScrollableParent(popover);
      scrollRectangleIntoView(rect, scrollableParent);
    }
    if (hideOnOverscroll && track instanceof HTMLElement) {
      const scrollableContainer = getFirstScrollableParent(track);
      if (scrollableContainer) {
        scrollableContainerRectRef.current = getLogicalBoundingClientRect(scrollableContainer);
      }
    }
    positionHandlerRef.current = () => {
      const track2 = getTrack();
      if (!track2) {
        return;
      }
      const trackRect2 = getLogicalBoundingClientRect(track2);
      const newTrackOffset = toRelativePosition(trackRect2, containingBlock ? getLogicalBoundingClientRect(containingBlock) : viewportRect);
      setPopoverStyle({
        insetBlockStart: newTrackOffset.insetBlockStart + trackRelativeOffset.insetBlockStart,
        insetInlineStart: newTrackOffset.insetInlineStart + trackRelativeOffset.insetInlineStart
      });
      if (hideOnOverscroll && scrollableContainerRectRef.current) {
        setIsOverscrolling(isCenterOutside(trackRect2, scrollableContainerRectRef.current));
      }
    };
  }, [
    getTrack,
    popoverRef,
    bodyRef,
    contentRef,
    arrowRef,
    keepPosition,
    preferredPosition,
    renderWithPortal,
    allowVerticalOverflow,
    allowScrollToFit,
    hideOnOverscroll,
    minVisibleBlockSize
  ]);
  return { updatePositionHandler, popoverStyle, internalPosition, positionHandlerRef, isOverscrolling };
}
function getBorderWidth(element) {
  return parseInt(getComputedStyle(element).borderWidth) || 0;
}
function toRelativePosition(element, parent) {
  return {
    insetBlockStart: element.insetBlockStart - parent.insetBlockStart,
    insetInlineStart: element.insetInlineStart - parent.insetInlineStart
  };
}
function getViewportRect(window2) {
  var _a2, _b, _c, _d;
  return {
    insetBlockStart: 0,
    insetInlineStart: 0,
    inlineSize: (_b = (_a2 = window2.visualViewport) === null || _a2 === void 0 ? void 0 : _a2.width) !== null && _b !== void 0 ? _b : window2.innerWidth,
    blockSize: (_d = (_c = window2.visualViewport) === null || _c === void 0 ? void 0 : _c.height) !== null && _d !== void 0 ? _d : window2.innerHeight
  };
}
function getDocumentRect(document2) {
  const { insetBlockStart, insetInlineStart } = getLogicalBoundingClientRect(document2.documentElement);
  return {
    insetBlockStart,
    insetInlineStart,
    inlineSize: document2.documentElement.scrollWidth,
    blockSize: document2.documentElement.scrollHeight
  };
}
function isBoundary(element) {
  const computedStyle = getComputedStyle(element);
  return !!computedStyle.clipPath && computedStyle.clipPath !== "none";
}

// node_modules/@cloudscape-design/components/popover/use-position-observer.js
var import_react26 = __toESM(require_react());
function usePositionObserver(triggerRef, trackKey, callback) {
  const stableCallback = useStableCallback(callback);
  (0, import_react26.useEffect)(() => {
    if (!(triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current)) {
      return;
    }
    let lastTrackKey = trackKey;
    let lastPosition = {
      x: triggerRef.current.getBoundingClientRect().x,
      y: triggerRef.current.getBoundingClientRect().y
    };
    const observer2 = new MutationObserver(() => {
      if (!triggerRef.current) {
        return;
      }
      const { x: x3, y: y4 } = triggerRef.current.getBoundingClientRect();
      if (x3 !== lastPosition.x || y4 !== lastPosition.y || trackKey !== lastTrackKey) {
        lastTrackKey = trackKey;
        lastPosition = { x: x3, y: y4 };
        stableCallback();
      }
    });
    observer2.observe(triggerRef.current.ownerDocument, {
      attributes: true,
      subtree: true,
      childList: true
    });
    return () => observer2.disconnect();
  }, [triggerRef, stableCallback]);
}

// node_modules/@cloudscape-design/components/popover/container.js
function PopoverContainer({ position, trackRef, getTrack: externalGetTrack, trackKey, minVisibleBlockSize, arrow: arrow2, children: children2, zIndex, renderWithPortal, size, fixedWidth, variant, keepPosition, allowScrollToFit, allowVerticalOverflow, hideOnOverscroll, hoverArea, className: className2 }) {
  const bodyRef = (0, import_react27.useRef)(null);
  const contentRef = (0, import_react27.useRef)(null);
  const popoverRef = (0, import_react27.useRef)(null);
  const arrowRef = (0, import_react27.useRef)(null);
  const isRefresh = useVisualRefresh();
  const getTrack = (0, import_react27.useRef)(() => {
    if (trackRef) {
      return trackRef.current;
    }
    if (externalGetTrack) {
      return externalGetTrack();
    }
    throw new Error("Invariant violation: must provide either trackRef or getTrack.");
  });
  const { updatePositionHandler, popoverStyle, internalPosition, positionHandlerRef, isOverscrolling } = usePopoverPosition({
    popoverRef,
    bodyRef,
    arrowRef,
    getTrack: getTrack.current,
    contentRef,
    allowScrollToFit,
    allowVerticalOverflow,
    preferredPosition: position,
    renderWithPortal,
    keepPosition,
    hideOnOverscroll,
    minVisibleBlockSize
  });
  (0, import_react27.useLayoutEffect)(() => {
    updatePositionHandler();
  }, [updatePositionHandler, trackKey]);
  useResizeObserver(contentRef, () => {
    updatePositionHandler(true);
  });
  usePositionObserver(trackRef, trackKey, () => {
    const popoverOffset = popoverRef.current && getLogicalBoundingClientRect(popoverRef.current);
    if (keepPosition || !popoverOffset || popoverOffset.insetBlockStart < 0 || popoverOffset.insetBlockEnd > window.innerHeight) {
      return;
    }
    positionHandlerRef.current();
  });
  (0, import_react27.useLayoutEffect)(() => {
    const controller = new AbortController();
    const updatePositionOnResize = () => requestAnimationFrame(() => updatePositionHandler(true));
    const refreshPosition = () => requestAnimationFrame(() => positionHandlerRef.current());
    window.addEventListener("resize", updatePositionOnResize, { signal: controller.signal });
    window.addEventListener("scroll", refreshPosition, { capture: true, signal: controller.signal });
    return () => {
      controller.abort();
    };
  }, [hideOnOverscroll, keepPosition, positionHandlerRef, trackRef, updatePositionHandler]);
  return isOverscrolling ? null : import_react27.default.createElement(
    "div",
    { ref: popoverRef, style: Object.assign(Object.assign({}, popoverStyle), { zIndex }), className: clsx_m_default(styles_css_default2.container, isRefresh && styles_css_default2.refresh, className2) },
    import_react27.default.createElement("div", { ref: arrowRef, className: clsx_m_default(styles_css_default2[`container-arrow`], styles_css_default2[`container-arrow-position-${internalPosition}`]), "aria-hidden": true }, arrow2(internalPosition)),
    import_react27.default.createElement("div", { ref: bodyRef, className: clsx_m_default(styles_css_default2["container-body"], styles_css_default2[`container-body-size-${size}`], {
      [styles_css_default2["fixed-width"]]: fixedWidth,
      [styles_css_default2[`container-body-variant-${variant}`]]: variant
    }) }, hoverArea ? import_react27.default.createElement(
      "div",
      { className: styles_css_default2["hover-area"] },
      import_react27.default.createElement("div", { ref: contentRef }, children2)
    ) : import_react27.default.createElement("div", { ref: contentRef }, children2))
  );
}

// node_modules/@cloudscape-design/components/internal/components/transition/index.js
var import_react35 = __toESM(require_react());
var import_react36 = __toESM(require_react());

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e3 = 1; e3 < arguments.length; e3++) {
      var t2 = arguments[e3];
      for (var r2 in t2) ({}).hasOwnProperty.call(t2, r2) && (n[r2] = t2[r2]);
    }
    return n;
  }, _extends.apply(null, arguments);
}

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(r2, e3) {
  if (null == r2) return {};
  var t2 = {};
  for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
    if (-1 !== e3.indexOf(n)) continue;
    t2[n] = r2[n];
  }
  return t2;
}

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(t2, e3) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t3, e4) {
    return t3.__proto__ = e4, t3;
  }, _setPrototypeOf(t2, e3);
}

// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(t2, o) {
  t2.prototype = Object.create(o.prototype), t2.prototype.constructor = t2, _setPrototypeOf(t2, o);
}

// node_modules/react-transition-group/esm/CSSTransition.js
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/dom-helpers/esm/hasClass.js
function hasClass(element, className2) {
  if (element.classList) return !!className2 && element.classList.contains(className2);
  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className2 + " ") !== -1;
}

// node_modules/dom-helpers/esm/addClass.js
function addClass(element, className2) {
  if (element.classList) element.classList.add(className2);
  else if (!hasClass(element, className2)) if (typeof element.className === "string") element.className = element.className + " " + className2;
  else element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className2);
}

// node_modules/dom-helpers/esm/removeClass.js
function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function removeClass(element, className2) {
  if (element.classList) {
    element.classList.remove(className2);
  } else if (typeof element.className === "string") {
    element.className = replaceClassName(element.className, className2);
  } else {
    element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className2));
  }
}

// node_modules/react-transition-group/esm/CSSTransition.js
var import_react30 = __toESM(require_react());

// node_modules/react-transition-group/esm/Transition.js
var import_prop_types2 = __toESM(require_prop_types());
var import_react29 = __toESM(require_react());
var import_react_dom4 = __toESM(require_react_dom());

// node_modules/react-transition-group/esm/config.js
var config_default = {
  disabled: false
};

// node_modules/react-transition-group/esm/utils/PropTypes.js
var import_prop_types = __toESM(require_prop_types());
var timeoutsShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
  enter: import_prop_types.default.number,
  exit: import_prop_types.default.number,
  appear: import_prop_types.default.number
}).isRequired]) : null;
var classNamesShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.shape({
  enter: import_prop_types.default.string,
  exit: import_prop_types.default.string,
  active: import_prop_types.default.string
}), import_prop_types.default.shape({
  enter: import_prop_types.default.string,
  enterDone: import_prop_types.default.string,
  enterActive: import_prop_types.default.string,
  exit: import_prop_types.default.string,
  exitDone: import_prop_types.default.string,
  exitActive: import_prop_types.default.string
})]) : null;

// node_modules/react-transition-group/esm/TransitionGroupContext.js
var import_react28 = __toESM(require_react());
var TransitionGroupContext_default = import_react28.default.createContext(null);

// node_modules/react-transition-group/esm/utils/reflow.js
var forceReflow = function forceReflow2(node) {
  return node.scrollTop;
};

// node_modules/react-transition-group/esm/Transition.js
var UNMOUNTED = "unmounted";
var EXITED = "exited";
var ENTERING = "entering";
var ENTERED = "entered";
var EXITING = "exiting";
var Transition = (function(_React$Component) {
  _inheritsLoose(Transition3, _React$Component);
  function Transition3(props2, context) {
    var _this;
    _this = _React$Component.call(this, props2, context) || this;
    var parentGroup = context;
    var appear = parentGroup && !parentGroup.isMounting ? props2.enter : props2.appear;
    var initialStatus;
    _this.appearStatus = null;
    if (props2.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props2.unmountOnExit || props2.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }
    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }
  Transition3.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;
    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }
    return null;
  };
  var _proto = Transition3.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;
    if (prevProps !== this.props) {
      var status = this.state.status;
      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }
    this.updateStatus(false, nextStatus);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };
  _proto.getTimeouts = function getTimeouts() {
    var timeout2 = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout2;
    if (timeout2 != null && typeof timeout2 !== "number") {
      exit = timeout2.exit;
      enter = timeout2.enter;
      appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
    }
    return {
      exit,
      enter,
      appear
    };
  };
  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }
    if (nextStatus !== null) {
      this.cancelNextCallback();
      if (nextStatus === ENTERING) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom4.default.findDOMNode(this);
          if (node) forceReflow(node);
        }
        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };
  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;
    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;
    var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom4.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
    if (!mounting && !enter || config_default.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function() {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }
    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: ENTERING
    }, function() {
      _this2.props.onEntering(maybeNode, maybeAppearing);
      _this2.onTransitionEnd(enterTimeout, function() {
        _this2.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };
  _proto.performExit = function performExit() {
    var _this3 = this;
    var exit = this.props.exit;
    var timeouts = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? void 0 : import_react_dom4.default.findDOMNode(this);
    if (!exit || config_default.disabled) {
      this.safeSetState({
        status: EXITED
      }, function() {
        _this3.props.onExited(maybeNode);
      });
      return;
    }
    this.props.onExit(maybeNode);
    this.safeSetState({
      status: EXITING
    }, function() {
      _this3.props.onExiting(maybeNode);
      _this3.onTransitionEnd(timeouts.exit, function() {
        _this3.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };
  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };
  _proto.safeSetState = function safeSetState(nextState, callback) {
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };
  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;
    var active = true;
    this.nextCallback = function(event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };
    this.nextCallback.cancel = function() {
      active = false;
    };
    return this.nextCallback;
  };
  _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
    this.setNextCallback(handler);
    var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom4.default.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
      this.props.addEndListener(maybeNode, maybeNextCallback);
    }
    if (timeout2 != null) {
      setTimeout(this.nextCallback, timeout2);
    }
  };
  _proto.render = function render2() {
    var status = this.state.status;
    if (status === UNMOUNTED) {
      return null;
    }
    var _this$props = this.props, children2 = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (
      // allows for nested Transitions
      import_react29.default.createElement(TransitionGroupContext_default.Provider, {
        value: null
      }, typeof children2 === "function" ? children2(status, childProps) : import_react29.default.cloneElement(import_react29.default.Children.only(children2), childProps))
    );
  };
  return Transition3;
})(import_react29.default.Component);
Transition.contextType = TransitionGroupContext_default;
Transition.propTypes = true ? {
  /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */
  nodeRef: import_prop_types2.default.shape({
    current: typeof Element === "undefined" ? import_prop_types2.default.any : function(propValue, key2, componentName3, location, propFullName, secret) {
      var value = propValue[key2];
      return import_prop_types2.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key2, componentName3, location, propFullName, secret);
    }
  }),
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: import_prop_types2.default.oneOfType([import_prop_types2.default.func.isRequired, import_prop_types2.default.element.isRequired]).isRequired,
  /**
   * Show the component; triggers the enter or exit states
   */
  in: import_prop_types2.default.bool,
  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: import_prop_types2.default.bool,
  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: import_prop_types2.default.bool,
  /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */
  appear: import_prop_types2.default.bool,
  /**
   * Enable or disable enter transitions.
   */
  enter: import_prop_types2.default.bool,
  /**
   * Enable or disable exit transitions.
   */
  exit: import_prop_types2.default.bool,
  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function timeout(props2) {
    var pt = timeoutsShape;
    if (!props2.addEndListener) pt = pt.isRequired;
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return pt.apply(void 0, [props2].concat(args));
  },
  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: import_prop_types2.default.func,
  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: import_prop_types2.default.func,
  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: import_prop_types2.default.func,
  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: import_prop_types2.default.func,
  /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: import_prop_types2.default.func,
  /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: import_prop_types2.default.func,
  /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: import_prop_types2.default.func
} : {};
function noop() {
}
Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
var Transition_default = Transition;

// node_modules/react-transition-group/esm/CSSTransition.js
var _addClass = function addClass2(node, classes) {
  return node && classes && classes.split(" ").forEach(function(c2) {
    return addClass(node, c2);
  });
};
var removeClass2 = function removeClass3(node, classes) {
  return node && classes && classes.split(" ").forEach(function(c2) {
    return removeClass(node, c2);
  });
};
var CSSTransition = (function(_React$Component) {
  _inheritsLoose(CSSTransition2, _React$Component);
  function CSSTransition2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.appliedClasses = {
      appear: {},
      enter: {},
      exit: {}
    };
    _this.onEnter = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
      _this.removeClasses(node, "exit");
      _this.addClass(node, appearing ? "appear" : "enter", "base");
      if (_this.props.onEnter) {
        _this.props.onEnter(maybeNode, maybeAppearing);
      }
    };
    _this.onEntering = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
      var type = appearing ? "appear" : "enter";
      _this.addClass(node, type, "active");
      if (_this.props.onEntering) {
        _this.props.onEntering(maybeNode, maybeAppearing);
      }
    };
    _this.onEntered = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
      var type = appearing ? "appear" : "enter";
      _this.removeClasses(node, type);
      _this.addClass(node, type, "done");
      if (_this.props.onEntered) {
        _this.props.onEntered(maybeNode, maybeAppearing);
      }
    };
    _this.onExit = function(maybeNode) {
      var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node = _this$resolveArgument4[0];
      _this.removeClasses(node, "appear");
      _this.removeClasses(node, "enter");
      _this.addClass(node, "exit", "base");
      if (_this.props.onExit) {
        _this.props.onExit(maybeNode);
      }
    };
    _this.onExiting = function(maybeNode) {
      var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node = _this$resolveArgument5[0];
      _this.addClass(node, "exit", "active");
      if (_this.props.onExiting) {
        _this.props.onExiting(maybeNode);
      }
    };
    _this.onExited = function(maybeNode) {
      var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node = _this$resolveArgument6[0];
      _this.removeClasses(node, "exit");
      _this.addClass(node, "exit", "done");
      if (_this.props.onExited) {
        _this.props.onExited(maybeNode);
      }
    };
    _this.resolveArguments = function(maybeNode, maybeAppearing) {
      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
    };
    _this.getClassNames = function(type) {
      var classNames = _this.props.classNames;
      var isStringClassNames = typeof classNames === "string";
      var prefix = isStringClassNames && classNames ? classNames + "-" : "";
      var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
      return {
        baseClassName,
        activeClassName,
        doneClassName
      };
    };
    return _this;
  }
  var _proto = CSSTransition2.prototype;
  _proto.addClass = function addClass3(node, type, phase) {
    var className2 = this.getClassNames(type)[phase + "ClassName"];
    var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
    if (type === "appear" && phase === "done" && doneClassName) {
      className2 += " " + doneClassName;
    }
    if (phase === "active") {
      if (node) forceReflow(node);
    }
    if (className2) {
      this.appliedClasses[type][phase] = className2;
      _addClass(node, className2);
    }
  };
  _proto.removeClasses = function removeClasses(node, type) {
    var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
    this.appliedClasses[type] = {};
    if (baseClassName) {
      removeClass2(node, baseClassName);
    }
    if (activeClassName) {
      removeClass2(node, activeClassName);
    }
    if (doneClassName) {
      removeClass2(node, doneClassName);
    }
  };
  _proto.render = function render2() {
    var _this$props = this.props, _ = _this$props.classNames, props2 = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);
    return import_react30.default.createElement(Transition_default, _extends({}, props2, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  };
  return CSSTransition2;
})(import_react30.default.Component);
CSSTransition.defaultProps = {
  classNames: ""
};
CSSTransition.propTypes = true ? _extends({}, Transition_default.propTypes, {
  /**
   * The animation classNames applied to the component as it appears, enters,
   * exits or has finished the transition. A single name can be provided, which
   * will be suffixed for each stage, e.g. `classNames="fade"` applies:
   *
   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
   *
   * A few details to note about how these classes are applied:
   *
   * 1. They are _joined_ with the ones that are already defined on the child
   *    component, so if you want to add some base styles, you can use
   *    `className` without worrying that it will be overridden.
   *
   * 2. If the transition component mounts with `in={false}`, no classes are
   *    applied yet. You might be expecting `*-exit-done`, but if you think
   *    about it, a component cannot finish exiting if it hasn't entered yet.
   *
   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
   *    allows you to define different behavior for when appearing is done and
   *    when regular entering is done, using selectors like
   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
   *    an epic entrance animation when element first appears in the DOM using
   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
   *    simply use `fade-enter-done` for defining both cases.
   *
   * Each individual classNames can also be specified independently like:
   *
   * ```js
   * classNames={{
   *  appear: 'my-appear',
   *  appearActive: 'my-active-appear',
   *  appearDone: 'my-done-appear',
   *  enter: 'my-enter',
   *  enterActive: 'my-active-enter',
   *  enterDone: 'my-done-enter',
   *  exit: 'my-exit',
   *  exitActive: 'my-active-exit',
   *  exitDone: 'my-done-exit',
   * }}
   * ```
   *
   * If you want to set these classes using CSS Modules:
   *
   * ```js
   * import styles from './styles.css';
   * ```
   *
   * you might want to use camelCase in your CSS file, that way could simply
   * spread them instead of listing them one by one:
   *
   * ```js
   * classNames={{ ...styles }}
   * ```
   *
   * @type {string | {
   *  appear?: string,
   *  appearActive?: string,
   *  appearDone?: string,
   *  enter?: string,
   *  enterActive?: string,
   *  enterDone?: string,
   *  exit?: string,
   *  exitActive?: string,
   *  exitDone?: string,
   * }}
   */
  classNames: classNamesShape,
  /**
   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
   * applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEnter: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'enter-active' or
   * 'appear-active' class is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'enter' or
   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntered: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit' class is
   * applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExit: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExiting: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit' classes
   * are **removed** and the `exit-done` class is added to the DOM node.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExited: import_prop_types3.default.func
}) : {};
var CSSTransition_default = CSSTransition;

// node_modules/react-transition-group/esm/ReplaceTransition.js
var import_prop_types5 = __toESM(require_prop_types());
var import_react33 = __toESM(require_react());
var import_react_dom5 = __toESM(require_react_dom());

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(e3) {
  if (void 0 === e3) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e3;
}

// node_modules/react-transition-group/esm/TransitionGroup.js
var import_prop_types4 = __toESM(require_prop_types());
var import_react32 = __toESM(require_react());

// node_modules/react-transition-group/esm/utils/ChildMapping.js
var import_react31 = __toESM(require_react());
function getChildMapping(children2, mapFn) {
  var mapper = function mapper2(child) {
    return mapFn && (0, import_react31.isValidElement)(child) ? mapFn(child) : child;
  };
  var result = /* @__PURE__ */ Object.create(null);
  if (children2) import_react31.Children.map(children2, function(c2) {
    return c2;
  }).forEach(function(child) {
    result[child.key] = mapper(child);
  });
  return result;
}
function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};
  function getValueForKey(key2) {
    return key2 in next ? next[key2] : prev[key2];
  }
  var nextKeysPending = /* @__PURE__ */ Object.create(null);
  var pendingKeys = [];
  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }
  var i2;
  var childMapping = {};
  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i2 = 0; i2 < nextKeysPending[nextKey].length; i2++) {
        var pendingNextKey = nextKeysPending[nextKey][i2];
        childMapping[nextKeysPending[nextKey][i2]] = getValueForKey(pendingNextKey);
      }
    }
    childMapping[nextKey] = getValueForKey(nextKey);
  }
  for (i2 = 0; i2 < pendingKeys.length; i2++) {
    childMapping[pendingKeys[i2]] = getValueForKey(pendingKeys[i2]);
  }
  return childMapping;
}
function getProp(child, prop, props2) {
  return props2[prop] != null ? props2[prop] : child.props[prop];
}
function getInitialChildMapping(props2, onExited) {
  return getChildMapping(props2.children, function(child) {
    return (0, import_react31.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, "appear", props2),
      enter: getProp(child, "enter", props2),
      exit: getProp(child, "exit", props2)
    });
  });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children2 = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children2).forEach(function(key2) {
    var child = children2[key2];
    if (!(0, import_react31.isValidElement)(child)) return;
    var hasPrev = key2 in prevChildMapping;
    var hasNext = key2 in nextChildMapping;
    var prevChild = prevChildMapping[key2];
    var isLeaving = (0, import_react31.isValidElement)(prevChild) && !prevChild.props.in;
    if (hasNext && (!hasPrev || isLeaving)) {
      children2[key2] = (0, import_react31.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      children2[key2] = (0, import_react31.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, import_react31.isValidElement)(prevChild)) {
      children2[key2] = (0, import_react31.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    }
  });
  return children2;
}

// node_modules/react-transition-group/esm/TransitionGroup.js
var values = Object.values || function(obj) {
  return Object.keys(obj).map(function(k3) {
    return obj[k3];
  });
};
var defaultProps = {
  component: "div",
  childFactory: function childFactory(child) {
    return child;
  }
};
var TransitionGroup = (function(_React$Component) {
  _inheritsLoose(TransitionGroup2, _React$Component);
  function TransitionGroup2(props2, context) {
    var _this;
    _this = _React$Component.call(this, props2, context) || this;
    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
    _this.state = {
      contextValue: {
        isMounting: true
      },
      handleExited,
      firstRender: true
    };
    return _this;
  }
  var _proto = TransitionGroup2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.mounted = true;
    this.setState({
      contextValue: {
        isMounting: false
      }
    });
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };
  TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
    return {
      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  };
  _proto.handleExited = function handleExited(child, node) {
    var currentChildMapping = getChildMapping(this.props.children);
    if (child.key in currentChildMapping) return;
    if (child.props.onExited) {
      child.props.onExited(node);
    }
    if (this.mounted) {
      this.setState(function(state) {
        var children2 = _extends({}, state.children);
        delete children2[child.key];
        return {
          children: children2
        };
      });
    }
  };
  _proto.render = function render2() {
    var _this$props = this.props, Component = _this$props.component, childFactory2 = _this$props.childFactory, props2 = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
    var contextValue = this.state.contextValue;
    var children2 = values(this.state.children).map(childFactory2);
    delete props2.appear;
    delete props2.enter;
    delete props2.exit;
    if (Component === null) {
      return import_react32.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, children2);
    }
    return import_react32.default.createElement(TransitionGroupContext_default.Provider, {
      value: contextValue
    }, import_react32.default.createElement(Component, props2, children2));
  };
  return TransitionGroup2;
})(import_react32.default.Component);
TransitionGroup.propTypes = true ? {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: import_prop_types4.default.any,
  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */
  children: import_prop_types4.default.node,
  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: import_prop_types4.default.bool,
  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: import_prop_types4.default.bool,
  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: import_prop_types4.default.bool,
  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: import_prop_types4.default.func
} : {};
TransitionGroup.defaultProps = defaultProps;
var TransitionGroup_default = TransitionGroup;

// node_modules/react-transition-group/esm/ReplaceTransition.js
var ReplaceTransition = (function(_React$Component) {
  _inheritsLoose(ReplaceTransition2, _React$Component);
  function ReplaceTransition2() {
    var _this;
    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
    _this.handleEnter = function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _this.handleLifecycle("onEnter", 0, args);
    };
    _this.handleEntering = function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return _this.handleLifecycle("onEntering", 0, args);
    };
    _this.handleEntered = function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return _this.handleLifecycle("onEntered", 0, args);
    };
    _this.handleExit = function() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      return _this.handleLifecycle("onExit", 1, args);
    };
    _this.handleExiting = function() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      return _this.handleLifecycle("onExiting", 1, args);
    };
    _this.handleExited = function() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }
      return _this.handleLifecycle("onExited", 1, args);
    };
    return _this;
  }
  var _proto = ReplaceTransition2.prototype;
  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
    var _child$props;
    var children2 = this.props.children;
    var child = import_react33.default.Children.toArray(children2)[idx];
    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
    if (this.props[handler]) {
      var maybeNode = child.props.nodeRef ? void 0 : import_react_dom5.default.findDOMNode(this);
      this.props[handler](maybeNode);
    }
  };
  _proto.render = function render2() {
    var _this$props = this.props, children2 = _this$props.children, inProp = _this$props.in, props2 = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);
    var _React$Children$toArr = import_react33.default.Children.toArray(children2), first = _React$Children$toArr[0], second2 = _React$Children$toArr[1];
    delete props2.onEnter;
    delete props2.onEntering;
    delete props2.onEntered;
    delete props2.onExit;
    delete props2.onExiting;
    delete props2.onExited;
    return import_react33.default.createElement(TransitionGroup_default, props2, inProp ? import_react33.default.cloneElement(first, {
      key: "first",
      onEnter: this.handleEnter,
      onEntering: this.handleEntering,
      onEntered: this.handleEntered
    }) : import_react33.default.cloneElement(second2, {
      key: "second",
      onEnter: this.handleExit,
      onEntering: this.handleExiting,
      onEntered: this.handleExited
    }));
  };
  return ReplaceTransition2;
})(import_react33.default.Component);
ReplaceTransition.propTypes = true ? {
  in: import_prop_types5.default.bool.isRequired,
  children: function children(props2, propName) {
    if (import_react33.default.Children.count(props2[propName]) !== 2) return new Error('"' + propName + '" must be exactly two transition components.');
    return null;
  }
} : {};

// node_modules/react-transition-group/esm/SwitchTransition.js
var import_react34 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var _leaveRenders;
var _enterRenders;
function areChildrenDifferent(oldChildren, newChildren) {
  if (oldChildren === newChildren) return false;
  if (import_react34.default.isValidElement(oldChildren) && import_react34.default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
    return false;
  }
  return true;
}
var modes = {
  out: "out-in",
  in: "in-out"
};
var callHook = function callHook2(element, name, cb) {
  return function() {
    var _element$props;
    element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
    cb();
  };
};
var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function(_ref) {
  var current = _ref.current, changeState = _ref.changeState;
  return import_react34.default.cloneElement(current, {
    in: false,
    onExited: callHook(current, "onExited", function() {
      changeState(ENTERING, null);
    })
  });
}, _leaveRenders[modes.in] = function(_ref2) {
  var current = _ref2.current, changeState = _ref2.changeState, children2 = _ref2.children;
  return [current, import_react34.default.cloneElement(children2, {
    in: true,
    onEntered: callHook(children2, "onEntered", function() {
      changeState(ENTERING);
    })
  })];
}, _leaveRenders);
var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function(_ref3) {
  var children2 = _ref3.children, changeState = _ref3.changeState;
  return import_react34.default.cloneElement(children2, {
    in: true,
    onEntered: callHook(children2, "onEntered", function() {
      changeState(ENTERED, import_react34.default.cloneElement(children2, {
        in: true
      }));
    })
  });
}, _enterRenders[modes.in] = function(_ref4) {
  var current = _ref4.current, children2 = _ref4.children, changeState = _ref4.changeState;
  return [import_react34.default.cloneElement(current, {
    in: false,
    onExited: callHook(current, "onExited", function() {
      changeState(ENTERED, import_react34.default.cloneElement(children2, {
        in: true
      }));
    })
  }), import_react34.default.cloneElement(children2, {
    in: true
  })];
}, _enterRenders);
var SwitchTransition = (function(_React$Component) {
  _inheritsLoose(SwitchTransition2, _React$Component);
  function SwitchTransition2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      status: ENTERED,
      current: null
    };
    _this.appeared = false;
    _this.changeState = function(status, current) {
      if (current === void 0) {
        current = _this.state.current;
      }
      _this.setState({
        status,
        current
      });
    };
    return _this;
  }
  var _proto = SwitchTransition2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.appeared = true;
  };
  SwitchTransition2.getDerivedStateFromProps = function getDerivedStateFromProps(props2, state) {
    if (props2.children == null) {
      return {
        current: null
      };
    }
    if (state.status === ENTERING && props2.mode === modes.in) {
      return {
        status: ENTERING
      };
    }
    if (state.current && areChildrenDifferent(state.current, props2.children)) {
      return {
        status: EXITING
      };
    }
    return {
      current: import_react34.default.cloneElement(props2.children, {
        in: true
      })
    };
  };
  _proto.render = function render2() {
    var _this$props = this.props, children2 = _this$props.children, mode = _this$props.mode, _this$state = this.state, status = _this$state.status, current = _this$state.current;
    var data = {
      children: children2,
      current,
      changeState: this.changeState,
      status
    };
    var component;
    switch (status) {
      case ENTERING:
        component = enterRenders[mode](data);
        break;
      case EXITING:
        component = leaveRenders[mode](data);
        break;
      case ENTERED:
        component = current;
    }
    return import_react34.default.createElement(TransitionGroupContext_default.Provider, {
      value: {
        isMounting: !this.appeared
      }
    }, component);
  };
  return SwitchTransition2;
})(import_react34.default.Component);
SwitchTransition.propTypes = true ? {
  /**
   * Transition modes.
   * `out-in`: Current element transitions out first, then when complete, the new element transitions in.
   * `in-out`: New element transitions in first, then when complete, the current element transitions out.
   *
   * @type {'out-in'|'in-out'}
   */
  mode: import_prop_types6.default.oneOf([modes.in, modes.out]),
  /**
   * Any `Transition` or `CSSTransition` component.
   */
  children: import_prop_types6.default.oneOfType([import_prop_types6.default.element.isRequired])
} : {};
SwitchTransition.defaultProps = {
  mode: modes.out
};

// node_modules/@cloudscape-design/components/internal/components/transition/index.js
function Transition2(_a2) {
  var { in: isIn, children: children2, exit = true, onStatusChange = () => void 0, disabled = false, transitionChangeDelay } = _a2, rest = __rest(_a2, ["in", "children", "exit", "onStatusChange", "disabled", "transitionChangeDelay"]);
  const transitionRootElement = (0, import_react36.useRef)(null);
  const [transitionState, setTransitionState] = (0, import_react35.useState)(isIn ? "entered" : "exited");
  const motionDisabled = useReducedMotion(transitionRootElement) || disabled;
  const addTransitionEndListener = (0, import_react36.useCallback)((done) => {
    const node = transitionRootElement.current;
    if (node === null) {
      return;
    }
    const controller = new AbortController();
    const listener = (e3) => {
      if (e3.target === node) {
        controller.abort();
        done();
      }
    };
    node.addEventListener("transitionend", listener, { signal: controller.signal });
    node.addEventListener("animationend", listener, { signal: controller.signal });
  }, []);
  return import_react35.default.createElement(Transition_default, Object.assign({ addEndListener: addTransitionEndListener, timeout: motionDisabled ? 0 : void 0, in: isIn, nodeRef: transitionRootElement, exit, onEnter: (isAppearing) => {
    if (!isAppearing) {
      setTransitionState("enter");
      onStatusChange("enter");
    }
  }, onEntering: (isAppearing) => {
    var _a3;
    if (!isAppearing) {
      void ((_a3 = transitionRootElement.current) === null || _a3 === void 0 ? void 0 : _a3.offsetHeight);
      if (transitionChangeDelay === null || transitionChangeDelay === void 0 ? void 0 : transitionChangeDelay.entering) {
        setTimeout(() => {
          setTransitionState("entering");
          onStatusChange("entering");
        }, transitionChangeDelay === null || transitionChangeDelay === void 0 ? void 0 : transitionChangeDelay.entering);
      } else {
        setTransitionState("entering");
        onStatusChange("entering");
      }
    }
  }, onEntered: (isAppearing) => {
    if (!isAppearing) {
      setTransitionState("entered");
      onStatusChange("entered");
    }
  }, onExit: () => {
    setTransitionState("exit");
    onStatusChange("exit");
  }, onExiting: () => {
    setTransitionState("exiting");
    onStatusChange("exiting");
  }, onExited: () => {
    setTransitionState("exited");
    onStatusChange("exited");
  } }, rest), () => children2(transitionState, transitionRootElement));
}

// node_modules/@cloudscape-design/components/internal/components/tooltip/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/tooltip/styles.scoped.css";
var styles_css_default4 = {
  "root": "awsui_root_1qprf_160mh_5"
};

// node_modules/@cloudscape-design/components/internal/components/tooltip/index.js
function Tooltip({ value, trackRef, trackKey, className: className2, contentAttributes = {}, position = "top", size = "small", hideOnOverscroll, onDismiss }) {
  if (!trackKey && (typeof value === "string" || typeof value === "number")) {
    trackKey = value;
  }
  (0, import_react37.useEffect)(() => {
    const controller = new AbortController();
    window.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        event.stopPropagation();
        onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss();
      }
    }, {
      // The tooltip is often activated on mouseover, which means the focus can
      // be anywhere else on the page. Capture also means that this gets called
      // before any wrapper modals or dialogs can detect it and act on it.
      capture: true,
      signal: controller.signal
    });
    return () => {
      controller.abort();
    };
  }, [onDismiss]);
  return import_react37.default.createElement(
    Portal,
    null,
    import_react37.default.createElement(
      "div",
      Object.assign({ className: styles_css_default4.root }, contentAttributes, { "data-testid": trackKey }),
      import_react37.default.createElement(Transition2, { in: true }, () => import_react37.default.createElement(
        PopoverContainer,
        { trackRef, trackKey, size, fixedWidth: false, position, zIndex: 7e3, arrow: (position2) => import_react37.default.createElement(arrow_default, { position: position2 }), hideOnOverscroll, className: className2 },
        import_react37.default.createElement(PopoverBody, { dismissButton: false, dismissAriaLabel: void 0, onDismiss: void 0, header: void 0 }, value)
      ))
    )
  );
}

// node_modules/@cloudscape-design/components/internal/context/button-context.js
var import_react38 = __toESM(require_react());
var ButtonContext = (0, import_react38.createContext)({
  onClick: () => {
  }
});
function useButtonContext() {
  return (0, import_react38.useContext)(ButtonContext);
}

// node_modules/@cloudscape-design/components/internal/events/index.js
var CustomEventStub = class {
  constructor(cancelable = false, detail = null) {
    this.cancelable = cancelable;
    this.detail = detail;
    this.defaultPrevented = false;
    this.cancelBubble = false;
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
  stopPropagation() {
    this.cancelBubble = true;
  }
};
function createCustomEvent({ cancelable, detail }) {
  return new CustomEventStub(cancelable, detail);
}
function fireNonCancelableEvent(handler, detail) {
  if (!handler) {
    return;
  }
  const event = createCustomEvent({ cancelable: false, detail });
  handler(event);
}
function fireCancelableEvent(handler, detail, sourceEvent) {
  if (!handler) {
    return false;
  }
  const event = createCustomEvent({ cancelable: true, detail });
  handler(event);
  if (event.defaultPrevented && sourceEvent) {
    sourceEvent.preventDefault();
  }
  if (event.cancelBubble && sourceEvent) {
    sourceEvent.stopPropagation();
  }
  return event.defaultPrevented;
}
function fireKeyboardEvent(handler, reactEvent) {
  return fireCancelableEvent(handler, {
    keyCode: reactEvent.keyCode,
    key: reactEvent.key,
    ctrlKey: reactEvent.ctrlKey,
    shiftKey: reactEvent.shiftKey,
    altKey: reactEvent.altKey,
    metaKey: reactEvent.metaKey,
    isComposing: reactEvent.nativeEvent.isComposing
  }, reactEvent);
}
var isMouseEvent = (e3) => {
  return e3.button !== void 0;
};
function hasModifierKeys(event) {
  return event.ctrlKey || event.altKey || event.shiftKey || event.metaKey;
}
function isPlainLeftClick(event) {
  return event && (!isMouseEvent(event) || event.button === 0) && !hasModifierKeys(event);
}

// node_modules/@cloudscape-design/components/internal/hooks/forward-focus/index.js
var import_react39 = __toESM(require_react());
function useForwardFocus(mainRef, controlRef) {
  (0, import_react39.useImperativeHandle)(mainRef, () => ({
    focus(...args) {
      var _a2;
      (_a2 = controlRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus(...args);
    }
  }), [controlRef]);
}

// node_modules/@cloudscape-design/components/internal/hooks/use-hidden-description/index.js
var import_react40 = __toESM(require_react());
function useHiddenDescription(description) {
  const id = useUniqueId();
  return {
    targetProps: {
      "aria-describedby": description ? id : void 0
    },
    descriptionEl: description ? import_react40.default.createElement("span", { id, hidden: true }, description) : null,
    descriptionId: id
  };
}

// node_modules/@cloudscape-design/components/internal/hooks/use-modal-component-analytics/index.js
var import_react42 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/context/modal-context.js
var import_react41 = __toESM(require_react());
var ModalContext = (0, import_react41.createContext)({
  isInModal: false,
  componentLoadingCount: { current: 0 },
  emitTimeToContentReadyInModal: () => {
  }
});
var useModalContext = () => {
  const modalContext = (0, import_react41.useContext)(ModalContext);
  return modalContext;
};

// node_modules/@cloudscape-design/components/internal/hooks/use-modal-component-analytics/index.js
var useModalContextLoadingButtonComponent = (isPrimaryButton, loading) => {
  const modalContext = useModalContext();
  (0, import_react42.useEffect)(() => {
    if (!isPrimaryButton || !modalContext.isInModal) {
      return;
    }
    if (loading) {
      modalContext.componentLoadingCount.current++;
      return () => {
        modalContext.componentLoadingCount.current--;
        modalContext.emitTimeToContentReadyInModal(performance.now());
      };
    }
  }, [loading]);
};
var useModalContextLoadingComponent = () => {
  const modalContext = useModalContext();
  (0, import_react42.useEffect)(() => {
    if (!modalContext.isInModal) {
      return;
    }
    modalContext.componentLoadingCount.current++;
    return () => {
      modalContext.componentLoadingCount.current--;
      modalContext.emitTimeToContentReadyInModal(performance.now());
    };
  }, []);
};

// node_modules/@cloudscape-design/components/internal/hooks/use-performance-marks/index.js
var import_react45 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-dom-attribute/index.js
var import_react43 = __toESM(require_react());
function useDOMAttribute(elementRef, attributeName, value) {
  const attributeValueRef = (0, import_react43.useRef)();
  (0, import_react43.useEffect)(() => {
    var _a2;
    attributeValueRef.current = value;
    (_a2 = elementRef.current) === null || _a2 === void 0 ? void 0 : _a2.setAttribute(attributeName, value);
  }, [attributeName, value, elementRef]);
  return {
    [attributeName]: attributeValueRef.current
  };
}

// node_modules/@cloudscape-design/components/internal/hooks/use-effect-on-update/index.js
var import_react44 = __toESM(require_react());
function useEffectOnUpdate2(callback, deps) {
  const previousDepsRef = (0, import_react44.useRef)(null);
  (0, import_react44.useEffect)(() => {
    const previousDeps = previousDepsRef.current;
    previousDepsRef.current = deps;
    if (previousDeps === null) {
      return;
    }
    if (isDepsEqual(previousDeps, deps)) {
      return;
    }
    return callback();
  }, deps);
}
function isDepsEqual(prev, next) {
  for (let i2 = 0; i2 < Math.max(prev.length, next.length); i2++) {
    if (!Object.is(prev[i2], next[i2])) {
      return false;
    }
  }
  return true;
}

// node_modules/@cloudscape-design/components/internal/hooks/use-performance-marks/is-in-viewport.js
var map = /* @__PURE__ */ new WeakMap();
var MANUAL_TRIGGER_DELAY = 150;
function isInViewport(element, callback) {
  let resolve = (value) => {
    resolve = () => {
    };
    callback(value);
  };
  map.set(element, (inViewport) => resolve(inViewport));
  observer.observe(element);
  const timeoutHandle = setTimeout(() => resolve(false), MANUAL_TRIGGER_DELAY);
  return () => {
    clearTimeout(timeoutHandle);
    map.delete(element);
    observer.unobserve(element);
  };
}
function createIntersectionObserver(callback) {
  if (typeof IntersectionObserver === "undefined") {
    return {
      observe: () => {
      },
      unobserve: () => {
      }
    };
  }
  return new IntersectionObserver(callback);
}
var observer = createIntersectionObserver(function isInViewportObserver(entries) {
  var _a2;
  for (const entry of entries) {
    observer.unobserve(entry.target);
    (_a2 = map.get(entry.target)) === null || _a2 === void 0 ? void 0 : _a2(entry.isIntersecting);
    map.delete(entry.target);
  }
});

// node_modules/@cloudscape-design/components/internal/hooks/use-performance-marks/index.js
var EVALUATE_COMPONENT_VISIBILITY_EVENT = "awsui-evaluate-component-visibility";
var useEvaluateComponentVisibility = () => {
  const [evaluateComponentVisibility, setEvaluateComponentVisibility] = (0, import_react45.useState)(false);
  (0, import_react45.useEffect)(() => {
    const handleEvaluateComponentVisibility = () => {
      setEvaluateComponentVisibility((prev) => !prev);
    };
    document.addEventListener(EVALUATE_COMPONENT_VISIBILITY_EVENT, handleEvaluateComponentVisibility);
    return () => {
      document.removeEventListener(EVALUATE_COMPONENT_VISIBILITY_EVENT, handleEvaluateComponentVisibility);
    };
  }, []);
  return evaluateComponentVisibility;
};
function usePerformanceMarks(name, enabled, elementRef, getDetails, dependencies) {
  const id = useRandomId();
  const { isInModal } = useModalContext();
  const attributes = useDOMAttribute(elementRef, "data-analytics-performance-mark", id);
  const evaluateComponentVisibility = useEvaluateComponentVisibility();
  (0, import_react45.useEffect)(() => {
    if (!enabled() || !elementRef.current || isInModal) {
      return;
    }
    const elementVisible = elementRef.current.offsetWidth > 0 && elementRef.current.offsetHeight > 0 && getComputedStyle(elementRef.current).visibility !== "hidden";
    if (!elementVisible) {
      return;
    }
    const timestamp = performance.now();
    const cleanup = isInViewport(elementRef.current, (inViewport) => {
      performance.mark(`${name}Rendered`, {
        startTime: timestamp,
        detail: Object.assign({ source: "awsui", instanceIdentifier: id, inViewport }, getDetails())
      });
    });
    return cleanup;
  }, []);
  useEffectOnUpdate2(() => {
    if (!enabled() || !elementRef.current || isInModal) {
      return;
    }
    const elementVisible = elementRef.current.offsetWidth > 0 && elementRef.current.offsetHeight > 0 && getComputedStyle(elementRef.current).visibility !== "hidden";
    if (!elementVisible) {
      return;
    }
    const timestamp = performance.now();
    const cleanup = isInViewport(elementRef.current, (inViewport) => {
      performance.mark(`${name}Updated`, {
        startTime: timestamp,
        detail: Object.assign({ source: "awsui", instanceIdentifier: id, inViewport }, getDetails())
      });
    });
    return cleanup;
  }, [evaluateComponentVisibility, ...dependencies]);
  return attributes;
}

// node_modules/@cloudscape-design/components/internal/utils/check-safe-url.js
var allowedJavascriptUrls = ["javascript:void(0)", "javascript:void(0);", "javascript:;"];
function checkSafeUrl(component, url) {
  if (!url) {
    return;
  }
  if (allowedJavascriptUrls.indexOf(url.toLowerCase()) !== -1) {
    return;
  }
  let parsedUrl;
  try {
    parsedUrl = new URL(url);
  } catch (e3) {
    return;
  }
  if (parsedUrl.protocol === "javascript:") {
    warnOnce(component, `A javascript: URL was blocked as a security precaution. The URL was "${url}".`);
    throw new Error(`A javascript: URL was blocked as a security precaution.`);
  }
  return;
}

// node_modules/@cloudscape-design/components/live-region/internal.js
var import_react46 = __toESM(require_react());

// node_modules/@cloudscape-design/components/live-region/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/live-region/styles.scoped.css";
var styles_css_default5 = {
  "root": "awsui_root_1iee7_xy9l5_145",
  "announcer": "awsui_announcer_1iee7_xy9l5_153"
};

// node_modules/@cloudscape-design/components/live-region/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/live-region/test-classes/styles.scoped.css";
var styles_css_default6 = {
  "root": "awsui_root_1pc7b_1k8pp_5",
  "announcer": "awsui_announcer_1pc7b_1k8pp_9"
};

// node_modules/@cloudscape-design/components/live-region/controller.js
var LiveRegionController = class _LiveRegionController {
  constructor(politeness, delay = _LiveRegionController.defaultDelay) {
    this.politeness = politeness;
    this.delay = delay;
    this._addedTerminalPeriod = false;
    this._nextAnnouncement = "";
    this._element = document.createElement("div");
    this._element.className = `${styles_css_default5.announcer} ${styles_css_default6.announcer}`;
    this._element.setAttribute("aria-live", this.politeness);
    this._element.setAttribute("aria-atomic", "true");
    document.body.appendChild(this._element);
  }
  /**
   * Reset the state of the controller and clear any active announcements.
   */
  destroy() {
    var _a2;
    (_a2 = this._element) === null || _a2 === void 0 ? void 0 : _a2.remove();
    if (this._timeoutId !== void 0) {
      clearTimeout(this._timeoutId);
      this._timeoutId = void 0;
    }
  }
  announce({ message, forceReannounce = false }) {
    if (!message) {
      return;
    }
    this._nextAnnouncement = message.trim();
    if (this.delay === 0 || forceReannounce) {
      return this._updateElement(forceReannounce);
    }
    if (this._timeoutId === void 0) {
      this._timeoutId = setTimeout(() => this._updateElement(false), this.delay * 1e3);
    }
  }
  _updateElement(forceReannounce) {
    if (this._nextAnnouncement !== this._lastAnnouncement) {
      this._element.textContent = this._nextAnnouncement;
      this._addedTerminalPeriod = false;
    } else if (forceReannounce) {
      this._element.textContent = this._nextAnnouncement + (this._addedTerminalPeriod ? "" : ".");
      this._addedTerminalPeriod = !this._addedTerminalPeriod;
    }
    this._lastAnnouncement = this._nextAnnouncement;
    this._timeoutId = void 0;
  }
};
LiveRegionController.defaultDelay = 2;

// node_modules/@cloudscape-design/components/live-region/internal.js
var internal_default2 = import_react46.default.forwardRef(function InternalLiveRegion(_a2, ref) {
  var { assertive = false, hidden = false, tagName: TagName = "div", delay, sources, children: children2, __internalRootRef, className: className2 } = _a2, restProps = __rest(_a2, ["assertive", "hidden", "tagName", "delay", "sources", "children", "__internalRootRef", "className"]);
  const baseProps = getBaseProps(restProps);
  const childrenRef = (0, import_react46.useRef)(null);
  const mergedRef = useMergeRefs(childrenRef, __internalRootRef);
  (0, import_react46.useEffect)(() => {
    if (childrenRef.current) {
      childrenRef.current.inert = hidden;
    }
  }, [hidden]);
  const liveRegionControllerRef = (0, import_react46.useRef)();
  (0, import_react46.useEffect)(() => {
    const liveRegionController = new LiveRegionController(assertive ? "assertive" : "polite");
    liveRegionControllerRef.current = liveRegionController;
    return () => {
      liveRegionController.destroy();
      liveRegionControllerRef.current = void 0;
    };
  }, [assertive]);
  const getContent = () => {
    if (sources) {
      return getSourceContent(sources);
    }
    if (childrenRef.current) {
      return extractTextContent(childrenRef.current);
    }
  };
  (0, import_react46.useEffect)(() => {
    var _a3;
    (_a3 = liveRegionControllerRef.current) === null || _a3 === void 0 ? void 0 : _a3.announce({ message: getContent(), delay });
  });
  (0, import_react46.useImperativeHandle)(ref, () => ({
    reannounce() {
      var _a3;
      (_a3 = liveRegionControllerRef.current) === null || _a3 === void 0 ? void 0 : _a3.announce({ message: getContent(), delay, forceReannounce: true });
    }
  }));
  return import_react46.default.createElement(TagName, Object.assign({ ref: mergedRef }, baseProps, { className: clsx_m_default(styles_css_default5.root, styles_css_default6.root, className2), hidden }), children2);
});
var processNode = (childNode) => {
  if (childNode.nodeType === Node.TEXT_NODE) {
    return childNode.textContent || "";
  }
  if (childNode.nodeType === Node.ELEMENT_NODE) {
    return extractTextContent(childNode);
  }
  return "";
};
function extractTextContent(node) {
  var _a2;
  if (!node || !((_a2 = node === null || node === void 0 ? void 0 : node.childNodes) === null || _a2 === void 0 ? void 0 : _a2.length)) {
    return "";
  }
  return Array.from(node.childNodes, processNode).join(" ").replace(/\s+/g, " ").trim();
}
function getSourceContent(source) {
  return source.map((item) => {
    if (!item || typeof item === "string") {
      return item;
    }
    if (item.current) {
      return extractTextContent(item.current);
    }
  }).filter(Boolean).join(" ");
}

// node_modules/@cloudscape-design/components/button/icon-helper.js
var React23 = __toESM(require_react());

// node_modules/@cloudscape-design/components/spinner/internal.js
var import_react47 = __toESM(require_react());

// node_modules/@cloudscape-design/components/spinner/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/spinner/styles.scoped.css";
var styles_css_default7 = {
  "root": "awsui_root_1612d_1m6jt_183",
  "spinner-rotator": "awsui_spinner-rotator_1612d_1m6jt_1",
  "size-normal": "awsui_size-normal_1612d_1m6jt_198",
  "size-big": "awsui_size-big_1612d_1m6jt_206",
  "size-large": "awsui_size-large_1612d_1m6jt_214",
  "variant-normal": "awsui_variant-normal_1612d_1m6jt_222",
  "variant-disabled": "awsui_variant-disabled_1612d_1m6jt_225",
  "variant-inverted": "awsui_variant-inverted_1612d_1m6jt_228",
  "circle": "awsui_circle_1612d_1m6jt_240",
  "circle-left": "awsui_circle-left_1612d_1m6jt_268",
  "spinner-line-left": "awsui_spinner-line-left_1612d_1m6jt_1",
  "circle-right": "awsui_circle-right_1612d_1m6jt_273",
  "spinner-line-right": "awsui_spinner-line-right_1612d_1m6jt_1"
};

// node_modules/@cloudscape-design/components/spinner/internal.js
function InternalSpinner(_a2) {
  var { size = "normal", variant = "normal", nativeAttributes, __internalRootRef } = _a2, props2 = __rest(_a2, ["size", "variant", "nativeAttributes", "__internalRootRef"]);
  const baseProps = getBaseProps(props2);
  useModalContextLoadingComponent();
  return import_react47.default.createElement(
    with_native_attributes_default,
    Object.assign({}, baseProps, { tag: "span", componentName: "Spinner", nativeAttributes, className: clsx_m_default(baseProps.className, styles_css_default7.root, styles_css_default7[`size-${size}`], styles_css_default7[`variant-${variant}`]), ref: __internalRootRef }),
    import_react47.default.createElement("span", { className: clsx_m_default(styles_css_default7.circle, styles_css_default7["circle-left"]) }),
    import_react47.default.createElement("span", { className: clsx_m_default(styles_css_default7.circle, styles_css_default7["circle-right"]) })
  );
}

// node_modules/@cloudscape-design/components/button/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/button/styles.scoped.css";
var styles_css_default8 = {
  "content": "awsui_content_vjswe_bkbu6_153",
  "button": "awsui_button_vjswe_bkbu6_157",
  "variant-normal": "awsui_variant-normal_vjswe_bkbu6_206",
  "disabled": "awsui_disabled_vjswe_bkbu6_227",
  "variant-primary": "awsui_variant-primary_vjswe_bkbu6_235",
  "variant-link": "awsui_variant-link_vjswe_bkbu6_264",
  "variant-icon": "awsui_variant-icon_vjswe_bkbu6_293",
  "variant-inline-icon": "awsui_variant-inline-icon_vjswe_bkbu6_322",
  "variant-inline-icon-pointer-target": "awsui_variant-inline-icon-pointer-target_vjswe_bkbu6_351",
  "variant-inline-link": "awsui_variant-inline-link_vjswe_bkbu6_380",
  "variant-modal-dismiss": "awsui_variant-modal-dismiss_vjswe_bkbu6_413",
  "variant-flashbar-icon": "awsui_variant-flashbar-icon_vjswe_bkbu6_442",
  "variant-breadcrumb-group": "awsui_variant-breadcrumb-group_vjswe_bkbu6_471",
  "variant-menu-trigger": "awsui_variant-menu-trigger_vjswe_bkbu6_505",
  "button-no-text": "awsui_button-no-text_vjswe_bkbu6_601",
  "button-no-wrap": "awsui_button-no-wrap_vjswe_bkbu6_605",
  "full-width": "awsui_full-width_vjswe_bkbu6_608",
  "icon-left": "awsui_icon-left_vjswe_bkbu6_630",
  "icon-right": "awsui_icon-right_vjswe_bkbu6_635",
  "icon": "awsui_icon_vjswe_bkbu6_630",
  "link": "awsui_link_vjswe_bkbu6_654",
  "disabled-with-reason": "awsui_disabled-with-reason_vjswe_bkbu6_654"
};

// node_modules/@cloudscape-design/components/button/icon-helper.js
function getIconAlign(props2) {
  const standalone = props2.variant === "icon" || props2.variant === "inline-icon";
  return standalone ? "left" : props2.iconAlign;
}
function IconWrapper(_a2) {
  var { iconName, iconUrl, iconAlt, iconSvg, iconSize, badge } = _a2, props2 = __rest(_a2, ["iconName", "iconUrl", "iconAlt", "iconSvg", "iconSize", "badge"]);
  if (!iconName && !iconUrl && !iconSvg) {
    return null;
  }
  return React23.createElement(internal_default, { className: clsx_m_default(styles_css_default8.icon, styles_css_default8[`icon-${getIconAlign(props2)}`], props2.iconClass), name: iconName, url: iconUrl, svg: iconSvg, alt: iconAlt, size: iconSize, badge });
}
function LeftIcon(props2) {
  if (props2.loading) {
    return React23.createElement(InternalSpinner, { className: clsx_m_default(styles_css_default8.icon, styles_css_default8["icon-left"]) });
  } else if (getIconAlign(props2) === "left") {
    return React23.createElement(IconWrapper, Object.assign({}, props2));
  }
  return null;
}
function RightIcon(props2) {
  if (getIconAlign(props2) === "right") {
    return React23.createElement(IconWrapper, Object.assign({}, props2));
  }
  return null;
}

// node_modules/@cloudscape-design/components/internal/generated/custom-css-properties/index.js
var customCSSPropertiesMap = {
  "maxContentWidth": "--awsui-max-content-width-vl73au",
  "minContentWidth": "--awsui-min-content-width-vl73au",
  "breadcrumbsGap": "--awsui-breadcrumbs-gap-vl73au",
  "contentGapLeft": "--awsui-content-gap-left-vl73au",
  "contentGapRight": "--awsui-content-gap-right-vl73au",
  "contentHeight": "--awsui-content-height-vl73au",
  "contentLayoutDefaultHorizontalPadding": "--awsui-content-layout-default-horizontal-padding-vl73au",
  "contentLayoutMaxContentWidth": "--awsui-content-layout-max-content-width-vl73au",
  "contentLayoutMainGap": "--awsui-content-layout-main-gap-vl73au",
  "defaultMaxContentWidth": "--awsui-default-max-content-width-vl73au",
  "defaultMinContentWidth": "--awsui-default-min-content-width-vl73au",
  "drawerSize": "--awsui-drawer-size-vl73au",
  "drawerMinSize": "--awsui-drawer-min-size-vl73au",
  "footerHeight": "--awsui-footer-height-vl73au",
  "headerGap": "--awsui-header-gap-vl73au",
  "headerHeight": "--awsui-header-height-vl73au",
  "layoutWidth": "--awsui-layout-width-vl73au",
  "mainGap": "--awsui-main-gap-vl73au",
  "mainOffsetLeft": "--awsui-main-offset-left-vl73au",
  "mainTemplateRows": "--awsui-main-template-rows-vl73au",
  "mobileBarHeight": "--awsui-mobile-bar-height-vl73au",
  "notificationsHeight": "--awsui-notifications-height-vl73au",
  "offsetTop": "--awsui-offset-top-vl73au",
  "overlapHeight": "--awsui-overlap-height-vl73au",
  "navigationWidth": "--awsui-navigation-width-vl73au",
  "splitPanelReportedHeaderSize": "--awsui-split-panel-reported-header-size-vl73au",
  "splitPanelReportedSize": "--awsui-split-panel-reported-size-vl73au",
  "splitPanelHeight": "--awsui-split-panel-height-vl73au",
  "splitPanelMinWidth": "--awsui-split-panel-min-width-vl73au",
  "splitPanelMaxWidth": "--awsui-split-panel-max-width-vl73au",
  "toolsMaxWidth": "--awsui-tools-max-width-vl73au",
  "toolsWidth": "--awsui-tools-width-vl73au",
  "toolsAnimationStartingOpacity": "--awsui-tools-animation-starting-opacity-vl73au",
  "contentScrollMargin": "--awsui-content-scroll-margin-vl73au",
  "flashbarStackDepth": "--awsui-flashbar-stack-depth-vl73au",
  "flashbarStackIndex": "--awsui-flashbar-stack-index-vl73au",
  "flashbarStickyBottomMargin": "--awsui-flashbar-sticky-bottom-margin-vl73au",
  "stackedNotificationsBottomMargin": "--awsui-stacked-notifications-bottom-margin-vl73au",
  "stackedNotificationsDefaultBottomMargin": "--awsui-stacked-notifications-default-bottom-margin-vl73au",
  "dropdownDefaultMaxWidth": "--awsui-dropdown-default-max-width-vl73au",
  "spinnerRotatorFrom": "--awsui-spinner-rotator-from-vl73au",
  "spinnerRotatorTo": "--awsui-spinner-rotator-to-vl73au",
  "spinnerLineLeftFrom": "--awsui-spinner-line-left-from-vl73au",
  "spinnerLineLeftTo": "--awsui-spinner-line-left-to-vl73au",
  "spinnerLineRightFrom": "--awsui-spinner-line-right-from-vl73au",
  "spinnerLineRightTo": "--awsui-spinner-line-right-to-vl73au",
  "sliderLabelCount": "--awsui-slider-label-count-vl73au",
  "sliderTickCount": "--awsui-slider-tick-count-vl73au",
  "sliderReferenceColumn": "--awsui-slider-reference-column-vl73au",
  "sliderNextReferenceColumn": "--awsui-slider-next-reference-column-vl73au",
  "sliderMaxStart": "--awsui-slider-max-start-vl73au",
  "sliderMinEnd": "--awsui-slider-min-end-vl73au",
  "sliderRangeInlineSize": "--awsui-slider-range-inline-size-vl73au",
  "sliderTooltipPosition": "--awsui-slider-tooltip-position-vl73au",
  "togglesLeftWidth": "--awsui-toggles-left-width-vl73au",
  "togglesRightWidth": "--awsui-toggles-right-width-vl73au",
  "promptInputMaxRows": "--awsui-prompt-input-max-rows-vl73au",
  "promptInputScrollHeight": "--awsui-prompt-input-scroll-height-vl73au",
  "dragHandleAnimationInlineOffset": "--awsui-drag-handle-animation-inline-offset-vl73au",
  "dragHandleAnimationBlockOffset": "--awsui-drag-handle-animation-block-offset-vl73au",
  "styleBackgroundActive": "--awsui-style-background-active-vl73au",
  "styleBackgroundDefault": "--awsui-style-background-default-vl73au",
  "styleBackgroundDisabled": "--awsui-style-background-disabled-vl73au",
  "styleBackgroundHover": "--awsui-style-background-hover-vl73au",
  "styleBorderColorActive": "--awsui-style-border-color-active-vl73au",
  "styleBorderColorDefault": "--awsui-style-border-color-default-vl73au",
  "styleBorderColorDisabled": "--awsui-style-border-color-disabled-vl73au",
  "styleBorderColorHover": "--awsui-style-border-color-hover-vl73au",
  "styleColorActive": "--awsui-style-color-active-vl73au",
  "styleColorDefault": "--awsui-style-color-default-vl73au",
  "styleColorDisabled": "--awsui-style-color-disabled-vl73au",
  "styleColorHover": "--awsui-style-color-hover-vl73au",
  "styleFocusRingBorderColor": "--awsui-style-focus-ring-border-color-vl73au",
  "styleFocusRingBorderRadius": "--awsui-style-focus-ring-border-radius-vl73au",
  "styleFocusRingBorderWidth": "--awsui-style-focus-ring-border-width-vl73au",
  "styleFocusRingBoxShadow": "--awsui-style-focus-ring-box-shadow-vl73au",
  "styleBoxShadowActive": "--awsui-style-box-shadow-active-vl73au",
  "styleBoxShadowDefault": "--awsui-style-box-shadow-default-vl73au",
  "styleBoxShadowDisabled": "--awsui-style-box-shadow-disabled-vl73au",
  "styleBoxShadowHover": "--awsui-style-box-shadow-hover-vl73au",
  "alertFocusRingBorderColor": "--awsui-alert-focus-ring-border-color-vl73au",
  "alertFocusRingBorderRadius": "--awsui-alert-focus-ring-border-radius-vl73au",
  "alertFocusRingBorderWidth": "--awsui-alert-focus-ring-border-width-vl73au",
  "alertFocusRingBoxShadow": "--awsui-alert-focus-ring-box-shadow-vl73au",
  "alertIconColor": "--awsui-alert-icon-color-vl73au"
};
var custom_css_properties_default = customCSSPropertiesMap;

// node_modules/@cloudscape-design/components/button/style.js
function getButtonStyles(style) {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5;
  if (SYSTEM !== "core" || !(style === null || style === void 0 ? void 0 : style.root)) {
    return void 0;
  }
  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ borderRadius: (_a2 = style === null || style === void 0 ? void 0 : style.root) === null || _a2 === void 0 ? void 0 : _a2.borderRadius, borderWidth: (_b = style === null || style === void 0 ? void 0 : style.root) === null || _b === void 0 ? void 0 : _b.borderWidth, paddingBlock: (_c = style === null || style === void 0 ? void 0 : style.root) === null || _c === void 0 ? void 0 : _c.paddingBlock, paddingInline: (_d = style === null || style === void 0 ? void 0 : style.root) === null || _d === void 0 ? void 0 : _d.paddingInline }, ((_e = style === null || style === void 0 ? void 0 : style.root) === null || _e === void 0 ? void 0 : _e.background) && {
    [custom_css_properties_default.styleBackgroundActive]: (_f = style.root.background) === null || _f === void 0 ? void 0 : _f.active,
    [custom_css_properties_default.styleBackgroundDefault]: (_g = style.root.background) === null || _g === void 0 ? void 0 : _g.default,
    [custom_css_properties_default.styleBackgroundDisabled]: (_h = style.root.background) === null || _h === void 0 ? void 0 : _h.disabled,
    [custom_css_properties_default.styleBackgroundHover]: (_j = style.root.background) === null || _j === void 0 ? void 0 : _j.hover
  }), ((_k = style === null || style === void 0 ? void 0 : style.root) === null || _k === void 0 ? void 0 : _k.borderColor) && {
    [custom_css_properties_default.styleBorderColorActive]: (_l = style.root.borderColor) === null || _l === void 0 ? void 0 : _l.active,
    [custom_css_properties_default.styleBorderColorDefault]: (_m = style.root.borderColor) === null || _m === void 0 ? void 0 : _m.default,
    [custom_css_properties_default.styleBorderColorDisabled]: (_o = style.root.borderColor) === null || _o === void 0 ? void 0 : _o.disabled,
    [custom_css_properties_default.styleBorderColorHover]: (_p = style.root.borderColor) === null || _p === void 0 ? void 0 : _p.hover
  }), ((_q = style === null || style === void 0 ? void 0 : style.root) === null || _q === void 0 ? void 0 : _q.boxShadow) && {
    [custom_css_properties_default.styleBoxShadowActive]: (_r = style.root.boxShadow) === null || _r === void 0 ? void 0 : _r.active,
    [custom_css_properties_default.styleBoxShadowDefault]: (_s = style.root.boxShadow) === null || _s === void 0 ? void 0 : _s.default,
    [custom_css_properties_default.styleBoxShadowDisabled]: (_t = style.root.boxShadow) === null || _t === void 0 ? void 0 : _t.disabled,
    [custom_css_properties_default.styleBoxShadowHover]: (_u = style.root.boxShadow) === null || _u === void 0 ? void 0 : _u.hover
  }), ((_v = style === null || style === void 0 ? void 0 : style.root) === null || _v === void 0 ? void 0 : _v.color) && {
    [custom_css_properties_default.styleColorActive]: (_w = style.root.color) === null || _w === void 0 ? void 0 : _w.active,
    [custom_css_properties_default.styleColorDefault]: (_x = style.root.color) === null || _x === void 0 ? void 0 : _x.default,
    [custom_css_properties_default.styleColorDisabled]: (_y = style.root.color) === null || _y === void 0 ? void 0 : _y.disabled,
    [custom_css_properties_default.styleColorHover]: (_z = style.root.color) === null || _z === void 0 ? void 0 : _z.hover
  }), ((_0 = style === null || style === void 0 ? void 0 : style.root) === null || _0 === void 0 ? void 0 : _0.focusRing) && {
    [custom_css_properties_default.styleFocusRingBorderColor]: (_1 = style.root.focusRing) === null || _1 === void 0 ? void 0 : _1.borderColor,
    [custom_css_properties_default.styleFocusRingBorderRadius]: (_2 = style.root.focusRing) === null || _2 === void 0 ? void 0 : _2.borderRadius,
    [custom_css_properties_default.styleFocusRingBorderWidth]: (_3 = style.root.focusRing) === null || _3 === void 0 ? void 0 : _3.borderWidth
  }), ((_5 = (_4 = style === null || style === void 0 ? void 0 : style.root) === null || _4 === void 0 ? void 0 : _4.focusRing) === null || _5 === void 0 ? void 0 : _5.borderRadius) && {
    [custom_css_properties_default.styleFocusRingBorderRadius]: style.root.focusRing.borderRadius
  });
}

// node_modules/@cloudscape-design/components/button/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/button/analytics-metadata/styles.scoped.css";
var styles_css_default9 = {
  "label": "awsui_label_1f1d4_ocied_5"
};

// node_modules/@cloudscape-design/components/button/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/button/test-classes/styles.scoped.css";
var styles_css_default10 = {
  "disabled-reason-tooltip": "awsui_disabled-reason-tooltip_1ueyk_ca6yt_5",
  "external-icon": "awsui_external-icon_1ueyk_ca6yt_9"
};

// node_modules/@cloudscape-design/components/button/internal.js
var InternalButton = import_react48.default.forwardRef((_a2, ref) => {
  var _b;
  var { children: children2, iconName, __iconClass, onClick, onFollow, iconAlign = "left", iconUrl, iconSvg, iconAlt, variant = "normal", loading = false, loadingText, disabled = false, disabledReason, wrapText = true, href, external, target: targetOverride, rel, download, formAction = "submit", ariaLabel, ariaDescribedby, ariaExpanded, ariaControls, fullWidth, badge, i18nStrings, style, nativeButtonAttributes, nativeAnchorAttributes, __internalRootRef, __focusable = false, __injectAnalyticsComponentMetadata = false, __title, __emitPerformanceMarks = true, __skipNativeAttributesWarnings, analyticsAction = "click" } = _a2, props2 = __rest(_a2, ["children", "iconName", "__iconClass", "onClick", "onFollow", "iconAlign", "iconUrl", "iconSvg", "iconAlt", "variant", "loading", "loadingText", "disabled", "disabledReason", "wrapText", "href", "external", "target", "rel", "download", "formAction", "ariaLabel", "ariaDescribedby", "ariaExpanded", "ariaControls", "fullWidth", "badge", "i18nStrings", "style", "nativeButtonAttributes", "nativeAnchorAttributes", "__internalRootRef", "__focusable", "__injectAnalyticsComponentMetadata", "__title", "__emitPerformanceMarks", "__skipNativeAttributesWarnings", "analyticsAction"]);
  const [showTooltip, setShowTooltip] = (0, import_react48.useState)(false);
  checkSafeUrl("Button", href);
  const isAnchor = Boolean(href);
  const target = targetOverride !== null && targetOverride !== void 0 ? targetOverride : external ? "_blank" : void 0;
  const isNotInteractive = loading || disabled;
  const isDisabledWithReason = (variant === "normal" || variant === "primary" || variant === "icon") && !!disabledReason && disabled;
  const hasAriaDisabled = loading && !disabled || disabled && __focusable || isDisabledWithReason;
  const shouldHaveContent = children2 && ["icon", "inline-icon", "flashbar-icon", "modal-dismiss", "inline-icon-pointer-target"].indexOf(variant) === -1;
  if ((iconName || iconUrl || iconSvg) && iconAlign === "right" && external) {
    warnOnce("Button", "A right-aligned icon should not be combined with an external icon.");
  }
  const buttonRef = (0, import_react48.useRef)(null);
  useForwardFocus(ref, buttonRef);
  const buttonContext = useButtonContext();
  const i18n = useInternalI18n("button");
  const uniqueId = useUniqueId("button");
  const { funnelInteractionId } = useFunnel();
  const { stepNumber, stepNameSelector } = useFunnelStep();
  const { subStepSelector, subStepNameSelector } = useFunnelSubStep();
  const performanceMarkAttributes = usePerformanceMarks("primaryButton", () => variant === "primary" && __emitPerformanceMarks && !loading && !disabled, buttonRef, () => {
    var _a3;
    return {
      loading,
      disabled,
      text: (_a3 = buttonRef.current) === null || _a3 === void 0 ? void 0 : _a3.innerText
    };
  }, [loading, disabled]);
  useModalContextLoadingButtonComponent(variant === "primary", loading);
  const { targetProps, descriptionEl } = useHiddenDescription(disabledReason);
  const handleClick = (event) => {
    if (isNotInteractive) {
      return event.preventDefault();
    }
    if (isAnchor && isPlainLeftClick(event)) {
      fireCancelableEvent(onFollow, { href, target }, event);
      if ((iconName === "external" || target === "_blank") && funnelInteractionId) {
        const stepName = getTextFromSelector(stepNameSelector);
        const subStepName = getTextFromSelector(subStepNameSelector);
        FunnelMetrics.externalLinkInteracted({
          funnelInteractionId,
          stepNumber,
          stepName,
          stepNameSelector,
          subStepSelector,
          subStepName,
          subStepNameSelector,
          elementSelector: getFunnelValueSelector(uniqueId),
          subStepAllSelector: getSubStepAllSelector()
        });
      }
    }
    const { altKey, button, ctrlKey, metaKey, shiftKey } = event;
    fireCancelableEvent(onClick, { altKey, button, ctrlKey, metaKey, shiftKey }, event);
    buttonContext.onClick({ variant });
  };
  const buttonClass = clsx_m_default(props2.className, styles_css_default8.button, styles_css_default8[`variant-${variant}`], {
    [styles_css_default8.disabled]: isNotInteractive,
    [styles_css_default8["disabled-with-reason"]]: isDisabledWithReason,
    [styles_css_default8["button-no-wrap"]]: !wrapText,
    [styles_css_default8["button-no-text"]]: !shouldHaveContent,
    [styles_css_default8["full-width"]]: shouldHaveContent && fullWidth,
    [styles_css_default8.link]: isAnchor
  });
  const explicitTabIndex = (_b = nativeButtonAttributes === null || nativeButtonAttributes === void 0 ? void 0 : nativeButtonAttributes.tabIndex) !== null && _b !== void 0 ? _b : nativeAnchorAttributes === null || nativeAnchorAttributes === void 0 ? void 0 : nativeAnchorAttributes.tabIndex;
  const { tabIndex } = useSingleTabStopNavigation(buttonRef, {
    tabIndex: isAnchor && isNotInteractive && !isDisabledWithReason ? -1 : explicitTabIndex
  });
  const analyticsMetadata = disabled ? {} : {
    action: analyticsAction,
    detail: { label: { root: "self" } }
  };
  if (__injectAnalyticsComponentMetadata) {
    analyticsMetadata.component = {
      name: "awsui.Button",
      label: { root: "self" },
      properties: { variant, disabled: `${disabled}` }
    };
  }
  const buttonProps = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, props2), performanceMarkAttributes), {
    tabIndex,
    // https://github.com/microsoft/TypeScript/issues/36659
    ref: useMergeRefs(buttonRef, __internalRootRef),
    "aria-label": ariaLabel,
    "aria-describedby": ariaDescribedby,
    "aria-expanded": ariaExpanded,
    "aria-controls": ariaControls,
    // add ariaLabel as `title` as visible hint text
    title: __title !== null && __title !== void 0 ? __title : ariaLabel,
    className: buttonClass,
    onClick: handleClick,
    [DATA_ATTR_FUNNEL_VALUE]: uniqueId
  }), getAnalyticsMetadataAttribute(analyticsMetadata)), getAnalyticsLabelAttribute(shouldHaveContent ? `.${styles_css_default9.label}` : ""));
  const iconProps = {
    loading,
    iconName,
    iconAlign,
    iconUrl,
    iconSvg,
    iconAlt,
    variant,
    badge,
    iconClass: __iconClass,
    iconSize: variant === "modal-dismiss" ? "medium" : "normal"
  };
  const buttonContent = import_react48.default.createElement(
    import_react48.default.Fragment,
    null,
    import_react48.default.createElement(LeftIcon, Object.assign({}, iconProps)),
    shouldHaveContent && import_react48.default.createElement(
      import_react48.default.Fragment,
      null,
      import_react48.default.createElement("span", { className: clsx_m_default(styles_css_default8.content, styles_css_default9.label) }, children2),
      external && import_react48.default.createElement(
        import_react48.default.Fragment,
        null,
        " ",
        import_react48.default.createElement(internal_default, { name: "external", className: styles_css_default10["external-icon"], ariaLabel: i18n("i18nStrings.externalIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.externalIconAriaLabel) })
      )
    ),
    import_react48.default.createElement(RightIcon, Object.assign({}, iconProps))
  );
  const { loadingButtonCount } = useFunnel();
  (0, import_react48.useEffect)(() => {
    if (loading) {
      loadingButtonCount.current++;
      return () => {
        loadingButtonCount.current--;
      };
    }
  }, [loading, loadingButtonCount]);
  const disabledReasonProps = Object.assign({ onFocus: isDisabledWithReason ? () => setShowTooltip(true) : void 0, onBlur: isDisabledWithReason ? () => setShowTooltip(false) : void 0, onMouseEnter: isDisabledWithReason ? () => setShowTooltip(true) : void 0, onMouseLeave: isDisabledWithReason ? () => setShowTooltip(false) : void 0 }, isDisabledWithReason ? targetProps : {});
  const disabledReasonContent = import_react48.default.createElement(
    import_react48.default.Fragment,
    null,
    descriptionEl,
    showTooltip && import_react48.default.createElement(Tooltip, { className: styles_css_default10["disabled-reason-tooltip"], trackRef: buttonRef, value: disabledReason, onDismiss: () => setShowTooltip(false) })
  );
  const stylePropertiesAndVariables = getButtonStyles(style);
  if (isAnchor) {
    const getAnchorTabIndex = () => {
      if (isNotInteractive) {
        return disabledReason ? 0 : buttonProps.tabIndex;
      }
      return buttonProps.tabIndex;
    };
    return import_react48.default.createElement(
      import_react48.default.Fragment,
      null,
      import_react48.default.createElement(
        with_native_attributes_default,
        Object.assign({}, buttonProps, disabledReasonProps, {
          tag: "a",
          componentName: "Button",
          nativeAttributes: nativeAnchorAttributes,
          skipWarnings: __skipNativeAttributesWarnings,
          href: isNotInteractive ? void 0 : href,
          role: isNotInteractive ? "link" : void 0,
          tabIndex: getAnchorTabIndex(),
          target,
          // security recommendation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target
          rel: rel !== null && rel !== void 0 ? rel : target === "_blank" ? "noopener noreferrer" : void 0,
          "aria-disabled": isNotInteractive ? true : void 0,
          download,
          style: stylePropertiesAndVariables
        }),
        buttonContent,
        isDisabledWithReason && disabledReasonContent
      ),
      loading && loadingText && import_react48.default.createElement(internal_default2, { tagName: "span", hidden: true }, loadingText)
    );
  }
  return import_react48.default.createElement(
    import_react48.default.Fragment,
    null,
    import_react48.default.createElement(
      with_native_attributes_default,
      Object.assign({}, buttonProps, disabledReasonProps, { tag: "button", componentName: "Button", nativeAttributes: nativeButtonAttributes, skipWarnings: __skipNativeAttributesWarnings, type: formAction === "none" ? "button" : "submit", disabled: disabled && !__focusable && !isDisabledWithReason, "aria-disabled": hasAriaDisabled ? true : void 0, style: stylePropertiesAndVariables }),
      buttonContent,
      isDisabledWithReason && disabledReasonContent
    ),
    loading && loadingText && import_react48.default.createElement(internal_default2, { tagName: "span", hidden: true }, loadingText)
  );
});
var internal_default3 = InternalButton;

// node_modules/@cloudscape-design/components/internal/components/visual-context/index.js
var import_react49 = __toESM(require_react());
var contextMatch = /awsui-context-([\w-]+)/;
function useVisualContext(elementRef) {
  const [value, setValue] = (0, import_react49.useState)("");
  (0, import_react49.useLayoutEffect)(() => {
    var _a2;
    if (elementRef.current) {
      const contextParent = findUpUntil(elementRef.current, (node) => !!node.className.match(contextMatch));
      setValue((_a2 = contextParent === null || contextParent === void 0 ? void 0 : contextParent.className.match(contextMatch)[1]) !== null && _a2 !== void 0 ? _a2 : "");
    }
  }, [elementRef]);
  return value;
}
function getVisualContextClassname(contextName) {
  return `awsui-context-${contextName}`;
}
function VisualContext({ contextName, className: className2, children: children2 }) {
  return import_react49.default.createElement("div", { className: clsx_m_default(getVisualContextClassname(contextName), className2) }, children2);
}

// node_modules/@cloudscape-design/components/internal/context/link-default-variant-context.js
var import_react50 = __toESM(require_react());
var defaultValue2 = {
  defaultVariant: "secondary"
};
var LinkDefaultVariantContext = (0, import_react50.createContext)(defaultValue2);

// node_modules/@cloudscape-design/components/internal/plugins/helpers/use-discovered-action.js
var import_react51 = __toESM(require_react());
function RuntimeActionWrapper({ mountContent, unmountContent, context }) {
  const ref = (0, import_react51.useRef)(null);
  (0, import_react51.useEffect)(() => {
    const container = ref.current;
    mountContent(container, context);
    return () => {
      unmountContent(container);
    };
  }, []);
  return import_react51.default.createElement("div", { ref });
}
function convertRuntimeAction(action, context) {
  if (!action) {
    return null;
  }
  return import_react51.default.createElement(RuntimeActionWrapper, { key: action.id + "-" + context.type, context, mountContent: action.mountContent, unmountContent: action.unmountContent });
}
function createUseDiscoveredAction(onActionRegistered) {
  return function useDiscoveredAction3(type) {
    const [discoveredActions, setDiscoveredActions] = (0, import_react51.useState)([]);
    const headerRef = (0, import_react51.useRef)(null);
    const contentRef = (0, import_react51.useRef)(null);
    (0, import_react51.useEffect)(() => {
      return onActionRegistered((actions) => {
        setDiscoveredActions(actions.map((action) => convertRuntimeAction(action, { type, headerRef, contentRef })));
      });
    }, [type]);
    return { discoveredActions, headerRef, contentRef };
  };
}

// node_modules/@cloudscape-design/components/internal/plugins/helpers/use-discovered-content.js
var import_react52 = __toESM(require_react());
function createUseDiscoveredContent(componentName3, controller) {
  return function useDiscoveredContent3({ type, header, children: children2 }) {
    const instanceId = useUniqueId(`${componentName3}-discovered-content`);
    const headerRef = (0, import_react52.useRef)(null);
    const contentRef = (0, import_react52.useRef)(null);
    const replacementHeaderRef = (0, import_react52.useRef)(null);
    const replacementContentRef = (0, import_react52.useRef)(null);
    const [initialHidden, setInitialHidden] = (0, import_react52.useState)(() => controller.initialCheck({
      instanceId,
      type,
      header,
      content: children2
    }));
    const [headerReplacementType, setFoundHeaderReplacement] = (0, import_react52.useState)("original");
    const [contentReplacementType, setFoundContentReplacement] = (0, import_react52.useState)("original");
    const mountedProvider = (0, import_react52.useRef)();
    (0, import_react52.useEffect)(() => {
      const context = { instanceId, type, headerRef, contentRef };
      setInitialHidden(false);
      return controller.onContentRegistered((provider) => {
        let mounted = true;
        function checkMounted(methodName) {
          if (!mounted) {
            reportRuntimeApiWarning(`${componentName3}-content-replacer`, `"${methodName}" called after component unmounted`);
            return false;
          }
          return true;
        }
        mountedProvider.current = provider.runReplacer(context, {
          hideHeader() {
            if (checkMounted("hideHeader")) {
              setFoundHeaderReplacement("remove");
            }
          },
          restoreHeader() {
            if (checkMounted("restoreHeader")) {
              setFoundHeaderReplacement("original");
            }
          },
          replaceHeader(replacer) {
            if (checkMounted("replaceHeader")) {
              replacer(replacementHeaderRef.current);
              setFoundHeaderReplacement("replaced");
            }
          },
          hideContent() {
            if (checkMounted("hideContent")) {
              setFoundContentReplacement("remove");
            }
          },
          restoreContent() {
            if (checkMounted("restoreContent")) {
              setFoundContentReplacement("original");
            }
          },
          replaceContent(replacer) {
            if (checkMounted("replaceContent")) {
              replacer(replacementContentRef.current);
              setFoundContentReplacement("replaced");
            }
          }
        });
        return () => {
          var _a2;
          (_a2 = mountedProvider.current) === null || _a2 === void 0 ? void 0 : _a2.unmount({
            replacementHeaderContainer: replacementHeaderRef.current,
            replacementContentContainer: replacementContentRef.current
          });
          mounted = false;
        };
      });
    }, [instanceId, type]);
    (0, import_react52.useEffect)(() => {
      var _a2;
      (_a2 = mountedProvider.current) === null || _a2 === void 0 ? void 0 : _a2.update();
    }, [type, header, children2]);
    return {
      initialHidden,
      headerReplacementType,
      contentReplacementType,
      headerRef,
      replacementHeaderRef,
      contentRef,
      replacementContentRef
    };
  };
}

// node_modules/@cloudscape-design/component-toolkit/container-queries/use-container-query.js
var import_react53 = __toESM(require_react());
function useContainerQuery(mapFn, deps = []) {
  const elementRef = (0, import_react53.useRef)(null);
  const [state, setState] = (0, import_react53.useState)(null);
  const getElement = (0, import_react53.useCallback)(() => elementRef.current, deps);
  useResizeObserver(getElement, (entry) => setState((prevState) => mapFn(entry, prevState)));
  return [state, elementRef];
}

// node_modules/@cloudscape-design/component-toolkit/use-controllable-state/use-controllable-state.js
var import_react54 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/utils/use-container-width.js
function useContainerWidth(defaultValue4 = 0, threshold = 1) {
  const [width, ref] = useContainerQuery((rect, prev) => {
    if (prev === null) {
      return rect.contentBoxWidth;
    }
    return Math.abs(prev - rect.contentBoxWidth) >= threshold ? rect.contentBoxWidth : prev;
  });
  return [width !== null && width !== void 0 ? width : defaultValue4, ref];
}

// node_modules/@cloudscape-design/components/alert/actions-wrapper/index.js
var import_react55 = __toESM(require_react());

// node_modules/@cloudscape-design/components/alert/actions-wrapper/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/alert/actions-wrapper/styles.scoped.css";
var styles_css_default11 = {
  "root": "awsui_root_37gf8_1udtb_9"
};

// node_modules/@cloudscape-design/components/alert/actions-wrapper/index.js
function createActionButton(testUtilClasses, action, buttonText, onButtonClick) {
  if (!action && buttonText) {
    action = import_react55.default.createElement(
      "span",
      Object.assign({}, getAnalyticsMetadataAttribute({
        action: "buttonClick"
      })),
      import_react55.default.createElement(internal_default3, { className: testUtilClasses.actionButton, onClick: onButtonClick, formAction: "none" }, buttonText)
    );
  }
  return action ? import_react55.default.createElement("div", { className: testUtilClasses.actionSlot }, action) : null;
}
var ActionsWrapper = ({ className: className2, testUtilClasses, action, discoveredActions, buttonText, wrappedClass, containerWidth, onButtonClick }) => {
  const [wrapped, setWrapped] = (0, import_react55.useState)(false);
  const ref = import_react55.default.useRef(null);
  (0, import_react55.useLayoutEffect)(() => {
    if (!ref.current || !containerWidth || !wrappedClass) {
      return;
    }
    function check() {
      const isRtl = getIsRtl(ref.current);
      const { offsetWidth, offsetLeft } = ref.current;
      const start = isRtl ? containerWidth - offsetWidth - offsetLeft : offsetLeft;
      setWrapped(start < 100);
    }
    const observer2 = new MutationObserver(check);
    observer2.observe(ref.current, { attributes: false, childList: true, subtree: true });
    check();
    return () => observer2.disconnect();
  });
  const actionButton = createActionButton(testUtilClasses, action, buttonText, onButtonClick);
  if (!actionButton && discoveredActions.length === 0) {
    return null;
  }
  return import_react55.default.createElement(
    "div",
    { ref, className: clsx_m_default(styles_css_default11.root, className2, wrapped && wrappedClass) },
    actionButton,
    discoveredActions
  );
};

// node_modules/@cloudscape-design/components/alert/style.js
function getAlertStyles(style) {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _j;
  if (SYSTEM !== "core" || !(style === null || style === void 0 ? void 0 : style.root)) {
    return void 0;
  }
  return Object.assign({ background: (_a2 = style.root) === null || _a2 === void 0 ? void 0 : _a2.background, borderColor: (_b = style.root) === null || _b === void 0 ? void 0 : _b.borderColor, borderRadius: (_c = style.root) === null || _c === void 0 ? void 0 : _c.borderRadius, borderWidth: (_d = style.root) === null || _d === void 0 ? void 0 : _d.borderWidth, color: (_e = style.root) === null || _e === void 0 ? void 0 : _e.color }, ((_f = style.root) === null || _f === void 0 ? void 0 : _f.focusRing) && {
    [custom_css_properties_default.alertFocusRingBorderColor]: (_g = style.root.focusRing) === null || _g === void 0 ? void 0 : _g.borderColor,
    [custom_css_properties_default.alertFocusRingBorderRadius]: (_h = style.root.focusRing) === null || _h === void 0 ? void 0 : _h.borderRadius,
    [custom_css_properties_default.alertFocusRingBorderWidth]: (_j = style.root.focusRing) === null || _j === void 0 ? void 0 : _j.borderWidth
  });
}
function getIconStyles(style) {
  var _a2;
  if (SYSTEM !== "core" || !((_a2 = style === null || style === void 0 ? void 0 : style.icon) === null || _a2 === void 0 ? void 0 : _a2.color)) {
    return void 0;
  }
  return {
    [custom_css_properties_default.alertIconColor]: style.icon.color
  };
}
function getDismissButtonStyles(style) {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
  if (SYSTEM !== "core" || !(style === null || style === void 0 ? void 0 : style.dismissButton)) {
    return void 0;
  }
  return {
    root: {
      color: {
        active: (_b = (_a2 = style.dismissButton) === null || _a2 === void 0 ? void 0 : _a2.color) === null || _b === void 0 ? void 0 : _b.active,
        default: (_d = (_c = style.dismissButton) === null || _c === void 0 ? void 0 : _c.color) === null || _d === void 0 ? void 0 : _d.default,
        hover: (_f = (_e = style.dismissButton) === null || _e === void 0 ? void 0 : _e.color) === null || _f === void 0 ? void 0 : _f.hover
      },
      focusRing: {
        borderColor: (_h = (_g = style.dismissButton) === null || _g === void 0 ? void 0 : _g.focusRing) === null || _h === void 0 ? void 0 : _h.borderColor,
        borderRadius: (_k = (_j = style.dismissButton) === null || _j === void 0 ? void 0 : _j.focusRing) === null || _k === void 0 ? void 0 : _k.borderRadius,
        borderWidth: (_m = (_l = style.dismissButton) === null || _l === void 0 ? void 0 : _l.focusRing) === null || _m === void 0 ? void 0 : _m.borderWidth
      }
    }
  };
}

// node_modules/@cloudscape-design/components/alert/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/alert/analytics-metadata/styles.scoped.css";
var styles_css_default12 = {
  "header": "awsui_header_17427_1ns0c_5"
};

// node_modules/@cloudscape-design/components/alert/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/alert/styles.scoped.css";
var styles_css_default13 = {
  "alert": "awsui_alert_mx3cw_14o2k_193",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_mx3cw_14o2k_1",
  "root": "awsui_root_mx3cw_14o2k_215",
  "hidden": "awsui_hidden_mx3cw_14o2k_250",
  "alert-wrapper": "awsui_alert-wrapper_mx3cw_14o2k_299",
  "initial-hidden": "awsui_initial-hidden_mx3cw_14o2k_311",
  "header": "awsui_header_mx3cw_14o2k_316",
  "header-replacement": "awsui_header-replacement_mx3cw_14o2k_317",
  "action": "awsui_action_mx3cw_14o2k_321",
  "action-slot": "awsui_action-slot_mx3cw_14o2k_325",
  "action-button": "awsui_action-button_mx3cw_14o2k_326",
  "alert-focus-wrapper": "awsui_alert-focus-wrapper_mx3cw_14o2k_330",
  "text": "awsui_text_mx3cw_14o2k_361",
  "icon": "awsui_icon_mx3cw_14o2k_368",
  "message": "awsui_message_mx3cw_14o2k_371",
  "action-wrapped": "awsui_action-wrapped_mx3cw_14o2k_375",
  "icon-size-medium": "awsui_icon-size-medium_mx3cw_14o2k_379",
  "icon-size-big": "awsui_icon-size-big_mx3cw_14o2k_383",
  "icon-size-normal": "awsui_icon-size-normal_mx3cw_14o2k_387",
  "content": "awsui_content_mx3cw_14o2k_391",
  "content-replacement": "awsui_content-replacement_mx3cw_14o2k_392",
  "dismiss": "awsui_dismiss_mx3cw_14o2k_396",
  "dismiss-button": "awsui_dismiss-button_mx3cw_14o2k_401",
  "type-error": "awsui_type-error_mx3cw_14o2k_405",
  "type-warning": "awsui_type-warning_mx3cw_14o2k_413",
  "type-success": "awsui_type-success_mx3cw_14o2k_421",
  "type-info": "awsui_type-info_mx3cw_14o2k_429"
};

// node_modules/@cloudscape-design/components/alert/internal.js
var typeToIcon = {
  error: "status-negative",
  warning: "status-warning",
  success: "status-positive",
  info: "status-info"
};
var useDiscoveredAction = createUseDiscoveredAction(awsuiPluginsInternal.alert.onActionRegistered);
var useDiscoveredContent = createUseDiscoveredContent("alert", awsuiPluginsInternal.alertContent);
var InternalAlert = import_react56.default.forwardRef((_a2, ref) => {
  var _b, _c;
  var { type, i18nStrings, visible = true, dismissible, children: children2, header, buttonText, action, onDismiss, onButtonClick, __internalRootRef, statusIconAriaLabel: deprecatedStatusIconAriaLabel, dismissAriaLabel: deprecatedDismissAriaLabel, messageSlotId, style } = _a2, rest = __rest(_a2, ["type", "i18nStrings", "visible", "dismissible", "children", "header", "buttonText", "action", "onDismiss", "onButtonClick", "__internalRootRef", "statusIconAriaLabel", "dismissAriaLabel", "messageSlotId", "style"]);
  const baseProps = getBaseProps(rest);
  const i18n = useInternalI18n("alert");
  const focusRef = (0, import_react56.useRef)(null);
  useForwardFocus(ref, focusRef);
  const { discoveredActions, headerRef: headerRefAction, contentRef: contentRefAction } = useDiscoveredAction(type);
  const { initialHidden, headerReplacementType, contentReplacementType, headerRef: headerRefContent, contentRef: contentRefContent, replacementHeaderRef, replacementContentRef } = useDiscoveredContent({ type, header, children: children2 });
  const [containerWidth, containerMeasureRef] = useContainerWidth();
  const containerRef = useMergeRefs(containerMeasureRef, __internalRootRef);
  const headerRef = useMergeRefs(headerRefAction, headerRefContent);
  const contentRef = useMergeRefs(contentRefAction, contentRefContent);
  const isRefresh = useVisualRefresh();
  const size = isRefresh ? "normal" : headerReplacementType !== "remove" && header && contentReplacementType !== "remove" && children2 ? "big" : "normal";
  const hasAction = Boolean(action || buttonText || discoveredActions.length);
  const analyticsAttributes = {
    [DATA_ATTR_ANALYTICS_ALERT]: type
  };
  const statusIconAriaLabel = i18n(`i18nStrings.${type}IconAriaLabel`, (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings[`${type}IconAriaLabel`]) !== null && _b !== void 0 ? _b : deprecatedStatusIconAriaLabel);
  const dismissAriaLabel = i18n("i18nStrings.dismissAriaLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dismissAriaLabel) !== null && _c !== void 0 ? _c : i18n("dismissAriaLabel", deprecatedDismissAriaLabel));
  return import_react56.default.createElement(
    "div",
    Object.assign({}, baseProps, analyticsAttributes, { "aria-hidden": !visible, className: clsx_m_default(styles_css_default13.root, { [styles_css_default13.hidden]: !visible, [styles_css_default13["initial-hidden"]]: initialHidden }, baseProps.className), ref: containerRef }),
    import_react56.default.createElement(
      LinkDefaultVariantContext.Provider,
      { value: { defaultVariant: "primary" } },
      import_react56.default.createElement(
        VisualContext,
        { contextName: "alert" },
        import_react56.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default13.alert, styles_css_default13[`type-${type}`], styles_css_default13[`icon-size-${size}`], hasAction && styles_css_default13["with-action"], dismissible && styles_css_default13["with-dismiss"]), style: getAlertStyles(style) },
          import_react56.default.createElement(
            "div",
            { className: styles_css_default13["alert-wrapper"] },
            import_react56.default.createElement(
              "div",
              { className: styles_css_default13["alert-focus-wrapper"], tabIndex: -1, ref: focusRef, role: "group" },
              import_react56.default.createElement(
                "div",
                { className: clsx_m_default(styles_css_default13.icon, styles_css_default13.text), style: getIconStyles(style) },
                import_react56.default.createElement(internal_default, { name: typeToIcon[type], size, ariaLabel: statusIconAriaLabel })
              ),
              import_react56.default.createElement(
                "div",
                { className: clsx_m_default(styles_css_default13.message, styles_css_default13.text), id: messageSlotId },
                import_react56.default.createElement("div", { className: clsx_m_default(header && styles_css_default13.header, headerReplacementType !== "original" ? styles_css_default13.hidden : styles_css_default12.header), ref: headerRef }, header),
                import_react56.default.createElement("div", { className: clsx_m_default(styles_css_default13["header-replacement"], headerReplacementType !== "replaced" ? styles_css_default13.hidden : styles_css_default12.header), ref: replacementHeaderRef }),
                import_react56.default.createElement("div", { className: clsx_m_default(styles_css_default13.content, contentReplacementType !== "original" && styles_css_default13.hidden), ref: contentRef }, children2),
                import_react56.default.createElement("div", { className: clsx_m_default(styles_css_default13["content-replacement"], contentReplacementType !== "replaced" && styles_css_default13.hidden), ref: replacementContentRef })
              )
            ),
            import_react56.default.createElement(ActionsWrapper, { className: styles_css_default13.action, testUtilClasses: {
              actionSlot: styles_css_default13["action-slot"],
              actionButton: styles_css_default13["action-button"]
            }, action, discoveredActions, buttonText, onButtonClick: () => fireNonCancelableEvent(onButtonClick), containerWidth, wrappedClass: styles_css_default13["action-wrapped"] })
          ),
          dismissible && import_react56.default.createElement(
            "div",
            Object.assign({ className: styles_css_default13.dismiss }, getAnalyticsMetadataAttribute({
              action: "dismiss"
            })),
            import_react56.default.createElement(InternalButton, { className: styles_css_default13["dismiss-button"], variant: "icon", iconName: "close", formAction: "none", ariaLabel: dismissAriaLabel, onClick: () => fireNonCancelableEvent(onDismiss), style: getDismissButtonStyles(style) })
          )
        )
      )
    )
  );
});
var internal_default4 = InternalAlert;

// node_modules/@cloudscape-design/components/alert/internal-do-not-use-core.js
var Alert = import_react57.default.forwardRef((_a2, ref) => {
  var { type = "info", visible = true, style } = _a2, props2 = __rest(_a2, ["type", "visible", "style"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props2);
  const baseComponentProps = useBaseComponent("Alert", {
    props: { type, visible, dismissible: props2.dismissible }
  }, analyticsMetadata);
  const rootRef = (0, import_react57.useRef)(null);
  const __internalRootRef = useMergeRefs(rootRef, baseComponentProps.__internalRootRef);
  const { funnelIdentifier, funnelInteractionId, funnelErrorContext, submissionAttempt, funnelState, errorCount } = useFunnel();
  const { stepNumber, stepNameSelector, stepIdentifier, subStepCount, stepErrorContext, subStepConfiguration } = useFunnelStep();
  const { subStepSelector, subStepNameSelector, subStepIdentifier, subStepErrorContext } = useFunnelSubStep();
  const messageSlotId = useUniqueId("alert-");
  (0, import_react57.useEffect)(() => {
    var _a3, _b, _c, _d, _e;
    if (funnelInteractionId && visible && type === "error" && funnelState.current !== "complete") {
      const stepName = getTextFromSelector(stepNameSelector);
      const subStepName = getTextFromSelector(subStepNameSelector);
      errorCount.current++;
      const errorIsVisible = ((_c = (_b = (_a3 = rootRef.current) === null || _a3 === void 0 ? void 0 : _a3.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.width) !== null && _c !== void 0 ? _c : 0) > 0;
      if (errorIsVisible) {
        if (subStepSelector) {
          FunnelMetrics.funnelSubStepError({
            funnelInteractionId,
            funnelIdentifier,
            stepIdentifier,
            subStepSelector,
            subStepName,
            subStepNameSelector,
            stepNumber,
            stepName,
            stepNameSelector,
            subStepAllSelector: getSubStepAllSelector(),
            subStepIdentifier,
            errorContext: analyticsMetadata.errorContext || subStepErrorContext
          });
        } else if (stepNameSelector) {
          FunnelMetrics.funnelStepError({
            funnelInteractionId,
            stepNumber,
            stepNameSelector,
            stepName,
            stepIdentifier,
            currentDocument: (_d = rootRef.current) === null || _d === void 0 ? void 0 : _d.ownerDocument,
            totalSubSteps: subStepCount.current,
            funnelIdentifier,
            subStepAllSelector: getSubStepAllSelector(),
            errorContext: analyticsMetadata.errorContext || stepErrorContext,
            subStepConfiguration: (_e = subStepConfiguration.current) === null || _e === void 0 ? void 0 : _e.get(stepNumber),
            stepErrorSelector: "#" + messageSlotId
          });
        } else {
          FunnelMetrics.funnelError({
            funnelIdentifier,
            funnelInteractionId,
            errorContext: analyticsMetadata.errorContext || funnelErrorContext
          });
        }
      }
      return () => {
        errorCount.current--;
      };
    }
  }, [funnelInteractionId, visible, submissionAttempt, errorCount]);
  const componentAnalyticsMetadata2 = {
    name: "awsui.Alert",
    label: `.${styles_css_default12.header}`,
    properties: {
      type
    }
  };
  return import_react57.default.createElement(internal_default4, Object.assign({ type, visible }, props2, baseComponentProps, { __internalRootRef, ref, messageSlotId, style }, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 })));
});
applyDisplayName(Alert, "Alert");
var internal_do_not_use_core_default = Alert;

// node_modules/@cloudscape-design/components/alert/index.js
var Alert2 = import_react58.default.forwardRef((props2, ref) => {
  validateProps("Alert", props2, ["style"], {}, "console");
  return import_react58.default.createElement(internal_do_not_use_core_default, { ref, ...props2 });
});
applyDisplayName(Alert2, "Alert");
var alert_default = Alert2;

// node_modules/@cloudscape-design/components/anchor-navigation/index.js
var import_react63 = __toESM(require_react());

// node_modules/@cloudscape-design/components/anchor-navigation/internal.js
var import_react62 = __toESM(require_react());

// node_modules/@cloudscape-design/components/anchor-navigation/use-scroll-spy.js
var import_react59 = __toESM(require_react());
var isBrowser = typeof window !== "undefined";
function useScrollSpy({ hrefs, scrollSpyOffset, activeHref }) {
  const [currentHref, setCurrentHref] = (0, import_react59.useState)(activeHref);
  const [lastAnchorExists, setLastAnchorExists] = (0, import_react59.useState)(false);
  (0, import_react59.useEffect)(() => {
    setCurrentHref(activeHref);
  }, [activeHref]);
  (0, import_react59.useEffect)(() => {
    var _a2;
    setLastAnchorExists(isBrowser && !!document.getElementById((_a2 = hrefs[hrefs.length - 1]) === null || _a2 === void 0 ? void 0 : _a2.slice(1)));
  }, [hrefs]);
  const getRectByHref = (0, import_react59.useCallback)((href) => {
    var _a2;
    return (_a2 = document.getElementById(href.slice(1))) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect();
  }, []);
  const isPageBottom = (0, import_react59.useCallback)(() => {
    return lastAnchorExists && Math.ceil(window.scrollY) >= Math.floor(document.body.scrollHeight - window.innerHeight);
  }, [lastAnchorExists]);
  const findHrefInView = (0, import_react59.useCallback)(() => {
    return hrefs.find((href) => {
      const rect = getRectByHref(href);
      return rect && rect.bottom <= window.innerHeight && rect.top >= scrollSpyOffset;
    });
  }, [getRectByHref, scrollSpyOffset, hrefs]);
  const findLastHrefInView = (0, import_react59.useCallback)(() => {
    return [...hrefs].reverse().find((href) => {
      const rect = getRectByHref(href);
      return rect && rect.bottom <= window.innerHeight;
    });
  }, [getRectByHref, hrefs]);
  const handleScroll = (0, import_react59.useCallback)(() => {
    if (activeHref || !isBrowser) {
      return;
    }
    const { scrollY } = window;
    if (document.body.scrollHeight > window.innerHeight && isPageBottom()) {
      setCurrentHref(hrefs[hrefs.length - 1]);
    } else {
      setCurrentHref(findHrefInView() || (scrollY > 0 ? findLastHrefInView() : void 0));
    }
  }, [activeHref, isPageBottom, findHrefInView, findLastHrefInView, hrefs]);
  (0, import_react59.useEffect)(() => {
    if (isBrowser) {
      handleScroll();
      window.addEventListener("scroll", handleScroll, { passive: true });
      return () => {
        window.removeEventListener("scroll", handleScroll);
      };
    }
  }, [handleScroll]);
  return currentHref;
}

// node_modules/@cloudscape-design/components/anchor-navigation/utils.js
var import_react61 = __toESM(require_react());

// node_modules/@cloudscape-design/components/anchor-navigation/anchor-item/index.js
var import_react60 = __toESM(require_react());

// node_modules/@cloudscape-design/components/anchor-navigation/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/anchor-navigation/styles.scoped.css";
var styles_css_default14 = {
  "root": "awsui_root_swimc_bhjn1_189",
  "anchor-list": "awsui_anchor-list_swimc_bhjn1_221",
  "anchor-item": "awsui_anchor-item_swimc_bhjn1_244",
  "anchor-item--active": "awsui_anchor-item--active_swimc_bhjn1_264",
  "anchor-link": "awsui_anchor-link_swimc_bhjn1_281",
  "anchor-link--active": "awsui_anchor-link--active_swimc_bhjn1_323",
  "anchor-link-text": "awsui_anchor-link-text_swimc_bhjn1_330",
  "anchor-link-info": "awsui_anchor-link-info_swimc_bhjn1_334"
};

// node_modules/@cloudscape-design/components/anchor-navigation/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/anchor-navigation/test-classes/styles.scoped.css";
var styles_css_default15 = {
  "root": "awsui_root_17oho_5eh15_5",
  "anchor-list": "awsui_anchor-list_17oho_5eh15_9",
  "anchor-item--active": "awsui_anchor-item--active_17oho_5eh15_13",
  "anchor-link": "awsui_anchor-link_17oho_5eh15_17",
  "anchor-link-text": "awsui_anchor-link-text_17oho_5eh15_21",
  "anchor-link-info": "awsui_anchor-link-info_17oho_5eh15_25"
};

// node_modules/@cloudscape-design/components/anchor-navigation/anchor-item/index.js
var AnchorItem = ({ anchor, onFollow, isActive, index, children: children2 }) => {
  checkSafeUrl("AnchorNavigation", anchor.href);
  const onClick = (0, import_react60.useCallback)((event) => {
    if (isPlainLeftClick(event)) {
      onFollow(anchor, event);
    }
  }, [onFollow, anchor]);
  const activeItemClasses = clsx_m_default(styles_css_default14["anchor-item--active"], styles_css_default15["anchor-item--active"]);
  return import_react60.default.createElement(
    "li",
    { "data-itemid": `anchor-item-${index + 1}`, className: clsx_m_default(styles_css_default14["anchor-item"], isActive && activeItemClasses) },
    import_react60.default.createElement(
      "a",
      Object.assign({ onClick, className: clsx_m_default(styles_css_default14["anchor-link"], styles_css_default15["anchor-link"], isActive && styles_css_default14["anchor-link--active"]) }, isActive ? { "aria-current": true } : {}, { href: anchor.href }),
      import_react60.default.createElement("span", { className: clsx_m_default(styles_css_default14["anchor-link-text"], styles_css_default15["anchor-link-text"]), style: { paddingInlineStart: `${anchor.level * 16 + 2}px` } }, anchor.text),
      anchor.info && import_react60.default.createElement("span", { className: clsx_m_default(styles_css_default14["anchor-link-info"], styles_css_default15["anchor-link-info"]) }, anchor.info)
    ),
    children2
  );
};

// node_modules/@cloudscape-design/components/anchor-navigation/utils.js
var collectChildItems = (items, currentIndex, currentLevel) => {
  const childItems = [];
  let nextIndex = currentIndex + 1;
  while (nextIndex < items.length && items[nextIndex].level > currentLevel) {
    childItems.push(items[nextIndex]);
    nextIndex++;
  }
  return childItems;
};
var createAnchorItem = (currentItem, index, childItems, renderQueue, context) => {
  const childList = [];
  const hasChildren = childItems.length > 0;
  const olClassNAme = clsx_m_default(styles_css_default14["anchor-list"], styles_css_default15["anchor-list"]);
  if (hasChildren) {
    renderQueue.push({
      items: childItems,
      parentList: childList,
      startIndex: index + 1
    });
  }
  return import_react61.default.createElement(AnchorItem, { onFollow: context.onFollowHandler, isActive: currentItem.href === context.currentActiveHref, key: index, index, anchor: currentItem }, hasChildren && import_react61.default.createElement("ol", { className: olClassNAme }, childList));
};
var processQueueItem = (items, startIndex, parentList, renderQueue, context) => {
  let currentIndex = 0;
  while (currentIndex < items.length) {
    const currentItem = items[currentIndex];
    const childItems = collectChildItems(items, currentIndex, currentItem.level);
    parentList.push(createAnchorItem(currentItem, startIndex + currentIndex, childItems, renderQueue, context));
    currentIndex += childItems.length + 1;
  }
};
var renderNestedAnchors = (items, context) => {
  const rootList = [];
  const renderQueue = [];
  renderQueue.push({ items, parentList: rootList, startIndex: 0 });
  while (renderQueue.length > 0) {
    const currentItem = renderQueue.shift();
    processQueueItem(currentItem.items, currentItem.startIndex, currentItem.parentList, renderQueue, context);
  }
  return rootList;
};

// node_modules/@cloudscape-design/components/anchor-navigation/internal.js
function InternalAnchorNavigation(_a2) {
  var { anchors, ariaLabelledby, onFollow, onActiveHrefChange, activeHref = "", __internalRootRef, scrollSpyOffset = 0 } = _a2, props2 = __rest(_a2, ["anchors", "ariaLabelledby", "onFollow", "onActiveHrefChange", "activeHref", "__internalRootRef", "scrollSpyOffset"]);
  const baseProps = getBaseProps(props2);
  const hrefs = (0, import_react62.useMemo)(() => anchors.map((anchor) => anchor.href), [anchors]);
  const onFollowHandler = (0, import_react62.useCallback)((anchor, sourceEvent) => {
    fireCancelableEvent(onFollow, anchor, sourceEvent);
  }, [onFollow]);
  const currentActiveHref = useScrollSpy({
    hrefs,
    scrollSpyOffset,
    activeHref
  });
  (0, import_react62.useEffect)(() => {
    if (currentActiveHref) {
      const newActiveAnchor = anchors.find((anchor) => anchor.href === currentActiveHref);
      fireNonCancelableEvent(onActiveHrefChange, newActiveAnchor);
    }
  }, [onActiveHrefChange, anchors, currentActiveHref]);
  return import_react62.default.createElement(
    "nav",
    Object.assign({}, baseProps, { ref: __internalRootRef, "aria-labelledby": ariaLabelledby, className: clsx_m_default(baseProps.className, styles_css_default14.root, styles_css_default15.root) }),
    import_react62.default.createElement("ol", { className: clsx_m_default(styles_css_default14["anchor-list"], styles_css_default15["anchor-list"]) }, renderNestedAnchors(anchors, {
      onFollowHandler,
      currentActiveHref
    }))
  );
}

// node_modules/@cloudscape-design/components/anchor-navigation/index.js
function AnchorNavigation(_a2) {
  var { scrollSpyOffset = 0 } = _a2, props2 = __rest(_a2, ["scrollSpyOffset"]);
  const baseComponentProps = useBaseComponent("AnchorNavigation");
  return import_react63.default.createElement(InternalAnchorNavigation, Object.assign({ scrollSpyOffset }, props2, baseComponentProps));
}
applyDisplayName(AnchorNavigation, "AnchorNavigation");

// node_modules/@cloudscape-design/components/annotation-context/index.js
var import_react73 = __toESM(require_react());

// node_modules/@cloudscape-design/components/annotation-context/annotation/closed-annotation.js
var import_react66 = __toESM(require_react());

// node_modules/@cloudscape-design/components/annotation-context/annotation/annotation-trigger.js
var import_react65 = __toESM(require_react());

// node_modules/@cloudscape-design/components/annotation-context/annotation/annotation-icon.js
var import_react64 = __toESM(require_react());

// node_modules/@cloudscape-design/components/annotation-context/annotation/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/annotation-context/annotation/styles.scoped.css";
var styles_css_default16 = {
  "arrow": "awsui_arrow_1hpp3_1fiqc_193",
  "arrow-outer": "awsui_arrow-outer_1hpp3_1fiqc_197",
  "arrow-inner": "awsui_arrow-inner_1hpp3_1fiqc_197",
  "arrow-position-right-top": "awsui_arrow-position-right-top_1hpp3_1fiqc_239",
  "arrow-position-right-bottom": "awsui_arrow-position-right-bottom_1hpp3_1fiqc_239",
  "arrow-position-left-top": "awsui_arrow-position-left-top_1hpp3_1fiqc_242",
  "arrow-position-left-bottom": "awsui_arrow-position-left-bottom_1hpp3_1fiqc_242",
  "arrow-position-top-center": "awsui_arrow-position-top-center_1hpp3_1fiqc_245",
  "arrow-position-top-responsive": "awsui_arrow-position-top-responsive_1hpp3_1fiqc_245",
  "arrow-position-bottom-center": "awsui_arrow-position-bottom-center_1hpp3_1fiqc_248",
  "arrow-position-bottom-responsive": "awsui_arrow-position-bottom-responsive_1hpp3_1fiqc_248",
  "annotation": "awsui_annotation_1hpp3_1fiqc_252",
  "next-button": "awsui_next-button_1hpp3_1fiqc_253",
  "previous-button": "awsui_previous-button_1hpp3_1fiqc_254",
  "finish-button": "awsui_finish-button_1hpp3_1fiqc_255",
  "header": "awsui_header_1hpp3_1fiqc_256",
  "step-counter-content": "awsui_step-counter-content_1hpp3_1fiqc_257",
  "content": "awsui_content_1hpp3_1fiqc_258",
  "description": "awsui_description_1hpp3_1fiqc_262",
  "actionBar": "awsui_actionBar_1hpp3_1fiqc_267",
  "stepCounter": "awsui_stepCounter_1hpp3_1fiqc_274",
  "divider": "awsui_divider_1hpp3_1fiqc_278",
  "hotspot": "awsui_hotspot_1hpp3_1fiqc_282",
  "icon": "awsui_icon_1hpp3_1fiqc_352"
};

// node_modules/@cloudscape-design/components/annotation-context/annotation/annotation-icon.js
var AnnotationIcon = ({ open }) => {
  if (open) {
    return import_react64.default.createElement(
      "svg",
      { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 16 16", focusable: "false", "aria-hidden": "true", className: styles_css_default16.icon },
      import_react64.default.createElement(
        "g",
        { fill: "none", fillRule: "evenodd", transform: "translate(1 1)" },
        import_react64.default.createElement("circle", { cx: "7", cy: "7", r: "7", strokeWidth: "2" }),
        import_react64.default.createElement("path", { strokeLinecap: "square", strokeWidth: "2.2", d: "M2.5,-1 L2.5,3", transform: "rotate(90 1.75 6.25)" })
      )
    );
  } else {
    return import_react64.default.createElement(
      "svg",
      { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 16 16", focusable: "false", "aria-hidden": "true", className: styles_css_default16.icon },
      import_react64.default.createElement(
        "g",
        { fill: "none", fillRule: "evenodd", transform: "translate(1 1)" },
        import_react64.default.createElement("circle", { cx: "7", cy: "7", r: "7", strokeWidth: "2" }),
        import_react64.default.createElement(
          "g",
          { strokeLinecap: "square", strokeWidth: "2.2", transform: "translate(4.5 5)" },
          import_react64.default.createElement("path", { d: "M2.5,0 L2.5,4", transform: "rotate(90 2.5 2)" }),
          import_react64.default.createElement("path", { d: "M2.5,0 L2.5,4" })
        )
      )
    );
  }
};

// node_modules/@cloudscape-design/components/annotation-context/annotation/annotation-trigger.js
var annotation_trigger_default = import_react65.default.forwardRef(function AnnotationTrigger({ open, onClick: onClickHandler, i18nStrings, taskLocalStepIndex, totalLocalSteps }, ref) {
  const onClick = (0, import_react65.useCallback)((event) => {
    event.preventDefault();
    onClickHandler();
  }, [onClickHandler]);
  return import_react65.default.createElement(
    "button",
    { ref, className: styles_css_default16.hotspot, "aria-haspopup": "dialog", "aria-expanded": open, "aria-label": i18nStrings.labelHotspot(open, taskLocalStepIndex !== null && taskLocalStepIndex !== void 0 ? taskLocalStepIndex : 0, totalLocalSteps !== null && totalLocalSteps !== void 0 ? totalLocalSteps : 0), onClick },
    import_react65.default.createElement(AnnotationIcon, { open })
  );
});

// node_modules/@cloudscape-design/components/annotation-context/annotation/closed-annotation.js
function ClosedAnnotation({ globalStepIndex, onOpen, i18nStrings, focusOnRender, totalLocalSteps, taskLocalStepIndex }) {
  const [hotspotRef, setHotspotRef] = (0, import_react66.useState)(null);
  const onClick = (0, import_react66.useCallback)(() => {
    onOpen(globalStepIndex);
  }, [globalStepIndex, onOpen]);
  (0, import_react66.useEffect)(() => {
    if (focusOnRender && hotspotRef) {
      hotspotRef.focus();
    }
  }, [focusOnRender, hotspotRef]);
  return import_react66.default.createElement(annotation_trigger_default, { open: false, onClick, i18nStrings, ref: setHotspotRef, totalLocalSteps, taskLocalStepIndex });
}

// node_modules/@cloudscape-design/components/annotation-context/annotation/open-annotation.js
var import_react71 = __toESM(require_react());

// node_modules/@cloudscape-design/components/annotation-context/annotation/annotation-popover.js
var import_react70 = __toESM(require_react());

// node_modules/@cloudscape-design/components/box/internal.js
var import_react67 = __toESM(require_react());

// node_modules/@cloudscape-design/components/box/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/box/styles.scoped.css";
var styles_css_default17 = {
  "box": "awsui_box_18wu0_14wr6_172",
  "p-variant": "awsui_p-variant_18wu0_14wr6_172",
  "color-default": "awsui_color-default_18wu0_14wr6_172",
  "b-variant": "awsui_b-variant_18wu0_14wr6_172",
  "strong-variant": "awsui_strong-variant_18wu0_14wr6_172",
  "code-variant": "awsui_code-variant_18wu0_14wr6_172",
  "pre-variant": "awsui_pre-variant_18wu0_14wr6_172",
  "samp-variant": "awsui_samp-variant_18wu0_14wr6_172",
  "h1-variant": "awsui_h1-variant_18wu0_14wr6_176",
  "h2-variant": "awsui_h2-variant_18wu0_14wr6_176",
  "h3-variant": "awsui_h3-variant_18wu0_14wr6_176",
  "h4-variant": "awsui_h4-variant_18wu0_14wr6_176",
  "h5-variant": "awsui_h5-variant_18wu0_14wr6_176",
  "small-variant": "awsui_small-variant_18wu0_14wr6_180",
  "a-variant": "awsui_a-variant_18wu0_14wr6_184",
  "font-size-default": "awsui_font-size-default_18wu0_14wr6_188",
  "font-weight-default": "awsui_font-weight-default_18wu0_14wr6_228",
  "key-label-variant": "awsui_key-label-variant_18wu0_14wr6_270",
  "gen-ai-label-variant": "awsui_gen-ai-label-variant_18wu0_14wr6_277",
  "value-large-variant": "awsui_value-large-variant_18wu0_14wr6_284",
  "font-weight-heavy": "awsui_font-weight-heavy_18wu0_14wr6_291",
  "color-inverted": "awsui_color-inverted_18wu0_14wr6_296",
  "color-text-label": "awsui_color-text-label_18wu0_14wr6_299",
  "color-text-body-secondary": "awsui_color-text-body-secondary_18wu0_14wr6_302",
  "color-text-status-error": "awsui_color-text-status-error_18wu0_14wr6_305",
  "color-text-status-success": "awsui_color-text-status-success_18wu0_14wr6_308",
  "color-text-status-info": "awsui_color-text-status-info_18wu0_14wr6_311",
  "color-text-status-inactive": "awsui_color-text-status-inactive_18wu0_14wr6_314",
  "color-text-status-warning": "awsui_color-text-status-warning_18wu0_14wr6_317",
  "color-inherit": "awsui_color-inherit_18wu0_14wr6_320",
  "font-size-body-s": "awsui_font-size-body-s_18wu0_14wr6_323",
  "font-size-body-m": "awsui_font-size-body-m_18wu0_14wr6_328",
  "font-size-heading-xs": "awsui_font-size-heading-xs_18wu0_14wr6_332",
  "font-size-heading-s": "awsui_font-size-heading-s_18wu0_14wr6_336",
  "font-size-heading-m": "awsui_font-size-heading-m_18wu0_14wr6_341",
  "font-size-heading-l": "awsui_font-size-heading-l_18wu0_14wr6_346",
  "font-size-heading-xl": "awsui_font-size-heading-xl_18wu0_14wr6_351",
  "font-size-display-l": "awsui_font-size-display-l_18wu0_14wr6_356",
  "font-weight-light": "awsui_font-weight-light_18wu0_14wr6_361",
  "font-weight-normal": "awsui_font-weight-normal_18wu0_14wr6_364",
  "font-weight-bold": "awsui_font-weight-bold_18wu0_14wr6_367",
  "t-left": "awsui_t-left_18wu0_14wr6_374",
  "t-right": "awsui_t-right_18wu0_14wr6_378",
  "t-center": "awsui_t-center_18wu0_14wr6_382",
  "p-n": "awsui_p-n_18wu0_14wr6_399",
  "p-top-n": "awsui_p-top-n_18wu0_14wr6_404",
  "p-vertical-n": "awsui_p-vertical-n_18wu0_14wr6_405",
  "p-right-n": "awsui_p-right-n_18wu0_14wr6_409",
  "p-horizontal-n": "awsui_p-horizontal-n_18wu0_14wr6_410",
  "p-bottom-n": "awsui_p-bottom-n_18wu0_14wr6_414",
  "p-left-n": "awsui_p-left-n_18wu0_14wr6_419",
  "p-xxxs": "awsui_p-xxxs_18wu0_14wr6_424",
  "p-top-xxxs": "awsui_p-top-xxxs_18wu0_14wr6_429",
  "p-vertical-xxxs": "awsui_p-vertical-xxxs_18wu0_14wr6_430",
  "p-right-xxxs": "awsui_p-right-xxxs_18wu0_14wr6_434",
  "p-horizontal-xxxs": "awsui_p-horizontal-xxxs_18wu0_14wr6_435",
  "p-bottom-xxxs": "awsui_p-bottom-xxxs_18wu0_14wr6_439",
  "p-left-xxxs": "awsui_p-left-xxxs_18wu0_14wr6_444",
  "p-xxs": "awsui_p-xxs_18wu0_14wr6_449",
  "p-top-xxs": "awsui_p-top-xxs_18wu0_14wr6_454",
  "p-vertical-xxs": "awsui_p-vertical-xxs_18wu0_14wr6_455",
  "p-right-xxs": "awsui_p-right-xxs_18wu0_14wr6_459",
  "p-horizontal-xxs": "awsui_p-horizontal-xxs_18wu0_14wr6_460",
  "p-bottom-xxs": "awsui_p-bottom-xxs_18wu0_14wr6_464",
  "p-left-xxs": "awsui_p-left-xxs_18wu0_14wr6_469",
  "p-xs": "awsui_p-xs_18wu0_14wr6_474",
  "p-top-xs": "awsui_p-top-xs_18wu0_14wr6_479",
  "p-vertical-xs": "awsui_p-vertical-xs_18wu0_14wr6_480",
  "p-right-xs": "awsui_p-right-xs_18wu0_14wr6_484",
  "p-horizontal-xs": "awsui_p-horizontal-xs_18wu0_14wr6_485",
  "p-bottom-xs": "awsui_p-bottom-xs_18wu0_14wr6_489",
  "p-left-xs": "awsui_p-left-xs_18wu0_14wr6_494",
  "p-s": "awsui_p-s_18wu0_14wr6_499",
  "p-top-s": "awsui_p-top-s_18wu0_14wr6_504",
  "p-vertical-s": "awsui_p-vertical-s_18wu0_14wr6_505",
  "p-right-s": "awsui_p-right-s_18wu0_14wr6_509",
  "p-horizontal-s": "awsui_p-horizontal-s_18wu0_14wr6_510",
  "p-bottom-s": "awsui_p-bottom-s_18wu0_14wr6_514",
  "p-left-s": "awsui_p-left-s_18wu0_14wr6_519",
  "p-m": "awsui_p-m_18wu0_14wr6_524",
  "p-top-m": "awsui_p-top-m_18wu0_14wr6_529",
  "p-vertical-m": "awsui_p-vertical-m_18wu0_14wr6_530",
  "p-right-m": "awsui_p-right-m_18wu0_14wr6_534",
  "p-horizontal-m": "awsui_p-horizontal-m_18wu0_14wr6_535",
  "p-bottom-m": "awsui_p-bottom-m_18wu0_14wr6_539",
  "p-left-m": "awsui_p-left-m_18wu0_14wr6_544",
  "p-l": "awsui_p-l_18wu0_14wr6_419",
  "p-top-l": "awsui_p-top-l_18wu0_14wr6_554",
  "p-vertical-l": "awsui_p-vertical-l_18wu0_14wr6_555",
  "p-right-l": "awsui_p-right-l_18wu0_14wr6_559",
  "p-horizontal-l": "awsui_p-horizontal-l_18wu0_14wr6_560",
  "p-bottom-l": "awsui_p-bottom-l_18wu0_14wr6_564",
  "p-left-l": "awsui_p-left-l_18wu0_14wr6_569",
  "p-xl": "awsui_p-xl_18wu0_14wr6_574",
  "p-top-xl": "awsui_p-top-xl_18wu0_14wr6_579",
  "p-vertical-xl": "awsui_p-vertical-xl_18wu0_14wr6_580",
  "p-right-xl": "awsui_p-right-xl_18wu0_14wr6_584",
  "p-horizontal-xl": "awsui_p-horizontal-xl_18wu0_14wr6_585",
  "p-bottom-xl": "awsui_p-bottom-xl_18wu0_14wr6_589",
  "p-left-xl": "awsui_p-left-xl_18wu0_14wr6_594",
  "p-xxl": "awsui_p-xxl_18wu0_14wr6_599",
  "p-top-xxl": "awsui_p-top-xxl_18wu0_14wr6_604",
  "p-vertical-xxl": "awsui_p-vertical-xxl_18wu0_14wr6_605",
  "p-right-xxl": "awsui_p-right-xxl_18wu0_14wr6_609",
  "p-horizontal-xxl": "awsui_p-horizontal-xxl_18wu0_14wr6_610",
  "p-bottom-xxl": "awsui_p-bottom-xxl_18wu0_14wr6_614",
  "p-left-xxl": "awsui_p-left-xxl_18wu0_14wr6_619",
  "p-xxxl": "awsui_p-xxxl_18wu0_14wr6_624",
  "p-top-xxxl": "awsui_p-top-xxxl_18wu0_14wr6_629",
  "p-vertical-xxxl": "awsui_p-vertical-xxxl_18wu0_14wr6_630",
  "p-right-xxxl": "awsui_p-right-xxxl_18wu0_14wr6_634",
  "p-horizontal-xxxl": "awsui_p-horizontal-xxxl_18wu0_14wr6_635",
  "p-bottom-xxxl": "awsui_p-bottom-xxxl_18wu0_14wr6_639",
  "p-left-xxxl": "awsui_p-left-xxxl_18wu0_14wr6_644",
  "m-n": "awsui_m-n_18wu0_14wr6_649",
  "m-top-n": "awsui_m-top-n_18wu0_14wr6_654",
  "m-vertical-n": "awsui_m-vertical-n_18wu0_14wr6_655",
  "m-right-n": "awsui_m-right-n_18wu0_14wr6_659",
  "m-horizontal-n": "awsui_m-horizontal-n_18wu0_14wr6_660",
  "m-bottom-n": "awsui_m-bottom-n_18wu0_14wr6_664",
  "m-left-n": "awsui_m-left-n_18wu0_14wr6_669",
  "m-xxxs": "awsui_m-xxxs_18wu0_14wr6_674",
  "m-top-xxxs": "awsui_m-top-xxxs_18wu0_14wr6_679",
  "m-vertical-xxxs": "awsui_m-vertical-xxxs_18wu0_14wr6_680",
  "m-right-xxxs": "awsui_m-right-xxxs_18wu0_14wr6_684",
  "m-horizontal-xxxs": "awsui_m-horizontal-xxxs_18wu0_14wr6_685",
  "m-bottom-xxxs": "awsui_m-bottom-xxxs_18wu0_14wr6_689",
  "m-left-xxxs": "awsui_m-left-xxxs_18wu0_14wr6_694",
  "m-xxs": "awsui_m-xxs_18wu0_14wr6_699",
  "m-top-xxs": "awsui_m-top-xxs_18wu0_14wr6_704",
  "m-vertical-xxs": "awsui_m-vertical-xxs_18wu0_14wr6_705",
  "m-right-xxs": "awsui_m-right-xxs_18wu0_14wr6_709",
  "m-horizontal-xxs": "awsui_m-horizontal-xxs_18wu0_14wr6_710",
  "m-bottom-xxs": "awsui_m-bottom-xxs_18wu0_14wr6_714",
  "m-left-xxs": "awsui_m-left-xxs_18wu0_14wr6_719",
  "m-xs": "awsui_m-xs_18wu0_14wr6_724",
  "m-top-xs": "awsui_m-top-xs_18wu0_14wr6_729",
  "m-vertical-xs": "awsui_m-vertical-xs_18wu0_14wr6_730",
  "m-right-xs": "awsui_m-right-xs_18wu0_14wr6_734",
  "m-horizontal-xs": "awsui_m-horizontal-xs_18wu0_14wr6_735",
  "m-bottom-xs": "awsui_m-bottom-xs_18wu0_14wr6_739",
  "m-left-xs": "awsui_m-left-xs_18wu0_14wr6_744",
  "m-s": "awsui_m-s_18wu0_14wr6_749",
  "m-top-s": "awsui_m-top-s_18wu0_14wr6_754",
  "m-vertical-s": "awsui_m-vertical-s_18wu0_14wr6_755",
  "m-right-s": "awsui_m-right-s_18wu0_14wr6_759",
  "m-horizontal-s": "awsui_m-horizontal-s_18wu0_14wr6_760",
  "m-bottom-s": "awsui_m-bottom-s_18wu0_14wr6_764",
  "m-left-s": "awsui_m-left-s_18wu0_14wr6_769",
  "m-m": "awsui_m-m_18wu0_14wr6_774",
  "m-top-m": "awsui_m-top-m_18wu0_14wr6_779",
  "m-vertical-m": "awsui_m-vertical-m_18wu0_14wr6_780",
  "m-right-m": "awsui_m-right-m_18wu0_14wr6_784",
  "m-horizontal-m": "awsui_m-horizontal-m_18wu0_14wr6_785",
  "m-bottom-m": "awsui_m-bottom-m_18wu0_14wr6_789",
  "m-left-m": "awsui_m-left-m_18wu0_14wr6_794",
  "m-l": "awsui_m-l_18wu0_14wr6_669",
  "m-top-l": "awsui_m-top-l_18wu0_14wr6_804",
  "m-vertical-l": "awsui_m-vertical-l_18wu0_14wr6_805",
  "m-right-l": "awsui_m-right-l_18wu0_14wr6_809",
  "m-horizontal-l": "awsui_m-horizontal-l_18wu0_14wr6_810",
  "m-bottom-l": "awsui_m-bottom-l_18wu0_14wr6_814",
  "m-left-l": "awsui_m-left-l_18wu0_14wr6_819",
  "m-xl": "awsui_m-xl_18wu0_14wr6_824",
  "m-top-xl": "awsui_m-top-xl_18wu0_14wr6_829",
  "m-vertical-xl": "awsui_m-vertical-xl_18wu0_14wr6_830",
  "m-right-xl": "awsui_m-right-xl_18wu0_14wr6_834",
  "m-horizontal-xl": "awsui_m-horizontal-xl_18wu0_14wr6_835",
  "m-bottom-xl": "awsui_m-bottom-xl_18wu0_14wr6_839",
  "m-left-xl": "awsui_m-left-xl_18wu0_14wr6_844",
  "m-xxl": "awsui_m-xxl_18wu0_14wr6_849",
  "m-top-xxl": "awsui_m-top-xxl_18wu0_14wr6_854",
  "m-vertical-xxl": "awsui_m-vertical-xxl_18wu0_14wr6_855",
  "m-right-xxl": "awsui_m-right-xxl_18wu0_14wr6_859",
  "m-horizontal-xxl": "awsui_m-horizontal-xxl_18wu0_14wr6_860",
  "m-bottom-xxl": "awsui_m-bottom-xxl_18wu0_14wr6_864",
  "m-left-xxl": "awsui_m-left-xxl_18wu0_14wr6_869",
  "m-xxxl": "awsui_m-xxxl_18wu0_14wr6_874",
  "m-top-xxxl": "awsui_m-top-xxxl_18wu0_14wr6_879",
  "m-vertical-xxxl": "awsui_m-vertical-xxxl_18wu0_14wr6_880",
  "m-right-xxxl": "awsui_m-right-xxxl_18wu0_14wr6_884",
  "m-horizontal-xxxl": "awsui_m-horizontal-xxxl_18wu0_14wr6_885",
  "m-bottom-xxxl": "awsui_m-bottom-xxxl_18wu0_14wr6_889",
  "m-left-xxxl": "awsui_m-left-xxxl_18wu0_14wr6_894",
  "d-block": "awsui_d-block_18wu0_14wr6_899",
  "d-inline": "awsui_d-inline_18wu0_14wr6_902",
  "d-inline-block": "awsui_d-inline-block_18wu0_14wr6_905",
  "d-none": "awsui_d-none_18wu0_14wr6_908",
  "f-left": "awsui_f-left_18wu0_14wr6_912",
  "f-right": "awsui_f-right_18wu0_14wr6_916",
  "root": "awsui_root_18wu0_14wr6_920"
};

// node_modules/@cloudscape-design/components/box/internal.js
function InternalBox(_a2) {
  var { variant = "div", tagOverride, margin = {}, padding = {}, display, textAlign, float, fontSize, fontWeight, color: color2, children: children2, nativeAttributes, __internalRootRef } = _a2, props2 = __rest(_a2, ["variant", "tagOverride", "margin", "padding", "display", "textAlign", "float", "fontSize", "fontWeight", "color", "children", "nativeAttributes", "__internalRootRef"]);
  const baseProps = getBaseProps(props2);
  const marginsClassNamesSuffices = getClassNamesSuffixes(margin);
  const paddingsClassNamesSuffices = getClassNamesSuffixes(padding);
  const className2 = clsx_m_default(baseProps.className, styles_css_default17.root, styles_css_default17.box, styles_css_default17[`${variant.replace(/^awsui-/, "")}-variant`], marginsClassNamesSuffices.map((suffix) => styles_css_default17[`m-${suffix}`]), paddingsClassNamesSuffices.map((suffix) => styles_css_default17[`p-${suffix}`]), styles_css_default17[`d-${display}`], styles_css_default17[`f-${float}`], styles_css_default17[`color-${color2 || "default"}`], styles_css_default17[`font-size-${fontSize || "default"}`], styles_css_default17[`font-weight-${fontWeight || "default"}`], styles_css_default17[`t-${textAlign}`]);
  return import_react67.default.createElement(with_native_attributes_default, Object.assign({}, baseProps, { tag: getTag(variant, tagOverride), componentName: "Box", nativeAttributes, className: className2, ref: __internalRootRef }), children2);
}
var getClassNamesSuffixes = (value) => {
  if (typeof value === "string") {
    return [value];
  }
  const sides = ["top", "right", "bottom", "left", "horizontal", "vertical"];
  return sides.filter((side) => !!value[side]).map((side) => `${side}-${value[side]}`);
};
var getTag = (variant, tagOverride) => {
  if (tagOverride) {
    return tagOverride;
  }
  if (variant === "awsui-value-large") {
    return "span";
  }
  if (variant === "awsui-key-label" || variant === "awsui-gen-ai-label") {
    return "div";
  }
  return variant;
};

// node_modules/@cloudscape-design/components/internal/utils/strings/join-strings.js
function joinStrings(...strings) {
  return strings.filter(Boolean).join(" ") || void 0;
}

// node_modules/@cloudscape-design/components/space-between/internal.js
var import_react69 = __toESM(require_react());

// node_modules/react-keyed-flatten-children/dist/esm/index.js
var import_react68 = __toESM(require_react());
var import_react_is = __toESM(require_react_is2());
function flattenChildren(children2, depth, keys) {
  if (depth === void 0) {
    depth = 0;
  }
  if (keys === void 0) {
    keys = [];
  }
  return import_react68.Children.toArray(children2).reduce(function(acc, node, nodeIndex) {
    if ((0, import_react_is.isFragment)(node)) {
      acc.push.apply(acc, flattenChildren(node.props.children, depth + 1, keys.concat(node.key || nodeIndex)));
    } else {
      if ((0, import_react68.isValidElement)(node)) {
        acc.push((0, import_react68.cloneElement)(node, {
          key: keys.concat(String(node.key)).join(".")
        }));
      } else if (typeof node === "string" || typeof node === "number") {
        acc.push(node);
      }
    }
    return acc;
  }, []);
}

// node_modules/@cloudscape-design/components/space-between/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/space-between/styles.scoped.css";
var styles_css_default18 = {
  "root": "awsui_root_18582_1jqoe_145",
  "child": "awsui_child_18582_1jqoe_149",
  "horizontal": "awsui_horizontal_18582_1jqoe_160",
  "horizontal-xxxs": "awsui_horizontal-xxxs_18582_1jqoe_164",
  "horizontal-xxs": "awsui_horizontal-xxs_18582_1jqoe_167",
  "horizontal-xs": "awsui_horizontal-xs_18582_1jqoe_170",
  "horizontal-s": "awsui_horizontal-s_18582_1jqoe_173",
  "horizontal-m": "awsui_horizontal-m_18582_1jqoe_176",
  "horizontal-l": "awsui_horizontal-l_18582_1jqoe_179",
  "horizontal-xl": "awsui_horizontal-xl_18582_1jqoe_182",
  "horizontal-xxl": "awsui_horizontal-xxl_18582_1jqoe_185",
  "vertical": "awsui_vertical_18582_1jqoe_192",
  "vertical-xxxs": "awsui_vertical-xxxs_18582_1jqoe_195",
  "vertical-xxs": "awsui_vertical-xxs_18582_1jqoe_198",
  "vertical-xs": "awsui_vertical-xs_18582_1jqoe_201",
  "vertical-s": "awsui_vertical-s_18582_1jqoe_204",
  "vertical-m": "awsui_vertical-m_18582_1jqoe_207",
  "vertical-l": "awsui_vertical-l_18582_1jqoe_210",
  "vertical-xl": "awsui_vertical-xl_18582_1jqoe_213",
  "vertical-xxl": "awsui_vertical-xxl_18582_1jqoe_216",
  "align-center": "awsui_align-center_18582_1jqoe_220",
  "align-start": "awsui_align-start_18582_1jqoe_224",
  "align-end": "awsui_align-end_18582_1jqoe_228"
};

// node_modules/@cloudscape-design/components/space-between/internal.js
var InternalSpaceBetween = (0, import_react69.forwardRef)((_a2, ref) => {
  var { direction = "vertical", size, children: children2, alignItems, nativeAttributes, __internalRootRef } = _a2, props2 = __rest(_a2, ["direction", "size", "children", "alignItems", "nativeAttributes", "__internalRootRef"]);
  const mergedRef = useMergeRefs(ref, __internalRootRef);
  const baseProps = getBaseProps(props2);
  const flattenedChildren = flattenChildren(children2);
  return import_react69.default.createElement(with_native_attributes_default, Object.assign({}, baseProps, { tag: "div", componentName: "SpaceBetween", nativeAttributes, className: clsx_m_default(baseProps.className, styles_css_default18.root, styles_css_default18[direction], styles_css_default18[`${direction}-${size}`], alignItems && styles_css_default18[`align-${alignItems}`]), ref: mergedRef }), flattenedChildren.map((child) => {
    const key2 = typeof child === "object" ? child.key : void 0;
    return import_react69.default.createElement("div", { key: key2, className: styles_css_default18.child }, child);
  }));
});
var internal_default5 = InternalSpaceBetween;

// node_modules/@cloudscape-design/components/annotation-context/annotation/annotation-popover.js
var arrow = (position) => import_react70.default.createElement(
  "div",
  { className: clsx_m_default(styles_css_default16.arrow, styles_css_default16[`arrow-position-${position}`]) },
  import_react70.default.createElement("div", { className: styles_css_default16["arrow-outer"] }),
  import_react70.default.createElement("div", { className: styles_css_default16["arrow-inner"] })
);
function AnnotationPopover({ title, content, alert, direction = "top", taskLocalStepIndex, totalLocalSteps, showPreviousButton, showFinishButton, onDismiss, nextButtonEnabled, onNextButtonClick, onFinish, trackRef, previousButtonEnabled, onPreviousButtonClick, i18nStrings }) {
  (0, import_react70.useEffect)(() => {
    var _a2;
    scrollElementIntoView((_a2 = trackRef.current) !== null && _a2 !== void 0 ? _a2 : void 0);
  }, [trackRef]);
  const popoverHeaderId = useUniqueId("poppver-header-");
  const stepCounterId = useUniqueId("step-counter-");
  return import_react70.default.createElement(
    PopoverContainer,
    { size: "medium", fixedWidth: false, position: direction, trackRef, trackKey: taskLocalStepIndex, variant: "annotation", arrow, zIndex: 7e3, renderWithPortal: true },
    import_react70.default.createElement(
      PopoverBody,
      {
        dismissButton: true,
        dismissAriaLabel: i18nStrings.labelDismissAnnotation,
        header: import_react70.default.createElement(InternalBox, { id: popoverHeaderId, color: "text-body-secondary", fontSize: "body-s", margin: { top: "xxxs" }, className: styles_css_default16.header }, title),
        onDismiss,
        className: styles_css_default16.annotation,
        variant: "annotation",
        overflowVisible: "content",
        // create new dialog to have the native dialog behavior of the screen readers
        key: taskLocalStepIndex,
        ariaLabelledby: joinStrings(popoverHeaderId, stepCounterId)
      },
      import_react70.default.createElement(
        internal_default5,
        { size: "s" },
        import_react70.default.createElement(
          "div",
          { className: styles_css_default16.description },
          import_react70.default.createElement(InternalBox, { className: styles_css_default16.content }, content)
        ),
        alert && import_react70.default.createElement(internal_default4, { type: "warning" }, alert),
        import_react70.default.createElement(
          internal_default5,
          { size: "s" },
          import_react70.default.createElement("div", { className: styles_css_default16.divider }),
          import_react70.default.createElement(
            "div",
            { className: styles_css_default16.actionBar },
            import_react70.default.createElement(
              "div",
              { className: styles_css_default16.stepCounter },
              import_react70.default.createElement(InternalBox, { id: stepCounterId, className: styles_css_default16["step-counter-content"], color: "text-body-secondary", fontSize: "body-s" }, i18nStrings.stepCounterText(taskLocalStepIndex !== null && taskLocalStepIndex !== void 0 ? taskLocalStepIndex : 0, totalLocalSteps !== null && totalLocalSteps !== void 0 ? totalLocalSteps : 0))
            ),
            import_react70.default.createElement(
              internal_default5,
              { size: "xs", direction: "horizontal" },
              showPreviousButton && import_react70.default.createElement(InternalButton, { variant: "link", onClick: onPreviousButtonClick, disabled: !previousButtonEnabled, formAction: "none", ariaLabel: i18nStrings.previousButtonText, className: styles_css_default16["previous-button"] }, i18nStrings.previousButtonText),
              showFinishButton ? import_react70.default.createElement(InternalButton, { onClick: onFinish, formAction: "none", ariaLabel: i18nStrings.finishButtonText, className: styles_css_default16["finish-button"] }, i18nStrings.finishButtonText) : import_react70.default.createElement(InternalButton, { onClick: onNextButtonClick, disabled: !nextButtonEnabled, formAction: "none", ariaLabel: i18nStrings.nextButtonText, className: styles_css_default16["next-button"] }, i18nStrings.nextButtonText)
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/annotation-context/annotation/open-annotation.js
function OpenAnnotation({ title, content, alert, direction, showPreviousButton, showFinishButton, taskLocalStepIndex, totalLocalSteps, onDismiss, nextButtonEnabled, onNextButtonClick, onFinish, previousButtonEnabled, onPreviousButtonClick, i18nStrings }) {
  const trackRef = (0, import_react71.useRef)(null);
  return import_react71.default.createElement(
    import_react71.default.Fragment,
    null,
    import_react71.default.createElement(annotation_trigger_default, { open: true, onClick: onDismiss, i18nStrings, ref: trackRef, totalLocalSteps, taskLocalStepIndex }),
    import_react71.default.createElement(
      Portal,
      null,
      import_react71.default.createElement(AnnotationPopover, { trackRef, previousButtonEnabled, showPreviousButton, showFinishButton, totalLocalSteps, i18nStrings, nextButtonEnabled, onDismiss, onFinish, onNextButtonClick, onPreviousButtonClick, taskLocalStepIndex, direction, title, content, alert })
    )
  );
}

// node_modules/@cloudscape-design/components/annotation-context/context.js
var import_react72 = __toESM(require_react());
var defaultContext = {
  getContentForId: () => null,
  registerHotspot() {
  },
  unregisterHotspot() {
  },
  currentStepIndex: 0,
  currentTutorial: null,
  onStartTutorial() {
  },
  onExitTutorial() {
  }
};
var hotspotContext = import_react72.default.createContext(defaultContext);

// node_modules/@cloudscape-design/components/annotation-context/utils.js
function getStepInfo(annotations, index) {
  if (index >= 0) {
    let taskIndex = 0;
    for (const task of annotations) {
      if (task.steps.length <= index) {
        index -= task.steps.length;
        taskIndex++;
        continue;
      }
      return { task, step: task.steps[index], localIndex: index, taskIndex };
    }
  }
  return { task: void 0, step: void 0, localIndex: 0, taskIndex: 0 };
}

// node_modules/@cloudscape-design/components/annotation-context/index.js
var emptyTasks = [];
function AnnotationContext({ currentTutorial, children: children2, onStepChange, onFinish: onFinishHandler, onStartTutorial, onExitTutorial, i18nStrings }) {
  var _a2, _b, _c, _d;
  useBaseComponent("AnnotationContext");
  const [open, setOpen] = (0, import_react73.useState)(true);
  const [currentStepIndex, setCurrentStepIndex] = (0, import_react73.useState)(0);
  (0, import_react73.useEffect)(() => {
    setCurrentStepIndex(0);
    setOpen(true);
  }, [currentTutorial, setOpen]);
  const [availableHotspots, setAvailableHotspots] = (0, import_react73.useState)({});
  const availableHotspotsRef = (0, import_react73.useRef)(availableHotspots);
  const annotations = currentTutorial ? currentTutorial.tasks : emptyTasks;
  const { task, step: step2, localIndex, taskIndex } = getStepInfo(annotations, currentStepIndex);
  const currentId = step2 === null || step2 === void 0 ? void 0 : step2.hotspotId;
  const totalStepCount = annotations.map((a4) => a4.steps.length).reduce((a4, b2) => a4 + b2, 0);
  const id2index = (0, import_react73.useMemo)(() => {
    const mapping = {};
    let counter2 = 0;
    for (const annotation of annotations) {
      for (const step3 of annotation.steps) {
        if (mapping[step3.hotspotId] === void 0) {
          mapping[step3.hotspotId] = counter2;
        }
        counter2++;
      }
    }
    return mapping;
  }, [annotations]);
  const openNextStep = (0, import_react73.useCallback)(() => {
    const newStepIndex = Math.min(currentStepIndex + 1, totalStepCount);
    setCurrentStepIndex(newStepIndex);
    fireNonCancelableEvent(onStepChange, { step: newStepIndex, reason: "next" });
  }, [currentStepIndex, onStepChange, totalStepCount]);
  const openPreviousStep = (0, import_react73.useCallback)(() => {
    const newStepIndex = Math.max(currentStepIndex - 1, 0);
    setCurrentStepIndex(newStepIndex);
    fireNonCancelableEvent(onStepChange, { step: newStepIndex, reason: "previous" });
  }, [onStepChange, currentStepIndex]);
  const onFinish = (0, import_react73.useCallback)(() => fireNonCancelableEvent(onFinishHandler), [onFinishHandler]);
  const isCurrentHotspotAvailable = currentId ? availableHotspots[currentId] : null;
  (0, import_react73.useEffect)(() => {
    if (!currentId || availableHotspotsRef.current[currentId]) {
      return;
    }
    const findNearestHotspot = () => {
      let nearestHotspot2 = void 0;
      let nearestDistance = Infinity;
      for (const hotspotId of Object.keys(availableHotspotsRef.current)) {
        const distanceFromCurrentHotspot = Math.abs(id2index[hotspotId] - currentStepIndex);
        if (distanceFromCurrentHotspot < nearestDistance) {
          nearestDistance = distanceFromCurrentHotspot;
          nearestHotspot2 = hotspotId;
        }
      }
      return nearestHotspot2;
    };
    const nearestHotspot = findNearestHotspot();
    if (nearestHotspot) {
      const newStepIndex = id2index[nearestHotspot];
      setCurrentStepIndex(newStepIndex);
      setOpen(true);
      fireNonCancelableEvent(onStepChange, { step: newStepIndex, reason: "auto-fallback" });
    }
  }, [annotations, isCurrentHotspotAvailable, currentId, currentStepIndex, id2index, onStepChange, availableHotspots]);
  const onDismiss = (0, import_react73.useCallback)(() => {
    setOpen(false);
  }, [setOpen]);
  const onOpen = (0, import_react73.useCallback)((stepIndex) => {
    setCurrentStepIndex(stepIndex);
    fireNonCancelableEvent(onStepChange, { step: stepIndex, reason: "open" });
    setOpen(true);
  }, [onStepChange, setOpen]);
  const idOfPreviousHotspot = (_a2 = getStepInfo(annotations, currentStepIndex - 1).step) === null || _a2 === void 0 ? void 0 : _a2.hotspotId;
  const idOfNextHotspot = (_b = getStepInfo(annotations, currentStepIndex + 1).step) === null || _b === void 0 ? void 0 : _b.hotspotId;
  const previousHotspotIsAvailable = (_c = idOfPreviousHotspot !== void 0 && availableHotspots[idOfPreviousHotspot]) !== null && _c !== void 0 ? _c : false;
  const nextHotspotIsAvailable = (_d = idOfNextHotspot !== void 0 && availableHotspots[idOfNextHotspot]) !== null && _d !== void 0 ? _d : false;
  const getContentForId = (0, import_react73.useCallback)((id, direction) => {
    if (currentTutorial === null || currentTutorial === void 0 ? void 0 : currentTutorial.completed) {
      return null;
    }
    const globalStepIndex = id2index[id];
    if (globalStepIndex === void 0) {
      return null;
    }
    if (!task || !step2 || !open || id !== currentId) {
      const { task: currentTask, localIndex: currentStepIndex2 } = getStepInfo(annotations, globalStepIndex);
      return import_react73.default.createElement(ClosedAnnotation, { globalStepIndex, i18nStrings, onOpen, focusOnRender: id === currentId, totalLocalSteps: currentTask ? currentTask.steps.length : 0, taskLocalStepIndex: currentStepIndex2 });
    }
    return import_react73.default.createElement(OpenAnnotation, { i18nStrings, direction, title: i18nStrings.taskTitle(taskIndex, task.title), content: step2.content, alert: step2.warningAlert, showPreviousButton: currentStepIndex !== 0, showFinishButton: currentStepIndex + 1 === totalStepCount, taskLocalStepIndex: localIndex, totalLocalSteps: task.steps.length, nextButtonEnabled: nextHotspotIsAvailable, onNextButtonClick: openNextStep, onFinish, previousButtonEnabled: previousHotspotIsAvailable, onPreviousButtonClick: openPreviousStep, onDismiss });
  }, [
    id2index,
    currentTutorial,
    task,
    step2,
    open,
    currentId,
    currentStepIndex,
    i18nStrings,
    taskIndex,
    localIndex,
    totalStepCount,
    nextHotspotIsAvailable,
    openNextStep,
    onFinish,
    previousHotspotIsAvailable,
    openPreviousStep,
    onDismiss,
    onOpen,
    annotations
  ]);
  const registerHotspot = (0, import_react73.useCallback)((id) => {
    if (!id2index || id2index[id] === void 0) {
      return;
    }
    availableHotspotsRef.current = Object.assign(Object.assign({}, availableHotspotsRef.current), { [id]: true });
    setAvailableHotspots((availableHotspots2) => {
      if (availableHotspots2[id]) {
        return availableHotspots2;
      }
      return Object.assign(Object.assign({}, availableHotspots2), { [id]: true });
    });
  }, [id2index]);
  const unregisterHotspot = (0, import_react73.useCallback)((id) => {
    if (!availableHotspotsRef.current[id]) {
      return;
    }
    availableHotspotsRef.current = removeKey(id, availableHotspotsRef.current);
    setAvailableHotspots((availableHotspots2) => {
      if (!availableHotspots2[id]) {
        return availableHotspots2;
      }
      return removeKey(id, availableHotspots2);
    });
  }, []);
  const context = {
    getContentForId,
    registerHotspot,
    unregisterHotspot,
    onStartTutorial,
    onExitTutorial,
    currentStepIndex,
    currentTutorial
  };
  return import_react73.default.createElement(hotspotContext.Provider, { value: context }, children2);
}
applyDisplayName(AnnotationContext, "AnnotationContext");
function removeKey(key2, object2) {
  const _a2 = object2, _b = key2, _ = _a2[_b], remainingObject = __rest(_a2, [typeof _b === "symbol" ? _b : _b + ""]);
  return remainingObject;
}

// node_modules/@cloudscape-design/components/app-layout/index.js
var import_react177 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-controllable/index.js
var React44 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/is-development.js
var isDevelopment2 = true;

// node_modules/@cloudscape-design/components/internal/hooks/use-controllable/index.js
function useControllable2(controlledValue, handler, defaultValue4, { componentName: componentName3, changeHandler, controlledProp }) {
  const isControlled = React44.useState(controlledValue !== void 0)[0];
  if (isDevelopment2) {
    React44.useEffect(() => {
      if (isControlled && handler === void 0) {
        warnOnce(componentName3, `You provided a \`${controlledProp}\` prop without an \`${changeHandler}\` handler. This will render a non-interactive component.`);
      }
    }, [handler, isControlled, componentName3, changeHandler, controlledProp]);
    React44.useEffect(() => {
      const isControlledNow = controlledValue !== void 0;
      if (isControlled !== isControlledNow) {
        const initialMode = isControlled ? "controlled" : "uncontrolled";
        const modeNow = isControlledNow ? "controlled" : "uncontrolled";
        warnOnce(componentName3, `A component tried to change ${initialMode} '${controlledProp}' property to be ${modeNow}. This is not supported. Properties should not switch from ${initialMode} to ${modeNow} (or vice versa). Decide between using a controlled or uncontrolled mode for the lifetime of the component. More info: https://fb.me/react-controlled-components`);
      }
    }, [isControlled, controlledProp, componentName3, controlledValue]);
  }
  const [valueState, setValue] = React44.useState(defaultValue4);
  const [valueHasBeenSet, setValueHasBeenSet] = React44.useState(false);
  const currentUncontrolledValue = valueHasBeenSet ? valueState : defaultValue4;
  const setUncontrolledValue = React44.useCallback((newValue) => {
    setValue(newValue);
    setValueHasBeenSet(true);
  }, [setValue, setValueHasBeenSet]);
  if (isControlled) {
    return [controlledValue, defaultCallback];
  } else {
    return [currentUncontrolledValue, setUncontrolledValue];
  }
}
function defaultCallback() {
  return void 0;
}

// node_modules/@cloudscape-design/components/internal/breakpoints.js
var BREAKPOINT_MAPPING = [
  ["xl", 1840],
  ["l", 1320],
  ["m", 1120],
  ["s", 912],
  ["xs", 688],
  ["xxs", 465],
  ["default", -1]
];
var mobileBreakpoint = BREAKPOINT_MAPPING.filter((b2) => b2[0] === "xs")[0][1];
var BREAKPOINTS_DESCENDING = BREAKPOINT_MAPPING.map(([bp]) => bp);
function matchBreakpointMapping(subset, actual) {
  const qualifyingBreakpoints = BREAKPOINT_MAPPING.slice(BREAKPOINTS_DESCENDING.indexOf(actual));
  for (const [breakpoint] of qualifyingBreakpoints) {
    const breakpointValue = subset[breakpoint];
    if (breakpointValue !== void 0) {
      return breakpointValue;
    }
  }
  return null;
}
function getMatchingBreakpoint(width, breakpointFilter) {
  for (const [breakpoint, breakpointWidth] of BREAKPOINT_MAPPING) {
    if (width > breakpointWidth && (!breakpointFilter || breakpointFilter.indexOf(breakpoint) !== -1)) {
      return breakpoint;
    }
  }
  return "default";
}
function getBreakpointValue(breakpoint) {
  return BREAKPOINT_MAPPING.find((bp) => bp[0] === breakpoint)[1];
}

// node_modules/@cloudscape-design/components/internal/hooks/use-mobile/index.js
var forceMobileModeSymbol = Symbol.for("awsui-force-mobile-mode");
function getIsMobile() {
  const forceMobileMode = globalThis[forceMobileModeSymbol];
  if (typeof forceMobileMode !== "undefined") {
    return forceMobileMode;
  }
  if (typeof window === "undefined") {
    return false;
  }
  if (window.matchMedia) {
    return window.matchMedia(`(max-width: ${mobileBreakpoint}px)`).matches;
  }
  return getMatchingBreakpoint(window.innerWidth, ["xs"]) !== "xs";
}
var useMobile = createSingletonState({
  initialState: () => getIsMobile(),
  factory: (handler) => {
    const listener = () => handler(getIsMobile());
    window.addEventListener("resize", listener);
    return () => {
      window.removeEventListener("resize", listener);
    };
  }
});

// node_modules/@cloudscape-design/components/app-layout/defaults.js
var defaultContentTypeState = {
  navigationOpen: true,
  minContentWidth: 280,
  maxContentWidth: void 0
};
var defaults = {
  default: Object.assign({}, defaultContentTypeState),
  dashboard: Object.assign({}, defaultContentTypeState),
  cards: {
    navigationOpen: true,
    minContentWidth: 280,
    maxContentWidth: void 0
  },
  form: {
    navigationOpen: false,
    minContentWidth: 280,
    maxContentWidth: 800
  },
  table: {
    navigationOpen: true,
    minContentWidth: 280,
    maxContentWidth: void 0
  },
  wizard: {
    navigationOpen: false,
    minContentWidth: 280,
    maxContentWidth: 1080
  }
};
function applyDefaults(contentType, stateFromProps, isRefresh) {
  var _a2, _b, _c;
  const contentTypeDefaults = isRefresh ? Object.assign(Object.assign({}, defaults[contentType]), { maxContentWidth: void 0 }) : defaults[contentType];
  return {
    maxContentWidth: (_a2 = stateFromProps.maxContentWidth) !== null && _a2 !== void 0 ? _a2 : contentTypeDefaults.maxContentWidth,
    minContentWidth: (_b = stateFromProps.minContentWidth) !== null && _b !== void 0 ? _b : contentTypeDefaults.minContentWidth,
    navigationOpen: (_c = stateFromProps.navigationOpen) !== null && _c !== void 0 ? _c : contentTypeDefaults.navigationOpen
  };
}

// node_modules/@cloudscape-design/components/app-layout/internal.js
var import_react174 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/classic.js
var import_react110 = __toESM(require_react());

// node_modules/@cloudscape-design/components/split-panel/utils/size-utils.js
var CONSTRAINED_PAGE_HEIGHT = 400;
var MAIN_PANEL_MIN_HEIGHT = 250;
var CONSTRAINED_MAIN_PANEL_MIN_HEIGHT = 40;
function getSplitPanelDefaultSize(position) {
  if (typeof document === "undefined") {
    return 0;
  }
  return position === "side" ? document.documentElement.clientWidth / 3 : document.documentElement.clientHeight / 2;
}
function getLimitedValue(min3, value, max3) {
  if (min3 > max3) {
    return min3;
  }
  if (value < min3) {
    return min3;
  }
  if (value > max3) {
    return max3;
  }
  return value;
}

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/index.js
var import_react74 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/content-wrapper/styles.scoped.css";
var styles_css_default19 = {
  "content-wrapper": "awsui_content-wrapper_zycdx_mfqbj_153",
  "content-wrapper-mobile": "awsui_content-wrapper-mobile_zycdx_mfqbj_157",
  "content-type-dashboard": "awsui_content-type-dashboard_zycdx_mfqbj_162"
};

// node_modules/@cloudscape-design/components/app-layout/content-wrapper/index.js
var ContentWrapper = import_react74.default.forwardRef(({ className: className2, style, contentType, children: children2, toolsPadding, disablePaddings, navigationPadding, isMobile, contentWidthStyles }, ref) => {
  if (disablePaddings) {
    return import_react74.default.createElement("div", { className: className2, ref, style }, children2);
  }
  return import_react74.default.createElement(
    "div",
    { ref, className: clsx_m_default(styles_css_default19["content-wrapper"], !navigationPadding && styles_css_default19["content-wrapper-no-navigation-padding"], !toolsPadding && styles_css_default19["content-wrapper-no-tools-padding"], isMobile && styles_css_default19["content-wrapper-mobile"]), style },
    import_react74.default.createElement("div", { style: contentWidthStyles, className: clsx_m_default(className2, styles_css_default19[`content-type-${contentType}`]) }, children2)
  );
});
var content_wrapper_default = ContentWrapper;

// node_modules/@cloudscape-design/components/app-layout/drawer/index.js
var import_react93 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/toggles/index.js
var import_react75 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/test-classes/styles.scoped.css";
var styles_css_default20 = {
  "root": "awsui_root_1fj9k_q6akd_5",
  "navigation": "awsui_navigation_1fj9k_q6akd_6",
  "navigation-toggle": "awsui_navigation-toggle_1fj9k_q6akd_7",
  "navigation-close": "awsui_navigation-close_1fj9k_q6akd_8",
  "content": "awsui_content_1fj9k_q6akd_9",
  "notifications": "awsui_notifications_1fj9k_q6akd_10",
  "breadcrumbs": "awsui_breadcrumbs_1fj9k_q6akd_11",
  "tools": "awsui_tools_1fj9k_q6akd_12",
  "tools-close": "awsui_tools-close_1fj9k_q6akd_13",
  "tools-toggle": "awsui_tools-toggle_1fj9k_q6akd_14",
  "drawer-closed": "awsui_drawer-closed_1fj9k_q6akd_15",
  "mobile-bar": "awsui_mobile-bar_1fj9k_q6akd_16",
  "disable-body-scroll-root": "awsui_disable-body-scroll-root_1fj9k_q6akd_17",
  "drawers-trigger": "awsui_drawers-trigger_1fj9k_q6akd_18",
  "drawers-trigger-global": "awsui_drawers-trigger-global_1fj9k_q6akd_19",
  "drawers-trigger-with-badge": "awsui_drawers-trigger-with-badge_1fj9k_q6akd_20",
  "active-drawer": "awsui_active-drawer_1fj9k_q6akd_21",
  "active-drawer-close-button": "awsui_active-drawer-close-button_1fj9k_q6akd_22",
  "overflow-menu": "awsui_overflow-menu_1fj9k_q6akd_23",
  "drawers-slider": "awsui_drawers-slider_1fj9k_q6akd_24",
  "toolbar": "awsui_toolbar_1fj9k_q6akd_25",
  "trigger-wrapper-tooltip-visible": "awsui_trigger-wrapper-tooltip-visible_1fj9k_q6akd_26",
  "trigger-tooltip": "awsui_trigger-tooltip_1fj9k_q6akd_27",
  "active-drawer-expanded-mode-button": "awsui_active-drawer-expanded-mode-button_1fj9k_q6akd_28",
  "ai-drawer-toggle": "awsui_ai-drawer-toggle_1fj9k_q6akd_29",
  "active-ai-drawer-leave-expanded-mode-custom-button": "awsui_active-ai-drawer-leave-expanded-mode-custom-button_1fj9k_q6akd_30"
};

// node_modules/@cloudscape-design/components/app-layout/toggles/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/toggles/styles.scoped.css";
var styles_css_default21 = {
  "toggle-button": "awsui_toggle-button_16w0h_1dfmp_185",
  "close-button": "awsui_close-button_16w0h_1dfmp_220"
};

// node_modules/@cloudscape-design/components/app-layout/toggles/index.js
var togglesConfig = {
  navigation: {
    TagName: "nav",
    iconName: "menu",
    getLabels: (labels = {}) => ({
      mainLabel: labels.navigation,
      openLabel: labels.navigationToggle,
      closeLabel: labels.navigationClose
    })
  },
  tools: {
    TagName: "aside",
    iconName: "status-info",
    getLabels: (labels = {}) => ({
      mainLabel: labels.tools,
      openLabel: labels.toolsToggle,
      closeLabel: labels.toolsClose
    })
  }
};
var ToggleButton = import_react75.default.forwardRef(({ className: className2, ariaLabel, ariaExpanded, ariaControls, iconName, iconSvg, disabled, testId, onClick, badge }, ref) => {
  return import_react75.default.createElement(
    "button",
    { ref, className: clsx_m_default(className2, styles_css_default21["toggle-button"], {
      [styles_css_default20["drawers-trigger-with-badge"]]: badge
    }), "aria-label": ariaLabel, type: "button", onClick, disabled, "aria-expanded": ariaExpanded, "aria-haspopup": ariaExpanded ? void 0 : true, "aria-controls": ariaControls, "data-testid": testId },
    import_react75.default.createElement(internal_default, { svg: iconSvg, name: iconName, badge })
  );
});
var CloseButton = import_react75.default.forwardRef(({ className: className2, ariaLabel, onClick }, ref) => {
  return import_react75.default.createElement(
    "span",
    { className: styles_css_default21["close-button"] },
    import_react75.default.createElement(InternalButton, { ref, className: className2, ariaLabel, variant: "icon", formAction: "none", iconName: "close", onClick })
  );
});

// node_modules/@cloudscape-design/components/app-layout/utils/use-drawers.js
var import_react78 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/runtime-drawer/index.js
var import_react77 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/utils/visibility-context.js
var import_react76 = __toESM(require_react());
var ActiveDrawersContext = (0, import_react76.createContext)([]);

// node_modules/@cloudscape-design/components/app-layout/runtime-drawer/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/runtime-drawer/styles.scoped.css";
var styles_css_default22 = {
  "runtime-content-wrapper": "awsui_runtime-content-wrapper_14m8x_spfr5_5",
  "runtime-header-wrapper": "awsui_runtime-header-wrapper_14m8x_spfr5_9"
};

// node_modules/@cloudscape-design/components/app-layout/runtime-drawer/index.js
function RuntimeDrawerWrapper({ mountContent, unmountContent, id }) {
  const ref = (0, import_react77.useRef)(null);
  const visibilityChangeCallback = (0, import_react77.useRef)(null);
  const activeDrawersIds = (0, import_react77.useContext)(ActiveDrawersContext);
  const isVisible3 = !!id && activeDrawersIds.includes(id);
  (0, import_react77.useEffect)(() => {
    const container = ref.current;
    mountContent(container, {
      onVisibilityChange: (cb) => {
        visibilityChangeCallback.current = cb;
      }
    });
    return () => {
      unmountContent(container);
      visibilityChangeCallback.current = null;
    };
  }, []);
  (0, import_react77.useEffect)(() => {
    var _a2;
    (_a2 = visibilityChangeCallback.current) === null || _a2 === void 0 ? void 0 : _a2.call(visibilityChangeCallback, isVisible3);
  }, [isVisible3]);
  return import_react77.default.createElement("div", { ref, className: styles_css_default22["runtime-content-wrapper"], "data-awsui-runtime-drawer-root-id": id });
}
function RuntimeDrawerHeader({ mountHeader, unmountHeader }) {
  const ref = (0, import_react77.useRef)(null);
  (0, import_react77.useEffect)(() => {
    const container = ref.current;
    mountHeader === null || mountHeader === void 0 ? void 0 : mountHeader(container);
    return () => {
      unmountHeader === null || unmountHeader === void 0 ? void 0 : unmountHeader(container);
    };
  }, []);
  return import_react77.default.createElement("div", { className: styles_css_default22["runtime-header-wrapper"], ref });
}
function checkForUnsupportedProps(headerActions) {
  const unsupportedProps = /* @__PURE__ */ new Set([
    "iconSvg",
    "popoverFeedback",
    "pressedIconSvg",
    "popoverFeedback",
    "pressedPopoverFeedback"
  ]);
  for (const item of headerActions) {
    const unsupported = Object.keys(item).filter((key2) => unsupportedProps.has(key2));
    if (unsupported.length > 0) {
      warnOnce("AppLayout", `The headerActions properties are not supported for runtime api: ${unsupported.join(" ")}`);
    }
  }
  return headerActions;
}
var mapRuntimeConfigToDrawer = (runtimeConfig) => {
  var _a2;
  const { mountContent, unmountContent, trigger } = runtimeConfig, runtimeDrawer = __rest(runtimeConfig, ["mountContent", "unmountContent", "trigger"]);
  return Object.assign(Object.assign({}, runtimeDrawer), { ariaLabels: Object.assign({ drawerName: (_a2 = runtimeDrawer.ariaLabels.content) !== null && _a2 !== void 0 ? _a2 : "" }, runtimeDrawer.ariaLabels), trigger: trigger ? Object.assign({}, trigger.iconSvg && {
    iconSvg: (
      // eslint-disable-next-line react/no-danger
      import_react77.default.createElement("span", { dangerouslySetInnerHTML: { __html: trigger.iconSvg } })
    )
  }) : void 0, content: import_react77.default.createElement(RuntimeDrawerWrapper, { key: runtimeDrawer.id, mountContent, unmountContent, id: runtimeDrawer.id }), onResize: (event) => {
    fireNonCancelableEvent(runtimeDrawer.onResize, { size: event.detail.size, id: runtimeDrawer.id });
  }, headerActions: runtimeDrawer.headerActions ? checkForUnsupportedProps(runtimeDrawer.headerActions) : void 0 });
};
var mapRuntimeConfigToAiDrawer = (runtimeConfig) => {
  var _a2;
  const { mountContent, unmountContent, trigger } = runtimeConfig, runtimeDrawer = __rest(runtimeConfig, ["mountContent", "unmountContent", "trigger"]);
  return Object.assign(Object.assign(Object.assign(Object.assign({}, runtimeDrawer), { ariaLabels: Object.assign({ drawerName: (_a2 = runtimeDrawer.ariaLabels.content) !== null && _a2 !== void 0 ? _a2 : "" }, runtimeDrawer.ariaLabels), trigger: trigger ? {
    customIcon: (trigger === null || trigger === void 0 ? void 0 : trigger.customIcon) ? (
      // eslint-disable-next-line react/no-danger
      import_react77.default.createElement("span", { style: { lineHeight: 0 }, dangerouslySetInnerHTML: { __html: trigger.customIcon } })
    ) : void 0,
    iconSvg: trigger.iconSvg ? (
      // eslint-disable-next-line react/no-danger
      import_react77.default.createElement("span", { dangerouslySetInnerHTML: { __html: trigger.iconSvg } })
    ) : void 0
  } : void 0, content: import_react77.default.createElement(RuntimeDrawerWrapper, { key: runtimeDrawer.id, mountContent, unmountContent, id: runtimeDrawer.id }) }), runtimeDrawer.mountHeader && {
    header: import_react77.default.createElement(RuntimeDrawerHeader, { mountHeader: runtimeDrawer.mountHeader, unmountHeader: runtimeDrawer.unmountHeader })
  }), { onResize: (event) => {
    fireNonCancelableEvent(runtimeDrawer.onResize, { size: event.detail.size, id: runtimeDrawer.id });
  }, headerActions: runtimeDrawer.headerActions ? checkForUnsupportedProps(runtimeDrawer.headerActions) : void 0 });
};
function convertRuntimeDrawers(localDrawers, globalDrawers) {
  const converted = localDrawers.map(mapRuntimeConfigToDrawer);
  const sorted = sortByPriority(converted);
  return {
    global: sortByPriority(globalDrawers.map(mapRuntimeConfigToDrawer)),
    localBefore: sorted.filter((item) => {
      var _a2;
      return ((_a2 = item.orderPriority) !== null && _a2 !== void 0 ? _a2 : 0) > 0;
    }),
    localAfter: sorted.filter((item) => {
      var _a2;
      return ((_a2 = item.orderPriority) !== null && _a2 !== void 0 ? _a2 : 0) <= 0;
    })
  };
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-drawers.js
var TOOLS_DRAWER_ID = "awsui-internal-tools";
function getToolsDrawerItem(props2) {
  if (props2.toolsHide) {
    return null;
  }
  const { iconName, getLabels } = togglesConfig.tools;
  const { mainLabel, closeLabel, openLabel } = getLabels(props2.ariaLabels);
  return {
    id: TOOLS_DRAWER_ID,
    content: props2.tools,
    resizable: false,
    ariaLabels: {
      triggerButton: openLabel,
      closeButton: closeLabel,
      drawerName: mainLabel !== null && mainLabel !== void 0 ? mainLabel : ""
    },
    trigger: {
      iconName
    }
  };
}
var DRAWERS_LIMIT = 2;
var DEFAULT_ON_CHANGE_PARAMS = { initiatedByUserAction: true };
function useRuntimeDrawers(disableRuntimeDrawers, activeDrawerId, onActiveDrawerChange, activeGlobalDrawersIds, onActiveGlobalDrawersChange) {
  const [runtimeDrawers, setRuntimeDrawers] = (0, import_react78.useState)({
    localBefore: [],
    localAfter: [],
    global: []
  });
  const onLocalDrawerChangeStable = useStableCallback(onActiveDrawerChange);
  const onGlobalDrawersChangeStable = useStableCallback(onActiveGlobalDrawersChange);
  const localDrawerWasOpenRef = (0, import_react78.useRef)(false);
  localDrawerWasOpenRef.current = localDrawerWasOpenRef.current || !!activeDrawerId;
  const activeGlobalDrawersIdsRef = (0, import_react78.useRef)([]);
  activeGlobalDrawersIdsRef.current = activeGlobalDrawersIds;
  (0, import_react78.useEffect)(() => {
    if (disableRuntimeDrawers) {
      return;
    }
    const unsubscribe = awsuiPluginsInternal.appLayout.onDrawersRegistered((drawers) => {
      const localDrawers = drawers.filter((drawer) => drawer.type !== "global");
      const globalDrawers = drawers.filter((drawer) => drawer.type === "global");
      setRuntimeDrawers(convertRuntimeDrawers(localDrawers, globalDrawers));
      if (!localDrawerWasOpenRef.current) {
        const defaultActiveLocalDrawer = sortByPriority(localDrawers).find((drawer) => drawer.defaultActive);
        if (defaultActiveLocalDrawer) {
          onLocalDrawerChangeStable(defaultActiveLocalDrawer.id, { initiatedByUserAction: false });
        }
      }
      const drawersNotActiveByDefault = globalDrawers.filter((drawer) => !drawer.defaultActive);
      const hasDrawersOpenByUserAction = drawersNotActiveByDefault.find((drawer) => activeGlobalDrawersIdsRef.current.includes(drawer.id));
      if (hasDrawersOpenByUserAction || activeGlobalDrawersIdsRef.current.length === DRAWERS_LIMIT) {
        return;
      }
      const defaultActiveGlobalDrawers = sortByPriority(globalDrawers).filter((drawer) => !activeGlobalDrawersIdsRef.current.includes(drawer.id) && drawer.defaultActive);
      defaultActiveGlobalDrawers.forEach((drawer) => {
        onGlobalDrawersChangeStable(drawer.id, { initiatedByUserAction: false });
      });
    });
    return () => {
      unsubscribe();
      setRuntimeDrawers({ localBefore: [], localAfter: [], global: [] });
    };
  }, [disableRuntimeDrawers, onGlobalDrawersChangeStable, onLocalDrawerChangeStable]);
  return runtimeDrawers;
}
function useDrawerRuntimeOpenClose(disableRuntimeDrawers, localDrawers, globalDrawers, activeDrawerId, onActiveDrawerChange, activeGlobalDrawersIds, onActiveGlobalDrawersChange) {
  const onDrawerOpened = useStableCallback((drawerId, params = DEFAULT_ON_CHANGE_PARAMS) => {
    const localDrawer = localDrawers === null || localDrawers === void 0 ? void 0 : localDrawers.find((drawer) => drawer.id === drawerId);
    const globalDrawer = globalDrawers.find((drawer) => drawer.id === drawerId);
    if (localDrawer && activeDrawerId !== drawerId) {
      onActiveDrawerChange(drawerId, params);
    }
    if (globalDrawer && !activeGlobalDrawersIds.includes(drawerId)) {
      onActiveGlobalDrawersChange(drawerId, params);
    }
  });
  const onDrawerClosed = useStableCallback((drawerId, params = DEFAULT_ON_CHANGE_PARAMS) => {
    const localDrawer = localDrawers === null || localDrawers === void 0 ? void 0 : localDrawers.find((drawer) => drawer.id === drawerId);
    const globalDrawer = globalDrawers.find((drawer) => drawer.id === drawerId);
    if (localDrawer && activeDrawerId === drawerId) {
      onActiveDrawerChange(null, params);
    }
    if (globalDrawer && activeGlobalDrawersIds.includes(drawerId)) {
      onActiveGlobalDrawersChange(drawerId, params);
    }
  });
  (0, import_react78.useEffect)(() => {
    if (disableRuntimeDrawers) {
      return;
    }
    return awsuiPluginsInternal.appLayout.onDrawerOpened(onDrawerOpened);
  }, [disableRuntimeDrawers, onDrawerOpened]);
  (0, import_react78.useEffect)(() => {
    if (disableRuntimeDrawers) {
      return;
    }
    return awsuiPluginsInternal.appLayout.onDrawerClosed(onDrawerClosed);
  }, [disableRuntimeDrawers, onDrawerClosed]);
}
function useDrawerRuntimeResize(disableRuntimeDrawers, onActiveDrawerResize) {
  const onRuntimeDrawerResize = useStableCallback((drawerId, size) => {
    onActiveDrawerResize({ id: drawerId, size });
  });
  (0, import_react78.useEffect)(() => {
    if (disableRuntimeDrawers) {
      return;
    }
    return awsuiPluginsInternal.appLayout.onDrawerResize(onRuntimeDrawerResize);
  }, [disableRuntimeDrawers, onRuntimeDrawerResize]);
}
function applyToolsDrawer(toolsProps, runtimeDrawers) {
  const drawers = [...runtimeDrawers.localBefore, ...runtimeDrawers.localAfter];
  if (drawers.length === 0 && toolsProps.disableDrawersMerge) {
    return null;
  }
  const toolsItem = getToolsDrawerItem(toolsProps);
  if (toolsItem) {
    drawers.unshift(toolsItem);
  }
  return drawers;
}
var MIN_DRAWER_SIZE = 290;
function useDrawers({ drawers, activeDrawerId: controlledActiveDrawerId, onDrawerChange, onGlobalDrawerFocus, onAddNewActiveDrawer, __disableRuntimeDrawers: disableRuntimeDrawers }, ariaLabels, toolsProps) {
  var _a2, _b, _c, _d;
  const [activeDrawerId = null, setActiveDrawerId] = useControllable2(controlledActiveDrawerId, onDrawerChange, null, {
    componentName: "AppLayout",
    controlledProp: "activeDrawerId",
    changeHandler: "onChange"
  });
  const [activeGlobalDrawersIds, setActiveGlobalDrawersIds] = (0, import_react78.useState)([]);
  const [drawerSizes, setDrawerSizes] = (0, import_react78.useState)({});
  const [expandedDrawerId, setExpandedDrawerId] = (0, import_react78.useState)(null);
  const drawersOpenQueue = (0, import_react78.useRef)([]);
  function onActiveDrawerResize({ id, size }) {
    setDrawerSizes((oldSizes) => Object.assign(Object.assign({}, oldSizes), { [id]: size }));
    fireNonCancelableEvent(activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.onResize, { id, size });
    const activeGlobalDrawer = runtimeGlobalDrawers.find((drawer) => drawer.id === id);
    fireNonCancelableEvent(activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.onResize, { id, size });
  }
  function onActiveDrawerChange(newDrawerId, { initiatedByUserAction } = DEFAULT_ON_CHANGE_PARAMS) {
    var _a3, _b2;
    setActiveDrawerId(newDrawerId);
    if (newDrawerId) {
      onAddNewActiveDrawer === null || onAddNewActiveDrawer === void 0 ? void 0 : onAddNewActiveDrawer(newDrawerId);
    }
    if (hasOwnDrawers) {
      fireNonCancelableEvent(onDrawerChange, { activeDrawerId: newDrawerId });
    } else if (!toolsProps.toolsHide) {
      toolsProps.onToolsToggle(newDrawerId === TOOLS_DRAWER_ID);
    }
    if (newDrawerId) {
      drawersOpenQueue.current = [newDrawerId, ...drawersOpenQueue.current];
      const newDrawer = (_a3 = [...runtimeDrawers.localBefore, ...runtimeDrawers.localAfter]) === null || _a3 === void 0 ? void 0 : _a3.find((drawer) => drawer.id === newDrawerId);
      fireNonCancelableEvent(newDrawer === null || newDrawer === void 0 ? void 0 : newDrawer.onToggle, { isOpen: true, initiatedByUserAction });
    }
    if (activeDrawerId) {
      drawersOpenQueue.current = drawersOpenQueue.current.filter((id) => id !== activeDrawerId);
      const activeDrawer2 = (_b2 = [...runtimeDrawers.localBefore, ...runtimeDrawers.localAfter]) === null || _b2 === void 0 ? void 0 : _b2.find((drawer) => drawer.id === activeDrawerId);
      fireNonCancelableEvent(activeDrawer2 === null || activeDrawer2 === void 0 ? void 0 : activeDrawer2.onToggle, { isOpen: false, initiatedByUserAction });
    }
  }
  function onActiveGlobalDrawersChange(drawerId, { initiatedByUserAction } = DEFAULT_ON_CHANGE_PARAMS) {
    const drawer = runtimeGlobalDrawers.find((drawer2) => drawer2.id === drawerId);
    if (activeGlobalDrawersIds.includes(drawerId)) {
      setActiveGlobalDrawersIds((currentState) => currentState.filter((id) => id !== drawerId));
      onGlobalDrawerFocus === null || onGlobalDrawerFocus === void 0 ? void 0 : onGlobalDrawerFocus(drawerId, false);
      drawersOpenQueue.current = drawersOpenQueue.current.filter((id) => id !== drawerId);
      fireNonCancelableEvent(drawer === null || drawer === void 0 ? void 0 : drawer.onToggle, { isOpen: false, initiatedByUserAction });
      if (drawerId === expandedDrawerId) {
        setExpandedDrawerId(null);
      }
    } else if (drawerId) {
      onAddNewActiveDrawer === null || onAddNewActiveDrawer === void 0 ? void 0 : onAddNewActiveDrawer(drawerId);
      setActiveGlobalDrawersIds((currentState) => [drawerId, ...currentState].slice(0, DRAWERS_LIMIT));
      onGlobalDrawerFocus === null || onGlobalDrawerFocus === void 0 ? void 0 : onGlobalDrawerFocus(drawerId, true);
      drawersOpenQueue.current = [drawerId, ...drawersOpenQueue.current];
      fireNonCancelableEvent(drawer === null || drawer === void 0 ? void 0 : drawer.onToggle, { isOpen: true, initiatedByUserAction });
    }
  }
  const hasOwnDrawers = !!drawers;
  let activeDrawerIdResolved = (toolsProps === null || toolsProps === void 0 ? void 0 : toolsProps.toolsOpen) && !hasOwnDrawers ? TOOLS_DRAWER_ID : activeDrawerId !== TOOLS_DRAWER_ID ? activeDrawerId : null;
  const runtimeDrawers = useRuntimeDrawers(disableRuntimeDrawers, activeDrawerIdResolved, onActiveDrawerChange, activeGlobalDrawersIds, onActiveGlobalDrawersChange);
  const { localBefore, localAfter, global: runtimeGlobalDrawers } = runtimeDrawers;
  const combinedLocalDrawers = drawers ? [...localBefore, ...drawers, ...localAfter] : applyToolsDrawer(toolsProps, runtimeDrawers);
  const activeDrawer = combinedLocalDrawers === null || combinedLocalDrawers === void 0 ? void 0 : combinedLocalDrawers.find((drawer) => drawer.id === activeDrawerIdResolved);
  activeDrawerIdResolved = (_a2 = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== null && _a2 !== void 0 ? _a2 : null;
  const activeGlobalDrawers = runtimeGlobalDrawers.filter((drawer) => activeGlobalDrawersIds.includes(drawer.id));
  useDrawerRuntimeOpenClose(disableRuntimeDrawers, combinedLocalDrawers, runtimeGlobalDrawers, activeDrawerId, onActiveDrawerChange, activeGlobalDrawersIds, onActiveGlobalDrawersChange);
  useDrawerRuntimeResize(disableRuntimeDrawers, onActiveDrawerResize);
  const activeDrawerSize = activeDrawerIdResolved ? (_c = (_b = drawerSizes[activeDrawerIdResolved]) !== null && _b !== void 0 ? _b : activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _c !== void 0 ? _c : toolsProps.toolsWidth : toolsProps.toolsWidth;
  const activeGlobalDrawersSizes = activeGlobalDrawersIds.reduce((acc, currentGlobalDrawerId) => {
    var _a3, _b2;
    const currentGlobalDrawer = runtimeGlobalDrawers.find((drawer) => drawer.id === currentGlobalDrawerId);
    return Object.assign(Object.assign({}, acc), { [currentGlobalDrawerId]: (_b2 = (_a3 = drawerSizes[currentGlobalDrawerId]) !== null && _a3 !== void 0 ? _a3 : currentGlobalDrawer === null || currentGlobalDrawer === void 0 ? void 0 : currentGlobalDrawer.defaultSize) !== null && _b2 !== void 0 ? _b2 : MIN_DRAWER_SIZE });
  }, {});
  const minGlobalDrawersSizes = runtimeGlobalDrawers.reduce((acc, globalDrawer) => {
    var _a3;
    return Object.assign(Object.assign({}, acc), { [globalDrawer.id]: Math.min((_a3 = globalDrawer.defaultSize) !== null && _a3 !== void 0 ? _a3 : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE) });
  }, {});
  const minDrawerSize = Math.min((toolsProps === null || toolsProps === void 0 ? void 0 : toolsProps.toolsOpen) ? toolsProps.toolsWidth : (_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _d !== void 0 ? _d : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);
  return {
    ariaLabelsWithDrawers: ariaLabels,
    drawers: combinedLocalDrawers || void 0,
    activeDrawer,
    activeDrawerId: activeDrawerIdResolved,
    globalDrawers: runtimeGlobalDrawers,
    activeGlobalDrawers,
    activeGlobalDrawersIds,
    activeGlobalDrawersSizes,
    activeDrawerSize,
    minDrawerSize,
    minGlobalDrawersSizes,
    drawerSizes,
    drawersOpenQueue: drawersOpenQueue.current,
    onActiveDrawerChange,
    onActiveDrawerResize,
    onActiveGlobalDrawersChange,
    expandedDrawerId,
    setExpandedDrawerId
  };
}

// node_modules/@cloudscape-design/components/app-layout/drawer/drawers-helpers.js
function splitItems(maybeItems, splitIndex, activeId) {
  const items = maybeItems !== null && maybeItems !== void 0 ? maybeItems : [];
  const visibleItems = items.slice(0, splitIndex);
  const overflowItems = items.slice(splitIndex);
  if (overflowItems.length === 1) {
    return { visibleItems: items, overflowItems: [] };
  }
  if (activeId && overflowItems.length > 0 && visibleItems.length > 0) {
    const activeInOverflow = overflowItems.find((item) => item.id === activeId);
    if (activeInOverflow) {
      overflowItems.splice(overflowItems.indexOf(activeInOverflow), 1);
      overflowItems.unshift(visibleItems.pop());
      visibleItems.push(activeInOverflow);
    }
  }
  return { visibleItems, overflowItems };
}

// node_modules/@cloudscape-design/components/app-layout/drawer/overflow-menu.js
var import_react92 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/internal.js
var import_react91 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/dropdown/index.js
var import_react80 = __toESM(require_react());
var import_react_dom6 = __toESM(require_react_dom());

// node_modules/@cloudscape-design/components/internal/hooks/use-portal-mode-classes/index.js
function usePortalModeClasses(ref) {
  const colorMode = useCurrentMode(ref);
  const densityMode = useDensityMode(ref);
  const context = useVisualContext(ref);
  const visualRefreshWithClass = useVisualRefresh() && !ALWAYS_VISUAL_REFRESH;
  return clsx_m_default({
    "awsui-polaris-dark-mode awsui-dark-mode": colorMode === "dark",
    "awsui-polaris-compact-mode awsui-compact-mode": densityMode === "compact",
    "awsui-visual-refresh": visualRefreshWithClass,
    [`awsui-context-${context}`]: context
  });
}

// node_modules/@cloudscape-design/components/internal/components/dropdown/context.js
var import_react79 = __toESM(require_react());
var DropdownContext = import_react79.default.createContext({
  position: "bottom-right"
});
function DropdownContextProvider({ children: children2, position = "bottom-right" }) {
  return import_react79.default.createElement(DropdownContext.Provider, { value: { position } }, children2);
}
function useDropdownContext() {
  return (0, import_react79.useContext)(DropdownContext);
}

// node_modules/@cloudscape-design/components/internal/components/dropdown/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/dropdown/styles.scoped.css";
var styles_css_default23 = {
  "dropdown-content-wrapper": "awsui_dropdown-content-wrapper_qwoo0_1ac8f_153",
  "awsui-motion-fade-in-dropdown": "awsui_awsui-motion-fade-in-dropdown_qwoo0_1ac8f_1",
  "refresh": "awsui_refresh_qwoo0_1ac8f_174",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_qwoo0_1ac8f_1",
  "root": "awsui_root_qwoo0_1ac8f_199",
  "interior": "awsui_interior_qwoo0_1ac8f_232",
  "dropdown": "awsui_dropdown_qwoo0_1ac8f_153",
  "use-portal": "awsui_use-portal_qwoo0_1ac8f_242",
  "is-empty": "awsui_is-empty_qwoo0_1ac8f_288",
  "dropdown-drop-up": "awsui_dropdown-drop-up_qwoo0_1ac8f_295",
  "with-limited-width": "awsui_with-limited-width_qwoo0_1ac8f_299",
  "dropdown-drop-left": "awsui_dropdown-drop-left_qwoo0_1ac8f_302",
  "dropdown-drop-right": "awsui_dropdown-drop-right_qwoo0_1ac8f_305",
  "occupy-entire-width": "awsui_occupy-entire-width_qwoo0_1ac8f_308",
  "stretch-beyond-trigger-width": "awsui_stretch-beyond-trigger-width_qwoo0_1ac8f_311",
  "hide-block-border": "awsui_hide-block-border_qwoo0_1ac8f_318",
  "open": "awsui_open_qwoo0_1ac8f_327",
  "nowrap": "awsui_nowrap_qwoo0_1ac8f_336",
  "dropdown-content": "awsui_dropdown-content_qwoo0_1ac8f_153",
  "stretch-trigger-height": "awsui_stretch-trigger-height_qwoo0_1ac8f_347"
};

// node_modules/@cloudscape-design/components/internal/components/dropdown/dropdown-fit-handler.js
var AVAILABLE_SPACE_RESERVE_DEFAULT = 50;
var AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL = 19;
var AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL = 20;
var getClosestParentDimensions = (element) => {
  const parents = getOverflowParents(element).map((element2) => {
    const { blockSize, inlineSize, insetBlockStart, insetInlineStart } = getLogicalBoundingClientRect(element2);
    return {
      blockSize,
      inlineSize,
      insetBlockStart,
      insetInlineStart
    };
  });
  return parents.shift();
};
var defaultMaxDropdownWidth = getBreakpointValue("xxs");
var getAvailableSpace = ({ trigger, overflowParents, stretchWidth = false, stretchHeight = false, isMobile }) => {
  const availableSpaceReserveVertical = stretchHeight ? 0 : isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const availableSpaceReserveHorizontal = stretchWidth ? 0 : isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const { insetBlockEnd: triggerBlockEnd, insetInlineStart: triggerInlineStart, insetInlineEnd: triggerInlineEnd } = getLogicalBoundingClientRect(trigger);
  return overflowParents.reduce(({ blockStart, blockEnd, inlineStart, inlineEnd }, overflowParent) => {
    const offsetTop = triggerBlockEnd - overflowParent.insetBlockStart;
    const currentBlockStart = offsetTop - trigger.offsetHeight - availableSpaceReserveVertical;
    const currentBlockEnd = overflowParent.blockSize - offsetTop - availableSpaceReserveVertical;
    const currentInlineStart = triggerInlineEnd - overflowParent.insetInlineStart - availableSpaceReserveHorizontal;
    const currentInlineEnd = overflowParent.insetInlineStart + overflowParent.inlineSize - triggerInlineStart - availableSpaceReserveHorizontal;
    return {
      blockStart: Math.min(blockStart, currentBlockStart),
      blockEnd: Math.min(blockEnd, currentBlockEnd),
      inlineStart: Math.min(inlineStart, currentInlineStart),
      inlineEnd: Math.min(inlineEnd, currentInlineEnd)
    };
  }, {
    blockStart: Number.MAX_VALUE,
    blockEnd: Number.MAX_VALUE,
    inlineStart: Number.MAX_VALUE,
    inlineEnd: Number.MAX_VALUE
  });
};
var getInteriorAvailableSpace = ({ trigger, overflowParents, isMobile }) => {
  const AVAILABLE_SPACE_RESERVE_VERTICAL = isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_VERTICAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const AVAILABLE_SPACE_RESERVE_HORIZONTAL = isMobile ? AVAILABLE_SPACE_RESERVE_MOBILE_HORIZONTAL : AVAILABLE_SPACE_RESERVE_DEFAULT;
  const { insetBlockEnd: triggerBlockEnd, insetBlockStart: triggerBlockStart, insetInlineStart: triggerInlineStart, insetInlineEnd: triggerInlineEnd } = getLogicalBoundingClientRect(trigger);
  return overflowParents.reduce(({ blockStart, blockEnd, inlineStart, inlineEnd }, overflowParent) => {
    const currentBlockStart = triggerBlockEnd - overflowParent.insetBlockStart - AVAILABLE_SPACE_RESERVE_VERTICAL;
    const currentBlockEnd = overflowParent.blockSize - triggerBlockStart + overflowParent.insetBlockStart - AVAILABLE_SPACE_RESERVE_VERTICAL;
    const currentInlineStart = triggerInlineStart - overflowParent.insetInlineStart - AVAILABLE_SPACE_RESERVE_HORIZONTAL;
    const currentInlineEnd = overflowParent.insetInlineStart + overflowParent.inlineSize - triggerInlineEnd - AVAILABLE_SPACE_RESERVE_HORIZONTAL;
    return {
      blockStart: Math.min(blockStart, currentBlockStart),
      blockEnd: Math.min(blockEnd, currentBlockEnd),
      inlineStart: Math.min(inlineStart, currentInlineStart),
      inlineEnd: Math.min(inlineEnd, currentInlineEnd)
    };
  }, {
    blockStart: Number.MAX_VALUE,
    blockEnd: Number.MAX_VALUE,
    inlineStart: Number.MAX_VALUE,
    inlineEnd: Number.MAX_VALUE
  });
};
var getWidths = ({ triggerElement, dropdownElement, desiredMinWidth, stretchBeyondTriggerWidth = false }) => {
  const { inlineSize: triggerInlineSize } = getLogicalBoundingClientRect(triggerElement);
  const minWidth = desiredMinWidth ? Math.min(triggerInlineSize, desiredMinWidth) : triggerInlineSize;
  const maxWidth = stretchBeyondTriggerWidth ? Math.max(defaultMaxDropdownWidth, triggerInlineSize) : Number.MAX_VALUE;
  const { inlineSize: requiredWidth } = getLogicalBoundingClientRect(dropdownElement);
  const idealWidth = Math.min(Math.max(requiredWidth, minWidth), maxWidth);
  return { idealWidth, minWidth, triggerInlineSize };
};
var hasEnoughSpaceToStretchBeyondTriggerWidth = ({ triggerElement, dropdownElement, desiredMinWidth, expandToViewport, stretchWidth, stretchHeight, isMobile }) => {
  const overflowParents = getOverflowParentDimensions({
    element: dropdownElement,
    excludeClosestParent: false,
    expandToViewport,
    canExpandOutsideViewport: stretchHeight
  });
  const { idealWidth } = getWidths({
    triggerElement,
    dropdownElement,
    desiredMinWidth,
    stretchBeyondTriggerWidth: true
  });
  const availableSpace = getAvailableSpace({
    trigger: triggerElement,
    overflowParents,
    stretchWidth,
    stretchHeight,
    isMobile
  });
  return idealWidth <= availableSpace.inlineStart || idealWidth <= availableSpace.inlineEnd;
};
var getDropdownPosition = ({ triggerElement, dropdownElement, overflowParents, minWidth: desiredMinWidth, preferCenter = false, stretchWidth = false, stretchHeight = false, isMobile = false, stretchBeyondTriggerWidth = false }) => {
  const availableSpace = getAvailableSpace({
    trigger: triggerElement,
    overflowParents,
    stretchWidth,
    stretchHeight,
    isMobile
  });
  const { idealWidth, minWidth, triggerInlineSize } = getWidths({
    triggerElement,
    dropdownElement,
    desiredMinWidth,
    stretchBeyondTriggerWidth
  });
  let dropInlineStart;
  let insetInlineStart = null;
  let inlineSize = idealWidth;
  if (idealWidth <= availableSpace.inlineEnd) {
    dropInlineStart = false;
  } else if (idealWidth <= availableSpace.inlineStart) {
    dropInlineStart = true;
  } else {
    dropInlineStart = availableSpace.inlineStart > availableSpace.inlineEnd;
    inlineSize = Math.max(availableSpace.inlineStart, availableSpace.inlineEnd, minWidth);
  }
  if (preferCenter) {
    const spillOver = (idealWidth - triggerInlineSize) / 2;
    const availableOutsideLeft = availableSpace.inlineStart - triggerInlineSize;
    const availableOutsideRight = availableSpace.inlineEnd - triggerInlineSize;
    const fitsInCenter = availableOutsideLeft >= spillOver && availableOutsideRight >= spillOver;
    if (fitsInCenter) {
      insetInlineStart = -spillOver;
    }
  }
  const dropBlockStart = availableSpace.blockEnd < dropdownElement.offsetHeight && availableSpace.blockStart > availableSpace.blockEnd;
  const availableHeight = dropBlockStart ? availableSpace.blockStart : availableSpace.blockEnd;
  const croppedHeight = Math.max(stretchHeight ? availableHeight : Math.floor(availableHeight / 31) * 31 + 16, 15);
  return {
    dropBlockStart,
    dropInlineStart,
    insetInlineStart: insetInlineStart === null ? "auto" : `${insetInlineStart}px`,
    blockSize: `${croppedHeight}px`,
    inlineSize: `${inlineSize}px`
  };
};
var getInteriorDropdownPosition = (trigger, dropdown, overflowParents, isMobile) => {
  const availableSpace = getInteriorAvailableSpace({ trigger, overflowParents, isMobile });
  const { insetBlockEnd: triggerBlockEnd, insetBlockStart: triggerBlockStart, inlineSize: triggerInlineSize } = getLogicalBoundingClientRect(trigger);
  const { insetBlockStart: parentDropdownBlockStart, blockSize: parentDropdownHeight } = getClosestParentDimensions(trigger);
  let dropInlineStart;
  let { inlineSize } = getLogicalBoundingClientRect(dropdown);
  const insetBlockStart = triggerBlockStart - parentDropdownBlockStart;
  if (inlineSize <= availableSpace.inlineEnd) {
    dropInlineStart = false;
  } else if (inlineSize <= availableSpace.inlineStart) {
    dropInlineStart = true;
  } else {
    dropInlineStart = availableSpace.inlineStart > availableSpace.inlineEnd;
    inlineSize = Math.max(availableSpace.inlineStart, availableSpace.inlineEnd);
  }
  const insetInlineStart = dropInlineStart ? 0 - inlineSize : triggerInlineSize;
  const dropBlockStart = availableSpace.blockEnd < dropdown.offsetHeight && availableSpace.blockStart > availableSpace.blockEnd;
  const insetBlockEnd = dropBlockStart ? parentDropdownBlockStart + parentDropdownHeight - triggerBlockEnd : 0;
  const availableHeight = dropBlockStart ? availableSpace.blockStart : availableSpace.blockEnd;
  const croppedHeight = Math.floor(availableHeight / 31) * 31 + 16;
  return {
    dropBlockStart,
    dropInlineStart,
    blockSize: `${croppedHeight}px`,
    inlineSize: `${inlineSize}px`,
    insetBlockStart: `${insetBlockStart}px`,
    insetBlockEnd: `${insetBlockEnd}px`,
    insetInlineStart: `${insetInlineStart}px`
  };
};
var calculatePosition2 = (dropdownElement, triggerElement, verticalContainerElement, interior, expandToViewport, preferCenter, stretchWidth, stretchHeight, isMobile, minWidth, stretchBeyondTriggerWidth) => {
  verticalContainerElement.style.maxBlockSize = "";
  dropdownElement.style.inlineSize = "";
  dropdownElement.style.insetBlockStart = "";
  dropdownElement.style.insetBlockEnd = "";
  dropdownElement.style.insetInlineStart = "";
  dropdownElement.classList.remove(styles_css_default23["dropdown-drop-left"]);
  dropdownElement.classList.remove(styles_css_default23["dropdown-drop-right"]);
  dropdownElement.classList.remove(styles_css_default23["dropdown-drop-up"]);
  const overflowParents = getOverflowParentDimensions({
    element: dropdownElement,
    excludeClosestParent: interior,
    expandToViewport,
    canExpandOutsideViewport: stretchHeight
  });
  const position = interior ? getInteriorDropdownPosition(triggerElement, dropdownElement, overflowParents, isMobile) : getDropdownPosition({
    triggerElement,
    dropdownElement,
    overflowParents,
    minWidth,
    preferCenter,
    stretchWidth,
    stretchHeight,
    isMobile,
    stretchBeyondTriggerWidth
  });
  const triggerBox = getLogicalBoundingClientRect(triggerElement);
  return [position, triggerBox];
};

// node_modules/@cloudscape-design/components/internal/components/dropdown/dropdown-position.js
function applyDropdownPositionRelativeToViewport({ position, dropdownElement, triggerRect, isMobile }) {
  const useAbsolutePositioning = isMobile;
  const verticalScrollOffset = useAbsolutePositioning ? document.documentElement.scrollTop : 0;
  const horizontalScrollOffset = useAbsolutePositioning ? document.documentElement.scrollLeft : 0;
  dropdownElement.style.position = useAbsolutePositioning ? "absolute" : "fixed";
  if (position.dropBlockStart) {
    dropdownElement.style.insetBlockEnd = `calc(100% - ${verticalScrollOffset + triggerRect.insetBlockStart}px)`;
  } else {
    dropdownElement.style.insetBlockStart = `${verticalScrollOffset + triggerRect.insetBlockEnd}px`;
  }
  if (position.dropInlineStart) {
    dropdownElement.style.insetInlineStart = `calc(${horizontalScrollOffset + triggerRect.insetInlineEnd}px - ${position.inlineSize})`;
  } else {
    dropdownElement.style.insetInlineStart = `${horizontalScrollOffset + triggerRect.insetInlineStart}px`;
  }
}

// node_modules/@cloudscape-design/components/internal/components/dropdown/index.js
var DropdownContainer = ({ triggerRef, children: children2, renderWithPortal, id, referrerId, open }) => {
  var _a2, _b;
  if (!renderWithPortal) {
    return import_react80.default.createElement(import_react80.default.Fragment, null, children2);
  }
  if (!open) {
    return null;
  }
  const currentDocument = (_b = (_a2 = triggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.ownerDocument) !== null && _b !== void 0 ? _b : document;
  return (0, import_react_dom6.createPortal)(import_react80.default.createElement("div", { id, "data-awsui-referrer-id": referrerId }, children2), currentDocument.body);
};
var TransitionContent = ({ state, transitionRef, dropdownClasses, stretchWidth, interior, isRefresh, dropdownRef, verticalContainerRef, expandToViewport, stretchBeyondTriggerWidth, header, children: children2, footer, position, open, onMouseDown, id, role, ariaLabelledby, ariaDescribedby }) => {
  const contentRef = useMergeRefs(dropdownRef, transitionRef);
  return import_react80.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default23.dropdown, dropdownClasses, {
      [styles_css_default23.open]: open,
      [styles_css_default23["with-limited-width"]]: !stretchWidth,
      [styles_css_default23["hide-block-border"]]: stretchWidth,
      [styles_css_default23.interior]: interior,
      [styles_css_default23.refresh]: isRefresh,
      [styles_css_default23["use-portal"]]: expandToViewport && !interior,
      [styles_css_default23["stretch-beyond-trigger-width"]]: stretchBeyondTriggerWidth
    }), ref: contentRef, id, role, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, "data-open": open, "data-animating": state !== "exited", "aria-hidden": !open, style: stretchBeyondTriggerWidth ? { [custom_css_properties_default.dropdownDefaultMaxWidth]: `${defaultMaxDropdownWidth}px` } : {}, onMouseDown },
    import_react80.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default23["dropdown-content-wrapper"], !header && !children2 && styles_css_default23["is-empty"], isRefresh && styles_css_default23.refresh) },
      import_react80.default.createElement(
        "div",
        { ref: verticalContainerRef, className: styles_css_default23["dropdown-content"] },
        import_react80.default.createElement(
          DropdownContextProvider,
          { position },
          header,
          children2,
          footer
        )
      )
    )
  );
};
var Dropdown = ({ children: children2, trigger, open, onDropdownClose, onMouseDown, header, footer, dropdownId, stretchTriggerHeight = false, stretchWidth = true, stretchHeight = false, stretchToTriggerWidth = true, stretchBeyondTriggerWidth = false, expandToViewport = false, preferCenter = false, interior = false, minWidth, scrollable = true, loopFocus = expandToViewport, onFocus, onBlur, contentKey, dropdownContentId, dropdownContentRole, ariaLabelledby, ariaDescribedby }) => {
  const wrapperRef = (0, import_react80.useRef)(null);
  const triggerRef = (0, import_react80.useRef)(null);
  const dropdownRef = (0, import_react80.useRef)(null);
  const dropdownContainerRef = (0, import_react80.useRef)(null);
  const verticalContainerRef = (0, import_react80.useRef)(null);
  const fixedPosition = (0, import_react80.useRef)(null);
  const isRefresh = useVisualRefresh();
  const dropdownClasses = usePortalModeClasses(triggerRef);
  const [position, setPosition] = (0, import_react80.useState)("bottom-right");
  const isMobile = useMobile();
  const setDropdownPosition = (position2, triggerBox, target, verticalContainer) => {
    const entireWidth = !interior && stretchWidth;
    if (!stretchWidth) {
      verticalContainer.style.maxBlockSize = `${parseInt(position2.blockSize) + 1}px`;
    } else {
      verticalContainer.style.maxBlockSize = position2.blockSize;
    }
    if (entireWidth && !expandToViewport) {
      if (stretchToTriggerWidth) {
        target.classList.add(styles_css_default23["occupy-entire-width"]);
      }
    } else {
      target.style.inlineSize = position2.inlineSize;
    }
    if (position2.dropBlockStart && !interior) {
      target.classList.add(styles_css_default23["dropdown-drop-up"]);
      if (!expandToViewport) {
        target.style.insetBlockEnd = "100%";
      }
    } else {
      target.classList.remove(styles_css_default23["dropdown-drop-up"]);
    }
    target.classList.add(position2.dropInlineStart ? styles_css_default23["dropdown-drop-left"] : styles_css_default23["dropdown-drop-right"]);
    if (position2.insetInlineStart && position2.insetInlineStart !== "auto") {
      target.style.insetInlineStart = position2.insetInlineStart;
    }
    if (expandToViewport && !interior) {
      applyDropdownPositionRelativeToViewport({
        position: position2,
        dropdownElement: target,
        triggerRect: triggerBox,
        isMobile
      });
      fixedPosition.current = position2;
      return;
    }
    if (interior && isInteriorPosition(position2)) {
      if (position2.dropBlockStart) {
        target.style.insetBlockEnd = position2.insetBlockEnd;
      } else {
        target.style.insetBlockStart = position2.insetBlockStart;
      }
      target.style.insetInlineStart = position2.insetInlineStart;
    }
    if (position2.dropBlockStart && position2.dropInlineStart) {
      setPosition("top-left");
    } else if (position2.dropBlockStart) {
      setPosition("top-right");
    } else if (position2.dropInlineStart) {
      setPosition("bottom-left");
    } else {
      setPosition("bottom-right");
    }
  };
  const isOutsideDropdown = (element) => (!wrapperRef.current || !nodeBelongs2(wrapperRef.current, element)) && (!dropdownContainerRef.current || !nodeBelongs2(dropdownContainerRef.current, element));
  const focusHandler = (event) => {
    if (!event.relatedTarget || isOutsideDropdown(event.relatedTarget)) {
      fireNonCancelableEvent(onFocus, event);
    }
  };
  const blurHandler = (event) => {
    if (!event.relatedTarget || isOutsideDropdown(event.relatedTarget)) {
      fireNonCancelableEvent(onBlur, event);
    }
  };
  const fixStretching = () => {
    const classNameToRemove = styles_css_default23["stretch-beyond-trigger-width"];
    if (open && stretchBeyondTriggerWidth && dropdownRef.current && triggerRef.current && dropdownRef.current.classList.contains(classNameToRemove) && !hasEnoughSpaceToStretchBeyondTriggerWidth({
      triggerElement: triggerRef.current,
      dropdownElement: dropdownRef.current,
      desiredMinWidth: minWidth,
      expandToViewport,
      stretchWidth,
      stretchHeight,
      isMobile
    })) {
      dropdownRef.current.classList.remove(classNameToRemove);
    }
  };
  useResizeObserver(() => dropdownRef.current, fixStretching);
  (0, import_react80.useLayoutEffect)(() => {
    const onDropdownOpen = () => {
      if (open && dropdownRef.current && triggerRef.current && verticalContainerRef.current) {
        if (scrollable) {
          dropdownRef.current.classList.add(styles_css_default23.nowrap);
        }
        setDropdownPosition(...calculatePosition2(dropdownRef.current, triggerRef.current, verticalContainerRef.current, interior, expandToViewport, preferCenter, stretchWidth, stretchHeight, isMobile, minWidth, stretchBeyondTriggerWidth), dropdownRef.current, verticalContainerRef.current);
        if (scrollable) {
          dropdownRef.current.classList.remove(styles_css_default23.nowrap);
        }
      }
    };
    onDropdownOpen();
    if (open) {
      window.addEventListener("scroll", onDropdownOpen);
      const timeoutId = setTimeout(() => {
        window.removeEventListener("scroll", onDropdownOpen);
      }, 500);
      return () => {
        clearTimeout(timeoutId);
        window.removeEventListener("scroll", onDropdownOpen);
      };
    }
  }, [open, dropdownRef, triggerRef, verticalContainerRef, interior, stretchWidth, isMobile, contentKey]);
  (0, import_react80.useEffect)(() => {
    if (!open) {
      return;
    }
    const clickListener = (event) => {
      const target = event.composedPath ? event.composedPath()[0] : event.target;
      if (!nodeBelongs2(dropdownRef.current, target) && !nodeBelongs2(triggerRef.current, target)) {
        fireNonCancelableEvent(onDropdownClose);
      }
    };
    window.addEventListener("click", clickListener, true);
    return () => {
      window.removeEventListener("click", clickListener, true);
    };
  }, [open, onDropdownClose]);
  (0, import_react80.useLayoutEffect)(() => {
    if (!expandToViewport || !open) {
      return;
    }
    const updateDropdownPosition = () => {
      if (triggerRef.current && dropdownRef.current && verticalContainerRef.current && fixedPosition.current) {
        applyDropdownPositionRelativeToViewport({
          position: fixedPosition.current,
          dropdownElement: dropdownRef.current,
          triggerRect: getLogicalBoundingClientRect(triggerRef.current),
          isMobile
        });
      }
    };
    updateDropdownPosition();
    const controller = new AbortController();
    window.addEventListener("scroll", updateDropdownPosition, { capture: true, signal: controller.signal });
    window.addEventListener("resize", updateDropdownPosition, { capture: true, signal: controller.signal });
    return () => {
      controller.abort();
    };
  }, [open, expandToViewport, isMobile]);
  const referrerId = useUniqueId();
  return import_react80.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default23.root, interior && styles_css_default23.interior, stretchTriggerHeight && styles_css_default23["stretch-trigger-height"]), ref: wrapperRef, onFocus: focusHandler, onBlur: blurHandler },
    import_react80.default.createElement("div", { id: referrerId, className: clsx_m_default(stretchTriggerHeight && styles_css_default23["stretch-trigger-height"]), ref: triggerRef }, trigger),
    import_react80.default.createElement(TabTrap, { focusNextCallback: () => {
      var _a2;
      return dropdownRef.current && ((_a2 = getFirstFocusable2(dropdownRef.current)) === null || _a2 === void 0 ? void 0 : _a2.focus());
    }, disabled: !open || !loopFocus }),
    import_react80.default.createElement(
      DropdownContainer,
      { triggerRef, renderWithPortal: expandToViewport && !interior, id: dropdownId, referrerId, open },
      import_react80.default.createElement(Transition2, { in: open !== null && open !== void 0 ? open : false, exit: false }, (state, ref) => import_react80.default.createElement(
        "div",
        { ref: dropdownContainerRef },
        import_react80.default.createElement(TabTrap, { focusNextCallback: () => {
          var _a2;
          return triggerRef.current && ((_a2 = getLastFocusable2(triggerRef.current)) === null || _a2 === void 0 ? void 0 : _a2.focus());
        }, disabled: !open || !loopFocus }),
        import_react80.default.createElement(TransitionContent, { state, transitionRef: ref, dropdownClasses, open, stretchWidth, interior, header, expandToViewport, stretchBeyondTriggerWidth, footer, onMouseDown, isRefresh, dropdownRef, verticalContainerRef, position, id: dropdownContentId, role: dropdownContentRole, ariaLabelledby, ariaDescribedby }, children2),
        import_react80.default.createElement(TabTrap, { focusNextCallback: () => {
          var _a2;
          return triggerRef.current && ((_a2 = getFirstFocusable2(triggerRef.current)) === null || _a2 === void 0 ? void 0 : _a2.focus());
        }, disabled: !open || !loopFocus })
      ))
    )
  );
};
var isInteriorPosition = (position) => position.insetBlockEnd !== void 0;
var dropdown_default = Dropdown;

// node_modules/@cloudscape-design/components/internal/components/options-list/index.js
var import_react81 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/options-list/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/options-list/styles.scoped.css";
var styles_css_default24 = {
  "options-list": "awsui_options-list_19gcf_11x8t_145",
  "options-list-embedded": "awsui_options-list-embedded_19gcf_11x8t_192",
  "decrease-block-margin": "awsui_decrease-block-margin_19gcf_11x8t_199"
};

// node_modules/@cloudscape-design/components/internal/components/options-list/index.js
var BOTTOM_TRIGGER_OFFSET = 80;
var getItemIndex = (containerRef, event) => {
  const target = findUpUntil(event.target, (element) => element === containerRef.current || !!element.dataset.mouseTarget);
  const mouseTarget = target === null || target === void 0 ? void 0 : target.dataset.mouseTarget;
  return mouseTarget ? parseInt(mouseTarget) : -1;
};
var OptionsList = (_a2, ref) => {
  var { open, statusType, children: children2, nativeAttributes = {}, onKeyDown, onBlur, onFocus, onLoadMore, onMouseUp, onMouseMove, position = "relative", role = "listbox", tagOverride: Tag = "div", decreaseBlockMargin = false, ariaLabel, ariaLabelledby, ariaDescribedby, embedded, stickyItemBlockSize } = _a2, restProps = __rest(_a2, ["open", "statusType", "children", "nativeAttributes", "onKeyDown", "onBlur", "onFocus", "onLoadMore", "onMouseUp", "onMouseMove", "position", "role", "tagOverride", "decreaseBlockMargin", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "embedded", "stickyItemBlockSize"]);
  const baseProps = getBaseProps(restProps);
  const menuRef = (0, import_react81.useRef)(null);
  const handleScroll = useStableCallback(() => {
    const scrollContainer = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current;
    if (scrollContainer) {
      const bottomEdgePosition = scrollContainer.scrollTop + scrollContainer.clientHeight;
      const remainingScrollHeight = scrollContainer.scrollHeight - bottomEdgePosition;
      if (remainingScrollHeight < BOTTOM_TRIGGER_OFFSET) {
        fireNonCancelableEvent(onLoadMore);
      }
    }
  });
  (0, import_react81.useEffect)(() => {
    if (open && statusType === "pending") {
      handleScroll();
    }
  }, [open, statusType, handleScroll]);
  const className2 = clsx_m_default(styles_css_default24["options-list"], {
    [styles_css_default24["decrease-block-margin"]]: decreaseBlockMargin,
    [styles_css_default24["options-list-embedded"]]: embedded
  });
  const mergedRef = useMergeRefs(ref, menuRef);
  return import_react81.default.createElement(Tag, Object.assign({}, baseProps, nativeAttributes, { className: className2, ref: mergedRef, style: { position, scrollPaddingBlockStart: stickyItemBlockSize !== null && stickyItemBlockSize !== void 0 ? stickyItemBlockSize : void 0 }, role, onScroll: handleScroll, onKeyDown: (event) => fireKeyboardEvent(onKeyDown, event), onMouseMove: (event) => onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove(getItemIndex(menuRef, event)), onMouseUp: (event) => onMouseUp === null || onMouseUp === void 0 ? void 0 : onMouseUp(getItemIndex(menuRef, event)), onBlur: (event) => fireNonCancelableEvent(onBlur, { relatedTarget: event.relatedTarget }), onFocus: () => fireNonCancelableEvent(onFocus), tabIndex: embedded ? 0 : -1, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby }), open && children2);
};
var options_list_default = import_react81.default.forwardRef(OptionsList);

// node_modules/@cloudscape-design/components/internal/styles/motion/utils.js
var spinWhenOpen = (styles, className2, open) => clsx_m_default(styles[className2], open && styles[`${className2}-open`]);

// node_modules/@cloudscape-design/components/button-dropdown/items-list.js
var import_react88 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/category-element.js
var import_react82 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/button-dropdown/category-elements/styles.scoped.css";
var styles_css_default25 = {
  "header": "awsui_header_16mm3_mv8zj_145",
  "disabled": "awsui_disabled_16mm3_mv8zj_161",
  "expandable-header": "awsui_expandable-header_16mm3_mv8zj_165",
  "rolled-down": "awsui_rolled-down_16mm3_mv8zj_176",
  "highlighted": "awsui_highlighted_16mm3_mv8zj_179",
  "is-focused": "awsui_is-focused_16mm3_mv8zj_197",
  "visual-refresh": "awsui_visual-refresh_16mm3_mv8zj_200",
  "category": "awsui_category_16mm3_mv8zj_204",
  "expandable": "awsui_expandable_16mm3_mv8zj_165",
  "variant-navigation": "awsui_variant-navigation_16mm3_mv8zj_219",
  "expand-icon": "awsui_expand-icon_16mm3_mv8zj_226",
  "expand-icon-up": "awsui_expand-icon-up_16mm3_mv8zj_244",
  "expand-icon-right": "awsui_expand-icon-right_16mm3_mv8zj_247",
  "items-list-container": "awsui_items-list-container_16mm3_mv8zj_255",
  "in-dropdown": "awsui_in-dropdown_16mm3_mv8zj_264",
  "icon-wrapper": "awsui_icon-wrapper_16mm3_mv8zj_268",
  "header-content": "awsui_header-content_16mm3_mv8zj_272"
};

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/category-element.js
var CategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, disabled, variant, position }) => {
  return import_react82.default.createElement(
    "li",
    { className: clsx_m_default(styles_css_default25.category, styles_css_default25[`variant-${variant}`], disabled && styles_css_default25.disabled), role: "presentation" },
    item.text && import_react82.default.createElement(
      "p",
      { className: clsx_m_default(styles_css_default25.header, { [styles_css_default25.disabled]: disabled }), "aria-hidden": "true" },
      import_react82.default.createElement(
        "span",
        { className: styles_css_default25["header-content"] },
        (item.iconName || item.iconUrl || item.iconSvg) && import_react82.default.createElement(
          "span",
          { className: styles_css_default25["icon-wrapper"] },
          import_react82.default.createElement(internal_default, { name: item.iconName, url: item.iconUrl, svg: item.iconSvg, alt: item.iconAlt })
        ),
        item.text
      )
    ),
    import_react82.default.createElement("ul", { className: styles_css_default25["items-list-container"], role: "group", "aria-label": item.text, "aria-disabled": disabled }, item.items && import_react82.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, categoryDisabled: disabled, hasCategoryHeader: !!item.text, variant, position }))
  );
};
var category_element_default = CategoryElement;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/expandable-category-element.js
var import_react84 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/tooltip.js
var import_react83 = __toESM(require_react());
var DEFAULT_OPEN_TIMEOUT_IN_MS = 120;
function Tooltip2({ children: children2, content, position = "right", className: className2 }) {
  const ref = (0, import_react83.useRef)(null);
  const isReducedMotion = useReducedMotion(ref);
  const { open, triggerProps } = useTooltipOpen(isReducedMotion ? 0 : DEFAULT_OPEN_TIMEOUT_IN_MS);
  const portalClasses = usePortalModeClasses(ref);
  return import_react83.default.createElement(
    "span",
    Object.assign({ ref }, triggerProps, { className: className2 }),
    children2,
    open && import_react83.default.createElement(
      Portal,
      null,
      import_react83.default.createElement(
        "span",
        { className: portalClasses },
        import_react83.default.createElement(
          PopoverContainer,
          { size: "small", fixedWidth: false, position, trackRef: ref, arrow: (position2) => import_react83.default.createElement(arrow_default, { position: position2 }), renderWithPortal: true, zIndex: 7e3 },
          import_react83.default.createElement(
            PopoverBody,
            { dismissButton: false, dismissAriaLabel: void 0, header: null, onDismiss: () => {
            }, overflowVisible: "both" },
            import_react83.default.createElement("span", { "data-testid": "button-dropdown-disabled-reason", role: "tooltip" }, content)
          )
        )
      )
    )
  );
}
function useTooltipOpen(timeout2) {
  const handle = (0, import_react83.useRef)();
  const [isOpen, setIsOpen] = (0, import_react83.useState)(false);
  const close = () => {
    clearTimeout(handle.current);
    setIsOpen(false);
  };
  const open = () => setIsOpen(true);
  const openDelayed = () => {
    handle.current = setTimeout(open, timeout2);
  };
  const onKeyDown = (e3) => {
    if (isOpen && isEscape(e3.key)) {
      e3.preventDefault();
      e3.stopPropagation();
      close();
    }
  };
  const onFocus = openDelayed;
  const onBlur = close;
  return {
    open: isOpen,
    triggerProps: {
      onBlur,
      onFocus,
      onKeyDown
    }
  };
}
var isEscape = (key2) => key2 === "Escape" || key2 === "Esc";

// node_modules/@cloudscape-design/components/button-dropdown/utils/menu-item.js
var getMenuItemProps = ({ disabled, parent, expanded }) => ({
  role: "menuitem",
  "aria-disabled": disabled ? "true" : void 0,
  "aria-haspopup": parent ? "true" : void 0,
  "aria-expanded": expanded ? "true" : parent ? "false" : void 0
});
var getMenuItemCheckboxProps = ({ disabled, checked }) => ({
  role: "menuitemcheckbox",
  "aria-disabled": disabled ? "true" : void 0,
  "aria-checked": checked ? "true" : "false"
});

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/expandable-category-element.js
var ExpandableCategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, disabled, expandToViewport, variant, position }) => {
  const highlighted = isHighlighted(item);
  const expanded = isExpanded(item);
  const isKeyboardHighlighted = isKeyboardHighlight(item);
  const triggerRef = import_react84.default.useRef(null);
  const ref = (0, import_react84.useRef)(null);
  (0, import_react84.useEffect)(() => {
    if (triggerRef.current && highlighted && !expanded) {
      triggerRef.current.focus();
    }
  }, [expanded, highlighted]);
  const onClick = (event) => {
    var _a2;
    if (!disabled) {
      event.preventDefault();
      onGroupToggle(item, event);
      (_a2 = triggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  };
  const onHover = () => {
    highlightItem(item);
  };
  const isVisualRefresh = useVisualRefresh();
  const isDisabledWithReason = !!item.disabledReason && item.disabled;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const trigger = item.text && import_react84.default.createElement(
    "span",
    Object.assign({
      className: clsx_m_default(styles_css_default25.header, styles_css_default25["expandable-header"], styles_css_default25[`variant-${variant}`], {
        [styles_css_default25.disabled]: disabled,
        [styles_css_default25.highlighted]: highlighted,
        [styles_css_default25["is-focused"]]: isKeyboardHighlighted,
        [styles_css_default25["visual-refresh"]]: isVisualRefresh
      }),
      // We are using the roving tabindex technique to manage the focus state of the dropdown.
      // The current element will always have tabindex=0 which means that it can be tabbed to,
      // while all other items have tabindex=-1 so we can focus them when necessary.
      tabIndex: highlighted ? 0 : -1,
      ref: triggerRef
    }, getMenuItemProps({ parent: true, expanded, disabled }), isDisabledWithReason ? targetProps : {}, getAnalyticsMetadataAttribute(disabled ? {} : {
      action: !expanded ? "expand" : "collapse",
      detail: {
        position: position || "0",
        label: { root: "self" },
        id: item.id || ""
      }
    })),
    (item.iconName || item.iconUrl || item.iconSvg) && import_react84.default.createElement(
      "span",
      { className: styles_css_default25["icon-wrapper"] },
      import_react84.default.createElement(internal_default, { name: item.iconName, url: item.iconUrl, svg: item.iconSvg, alt: item.iconAlt })
    ),
    item.text,
    import_react84.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default25["expand-icon"], styles_css_default25["expand-icon-right"]) },
      import_react84.default.createElement(internal_default, { name: "caret-down-filled" })
    )
  );
  let content;
  if (isDisabledWithReason) {
    content = import_react84.default.createElement(
      Tooltip2,
      { content: item.disabledReason },
      trigger,
      descriptionEl
    );
  } else if (disabled) {
    content = trigger;
  } else {
    content = import_react84.default.createElement(dropdown_default, { open: expanded, stretchWidth: false, interior: true, expandToViewport, trigger }, item.items && expanded && import_react84.default.createElement(
      "ul",
      { role: "menu", "aria-label": item.text, className: clsx_m_default(styles_css_default25["items-list-container"], styles_css_default25["in-dropdown"]) },
      import_react84.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, variant, position })
    ));
  }
  return import_react84.default.createElement("li", { className: clsx_m_default(styles_css_default25.category, styles_css_default25[`variant-${variant}`], styles_css_default25.expandable, {
    [styles_css_default25.expanded]: expanded,
    [styles_css_default25.disabled]: disabled,
    [styles_css_default25.highlighted]: highlighted
  }), role: "presentation", "data-testid": item.id, ref, onClick, onMouseEnter: onHover, onTouchStart: onHover }, content);
};
var expandable_category_element_default = ExpandableCategoryElement;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/mobile-expandable-category-element.js
var import_react86 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/mobile-expandable-group.js
var import_react85 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/styles.scoped.css";
var styles_css_default26 = {
  "root": "awsui_root_14cnr_39y7l_145",
  "trigger": "awsui_trigger_14cnr_39y7l_179",
  "dropdown": "awsui_dropdown_14cnr_39y7l_182",
  "nowrap": "awsui_nowrap_14cnr_39y7l_193",
  "open": "awsui_open_14cnr_39y7l_196"
};

// node_modules/@cloudscape-design/components/button-dropdown/mobile-expandable-group/mobile-expandable-group.js
var MobileExpandableGroup = ({ children: children2, trigger, open }) => {
  return import_react85.default.createElement(
    "div",
    { className: styles_css_default26.root },
    import_react85.default.createElement("div", { className: styles_css_default26.trigger }, trigger),
    import_react85.default.createElement("div", { className: clsx_m_default(styles_css_default26.dropdown, { [styles_css_default26.open]: open }), "data-open": open }, children2)
  );
};
var mobile_expandable_group_default = MobileExpandableGroup;

// node_modules/@cloudscape-design/components/button-dropdown/category-elements/mobile-expandable-category-element.js
var MobileExpandableCategoryElement = ({ item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, disabled, variant, position }) => {
  const highlighted = isHighlighted(item);
  const expanded = isExpanded(item);
  const isKeyboardHighlighted = isKeyboardHighlight(item);
  const triggerRef = import_react86.default.useRef(null);
  (0, import_react86.useEffect)(() => {
    if (triggerRef.current && highlighted && !expanded) {
      triggerRef.current.focus();
    }
  }, [expanded, highlighted]);
  const onClick = (e3) => {
    if (!disabled) {
      e3.preventDefault();
      onGroupToggle(item, e3);
    }
  };
  const onHover = () => {
    highlightItem(item);
  };
  const isDisabledWithReason = !!item.disabledReason && item.disabled;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const trigger = item.text && import_react86.default.createElement(
    "span",
    Object.assign({
      className: clsx_m_default(styles_css_default25.header, styles_css_default25["expandable-header"], styles_css_default25[`variant-${variant}`], {
        [styles_css_default25.highlighted]: highlighted,
        [styles_css_default25["rolled-down"]]: expanded,
        [styles_css_default25.disabled]: disabled,
        [styles_css_default25["is-focused"]]: isKeyboardHighlighted
      }),
      // We are using the roving tabindex technique to manage the focus state of the dropdown.
      // The current element will always have tabindex=0 which means that it can be tabbed to,
      // while all other items have tabindex=-1 so we can focus them when necessary.
      tabIndex: highlighted ? 0 : -1,
      ref: triggerRef
    }, getMenuItemProps({ parent: true, disabled, expanded }), isDisabledWithReason ? targetProps : {}, getAnalyticsMetadataAttribute(disabled ? {} : {
      action: "expand",
      detail: {
        position: position || "0",
        label: { root: "self" },
        id: item.id || "",
        expanded: `${!expanded}`
      }
    })),
    (item.iconName || item.iconUrl || item.iconSvg) && import_react86.default.createElement(
      "span",
      { className: styles_css_default25["icon-wrapper"] },
      import_react86.default.createElement(internal_default, { name: item.iconName, url: item.iconUrl, svg: item.iconSvg, alt: item.iconAlt })
    ),
    item.text,
    import_react86.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default25["expand-icon"], {
        [styles_css_default25["expand-icon-up"]]: expanded
      }) },
      import_react86.default.createElement(internal_default, { name: "caret-down-filled" })
    )
  );
  let content;
  if (isDisabledWithReason) {
    content = import_react86.default.createElement(
      import_react86.default.Fragment,
      null,
      descriptionEl,
      import_react86.default.createElement(Tooltip2, { content: item.disabledReason }, trigger)
    );
  } else if (disabled) {
    content = trigger;
  } else {
    content = import_react86.default.createElement(mobile_expandable_group_default, { open: expanded, trigger }, item.items && expanded && import_react86.default.createElement(
      "ul",
      { role: "menu", "aria-label": item.text, className: styles_css_default25["items-list-container"] },
      import_react86.default.createElement(ItemsList, { items: item.items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, hasCategoryHeader: true, variant, position })
    ));
  }
  return import_react86.default.createElement("li", { className: clsx_m_default(styles_css_default25.category, styles_css_default25[`variant-${variant}`], styles_css_default25.expandable, {
    [styles_css_default25.expanded]: expanded,
    [styles_css_default25.disabled]: disabled,
    [styles_css_default25.highlighted]: highlighted || expanded,
    [styles_css_default25.expandable]: true
  }), role: "presentation", onClick, onMouseEnter: onHover, onTouchStart: onHover, "data-testid": item.id }, content);
};
var mobile_expandable_category_element_default = MobileExpandableCategoryElement;

// node_modules/@cloudscape-design/components/button-dropdown/item-element/index.js
var import_react87 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/utils/create-items-tree.js
function createItemsTree(items) {
  const itemToIndex = /* @__PURE__ */ new Map();
  const indexToItem = /* @__PURE__ */ new Map();
  const flatIndices = [];
  traverseItems(items, (item, index) => {
    const indexKey = stringifyIndex(index);
    itemToIndex.set(item, indexKey);
    indexToItem.set(indexKey, item);
    flatIndices.push(indexKey);
  });
  return {
    getItem: (index) => {
      const indexKey = stringifyIndex(index);
      return indexToItem.get(indexKey) || null;
    },
    getItemIndex: (item) => {
      const indexKey = itemToIndex.get(item);
      if (!indexKey) {
        throw new Error("Invariant violation: item is not found.");
      }
      return parseIndex(indexKey);
    },
    getSequentialIndex: (index, direction, loop = false) => {
      const indexKey = stringifyIndex(index);
      const position = flatIndices.indexOf(indexKey);
      let nextIndex = position + direction;
      if (loop) {
        if (nextIndex < 0) {
          nextIndex = flatIndices.length - 1;
        } else if (nextIndex >= flatIndices.length) {
          nextIndex = 0;
        }
      }
      const nextIndexKey = flatIndices[nextIndex];
      if (!nextIndexKey) {
        return null;
      }
      return parseIndex(nextIndexKey);
    },
    getParentIndex: (item) => {
      const indexKey = itemToIndex.get(item);
      if (!indexKey) {
        throw new Error("Invariant violation: item is not found.");
      }
      const index = parseIndex(indexKey);
      if (index.length === 1) {
        return null;
      }
      return index.slice(0, index.length - 1);
    }
  };
}
function traverseItems(items, act, parentIndex = []) {
  items.forEach((item, index) => {
    const itemIndex = [...parentIndex, index];
    act(item, itemIndex);
    if (isItemGroup(item)) {
      traverseItems(item.items, act, itemIndex);
    }
  });
}
function stringifyIndex(index) {
  return index.join("-");
}
function parseIndex(index) {
  return index.split("-").map((it) => parseInt(it));
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/utils.js
var isItemGroup = (item) => item && item.items !== void 0;
var isLinkItem = (item) => item && item.href !== void 0;
var isCheckboxItem = (item) => item && item.itemType === "checkbox";
var getItemTarget = (item) => item.external ? "_blank" : void 0;
function indexIncludes(source, target) {
  for (let index = 0; index < source.length; index++) {
    if (source[index] !== target[index]) {
      return false;
    }
  }
  return true;
}
function indexEquals(left, right) {
  if (left.length !== right.length) {
    return false;
  }
  for (let index = 0; index < left.length; index++) {
    if (left[index] !== right[index]) {
      return false;
    }
  }
  return true;
}
function hasCheckboxItems(items) {
  let hasCheckboxItems2 = false;
  traverseItems(items, (item) => {
    if (item.itemType === "checkbox") {
      hasCheckboxItems2 = true;
    }
  });
  return hasCheckboxItems2;
}
function hasDisabledReasonItems(items) {
  let hasDisabledReasons = false;
  traverseItems(items, (item) => {
    if (item.disabledReason) {
      hasDisabledReasons = true;
    }
  });
  return hasDisabledReasons;
}

// node_modules/@cloudscape-design/components/button-dropdown/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/button-dropdown/analytics-metadata/styles.scoped.css";
var styles_css_default27 = {
  "trigger-label": "awsui_trigger-label_q2oen_w271r_5",
  "menu-item": "awsui_menu-item_q2oen_w271r_6",
  "main-action-label": "awsui_main-action-label_q2oen_w271r_7"
};

// node_modules/@cloudscape-design/components/button-dropdown/item-element/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/button-dropdown/item-element/styles.scoped.css";
var styles_css_default28 = {
  "item-element": "awsui_item-element_93a1u_1k4cs_145",
  "disabled": "awsui_disabled_93a1u_1k4cs_157",
  "show-divider": "awsui_show-divider_93a1u_1k4cs_164",
  "highlighted": "awsui_highlighted_93a1u_1k4cs_167",
  "is-focused": "awsui_is-focused_93a1u_1k4cs_182",
  "visual-refresh": "awsui_visual-refresh_93a1u_1k4cs_185",
  "menu-item": "awsui_menu-item_93a1u_1k4cs_189",
  "link-style": "awsui_link-style_93a1u_1k4cs_201",
  "current-breadcrumb": "awsui_current-breadcrumb_93a1u_1k4cs_237",
  "link-style-highlighted": "awsui_link-style-highlighted_93a1u_1k4cs_245",
  "has-category-header": "awsui_has-category-header_93a1u_1k4cs_251",
  "item-tooltip-wrapper": "awsui_item-tooltip-wrapper_93a1u_1k4cs_251",
  "has-checkmark": "awsui_has-checkmark_93a1u_1k4cs_251",
  "icon": "awsui_icon_93a1u_1k4cs_255",
  "checkmark": "awsui_checkmark_93a1u_1k4cs_259",
  "external-icon": "awsui_external-icon_93a1u_1k4cs_266"
};

// node_modules/@cloudscape-design/components/button-dropdown/item-element/index.js
var ItemElement = ({ position = "1", item, disabled, onItemActivate, highlighted, highlightItem, showDivider, hasCategoryHeader, isKeyboardHighlighted = false, analyticsMetadataTransformer = (metadata) => metadata, variant = "normal", linkStyle }) => {
  const isLink = isLinkItem(item);
  const isCheckbox = isCheckboxItem(item);
  const onClick = (event) => {
    event.stopPropagation();
    if (!isLink) {
      event.preventDefault();
    }
    if (!disabled) {
      onItemActivate(item, event);
    }
  };
  const onHover = () => {
    highlightItem(item);
  };
  const isVisualRefresh = useVisualRefresh();
  return import_react87.default.createElement(
    "li",
    Object.assign({ className: clsx_m_default(styles_css_default28["item-element"], styles_css_default28[`variant-${variant}`], {
      [styles_css_default28.highlighted]: highlighted,
      [styles_css_default28.disabled]: disabled,
      [styles_css_default28["has-category-header"]]: hasCategoryHeader,
      [styles_css_default28["has-checkmark"]]: isCheckbox,
      [styles_css_default28["show-divider"]]: showDivider,
      [styles_css_default28["is-focused"]]: isKeyboardHighlighted,
      [styles_css_default28["visual-refresh"]]: isVisualRefresh
    }), role: "presentation", "data-testid": item.id, "data-description": item.description, onClick, onMouseEnter: onHover, onTouchStart: onHover }, getAnalyticsMetadataAttribute(disabled ? {} : analyticsMetadataTransformer({
      action: "click",
      detail: {
        position,
        id: item.id,
        label: `.${styles_css_default27["menu-item"]}`,
        href: item.href || ""
      }
    }))),
    import_react87.default.createElement(MenuItem, { item, disabled, highlighted, linkStyle })
  );
};
function MenuItem({ item, disabled, highlighted, linkStyle }) {
  const menuItemRef = (0, import_react87.useRef)(null);
  const isCheckbox = isCheckboxItem(item);
  const isCurrentBreadcrumb = !isCheckbox && item.isCurrentBreadcrumb;
  (0, import_react87.useEffect)(() => {
    if (highlighted && menuItemRef.current) {
      menuItemRef.current.focus();
    }
  }, [highlighted]);
  const isDisabledWithReason = disabled && item.disabledReason;
  const { targetProps, descriptionEl } = useHiddenDescription(item.disabledReason);
  const menuItemProps = Object.assign(Object.assign({
    "aria-label": item.ariaLabel,
    className: clsx_m_default(styles_css_default28["menu-item"], styles_css_default27["menu-item"], linkStyle && styles_css_default28["link-style"], linkStyle && highlighted && styles_css_default28["link-style-highlighted"], isCurrentBreadcrumb && styles_css_default28["current-breadcrumb"]),
    "aria-current": isCurrentBreadcrumb,
    lang: item.lang,
    ref: menuItemRef,
    // We are using the roving tabindex technique to manage the focus state of the dropdown.
    // The current element will always have tabindex=0 which means that it can be tabbed to,
    // while all other items have tabindex=-1 so we can focus them when necessary.
    tabIndex: highlighted ? 0 : -1
  }, isCheckbox ? getMenuItemCheckboxProps({ disabled, checked: item.checked }) : getMenuItemProps({ disabled })), isDisabledWithReason ? targetProps : {});
  const menuItem = isLinkItem(item) ? import_react87.default.createElement(
    "a",
    Object.assign({}, menuItemProps, { href: !disabled ? item.href : void 0, target: getItemTarget(item), rel: item.external ? "noopener noreferrer" : void 0 }),
    import_react87.default.createElement(MenuItemContent, { item, disabled })
  ) : import_react87.default.createElement(
    "span",
    Object.assign({}, menuItemProps),
    import_react87.default.createElement(MenuItemContent, { item, disabled })
  );
  const { position } = useDropdownContext();
  const tooltipPosition = position === "bottom-left" || position === "top-left" ? "left" : "right";
  return isDisabledWithReason ? import_react87.default.createElement(
    Tooltip2,
    { content: item.disabledReason, position: tooltipPosition, className: styles_css_default28["item-tooltip-wrapper"] },
    menuItem,
    descriptionEl
  ) : menuItem;
}
var MenuItemContent = ({ item, disabled }) => {
  const hasIcon = !!(item.iconName || item.iconUrl || item.iconSvg);
  const hasExternal = isLinkItem(item) && item.external;
  const isCheckbox = isCheckboxItem(item);
  return import_react87.default.createElement(
    import_react87.default.Fragment,
    null,
    isCheckbox && import_react87.default.createElement(MenuItemCheckmark, { checked: item.checked, disabled }),
    hasIcon && import_react87.default.createElement(MenuItemIcon, { name: item.iconName, url: item.iconUrl, svg: item.iconSvg, alt: item.iconAlt, badge: item.badge }),
    item.text,
    hasExternal && import_react87.default.createElement(ExternalIcon, { disabled, ariaLabel: item.externalIconAriaLabel })
  );
};
var MenuItemIcon = (props2) => import_react87.default.createElement(
  "span",
  { className: styles_css_default28.icon },
  import_react87.default.createElement(internal_default, Object.assign({}, props2))
);
var MenuItemCheckmark = ({ disabled, checked }) => {
  const checkmark = import_react87.default.createElement(internal_default, { variant: disabled ? "disabled" : "normal", name: "check" });
  return import_react87.default.createElement("span", { className: clsx_m_default(styles_css_default28.icon, styles_css_default28.checkmark, { [styles_css_default28.disabled]: disabled }), "aria-hidden": "true", style: { visibility: checked ? "visible" : "hidden" } }, checkmark);
};
var ExternalIcon = ({ disabled, ariaLabel }) => {
  const icon = import_react87.default.createElement(internal_default, { variant: disabled ? "disabled" : "normal", name: "external" });
  return import_react87.default.createElement("span", { className: styles_css_default28["external-icon"], role: ariaLabel ? "img" : void 0, "aria-label": ariaLabel }, icon);
};
var item_element_default = ItemElement;

// node_modules/@cloudscape-design/components/button-dropdown/items-list.js
function ItemsList({ items, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown, highlightItem, categoryDisabled = false, hasExpandableGroups = false, hasCategoryHeader = false, expandToViewport = false, variant = "normal", analyticsMetadataTransformer, position, linkStyle }) {
  const isMobile = useMobile();
  const elements = items.map((item, index) => {
    var _a2, _b, _c, _d;
    if (!isItemGroup(item)) {
      const showDivider = index === items.length - 1 && !lastInDropdown || isItemGroup(items[index + 1]);
      return import_react88.default.createElement(item_element_default, { key: index, item, onItemActivate, disabled: (_a2 = item.disabled) !== null && _a2 !== void 0 ? _a2 : categoryDisabled, highlighted: isHighlighted(item), isKeyboardHighlighted: isKeyboardHighlight(item), highlightItem, showDivider, hasCategoryHeader, variant, position: `${position ? `${position},` : ""}${index + 1}`, analyticsMetadataTransformer, linkStyle });
    }
    if (hasExpandableGroups) {
      return item.text ? isMobile ? import_react88.default.createElement(mobile_expandable_category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: lastInDropdown && index === items.length - 1, highlightItem, disabled: (_b = item.disabled) !== null && _b !== void 0 ? _b : false, variant, position: `${position ? `${position},` : ""}${index + 1}` }) : import_react88.default.createElement(expandable_category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: true, highlightItem, disabled: (_c = item.disabled) !== null && _c !== void 0 ? _c : false, expandToViewport, variant, position: `${position ? `${position},` : ""}${index + 1}` }) : null;
    }
    return import_react88.default.createElement(category_element_default, { key: index, item, onItemActivate, onGroupToggle, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: lastInDropdown && index === items.length - 1, highlightItem, disabled: (_d = item.disabled) !== null && _d !== void 0 ? _d : false, variant, position: `${position ? `${position},` : ""}${index + 1}` });
  });
  return import_react88.default.createElement(import_react88.default.Fragment, null, elements);
}

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-open-state.js
var import_react89 = __toESM(require_react());
var useOpenState = ({ onOpen, onClose, defaultOpen = false }) => {
  const [isOpen, setIsOpen] = (0, import_react89.useState)(defaultOpen);
  const [openedWithKeyboard, setOpenedWithKeyboard] = (0, import_react89.useState)(false);
  const openDropdown = (isKeyboard) => {
    if (!isOpen) {
      setIsOpen(true);
      setOpenedWithKeyboard(!!isKeyboard);
      onOpen === null || onOpen === void 0 ? void 0 : onOpen();
    }
  };
  const closeDropdown = () => {
    if (isOpen) {
      setIsOpen(false);
      onClose === null || onClose === void 0 ? void 0 : onClose();
    }
  };
  const toggleDropdown = () => {
    if (isOpen) {
      closeDropdown();
    } else {
      openDropdown(false);
    }
  };
  return { isOpen, openDropdown, closeDropdown, toggleDropdown, openedWithKeyboard };
};

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-highlighted-menu.js
var import_react90 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/utils/move-highlight.js
function moveHighlight({ startIndex, expandedIndex, getNext, hasExpandableGroups, isInRestrictedView }) {
  const tryMove = (currentIndex) => {
    var _a2;
    const next = getNext(currentIndex);
    if (!next) {
      return null;
    }
    if (((_a2 = next.parent) === null || _a2 === void 0 ? void 0 : _a2.disabled) && hasExpandableGroups) {
      return tryMove(next.index);
    }
    if (isItemGroup(next.item) && !hasExpandableGroups) {
      return tryMove(next.index);
    }
    if (hasExpandableGroups && !isInRestrictedView && !isSameParent(startIndex, next.index)) {
      return tryMove(next.index);
    }
    if (hasExpandableGroups && isInRestrictedView && !isSameLevel(next.index, expandedIndex) && !isIncluded(expandedIndex, next.index)) {
      return tryMove(next.index);
    }
    return next.index;
  };
  return tryMove(startIndex);
}
function isSameParent(left, right) {
  return indexEquals(left.slice(0, -1), right.slice(0, -1));
}
function isSameLevel(left, right) {
  return left.length === right.length;
}
function isIncluded(parent, child) {
  return indexEquals(parent, child.slice(0, -1));
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-highlighted-menu.js
function useHighlightedMenu({ items, hasExpandableGroups, isInRestrictedView = false }) {
  const [targetIndex, setTargetIndex] = (0, import_react90.useState)([]);
  const [expandedIndex, setExpandedIndex] = (0, import_react90.useState)([]);
  const [isUsingMouse, setIsUsingMouse] = (0, import_react90.useState)(true);
  const { getItem, getItemIndex: getItemIndex2, getSequentialIndex, getParentIndex } = (0, import_react90.useMemo)(() => createItemsTree(items), [items]);
  const targetItem = (0, import_react90.useMemo)(() => getItem(targetIndex), [targetIndex, getItem]);
  const isHighlighted = (0, import_react90.useCallback)((item) => {
    const index = getItemIndex2(item);
    return indexIncludes(index, targetIndex);
  }, [targetIndex, getItemIndex2]);
  const isKeyboardHighlight = (0, import_react90.useCallback)((item) => {
    const index = getItemIndex2(item);
    return !isUsingMouse && indexEquals(index, targetIndex);
  }, [targetIndex, getItemIndex2, isUsingMouse]);
  const isExpanded = (0, import_react90.useCallback)((group) => {
    const index = getItemIndex2(group);
    return indexIncludes(index, expandedIndex);
  }, [expandedIndex, getItemIndex2]);
  const moveHighlight2 = (0, import_react90.useCallback)((direction, loop) => {
    const getNext = (index) => {
      const nextIndex2 = getSequentialIndex(index, direction, loop);
      const item = getItem(nextIndex2 || [-1]);
      if (!nextIndex2 || !item) {
        return null;
      }
      const parentIndex = getParentIndex(item);
      const parentItem = parentIndex && getItem(parentIndex);
      return { index: nextIndex2, item, parent: parentItem || void 0 };
    };
    const nextIndex = moveHighlight({
      startIndex: targetIndex,
      expandedIndex,
      getNext,
      hasExpandableGroups,
      isInRestrictedView
    });
    if (nextIndex) {
      setTargetIndex(nextIndex);
    }
  }, [targetIndex, expandedIndex, getItem, getSequentialIndex, getParentIndex, hasExpandableGroups, isInRestrictedView]);
  const highlightItem = (0, import_react90.useCallback)((item) => {
    setTargetIndex(getItemIndex2(item));
  }, [getItemIndex2]);
  const expandGroup = (0, import_react90.useCallback)((group) => {
    const groupIndex = group ? getItemIndex2(group) : targetIndex;
    const firstChildIndex = [...groupIndex, 0];
    setTargetIndex(isInRestrictedView ? groupIndex : firstChildIndex);
    setExpandedIndex(groupIndex);
  }, [targetIndex, getItemIndex2, isInRestrictedView]);
  const collapseGroup = (0, import_react90.useCallback)(() => {
    if (expandedIndex.length > 0) {
      setTargetIndex(expandedIndex);
      setExpandedIndex(expandedIndex.slice(0, -1));
    }
  }, [expandedIndex]);
  const reset = (0, import_react90.useCallback)(() => {
    setTargetIndex([]);
    setExpandedIndex([]);
  }, []);
  return {
    targetItem,
    isHighlighted,
    isKeyboardHighlight,
    isExpanded,
    moveHighlight: moveHighlight2,
    highlightItem,
    expandGroup,
    collapseGroup,
    reset,
    setIsUsingMouse
  };
}

// node_modules/@cloudscape-design/components/button-dropdown/utils/use-button-dropdown.js
function useButtonDropdown({ items, onItemClick, onItemFollow, onReturnFocus, hasExpandableGroups, isInRestrictedView = false, expandToViewport = false }) {
  const { targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, moveHighlight: moveHighlight2, expandGroup, collapseGroup, reset, setIsUsingMouse } = useHighlightedMenu({
    items,
    hasExpandableGroups,
    isInRestrictedView
  });
  const _a2 = useOpenState({ onClose: reset }), { isOpen, closeDropdown } = _a2, openStateProps = __rest(_a2, ["isOpen", "closeDropdown"]);
  const toggleDropdown = (options = {}) => {
    var _a3;
    const moveHighlightOnOpen = (_a3 = options.moveHighlightOnOpen) !== null && _a3 !== void 0 ? _a3 : true;
    if (!isOpen && moveHighlightOnOpen) {
      moveHighlight2(1);
    }
    openStateProps.toggleDropdown();
  };
  const onGroupToggle = (item) => !isExpanded(item) ? expandGroup(item) : collapseGroup();
  const onItemActivate = (item, event) => {
    const isCheckbox = isCheckboxItem(item);
    const isLink = isLinkItem(item);
    const details = {
      id: item.id || "undefined",
      href: isLink ? item.href : void 0,
      external: isLink ? item.external : void 0,
      target: isLink ? getItemTarget(item) : void 0,
      checked: isCheckbox ? !item.checked : void 0
    };
    onReturnFocus();
    if (onItemFollow && isLink && isPlainLeftClick(event)) {
      fireCancelableEvent(onItemFollow, details, event);
    }
    if (onItemClick) {
      fireCancelableEvent(onItemClick, details, event);
    }
    closeDropdown();
  };
  const openAndSelectFirst = (event) => {
    toggleDropdown();
    event.preventDefault();
  };
  const actOnParentDropdown = (event) => {
    if (!targetItem) {
      if (isOpen && !isInRestrictedView) {
        toggleDropdown();
      } else {
        openAndSelectFirst(event);
      }
    } else {
      if (isItemGroup(targetItem)) {
        onGroupToggle(targetItem, event);
      } else {
        onItemActivate(targetItem, event);
      }
    }
  };
  const activate = (event, isEnter) => {
    setIsUsingMouse(false);
    if (targetItem && isLinkItem(targetItem) && isEnter) {
      return;
    }
    event.preventDefault();
    actOnParentDropdown(event);
  };
  const onKeyDown = (event) => {
    setIsUsingMouse(false);
    switch (event.keyCode) {
      case KeyCode2.down: {
        if (!isOpen) {
          toggleDropdown();
          moveHighlight2(1, true);
        } else {
          moveHighlight2(1);
        }
        event.preventDefault();
        break;
      }
      case KeyCode2.up: {
        if (!isOpen) {
          toggleDropdown();
          moveHighlight2(-1, true);
        } else {
          moveHighlight2(-1);
        }
        event.preventDefault();
        break;
      }
      case KeyCode2.space: {
        event.preventDefault();
        break;
      }
      case KeyCode2.enter: {
        if (!(targetItem === null || targetItem === void 0 ? void 0 : targetItem.disabled)) {
          activate(event, true);
        }
        break;
      }
      case KeyCode2.left:
      case KeyCode2.right: {
        if (targetItem && !targetItem.disabled && isItemGroup(targetItem) && !isExpanded(targetItem)) {
          expandGroup();
        } else if (hasExpandableGroups) {
          collapseGroup();
        }
        event.preventDefault();
        break;
      }
      case KeyCode2.escape: {
        onReturnFocus();
        closeDropdown();
        event.preventDefault();
        if (isOpen) {
          event.stopPropagation();
        }
        break;
      }
      case KeyCode2.tab: {
        if (expandToViewport) {
          onReturnFocus();
        }
        closeDropdown();
        break;
      }
    }
  };
  const onKeyUp = (event) => {
    if (event.keyCode === KeyCode2.space && !(targetItem === null || targetItem === void 0 ? void 0 : targetItem.disabled)) {
      activate(event);
    }
  };
  return {
    isOpen,
    targetItem,
    isHighlighted,
    isKeyboardHighlight,
    isExpanded,
    highlightItem,
    onKeyDown,
    onKeyUp,
    onItemActivate,
    onGroupToggle,
    toggleDropdown,
    closeDropdown,
    setIsUsingMouse
  };
}

// node_modules/@cloudscape-design/components/button-dropdown/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/button-dropdown/styles.scoped.css";
var styles_css_default29 = {
  "button-dropdown": "awsui_button-dropdown_sne0l_ncm5v_145",
  "full-width": "awsui_full-width_sne0l_ncm5v_148",
  "items-list-container": "awsui_items-list-container_sne0l_ncm5v_153",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_sne0l_ncm5v_1",
  "rotate": "awsui_rotate_sne0l_ncm5v_172",
  "rotate-open": "awsui_rotate-open_sne0l_ncm5v_186",
  "header": "awsui_header_sne0l_ncm5v_190",
  "title": "awsui_title_sne0l_ncm5v_201",
  "description": "awsui_description_sne0l_ncm5v_202",
  "trigger-button": "awsui_trigger-button_sne0l_ncm5v_206",
  "loading": "awsui_loading_sne0l_ncm5v_210",
  "split-trigger-wrapper": "awsui_split-trigger-wrapper_sne0l_ncm5v_214",
  "trigger-item": "awsui_trigger-item_sne0l_ncm5v_217",
  "has-no-text": "awsui_has-no-text_sne0l_ncm5v_226",
  "visual-refresh": "awsui_visual-refresh_sne0l_ncm5v_229",
  "variant-normal": "awsui_variant-normal_sne0l_ncm5v_240",
  "split-trigger": "awsui_split-trigger_sne0l_ncm5v_214",
  "dropdown-trigger": "awsui_dropdown-trigger_sne0l_ncm5v_251",
  "main-action-full-width": "awsui_main-action-full-width_sne0l_ncm5v_255",
  "main-action-trigger-full-width": "awsui_main-action-trigger-full-width_sne0l_ncm5v_259",
  "test-utils-button-trigger": "awsui_test-utils-button-trigger_sne0l_ncm5v_263"
};

// node_modules/@cloudscape-design/components/button-dropdown/internal.js
var InternalButtonDropdown = import_react91.default.forwardRef((_a2, ref) => {
  var _b;
  var { items, variant = "normal", loading = false, loadingText, disabled = false, disabledReason, expandableGroups = false, children: children2, onItemClick, onItemFollow, customTriggerBuilder, expandToViewport, ariaLabel, title, description, preferCenter, mainAction, showMainActionOnly, __internalRootRef, analyticsMetadataTransformer, linkStyle, fullWidth, position, nativeMainActionAttributes, nativeTriggerAttributes } = _a2, props2 = __rest(_a2, ["items", "variant", "loading", "loadingText", "disabled", "disabledReason", "expandableGroups", "children", "onItemClick", "onItemFollow", "customTriggerBuilder", "expandToViewport", "ariaLabel", "title", "description", "preferCenter", "mainAction", "showMainActionOnly", "__internalRootRef", "analyticsMetadataTransformer", "linkStyle", "fullWidth", "position", "nativeMainActionAttributes", "nativeTriggerAttributes"]);
  const isInRestrictedView = useMobile();
  const dropdownId = useUniqueId("dropdown");
  for (const item of items) {
    if (isLinkItem(item)) {
      checkSafeUrl("ButtonDropdown", item.href);
    }
  }
  if (mainAction) {
    checkSafeUrl("ButtonDropdown", mainAction.href);
  }
  if (isDevelopment2) {
    if (mainAction && variant !== "primary" && variant !== "normal") {
      warnOnce("ButtonDropdown", 'Main action is only supported for "primary" and "normal" component variant.');
    }
  }
  const hasMainAction = mainAction && (variant === "primary" || variant === "normal");
  const isVisualRefresh = useVisualRefresh();
  const { isOpen, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, highlightItem, onKeyDown, onKeyUp, onItemActivate, onGroupToggle, toggleDropdown, closeDropdown, setIsUsingMouse } = useButtonDropdown({
    items,
    onItemClick,
    onItemFollow,
    // Scroll is unnecessary when moving focus back to the dropdown trigger.
    onReturnFocus: () => {
      var _a3;
      return (_a3 = triggerRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus({ preventScroll: true });
    },
    expandToViewport,
    hasExpandableGroups: expandableGroups,
    isInRestrictedView
  });
  const handleMouseEvent = () => {
    setIsUsingMouse(true);
  };
  const baseProps = getBaseProps(props2);
  const mainActionRef = (0, import_react91.useRef)(null);
  const triggerRef = (0, import_react91.useRef)(null);
  (0, import_react91.useImperativeHandle)(ref, () => ({
    focus(...args) {
      var _a3;
      (_a3 = (hasMainAction ? mainActionRef : triggerRef).current) === null || _a3 === void 0 ? void 0 : _a3.focus(...args);
    },
    focusDropdownTrigger(...args) {
      var _a3;
      (_a3 = triggerRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus(...args);
    }
  }), [mainActionRef, triggerRef, hasMainAction]);
  const clickHandler = () => {
    if (!loading && !disabled) {
      toggleDropdown({ moveHighlightOnOpen: !isInRestrictedView });
    }
  };
  const canBeOpened = !loading && !disabled;
  const canBeFullWidth = !!fullWidth && (variant === "primary" || variant === "normal");
  const triggerVariant = variant === "navigation" ? void 0 : variant === "inline-icon" ? "inline-icon" : variant;
  const iconProps = variant === "icon" || variant === "inline-icon" ? {
    iconName: "ellipsis"
  } : {
    iconName: "caret-down-filled",
    iconAlign: "right",
    __iconClass: spinWhenOpen(styles_css_default29, "rotate", canBeOpened && isOpen)
  };
  const baseTriggerProps = Object.assign(Object.assign({ className: clsx_m_default(styles_css_default29["trigger-button"], styles_css_default29["test-utils-button-trigger"], styles_css_default27["trigger-label"]) }, iconProps), {
    variant: triggerVariant,
    loading,
    loadingText,
    disabled,
    disabledReason,
    onClick: (event) => {
      event.preventDefault();
      clickHandler();
    },
    ariaLabel,
    ariaExpanded: canBeOpened && isOpen,
    formAction: "none",
    nativeButtonAttributes: Object.assign({ "aria-haspopup": true }, nativeTriggerAttributes)
  });
  const triggerId = useUniqueId("awsui-button-dropdown__trigger");
  const triggerHasBadge = () => {
    const flatItems = items.flatMap((item) => {
      if ("items" in item) {
        return item.items;
      }
      return item;
    });
    return variant === "icon" && !!(flatItems === null || flatItems === void 0 ? void 0 : flatItems.find((item) => {
      if ("badge" in item) {
        return item.badge;
      }
    }));
  };
  let trigger = null;
  const analyticsMetadata = disabled ? {} : {
    action: !isOpen ? "expand" : "collapse",
    detail: {
      label: `.${styles_css_default27["trigger-label"]}`
    }
  };
  if (customTriggerBuilder) {
    trigger = import_react91.default.createElement("div", Object.assign({ className: styles_css_default29["dropdown-trigger"] }, getAnalyticsMetadataAttribute(analyticsMetadata)), customTriggerBuilder({
      testUtilsClass: styles_css_default29["test-utils-button-trigger"],
      ariaExpanded: canBeOpened && isOpen,
      onClick: clickHandler,
      triggerRef,
      ariaLabel,
      disabled,
      disabledReason,
      isOpen
    }));
  } else if (hasMainAction) {
    const { text, iconName, iconAlt, iconSvg, iconUrl, external, externalIconAriaLabel } = mainAction, mainActionProps = __rest(mainAction, ["text", "iconName", "iconAlt", "iconSvg", "iconUrl", "external", "externalIconAriaLabel"]);
    const mainActionIconProps = external ? { iconName: "external", iconAlign: "right", target: "_blank", rel: "noopener noreferrer" } : { iconName, iconAlt, iconSvg, iconUrl };
    const mainActionAriaLabel = externalIconAriaLabel ? `${(_b = mainAction.ariaLabel) !== null && _b !== void 0 ? _b : mainAction.text} ${mainAction.externalIconAriaLabel}` : mainAction.ariaLabel;
    const hasNoText = !text;
    const mainActionButton = import_react91.default.createElement(InternalButton, Object.assign({ ref: mainActionRef }, mainActionProps, mainActionIconProps, { fullWidth: canBeFullWidth, className: clsx_m_default(styles_css_default29["trigger-button"], hasNoText && styles_css_default29["has-no-text"], isVisualRefresh && styles_css_default29["visual-refresh"], canBeFullWidth && styles_css_default29["main-action-full-width"]), variant, ariaLabel: mainActionAriaLabel, formAction: "none", nativeAnchorAttributes: nativeMainActionAttributes === null || nativeMainActionAttributes === void 0 ? void 0 : nativeMainActionAttributes.anchor, nativeButtonAttributes: nativeMainActionAttributes === null || nativeMainActionAttributes === void 0 ? void 0 : nativeMainActionAttributes.button }), text);
    trigger = import_react91.default.createElement(
      "div",
      { role: "group", "aria-label": ariaLabel, className: styles_css_default29["split-trigger-wrapper"] },
      import_react91.default.createElement("div", Object.assign({
        className: clsx_m_default(styles_css_default29["trigger-item"], styles_css_default29["split-trigger"], styles_css_default29[`variant-${variant}`], mainActionProps.loading && styles_css_default29.loading),
        // Close dropdown upon main action click unless event is cancelled.
        onClick: closeDropdown,
        // Prevent keyboard events from propagation to the button dropdown handler.
        onKeyDown: (e3) => e3.stopPropagation(),
        onKeyUp: (e3) => e3.stopPropagation()
      }, getAnalyticsMetadataAttribute({
        action: "click",
        detail: {
          label: `.${styles_css_default27["main-action-label"]}`
        }
      })), mainActionButton),
      !showMainActionOnly && import_react91.default.createElement(
        "div",
        Object.assign({ className: clsx_m_default(styles_css_default29["trigger-item"], styles_css_default29["dropdown-trigger"], isVisualRefresh && styles_css_default29["visual-refresh"], styles_css_default29[`variant-${variant}`], baseTriggerProps.loading && styles_css_default29.loading) }, getAnalyticsMetadataAttribute(analyticsMetadata)),
        import_react91.default.createElement(InternalButton, Object.assign({ ref: triggerRef }, baseTriggerProps, { className: clsx_m_default(baseTriggerProps.className, {
          [styles_css_default29["main-action-trigger-full-width"]]: canBeFullWidth
        }), __emitPerformanceMarks: false }), children2)
      )
    );
  } else {
    trigger = import_react91.default.createElement(
      "div",
      Object.assign({ className: styles_css_default29["dropdown-trigger"] }, getAnalyticsMetadataAttribute(analyticsMetadata)),
      import_react91.default.createElement(InternalButton, Object.assign({ ref: triggerRef, id: triggerId }, baseTriggerProps, { className: clsx_m_default(baseTriggerProps.className, {
        [styles_css_default29["full-width"]]: canBeFullWidth,
        [styles_css_default29.loading]: canBeFullWidth && !!loading
      }), badge: triggerHasBadge(), fullWidth }), children2)
    );
  }
  const hasHeader = title || description;
  const headerId = useUniqueId("awsui-button-dropdown__header");
  const shouldLabelWithTrigger = !ariaLabel && !mainAction && variant !== "icon" && variant !== "inline-icon";
  const { loadingButtonCount } = useFunnel();
  (0, import_react91.useEffect)(() => {
    if (loading) {
      loadingButtonCount.current++;
      return () => {
        loadingButtonCount.current--;
      };
    }
  }, [loading, loadingButtonCount]);
  return import_react91.default.createElement(
    "div",
    Object.assign({}, baseProps, { onKeyDown, onKeyUp, onMouseDown: handleMouseEvent, onMouseMove: handleMouseEvent, className: clsx_m_default(styles_css_default29["button-dropdown"], styles_css_default29[`variant-${variant}`], canBeFullWidth && styles_css_default29["full-width"], baseProps.className), "aria-owns": expandToViewport && isOpen ? dropdownId : void 0, ref: __internalRootRef }),
    import_react91.default.createElement(
      dropdown_default,
      { open: canBeOpened && isOpen, stretchWidth: false, stretchTriggerHeight: variant === "navigation", expandToViewport, preferCenter, onDropdownClose: () => toggleDropdown(), trigger, dropdownId },
      hasHeader && import_react91.default.createElement(
        "div",
        { className: styles_css_default29.header, id: headerId },
        title && import_react91.default.createElement(
          "div",
          { className: styles_css_default29.title },
          import_react91.default.createElement(InternalBox, { fontSize: "heading-s", fontWeight: "bold", color: "inherit", tagOverride: "h2", margin: { vertical: "n", horizontal: "n" } }, title)
        ),
        description && import_react91.default.createElement(
          InternalBox,
          { fontSize: "body-s" },
          import_react91.default.createElement("span", { className: styles_css_default29.description }, description)
        )
      ),
      import_react91.default.createElement(
        options_list_default,
        { open: canBeOpened && isOpen, position: "static", role: "menu", tagOverride: "ul", decreaseBlockMargin: true, ariaLabel, ariaLabelledby: hasHeader ? headerId : shouldLabelWithTrigger ? triggerId : void 0, statusType: "finished" },
        import_react91.default.createElement(ItemsList, { items, onItemActivate, onGroupToggle, hasExpandableGroups: expandableGroups, targetItem, isHighlighted, isKeyboardHighlight, isExpanded, lastInDropdown: true, highlightItem, expandToViewport, variant, analyticsMetadataTransformer, linkStyle, position })
      )
    )
  );
});
var internal_default6 = InternalButtonDropdown;

// node_modules/@cloudscape-design/components/app-layout/drawer/overflow-menu.js
var mapDrawerToItem = (drawer, isTypeCheckbox) => ({
  id: drawer.id,
  text: drawer.ariaLabels.drawerName,
  iconName: drawer.trigger.iconName,
  iconSvg: drawer.trigger.iconSvg,
  badge: drawer.badge,
  itemType: isTypeCheckbox ? "checkbox" : void 0,
  checked: drawer.active
});
function OverflowMenu({ items: drawers, onItemClick, customTriggerBuilder, ariaLabel, globalDrawersStartIndex }) {
  const hasGlobalDrawers = globalDrawersStartIndex !== void 0;
  const itemsFlatList = drawers.map((item, index) => mapDrawerToItem(item, hasGlobalDrawers && index >= globalDrawersStartIndex));
  let items;
  if (hasGlobalDrawers) {
    items = [
      { items: itemsFlatList.slice(0, globalDrawersStartIndex) },
      { items: itemsFlatList.slice(globalDrawersStartIndex) }
    ];
  } else {
    items = itemsFlatList;
  }
  return import_react92.default.createElement(internal_default6, { items, className: styles_css_default20["overflow-menu"], onItemClick, ariaLabel, variant: "icon", customTriggerBuilder, expandToViewport: true });
}

// node_modules/@cloudscape-design/components/app-layout/drawer/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/drawer/styles.scoped.css";
var styles_css_default30 = {
  "toggle": "awsui_toggle_1uo6m_o2dyh_193",
  "drawer-triggers": "awsui_drawer-triggers_1uo6m_o2dyh_199",
  "drawer": "awsui_drawer_1uo6m_o2dyh_199",
  "drawer-mobile": "awsui_drawer-mobile_1uo6m_o2dyh_209",
  "drawer-closed": "awsui_drawer-closed_1uo6m_o2dyh_212",
  "drawer-content": "awsui_drawer-content_1uo6m_o2dyh_219",
  "drawer-content-clickable": "awsui_drawer-content-clickable_1uo6m_o2dyh_233",
  "drawer-resize-content": "awsui_drawer-resize-content_1uo6m_o2dyh_243",
  "drawer-content-wrapper": "awsui_drawer-content-wrapper_1uo6m_o2dyh_248",
  "drawer-triggers-wrapper": "awsui_drawer-triggers-wrapper_1uo6m_o2dyh_252",
  "drawer-trigger": "awsui_drawer-trigger_1uo6m_o2dyh_199",
  "drawer-trigger-active": "awsui_drawer-trigger-active_1uo6m_o2dyh_271",
  "resize-handle-wrapper": "awsui_resize-handle-wrapper_1uo6m_o2dyh_279",
  "hide": "awsui_hide_1uo6m_o2dyh_289"
};

// node_modules/@cloudscape-design/components/app-layout/drawer/index.js
var Drawer = import_react93.default.forwardRef(({ id, contentClassName, toggleClassName, closeClassName, width, type, toggleRefs, topOffset, bottomOffset, ariaLabels, children: children2, hideOpenButton, isOpen, isHidden, isMobile, onToggle, onClick, onLoseFocus, resizeHandle }, ref) => {
  const openButtonWrapperRef = (0, import_react93.useRef)(null);
  const { TagName, iconName } = togglesConfig[type];
  const { mainLabel, closeLabel, openLabel } = ariaLabels;
  const drawerContentWidthOpen = isMobile ? void 0 : width;
  const drawerContentWidth = isOpen ? drawerContentWidthOpen : void 0;
  const regularOpenButton = import_react93.default.createElement(
    TagName,
    { ref: openButtonWrapperRef, "aria-label": mainLabel, className: styles_css_default30.toggle, "aria-hidden": isOpen },
    import_react93.default.createElement(ToggleButton, { ref: toggleRefs.toggle, className: toggleClassName, iconName, ariaLabel: openLabel, onClick: () => onToggle(true), ariaExpanded: isOpen ? void 0 : false })
  );
  return import_react93.default.createElement(
    "div",
    { ref, className: clsx_m_default(styles_css_default30.drawer, {
      [styles_css_default30.hide]: isHidden,
      [styles_css_default30["drawer-closed"]]: !isOpen,
      [styles_css_default30["drawer-mobile"]]: isMobile
    }), style: { width: drawerContentWidth }, onBlur: onLoseFocus ? (e3) => {
      if (!e3.relatedTarget || !e3.currentTarget.contains(e3.relatedTarget)) {
        onLoseFocus(e3);
      }
    } : void 0, onClick: (event) => {
      var _a2;
      if (onClick) {
        onClick(event);
      }
      if (!isOpen) {
        if (openButtonWrapperRef.current === event.target || !((_a2 = openButtonWrapperRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target))) {
          onToggle(true);
        }
      }
    } },
    import_react93.default.createElement(
      "div",
      { id, style: { width: drawerContentWidth, top: topOffset, bottom: bottomOffset }, className: clsx_m_default(styles_css_default30["drawer-content"], styles_css_default30["drawer-content-clickable"], contentClassName, {
        [styles_css_default20["drawer-closed"]]: !isOpen
      }) },
      !isMobile && !hideOpenButton && regularOpenButton,
      import_react93.default.createElement(
        TagName,
        { className: clsx_m_default(resizeHandle && styles_css_default30["drawer-resize-content"], styles_css_default30["drawer-content-wrapper"]), "aria-label": mainLabel, "aria-hidden": !isOpen, style: {
          blockSize: `calc(100vh - ${(topOffset || 0) + (bottomOffset || 0)}px)`
        } },
        !isMobile && isOpen && import_react93.default.createElement("div", { className: styles_css_default30["resize-handle-wrapper"] }, resizeHandle),
        import_react93.default.createElement(CloseButton, { ref: toggleRefs.close, className: closeClassName, ariaLabel: closeLabel, onClick: () => {
          onToggle(false);
        } }),
        children2
      )
    )
  );
});
var DrawerTrigger = import_react93.default.forwardRef(({ testUtilsClassName, ariaLabel, ariaExpanded, ariaControls, badge, itemId, isActive, trigger, onClick }, ref) => import_react93.default.createElement(
  "div",
  { className: clsx_m_default(styles_css_default30["drawer-trigger"], isActive && styles_css_default30["drawer-trigger-active"], isActive && getVisualContextClassname("app-layout-tools-drawer-trigger")), onClick },
  import_react93.default.createElement(ToggleButton, { ref, className: testUtilsClassName, iconName: trigger.iconName, iconSvg: trigger.iconSvg, ariaLabel, ariaExpanded, ariaControls, badge, testId: itemId && `awsui-app-layout-trigger-${itemId}` })
));
var DrawerTriggersBar = ({ isMobile, topOffset, bottomOffset, activeDrawerId, ariaLabels, drawers, drawerRefs, onDrawerChange }) => {
  const containerRef = import_react93.default.useRef(null);
  const previousActiveDrawerId = (0, import_react93.useRef)(activeDrawerId);
  const [containerHeight, triggersContainerRef] = useContainerQuery((rect) => rect.contentBoxHeight);
  const isCompactMode = useDensityMode(containerRef) === "compact";
  if (activeDrawerId) {
    previousActiveDrawerId.current = activeDrawerId;
  }
  const getIndexOfOverflowItem = () => {
    if (containerHeight) {
      const ITEM_HEIGHT = isCompactMode ? 34 : 38;
      const overflowSpot = containerHeight / 1.5;
      const index = Math.floor(overflowSpot / ITEM_HEIGHT);
      return index;
    }
    return 0;
  };
  const { visibleItems, overflowItems } = splitItems(drawers, getIndexOfOverflowItem(), activeDrawerId);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  return import_react93.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default30.drawer, styles_css_default30["drawer-closed"], styles_css_default20["drawer-closed"], {
      [styles_css_default30["drawer-mobile"]]: isMobile,
      [styles_css_default30.hide]: drawers.length === 1 && !!activeDrawerId
    }), ref: containerRef },
    import_react93.default.createElement("div", { ref: triggersContainerRef, style: { top: topOffset, bottom: bottomOffset }, className: clsx_m_default(styles_css_default30["drawer-content"], {
      [styles_css_default30["drawer-content-clickable"]]: drawers.length === 1
    }), onClick: drawers.length === 1 ? () => onDrawerChange(drawers[0].id !== activeDrawerId ? drawers[0].id : null) : void 0 }, !isMobile && import_react93.default.createElement(
      "aside",
      { "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers, role: "region" },
      import_react93.default.createElement(
        "div",
        { className: styles_css_default30["drawer-triggers-wrapper"], "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers, role: "toolbar", "aria-orientation": "vertical" },
        visibleItems.map((item, index) => {
          var _a2;
          return import_react93.default.createElement(DrawerTrigger, { key: index, testUtilsClassName: clsx_m_default(styles_css_default20["drawers-trigger"], item.id === TOOLS_DRAWER_ID && styles_css_default20["tools-toggle"]), ariaExpanded: activeDrawerId === item.id, ref: item.id === previousActiveDrawerId.current ? drawerRefs.toggle : void 0, ariaLabel: (_a2 = item.ariaLabels) === null || _a2 === void 0 ? void 0 : _a2.triggerButton, ariaControls: activeDrawerId === item.id ? item.id : void 0, trigger: item.trigger, badge: item.badge, itemId: item.id, isActive: activeDrawerId === item.id, onClick: drawers.length !== 1 ? () => onDrawerChange(item.id !== activeDrawerId ? item.id : null) : void 0 });
        }),
        overflowItems.length > 0 && import_react93.default.createElement(
          "div",
          { className: styles_css_default30["drawer-trigger"] },
          import_react93.default.createElement(OverflowMenu, { ariaLabel: overflowMenuHasBadge ? ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflowWithBadge : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflow, items: overflowItems, onItemClick: ({ detail }) => onDrawerChange(detail.id) })
        )
      )
    ))
  );
};

// node_modules/@cloudscape-design/components/app-layout/drawer/resizable-drawer.js
var import_react102 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/panel-resize-handle/index.js
var import_react100 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/drag-handle/index.js
var import_react99 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/index.js
var import_react96 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/direction-button.js
var import_react94 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/styles.scoped.css";
var styles_css_default31 = {
  "direction-button-wrapper": "awsui_direction-button-wrapper_155yk_azra5_169",
  "direction-button-wrapper-motion-enter": "awsui_direction-button-wrapper-motion-enter_155yk_azra5_189",
  "direction-button-wrapper-motion-entering": "awsui_direction-button-wrapper-motion-entering_155yk_azra5_189",
  "direction-button-wrapper-motion-exit": "awsui_direction-button-wrapper-motion-exit_155yk_azra5_189",
  "direction-button-wrapper-motion-exiting": "awsui_direction-button-wrapper-motion-exiting_155yk_azra5_189",
  "drag-handle-entry": "awsui_drag-handle-entry_155yk_azra5_1",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_155yk_azra5_1",
  "drag-handle-exit": "awsui_drag-handle-exit_155yk_azra5_1",
  "awsui-motion-fade-out-0": "awsui_awsui-motion-fade-out-0_155yk_azra5_1",
  "direction-button-wrapper-block-start": "awsui_direction-button-wrapper-block-start_155yk_azra5_229",
  "direction-button-wrapper-block-end": "awsui_direction-button-wrapper-block-end_155yk_azra5_233",
  "direction-button-wrapper-inline-start": "awsui_direction-button-wrapper-inline-start_155yk_azra5_237",
  "direction-button-wrapper-inline-end": "awsui_direction-button-wrapper-inline-end_155yk_azra5_238",
  "direction-button-wrapper-rtl": "awsui_direction-button-wrapper-rtl_155yk_azra5_238",
  "drag-handle-wrapper": "awsui_drag-handle-wrapper_155yk_azra5_247",
  "portal-overlay": "awsui_portal-overlay_155yk_azra5_252",
  "portal-overlay-contents": "awsui_portal-overlay-contents_155yk_azra5_260",
  "drag-handle": "awsui_drag-handle_155yk_azra5_247",
  "direction-button-wrapper-hidden": "awsui_direction-button-wrapper-hidden_155yk_azra5_277",
  "direction-button": "awsui_direction-button_155yk_azra5_169",
  "direction-button-disabled": "awsui_direction-button-disabled_155yk_azra5_320"
};

// node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/test-classes/styles.scoped.css";
var styles_css_default32 = {
  "root": "awsui_root_8k1rt_1i1h9_5",
  "direction-button": "awsui_direction-button_8k1rt_1i1h9_9",
  "direction-button-visible": "awsui_direction-button-visible_8k1rt_1i1h9_13",
  "direction-button-block-start": "awsui_direction-button-block-start_8k1rt_1i1h9_17",
  "direction-button-block-end": "awsui_direction-button-block-end_8k1rt_1i1h9_21",
  "direction-button-inline-start": "awsui_direction-button-inline-start_8k1rt_1i1h9_25",
  "direction-button-inline-end": "awsui_direction-button-inline-end_8k1rt_1i1h9_29"
};

// node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/direction-button.js
var ICON_LOGICAL_PROPERTY_MAP = {
  "block-start": "arrow-up",
  "block-end": "arrow-down",
  "inline-start": "arrow-left",
  "inline-end": "arrow-right"
};
function DirectionButton({ direction, state, show, onClick }) {
  return import_react94.default.createElement(Transition2, { in: show }, (transitionState, ref) => (
    // The wrapper exists to provide a padding around each direction button that
    // prevents any accidental presses around the button from propagating to any
    // interactive elements behind the button.
    import_react94.default.createElement(
      "span",
      { ref, className: clsx_m_default(styles_css_default31["direction-button-wrapper"], styles_css_default31[`direction-button-wrapper-${direction}`], transitionState === "exited" && styles_css_default31["direction-button-wrapper-hidden"], styles_css_default31[`direction-button-wrapper-motion-${transitionState}`]) },
      import_react94.default.createElement(
        "span",
        {
          className: clsx_m_default(styles_css_default31["direction-button"], state === "disabled" && styles_css_default31["direction-button-disabled"], styles_css_default32[`direction-button-${direction}`], transitionState !== "exited" && styles_css_default32["direction-button-visible"]),
          onClick: state !== "disabled" ? onClick : void 0,
          // This prevents focus from being lost to `document.body` on
          // mouse/pointer press. This allows us to listen to onClick while
          // keeping this button pointer-accessible only.
          onPointerDown: (event) => event.preventDefault()
        },
        import_react94.default.createElement(internal_default, { name: ICON_LOGICAL_PROPERTY_MAP[direction], size: "small" })
      )
    )
  ));
}

// node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/portal-overlay.js
var import_react95 = __toESM(require_react());
function PortalOverlay({ track, isDisabled, children: children2 }) {
  const ref = (0, import_react95.useRef)(null);
  const [container, setContainer] = (0, import_react95.useState)(null);
  (0, import_react95.useLayoutEffect)(() => {
    if (track.current) {
      const newContainer = track.current.ownerDocument.createElement("div");
      track.current.ownerDocument.body.appendChild(newContainer);
      setContainer(newContainer);
      return () => newContainer.remove();
    }
  }, [track]);
  (0, import_react95.useEffect)(() => {
    if (track.current === null || isDisabled) {
      return;
    }
    let cleanedUp = false;
    let lastX;
    let lastY;
    let lastInlineSize;
    let lastBlockSize;
    const updateElement = () => {
      if (track.current && ref.current && document.body.contains(ref.current)) {
        const isRtl = getIsRtl(ref.current);
        const { insetInlineStart, insetBlockStart, inlineSize, blockSize } = getLogicalBoundingClientRect(track.current);
        const newX = (insetInlineStart + getScrollInlineStart(document.documentElement)) * (isRtl ? -1 : 1);
        const newY = insetBlockStart + document.documentElement.scrollTop;
        if (lastX !== newX || lastY !== newY) {
          ref.current.style.translate = `${newX}px ${newY}px`;
          lastX = newX;
          lastY = newY;
        }
        if (lastInlineSize !== inlineSize || lastBlockSize !== blockSize) {
          ref.current.style.width = `${inlineSize}px`;
          ref.current.style.height = `${blockSize}px`;
          lastInlineSize = inlineSize;
          lastBlockSize = blockSize;
        }
      }
      if (!cleanedUp) {
        requestAnimationFrame(updateElement);
      }
    };
    updateElement();
    return () => {
      cleanedUp = true;
    };
  }, [isDisabled, track]);
  return import_react95.default.createElement(
    Portal,
    { container },
    import_react95.default.createElement(
      "span",
      { ref, className: styles_css_default31["portal-overlay"] },
      import_react95.default.createElement("span", { className: styles_css_default31["portal-overlay-contents"] }, children2)
    )
  );
}

// node_modules/@cloudscape-design/components/internal/components/drag-handle-wrapper/index.js
function DragHandleWrapper({ directions: directions2, tooltipText, children: children2, onDirectionClick, triggerMode = "focus", initialShowButtons = false, controlledShowButtons = false, hideButtonsOnDrag, clickDragThreshold }) {
  const wrapperRef = (0, import_react96.useRef)(null);
  const dragHandleRef = (0, import_react96.useRef)(null);
  const [showTooltip, setShowTooltip] = (0, import_react96.useState)(false);
  const [showButtons, setShowButtons] = (0, import_react96.useState)(initialShowButtons);
  const isPointerDown = (0, import_react96.useRef)(false);
  const initialPointerPosition = (0, import_react96.useRef)();
  const didPointerDrag = (0, import_react96.useRef)(false);
  const isDisabled = !directions2["block-start"] && !directions2["block-end"] && !directions2["inline-start"] && !directions2["inline-end"];
  const onWrapperFocusIn = (event) => {
    if (document.body.dataset.awsuiFocusVisible && !nodeContains(wrapperRef.current, event.relatedTarget)) {
      setShowTooltip(false);
      if (triggerMode === "focus") {
        setShowButtons(true);
      }
    }
  };
  const onWrapperFocusOut = (event) => {
    if (document.hasFocus() && !nodeContains(wrapperRef.current, event.relatedTarget)) {
      setShowButtons(false);
    }
  };
  (0, import_react96.useEffect)(() => {
    const controller = new AbortController();
    document.addEventListener("pointermove", (event) => {
      if (isPointerDown.current && initialPointerPosition.current && (event.clientX > initialPointerPosition.current.x + clickDragThreshold || event.clientX < initialPointerPosition.current.x - clickDragThreshold || event.clientY > initialPointerPosition.current.y + clickDragThreshold || event.clientY < initialPointerPosition.current.y - clickDragThreshold)) {
        didPointerDrag.current = true;
        if (hideButtonsOnDrag) {
          setShowButtons(false);
        }
      }
    }, { signal: controller.signal });
    const resetPointerDownState = () => {
      isPointerDown.current = false;
      initialPointerPosition.current = void 0;
    };
    document.addEventListener("pointercancel", () => {
      resetPointerDownState();
    }, { signal: controller.signal });
    document.addEventListener("pointerup", () => {
      if (isPointerDown.current && !didPointerDrag.current) {
        setShowButtons(true);
      }
      resetPointerDownState();
    }, { signal: controller.signal });
    return () => controller.abort();
  }, [clickDragThreshold, hideButtonsOnDrag]);
  const onHandlePointerDown = (event) => {
    isPointerDown.current = true;
    didPointerDrag.current = false;
    initialPointerPosition.current = { x: event.clientX, y: event.clientY };
    setShowTooltip(false);
  };
  const onTooltipGroupPointerEnter = () => {
    if (!isPointerDown.current) {
      setShowTooltip(true);
    }
  };
  const onTooltipGroupPointerLeave = () => {
    setShowTooltip(false);
  };
  const onDragHandleKeyDown = (event) => {
    if (event.key === "Escape") {
      setShowButtons(false);
    } else if (triggerMode === "keyboard-activate" && (event.key === "Enter" || event.key === " ")) {
      setShowButtons((prevshowButtons) => !prevshowButtons);
    } else if (event.key !== "Alt" && event.key !== "Control" && event.key !== "Meta" && event.key !== "Shift" && triggerMode === "focus") {
      setShowButtons(true);
    }
  };
  const onInternalDirectionClick = (direction) => {
    var _a2;
    if (dragHandleRef.current) {
      (_a2 = getFirstFocusable2(dragHandleRef.current)) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
    onDirectionClick === null || onDirectionClick === void 0 ? void 0 : onDirectionClick(direction);
  };
  const _showButtons = triggerMode === "controlled" ? controlledShowButtons : showButtons;
  return import_react96.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default31["drag-handle-wrapper"], _showButtons && styles_css_default31["drag-handle-wrapper-open"]), ref: wrapperRef, onFocus: onWrapperFocusIn, onBlur: onWrapperFocusOut },
    import_react96.default.createElement(
      "div",
      { onPointerEnter: onTooltipGroupPointerEnter, onPointerLeave: onTooltipGroupPointerLeave },
      import_react96.default.createElement("div", { className: styles_css_default31["drag-handle"], ref: dragHandleRef, onPointerDown: onHandlePointerDown, onKeyDown: onDragHandleKeyDown }, children2),
      !isDisabled && !_showButtons && showTooltip && tooltipText && import_react96.default.createElement(Tooltip, { trackRef: dragHandleRef, value: tooltipText, onDismiss: () => setShowTooltip(false) })
    ),
    import_react96.default.createElement(
      PortalOverlay,
      { track: dragHandleRef, isDisabled: !_showButtons },
      directions2["block-start"] && import_react96.default.createElement(DirectionButton, { show: !isDisabled && _showButtons, direction: "block-start", state: directions2["block-start"], onClick: () => onInternalDirectionClick("block-start") }),
      directions2["block-end"] && import_react96.default.createElement(DirectionButton, { show: !isDisabled && _showButtons, direction: "block-end", state: directions2["block-end"], onClick: () => onInternalDirectionClick("block-end") }),
      directions2["inline-start"] && import_react96.default.createElement(DirectionButton, { show: !isDisabled && _showButtons, direction: "inline-start", state: directions2["inline-start"], onClick: () => onInternalDirectionClick("inline-start") }),
      directions2["inline-end"] && import_react96.default.createElement(DirectionButton, { show: !isDisabled && _showButtons, direction: "inline-end", state: directions2["inline-end"], onClick: () => onInternalDirectionClick("inline-end") })
    )
  );
}

// node_modules/@cloudscape-design/components/internal/components/drag-handle/button.js
var import_react98 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/drag-handle/resize-icon.js
var import_react97 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/drag-handle/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/drag-handle/styles.scoped.css";
var styles_css_default33 = {
  "handle": "awsui_handle_sdha6_45ome_145",
  "handle-size-normal": "awsui_handle-size-normal_sdha6_45ome_153",
  "handle-size-small": "awsui_handle-size-small_sdha6_45ome_157",
  "handle-drag-indicator": "awsui_handle-drag-indicator_sdha6_45ome_160",
  "handle-disabled": "awsui_handle-disabled_sdha6_45ome_160",
  "active": "awsui_active_sdha6_45ome_163",
  "handle-resize-area": "awsui_handle-resize-area_sdha6_45ome_166",
  "handle-resize-horizontal": "awsui_handle-resize-horizontal_sdha6_45ome_173",
  "handle-resize-vertical": "awsui_handle-resize-vertical_sdha6_45ome_176",
  "hide-focus": "awsui_hide-focus_sdha6_45ome_186",
  "resize-icon": "awsui_resize-icon_sdha6_45ome_208",
  "resize-icon-vertical": "awsui_resize-icon-vertical_sdha6_45ome_214",
  "resize-icon-horizontal": "awsui_resize-icon-horizontal_sdha6_45ome_218",
  "prevent-pointer": "awsui_prevent-pointer_sdha6_45ome_222"
};

// node_modules/@cloudscape-design/components/internal/components/drag-handle/resize-icon.js
function ResizeIcon({ variant }) {
  return import_react97.default.createElement(
    "svg",
    { focusable: "false", className: clsx_m_default(styles_css_default33["resize-icon"], styles_css_default33[`resize-icon-${variant}`]), xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 16 16", "aria-hidden": true },
    import_react97.default.createElement("path", { d: "M2 8H14", strokeWidth: "2", strokeLinecap: "round" })
  );
}

// node_modules/@cloudscape-design/components/internal/components/drag-handle/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/drag-handle/test-classes/styles.scoped.css";
var styles_css_default34 = {
  "root": "awsui_root_1om0h_im8v7_5"
};

// node_modules/@cloudscape-design/components/internal/components/drag-handle/button.js
var DragHandleButton = (0, import_react98.forwardRef)(({ variant = "drag-indicator", size = "normal", active = false, className: className2, ariaLabel, ariaLabelledBy, ariaDescribedby, ariaValue, disabled, onPointerDown, onClick, onKeyDown }, ref) => {
  const dragHandleRefObject = (0, import_react98.useRef)(null);
  const iconProps = (() => {
    const shared = {
      variant: disabled ? "disabled" : void 0,
      size
    };
    switch (variant) {
      case "drag-indicator":
        return Object.assign(Object.assign({}, shared), { name: "drag-indicator" });
      case "resize-area":
        return Object.assign(Object.assign({}, shared), { name: "resize-area" });
      case "resize-horizontal":
        return Object.assign(Object.assign({}, shared), { svg: import_react98.default.createElement(ResizeIcon, { variant: "horizontal" }) });
      case "resize-vertical":
        return Object.assign(Object.assign({}, shared), { svg: import_react98.default.createElement(ResizeIcon, { variant: "vertical" }) });
    }
  })();
  return (
    // We need to use a div with button role instead of a button
    // so that Safari will focus on it when clicking it.
    // (See https://bugs.webkit.org/show_bug.cgi?id=22261)
    // Otherwise, we can't reliably catch keyboard events coming from the handle
    // when it is being dragged.
    import_react98.default.createElement(
      "div",
      { ref: useMergeRefs(ref, dragHandleRefObject), role: ariaValue ? "slider" : "application", tabIndex: 0, className: clsx_m_default(className2, styles_css_default33.handle, styles_css_default34.root, styles_css_default33[`handle-${variant}`], styles_css_default33[`handle-size-${size}`], disabled && styles_css_default33["handle-disabled"], active && styles_css_default33.active), "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedby, "aria-disabled": disabled, "aria-valuemax": ariaValue === null || ariaValue === void 0 ? void 0 : ariaValue.valueMax, "aria-valuemin": ariaValue === null || ariaValue === void 0 ? void 0 : ariaValue.valueMin, "aria-valuenow": ariaValue === null || ariaValue === void 0 ? void 0 : ariaValue.valueNow, onPointerDown, onClick, onKeyDown },
      import_react98.default.createElement(
        "div",
        { className: styles_css_default33["prevent-pointer"] },
        import_react98.default.createElement(internal_default, Object.assign({}, iconProps))
      )
    )
  );
});
var button_default = DragHandleButton;

// node_modules/@cloudscape-design/components/internal/components/drag-handle/index.js
var InternalDragHandle = (0, import_react99.forwardRef)((_a2, ref) => {
  var { variant, size, ariaLabel, ariaLabelledBy, ariaDescribedby, tooltipText, ariaValue, disabled, directions: directions2 = {}, onPointerDown, onClick, onKeyDown, onDirectionClick, triggerMode, initialShowButtons, controlledShowButtons, hideButtonsOnDrag = false, clickDragThreshold = 3, active } = _a2, rest = __rest(_a2, ["variant", "size", "ariaLabel", "ariaLabelledBy", "ariaDescribedby", "tooltipText", "ariaValue", "disabled", "directions", "onPointerDown", "onClick", "onKeyDown", "onDirectionClick", "triggerMode", "initialShowButtons", "controlledShowButtons", "hideButtonsOnDrag", "clickDragThreshold", "active"]);
  const baseProps = getBaseProps(rest);
  return import_react99.default.createElement(
    DragHandleWrapper,
    { directions: !disabled ? directions2 : {}, tooltipText, onDirectionClick, triggerMode, initialShowButtons, controlledShowButtons, hideButtonsOnDrag, clickDragThreshold },
    import_react99.default.createElement(button_default, { ref, className: baseProps.className, variant, size, ariaLabel, ariaLabelledBy, ariaDescribedby, ariaValue, disabled, active, onPointerDown, onClick, onKeyDown })
  );
});
var drag_handle_default = InternalDragHandle;

// node_modules/@cloudscape-design/components/internal/components/panel-resize-handle/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/panel-resize-handle/styles.scoped.css";
var styles_css_default35 = {
  "slider": "awsui_slider_cqzlk_pwkoj_145",
  "slider-side": "awsui_slider-side_cqzlk_pwkoj_179",
  "slider-side-start": "awsui_slider-side-start_cqzlk_pwkoj_180"
};

// node_modules/@cloudscape-design/components/internal/components/panel-resize-handle/index.js
var panel_resize_handle_default = import_react100.default.forwardRef(function PanelResizeHandle({ className: className2, ariaLabel, tooltipText, ariaValuenow, position, onDirectionClick, onKeyDown, onPointerDown, disabled }, ref) {
  return import_react100.default.createElement(drag_handle_default, { className: clsx_m_default(className2, styles_css_default35.slider, styles_css_default35[`slider-${position}`]), ariaLabel, tooltipText, ariaValue: { valueMin: 0, valueMax: 100, valueNow: ariaValuenow !== null && ariaValuenow !== void 0 ? ariaValuenow : 0 }, variant: ["side", "side-start"].includes(position) ? "resize-horizontal" : "resize-vertical", directions: disabled ? {
    "inline-start": "disabled",
    "inline-end": "disabled"
  } : position === "side" ? {
    "inline-end": ariaValuenow === 0 ? "disabled" : "active",
    "inline-start": ariaValuenow === 100 ? "disabled" : "active"
  } : position === "side-start" ? {
    "inline-end": ariaValuenow === 100 ? "disabled" : "active",
    "inline-start": ariaValuenow === 0 ? "disabled" : "active"
  } : {
    "block-end": ariaValuenow === 0 ? "disabled" : "active",
    "block-start": ariaValuenow === 100 ? "disabled" : "active"
  }, onDirectionClick, onKeyDown, onPointerDown, ref });
});

// node_modules/@cloudscape-design/components/internal/utils/handle-key.js
function isEventLike(event) {
  return isHTMLElement2(event.currentTarget) || isSVGElement2(event.currentTarget);
}
function handleKey2(event, { onActivate, onBlockEnd, onBlockStart, onDefault, onEnd, onEscape, onHome, onInlineEnd, onInlineStart, onPageDown, onPageUp }) {
  switch (event.keyCode) {
    case KeyCode2.down:
      onBlockEnd === null || onBlockEnd === void 0 ? void 0 : onBlockEnd();
      break;
    case KeyCode2.end:
      onEnd === null || onEnd === void 0 ? void 0 : onEnd();
      break;
    case KeyCode2.enter:
    case KeyCode2.space:
      onActivate === null || onActivate === void 0 ? void 0 : onActivate();
      break;
    case KeyCode2.escape:
      onEscape === null || onEscape === void 0 ? void 0 : onEscape();
      break;
    case KeyCode2.home:
      onHome === null || onHome === void 0 ? void 0 : onHome();
      break;
    case KeyCode2.left:
      getIsRtl(event.currentTarget) ? onInlineEnd === null || onInlineEnd === void 0 ? void 0 : onInlineEnd() : onInlineStart === null || onInlineStart === void 0 ? void 0 : onInlineStart();
      break;
    case KeyCode2.pageDown:
      onPageDown === null || onPageDown === void 0 ? void 0 : onPageDown();
      break;
    case KeyCode2.pageUp:
      onPageUp === null || onPageUp === void 0 ? void 0 : onPageUp();
      break;
    case KeyCode2.right:
      getIsRtl(event.currentTarget) ? onInlineStart === null || onInlineStart === void 0 ? void 0 : onInlineStart() : onInlineEnd === null || onInlineEnd === void 0 ? void 0 : onInlineEnd();
      break;
    case KeyCode2.up:
      onBlockStart === null || onBlockStart === void 0 ? void 0 : onBlockStart();
      break;
    default:
      onDefault === null || onDefault === void 0 ? void 0 : onDefault();
      break;
  }
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-keyboard-events.js
var KEYBOARD_SINGLE_STEP_SIZE = 10;
var KEYBOARD_MULTIPLE_STEPS_SIZE = 60;
var getCurrentSize = (panelRef) => {
  if (!panelRef || !panelRef.current) {
    return {
      panelHeight: 0,
      panelWidth: 0
    };
  }
  return {
    panelHeight: panelRef.current.clientHeight,
    panelWidth: panelRef.current.clientWidth
  };
};
var useKeyboardEvents = ({ position, onResize, panelRef }) => {
  return {
    onDirectionClick: (direction) => {
      let currentSize;
      const { panelHeight, panelWidth } = getCurrentSize(panelRef);
      if (["side", "side-start"].includes(position)) {
        currentSize = panelWidth;
      } else {
        currentSize = panelHeight;
      }
      const singleStepUp = () => onResize(currentSize + KEYBOARD_SINGLE_STEP_SIZE);
      const singleStepDown = () => onResize(currentSize - KEYBOARD_SINGLE_STEP_SIZE);
      switch (direction) {
        case "block-start":
        case "inline-start":
          position === "side-start" ? singleStepDown() : singleStepUp();
          break;
        case "block-end":
        case "inline-end":
          position === "side-start" ? singleStepUp() : singleStepDown();
          break;
      }
    },
    onKeyDown: (event) => {
      let currentSize;
      let maxSize;
      const { panelHeight, panelWidth } = getCurrentSize(panelRef);
      if (["side", "side-start"].includes(position)) {
        currentSize = panelWidth;
        maxSize = window.innerWidth;
      } else {
        currentSize = panelHeight;
        maxSize = window.innerHeight;
      }
      let isEventHandled = true;
      const singleStepUp = () => onResize(currentSize + KEYBOARD_SINGLE_STEP_SIZE);
      const singleStepDown = () => onResize(currentSize - KEYBOARD_SINGLE_STEP_SIZE);
      const multipleStepUp = () => onResize(currentSize + KEYBOARD_MULTIPLE_STEPS_SIZE);
      const multipleStepDown = () => onResize(currentSize - KEYBOARD_MULTIPLE_STEPS_SIZE);
      handleKey2(event, {
        onBlockStart: () => {
          ["bottom", "side-start"].includes(position) ? singleStepUp() : singleStepDown();
        },
        onBlockEnd: () => {
          ["bottom", "side-start"].includes(position) ? singleStepDown() : singleStepUp();
        },
        onInlineEnd: () => {
          ["bottom", "side-start"].includes(position) ? singleStepUp() : singleStepDown();
        },
        onInlineStart: () => {
          ["bottom", "side-start"].includes(position) ? singleStepDown() : singleStepUp();
        },
        onPageDown: () => multipleStepDown(),
        onPageUp: () => multipleStepUp(),
        onHome: () => onResize(maxSize),
        onEnd: () => onResize(0),
        onDefault: () => isEventHandled = false
      });
      if (isEventHandled) {
        event.preventDefault();
      }
    }
  };
};

// node_modules/@cloudscape-design/components/app-layout/utils/use-pointer-events.js
var import_react101 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/resize/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/resize/styles.scoped.css";
var styles_css_default36 = {
  "with-motion-vertical": "awsui_with-motion-vertical_b18tp_pelqr_146",
  "with-motion-horizontal": "awsui_with-motion-horizontal_b18tp_pelqr_165",
  "resize-active": "awsui_resize-active_b18tp_pelqr_184",
  "resize-side": "awsui_resize-side_b18tp_pelqr_195",
  "resize-bottom": "awsui_resize-bottom_b18tp_pelqr_198"
};

// node_modules/@cloudscape-design/components/app-layout/utils/use-pointer-events.js
var usePointerEvents = ({ position, panelRef, handleRef, onResize }) => {
  const onDocumentPointerMove = (0, import_react101.useCallback)((event) => {
    if (!panelRef || !panelRef.current || !handleRef || !handleRef.current) {
      return;
    }
    if (position === "side") {
      const mouseClientX = getLogicalClientX(event, getIsRtl(panelRef.current)) || 0;
      const handleOffset = getLogicalBoundingClientRect(handleRef.current).inlineSize / 2;
      const width = getLogicalBoundingClientRect(panelRef.current).insetInlineEnd - mouseClientX + handleOffset;
      onResize(width);
    } else if (position === "side-start") {
      const mouseClientX = getLogicalClientX(event, getIsRtl(panelRef.current)) || 0;
      const handleOffset = getLogicalBoundingClientRect(handleRef.current).inlineSize / 2;
      const panelBoundingClientRect = getLogicalBoundingClientRect(panelRef.current);
      const width = panelBoundingClientRect.insetInlineEnd + mouseClientX + handleOffset - panelBoundingClientRect.inlineSize;
      onResize(width);
    } else {
      const mouseClientY = event.clientY || 0;
      const handleOffset = getLogicalBoundingClientRect(handleRef.current).blockSize / 2;
      const height = getLogicalBoundingClientRect(panelRef.current).insetBlockEnd - mouseClientY + handleOffset;
      onResize(height);
    }
  }, [position, panelRef, handleRef, onResize]);
  const onDocumentPointerUp = (0, import_react101.useCallback)(() => {
    const panelElement = panelRef === null || panelRef === void 0 ? void 0 : panelRef.current;
    if (!panelElement) {
      return;
    }
    const currentDocument = panelElement.ownerDocument;
    currentDocument.body.classList.remove(styles_css_default36["resize-active"]);
    currentDocument.body.classList.remove(styles_css_default36[`resize-${position}`]);
    currentDocument.removeEventListener("pointerup", onDocumentPointerUp);
    currentDocument.removeEventListener("pointermove", onDocumentPointerMove);
  }, [panelRef, onDocumentPointerMove, position]);
  const onSliderPointerDown = (0, import_react101.useCallback)(() => {
    const panelElement = panelRef === null || panelRef === void 0 ? void 0 : panelRef.current;
    if (!panelElement) {
      return;
    }
    const currentDocument = panelElement.ownerDocument;
    currentDocument.body.classList.add(styles_css_default36["resize-active"]);
    currentDocument.body.classList.add(styles_css_default36[`resize-${position}`]);
    currentDocument.addEventListener("pointerup", onDocumentPointerUp);
    currentDocument.addEventListener("pointermove", onDocumentPointerMove);
  }, [panelRef, onDocumentPointerMove, onDocumentPointerUp, position]);
  return onSliderPointerDown;
};

// node_modules/@cloudscape-design/components/app-layout/drawer/resizable-drawer.js
var ResizableDrawer = (_a2) => {
  var _b, _c, _d, _e, _f;
  var { onResize, maxWidth, minWidth, refs, activeDrawer, toolsContent } = _a2, props2 = __rest(_a2, ["onResize", "maxWidth", "minWidth", "refs", "activeDrawer", "toolsContent"]);
  const { isOpen, children: children2, width, isMobile } = props2;
  const clampedWidth = getLimitedValue(minWidth, width, maxWidth);
  const relativeSize = (clampedWidth - minWidth) / (maxWidth - minWidth) * 100;
  const setSidePanelWidth = (newWidth) => {
    const size = getLimitedValue(minWidth, newWidth, maxWidth);
    const id = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;
    if (isOpen && id && maxWidth >= minWidth) {
      onResize({ size, id });
    }
  };
  const drawerRefObject = (0, import_react102.useRef)(null);
  const sizeControlProps = {
    position: "side",
    panelRef: drawerRefObject,
    handleRef: refs.slider,
    onResize: setSidePanelWidth
  };
  const onSliderPointerDown = usePointerEvents(sizeControlProps);
  const { onKeyDown, onDirectionClick } = useKeyboardEvents(sizeControlProps);
  return import_react102.default.createElement(
    Drawer,
    Object.assign({}, props2, { id: activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id, width: clampedWidth, ref: drawerRefObject, isHidden: !activeDrawer, resizeHandle: !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && import_react102.default.createElement(panel_resize_handle_default, { ref: refs.slider, position: "side", className: styles_css_default20["drawers-slider"], ariaLabel: (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.resizeHandle, tooltipText: (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.resizeHandleTooltipText, ariaValuenow: relativeSize, onKeyDown, onDirectionClick, onPointerDown: onSliderPointerDown }), ariaLabels: {
      openLabel: (_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _d === void 0 ? void 0 : _d.triggerButton,
      mainLabel: (_e = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _e === void 0 ? void 0 : _e.drawerName,
      closeLabel: (_f = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _f === void 0 ? void 0 : _f.closeButton
    } }),
    toolsContent && import_react102.default.createElement("div", { className: clsx_m_default((activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== TOOLS_DRAWER_ID && styles_css_default30.hide) }, toolsContent),
    (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== TOOLS_DRAWER_ID ? children2 : null
  );
};

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/index.js
var import_react103 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/styles.scoped.css";
var styles_css_default37 = {
  "root": "awsui_root_lm6vo_j45og_153",
  "root-no-scroll": "awsui_root-no-scroll_lm6vo_j45og_160",
  "layout": "awsui_layout_lm6vo_j45og_165",
  "layout-no-scroll": "awsui_layout-no-scroll_lm6vo_j45og_171",
  "layout-main": "awsui_layout-main_lm6vo_j45og_175",
  "layout-main-scrollable": "awsui_layout-main-scrollable_lm6vo_j45og_181",
  "unfocusable": "awsui_unfocusable_lm6vo_j45og_186",
  "breadcrumbs-desktop": "awsui_breadcrumbs-desktop_lm6vo_j45og_190",
  "content-header-wrapper": "awsui_content-header-wrapper_lm6vo_j45og_195",
  "content-wrapper": "awsui_content-wrapper_lm6vo_j45og_199",
  "content-overlapped": "awsui_content-overlapped_lm6vo_j45og_203",
  "content-extra-top-padding": "awsui_content-extra-top-padding_lm6vo_j45og_207"
};

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/styles.scoped.css";
var styles_css_default38 = {
  "block-body-scroll": "awsui_block-body-scroll_19d8l_ug653_153",
  "mobile-bar": "awsui_mobile-bar_19d8l_ug653_157",
  "mobile-bar-breadcrumbs": "awsui_mobile-bar-breadcrumbs_19d8l_ug653_170",
  "mobile-toggle": "awsui_mobile-toggle_19d8l_ug653_177",
  "mobile-toggle-type-navigation": "awsui_mobile-toggle-type-navigation_19d8l_ug653_186",
  "mobile-toggle-type-tools": "awsui_mobile-toggle-type-tools_19d8l_ug653_189",
  "mobile-toggle-type-drawer": "awsui_mobile-toggle-type-drawer_19d8l_ug653_189",
  "drawers-container": "awsui_drawers-container_19d8l_ug653_196"
};

// node_modules/@cloudscape-design/components/app-layout/mobile-toolbar/index.js
var MobileToggle = import_react103.default.forwardRef(({ className: className2, ariaLabels, type, disabled, onClick }, ref) => {
  const { TagName, iconName, getLabels } = togglesConfig[type];
  const { mainLabel, openLabel } = getLabels(ariaLabels);
  return import_react103.default.createElement(
    TagName,
    { className: clsx_m_default(styles_css_default38["mobile-toggle"], styles_css_default38[`mobile-toggle-type-${type}`]), "aria-hidden": disabled, "aria-label": mainLabel, onClick: (e3) => e3.target === e3.currentTarget && onClick() },
    import_react103.default.createElement(ToggleButton, { ref, className: className2, iconName, onClick, ariaLabel: openLabel, disabled, ariaExpanded: disabled })
  );
});
function MobileToolbar({ ariaLabels, toggleRefs, topOffset, navigationHide, toolsHide, anyPanelOpen, unfocusable, drawers, activeDrawerId, children: children2, onNavigationOpen, onToolsOpen, onDrawerChange, mobileBarRef }) {
  (0, import_react103.useEffect)(() => {
    if (anyPanelOpen) {
      document.body.classList.add(styles_css_default38["block-body-scroll"]);
      return () => {
        document.body.classList.remove(styles_css_default38["block-body-scroll"]);
      };
    } else {
      document.body.classList.remove(styles_css_default38["block-body-scroll"]);
    }
  }, [anyPanelOpen]);
  const { overflowItems, visibleItems } = splitItems(drawers, 2, activeDrawerId);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  return import_react103.default.createElement(
    "div",
    { ref: mobileBarRef, className: clsx_m_default(styles_css_default38["mobile-bar"], styles_css_default20["mobile-bar"], unfocusable && styles_css_default37.unfocusable), style: { top: topOffset } },
    !navigationHide && import_react103.default.createElement(MobileToggle, { ref: toggleRefs.navigation, type: "navigation", className: styles_css_default20["navigation-toggle"], ariaLabels, disabled: anyPanelOpen, onClick: onNavigationOpen }),
    import_react103.default.createElement("div", { className: styles_css_default38["mobile-bar-breadcrumbs"] }, children2 && import_react103.default.createElement("div", { className: styles_css_default20.breadcrumbs }, children2)),
    !toolsHide && !drawers && import_react103.default.createElement(MobileToggle, { ref: toggleRefs.tools, type: "tools", className: styles_css_default20["tools-toggle"], ariaLabels, disabled: anyPanelOpen, onClick: onToolsOpen }),
    drawers && import_react103.default.createElement(
      "aside",
      { "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers, role: "region" },
      import_react103.default.createElement(
        "div",
        { className: styles_css_default38["drawers-container"], "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers, role: "toolbar", "aria-orientation": "horizontal" },
        visibleItems.map((item, index) => {
          var _a2;
          return import_react103.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default38["mobile-toggle"], styles_css_default38["mobile-toggle-type-drawer"]), key: index, onClick: () => onDrawerChange(item.id) },
            import_react103.default.createElement(ToggleButton, { className: clsx_m_default(styles_css_default20["drawers-trigger"], item.id === TOOLS_DRAWER_ID && styles_css_default20["tools-toggle"]), iconName: item.trigger.iconName, iconSvg: item.trigger.iconSvg, badge: item.badge, ariaLabel: (_a2 = item.ariaLabels) === null || _a2 === void 0 ? void 0 : _a2.triggerButton, ariaExpanded: activeDrawerId === item.id, testId: `awsui-app-layout-trigger-${item.id}` })
          );
        }),
        overflowItems.length > 0 && import_react103.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default38["mobile-toggle"], styles_css_default38["mobile-toggle-type-drawer"]) },
          import_react103.default.createElement(OverflowMenu, { ariaLabel: overflowMenuHasBadge ? ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflowWithBadge : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflow, items: overflowItems, onItemClick: ({ detail }) => onDrawerChange(detail.id) })
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/notifications/index.js
var import_react104 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/notifications/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/notifications/styles.scoped.css";
var styles_css_default39 = {
  "notifications": "awsui_notifications_1hmm4_1c2ng_9",
  "notifications-sticky": "awsui_notifications-sticky_1hmm4_1c2ng_10",
  "no-content-paddings": "awsui_no-content-paddings_1hmm4_1c2ng_25"
};

// node_modules/@cloudscape-design/components/app-layout/notifications/index.js
var Notifications = import_react104.default.forwardRef((_a2, ref) => {
  var _b, _c;
  var { sticky, disableContentPaddings } = _a2, props2 = __rest(_a2, ["sticky", "disableContentPaddings"]);
  return sticky ? import_react104.default.createElement(
    "div",
    { ref, className: styles_css_default39["notifications-sticky"], style: { top: props2.topOffset } },
    import_react104.default.createElement("div", { role: "region", className: clsx_m_default(props2.testUtilsClassName, disableContentPaddings && styles_css_default39["no-content-paddings"]), "aria-label": (_b = props2.labels) === null || _b === void 0 ? void 0 : _b.notifications }, props2.children)
  ) : import_react104.default.createElement("div", { role: "region", ref, className: clsx_m_default(props2.testUtilsClassName, styles_css_default39.notifications, disableContentPaddings && styles_css_default39["no-content-paddings"]), "aria-label": (_c = props2.labels) === null || _c === void 0 ? void 0 : _c.notifications }, props2.children);
});

// node_modules/@cloudscape-design/components/app-layout/split-panel/constants.js
var SPLIT_PANEL_MIN_HEIGHT = 160;
var SPLIT_PANEL_MIN_WIDTH = 280;

// node_modules/@cloudscape-design/components/app-layout/split-panel/drawer.js
var import_react106 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/context/split-panel-context.js
var import_react105 = __toESM(require_react());
var AppLayoutWidgetSplitPanelContext = awsuiPluginsInternal.sharedReactContexts.createContext(import_react105.default, "AppLayoutWidgetSplitPanelContext");
var SplitPanelContextProvider = AppLayoutWidgetSplitPanelContext.Provider;
function useSplitPanelContext() {
  const ctx = (0, import_react105.useContext)(AppLayoutWidgetSplitPanelContext);
  if (!ctx) {
    throw new Error("Split panel can only be used inside app layout");
  }
  return ctx;
}

// node_modules/@cloudscape-design/components/app-layout/split-panel/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/split-panel/styles.scoped.css";
var styles_css_default40 = {
  "drawer-displayed": "awsui_drawer-displayed_1lh3u_16xqy_149",
  "drawer-content": "awsui_drawer-content_1lh3u_16xqy_153"
};

// node_modules/@cloudscape-design/components/app-layout/split-panel/drawer.js
function SideSplitPanelDrawer({ displayed, children: children2 }) {
  const { isOpen, size, topOffset, bottomOffset } = useSplitPanelContext();
  const width = isOpen && children2 ? size : void 0;
  return import_react106.default.createElement(
    "div",
    { className: clsx_m_default(displayed && styles_css_default40["drawer-displayed"]), style: { width }, "data-testid": "side-split-panel-drawer" },
    import_react106.default.createElement("div", { className: styles_css_default40["drawer-content"], style: { width, top: topOffset, bottom: bottomOffset } }, children2)
  );
}

// node_modules/@cloudscape-design/components/app-layout/split-panel/provider.js
var import_react107 = __toESM(require_react());
function SplitPanelProvider(_a2) {
  var { children: children2, size, getMaxHeight, maxWidth, reportSize, onResize } = _a2, rest = __rest(_a2, ["children", "size", "getMaxHeight", "maxWidth", "reportSize", "onResize"]);
  const { position, isOpen } = rest;
  const [maxHeight, setMaxHeight] = (0, import_react107.useState)(size);
  const minSize = position === "bottom" ? SPLIT_PANEL_MIN_HEIGHT : SPLIT_PANEL_MIN_WIDTH;
  const maxSize = position === "bottom" ? maxHeight : maxWidth;
  const cappedSize = getLimitedValue(minSize, size, maxSize);
  const relativeSize = (size - minSize) / (maxSize - minSize) * 100;
  const onResizeWithValidation = (newSize) => {
    const maxSize2 = position === "side" ? maxWidth : getMaxHeight();
    const isResizeValid = position === "side" ? maxSize2 >= SPLIT_PANEL_MIN_WIDTH : maxSize2 >= SPLIT_PANEL_MIN_HEIGHT;
    if (isOpen && isResizeValid) {
      onResize(getLimitedValue(minSize, newSize, maxSize2));
    }
  };
  (0, import_react107.useEffect)(() => {
    if (position !== "bottom") {
      return;
    }
    const handle = requestAnimationFrame(() => setMaxHeight(getMaxHeight()));
    return () => cancelAnimationFrame(handle);
  }, [size, minSize, position, getMaxHeight]);
  (0, import_react107.useEffect)(() => {
    reportSize(cappedSize);
  }, [reportSize, cappedSize]);
  (0, import_react107.useEffect)(() => {
    if (position !== "bottom") {
      return;
    }
    const handler = () => setMaxHeight(getMaxHeight());
    window.addEventListener("resize", handler);
    return () => window.removeEventListener("resize", handler);
  }, [position, getMaxHeight]);
  return import_react107.default.createElement(SplitPanelContextProvider, { value: Object.assign(Object.assign({}, rest), { size: cappedSize, relativeSize, onResize: onResizeWithValidation }) }, children2);
}

// node_modules/@cloudscape-design/components/internal/utils/calculate-once.js
function calculateOnce(callback) {
  let result = void 0;
  return () => {
    if (result === void 0) {
      result = callback();
    }
    return result;
  };
}

// node_modules/@cloudscape-design/components/internal/utils/browser-scrollbar-size.js
var browserScrollbarSize = calculateOnce(() => {
  if (typeof document === "undefined") {
    return { width: 0, height: 0 };
  }
  const scrollDiv = document.createElement("div");
  scrollDiv.style.overflow = "scroll";
  scrollDiv.style.height = "100px";
  scrollDiv.style.width = "100px";
  scrollDiv.style.position = "absolute";
  scrollDiv.style.top = "-9999px";
  scrollDiv.style.left = "-9999px";
  document.body.appendChild(scrollDiv);
  const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;
  const height = scrollDiv.offsetHeight - scrollDiv.clientHeight;
  document.body.removeChild(scrollDiv);
  return { width, height };
});

// node_modules/@cloudscape-design/components/app-layout/split-panel/split-panel-forced-position.js
function checkBasedOnPreviousPosition() {
  let isForced = false;
  return (availableWidthForSplitPanel) => {
    const minWidth = isForced ? SPLIT_PANEL_MIN_WIDTH + browserScrollbarSize().width : SPLIT_PANEL_MIN_WIDTH;
    isForced = availableWidthForSplitPanel < minWidth;
    return isForced;
  };
}
var checkForcedPosition = checkBasedOnPreviousPosition();
function shouldSplitPanelBeForcedToBottom({ isMobile, availableWidthForSplitPanel }) {
  if (isMobile) {
    return true;
  }
  return checkForcedPosition(availableWidthForSplitPanel);
}

// node_modules/@cloudscape-design/components/internal/styles/global-vars.js
var globalVars = {
  stickyVerticalTopOffset: "--awsui-sticky-vertical-top-offset",
  stickyVerticalBottomOffset: "--awsui-sticky-vertical-bottom-offset"
};
var global_vars_default = globalVars;

// node_modules/@cloudscape-design/components/app-layout/utils/sticky-offsets.js
function getStickyOffsetVars(headerHeight, footerHeight, stickyNotificationsHeight, mobileToolbarHeight, disableBodyScroll, isMobile) {
  return {
    [global_vars_default.stickyVerticalTopOffset]: `calc(${!disableBodyScroll ? headerHeight : 0}px + ${isMobile ? mobileToolbarHeight : stickyNotificationsHeight})`,
    [global_vars_default.stickyVerticalBottomOffset]: `${!disableBodyScroll ? footerHeight : 0}px`
  };
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-focus-control.js
var import_react108 = __toESM(require_react());
function useMultipleFocusControl(restoreFocus, activeDrawersIds) {
  const refs = (0, import_react108.useRef)({});
  activeDrawersIds.forEach((drawerId) => {
    if (!refs.current[drawerId]) {
      refs.current[drawerId] = {
        toggle: (0, import_react108.createRef)(),
        close: (0, import_react108.createRef)(),
        slider: (0, import_react108.createRef)()
      };
    }
  });
  const doFocus = (0, import_react108.useCallback)((drawerId, open = true) => {
    var _a2, _b, _c, _d, _e, _f;
    const ref = refs.current[drawerId];
    if (open) {
      previousFocusedElement.current = document.activeElement !== document.body ? document.activeElement : void 0;
      if ((_a2 = ref === null || ref === void 0 ? void 0 : ref.slider) === null || _a2 === void 0 ? void 0 : _a2.current) {
        (_b = ref.slider.current) === null || _b === void 0 ? void 0 : _b.focus();
      } else {
        (_d = (_c = ref === null || ref === void 0 ? void 0 : ref.close) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.focus();
      }
    } else {
      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {
        previousFocusedElement.current.focus();
        previousFocusedElement.current = void 0;
      } else {
        (_f = (_e = ref === null || ref === void 0 ? void 0 : ref.toggle) === null || _e === void 0 ? void 0 : _e.current) === null || _f === void 0 ? void 0 : _f.focus();
      }
    }
  }, [refs, restoreFocus]);
  const setFocus = (params) => {
    const { force = false, drawerId = null, open = true } = params || {};
    if (force && (!drawerId || activeDrawersIds.includes(drawerId))) {
      doFocus(drawerId, open);
    } else {
      shouldFocus.current = true;
    }
  };
  const loseFocus = (0, import_react108.useCallback)(() => {
    previousFocusedElement.current = void 0;
  }, []);
  const previousFocusedElement = (0, import_react108.useRef)();
  const shouldFocus = (0, import_react108.useRef)(false);
  (0, import_react108.useEffect)(() => {
    const drawerId = activeDrawersIds[0];
    if (shouldFocus.current) {
      Promise.resolve().then(() => {
        doFocus(drawerId);
        shouldFocus.current = false;
      });
    }
  }, [activeDrawersIds, doFocus]);
  return {
    refs: refs.current,
    setFocus,
    loseFocus
  };
}
function useFocusControl(isOpen, restoreFocus = false, activeDrawerId) {
  const refs = {
    toggle: (0, import_react108.useRef)(null),
    close: (0, import_react108.useRef)(null),
    slider: (0, import_react108.useRef)(null)
  };
  const previousFocusedElement = (0, import_react108.useRef)();
  const shouldFocus = (0, import_react108.useRef)(false);
  const doFocus = () => {
    var _a2, _b, _c;
    if (!shouldFocus.current) {
      return;
    }
    if (isOpen) {
      previousFocusedElement.current = document.activeElement !== document.body ? document.activeElement : void 0;
      if (refs.slider.current) {
        (_a2 = refs.slider.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      } else {
        (_b = refs.close.current) === null || _b === void 0 ? void 0 : _b.focus();
      }
    } else {
      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {
        previousFocusedElement.current.focus();
        previousFocusedElement.current = void 0;
      } else {
        (_c = refs.toggle.current) === null || _c === void 0 ? void 0 : _c.focus();
      }
    }
    shouldFocus.current = false;
  };
  const setFocus = ({ force, autoFocus = true } = { force: false }) => {
    if (force && isOpen) {
      shouldFocus.current = true;
      doFocus();
    } else if (autoFocus) {
      shouldFocus.current = true;
    }
  };
  (0, import_react108.useEffect)(doFocus, [isOpen, activeDrawerId]);
  const loseFocus = (0, import_react108.useCallback)(() => {
    previousFocusedElement.current = void 0;
  }, []);
  return {
    refs,
    setFocus,
    loseFocus
  };
}
function useAsyncFocusControl(isOpen, restoreFocus = false, activeDrawerId) {
  const refs = {
    toggle: (0, import_react108.useRef)(null),
    close: (0, import_react108.useRef)(null),
    slider: (0, import_react108.useRef)(null)
  };
  const previousFocusedElement = (0, import_react108.useRef)();
  const shouldFocus = (0, import_react108.useRef)(false);
  const doFocus = () => {
    var _a2, _b, _c;
    if (isOpen) {
      previousFocusedElement.current = document.activeElement !== document.body ? document.activeElement : void 0;
      if (refs.slider.current) {
        (_a2 = refs.slider.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      } else {
        (_b = refs.close.current) === null || _b === void 0 ? void 0 : _b.focus();
      }
    } else {
      if (restoreFocus && previousFocusedElement.current && document.contains(previousFocusedElement.current)) {
        previousFocusedElement.current.focus();
        previousFocusedElement.current = void 0;
      } else {
        (_c = refs.toggle.current) === null || _c === void 0 ? void 0 : _c.focus();
      }
    }
  };
  const setFocus = ({ force, autoFocus = true } = { force: false }) => {
    if (force && isOpen) {
      doFocus();
    } else if (autoFocus) {
      shouldFocus.current = true;
    }
  };
  (0, import_react108.useEffect)(() => {
    if (shouldFocus.current) {
      Promise.resolve().then(() => {
        doFocus();
        shouldFocus.current = false;
      });
    }
  }, [isOpen, activeDrawerId]);
  const loseFocus = (0, import_react108.useCallback)(() => {
    previousFocusedElement.current = void 0;
  }, []);
  return {
    refs,
    setFocus,
    loseFocus
  };
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-split-panel-focus-control.js
var import_react109 = __toESM(require_react());
function useSplitPanelFocusControl(dependencies) {
  const refs = {
    toggle: (0, import_react109.useRef)(null),
    slider: (0, import_react109.useRef)(null),
    preferences: (0, import_react109.useRef)(null)
  };
  const lastInteraction = (0, import_react109.useRef)(null);
  (0, import_react109.useEffect)(() => {
    Promise.resolve().then(() => {
      var _a2, _b, _c, _d;
      switch ((_a2 = lastInteraction.current) === null || _a2 === void 0 ? void 0 : _a2.type) {
        case "open":
          (_b = refs.slider.current) === null || _b === void 0 ? void 0 : _b.focus();
          break;
        case "close":
          (_c = refs.toggle.current) === null || _c === void 0 ? void 0 : _c.focus();
          break;
        case "position":
          (_d = refs.preferences.current) === null || _d === void 0 ? void 0 : _d.focus();
          break;
      }
      lastInteraction.current = null;
    });
  }, dependencies);
  return {
    refs,
    setLastInteraction: (interaction) => lastInteraction.current = interaction
  };
}

// node_modules/@cloudscape-design/components/app-layout/classic.js
var ClassicAppLayout = import_react110.default.forwardRef((_a2, ref) => {
  var _b, _c, _d, _e, _f, _g, _h;
  var { navigation, navigationWidth, navigationHide, navigationOpen, tools, toolsWidth, toolsHide, toolsOpen: controlledToolsOpen, breadcrumbs, notifications, stickyNotifications, contentHeader, disableContentHeaderOverlap, content, contentType, disableContentPaddings, disableBodyScroll, maxContentWidth, minContentWidth, placement, ariaLabels, splitPanel, splitPanelSize: controlledSplitPanelSize, splitPanelOpen: controlledSplitPanelOpen, splitPanelPreferences: controlledSplitPanelPreferences, onSplitPanelPreferencesChange, onSplitPanelResize, onSplitPanelToggle, onNavigationChange, onToolsChange, drawers: controlledDrawers, onDrawerChange, activeDrawerId: controlledActiveDrawerId } = _a2, rest = __rest(_a2, ["navigation", "navigationWidth", "navigationHide", "navigationOpen", "tools", "toolsWidth", "toolsHide", "toolsOpen", "breadcrumbs", "notifications", "stickyNotifications", "contentHeader", "disableContentHeaderOverlap", "content", "contentType", "disableContentPaddings", "disableBodyScroll", "maxContentWidth", "minContentWidth", "placement", "ariaLabels", "splitPanel", "splitPanelSize", "splitPanelOpen", "splitPanelPreferences", "onSplitPanelPreferencesChange", "onSplitPanelResize", "onSplitPanelToggle", "onNavigationChange", "onToolsChange", "drawers", "onDrawerChange", "activeDrawerId"]);
  const __embeddedViewMode = Boolean(rest.__embeddedViewMode);
  const rootRef = (0, import_react110.useRef)(null);
  const isMobile = useMobile();
  const [toolsOpen = false, setToolsOpen] = useControllable2(controlledToolsOpen, onToolsChange, false, {
    componentName: "AppLayout",
    controlledProp: "toolsOpen",
    changeHandler: "onToolsChange"
  });
  const onToolsToggle = (open) => {
    setToolsOpen(open);
    if (hasDrawers) {
      focusDrawersButtons();
    } else {
      focusToolsButtons();
    }
    fireNonCancelableEvent(onToolsChange, { open });
  };
  const { drawers, activeDrawer, minDrawerSize, activeDrawerSize, activeDrawerId, ariaLabelsWithDrawers, onActiveDrawerChange, onActiveDrawerResize } = useDrawers(Object.assign({ drawers: controlledDrawers, onDrawerChange, activeDrawerId: controlledActiveDrawerId }, rest), ariaLabels, {
    disableDrawersMerge: true,
    ariaLabels,
    tools,
    toolsOpen,
    toolsHide,
    toolsWidth,
    onToolsToggle
  });
  ariaLabels = ariaLabelsWithDrawers;
  const hasDrawers = !!drawers;
  const { refs: navigationRefs, setFocus: focusNavButtons } = useFocusControl(navigationOpen);
  const { refs: toolsRefs, setFocus: focusToolsButtons, loseFocus: loseToolsFocus } = useFocusControl(toolsOpen || activeDrawer !== void 0, true);
  const { refs: drawerRefs, setFocus: focusDrawersButtons, loseFocus: loseDrawersFocus } = useFocusControl(!!activeDrawerId, true, activeDrawerId);
  const onNavigationToggle = useStableCallback(({ isOpen, autoFocus }) => {
    focusNavButtons({ force: false, autoFocus });
    fireNonCancelableEvent(onNavigationChange, { open: isOpen });
  });
  const onNavigationClick = (event) => {
    const hasLink = findUpUntil(event.target, (node) => node.tagName === "A" && !!node.href);
    if (hasLink) {
      onNavigationToggle({ isOpen: false, autoFocus: true });
    }
  };
  (0, import_react110.useEffect)(() => {
    if (isMobile) {
      onNavigationToggle({ isOpen: false, autoFocus: false });
    }
  }, [isMobile, onNavigationToggle]);
  const navigationVisible = !navigationHide && navigationOpen;
  const toolsVisible = !toolsHide && toolsOpen;
  const [headerFooterHeight, setHeaderFooterHeight] = (0, import_react110.useState)(0);
  (0, import_react110.useEffect)(() => {
    const id = requestAnimationFrame(() => setHeaderFooterHeight(placement.insetBlockStart + placement.insetBlockEnd));
    return () => cancelAnimationFrame(id);
  }, [placement.insetBlockStart, placement.insetBlockEnd]);
  const contentHeightStyle = {
    [disableBodyScroll ? "blockSize" : "minBlockSize"]: `calc(100vh - ${headerFooterHeight}px)`
  };
  const [notificationsHeight, notificationsRef] = useContainerQuery((rect) => rect.contentBoxHeight);
  const anyPanelOpen = navigationVisible || toolsVisible || !!activeDrawer;
  const hasRenderedNotifications = notificationsHeight ? notificationsHeight > 0 : false;
  const stickyNotificationsHeight = stickyNotifications ? notificationsHeight !== null && notificationsHeight !== void 0 ? notificationsHeight : 0 : 0;
  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable2(controlledSplitPanelPreferences, onSplitPanelPreferencesChange, void 0, {
    componentName: "AppLayout",
    controlledProp: "splitPanelPreferences",
    changeHandler: "onSplitPanelPreferencesChange"
  });
  const [splitPanelOpen = false, setSplitPanelOpen] = useControllable2(controlledSplitPanelOpen, onSplitPanelToggle, false, {
    componentName: "AppLayout",
    controlledProp: "splitPanelOpen",
    changeHandler: "onSplitPanelToggle"
  });
  const splitPanelPosition = (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) || "bottom";
  const [splitPanelReportedToggle, setSplitPanelReportedToggle] = (0, import_react110.useState)({
    displayed: false,
    ariaLabel: void 0
  });
  const splitPanelDisplayed = !!(splitPanel && (splitPanelReportedToggle.displayed || splitPanelOpen));
  const closedDrawerWidth = 40;
  const effectiveNavigationWidth = navigationHide ? 0 : navigationOpen ? navigationWidth : closedDrawerWidth;
  const defaultSplitPanelSize = getSplitPanelDefaultSize(splitPanelPosition);
  const [splitPanelSize = defaultSplitPanelSize, setSplitPanelSize] = useControllable2(controlledSplitPanelSize, onSplitPanelResize, defaultSplitPanelSize, {
    componentName: "AppLayout",
    controlledProp: "splitPanelSize",
    changeHandler: "onSplitPanelResize"
  });
  const mainContentRef = (0, import_react110.useRef)(null);
  const legacyScrollRootRef = (0, import_react110.useRef)(null);
  const { refs: splitPanelRefs, setLastInteraction: setSplitPanelLastInteraction } = useSplitPanelFocusControl([
    splitPanelPreferences,
    splitPanelOpen
  ]);
  const onSplitPanelPreferencesSet = (0, import_react110.useCallback)((detail) => {
    setSplitPanelPreferences(detail);
    setSplitPanelLastInteraction({ type: "position" });
    fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);
  }, [setSplitPanelPreferences, onSplitPanelPreferencesChange, setSplitPanelLastInteraction]);
  const onSplitPanelSizeSet = (0, import_react110.useCallback)((newSize) => {
    setSplitPanelSize(newSize);
    fireNonCancelableEvent(onSplitPanelResize, { size: newSize });
  }, [setSplitPanelSize, onSplitPanelResize]);
  const onSplitPanelToggleHandler = (0, import_react110.useCallback)(() => {
    setSplitPanelOpen(!splitPanelOpen);
    setSplitPanelLastInteraction({ type: splitPanelOpen ? "close" : "open" });
    fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });
  }, [setSplitPanelOpen, splitPanelOpen, onSplitPanelToggle, setSplitPanelLastInteraction]);
  const getSplitPanelMaxHeight = useStableCallback(() => {
    if (typeof document === "undefined") {
      return 0;
    } else if (disableBodyScroll && legacyScrollRootRef.current) {
      const availableHeight = legacyScrollRootRef.current.clientHeight;
      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight : availableHeight - MAIN_PANEL_MIN_HEIGHT;
    } else {
      const availableHeight = document.documentElement.clientHeight - placement.insetBlockStart - placement.insetBlockEnd;
      return availableHeight < CONSTRAINED_PAGE_HEIGHT ? availableHeight - CONSTRAINED_MAIN_PANEL_MIN_HEIGHT : availableHeight - MAIN_PANEL_MIN_HEIGHT;
    }
  });
  const rightDrawerBarWidth = drawers ? drawers.length > 1 ? closedDrawerWidth : 0 : 0;
  const contentPadding = 80;
  const resizableSpaceAvailable = Math.max(0, placement.inlineSize - effectiveNavigationWidth - minContentWidth - contentPadding - rightDrawerBarWidth);
  const getEffectiveToolsWidth = () => {
    if (activeDrawerSize && activeDrawer) {
      return Math.min(resizableSpaceAvailable, activeDrawerSize);
    }
    if (toolsHide || drawers) {
      return 0;
    }
    if (toolsOpen) {
      return toolsWidth;
    }
    return closedDrawerWidth;
  };
  const effectiveToolsWidth = getEffectiveToolsWidth();
  const availableWidthForSplitPanel = resizableSpaceAvailable - effectiveToolsWidth;
  const isSplitPanelForcedPosition = shouldSplitPanelBeForcedToBottom({
    isMobile,
    availableWidthForSplitPanel
  });
  const finalSplitPanePosition = isSplitPanelForcedPosition ? "bottom" : splitPanelPosition;
  const splitPaneAvailableOnTheSide = splitPanelDisplayed && finalSplitPanePosition === "side";
  const sideSplitPanelSize = splitPaneAvailableOnTheSide ? splitPanelOpen ? splitPanelSize : closedDrawerWidth : 0;
  const sideSplitPanelMaxWidth = Math.max(0, resizableSpaceAvailable - effectiveToolsWidth);
  const drawerMaxSize = Math.max(0, resizableSpaceAvailable - sideSplitPanelSize);
  const navigationClosedWidth = navigationHide || isMobile ? 0 : closedDrawerWidth;
  const contentMaxWidthStyle = !isMobile ? { maxWidth: maxContentWidth } : void 0;
  const [splitPanelReportedSize, setSplitPanelReportedSize] = (0, import_react110.useState)(0);
  const [splitPanelReportedHeaderHeight, setSplitPanelReportedHeaderHeight] = (0, import_react110.useState)(0);
  const splitPanelContextProps = {
    topOffset: placement.insetBlockStart + (finalSplitPanePosition === "bottom" ? stickyNotificationsHeight : 0),
    bottomOffset: placement.insetBlockEnd,
    leftOffset: placement.insetInlineStart + (isMobile ? 0 : !navigationHide && navigationOpen ? navigationWidth : navigationClosedWidth),
    rightOffset: isMobile ? 0 : placement.insetInlineEnd + effectiveToolsWidth + rightDrawerBarWidth,
    position: finalSplitPanePosition,
    size: splitPanelSize,
    maxWidth: sideSplitPanelMaxWidth,
    getMaxHeight: getSplitPanelMaxHeight,
    disableContentPaddings,
    contentWidthStyles: contentMaxWidthStyle,
    isOpen: splitPanelOpen,
    isForcedPosition: isSplitPanelForcedPosition,
    onResize: onSplitPanelSizeSet,
    onToggle: onSplitPanelToggleHandler,
    onPreferencesChange: onSplitPanelPreferencesSet,
    setSplitPanelToggle: setSplitPanelReportedToggle,
    reportSize: setSplitPanelReportedSize,
    reportHeaderHeight: setSplitPanelReportedHeaderHeight,
    refs: splitPanelRefs
  };
  const splitPanelWrapped = splitPanel && import_react110.default.createElement(SplitPanelProvider, Object.assign({}, splitPanelContextProps), finalSplitPanePosition === "side" ? import_react110.default.createElement(SideSplitPanelDrawer, { displayed: splitPanelDisplayed }, splitPanel) : splitPanel);
  const contentWrapperProps = {
    contentType,
    navigationPadding: navigationHide || !!navigationOpen,
    contentWidthStyles: !isMobile ? { minWidth: minContentWidth, maxWidth: maxContentWidth } : void 0,
    toolsPadding: (
      // tools padding is displayed in one of the three cases
      // 1. Nothing on the that screen edge (no tools panel and no split panel)
      toolsHide || hasDrawers && !activeDrawer && (!splitPanelDisplayed || finalSplitPanePosition !== "side") || // 2. Tools panel is present and open
      toolsVisible || // 3. Split panel is open in side position
      splitPaneAvailableOnTheSide && splitPanelOpen
    ),
    isMobile
  };
  (0, import_react110.useImperativeHandle)(ref, () => ({
    openTools: () => onToolsToggle(true),
    closeNavigationIfNecessary: () => {
      if (isMobile) {
        onNavigationToggle({ isOpen: false, autoFocus: true });
      }
    },
    focusToolsClose: () => {
      if (hasDrawers) {
        focusDrawersButtons({ force: true });
      } else {
        focusToolsButtons({ force: true });
      }
    },
    focusActiveDrawer: () => focusDrawersButtons({ force: true }),
    focusSplitPanel: () => {
      var _a3;
      return (_a3 = splitPanelRefs.slider.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
    }
  }));
  const splitPanelBottomOffset = (_b = !splitPanelDisplayed || finalSplitPanePosition !== "bottom" ? void 0 : splitPanelOpen ? splitPanelReportedSize : splitPanelReportedHeaderHeight) !== null && _b !== void 0 ? _b : void 0;
  const [mobileBarHeight, mobileBarRef] = useContainerQuery((rect) => rect.contentBoxHeight);
  return import_react110.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default37.root, styles_css_default20.root, disableBodyScroll && styles_css_default37["root-no-scroll"]), ref: rootRef, style: contentHeightStyle },
    isMobile && !__embeddedViewMode && (!toolsHide || !navigationHide || breadcrumbs) && import_react110.default.createElement(MobileToolbar, { anyPanelOpen, toggleRefs: { navigation: navigationRefs.toggle, tools: toolsRefs.toggle }, topOffset: placement.insetBlockStart, ariaLabels, navigationHide, toolsHide, onNavigationOpen: () => onNavigationToggle({ isOpen: true, autoFocus: true }), onToolsOpen: () => onToolsToggle(true), unfocusable: anyPanelOpen, mobileBarRef, drawers, activeDrawerId, onDrawerChange: (newDrawerId) => {
      onActiveDrawerChange(newDrawerId, { initiatedByUserAction: true });
      if (newDrawerId !== activeDrawerId) {
        focusToolsButtons();
        focusDrawersButtons();
      }
    } }, breadcrumbs),
    import_react110.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default37.layout, disableBodyScroll && styles_css_default37["layout-no-scroll"]) },
      !navigationHide && import_react110.default.createElement(Drawer, { contentClassName: styles_css_default20.navigation, toggleClassName: styles_css_default20["navigation-toggle"], closeClassName: styles_css_default20["navigation-close"], ariaLabels: togglesConfig.navigation.getLabels(ariaLabels), bottomOffset: placement.insetBlockEnd, topOffset: placement.insetBlockStart, isMobile, isOpen: navigationOpen, onClick: isMobile ? onNavigationClick : void 0, onToggle: (isOpen) => onNavigationToggle({ isOpen, autoFocus: true }), toggleRefs: navigationRefs, type: "navigation", width: navigationWidth }, navigation),
      import_react110.default.createElement(
        "main",
        { ref: legacyScrollRootRef, className: clsx_m_default(styles_css_default37["layout-main"], {
          [styles_css_default37["layout-main-scrollable"]]: disableBodyScroll,
          [styles_css_default20["disable-body-scroll-root"]]: disableBodyScroll,
          [styles_css_default37.unfocusable]: isMobile && anyPanelOpen
        }) },
        import_react110.default.createElement(
          "div",
          { style: {
            marginBottom: splitPanelBottomOffset
          } },
          notifications && import_react110.default.createElement(Notifications, { disableContentPaddings, testUtilsClassName: styles_css_default20.notifications, labels: ariaLabels, topOffset: disableBodyScroll ? 0 : placement.insetBlockStart, sticky: !isMobile && stickyNotifications, ref: notificationsRef }, notifications),
          (!isMobile && breadcrumbs || contentHeader) && import_react110.default.createElement(
            content_wrapper_default,
            Object.assign({}, contentWrapperProps),
            !isMobile && breadcrumbs && import_react110.default.createElement("div", { className: clsx_m_default(styles_css_default20.breadcrumbs, styles_css_default37["breadcrumbs-desktop"]) }, breadcrumbs),
            contentHeader && import_react110.default.createElement("div", { className: clsx_m_default(styles_css_default37["content-header-wrapper"], !hasRenderedNotifications && (isMobile || !breadcrumbs) && styles_css_default37["content-extra-top-padding"], !hasRenderedNotifications && !breadcrumbs && styles_css_default37["content-header-wrapper-first-child"], !disableContentHeaderOverlap && styles_css_default37["content-header-wrapper-overlapped"]) }, contentHeader)
          ),
          import_react110.default.createElement(content_wrapper_default, Object.assign({}, contentWrapperProps, { ref: mainContentRef, disablePaddings: disableContentPaddings, className: clsx_m_default(!disableContentPaddings && styles_css_default37["content-wrapper"], !disableContentPaddings && (isMobile || !breadcrumbs) && !contentHeader && styles_css_default37["content-extra-top-padding"], styles_css_default20.content, !disableContentHeaderOverlap && contentHeader && styles_css_default37["content-overlapped"], !hasRenderedNotifications && !breadcrumbs && !isMobile && !contentHeader && styles_css_default37["content-wrapper-first-child"]), style: getStickyOffsetVars(placement.insetBlockStart, placement.insetBlockEnd + (splitPanelBottomOffset || 0), `${stickyNotificationsHeight}px`, mobileBarHeight && !disableBodyScroll ? `${mobileBarHeight}px` : "0px", !!disableBodyScroll, isMobile) }), content)
        ),
        finalSplitPanePosition === "bottom" && splitPanelWrapped
      ),
      finalSplitPanePosition === "side" && splitPanelWrapped,
      hasDrawers ? import_react110.default.createElement(ResizableDrawer, { contentClassName: clsx_m_default(activeDrawerId && styles_css_default20["active-drawer"], activeDrawerId === TOOLS_DRAWER_ID && styles_css_default20.tools), toggleClassName: styles_css_default20["tools-toggle"], closeClassName: clsx_m_default(styles_css_default20["active-drawer-close-button"], activeDrawerId === TOOLS_DRAWER_ID && styles_css_default20["tools-close"]), ariaLabels: {
        openLabel: (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.triggerButton,
        closeLabel: (_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _d === void 0 ? void 0 : _d.closeButton,
        mainLabel: (_e = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _e === void 0 ? void 0 : _e.drawerName,
        resizeHandle: (_f = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _f === void 0 ? void 0 : _f.resizeHandle,
        resizeHandleTooltipText: (_g = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _g === void 0 ? void 0 : _g.resizeHandleTooltipText
      }, minWidth: minDrawerSize, maxWidth: drawerMaxSize, width: activeDrawerSize, bottomOffset: placement.insetBlockEnd, topOffset: placement.insetBlockStart, isMobile, onToggle: (isOpen) => {
        if (!isOpen) {
          focusToolsButtons();
          focusDrawersButtons();
          onActiveDrawerChange(null, { initiatedByUserAction: true });
        }
      }, isOpen: true, hideOpenButton: true, toggleRefs: drawerRefs, type: "tools", onLoseFocus: loseDrawersFocus, activeDrawer, onResize: (changeDetail) => onActiveDrawerResize(changeDetail), refs: drawerRefs, toolsContent: (_h = drawers === null || drawers === void 0 ? void 0 : drawers.find((drawer) => drawer.id === TOOLS_DRAWER_ID)) === null || _h === void 0 ? void 0 : _h.content }, activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content) : !toolsHide && import_react110.default.createElement(Drawer, { contentClassName: styles_css_default20.tools, toggleClassName: styles_css_default20["tools-toggle"], closeClassName: styles_css_default20["tools-close"], ariaLabels: togglesConfig.tools.getLabels(ariaLabels), width: toolsWidth, bottomOffset: placement.insetBlockEnd, topOffset: placement.insetBlockStart, isMobile, onToggle: onToolsToggle, isOpen: toolsOpen, toggleRefs: toolsRefs, type: "tools", onLoseFocus: loseToolsFocus }, tools),
      hasDrawers && drawers.length > 0 && import_react110.default.createElement(DrawerTriggersBar, { drawerRefs, bottomOffset: placement.insetBlockEnd, topOffset: placement.insetBlockStart, isMobile, drawers, activeDrawerId, onDrawerChange: (newDrawerId) => {
        if (activeDrawerId !== newDrawerId) {
          focusToolsButtons();
          focusDrawersButtons();
        }
        onActiveDrawerChange(newDrawerId, { initiatedByUserAction: true });
      }, ariaLabels })
    )
  );
});
var classic_default = ClassicAppLayout;

// node_modules/@cloudscape-design/components/app-layout/utils/feature-flags.js
var import_react112 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/contexts.js
var import_react111 = __toESM(require_react());
var BreadcrumbsSlotContext = awsuiPluginsInternal.sharedReactContexts.createContext(import_react111.default, "BreadcrumbsSlotContext");
var AppLayoutVisibilityContext = awsuiPluginsInternal.sharedReactContexts.createContext(import_react111.default, "AppLayoutVisibilityContext");
var AppLayoutToolbarPublicContext = awsuiPluginsInternal.sharedReactContexts.createContext(import_react111.default, "AppLayoutToolbarPublicContext");

// node_modules/@cloudscape-design/components/app-layout/utils/feature-flags.js
var useAppLayoutFlagEnabled = () => {
  const isRefresh = useVisualRefresh();
  return isRefresh && (getGlobalFlag("appLayoutWidget") || getGlobalFlag("appLayoutToolbar"));
};
var useAppLayoutToolbarDesignEnabled = () => {
  var _a2;
  const isToolbarPrivate = useAppLayoutFlagEnabled();
  const isToolbarPublic = (_a2 = (0, import_react112.useContext)(AppLayoutToolbarPublicContext)) !== null && _a2 !== void 0 ? _a2 : false;
  return isToolbarPublic || isToolbarPrivate;
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/index.js
var import_react130 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/background.js
var import_react118 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/utils/content-header-utils.js
var highContrastHeaderClassName = "awsui-context-content-header";

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/context.js
var import_react117 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/context/dynamic-overlap-context.js
var import_react113 = __toESM(require_react());
var DynamicOverlapContext = (0, import_react113.createContext)(() => {
});

// node_modules/@cloudscape-design/components/app-layout/utils/use-resize.js
var import_react114 = __toESM(require_react());
function useResize(drawerRefObject, { activeDrawer, activeDrawerSize, onActiveDrawerResize, drawersRefs, isToolsOpen, drawersMinWidth, drawersMaxWidth }) {
  var _a2, _b;
  const [relativeSize, setRelativeSize] = (0, import_react114.useState)(0);
  const drawerSize = !activeDrawer && !isToolsOpen ? 0 : activeDrawerSize;
  (0, import_react114.useEffect)(() => {
    const handle = requestAnimationFrame(() => {
      const maxSize = drawersMaxWidth;
      setRelativeSize((drawerSize - drawersMinWidth) / (maxSize - drawersMinWidth) * 100);
    });
    return () => cancelAnimationFrame(handle);
  }, [drawerSize, drawersMaxWidth, drawersMinWidth]);
  const setSidePanelWidth = (width) => {
    const maxWidth = drawersMaxWidth;
    const size = getLimitedValue(drawersMinWidth, width, maxWidth);
    const id = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;
    if (id && maxWidth >= drawersMinWidth) {
      onActiveDrawerResize({ size, id });
    }
  };
  const sizeControlProps = {
    position: "side",
    panelRef: drawerRefObject,
    handleRef: drawersRefs.slider,
    onResize: setSidePanelWidth
  };
  const onSliderPointerDown = usePointerEvents(sizeControlProps);
  const { onKeyDown, onDirectionClick } = useKeyboardEvents(sizeControlProps);
  const resizeHandle = import_react114.default.createElement(panel_resize_handle_default, { ref: drawersRefs.slider, position: "side", ariaLabel: (_a2 = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _a2 === void 0 ? void 0 : _a2.resizeHandle, tooltipText: (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.resizeHandleTooltipText, ariaValuenow: relativeSize, className: styles_css_default20["drawers-slider"], onKeyDown, onDirectionClick, onPointerDown: onSliderPointerDown });
  return { resizeHandle, drawerSize };
}
var use_resize_default = useResize;

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/split-panel.js
var import_react115 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh/styles.scoped.css";
var styles_css_default41 = {
  "background": "awsui_background_hyvsj_41cuf_149",
  "scrolling-background": "awsui_scrolling-background_hyvsj_41cuf_152",
  "breadcrumbs": "awsui_breadcrumbs_hyvsj_41cuf_163",
  "drawers-container": "awsui_drawers-container_hyvsj_41cuf_176",
  "has-open-drawer": "awsui_has-open-drawer_hyvsj_41cuf_187",
  "disable-body-scroll": "awsui_disable-body-scroll_hyvsj_41cuf_208",
  "drawers-desktop-triggers-container": "awsui_drawers-desktop-triggers-container_hyvsj_41cuf_213",
  "has-multiple-triggers": "awsui_has-multiple-triggers_hyvsj_41cuf_251",
  "drawers-mobile-triggers-container": "awsui_drawers-mobile-triggers-container_hyvsj_41cuf_261",
  "drawers-trigger-content": "awsui_drawers-trigger-content_hyvsj_41cuf_266",
  "drawers-trigger-overflow": "awsui_drawers-trigger-overflow_hyvsj_41cuf_280",
  "drawers-trigger": "awsui_drawers-trigger_hyvsj_41cuf_266",
  "drawer": "awsui_drawer_hyvsj_41cuf_176",
  "drawer-content-container": "awsui_drawer-content-container_hyvsj_41cuf_311",
  "drawer-close-button": "awsui_drawer-close-button_hyvsj_41cuf_320",
  "drawer-content": "awsui_drawer-content_hyvsj_41cuf_311",
  "drawer-content-hidden": "awsui_drawer-content-hidden_hyvsj_41cuf_329",
  "drawer-slider": "awsui_drawer-slider_hyvsj_41cuf_332",
  "is-drawer-open": "awsui_is-drawer-open_hyvsj_41cuf_339",
  "content": "awsui_content_hyvsj_41cuf_365",
  "layout": "awsui_layout_hyvsj_41cuf_390",
  "has-max-content-width": "awsui_has-max-content-width_hyvsj_41cuf_462",
  "content-type-dashboard": "awsui_content-type-dashboard_hyvsj_41cuf_477",
  "content-type-table": "awsui_content-type-table_hyvsj_41cuf_491",
  "content-type-cards": "awsui_content-type-cards_hyvsj_41cuf_491",
  "is-overlap-disabled": "awsui_is-overlap-disabled_hyvsj_41cuf_497",
  "is-hide-mobile-toolbar": "awsui_is-hide-mobile-toolbar_hyvsj_41cuf_500",
  "has-content-gap-left": "awsui_has-content-gap-left_hyvsj_41cuf_514",
  "has-content-gap-right": "awsui_has-content-gap-right_hyvsj_41cuf_517",
  "has-breadcrumbs": "awsui_has-breadcrumbs_hyvsj_41cuf_527",
  "content-first-child-header": "awsui_content-first-child-header_hyvsj_41cuf_530",
  "content-first-child-notifications": "awsui_content-first-child-notifications_hyvsj_41cuf_530",
  "has-header": "awsui_has-header_hyvsj_41cuf_530",
  "content-first-child-main": "awsui_content-first-child-main_hyvsj_41cuf_545",
  "disable-content-paddings": "awsui_disable-content-paddings_hyvsj_41cuf_545",
  "has-left-toggles-gutter": "awsui_has-left-toggles-gutter_hyvsj_41cuf_565",
  "has-right-toggles-gutter": "awsui_has-right-toggles-gutter_hyvsj_41cuf_568",
  "has-split-panel": "awsui_has-split-panel_hyvsj_41cuf_588",
  "split-panel-position-bottom": "awsui_split-panel-position-bottom_hyvsj_41cuf_588",
  "block-body-scroll": "awsui_block-body-scroll_hyvsj_41cuf_596",
  "unfocusable": "awsui_unfocusable_hyvsj_41cuf_601",
  "container": "awsui_container_hyvsj_41cuf_611",
  "is-navigation-open": "awsui_is-navigation-open_hyvsj_41cuf_637",
  "is-tools-open": "awsui_is-tools-open_hyvsj_41cuf_640",
  "is-split-panel-open": "awsui_is-split-panel-open_hyvsj_41cuf_640",
  "split-panel-position-side": "awsui_split-panel-position-side_hyvsj_41cuf_640",
  "has-active-drawer": "awsui_has-active-drawer_hyvsj_41cuf_640",
  "mobile-toolbar": "awsui_mobile-toolbar_hyvsj_41cuf_653",
  "remove-high-contrast-header": "awsui_remove-high-contrast-header_hyvsj_41cuf_670",
  "mobile-toolbar-nav": "awsui_mobile-toolbar-nav_hyvsj_41cuf_674",
  "mobile-toolbar-breadcrumbs": "awsui_mobile-toolbar-breadcrumbs_hyvsj_41cuf_678",
  "mobile-toolbar-tools": "awsui_mobile-toolbar-tools_hyvsj_41cuf_682",
  "navigation-container": "awsui_navigation-container_hyvsj_41cuf_691",
  "show-navigation": "awsui_show-navigation_hyvsj_41cuf_729",
  "animating": "awsui_animating_hyvsj_41cuf_752",
  "showButtons": "awsui_showButtons_hyvsj_41cuf_1",
  "navigation": "awsui_navigation_hyvsj_41cuf_691",
  "openNavigation": "awsui_openNavigation_hyvsj_41cuf_1",
  "animated-content": "awsui_animated-content_hyvsj_41cuf_816",
  "content-container": "awsui_content-container_hyvsj_41cuf_819",
  "hide-navigation": "awsui_hide-navigation_hyvsj_41cuf_828",
  "notifications": "awsui_notifications_hyvsj_41cuf_838",
  "has-notification-content": "awsui_has-notification-content_hyvsj_41cuf_843",
  "sticky-notifications": "awsui_sticky-notifications_hyvsj_41cuf_847",
  "high-contrast": "awsui_high-contrast_hyvsj_41cuf_852",
  "split-panel-bottom": "awsui_split-panel-bottom_hyvsj_41cuf_870",
  "position-bottom": "awsui_position-bottom_hyvsj_41cuf_917",
  "openSplitPanelBottom": "awsui_openSplitPanelBottom_hyvsj_41cuf_1",
  "split-panel-side": "awsui_split-panel-side_hyvsj_41cuf_946",
  "position-side": "awsui_position-side_hyvsj_41cuf_959",
  "tools-container": "awsui_tools-container_hyvsj_41cuf_981",
  "tools": "awsui_tools_hyvsj_41cuf_981",
  "openTools": "awsui_openTools_hyvsj_41cuf_1",
  "has-tools-form-persistence": "awsui_has-tools-form-persistence_hyvsj_41cuf_1070",
  "hide-tools": "awsui_hide-tools_hyvsj_41cuf_1080",
  "show-tools": "awsui_show-tools_hyvsj_41cuf_1092",
  "has-tools-form": "awsui_has-tools-form_hyvsj_41cuf_1070",
  "trigger-button-styles": "awsui_trigger-button-styles_hyvsj_41cuf_1172",
  "trigger-badge-wrapper": "awsui_trigger-badge-wrapper_hyvsj_41cuf_1188",
  "trigger": "awsui_trigger_hyvsj_41cuf_1172",
  "selected": "awsui_selected_hyvsj_41cuf_1240",
  "badge": "awsui_badge_hyvsj_41cuf_1260",
  "trigger-wrapper": "awsui_trigger-wrapper_hyvsj_41cuf_1264",
  "trigger-wrapper-tooltip-visible": "awsui_trigger-wrapper-tooltip-visible_hyvsj_41cuf_1275",
  "dot": "awsui_dot_hyvsj_41cuf_1279",
  "trigger-tooltip": "awsui_trigger-tooltip_hyvsj_41cuf_1292"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/split-panel.js
function SplitPanel({ children: children2 }) {
  const { footerHeight, handleSplitPanelClick, handleSplitPanelPreferencesChange, handleSplitPanelResize, headerHeight, isSplitPanelForcedPosition, isSplitPanelOpen, setSplitPanelReportedSize, setSplitPanelReportedHeaderHeight, setSplitPanelToggle, splitPanelPosition, splitPanelRefs, splitPanelSize } = useAppLayoutInternals();
  const props2 = {
    bottomOffset: 0,
    getMaxHeight: () => {
      const availableHeight = document.documentElement.clientHeight - headerHeight - footerHeight;
      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;
    },
    maxWidth: typeof document !== "undefined" ? document.documentElement.clientWidth : Number.POSITIVE_INFINITY,
    isForcedPosition: isSplitPanelForcedPosition,
    isOpen: isSplitPanelOpen,
    leftOffset: 0,
    onPreferencesChange: handleSplitPanelPreferencesChange,
    onResize: handleSplitPanelResize,
    onToggle: handleSplitPanelClick,
    position: splitPanelPosition,
    reportSize: setSplitPanelReportedSize,
    reportHeaderHeight: setSplitPanelReportedHeaderHeight,
    rightOffset: 0,
    size: splitPanelSize || 0,
    topOffset: 0,
    setSplitPanelToggle,
    refs: splitPanelRefs
  };
  return import_react115.default.createElement(SplitPanelProvider, Object.assign({}, props2), children2);
}
function SplitPanelBottom() {
  const { disableBodyScroll, hasOpenDrawer, navigationOpen, isSplitPanelOpen, splitPanel, splitPanelPosition, splitPanelReportedSize, splitPanelReportedHeaderHeight } = useAppLayoutInternals();
  if (!splitPanel) {
    return null;
  }
  return import_react115.default.createElement(Transition2, { in: isSplitPanelOpen !== null && isSplitPanelOpen !== void 0 ? isSplitPanelOpen : false, exit: false }, (state, transitionEventsRef) => import_react115.default.createElement("section", { className: clsx_m_default(styles_css_default41["split-panel-bottom"], styles_css_default41[`position-${splitPanelPosition}`], {
    [styles_css_default41.animating]: state === "entering",
    [styles_css_default41["disable-body-scroll"]]: disableBodyScroll,
    [styles_css_default41["has-open-drawer"]]: hasOpenDrawer,
    [styles_css_default41["is-navigation-open"]]: navigationOpen,
    [styles_css_default41["is-split-panel-open"]]: isSplitPanelOpen
  }), ref: transitionEventsRef, style: {
    [custom_css_properties_default.splitPanelReportedSize]: `${splitPanelReportedSize}px`,
    [custom_css_properties_default.splitPanelReportedHeaderSize]: `${splitPanelReportedHeaderHeight}px`
  } }, splitPanelPosition === "bottom" && splitPanel));
}
function SplitPanelSide() {
  const { isSplitPanelOpen, splitPanel, splitPanelPosition, splitPanelMaxWidth, splitPanelControlId, isToolsOpen, activeDrawerId } = useAppLayoutInternals();
  if (!splitPanel) {
    return null;
  }
  return import_react115.default.createElement("section", { id: splitPanelControlId, "aria-hidden": !isSplitPanelOpen || splitPanelPosition === "bottom" ? true : false, className: clsx_m_default(styles_css_default41["split-panel-side"], styles_css_default41[`position-${splitPanelPosition}`], {
    [styles_css_default41["is-split-panel-open"]]: isSplitPanelOpen,
    [styles_css_default41["has-open-drawer"]]: !!activeDrawerId || isToolsOpen
  }), style: {
    [custom_css_properties_default.splitPanelMaxWidth]: `${splitPanelMaxWidth}px`,
    [custom_css_properties_default.splitPanelMinWidth]: `${SPLIT_PANEL_MIN_WIDTH}px`
  } }, splitPanelPosition === "side" && splitPanel);
}
function getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences) {
  let splitPanelPosition = "bottom";
  if (!isSplitPanelForcedPosition && (splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) === "side") {
    splitPanelPosition = "side";
  }
  return splitPanelPosition;
}
SplitPanel.Bottom = SplitPanelBottom;
SplitPanel.Side = SplitPanelSide;
var split_panel_default = SplitPanel;

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/use-background-overlap.js
var import_react116 = __toESM(require_react());
function useBackgroundOverlap({ contentHeader, disableContentHeaderOverlap, layoutElement }) {
  const hasContentHeader = !!contentHeader;
  const [hasBackgroundOverlap, setHasBackgroundOverlap] = (0, import_react116.useState)(hasContentHeader);
  const updateBackgroundOverlapHeight = (0, import_react116.useCallback)((height) => {
    const hasOverlap = hasContentHeader || height > 0;
    setHasBackgroundOverlap(hasOverlap);
    const element = typeof layoutElement !== "function" && (layoutElement === null || layoutElement === void 0 ? void 0 : layoutElement.current);
    if (!element) {
      return;
    }
    if (disableContentHeaderOverlap || !hasOverlap || height <= 0) {
      element.style.removeProperty(custom_css_properties_default.overlapHeight);
    } else {
      element.style.setProperty(custom_css_properties_default.overlapHeight, `${height}px`);
    }
  }, [hasContentHeader, layoutElement, disableContentHeaderOverlap]);
  return {
    hasBackgroundOverlap,
    updateBackgroundOverlapHeight
  };
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/context.js
var AppLayoutInternalsContext = (0, import_react117.createContext)(null);
function useAppLayoutInternals() {
  const ctx = (0, import_react117.useContext)(AppLayoutInternalsContext);
  if (!ctx) {
    throw new Error("Invariant violation: this context is only available inside app layout");
  }
  return ctx;
}
var AppLayoutInternalsProvider = import_react117.default.forwardRef((props2, forwardRef32) => {
  var _a2, _b, _c, _d, _e;
  const { toolsHide, toolsOpen: controlledToolsOpen, navigationHide, navigationOpen, contentType, placement, children: children2, splitPanel } = props2;
  const isMobile = useMobile();
  const __embeddedViewMode = Boolean(props2.__embeddedViewMode);
  const geckoMaxCssLength = ((1 << 30) - 1) / 60;
  const halfGeckoMaxCssLength2 = geckoMaxCssLength / 2;
  const maxContentWidth = props2.maxContentWidth && props2.maxContentWidth > halfGeckoMaxCssLength2 ? halfGeckoMaxCssLength2 : (_a2 = props2.maxContentWidth) !== null && _a2 !== void 0 ? _a2 : 0;
  const minContentWidth = (_b = props2.minContentWidth) !== null && _b !== void 0 ? _b : 280;
  const { refs: navigationRefs, setFocus: focusNavButtons } = useFocusControl(navigationOpen);
  const handleNavigationClick = useStableCallback(({ isOpen, autoFocus }) => {
    focusNavButtons({ force: false, autoFocus });
    fireNonCancelableEvent(props2.onNavigationChange, { open: isOpen });
  });
  (0, import_react117.useEffect)(() => {
    if (isMobile) {
      handleNavigationClick({ isOpen: false, autoFocus: false });
    }
  }, [isMobile, handleNavigationClick]);
  const toolsWidth = props2.toolsWidth;
  const [isToolsOpen = false, setIsToolsOpen] = useControllable2(controlledToolsOpen, props2.onToolsChange, false, {
    componentName: "AppLayout",
    controlledProp: "toolsOpen",
    changeHandler: "onToolsChange"
  });
  const { refs: toolsRefs, setFocus: focusToolsButtons, loseFocus: loseToolsFocus } = useFocusControl(isToolsOpen, true);
  const handleToolsClick = (0, import_react117.useCallback)(function handleToolsChange(isOpen, skipFocusControl) {
    setIsToolsOpen(isOpen);
    if (!skipFocusControl) {
      focusToolsButtons({ force: false });
    }
    fireNonCancelableEvent(props2.onToolsChange, { open: isOpen });
  }, [props2.onToolsChange, setIsToolsOpen, focusToolsButtons]);
  const [splitPanelMaxWidth, setSplitPanelMaxWidth] = (0, import_react117.useState)(SPLIT_PANEL_MIN_WIDTH);
  const [isSplitPanelOpen, setIsSplitPanelOpen] = useControllable2(props2.splitPanelOpen, props2.onSplitPanelToggle, false, { componentName: "AppLayout", controlledProp: "splitPanelOpen", changeHandler: "onSplitPanelToggle" });
  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable2(props2.splitPanelPreferences, props2.onSplitPanelPreferencesChange, void 0, {
    componentName: "AppLayout",
    controlledProp: "splitPanelPreferences",
    changeHandler: "onSplitPanelPreferencesChange"
  });
  const { refs: splitPanelRefs, setLastInteraction: setSplitPanelLastInteraction } = useSplitPanelFocusControl([
    splitPanelPreferences,
    isSplitPanelOpen
  ]);
  const handleSplitPanelClick = (0, import_react117.useCallback)(function handleSplitPanelChange() {
    setIsSplitPanelOpen(!isSplitPanelOpen);
    setSplitPanelLastInteraction({ type: isSplitPanelOpen ? "close" : "open" });
    fireNonCancelableEvent(props2.onSplitPanelToggle, { open: !isSplitPanelOpen });
  }, [props2.onSplitPanelToggle, isSplitPanelOpen, setIsSplitPanelOpen, setSplitPanelLastInteraction]);
  const isSplitPanelForcedPosition = shouldSplitPanelBeForcedToBottom({
    isMobile,
    availableWidthForSplitPanel: splitPanelMaxWidth
  });
  const splitPanelPosition = getSplitPanelPosition(isSplitPanelForcedPosition, splitPanelPreferences);
  const [splitPanelReportedSize, setSplitPanelReportedSize] = (0, import_react117.useState)(0);
  const [splitPanelReportedHeaderHeight, setSplitPanelReportedHeaderHeight] = (0, import_react117.useState)(0);
  const [splitPanelToggle, setSplitPanelToggle] = (0, import_react117.useState)({
    displayed: false,
    ariaLabel: void 0
  });
  const splitPanelDisplayed = !!(splitPanelToggle.displayed || isSplitPanelOpen) && !!splitPanel;
  const splitPanelControlId = useUniqueId("split-panel-");
  const toolsControlId = useUniqueId("tools-");
  const [splitPanelSize, setSplitPanelSize] = useControllable2(props2.splitPanelSize, props2.onSplitPanelResize, getSplitPanelDefaultSize(splitPanelPosition), { componentName: "AppLayout", controlledProp: "splitPanelSize", changeHandler: "onSplitPanelResize" });
  const handleSplitPanelResize = (0, import_react117.useCallback)((size) => {
    setSplitPanelSize(size);
    fireNonCancelableEvent(props2.onSplitPanelResize, { size });
  }, [props2.onSplitPanelResize, setSplitPanelSize]);
  const handleSplitPanelPreferencesChange = (0, import_react117.useCallback)(function handleSplitPanelChange(detail) {
    setSplitPanelPreferences(detail);
    setSplitPanelLastInteraction({ type: "position" });
    fireNonCancelableEvent(props2.onSplitPanelPreferencesChange, detail);
  }, [props2.onSplitPanelPreferencesChange, setSplitPanelPreferences, setSplitPanelLastInteraction]);
  const _f = useDrawers(props2, props2.ariaLabels, {
    disableDrawersMerge: true,
    ariaLabels: props2.ariaLabels,
    toolsHide,
    toolsOpen: isToolsOpen,
    tools: props2.tools,
    toolsWidth,
    onToolsToggle: handleToolsClick
  }), { drawers, activeDrawer, activeDrawerId, minDrawerSize: drawersMinWidth, onActiveDrawerChange, onActiveDrawerResize, activeDrawerSize } = _f, drawersProps = __rest(_f, ["drawers", "activeDrawer", "activeDrawerId", "minDrawerSize", "onActiveDrawerChange", "onActiveDrawerResize", "activeDrawerSize"]);
  const [drawersMaxWidth, setDrawersMaxWidth] = (0, import_react117.useState)(toolsWidth);
  const hasDrawers = !!drawers && drawers.length > 0;
  const { refs: drawersRefs, setFocus: focusDrawersButtons, loseFocus: loseDrawersFocus } = useFocusControl(!!activeDrawerId, true, activeDrawerId);
  const drawerRef = (0, import_react117.useRef)(null);
  const { resizeHandle, drawerSize } = use_resize_default(drawerRef, {
    onActiveDrawerResize,
    activeDrawerSize,
    activeDrawer,
    drawersRefs,
    isToolsOpen,
    drawersMaxWidth,
    drawersMinWidth
  });
  const handleDrawersClick = (id, skipFocusControl) => {
    const newActiveDrawerId = id !== activeDrawerId ? id : null;
    onActiveDrawerChange(newActiveDrawerId, { initiatedByUserAction: true });
    if (!skipFocusControl) {
      focusDrawersButtons();
    }
  };
  let drawersTriggerCount = drawers ? drawers.length : !toolsHide ? 1 : 0;
  if (splitPanelDisplayed && splitPanelPosition === "side") {
    drawersTriggerCount++;
  }
  const hasOpenDrawer = !!activeDrawerId || !toolsHide && isToolsOpen || splitPanelDisplayed && splitPanelPosition === "side" && isSplitPanelOpen;
  const hasDrawerViewportOverlay = isMobile && (!!activeDrawerId || !navigationHide && navigationOpen || !toolsHide && isToolsOpen);
  const layoutElement = (0, import_react117.useRef)(null);
  const mainElement = (0, import_react117.useRef)(null);
  const [mainOffsetLeft, setMainOffsetLeft] = (0, import_react117.useState)(0);
  const { hasBackgroundOverlap, updateBackgroundOverlapHeight } = useBackgroundOverlap({
    contentHeader: props2.contentHeader,
    disableContentHeaderOverlap: props2.disableContentHeaderOverlap,
    layoutElement
  });
  (0, import_react117.useLayoutEffect)(function handleMainOffsetLeft() {
    const offsetInlineStart = (mainElement === null || mainElement === void 0 ? void 0 : mainElement.current) ? getOffsetInlineStart(mainElement === null || mainElement === void 0 ? void 0 : mainElement.current) : 0;
    setMainOffsetLeft(offsetInlineStart);
  }, [placement.inlineSize, navigationOpen, isToolsOpen, splitPanelReportedSize]);
  (0, import_react117.useEffect)(function handleBodyScroll() {
    if (isMobile && (navigationOpen || isToolsOpen || !!activeDrawer)) {
      document.body.classList.add(styles_css_default41["block-body-scroll"]);
    } else {
      document.body.classList.remove(styles_css_default41["block-body-scroll"]);
    }
    return function cleanup() {
      document.body.classList.remove(styles_css_default41["block-body-scroll"]);
    };
  }, [isMobile, navigationOpen, isToolsOpen, activeDrawer]);
  const [notificationsHeight, setNotificationsHeight] = (0, import_react117.useState)(0);
  const hasNotificationsContent = notificationsHeight > 0;
  let offsetBottom = placement.insetBlockEnd;
  if (splitPanelDisplayed && splitPanelPosition === "bottom") {
    if (isSplitPanelOpen) {
      offsetBottom += splitPanelReportedSize;
    } else {
      offsetBottom += splitPanelReportedHeaderHeight;
    }
  }
  (0, import_react117.useLayoutEffect)(function handleSplitPanelMaxWidth() {
    const contentGapRight = 50;
    const toolsFormOffsetWidth = 120;
    const getPanelOffsetWidth = () => {
      if (drawers) {
        return activeDrawerId ? drawerSize : 0;
      }
      return isToolsOpen ? toolsWidth : 0;
    };
    setSplitPanelMaxWidth(placement.inlineSize - mainOffsetLeft - minContentWidth - contentGapRight - toolsFormOffsetWidth - getPanelOffsetWidth());
    setDrawersMaxWidth(placement.inlineSize - mainOffsetLeft - minContentWidth - contentGapRight - toolsFormOffsetWidth);
  }, [
    activeDrawerId,
    drawerSize,
    drawers,
    navigationOpen,
    isToolsOpen,
    placement.inlineSize,
    mainOffsetLeft,
    minContentWidth,
    toolsWidth
  ]);
  (0, import_react117.useImperativeHandle)(forwardRef32, function createImperativeHandle() {
    return {
      closeNavigationIfNecessary: function() {
        if (isMobile) {
          handleNavigationClick({ isOpen: false, autoFocus: true });
        }
      },
      openTools: function() {
        handleToolsClick(true, hasDrawers);
        if (hasDrawers) {
          focusDrawersButtons({ force: true });
        }
      },
      focusToolsClose: () => {
        if (hasDrawers) {
          focusDrawersButtons({ force: true });
        } else {
          focusToolsButtons({ force: true });
        }
      },
      focusActiveDrawer: () => focusDrawersButtons({ force: true }),
      focusSplitPanel: () => {
        var _a3;
        return (_a3 = splitPanelRefs.slider.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
      }
    };
  }, [
    isMobile,
    handleNavigationClick,
    handleToolsClick,
    focusToolsButtons,
    focusDrawersButtons,
    splitPanelRefs.slider,
    hasDrawers
  ]);
  return import_react117.default.createElement(
    AppLayoutInternalsContext.Provider,
    { value: Object.assign(Object.assign({}, props2), {
      activeDrawerId,
      contentType,
      drawers,
      drawersAriaLabel: (_c = drawersProps.ariaLabelsWithDrawers) === null || _c === void 0 ? void 0 : _c.drawers,
      drawersOverflowAriaLabel: (_d = drawersProps.ariaLabelsWithDrawers) === null || _d === void 0 ? void 0 : _d.drawersOverflow,
      drawersOverflowWithBadgeAriaLabel: (_e = drawersProps.ariaLabelsWithDrawers) === null || _e === void 0 ? void 0 : _e.drawersOverflowWithBadge,
      drawersRefs,
      drawersMinWidth,
      drawersMaxWidth,
      drawerSize,
      drawerRef,
      resizeHandle,
      drawersTriggerCount,
      headerHeight: placement.insetBlockStart,
      footerHeight: placement.insetBlockEnd,
      hasDrawerViewportOverlay,
      handleDrawersClick,
      handleNavigationClick: (isOpen) => handleNavigationClick({ isOpen, autoFocus: true }),
      handleSplitPanelClick,
      handleSplitPanelPreferencesChange,
      handleSplitPanelResize,
      handleToolsClick,
      hasBackgroundOverlap,
      hasNotificationsContent,
      hasOpenDrawer,
      isBackgroundOverlapDisabled: props2.disableContentHeaderOverlap || !hasBackgroundOverlap,
      isMobile,
      isSplitPanelForcedPosition,
      isSplitPanelOpen,
      isToolsOpen,
      layoutElement,
      layoutWidth: placement.inlineSize,
      loseToolsFocus,
      loseDrawersFocus,
      mainElement,
      mainOffsetLeft,
      maxContentWidth,
      minContentWidth,
      navigationHide,
      navigationRefs,
      notificationsHeight,
      setNotificationsHeight,
      offsetBottom,
      setSplitPanelReportedSize,
      setSplitPanelReportedHeaderHeight,
      splitPanel,
      splitPanelControlId,
      splitPanelDisplayed,
      splitPanelMaxWidth,
      splitPanelPosition,
      splitPanelPreferences,
      splitPanelReportedSize,
      splitPanelReportedHeaderHeight,
      splitPanelSize,
      splitPanelToggle,
      setSplitPanelToggle,
      splitPanelRefs,
      toolsControlId,
      toolsHide,
      toolsOpen: isToolsOpen,
      toolsWidth,
      toolsRefs,
      __embeddedViewMode
    }) },
    import_react117.default.createElement(DynamicOverlapContext.Provider, { value: updateBackgroundOverlapHeight }, children2)
  );
});

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/background.js
function Background() {
  const { breadcrumbs, hasBackgroundOverlap, hasNotificationsContent, isMobile, headerVariant } = useAppLayoutInternals();
  if (!hasNotificationsContent && (!breadcrumbs || isMobile) && !hasBackgroundOverlap) {
    return null;
  }
  return import_react118.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default41.background, { [highContrastHeaderClassName]: headerVariant === "high-contrast" }) },
    import_react118.default.createElement("div", { className: styles_css_default41["scrolling-background"] })
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/breadcrumbs.js
var import_react119 = __toESM(require_react());
function Breadcrumbs() {
  const { breadcrumbs, isMobile, headerVariant } = useAppLayoutInternals();
  if (isMobile || !breadcrumbs) {
    return null;
  }
  return import_react119.default.createElement("div", { className: clsx_m_default(styles_css_default41.breadcrumbs, styles_css_default20.breadcrumbs, {
    [highContrastHeaderClassName]: headerVariant === "high-contrast"
  }) }, breadcrumbs);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/drawers.js
var import_react121 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/trigger-button.js
var import_react120 = __toESM(require_react());
function TriggerButton({ ariaLabel, className: className2, iconName, iconSvg, ariaExpanded, ariaControls, onClick, testId, disabled = false, badge, selected = false, highContrastHeader }, ref) {
  const { isMobile } = useAppLayoutInternals();
  return import_react120.default.createElement("div", { className: clsx_m_default(styles_css_default41["trigger-wrapper"], !highContrastHeader && styles_css_default41["remove-high-contrast-header"]) }, isMobile ? import_react120.default.createElement(InternalButton, { ariaExpanded, ariaLabel, ariaControls, className: className2, disabled, ref, formAction: "none", iconName, iconSvg, badge, onClick, variant: "icon", nativeButtonAttributes: Object.assign({ "aria-haspopup": true }, testId && {
    "data-testid": testId
  }) }) : import_react120.default.createElement(
    import_react120.default.Fragment,
    null,
    import_react120.default.createElement(
      "button",
      { "aria-expanded": ariaExpanded, "aria-controls": ariaControls, "aria-haspopup": true, "aria-label": ariaLabel, "aria-disabled": disabled, disabled, className: clsx_m_default(styles_css_default41.trigger, styles_css_default41["trigger-button-styles"], {
        [styles_css_default41.selected]: selected,
        [styles_css_default41.badge]: badge
      }, className2), onClick, ref, type: "button", "data-testid": testId },
      import_react120.default.createElement("span", { className: clsx_m_default(badge && clsx_m_default(styles_css_default41["trigger-badge-wrapper"], styles_css_default41["trigger-button-styles"])) }, (iconName || iconSvg) && import_react120.default.createElement(internal_default, { name: iconName, svg: iconSvg }))
    ),
    badge && import_react120.default.createElement("div", { className: styles_css_default41.dot })
  ));
}
var trigger_button_default = import_react120.default.forwardRef(TriggerButton);

// node_modules/@cloudscape-design/components/split-panel/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/split-panel/test-classes/styles.scoped.css";
var styles_css_default42 = {
  "root": "awsui_root_rjqu5_1kbym_5",
  "header-actions": "awsui_header-actions_rjqu5_1kbym_6",
  "header-before": "awsui_header-before_rjqu5_1kbym_7",
  "header-description": "awsui_header-description_rjqu5_1kbym_8",
  "header-info": "awsui_header-info_rjqu5_1kbym_9",
  "header-text": "awsui_header-text_rjqu5_1kbym_10",
  "open-button": "awsui_open-button_rjqu5_1kbym_11",
  "close-button": "awsui_close-button_rjqu5_1kbym_12",
  "preferences-button": "awsui_preferences-button_rjqu5_1kbym_13",
  "slider": "awsui_slider_rjqu5_1kbym_14",
  "open-position-bottom": "awsui_open-position-bottom_rjqu5_1kbym_15",
  "open-position-side": "awsui_open-position-side_rjqu5_1kbym_16"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/drawers.js
var VISIBLE_MOBILE_TOOLBAR_TRIGGERS_LIMIT = 2;
function Drawers() {
  const { disableBodyScroll, drawers, drawersTriggerCount, hasDrawerViewportOverlay, hasOpenDrawer, navigationOpen, navigationHide, isMobile } = useAppLayoutInternals();
  const isUnfocusable = hasDrawerViewportOverlay && navigationOpen && !navigationHide;
  if (!drawers || drawersTriggerCount === 0) {
    return null;
  }
  return import_react121.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default41["drawers-container"], {
      [styles_css_default41["disable-body-scroll"]]: disableBodyScroll,
      [styles_css_default41["has-open-drawer"]]: hasOpenDrawer,
      [styles_css_default41.unfocusable]: isUnfocusable
    }) },
    import_react121.default.createElement(split_panel_default.Side, null),
    import_react121.default.createElement(ActiveDrawer, null),
    !isMobile && import_react121.default.createElement(DesktopTriggers, null)
  );
}
function ActiveDrawer() {
  var _a2, _b, _c, _d;
  const { activeDrawerId, ariaLabels, drawers, drawersRefs, handleDrawersClick, handleToolsClick, hasDrawerViewportOverlay, isMobile, navigationOpen, navigationHide, loseDrawersFocus, resizeHandle, drawerSize, drawersMinWidth, drawersMaxWidth, drawerRef } = useAppLayoutInternals();
  const activeDrawer = (_a2 = drawers === null || drawers === void 0 ? void 0 : drawers.find((item) => item.id === activeDrawerId)) !== null && _a2 !== void 0 ? _a2 : null;
  const computedAriaLabels = {
    closeButton: activeDrawerId ? (_b = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,
    content: activeDrawerId ? (_c = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.drawerName : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools
  };
  const isHidden = !activeDrawerId;
  const isUnfocusable = isHidden || hasDrawerViewportOverlay && navigationOpen && !navigationHide;
  const isToolsDrawer = activeDrawerId === TOOLS_DRAWER_ID;
  const toolsContent = (_d = drawers === null || drawers === void 0 ? void 0 : drawers.find((drawer) => drawer.id === TOOLS_DRAWER_ID)) === null || _d === void 0 ? void 0 : _d.content;
  const size = getLimitedValue(drawersMinWidth, drawerSize, drawersMaxWidth);
  return import_react121.default.createElement(
    "aside",
    { id: activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : void 0, "aria-hidden": isHidden, "aria-label": computedAriaLabels.content, className: clsx_m_default(styles_css_default41.drawer, {
      [styles_css_default41["is-drawer-open"]]: activeDrawerId,
      [styles_css_default41.unfocusable]: isUnfocusable,
      [styles_css_default20["active-drawer"]]: activeDrawerId,
      [styles_css_default20.tools]: isToolsDrawer
    }), style: Object.assign({}, !isMobile && drawerSize && { [custom_css_properties_default.drawerSize]: `${size}px` }), ref: drawerRef, onBlur: (e3) => {
      if (!e3.relatedTarget || !e3.currentTarget.contains(e3.relatedTarget)) {
        loseDrawersFocus();
      }
    } },
    !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && import_react121.default.createElement("div", { className: styles_css_default41["drawer-slider"] }, resizeHandle),
    import_react121.default.createElement(
      "div",
      { className: styles_css_default41["drawer-content-container"] },
      import_react121.default.createElement(
        "div",
        { className: styles_css_default41["drawer-close-button"] },
        import_react121.default.createElement(InternalButton, { ariaLabel: computedAriaLabels.closeButton, className: clsx_m_default({
          [styles_css_default20["active-drawer-close-button"]]: activeDrawerId,
          [styles_css_default20["tools-close"]]: isToolsDrawer
        }), formAction: "none", iconName: isMobile ? "close" : "angle-right", onClick: () => {
          handleDrawersClick(activeDrawerId);
          handleToolsClick(false);
        }, ref: drawersRefs.close, variant: "icon" })
      ),
      toolsContent && import_react121.default.createElement("div", { className: clsx_m_default(styles_css_default41["drawer-content"], activeDrawerId !== TOOLS_DRAWER_ID && styles_css_default41["drawer-content-hidden"]) }, toolsContent),
      activeDrawerId !== TOOLS_DRAWER_ID && import_react121.default.createElement("div", { className: styles_css_default41["drawer-content"] }, activeDrawerId && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content))
    )
  );
}
function DesktopTriggers() {
  const { activeDrawerId, drawers, drawersAriaLabel, drawersOverflowAriaLabel, drawersOverflowWithBadgeAriaLabel, drawersRefs, drawersTriggerCount, handleDrawersClick, handleSplitPanelClick, hasOpenDrawer, isSplitPanelOpen, splitPanel, splitPanelControlId, splitPanelDisplayed, splitPanelPosition, splitPanelRefs, splitPanelToggle, splitPanelReportedHeaderHeight, splitPanelReportedSize, headerVariant } = useAppLayoutInternals();
  const hasMultipleTriggers = drawersTriggerCount > 1;
  const hasSplitPanel = splitPanel && splitPanelDisplayed && splitPanelPosition === "side";
  const previousActiveDrawerId = (0, import_react121.useRef)(activeDrawerId);
  const [containerHeight, triggersContainerRef] = useContainerQuery((rect) => rect.contentBoxHeight);
  if (activeDrawerId) {
    previousActiveDrawerId.current = activeDrawerId;
  }
  const splitPanelHeight = isSplitPanelOpen && splitPanelPosition === "bottom" ? splitPanelReportedSize : splitPanelReportedHeaderHeight;
  const getIndexOfOverflowItem = () => {
    if (containerHeight) {
      const ITEM_HEIGHT = 48;
      const overflowSpot = activeDrawerId && isSplitPanelOpen ? (containerHeight - splitPanelReportedHeaderHeight) / 1.5 : (containerHeight - splitPanelHeight) / 1.5;
      const index = Math.floor(overflowSpot / ITEM_HEIGHT);
      let splitPanelItem = 0;
      if (hasSplitPanel && splitPanelToggle.displayed) {
        splitPanelItem = 1;
      }
      return index - splitPanelItem;
    }
    return 0;
  };
  const { visibleItems, overflowItems } = splitItems(drawers !== null && drawers !== void 0 ? drawers : void 0, getIndexOfOverflowItem(), activeDrawerId);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  return import_react121.default.createElement(
    "aside",
    { className: clsx_m_default(styles_css_default41["drawers-desktop-triggers-container"], {
      [styles_css_default41["has-multiple-triggers"]]: hasMultipleTriggers,
      [styles_css_default41["has-open-drawer"]]: hasOpenDrawer
    }), "aria-label": drawersAriaLabel, ref: triggersContainerRef, role: "region" },
    import_react121.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default41["drawers-trigger-content"], {
        [styles_css_default41["has-multiple-triggers"]]: hasMultipleTriggers,
        [styles_css_default41["has-open-drawer"]]: hasOpenDrawer
      }), "aria-label": drawersAriaLabel, role: "toolbar", "aria-orientation": "vertical" },
      visibleItems.map((item) => {
        var _a2, _b, _c;
        const isForPreviousActiveDrawer = (previousActiveDrawerId === null || previousActiveDrawerId === void 0 ? void 0 : previousActiveDrawerId.current) === item.id;
        return import_react121.default.createElement(trigger_button_default, { ariaLabel: (_a2 = item.ariaLabels) === null || _a2 === void 0 ? void 0 : _a2.triggerButton, ariaExpanded: item.id === activeDrawerId, ariaControls: activeDrawerId === item.id ? item.id : void 0, className: clsx_m_default(styles_css_default41["drawers-trigger"], styles_css_default20["drawers-trigger"], {
          [styles_css_default20["drawers-trigger-with-badge"]]: item.badge,
          [styles_css_default20["tools-toggle"]]: item.id === TOOLS_DRAWER_ID
        }), iconName: (_b = item === null || item === void 0 ? void 0 : item.trigger) === null || _b === void 0 ? void 0 : _b.iconName, iconSvg: (_c = item === null || item === void 0 ? void 0 : item.trigger) === null || _c === void 0 ? void 0 : _c.iconSvg, key: item.id, onClick: () => handleDrawersClick(item.id), ref: isForPreviousActiveDrawer ? drawersRefs.toggle : void 0, badge: item.badge, testId: `awsui-app-layout-trigger-${item.id}`, highContrastHeader: headerVariant === "high-contrast", selected: item.id === activeDrawerId });
      }),
      overflowItems.length > 0 && import_react121.default.createElement(OverflowMenu, { items: overflowItems, ariaLabel: overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel, customTriggerBuilder: ({ onClick, triggerRef, ariaLabel, ariaExpanded, testUtilsClass }) => import_react121.default.createElement(trigger_button_default, { ref: triggerRef, ariaLabel, ariaExpanded, badge: overflowMenuHasBadge, className: clsx_m_default(styles_css_default41["drawers-trigger"], styles_css_default20["drawers-trigger"], testUtilsClass), iconName: "ellipsis", onClick, highContrastHeader: headerVariant === "high-contrast" }), onItemClick: ({ detail }) => {
        handleDrawersClick(detail.id);
      } }),
      hasSplitPanel && splitPanelToggle.displayed && import_react121.default.createElement(trigger_button_default, { ariaLabel: splitPanelToggle.ariaLabel, ariaControls: splitPanelControlId, ariaExpanded: !!isSplitPanelOpen, className: clsx_m_default(styles_css_default41["drawers-trigger"], styles_css_default42["open-button"]), iconName: "view-vertical", onClick: () => handleSplitPanelClick(), selected: hasSplitPanel && isSplitPanelOpen, ref: splitPanelRefs.toggle, highContrastHeader: headerVariant === "high-contrast" })
    )
  );
}
function MobileTriggers() {
  const { activeDrawerId, drawers, drawersAriaLabel, drawersOverflowAriaLabel, drawersOverflowWithBadgeAriaLabel, drawersRefs, handleDrawersClick, hasDrawerViewportOverlay, headerVariant } = useAppLayoutInternals();
  const previousActiveDrawerId = (0, import_react121.useRef)(activeDrawerId);
  if (!drawers) {
    return null;
  }
  if (activeDrawerId) {
    previousActiveDrawerId.current = activeDrawerId;
  }
  const { visibleItems, overflowItems } = splitItems(drawers, VISIBLE_MOBILE_TOOLBAR_TRIGGERS_LIMIT, activeDrawerId);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  return import_react121.default.createElement(
    "aside",
    { "aria-hidden": hasDrawerViewportOverlay, className: clsx_m_default({
      [styles_css_default41.unfocusable]: hasDrawerViewportOverlay
    }), "aria-label": drawersAriaLabel, role: "region" },
    import_react121.default.createElement(
      "div",
      { className: styles_css_default41["drawers-mobile-triggers-container"], "aria-label": drawersAriaLabel, role: "toolbar", "aria-orientation": "horizontal" },
      visibleItems.map((item) => {
        var _a2, _b, _c;
        const isForPreviousActiveDrawer = (previousActiveDrawerId === null || previousActiveDrawerId === void 0 ? void 0 : previousActiveDrawerId.current) === item.id;
        return import_react121.default.createElement(trigger_button_default, { ariaExpanded: item.id === activeDrawerId, ariaLabel: (_a2 = item.ariaLabels) === null || _a2 === void 0 ? void 0 : _a2.triggerButton, ariaControls: activeDrawerId === item.id ? item.id : void 0, className: clsx_m_default(styles_css_default41["drawers-trigger"], styles_css_default20["drawers-trigger"], {
          [styles_css_default20["drawers-trigger-with-badge"]]: item.badge,
          [styles_css_default20["tools-toggle"]]: item.id === TOOLS_DRAWER_ID
        }), disabled: hasDrawerViewportOverlay, ref: isForPreviousActiveDrawer ? drawersRefs.toggle : void 0, iconName: (_b = item === null || item === void 0 ? void 0 : item.trigger) === null || _b === void 0 ? void 0 : _b.iconName, iconSvg: (_c = item === null || item === void 0 ? void 0 : item.trigger) === null || _c === void 0 ? void 0 : _c.iconSvg, badge: item.badge, key: item.id, onClick: () => handleDrawersClick(item.id), testId: `awsui-app-layout-trigger-${item.id}`, highContrastHeader: headerVariant === "high-contrast", selected: item.id === activeDrawerId });
      }),
      overflowItems.length > 0 && import_react121.default.createElement(OverflowMenu, { items: overflowItems, ariaLabel: overflowMenuHasBadge ? drawersOverflowWithBadgeAriaLabel : drawersOverflowAriaLabel, onItemClick: ({ detail }) => handleDrawersClick(detail.id) })
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/header.js
var import_react122 = __toESM(require_react());
function Header() {
  const { breadcrumbs, contentHeader, hasDrawerViewportOverlay, hasNotificationsContent, headerVariant } = useAppLayoutInternals();
  if (!contentHeader) {
    return null;
  }
  return import_react122.default.createElement("header", { className: clsx_m_default(styles_css_default41.content, {
    [styles_css_default41["has-breadcrumbs"]]: breadcrumbs,
    [styles_css_default41["has-notifications-content"]]: hasNotificationsContent,
    [styles_css_default41.unfocusable]: hasDrawerViewportOverlay,
    [highContrastHeaderClassName]: headerVariant === "high-contrast"
  }) }, contentHeader);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/layout.js
var import_react124 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/utils/use-global-scroll-padding.js
var import_react123 = __toESM(require_react());
function useGlobalScrollPadding(headerHeight) {
  (0, import_react123.useEffect)(() => {
    const scrollingElement = document.scrollingElement;
    if (scrollingElement instanceof HTMLElement) {
      scrollingElement.style.scrollPaddingTop = `${headerHeight}px`;
    }
  }, [headerHeight]);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/layout.js
function Layout({ children: children2 }) {
  const { breadcrumbs, contentHeader, contentType, disableBodyScroll, disableContentPaddings, drawersTriggerCount, footerHeight, hasNotificationsContent, hasOpenDrawer, headerHeight, isBackgroundOverlapDisabled, isMobile, navigationOpen, layoutElement, layoutWidth, mainOffsetLeft, maxContentWidth, minContentWidth, navigationHide, notificationsHeight, __embeddedViewMode, splitPanelPosition, splitPanelDisplayed } = useAppLayoutInternals();
  useGlobalScrollPadding(headerHeight);
  const contentFirstChild = getContentFirstChild(breadcrumbs, contentHeader, hasNotificationsContent, isMobile);
  const hasContentGapLeft = navigationOpen || navigationHide;
  const hasContentGapRight = drawersTriggerCount === 0 || hasOpenDrawer;
  return import_react124.default.createElement("main", { className: clsx_m_default(styles_css_default41.layout, styles_css_default41[`content-first-child-${contentFirstChild}`], styles_css_default41[`content-type-${contentType}`], styles_css_default41[`split-panel-position-${splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : "bottom"}`], {
    [styles_css_default41["disable-body-scroll"]]: disableBodyScroll,
    [styles_css_default20["disable-body-scroll-root"]]: disableBodyScroll,
    [styles_css_default41["disable-content-paddings"]]: disableContentPaddings,
    [styles_css_default41["has-breadcrumbs"]]: breadcrumbs && !isMobile,
    [styles_css_default41["has-content-gap-left"]]: hasContentGapLeft,
    [styles_css_default41["has-content-gap-right"]]: hasContentGapRight,
    [styles_css_default41["has-header"]]: contentHeader,
    [styles_css_default41["has-max-content-width"]]: maxContentWidth && maxContentWidth > 0,
    [styles_css_default41["has-split-panel"]]: splitPanelDisplayed,
    [styles_css_default41["is-overlap-disabled"]]: isBackgroundOverlapDisabled,
    [styles_css_default41["is-hide-mobile-toolbar"]]: __embeddedViewMode,
    [styles_css_default41["has-left-toggles-gutter"]]: !(isMobile || navigationHide || navigationOpen),
    [styles_css_default41["has-right-toggles-gutter"]]: !isMobile && !hasContentGapRight
  }, styles_css_default20.root), ref: layoutElement, style: Object.assign(Object.assign(Object.assign({ [custom_css_properties_default.headerHeight]: `${headerHeight}px`, [custom_css_properties_default.footerHeight]: `${footerHeight}px`, [custom_css_properties_default.layoutWidth]: `${layoutWidth}px`, [custom_css_properties_default.mainOffsetLeft]: `${mainOffsetLeft}px` }, maxContentWidth && { [custom_css_properties_default.maxContentWidth]: `${maxContentWidth}px` }), minContentWidth && { [custom_css_properties_default.minContentWidth]: `${minContentWidth}px` }), { [custom_css_properties_default.notificationsHeight]: `${notificationsHeight}px` }) }, children2);
}
function getContentFirstChild(breadcrumbs, contentHeader, hasNotificationsContent, isMobile) {
  let contentFirstChild = "main";
  if (hasNotificationsContent) {
    contentFirstChild = "notifications";
  } else if (breadcrumbs && !isMobile) {
    contentFirstChild = "breadcrumbs";
  } else if (contentHeader) {
    contentFirstChild = "header";
  }
  return contentFirstChild;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/main.js
var import_react125 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/generated/styles/tokens.js
var colorChartsThresholdNeutral = "var(--color-charts-threshold-neutral-pd7kh4, #656871)";
var colorChartsPaletteCategorical1 = "var(--color-charts-palette-categorical-1-xu0deg, #688ae8)";
var colorChartsPaletteCategorical2 = "var(--color-charts-palette-categorical-2-ktit09, #c33d69)";
var colorChartsPaletteCategorical3 = "var(--color-charts-palette-categorical-3-g0srj0, #2ea597)";
var colorChartsPaletteCategorical4 = "var(--color-charts-palette-categorical-4-5vauwp, #8456ce)";
var colorChartsPaletteCategorical5 = "var(--color-charts-palette-categorical-5-3v8ery, #e07941)";
var colorChartsPaletteCategorical6 = "var(--color-charts-palette-categorical-6-ztdd8d, #3759ce)";
var colorChartsPaletteCategorical7 = "var(--color-charts-palette-categorical-7-3j5o6w, #962249)";
var colorChartsPaletteCategorical8 = "var(--color-charts-palette-categorical-8-c5r39m, #096f64)";
var colorChartsPaletteCategorical9 = "var(--color-charts-palette-categorical-9-8n6iuv, #6237a7)";
var colorChartsPaletteCategorical10 = "var(--color-charts-palette-categorical-10-opta0w, #a84401)";
var colorChartsPaletteCategorical11 = "var(--color-charts-palette-categorical-11-b2r7jc, #273ea5)";
var colorChartsPaletteCategorical12 = "var(--color-charts-palette-categorical-12-b5drtm, #780d35)";
var colorChartsPaletteCategorical13 = "var(--color-charts-palette-categorical-13-c69xg9, #03524a)";
var colorChartsPaletteCategorical14 = "var(--color-charts-palette-categorical-14-db19x8, #4a238b)";
var colorChartsPaletteCategorical15 = "var(--color-charts-palette-categorical-15-8z8vjw, #7e3103)";
var colorChartsPaletteCategorical16 = "var(--color-charts-palette-categorical-16-549jkl, #1b2b88)";
var colorChartsPaletteCategorical17 = "var(--color-charts-palette-categorical-17-nrio7t, #ce567c)";
var colorChartsPaletteCategorical18 = "var(--color-charts-palette-categorical-18-tm902v, #003e38)";
var colorChartsPaletteCategorical19 = "var(--color-charts-palette-categorical-19-ujcr86, #9469d6)";
var colorChartsPaletteCategorical20 = "var(--color-charts-palette-categorical-20-h55e4g, #602400)";
var colorChartsPaletteCategorical21 = "var(--color-charts-palette-categorical-21-vs0u8l, #4066df)";
var colorChartsPaletteCategorical22 = "var(--color-charts-palette-categorical-22-6klt3l, #a32952)";
var colorChartsPaletteCategorical23 = "var(--color-charts-palette-categorical-23-3zpkdt, #0d7d70)";
var colorChartsPaletteCategorical24 = "var(--color-charts-palette-categorical-24-z9a4uk, #6b40b2)";
var colorChartsPaletteCategorical25 = "var(--color-charts-palette-categorical-25-tgdsk2, #bc4d01)";
var colorChartsPaletteCategorical26 = "var(--color-charts-palette-categorical-26-lo8zn9, #2c46b1)";
var colorChartsPaletteCategorical27 = "var(--color-charts-palette-categorical-27-bruhsa, #81143b)";
var colorChartsPaletteCategorical28 = "var(--color-charts-palette-categorical-28-6b00fb, #045b52)";
var colorChartsPaletteCategorical29 = "var(--color-charts-palette-categorical-29-aurmid, #512994)";
var colorChartsPaletteCategorical30 = "var(--color-charts-palette-categorical-30-fjnmd7, #8a3603)";
var colorChartsPaletteCategorical31 = "var(--color-charts-palette-categorical-31-7zcct5, #1f3191)";
var colorChartsPaletteCategorical32 = "var(--color-charts-palette-categorical-32-rrda6y, #da7596)";
var colorChartsPaletteCategorical33 = "var(--color-charts-palette-categorical-33-2v0mzv, #01443e)";
var colorChartsPaletteCategorical34 = "var(--color-charts-palette-categorical-34-g9a9q3, #a783e1)";
var colorChartsPaletteCategorical35 = "var(--color-charts-palette-categorical-35-u0w821, #692801)";
var colorChartsPaletteCategorical36 = "var(--color-charts-palette-categorical-36-tthuf8, #5978e3)";
var colorChartsPaletteCategorical37 = "var(--color-charts-palette-categorical-37-y588bl, #b1325c)";
var colorChartsPaletteCategorical38 = "var(--color-charts-palette-categorical-38-qdh97u, #1c8e81)";
var colorChartsPaletteCategorical39 = "var(--color-charts-palette-categorical-39-yisq6l, #7749bf)";
var colorChartsPaletteCategorical40 = "var(--color-charts-palette-categorical-40-yeer1v, #cc5f21)";
var colorChartsPaletteCategorical41 = "var(--color-charts-palette-categorical-41-tu9dxw, #314fbf)";
var colorChartsPaletteCategorical42 = "var(--color-charts-palette-categorical-42-q410kp, #8b1b42)";
var colorChartsPaletteCategorical43 = "var(--color-charts-palette-categorical-43-dwew7q, #06645a)";
var colorChartsPaletteCategorical44 = "var(--color-charts-palette-categorical-44-2thp96, #59309d)";
var colorChartsPaletteCategorical45 = "var(--color-charts-palette-categorical-45-6kinj6, #983c02)";
var colorChartsPaletteCategorical46 = "var(--color-charts-palette-categorical-46-iefxfq, #23379b)";
var colorChartsPaletteCategorical47 = "var(--color-charts-palette-categorical-47-9l9wl2, #6f062f)";
var colorChartsPaletteCategorical48 = "var(--color-charts-palette-categorical-48-5s2n0r, #014b44)";
var colorChartsPaletteCategorical49 = "var(--color-charts-palette-categorical-49-bub0l1, #431d84)";
var colorChartsPaletteCategorical50 = "var(--color-charts-palette-categorical-50-utrpu5, #732c02)";
var lineHeightBodyM = "var(--line-height-body-m-2mh3ke, 20px)";
var borderPanelTopWidth = "var(--border-panel-top-width-10990j, 1px)";
var spaceScaledXxs = "var(--space-scaled-xxs-pfm1nx, 4px)";
var spaceScaledS = "var(--space-scaled-s-8ozaad, 12px)";
var spaceXxxs = "var(--space-xxxs-pajhad, 2px)";
var spaceXxs = "var(--space-xxs-hwfkai, 4px)";
var spaceXs = "var(--space-xs-ymlm0b, 8px)";

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/main.js
function Main() {
  const { content, disableBodyScroll, disableContentPaddings, footerHeight, hasDrawerViewportOverlay, navigationOpen, placement, isMobile, isSplitPanelOpen, isToolsOpen, mainElement, notificationsHeight, stickyNotifications, offsetBottom, splitPanelDisplayed, splitPanelPosition, activeDrawerId } = useAppLayoutInternals();
  const splitPanelHeight = offsetBottom - footerHeight;
  return import_react125.default.createElement("div", { className: clsx_m_default(styles_css_default41.container, styles_css_default41[`split-panel-position-${splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : "bottom"}`], {
    [styles_css_default41["disable-content-paddings"]]: disableContentPaddings,
    [styles_css_default41["has-split-panel"]]: splitPanelDisplayed,
    [styles_css_default41["is-navigation-open"]]: navigationOpen,
    [styles_css_default41["is-tools-open"]]: isToolsOpen,
    [styles_css_default41["has-active-drawer"]]: !!activeDrawerId,
    [styles_css_default41["is-split-panel-open"]]: isSplitPanelOpen,
    [styles_css_default41.unfocusable]: hasDrawerViewportOverlay
  }, styles_css_default20.content), ref: mainElement, style: Object.assign({ [custom_css_properties_default.splitPanelHeight]: `${splitPanelHeight}px` }, getStickyOffsetVars(placement.insetBlockStart, offsetBottom, stickyNotifications && notificationsHeight > 0 ? `${spaceXs} + ${notificationsHeight}px` : "0px", `var(${custom_css_properties_default.mobileBarHeight})`, !!disableBodyScroll, isMobile)) }, content);
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/mobile-toolbar.js
var import_react126 = __toESM(require_react());
function MobileToolbar2() {
  var _a2, _b, _c, _d;
  const { ariaLabels, breadcrumbs, drawers, handleNavigationClick, handleToolsClick, hasDrawerViewportOverlay, isMobile, navigationOpen, __embeddedViewMode, isToolsOpen, navigationHide, navigationRefs, toolsHide, toolsRefs, headerVariant } = useAppLayoutInternals();
  if (!isMobile || __embeddedViewMode || navigationHide && !breadcrumbs && toolsHide && (!drawers || drawers.length === 0)) {
    return null;
  }
  return import_react126.default.createElement(
    "section",
    { className: clsx_m_default(styles_css_default41["mobile-toolbar"], [styles_css_default20["mobile-bar"]], {
      [styles_css_default41["has-breadcrumbs"]]: breadcrumbs,
      [styles_css_default41.unfocusable]: hasDrawerViewportOverlay,
      [highContrastHeaderClassName]: headerVariant === "high-contrast"
    }, styles_css_default20["mobile-bar"], headerVariant !== "high-contrast" && styles_css_default41["remove-high-contrast-header"]) },
    !navigationHide && import_react126.default.createElement(
      "nav",
      { "aria-hidden": navigationOpen, "aria-label": (_a2 = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _a2 !== void 0 ? _a2 : void 0, "aria-orientation": "horizontal", className: clsx_m_default(styles_css_default41["mobile-toolbar-nav"], { [styles_css_default20["drawer-closed"]]: !navigationOpen }) },
      import_react126.default.createElement(InternalButton, { ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _b !== void 0 ? _b : void 0, ariaExpanded: navigationOpen ? void 0 : false, iconName: "menu", formAction: "none", onClick: () => handleNavigationClick(true), variant: "icon", className: styles_css_default20["navigation-toggle"], ref: navigationRefs.toggle, disabled: hasDrawerViewportOverlay, nativeButtonAttributes: { "aria-haspopup": navigationOpen ? void 0 : true } })
    ),
    breadcrumbs && import_react126.default.createElement("div", { className: clsx_m_default(styles_css_default41["mobile-toolbar-breadcrumbs"], styles_css_default20.breadcrumbs) }, breadcrumbs),
    drawers ? import_react126.default.createElement(MobileTriggers, null) : !toolsHide && import_react126.default.createElement(
      "aside",
      { "aria-hidden": isToolsOpen, "aria-label": (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _c !== void 0 ? _c : void 0, className: clsx_m_default(styles_css_default41["mobile-toolbar-tools"], { [styles_css_default20["drawer-closed"]]: !isToolsOpen }) },
      import_react126.default.createElement(InternalButton, { className: styles_css_default20["tools-toggle"], ariaExpanded: isToolsOpen, disabled: hasDrawerViewportOverlay, ariaLabel: (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle) !== null && _d !== void 0 ? _d : void 0, iconName: "status-info", formAction: "none", onClick: () => handleToolsClick(true), variant: "icon", ref: toolsRefs.toggle, nativeButtonAttributes: { "aria-haspopup": true } })
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/navigation.js
var import_react127 = __toESM(require_react());
function Navigation() {
  const { ariaLabels, disableBodyScroll, handleNavigationClick, hasDrawerViewportOverlay, isMobile, navigationOpen, isToolsOpen, navigation, navigationHide, navigationRefs, navigationWidth, toolsHide, headerVariant } = useAppLayoutInternals();
  if (navigationHide) {
    return null;
  }
  const onNavigationClick = (event) => {
    const hasLink = findUpUntil(event.target, (node) => node.tagName === "A" && !!node.href);
    if (hasLink && isMobile) {
      handleNavigationClick(false);
    }
  };
  const isUnfocusable = hasDrawerViewportOverlay && (!navigationOpen || isToolsOpen && !toolsHide);
  return import_react127.default.createElement(Transition2, { in: navigationOpen }, (state, transitionEventsRef) => {
    var _a2, _b, _c;
    return import_react127.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default41["navigation-container"], {
        [styles_css_default41["disable-body-scroll"]]: disableBodyScroll,
        [styles_css_default41.unfocusable]: isUnfocusable
      }), style: { [custom_css_properties_default.navigationWidth]: `${navigationWidth}px` } },
      !isMobile && import_react127.default.createElement(
        "nav",
        { "aria-hidden": isMobile || navigationOpen, "aria-label": (_a2 = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _a2 !== void 0 ? _a2 : void 0, className: clsx_m_default(styles_css_default41["show-navigation"], {
          [styles_css_default41.animating]: state === "exiting",
          [styles_css_default41["is-navigation-open"]]: navigationOpen
        }), ref: state === "exiting" ? transitionEventsRef : void 0 },
        import_react127.default.createElement(trigger_button_default, { ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle, ariaExpanded: navigationOpen ? void 0 : false, iconName: "menu", className: styles_css_default20["navigation-toggle"], onClick: () => handleNavigationClick(true), ref: navigationRefs.toggle, highContrastHeader: headerVariant === "high-contrast" })
      ),
      import_react127.default.createElement(
        "nav",
        { "aria-label": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _b !== void 0 ? _b : void 0, className: clsx_m_default(styles_css_default41.navigation, styles_css_default20.navigation, {
          [styles_css_default20["drawer-closed"]]: !navigationOpen,
          [styles_css_default41.animating]: state === "entering",
          [styles_css_default41["is-navigation-open"]]: navigationOpen
        }), ref: state !== "exiting" ? transitionEventsRef : void 0, "aria-hidden": !navigationOpen, onClick: onNavigationClick },
        import_react127.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default41["content-container"], styles_css_default41["animated-content"]) },
          import_react127.default.createElement(
            "div",
            { className: styles_css_default41["hide-navigation"] },
            import_react127.default.createElement(InternalButton, { ariaLabel: (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationClose) !== null && _c !== void 0 ? _c : void 0, iconName: isMobile ? "close" : "angle-left", onClick: () => handleNavigationClick(false), variant: "icon", formAction: "none", className: styles_css_default20["navigation-close"], ref: navigationRefs.close })
          ),
          navigation
        )
      )
    );
  });
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/notifications.js
var import_react128 = __toESM(require_react());
function Notifications2() {
  const { notifications } = useAppLayoutInternals();
  if (!notifications) {
    return null;
  }
  return import_react128.default.createElement(NotificationsImplementation, null);
}
function NotificationsImplementation() {
  var _a2;
  const { ariaLabels, hasDrawerViewportOverlay, notifications, setNotificationsHeight, stickyNotifications, headerVariant, hasNotificationsContent } = useAppLayoutInternals();
  const ref = (0, import_react128.useRef)(null);
  useResizeObserver(ref, (entry) => setNotificationsHeight(entry.contentBoxHeight));
  (0, import_react128.useEffect)(() => {
    return () => {
      setNotificationsHeight(0);
    };
  }, []);
  return import_react128.default.createElement(
    "div",
    { role: "region", "aria-label": (_a2 = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.notifications) !== null && _a2 !== void 0 ? _a2 : void 0, className: clsx_m_default(styles_css_default41.notifications, {
      [styles_css_default41["sticky-notifications"]]: stickyNotifications,
      [styles_css_default41["has-notification-content"]]: hasNotificationsContent,
      [styles_css_default41.unfocusable]: hasDrawerViewportOverlay,
      [highContrastHeaderClassName]: headerVariant === "high-contrast",
      [styles_css_default41["high-contrast"]]: headerVariant === "high-contrast"
    }, styles_css_default20.notifications) },
    import_react128.default.createElement("div", { ref }, notifications)
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/tools.js
var import_react129 = __toESM(require_react());
function Tools({ children: children2 }) {
  const { ariaLabels, disableBodyScroll, drawers, handleSplitPanelClick, handleToolsClick, hasDrawerViewportOverlay, isMobile, isSplitPanelOpen, isToolsOpen, loseToolsFocus, splitPanel, splitPanelControlId, splitPanelDisplayed, splitPanelPosition, splitPanelRefs, splitPanelToggle, tools, toolsControlId, toolsHide, toolsRefs, toolsWidth, headerVariant } = useAppLayoutInternals();
  const hasSplitPanel = !!splitPanel && splitPanelPosition === "side";
  const hasToolsForm = getToolsFormStatus(hasSplitPanel && splitPanelDisplayed, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide);
  const hasToolsFormPersistence = getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide);
  const isUnfocusable = hasDrawerViewportOverlay && !isToolsOpen;
  if (toolsHide && !hasSplitPanel || drawers) {
    return null;
  }
  return import_react129.default.createElement(Transition2, { in: isToolsOpen !== null && isToolsOpen !== void 0 ? isToolsOpen : false }, (state, transitionEventsRef) => {
    var _a2, _b, _c;
    return import_react129.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default41["tools-container"], {
        [styles_css_default41["disable-body-scroll"]]: disableBodyScroll,
        [styles_css_default41.unfocusable]: isUnfocusable
      }), style: {
        [custom_css_properties_default.toolsAnimationStartingOpacity]: `${hasSplitPanel && isSplitPanelOpen ? 1 : 0}`,
        [custom_css_properties_default.toolsWidth]: `${toolsWidth}px`
      }, onBlur: (e3) => {
        if (!e3.relatedTarget || !e3.currentTarget.contains(e3.relatedTarget)) {
          loseToolsFocus();
        }
      } },
      children2,
      !toolsHide && import_react129.default.createElement(
        "aside",
        { id: toolsControlId, "aria-hidden": !isToolsOpen ? true : false, "aria-label": (_a2 = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _a2 !== void 0 ? _a2 : void 0, className: clsx_m_default(styles_css_default41.tools, {
          [styles_css_default41.animating]: state === "entering",
          [styles_css_default41["has-tools-form-persistence"]]: hasToolsFormPersistence,
          [styles_css_default41["is-tools-open"]]: isToolsOpen,
          [styles_css_default20["drawer-closed"]]: !isToolsOpen
        }, styles_css_default20.tools), ref: state !== "exiting" ? transitionEventsRef : void 0 },
        import_react129.default.createElement(
          "div",
          { className: styles_css_default41["animated-content"] },
          import_react129.default.createElement(
            "div",
            { className: styles_css_default41["hide-tools"] },
            import_react129.default.createElement(InternalButton, { ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose) !== null && _b !== void 0 ? _b : void 0, iconName: isMobile ? "close" : "angle-right", onClick: () => handleToolsClick(false), variant: "icon", formAction: "none", className: styles_css_default20["tools-close"], ref: toolsRefs.close })
          ),
          tools
        )
      ),
      !isMobile && import_react129.default.createElement(
        "aside",
        { "aria-hidden": !hasToolsForm ? true : false, "aria-label": (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools) !== null && _c !== void 0 ? _c : void 0, className: clsx_m_default(styles_css_default41["show-tools"], {
          [styles_css_default41.animating]: state === "exiting",
          [styles_css_default41["has-tools-form"]]: hasToolsForm,
          [styles_css_default41["has-tools-form-persistence"]]: hasToolsFormPersistence
        }), ref: state === "exiting" ? transitionEventsRef : void 0, "data-testid": "side-split-panel-drawer" },
        !toolsHide && import_react129.default.createElement(trigger_button_default, { ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsToggle, ariaControls: toolsControlId, ariaExpanded: isToolsOpen, iconName: "status-info", onClick: () => handleToolsClick(!isToolsOpen), selected: hasSplitPanel && isToolsOpen, className: styles_css_default20["tools-toggle"], ref: toolsRefs.toggle, highContrastHeader: headerVariant === "high-contrast" }),
        hasSplitPanel && splitPanelToggle.displayed && import_react129.default.createElement(trigger_button_default, { ariaLabel: splitPanelToggle.ariaLabel, ariaControls: splitPanelControlId, ariaExpanded: !!isSplitPanelOpen, iconName: "view-vertical", onClick: () => handleSplitPanelClick(), selected: hasSplitPanel && isSplitPanelOpen, className: styles_css_default42["open-button"], ref: splitPanelRefs.toggle, highContrastHeader: headerVariant === "high-contrast" })
      )
    );
  });
}
function getToolsFormStatus(hasSplitPanel, isMobile, isSplitPanelOpen, isToolsOpen, toolsHide) {
  let hasToolsForm = false;
  if (!isMobile) {
    if (hasSplitPanel && !toolsHide) {
      hasToolsForm = true;
    }
    if (hasSplitPanel && !isSplitPanelOpen && toolsHide) {
      hasToolsForm = true;
    }
    if (!hasSplitPanel && !toolsHide && !isToolsOpen) {
      hasToolsForm = true;
    }
  }
  return hasToolsForm;
}
function getToolsFormPersistence(hasSplitPanel, isSplitPanelOpen, isToolsOpen, toolsHide) {
  let hasToolsFormPersistence = false;
  if (hasSplitPanel && !toolsHide && (isSplitPanelOpen || isToolsOpen)) {
    hasToolsFormPersistence = true;
  }
  return hasToolsFormPersistence;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh/index.js
var AppLayoutWithRef = import_react130.default.forwardRef(function AppLayout(props2, ref) {
  return import_react130.default.createElement(
    AppLayoutInternalsProvider,
    Object.assign({}, props2, { ref }),
    import_react130.default.createElement(
      split_panel_default,
      null,
      import_react130.default.createElement(
        Layout,
        null,
        import_react130.default.createElement(Background, null),
        import_react130.default.createElement(Navigation, null),
        import_react130.default.createElement(MobileToolbar2, null),
        import_react130.default.createElement(Notifications2, null),
        import_react130.default.createElement(Breadcrumbs, null),
        import_react130.default.createElement(Header, null),
        import_react130.default.createElement(Main, null),
        import_react130.default.createElement(split_panel_default.Bottom, null),
        import_react130.default.createElement(
          Tools,
          null,
          import_react130.default.createElement(split_panel_default.Side, null)
        ),
        import_react130.default.createElement(Drawers, null)
      )
    )
  );
});
var visual_refresh_default = AppLayoutWithRef;

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/index.js
var import_react173 = __toESM(require_react());
var import_react_dom7 = __toESM(require_react_dom());

// node_modules/@cloudscape-design/components/internal/components/screenreader-only/index.js
var import_react131 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/screenreader-only/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/screenreader-only/styles.scoped.css";
var styles_css_default43 = {
  "root": "awsui_root_xttbq_1rjuy_145"
};

// node_modules/@cloudscape-design/components/internal/components/screenreader-only/index.js
function ScreenreaderOnly(props2) {
  return import_react131.default.createElement("span", Object.assign({}, props2, { className: clsx_m_default(styles_css_default43.root, props2.className) }));
}

// node_modules/@cloudscape-design/components/internal/widgets/loader-mock.js
var import_react132 = __toESM(require_react());
var getCustomFlag = (flagName) => {
  var _a2;
  const flagHolder = typeof window !== "undefined" ? window : globalThis;
  const awsuiCustomFlagsSymbol = Symbol.for("awsui-custom-flags");
  return (_a2 = flagHolder === null || flagHolder === void 0 ? void 0 : flagHolder[awsuiCustomFlagsSymbol]) === null || _a2 === void 0 ? void 0 : _a2[flagName];
};
var isAppLayoutDelayedWidget = () => {
  return !!getCustomFlag("appLayoutDelayedWidget");
};
var enableDelayedComponents = isAppLayoutDelayedWidget();
var loadPromise;
function createLoadableComponent(Component) {
  if (!enableDelayedComponents) {
    return;
  }
  return ((props2) => {
    const [mounted, setMounted] = (0, import_react132.useState)(false);
    (0, import_react132.useEffect)(() => {
      if (!loadPromise) {
        loadPromise = new Promise((resolve) => setTimeout(() => resolve(), 1e3));
      }
      let mounted2 = true;
      loadPromise.then(() => {
        if (mounted2) {
          setMounted(true);
        }
      });
      return () => {
        mounted2 = false;
      };
    }, []);
    if (mounted) {
      return import_react132.default.createElement(Component, Object.assign({}, props2));
    }
    const { Skeleton } = props2;
    return Skeleton ? import_react132.default.createElement(Skeleton, Object.assign({}, props2)) : import_react132.default.createElement("div", null);
  });
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/state/index.js
var import_react138 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/widgets/index.js
var import_react133 = __toESM(require_react());
function createWidgetizedComponent(Implementation, Skeleton) {
  return (Loader) => {
    return ((props2) => {
      const isRefresh = useVisualRefresh();
      if (isRefresh && getGlobalFlag("appLayoutWidget") && Loader) {
        return import_react133.default.createElement(Loader, Object.assign({ Skeleton }, props2));
      }
      return import_react133.default.createElement(Implementation, Object.assign({}, props2));
    });
  };
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/state/props-merger.js
function checkAlreadyExists(value, propName) {
  if (value) {
    warnOnce("AppLayout", `Another app layout instance on this page already defines ${propName} property. This instance will be ignored.`);
    return true;
  }
  return false;
}
var mergeProps = (ownProps, additionalProps) => {
  var _a2;
  const toolbar = {};
  for (const props2 of [ownProps, ...additionalProps]) {
    toolbar.ariaLabels = Object.assign(Object.assign({}, toolbar.ariaLabels), props2.ariaLabels);
    if (props2.drawers && props2.drawers.some((drawer) => drawer.trigger) && !checkAlreadyExists(!!toolbar.drawers, "tools or drawers")) {
      toolbar.drawers = props2.drawers;
      toolbar.activeDrawerId = props2.activeDrawerId;
      toolbar.drawersFocusRef = props2.drawersFocusRef;
      toolbar.onActiveDrawerChange = props2.onActiveDrawerChange;
    }
    if (props2.globalDrawers && !checkAlreadyExists(!!toolbar.globalDrawers, "globalDrawers")) {
      toolbar.globalDrawersFocusControl = props2.globalDrawersFocusControl;
      toolbar.globalDrawers = props2.globalDrawers;
      toolbar.activeGlobalDrawersIds = props2.activeGlobalDrawersIds;
      toolbar.onActiveGlobalDrawersChange = props2.onActiveGlobalDrawersChange;
    }
    if (props2.aiDrawer && props2.aiDrawerFocusRef && !checkAlreadyExists(!!toolbar.aiDrawerFocusRef, "aiDrawerFocusRef")) {
      toolbar.aiDrawerFocusRef = props2.aiDrawerFocusRef;
    }
    if (props2.navigation && !checkAlreadyExists(!!toolbar.hasNavigation, "navigation")) {
      toolbar.hasNavigation = true;
      toolbar.navigationOpen = props2.navigationOpen;
      toolbar.navigationFocusRef = props2.navigationFocusRef;
      toolbar.onNavigationToggle = props2.onNavigationToggle;
    }
    if (props2.splitPanel && ((_a2 = props2.splitPanelToggleProps) === null || _a2 === void 0 ? void 0 : _a2.displayed) && !checkAlreadyExists(!!toolbar.hasSplitPanel, "splitPanel")) {
      toolbar.hasSplitPanel = true;
      toolbar.splitPanelFocusRef = props2.splitPanelFocusRef;
      toolbar.splitPanelToggleProps = props2.splitPanelToggleProps;
      toolbar.onSplitPanelToggle = props2.onSplitPanelToggle;
    }
    if (props2.breadcrumbs && !checkAlreadyExists(!!toolbar.hasBreadcrumbsPortal, "hasBreadcrumbsPortal")) {
      toolbar.hasBreadcrumbsPortal = true;
    }
    if (props2.expandedDrawerId && !checkAlreadyExists(!!toolbar.expandedDrawerId, "expandedDrawerId")) {
      toolbar.expandedDrawerId = props2.expandedDrawerId;
      toolbar.setExpandedDrawerId = props2.setExpandedDrawerId;
    }
  }
  return Object.keys(toolbar).filter((key2) => key2 !== "ariaLabels").length > 0 ? toolbar : null;
};
var getPropsToMerge = (props2, appLayoutState) => {
  var _a2, _b, _c, _d, _e, _f, _g;
  const state = appLayoutState.widgetizedState;
  return {
    breadcrumbs: props2.breadcrumbs,
    ariaLabels: state ? state.ariaLabels : props2.ariaLabels,
    navigation: !props2.navigationTriggerHide && !props2.navigationHide,
    navigationOpen: state ? state.navigationOpen : props2.navigationOpen,
    onNavigationToggle: state === null || state === void 0 ? void 0 : state.onNavigationToggle,
    navigationFocusRef: state === null || state === void 0 ? void 0 : state.navigationFocusControl.refs.toggle,
    activeDrawerId: (_b = (_a2 = state === null || state === void 0 ? void 0 : state.activeDrawer) === null || _a2 === void 0 ? void 0 : _a2.id) !== null && _b !== void 0 ? _b : null,
    // only pass it down if there are non-empty drawers or tools
    drawers: ((_c = state === null || state === void 0 ? void 0 : state.drawers) === null || _c === void 0 ? void 0 : _c.length) || !props2.toolsHide ? state === null || state === void 0 ? void 0 : state.drawers : void 0,
    globalDrawersFocusControl: state === null || state === void 0 ? void 0 : state.globalDrawersFocusControl,
    globalDrawers: ((_d = state === null || state === void 0 ? void 0 : state.globalDrawers) === null || _d === void 0 ? void 0 : _d.length) ? state.globalDrawers : void 0,
    activeGlobalDrawersIds: state === null || state === void 0 ? void 0 : state.activeGlobalDrawersIds,
    onActiveGlobalDrawersChange: state === null || state === void 0 ? void 0 : state.onActiveGlobalDrawersChange,
    onActiveDrawerChange: state === null || state === void 0 ? void 0 : state.onActiveDrawerChange,
    drawersFocusRef: state === null || state === void 0 ? void 0 : state.drawersFocusControl.refs.toggle,
    splitPanel: props2.splitPanel,
    splitPanelToggleProps: (state === null || state === void 0 ? void 0 : state.splitPanelToggleConfig) && Object.assign(Object.assign({}, state.splitPanelToggleConfig), { active: state === null || state === void 0 ? void 0 : state.splitPanelOpen, controlId: state === null || state === void 0 ? void 0 : state.splitPanelControlId, position: state === null || state === void 0 ? void 0 : state.splitPanelPosition }),
    splitPanelFocusRef: state === null || state === void 0 ? void 0 : state.splitPanelFocusControl.refs.toggle,
    onSplitPanelToggle: state === null || state === void 0 ? void 0 : state.onSplitPanelToggle,
    expandedDrawerId: state === null || state === void 0 ? void 0 : state.expandedDrawerId,
    setExpandedDrawerId: state === null || state === void 0 ? void 0 : state.setExpandedDrawerId,
    aiDrawer: (_e = state === null || state === void 0 ? void 0 : state.aiDrawer) !== null && _e !== void 0 ? _e : void 0,
    aiDrawerFocusRef: (_g = (_f = state === null || state === void 0 ? void 0 : state.aiDrawerFocusControl) === null || _f === void 0 ? void 0 : _f.refs) === null || _g === void 0 ? void 0 : _g.toggle
  };
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/state/use-app-layout.js
var import_react137 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-intersection-observer/index.js
var import_react134 = __toESM(require_react());
function useIntersectionObserver({ initialState: initialState2 = false } = {}) {
  const observerRef = (0, import_react134.useRef)(null);
  const [isIntersecting, setIsIntersecting] = (0, import_react134.useState)(initialState2);
  const ref = (0, import_react134.useCallback)((targetElement) => {
    if (typeof IntersectionObserver === "undefined") {
      return;
    }
    if (observerRef.current) {
      observerRef.current.disconnect();
    }
    if (targetElement) {
      let TopLevelIntersectionObserver = IntersectionObserver;
      try {
        if (window.top) {
          TopLevelIntersectionObserver = window.top.IntersectionObserver;
        }
      } catch (_a2) {
      }
      observerRef.current = new TopLevelIntersectionObserver((entries) => {
        let latestEntry = entries[0];
        for (const entry of entries) {
          if (entry.time > latestEntry.time) {
            latestEntry = entry;
          }
        }
        setIsIntersecting(latestEntry.isIntersecting);
      });
      observerRef.current.observe(targetElement);
    }
  }, []);
  return { ref, isIntersecting };
}

// node_modules/@cloudscape-design/components/internal/plugins/helpers/use-global-breadcrumbs.js
var import_react135 = __toESM(require_react());
function useSetGlobalBreadcrumbsImplementation(_a2) {
  var _b, _c;
  var { __disableGlobalization } = _a2, props2 = __rest(_a2, ["__disableGlobalization"]);
  const { isInToolbar } = (_b = (0, import_react135.useContext)(BreadcrumbsSlotContext)) !== null && _b !== void 0 ? _b : {};
  const isLayoutVisible = (_c = (0, import_react135.useContext)(AppLayoutVisibilityContext)) !== null && _c !== void 0 ? _c : true;
  const registrationRef = (0, import_react135.useRef)();
  const [registered, setRegistered] = (0, import_react135.useState)(false);
  (0, import_react135.useEffect)(() => {
    if (isInToolbar || __disableGlobalization || !isLayoutVisible) {
      return;
    }
    const registration = awsuiPluginsInternal.breadcrumbs.registerBreadcrumbs(props2, (isRegistered) => {
      setRegistered(isRegistered !== null && isRegistered !== void 0 ? isRegistered : true);
      if (isRegistered) {
        const breadcrumbs = props2.items.map((item) => item.text).join(" > ");
        metrics.sendOpsMetricObject("awsui-global-breadcrumbs-used", { breadcrumbs });
      }
    });
    registrationRef.current = registration;
    return () => {
      registration.cleanup();
    };
  }, [isInToolbar, __disableGlobalization, isLayoutVisible]);
  (0, import_react135.useLayoutEffect)(() => {
    var _a3;
    (_a3 = registrationRef.current) === null || _a3 === void 0 ? void 0 : _a3.update(props2);
  });
  return registered;
}
function useSetGlobalBreadcrumbs(props2) {
  if (!useAppLayoutFlagEnabled()) {
    return false;
  }
  return useSetGlobalBreadcrumbsImplementation(props2);
}
function useGetGlobalBreadcrumbs(enabled) {
  const [discoveredBreadcrumbs, setDiscoveredBreadcrumbs] = (0, import_react135.useState)(null);
  (0, import_react135.useEffect)(() => {
    if (!enabled) {
      return;
    }
    const unregisterAppLayout = awsuiPluginsInternal.breadcrumbs.registerAppLayout((breadcrumbs) => {
      setDiscoveredBreadcrumbs(breadcrumbs);
    });
    return () => {
      unregisterAppLayout === null || unregisterAppLayout === void 0 ? void 0 : unregisterAppLayout();
      setDiscoveredBreadcrumbs(null);
    };
  }, [enabled]);
  return discoveredBreadcrumbs;
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-ai-drawer.js
var import_react136 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/plugins/widget/internal.js
var storageKeyMessageHandler = Symbol.for("awsui-widget-api-message-handler");
var storageKeyInitialMessages = Symbol.for("awsui-widget-api-initial-messages");
var storageKeyReadyDeferCallbacks = Symbol.for("awsui-widget-api-ready-defer");
function getWindow() {
  return window;
}
function getAppLayoutInitialState() {
  return getWindow()[storageKeyInitialMessages];
}
function registerAppLayoutHandler(handler) {
  var _a2;
  const win = getWindow();
  if (win[storageKeyMessageHandler]) {
    reportRuntimeApiWarning("AppLayoutWidget", "Double registration attempt, the old handler will be overridden");
  }
  win[storageKeyMessageHandler] = handler;
  (_a2 = win[storageKeyReadyDeferCallbacks]) === null || _a2 === void 0 ? void 0 : _a2.forEach((fn) => fn());
  win[storageKeyReadyDeferCallbacks] = [];
  return () => {
    win[storageKeyMessageHandler] = void 0;
  };
}

// node_modules/@cloudscape-design/components/internal/types.js
function assertNever(_value) {
  return null;
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-ai-drawer.js
var DEFAULT_ON_CHANGE_PARAMS2 = { initiatedByUserAction: true };
function useRuntimeAiDrawer(isEnabled, activeAiDrawerId, onActiveAiDrawerChange, onActiveAiDrawerResize, setExpandedDrawerId) {
  const [aiDrawer, setAiDrawer] = (0, import_react136.useState)(null);
  const appLayoutMessageHandler = useStableCallback((event) => {
    if (event.type === "registerLeftDrawer") {
      setAiDrawer(event.payload);
      if (!aiDrawerWasOpenRef.current && event.payload.defaultActive) {
        onAiDrawersChangeStable(event.payload.id, { initiatedByUserAction: false });
      }
      return;
    }
    if (aiDrawer && "payload" in event && aiDrawer.id !== event.payload.id) {
      metrics.sendOpsMetricObject("awsui-widget-drawer-incorrect-id", { oldId: aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.id, newId: event.payload.id });
      return;
    }
    switch (event.type) {
      case "updateDrawerConfig":
        setAiDrawer((current) => current ? Object.assign(Object.assign({}, current), event.payload) : current);
        break;
      case "openDrawer":
        onActiveAiDrawerChangeStable(event.payload.id, { initiatedByUserAction: false });
        break;
      case "closeDrawer":
        onActiveAiDrawerChangeStable(null, { initiatedByUserAction: false });
        break;
      case "resizeDrawer":
        onActiveAiDrawerResizeStable(event.payload.size);
        break;
      case "expandDrawer":
        setExpandedDrawerIdStable(event.payload.id);
        break;
      case "exitExpandedMode":
        setExpandedDrawerIdStable(null);
        break;
      /* istanbul ignore next: this code is not intended to be visited */
      default:
        assertNever(event);
    }
  });
  const onAiDrawersChangeStable = useStableCallback(onActiveAiDrawerChange);
  const onActiveAiDrawerResizeStable = useStableCallback(onActiveAiDrawerResize);
  const onActiveAiDrawerChangeStable = useStableCallback(onActiveAiDrawerChange);
  const setExpandedDrawerIdStable = useStableCallback(setExpandedDrawerId);
  const aiDrawerWasOpenRef = (0, import_react136.useRef)(false);
  aiDrawerWasOpenRef.current = aiDrawerWasOpenRef.current || !!activeAiDrawerId;
  (0, import_react136.useEffect)(() => {
    var _a2;
    if (!isEnabled) {
      return;
    }
    const initialDrawerMessage = (_a2 = getAppLayoutInitialState()) === null || _a2 === void 0 ? void 0 : _a2.find((message) => message.type === "registerLeftDrawer");
    if (initialDrawerMessage && initialDrawerMessage.type === "registerLeftDrawer") {
      setAiDrawer(initialDrawerMessage.payload);
      if (!aiDrawerWasOpenRef.current && initialDrawerMessage.payload.defaultActive) {
        onAiDrawersChangeStable(initialDrawerMessage.payload.id, { initiatedByUserAction: false });
      }
    }
    const unsubscribe = registerAppLayoutHandler(appLayoutMessageHandler);
    return () => {
      unsubscribe();
      setAiDrawer(null);
    };
  }, [isEnabled, appLayoutMessageHandler, onAiDrawersChangeStable, onActiveAiDrawerResizeStable]);
  return aiDrawer && mapRuntimeConfigToAiDrawer(aiDrawer);
}
var MIN_DRAWER_SIZE2 = 400;
function useAiDrawer({ isEnabled, onAiDrawerFocus, expandedDrawerId, setExpandedDrawerId }) {
  var _a2, _b;
  const [activeAiDrawerId, setActiveAiDrawerId] = (0, import_react136.useState)(null);
  const [size, setSize] = (0, import_react136.useState)(null);
  function onActiveAiDrawerResize(size2) {
    setSize(size2);
    fireNonCancelableEvent(activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.onResize, { id: activeAiDrawerId, size: size2 });
  }
  function onActiveAiDrawerChange(newDrawerId, { initiatedByUserAction } = DEFAULT_ON_CHANGE_PARAMS2) {
    setActiveAiDrawerId(newDrawerId);
    if (newDrawerId) {
      fireNonCancelableEvent(aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.onToggle, { isOpen: true, initiatedByUserAction });
    }
    if (activeAiDrawerId) {
      fireNonCancelableEvent(aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.onToggle, { isOpen: false, initiatedByUserAction });
      if (activeAiDrawerId === expandedDrawerId) {
        setExpandedDrawerId === null || setExpandedDrawerId === void 0 ? void 0 : setExpandedDrawerId(null);
      }
    }
    onAiDrawerFocus === null || onAiDrawerFocus === void 0 ? void 0 : onAiDrawerFocus();
  }
  const aiDrawer = useRuntimeAiDrawer(isEnabled, activeAiDrawerId, onActiveAiDrawerChange, onActiveAiDrawerResize, setExpandedDrawerId);
  const activeAiDrawer = activeAiDrawerId && activeAiDrawerId === (aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.id) ? aiDrawer : null;
  const activeAiDrawerSize = activeAiDrawerId ? (_a2 = size !== null && size !== void 0 ? size : activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.defaultSize) !== null && _a2 !== void 0 ? _a2 : MIN_DRAWER_SIZE2 : 0;
  const minAiDrawerSize = Math.min((_b = activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.defaultSize) !== null && _b !== void 0 ? _b : MIN_DRAWER_SIZE2, MIN_DRAWER_SIZE2);
  return {
    aiDrawer,
    onActiveAiDrawerChange,
    activeAiDrawer,
    activeAiDrawerId,
    activeAiDrawerSize,
    minAiDrawerSize,
    onActiveAiDrawerResize
  };
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/compute-layout.js
var CONTENT_PADDING = 2 * 24;
function computeHorizontalLayout({ navigationOpen, navigationWidth, placement, minContentWidth, activeDrawerSize, splitPanelOpen, splitPanelPosition, splitPanelSize, isMobile, activeGlobalDrawersSizes, activeAiDrawerSize }) {
  const activeNavigationWidth = navigationOpen ? navigationWidth : 0;
  let resizableSpaceAvailable = Math.max(0, placement.inlineSize - minContentWidth - CONTENT_PADDING - activeNavigationWidth - activeAiDrawerSize);
  const totalActiveGlobalDrawersSize = Object.values(activeGlobalDrawersSizes).reduce((acc, size) => acc + size, 0);
  const availableWidthForSplitPanel = resizableSpaceAvailable - activeDrawerSize;
  const splitPanelForcedPosition = shouldSplitPanelBeForcedToBottom({
    isMobile,
    availableWidthForSplitPanel
  });
  const resolvedSplitPanelPosition = splitPanelForcedPosition ? "bottom" : splitPanelPosition !== null && splitPanelPosition !== void 0 ? splitPanelPosition : "bottom";
  const sideSplitPanelSize = resolvedSplitPanelPosition === "side" && splitPanelOpen ? splitPanelSize !== null && splitPanelSize !== void 0 ? splitPanelSize : 0 : 0;
  const maxSplitPanelSize = Math.max(resizableSpaceAvailable - totalActiveGlobalDrawersSize - activeDrawerSize, 0);
  resizableSpaceAvailable -= sideSplitPanelSize;
  const maxDrawerSize = resizableSpaceAvailable - totalActiveGlobalDrawersSize;
  const maxAiDrawerSize = resizableSpaceAvailable - totalActiveGlobalDrawersSize + activeAiDrawerSize;
  const maxGlobalDrawersSizes = Object.keys(activeGlobalDrawersSizes).reduce((acc, drawerId) => {
    return Object.assign(Object.assign({}, acc), { [drawerId]: resizableSpaceAvailable - activeDrawerSize - totalActiveGlobalDrawersSize + activeGlobalDrawersSizes[drawerId] });
  }, {});
  return {
    splitPanelPosition: resolvedSplitPanelPosition,
    splitPanelForcedPosition,
    sideSplitPanelSize,
    maxSplitPanelSize,
    maxDrawerSize,
    maxGlobalDrawersSizes,
    totalActiveGlobalDrawersSize,
    resizableSpaceAvailable,
    maxAiDrawerSize
  };
}
function computeVerticalLayout({ topOffset, hasVisibleToolbar, toolbarHeight, stickyNotifications, notificationsHeight }) {
  const toolbar = topOffset;
  let notifications = topOffset;
  let drawers = topOffset;
  if (hasVisibleToolbar) {
    notifications += toolbarHeight;
    drawers += toolbarHeight;
  }
  let header = notifications;
  if (stickyNotifications) {
    header += notificationsHeight;
  }
  return { toolbar, notifications, header, drawers };
}
function computeSplitPanelOffsets({ hasSplitPanel, splitPanelPosition, placement, splitPanelOpen, splitPanelFullHeight, splitPanelHeaderHeight }) {
  if (!hasSplitPanel || splitPanelPosition !== "bottom") {
    return {
      stickyVerticalBottomOffset: placement.insetBlockEnd,
      mainContentPaddingBlockEnd: void 0
    };
  }
  const mainContentBottomOffset = splitPanelOpen ? splitPanelFullHeight : splitPanelHeaderHeight;
  return {
    stickyVerticalBottomOffset: mainContentBottomOffset + placement.insetBlockEnd,
    mainContentPaddingBlockEnd: mainContentBottomOffset
  };
}
function getDrawerStyles(verticalOffsets, isMobile, placement) {
  var _a2;
  const drawerTopOffset = isMobile ? verticalOffsets.toolbar : (_a2 = verticalOffsets.drawers) !== null && _a2 !== void 0 ? _a2 : placement.insetBlockStart;
  const drawerHeight = `calc(100vh - ${drawerTopOffset}px - ${placement.insetBlockEnd}px)`;
  return { drawerTopOffset, drawerHeight };
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/state/use-app-layout.js
var useAppLayout = (hasToolbar, _a2, forwardRef32) => {
  var _b, _c;
  var { ariaLabels, navigationOpen, navigationWidth, navigation, navigationHide, onNavigationChange, tools, toolsOpen: controlledToolsOpen, onToolsChange, toolsHide, toolsWidth, headerVariant, breadcrumbs, stickyNotifications, splitPanelPreferences: controlledSplitPanelPreferences, splitPanelOpen: controlledSplitPanelOpen, splitPanel, splitPanelSize: controlledSplitPanelSize, onSplitPanelToggle, onSplitPanelResize, onSplitPanelPreferencesChange, minContentWidth, placement, navigationTriggerHide } = _a2, rest = __rest(_a2, ["ariaLabels", "navigationOpen", "navigationWidth", "navigation", "navigationHide", "onNavigationChange", "tools", "toolsOpen", "onToolsChange", "toolsHide", "toolsWidth", "headerVariant", "breadcrumbs", "stickyNotifications", "splitPanelPreferences", "splitPanelOpen", "splitPanel", "splitPanelSize", "onSplitPanelToggle", "onSplitPanelResize", "onSplitPanelPreferencesChange", "minContentWidth", "placement", "navigationTriggerHide"]);
  const isMobile = useMobile();
  const splitPanelControlId = useUniqueId("split-panel");
  const [toolbarState, setToolbarState] = (0, import_react137.useState)("show");
  const [toolbarHeight, setToolbarHeight] = (0, import_react137.useState)(0);
  const [notificationsHeight, setNotificationsHeight] = (0, import_react137.useState)(0);
  const [navigationAnimationDisabled, setNavigationAnimationDisabled] = (0, import_react137.useState)(true);
  const [splitPanelAnimationDisabled, setSplitPanelAnimationDisabled] = (0, import_react137.useState)(true);
  const [isNested, setIsNested] = (0, import_react137.useState)(false);
  const rootRefInternal = (0, import_react137.useRef)(null);
  const onMountRootRef = (0, import_react137.useCallback)((node) => {
    setIsNested(getIsNestedInAppLayout(node));
  }, []);
  const [toolsOpen = false, setToolsOpen] = useControllable2(controlledToolsOpen, onToolsChange, false, {
    componentName: "AppLayout",
    controlledProp: "toolsOpen",
    changeHandler: "onToolsChange"
  });
  const onToolsToggle = (open) => {
    setToolsOpen(open);
    drawersFocusControl.setFocus();
    fireNonCancelableEvent(onToolsChange, { open });
  };
  const onGlobalDrawerFocus = (drawerId, open) => {
    globalDrawersFocusControl.setFocus({ force: true, drawerId, open });
  };
  const onAddNewActiveDrawer = (drawerId) => {
    var _a3, _b2;
    if (activeDrawer && (drawers === null || drawers === void 0 ? void 0 : drawers.find((drawer) => drawer.id === drawerId))) {
      return;
    }
    const combinedDrawers = [...drawers || [], ...globalDrawers];
    const newDrawer = combinedDrawers.find((drawer) => drawer.id === drawerId);
    if (!newDrawer) {
      return;
    }
    const newDrawerSize = Math.min((_b2 = (_a3 = newDrawer.defaultSize) !== null && _a3 !== void 0 ? _a3 : drawerSizes[drawerId]) !== null && _b2 !== void 0 ? _b2 : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);
    const availableSpaceForNewDrawer = resizableSpaceAvailable - totalActiveDrawersMinSize;
    if (availableSpaceForNewDrawer >= newDrawerSize) {
      return;
    }
    closeFirstDrawer();
  };
  const { drawers, activeDrawer, minDrawerSize, minGlobalDrawersSizes, activeDrawerSize, ariaLabelsWithDrawers, globalDrawers, activeGlobalDrawers, activeGlobalDrawersIds, activeGlobalDrawersSizes, drawerSizes, drawersOpenQueue, onActiveDrawerChange, onActiveDrawerResize, onActiveGlobalDrawersChange, expandedDrawerId, setExpandedDrawerId } = useDrawers(Object.assign(Object.assign({}, rest), { onGlobalDrawerFocus, onAddNewActiveDrawer }), ariaLabels, {
    ariaLabels,
    toolsHide,
    toolsOpen,
    tools,
    toolsWidth,
    onToolsToggle
  });
  const { aiDrawer, onActiveAiDrawerChange, activeAiDrawer, activeAiDrawerId, activeAiDrawerSize, minAiDrawerSize, onActiveAiDrawerResize } = useAiDrawer({
    isEnabled: hasToolbar,
    onAiDrawerFocus: () => aiDrawerFocusControl.setFocus(),
    expandedDrawerId,
    setExpandedDrawerId
  });
  const aiDrawerFocusControl = useAsyncFocusControl(!!(activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.id), true, activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.id);
  const onActiveDrawerChangeHandler = (drawerId, params = { initiatedByUserAction: true }) => {
    onActiveDrawerChange(drawerId, params);
    drawersFocusControl.setFocus();
  };
  const [splitPanelOpen = false, setSplitPanelOpen] = useControllable2(controlledSplitPanelOpen, onSplitPanelToggle, false, {
    componentName: "AppLayout",
    controlledProp: "splitPanelOpen",
    changeHandler: "onSplitPanelToggle"
  });
  const onSplitPanelToggleHandler = () => {
    setSplitPanelAnimationDisabled(false);
    setSplitPanelOpen(!splitPanelOpen);
    splitPanelFocusControl.setLastInteraction({ type: splitPanelOpen ? "close" : "open" });
    fireNonCancelableEvent(onSplitPanelToggle, { open: !splitPanelOpen });
  };
  const [splitPanelPreferences, setSplitPanelPreferences] = useControllable2(controlledSplitPanelPreferences, onSplitPanelPreferencesChange, void 0, {
    componentName: "AppLayout",
    controlledProp: "splitPanelPreferences",
    changeHandler: "onSplitPanelPreferencesChange"
  });
  const onSplitPanelPreferencesChangeHandler = (detail) => {
    setSplitPanelPreferences(detail);
    splitPanelFocusControl.setLastInteraction({ type: "position" });
    fireNonCancelableEvent(onSplitPanelPreferencesChange, detail);
  };
  const [splitPanelSize = 0, setSplitPanelSize] = useControllable2(controlledSplitPanelSize, onSplitPanelResize, getSplitPanelDefaultSize((_b = splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position) !== null && _b !== void 0 ? _b : "bottom"), { componentName: "AppLayout", controlledProp: "splitPanelSize", changeHandler: "onSplitPanelResize" });
  const [splitPanelReportedSize, setSplitPanelReportedSize] = (0, import_react137.useState)(0);
  const [splitPanelHeaderBlockSize, setSplitPanelHeaderBlockSize] = (0, import_react137.useState)(0);
  const onSplitPanelResizeHandler = (size) => {
    setSplitPanelSize(size);
    fireNonCancelableEvent(onSplitPanelResize, { size });
  };
  const [splitPanelToggleConfig, setSplitPanelToggleConfig] = (0, import_react137.useState)({
    ariaLabel: void 0,
    displayed: false
  });
  const globalDrawersFocusControl = useMultipleFocusControl(true, activeGlobalDrawersIds);
  const drawersFocusControl = useAsyncFocusControl(!!(activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id), true, activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id);
  const navigationFocusControl = useAsyncFocusControl(navigationOpen, navigationTriggerHide);
  const splitPanelFocusControl = useSplitPanelFocusControl([splitPanelPreferences, splitPanelOpen]);
  const onNavigationToggle = useStableCallback(({ isOpen, autoFocus }) => {
    setNavigationAnimationDisabled(false);
    navigationFocusControl.setFocus({ force: false, autoFocus });
    fireNonCancelableEvent(onNavigationChange, { open: isOpen });
  });
  (0, import_react137.useImperativeHandle)(forwardRef32, () => ({
    closeNavigationIfNecessary: () => isMobile && onNavigationToggle({ isOpen: false, autoFocus: true }),
    openTools: () => onToolsToggle(true),
    focusToolsClose: () => drawersFocusControl.setFocus({ force: true }),
    focusActiveDrawer: () => drawersFocusControl.setFocus({ force: true }),
    focusSplitPanel: () => splitPanelFocusControl.setLastInteraction({ type: "open" }),
    focusNavigation: () => navigationFocusControl.setFocus({ force: true })
  }));
  const resolvedStickyNotifications = !!stickyNotifications && !isMobile;
  const resolvedNavigation = navigationHide ? null : navigation || import_react137.default.createElement(import_react137.default.Fragment, null);
  const resolvedNavigationOpen = !!resolvedNavigation && navigationOpen;
  const { maxDrawerSize, maxSplitPanelSize, splitPanelForcedPosition, splitPanelPosition, maxGlobalDrawersSizes, resizableSpaceAvailable, maxAiDrawerSize } = computeHorizontalLayout({
    activeDrawerSize: activeDrawer ? activeDrawerSize : 0,
    splitPanelSize,
    minContentWidth,
    navigationOpen: resolvedNavigationOpen,
    navigationWidth,
    placement,
    splitPanelOpen,
    splitPanelPosition: splitPanelPreferences === null || splitPanelPreferences === void 0 ? void 0 : splitPanelPreferences.position,
    isMobile,
    activeGlobalDrawersSizes,
    activeAiDrawerSize
  });
  const verticalOffsets = computeVerticalLayout({
    topOffset: placement.insetBlockStart,
    hasVisibleToolbar: hasToolbar && toolbarState !== "hide",
    notificationsHeight: notificationsHeight !== null && notificationsHeight !== void 0 ? notificationsHeight : 0,
    toolbarHeight: toolbarHeight !== null && toolbarHeight !== void 0 ? toolbarHeight : 0,
    stickyNotifications: resolvedStickyNotifications
  });
  const { ref: intersectionObserverRef, isIntersecting } = useIntersectionObserver({ initialState: true });
  const rootRef = useMergeRefs(rootRefInternal, intersectionObserverRef, onMountRootRef);
  const discoveredBreadcrumbs = useGetGlobalBreadcrumbs(hasToolbar && !breadcrumbs);
  useGlobalScrollPadding((_c = verticalOffsets.header) !== null && _c !== void 0 ? _c : 0);
  const appLayoutInternals = {
    ariaLabels: ariaLabelsWithDrawers,
    headerVariant,
    isMobile,
    breadcrumbs,
    discoveredBreadcrumbs,
    stickyNotifications: resolvedStickyNotifications,
    navigationOpen: resolvedNavigationOpen,
    navigation: resolvedNavigation,
    navigationFocusControl,
    activeDrawer,
    activeDrawerSize,
    minDrawerSize,
    maxDrawerSize,
    minGlobalDrawersSizes,
    maxGlobalDrawersSizes,
    drawers,
    globalDrawers,
    activeGlobalDrawers,
    activeGlobalDrawersIds,
    activeGlobalDrawersSizes,
    onActiveGlobalDrawersChange,
    drawersFocusControl,
    globalDrawersFocusControl,
    splitPanelPosition,
    splitPanelToggleConfig,
    splitPanelOpen,
    splitPanelControlId,
    splitPanelFocusControl,
    placement,
    toolbarState,
    setToolbarState,
    verticalOffsets,
    drawersOpenQueue,
    setToolbarHeight,
    setNotificationsHeight,
    onSplitPanelToggle: onSplitPanelToggleHandler,
    onNavigationToggle: (isOpen) => onNavigationToggle({ isOpen, autoFocus: true }),
    onActiveDrawerChange: onActiveDrawerChangeHandler,
    onActiveDrawerResize,
    splitPanelAnimationDisabled,
    expandedDrawerId,
    setExpandedDrawerId,
    aiDrawer,
    onActiveAiDrawerChange,
    activeAiDrawer,
    activeAiDrawerId,
    activeAiDrawerSize,
    minAiDrawerSize,
    maxAiDrawerSize,
    aiDrawerFocusControl,
    onActiveAiDrawerResize
  };
  const splitPanelInternals = {
    bottomOffset: 0,
    getMaxHeight: useStableCallback(() => {
      const availableHeight = document.documentElement.clientHeight - placement.insetBlockStart - placement.insetBlockEnd;
      return availableHeight < 400 ? availableHeight - 40 : availableHeight - 250;
    }),
    maxWidth: maxSplitPanelSize,
    isForcedPosition: splitPanelForcedPosition,
    isOpen: splitPanelOpen,
    leftOffset: 0,
    onPreferencesChange: onSplitPanelPreferencesChangeHandler,
    onResize: onSplitPanelResizeHandler,
    onToggle: onSplitPanelToggleHandler,
    position: splitPanelPosition,
    reportSize: useStableCallback((size) => setSplitPanelReportedSize(size)),
    reportHeaderHeight: useStableCallback((size) => setSplitPanelHeaderBlockSize(size)),
    headerHeight: splitPanelHeaderBlockSize,
    rightOffset: 0,
    size: splitPanelSize,
    topOffset: 0,
    setSplitPanelToggle: setSplitPanelToggleConfig,
    refs: splitPanelFocusControl.refs
  };
  const closeFirstDrawer = useStableCallback(() => {
    const drawerToClose = drawersOpenQueue[drawersOpenQueue.length - 1];
    if (activeDrawer && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) === drawerToClose) {
      onActiveDrawerChange(null, { initiatedByUserAction: true });
    } else if (activeGlobalDrawersIds.includes(drawerToClose)) {
      onActiveGlobalDrawersChange(drawerToClose, { initiatedByUserAction: true });
    }
  });
  (0, import_react137.useEffect)(() => {
    if (isMobile) {
      onNavigationToggle({ isOpen: false, autoFocus: false });
    }
  }, [isMobile]);
  const getTotalActiveDrawersMinSize = () => {
    var _a3, _b2;
    const combinedDrawers = [...drawers || [], ...globalDrawers];
    let result = activeGlobalDrawersIds.map((activeDrawerId) => {
      var _a4, _b3;
      return Math.min((_b3 = (_a4 = combinedDrawers.find((drawer) => drawer.id === activeDrawerId)) === null || _a4 === void 0 ? void 0 : _a4.defaultSize) !== null && _b3 !== void 0 ? _b3 : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);
    }).reduce((acc, curr) => acc + curr, 0);
    if (activeDrawer) {
      result += Math.min((_a3 = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _a3 !== void 0 ? _a3 : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);
    }
    if (activeAiDrawer) {
      result += Math.min((_b2 = activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.defaultSize) !== null && _b2 !== void 0 ? _b2 : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);
    }
    return result;
  };
  const totalActiveDrawersMinSize = getTotalActiveDrawersMinSize();
  (0, import_react137.useEffect)(() => {
    if (isMobile) {
      return;
    }
    const activeNavigationWidth = !navigationHide && navigationOpen ? navigationWidth : 0;
    const scrollWidth = activeNavigationWidth + CONTENT_PADDING + totalActiveDrawersMinSize;
    const hasHorizontalScroll = scrollWidth > placement.inlineSize;
    if (hasHorizontalScroll) {
      if (!navigationHide && navigationOpen) {
        onNavigationToggle({ isOpen: false, autoFocus: false });
        return;
      }
      closeFirstDrawer();
    }
  }, [
    totalActiveDrawersMinSize,
    closeFirstDrawer,
    isMobile,
    navigationHide,
    navigationOpen,
    navigationWidth,
    onNavigationToggle,
    placement.inlineSize
  ]);
  const getIsNestedInAppLayout = (element) => {
    var _a3;
    let currentElement = (_a3 = element === null || element === void 0 ? void 0 : element.parentElement) !== null && _a3 !== void 0 ? _a3 : null;
    while (currentElement) {
      if (getComputedStyle(currentElement).getPropertyValue(global_vars_default.stickyVerticalTopOffset)) {
        return true;
      }
      currentElement = currentElement.parentElement;
    }
    return false;
  };
  const splitPanelOffsets = computeSplitPanelOffsets({
    placement,
    hasSplitPanel: !!splitPanel,
    splitPanelOpen,
    splitPanelPosition,
    splitPanelFullHeight: splitPanelReportedSize,
    splitPanelHeaderHeight: splitPanelHeaderBlockSize
  });
  return {
    rootRef,
    isIntersecting,
    appLayoutInternals,
    splitPanelInternals,
    widgetizedState: Object.assign(Object.assign({}, appLayoutInternals), {
      aiDrawerExpandedMode: expandedDrawerId === (activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.id),
      isNested,
      navigationAnimationDisabled,
      verticalOffsets,
      splitPanelOffsets
    })
  };
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/styles.scoped.css";
var styles_css_default44 = {
  "root": "awsui_root_7nfqu_12fi9_153",
  "has-adaptive-widths-default": "awsui_has-adaptive-widths-default_7nfqu_12fi9_197",
  "has-adaptive-widths-dashboard": "awsui_has-adaptive-widths-dashboard_7nfqu_12fi9_202",
  "drawer-expanded-mode": "awsui_drawer-expanded-mode_7nfqu_12fi9_217",
  "ai-drawer-expanded-mode": "awsui_ai-drawer-expanded-mode_7nfqu_12fi9_220",
  "ai-drawer": "awsui_ai-drawer_7nfqu_12fi9_220",
  "navigation": "awsui_navigation_7nfqu_12fi9_226",
  "tools": "awsui_tools_7nfqu_12fi9_227",
  "global-tools": "awsui_global-tools_7nfqu_12fi9_228",
  "tools-open": "awsui_tools-open_7nfqu_12fi9_274",
  "split-panel-side": "awsui_split-panel-side_7nfqu_12fi9_288",
  "split-panel-bottom": "awsui_split-panel-bottom_7nfqu_12fi9_295",
  "panel-hidden": "awsui_panel-hidden_7nfqu_12fi9_308",
  "toolbar-container": "awsui_toolbar-container_7nfqu_12fi9_318",
  "notifications-container": "awsui_notifications-container_7nfqu_12fi9_325",
  "notifications-background": "awsui_notifications-background_7nfqu_12fi9_329",
  "main-landmark": "awsui_main-landmark_7nfqu_12fi9_340",
  "main": "awsui_main_7nfqu_12fi9_340",
  "main-disable-paddings": "awsui_main-disable-paddings_7nfqu_12fi9_349",
  "content-header": "awsui_content-header_7nfqu_12fi9_359",
  "content": "awsui_content_7nfqu_12fi9_359",
  "unfocusable-mobile": "awsui_unfocusable-mobile_7nfqu_12fi9_369",
  "hidden": "awsui_hidden_7nfqu_12fi9_374",
  "breadcrumbs-own": "awsui_breadcrumbs-own_7nfqu_12fi9_378",
  "breadcrumbs-discovered": "awsui_breadcrumbs-discovered_7nfqu_12fi9_378"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/state/use-skeleton-slots-attributes.js
var contentTypeCustomWidths = ["dashboard", "cards", "table"];
var useSkeletonSlotsAttributes = (hasToolbar, appLayoutProps, appLayoutState) => {
  var _a2, _b, _c;
  const { isNested, activeDrawerSize, navigationOpen, verticalOffsets, splitPanelOffsets, activeDrawer, expandedDrawerId, activeAiDrawer } = (_a2 = appLayoutState.widgetizedState) !== null && _a2 !== void 0 ? _a2 : {};
  const { contentType, placement, maxContentWidth, navigationWidth, minContentWidth, disableContentPaddings } = appLayoutProps;
  const isMobile = useMobile();
  const toolsOpen = !!activeDrawer;
  const drawerExpandedMode = !!expandedDrawerId;
  const aiDrawerExpandedMode = expandedDrawerId === (activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.id);
  const anyPanelOpen = navigationOpen || toolsOpen;
  const isMaxWidth = maxContentWidth === Number.MAX_VALUE || maxContentWidth === Number.MAX_SAFE_INTEGER;
  const wrapperElAttributes = {
    className: clsx_m_default(styles_css_default44.root, styles_css_default20.root, {
      [styles_css_default44["has-adaptive-widths-default"]]: !contentTypeCustomWidths.includes(contentType),
      [styles_css_default44["has-adaptive-widths-dashboard"]]: contentType === "dashboard",
      [styles_css_default44["drawer-expanded-mode"]]: drawerExpandedMode,
      [styles_css_default44["ai-drawer-expanded-mode"]]: aiDrawerExpandedMode
    }),
    style: {
      minBlockSize: isNested ? "100%" : `calc(100vh - ${placement.insetBlockStart + placement.insetBlockEnd}px)`,
      [custom_css_properties_default.maxContentWidth]: isMaxWidth ? "100%" : maxContentWidth ? `${maxContentWidth}px` : "",
      [custom_css_properties_default.navigationWidth]: `${navigationWidth}px`,
      [custom_css_properties_default.toolsWidth]: `${activeDrawerSize}px`
    },
    "data-awsui-app-layout-widget-loaded": true
  };
  const mainElAttributes = {
    className: clsx_m_default(styles_css_default44["main-landmark"], isMobile && anyPanelOpen && styles_css_default44["unfocusable-mobile"], drawerExpandedMode && styles_css_default44.hidden)
  };
  const contentWrapperElAttributes = {
    className: clsx_m_default(styles_css_default44.main, { [styles_css_default44["main-disable-paddings"]]: disableContentPaddings }),
    style: Object.assign(Object.assign({ paddingBlockEnd: splitPanelOffsets === null || splitPanelOffsets === void 0 ? void 0 : splitPanelOffsets.mainContentPaddingBlockEnd }, hasToolbar || !isNested ? {
      [global_vars_default.stickyVerticalTopOffset]: `${(_b = verticalOffsets === null || verticalOffsets === void 0 ? void 0 : verticalOffsets.header) !== null && _b !== void 0 ? _b : 0}px`,
      [global_vars_default.stickyVerticalBottomOffset]: `${(_c = splitPanelOffsets === null || splitPanelOffsets === void 0 ? void 0 : splitPanelOffsets.stickyVerticalBottomOffset) !== null && _c !== void 0 ? _c : 0}px`
    } : {}), !isMobile ? { minWidth: `${minContentWidth}px` } : {})
  };
  const contentHeaderElAttributes = {
    className: styles_css_default44["content-header"]
  };
  const contentElAttributes = {
    className: clsx_m_default(styles_css_default44.content, styles_css_default20.content)
  };
  return {
    wrapperElAttributes,
    mainElAttributes,
    contentWrapperElAttributes,
    contentHeaderElAttributes,
    contentElAttributes
  };
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/state/index.js
var AppLayoutStateProvider = ({ appLayoutProps, stateManager, forwardRef: forwardRef32 }) => {
  var _a2;
  const [hasToolbar, setHasToolbar] = (0, import_react138.useState)((_a2 = stateManager.current.hasToolbar) !== null && _a2 !== void 0 ? _a2 : true);
  const appLayoutState = useAppLayout(hasToolbar, appLayoutProps, forwardRef32);
  const skeletonSlotsAttributes = useSkeletonSlotsAttributes(hasToolbar, appLayoutProps, appLayoutState);
  (0, import_react138.useLayoutEffect)(() => {
    var _a3;
    if (!((_a3 = stateManager.current) === null || _a3 === void 0 ? void 0 : _a3.setState)) {
      console.warn("AppLayout state manager is not found");
      return;
    }
    stateManager.current.setState(appLayoutState, skeletonSlotsAttributes, getPropsToMerge(appLayoutProps, appLayoutState), mergeProps);
  });
  (0, import_react138.useLayoutEffect)(() => {
    stateManager.current.setToolbar = setHasToolbar;
  }, [stateManager]);
  return import_react138.default.createElement(import_react138.default.Fragment, null);
};
var createWidgetizedAppLayoutState = createWidgetizedComponent(AppLayoutStateProvider);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/widget-areas/after-main-slot.js
var import_react154 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/local-drawer.js
var import_react139 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/use-resize.js
function useResize2({ currentWidth, minWidth, maxWidth, panelRef, handleRef, onResize, position }) {
  const onResizeHandler = (newWidth) => {
    const size = getLimitedValue(minWidth, newWidth, maxWidth);
    if (maxWidth >= minWidth) {
      onResize(size);
    }
  };
  const sizeControlProps = {
    position: position !== null && position !== void 0 ? position : "side",
    panelRef,
    handleRef,
    onResize: onResizeHandler
  };
  const clampedWidth = getLimitedValue(minWidth, currentWidth, maxWidth);
  const relativeSize = (clampedWidth - minWidth) / (maxWidth - minWidth) * 100;
  const onPointerDown = usePointerEvents(sizeControlProps);
  const { onKeyDown, onDirectionClick } = useKeyboardEvents(sizeControlProps);
  return { onKeyDown, onDirectionClick, onPointerDown, relativeSize };
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/styles.scoped.css";
var styles_css_default45 = {
  "drawer": "awsui_drawer_12i0j_z49q4_193",
  "with-expanded-motion": "awsui_with-expanded-motion_12i0j_z49q4_207",
  "legacy": "awsui_legacy_12i0j_z49q4_221",
  "ai-drawer": "awsui_ai-drawer_12i0j_z49q4_221",
  "last-opened": "awsui_last-opened_12i0j_z49q4_229",
  "drawer-global": "awsui_drawer-global_12i0j_z49q4_233",
  "drawer-expanded": "awsui_drawer-expanded_12i0j_z49q4_242",
  "drawer-hidden": "awsui_drawer-hidden_12i0j_z49q4_246",
  "has-next-siblings": "awsui_has-next-siblings_12i0j_z49q4_256",
  "global-drawer-wrapper": "awsui_global-drawer-wrapper_12i0j_z49q4_256",
  "drawer-content-container": "awsui_drawer-content-container_12i0j_z49q4_270",
  "drawer-gap": "awsui_drawer-gap_12i0j_z49q4_273",
  "drawer-close-button": "awsui_drawer-close-button_12i0j_z49q4_291",
  "drawer-expanded-mode-button": "awsui_drawer-expanded-mode-button_12i0j_z49q4_297",
  "drawer-content": "awsui_drawer-content_12i0j_z49q4_270",
  "drawer-content-hidden": "awsui_drawer-content-hidden_12i0j_z49q4_309",
  "drawer-slider": "awsui_drawer-slider_12i0j_z49q4_312",
  "drawer-actions": "awsui_drawer-actions_12i0j_z49q4_362",
  "ai-drawer-slider-handle": "awsui_ai-drawer-slider-handle_12i0j_z49q4_418",
  "drawer-content-header": "awsui_drawer-content-header_12i0j_z49q4_437",
  "drawer-content-header-content": "awsui_drawer-content-header-content_12i0j_z49q4_450",
  "drawer-back-to-console-slot": "awsui_drawer-back-to-console-slot_12i0j_z49q4_467",
  "drawer-back-to-console-button-wrapper": "awsui_drawer-back-to-console-button-wrapper_12i0j_z49q4_506",
  "drawer-back-to-console-button": "awsui_drawer-back-to-console-button_12i0j_z49q4_506",
  "drawer-content-content": "awsui_drawer-content-content_12i0j_z49q4_579"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/local-drawer.js
function AppLayoutDrawerImplementation({ appLayoutInternals }) {
  var _a2, _b, _c;
  const { activeDrawer, minDrawerSize, activeDrawerSize, maxDrawerSize, ariaLabels, drawers, drawersFocusControl, isMobile, placement, verticalOffsets, drawersOpenQueue, onActiveDrawerChange, onActiveDrawerResize } = appLayoutInternals;
  const drawerRef = (0, import_react139.useRef)(null);
  const activeDrawerId = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id;
  const computedAriaLabels = {
    closeButton: activeDrawer ? (_a2 = activeDrawer.ariaLabels) === null || _a2 === void 0 ? void 0 : _a2.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,
    content: activeDrawer ? (_b = activeDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.drawerName : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools
  };
  const { drawerTopOffset, drawerHeight } = getDrawerStyles(verticalOffsets, isMobile, placement);
  const toolsOnlyMode = drawers.length === 1 && drawers[0].id === TOOLS_DRAWER_ID;
  const isToolsDrawer = (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) === TOOLS_DRAWER_ID || toolsOnlyMode;
  const toolsContent = (_c = drawers === null || drawers === void 0 ? void 0 : drawers.find((drawer) => drawer.id === TOOLS_DRAWER_ID)) === null || _c === void 0 ? void 0 : _c.content;
  const resizeProps = useResize2({
    currentWidth: activeDrawerSize,
    minWidth: minDrawerSize,
    maxWidth: maxDrawerSize,
    panelRef: drawerRef,
    handleRef: drawersFocusControl.refs.slider,
    onResize: (size2) => onActiveDrawerResize({ id: activeDrawerId, size: size2 })
  });
  const isLegacyDrawer = drawersOpenQueue === void 0;
  const size = getLimitedValue(minDrawerSize, activeDrawerSize, maxDrawerSize);
  const lastOpenedDrawerId = (drawersOpenQueue === null || drawersOpenQueue === void 0 ? void 0 : drawersOpenQueue.length) ? drawersOpenQueue[0] : activeDrawerId;
  const animationDisabled = (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultActive) && !drawersOpenQueue.includes(activeDrawer.id);
  return import_react139.default.createElement(Transition_default, { nodeRef: drawerRef, in: !!activeDrawer, appear: true, timeout: 0 }, (state) => {
    var _a3, _b2;
    return import_react139.default.createElement(
      "aside",
      { id: activeDrawerId, "aria-hidden": !activeDrawer, "aria-label": computedAriaLabels.content, className: clsx_m_default(styles_css_default45.drawer, {
        [styles_css_default36["with-motion-horizontal"]]: !animationDisabled,
        [styles_css_default45["last-opened"]]: lastOpenedDrawerId === activeDrawerId,
        [styles_css_default45.legacy]: isLegacyDrawer,
        [styles_css_default20["active-drawer"]]: !toolsOnlyMode && activeDrawerId,
        [styles_css_default20.tools]: isToolsDrawer,
        [styles_css_default45["drawer-hidden"]]: !activeDrawer,
        [styles_css_default20["drawer-closed"]]: !activeDrawer
      }), ref: drawerRef, onBlur: (e3) => {
        if (!e3.relatedTarget || !e3.currentTarget.contains(e3.relatedTarget)) {
          drawersFocusControl.loseFocus();
        }
      }, style: Object.assign({ blockSize: drawerHeight, insetBlockStart: drawerTopOffset }, !isMobile && !isLegacyDrawer && {
        [custom_css_properties_default.drawerSize]: `${["entering", "entered"].includes(state) ? size : 0}px`
      }), "data-testid": activeDrawerId && `awsui-app-layout-drawer-${activeDrawerId}` },
      !isMobile && (activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.resizable) && import_react139.default.createElement(
        "div",
        { className: styles_css_default45["drawer-slider"] },
        import_react139.default.createElement(panel_resize_handle_default, { ref: drawersFocusControl.refs.slider, position: "side", className: styles_css_default20["drawers-slider"], ariaLabel: (_a3 = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _a3 === void 0 ? void 0 : _a3.resizeHandle, tooltipText: (_b2 = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.ariaLabels) === null || _b2 === void 0 ? void 0 : _b2.resizeHandleTooltipText, ariaValuenow: resizeProps.relativeSize, onKeyDown: resizeProps.onKeyDown, onPointerDown: resizeProps.onPointerDown, onDirectionClick: resizeProps.onDirectionClick })
      ),
      import_react139.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default45["drawer-content-container"], styles_css_default36["with-motion-horizontal"]) },
        import_react139.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default45["drawer-close-button"]) },
          import_react139.default.createElement(InternalButton, { ariaLabel: computedAriaLabels.closeButton, className: clsx_m_default({
            [styles_css_default20["active-drawer-close-button"]]: !isToolsDrawer && activeDrawerId,
            [styles_css_default20["tools-close"]]: isToolsDrawer
          }), formAction: "none", iconName: isMobile ? "close" : "angle-right", onClick: () => onActiveDrawerChange(null, { initiatedByUserAction: true }), ref: drawersFocusControl.refs.close, variant: "icon", analyticsAction: "close" })
        ),
        import_react139.default.createElement("div", { className: clsx_m_default(styles_css_default45["drawer-content"], activeDrawerId !== TOOLS_DRAWER_ID && styles_css_default45["drawer-content-hidden"]), style: { blockSize: drawerHeight } }, toolsContent),
        activeDrawerId !== TOOLS_DRAWER_ID && import_react139.default.createElement("div", { className: styles_css_default45["drawer-content"], style: { blockSize: drawerHeight } }, activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.content)
      )
    );
  });
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/global-drawers.js
var import_react152 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/global-drawer.js
var import_react151 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-group/internal.js
var import_react149 = __toESM(require_react());

// node_modules/@cloudscape-design/components/navigable-group/internal.js
var import_react140 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/utils/circle-index.js
function circleIndex2(index, [from, to]) {
  if (index < from) {
    return to;
  }
  if (index > to) {
    return from;
  }
  return index;
}

// node_modules/@cloudscape-design/components/navigable-group/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/navigable-group/styles.scoped.css";
var styles_css_default46 = {
  "root": "awsui_root_ghvqw_1g0cx_5"
};

// node_modules/@cloudscape-design/components/navigable-group/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/navigable-group/test-classes/styles.scoped.css";
var styles_css_default47 = {
  "root": "awsui_root_efqlv_1qglu_5"
};

// node_modules/@cloudscape-design/components/navigable-group/internal.js
var InternalNavigableGroup = (0, import_react140.forwardRef)((_a2, ref) => {
  var { children: children2, getItemKey: getItemKey2, navigationDirection = "horizontal", __internalRootRef } = _a2, props2 = __rest(_a2, ["children", "getItemKey", "navigationDirection", "__internalRootRef"]);
  const baseProps = getBaseProps(props2);
  const navigationAPI = (0, import_react140.useRef)(null);
  const containerObjectRef = (0, import_react140.useRef)(null);
  const containerRef = useMergeRefs(containerObjectRef, __internalRootRef);
  const focusedIdRef = (0, import_react140.useRef)();
  (0, import_react140.useImperativeHandle)(ref, () => ({
    focus: () => {
      const target = getNextFocusTarget();
      if (target) {
        target.focus();
      }
    }
  }));
  function getNextFocusTarget() {
    var _a3, _b;
    if (containerObjectRef.current) {
      const focusables = getFocusablesFrom(containerObjectRef.current);
      return (_b = (_a3 = focusables.find((el) => getItemKey2(el) === focusedIdRef.current)) !== null && _a3 !== void 0 ? _a3 : focusables[0]) !== null && _b !== void 0 ? _b : null;
    }
    return null;
  }
  function onUnregisterActive(focusableElement) {
    var _a3;
    const target = (_a3 = navigationAPI.current) === null || _a3 === void 0 ? void 0 : _a3.getFocusTarget();
    if (target && getItemKey2(target) !== getItemKey2(focusableElement)) {
      target.focus();
    }
  }
  (0, import_react140.useEffect)(() => {
    var _a3;
    (_a3 = navigationAPI.current) === null || _a3 === void 0 ? void 0 : _a3.updateFocusTarget();
  });
  function onFocus(event) {
    var _a3, _b;
    if (event.target instanceof HTMLElement && ((_a3 = navigationAPI.current) === null || _a3 === void 0 ? void 0 : _a3.isRegistered(event.target))) {
      focusedIdRef.current = getItemKey2(event.target);
    }
    (_b = navigationAPI.current) === null || _b === void 0 ? void 0 : _b.updateFocusTarget();
  }
  function onBlur() {
    var _a3;
    (_a3 = navigationAPI.current) === null || _a3 === void 0 ? void 0 : _a3.updateFocusTarget();
  }
  function onKeyDown(event) {
    var _a3, _b;
    const focusTarget = (_a3 = navigationAPI.current) === null || _a3 === void 0 ? void 0 : _a3.getFocusTarget();
    let specialKeys = [];
    switch (navigationDirection) {
      case "horizontal":
        specialKeys = [KeyCode2.right, KeyCode2.left];
        break;
      case "vertical":
        specialKeys = [KeyCode2.down, KeyCode2.up];
        break;
      case "both":
        specialKeys = [KeyCode2.right, KeyCode2.left, KeyCode2.down, KeyCode2.up];
        break;
    }
    specialKeys.push(KeyCode2.end, KeyCode2.home, KeyCode2.pageUp, KeyCode2.pageDown);
    if (hasModifierKeys(event) || specialKeys.indexOf(event.keyCode) === -1) {
      return;
    }
    if (!containerObjectRef.current || !focusTarget) {
      return;
    }
    if (document.activeElement && !((_b = navigationAPI.current) === null || _b === void 0 ? void 0 : _b.isRegistered(document.activeElement))) {
      return;
    }
    event.preventDefault();
    const focusables = getFocusablesFrom(containerObjectRef.current);
    const activeIndex = focusables.indexOf(focusTarget);
    const getNextIndex = (delta) => {
      const newIndex = activeIndex + delta;
      return circleIndex2(newIndex, [0, focusables.length - 1]);
    };
    handleKey2(event, {
      onHome: () => focusElement(focusables[0]),
      onEnd: () => focusElement(focusables[focusables.length - 1]),
      onInlineStart: () => focusElement(focusables[getNextIndex(-1)]),
      onBlockStart: () => focusElement(focusables[getNextIndex(-1)]),
      onInlineEnd: () => focusElement(focusables[getNextIndex(1)]),
      onBlockEnd: () => focusElement(focusables[getNextIndex(1)])
    });
  }
  function focusElement(element) {
    element.focus();
  }
  function getFocusablesFrom(target) {
    function isElementRegistered(element) {
      var _a3, _b;
      return (_b = (_a3 = navigationAPI.current) === null || _a3 === void 0 ? void 0 : _a3.isRegistered(element)) !== null && _b !== void 0 ? _b : false;
    }
    function isElementDisabled3(element) {
      if ("disabled" in element) {
        return element.disabled;
      }
      return false;
    }
    return getAllFocusables2(target).filter((el) => isElementRegistered(el) && !isElementDisabled3(el));
  }
  return import_react140.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default46.root, styles_css_default47.root, baseProps.className), ref: containerRef, onFocus, onBlur, onKeyDown }),
    import_react140.default.createElement(SingleTabStopNavigationProvider, { ref: navigationAPI, navigationActive: true, getNextFocusTarget, onUnregisterActive }, children2)
  );
});
var internal_default7 = InternalNavigableGroup;

// node_modules/@cloudscape-design/components/button-group/item-element.js
var import_react148 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-group/file-input-item.js
var import_react143 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-input/internal.js
var import_react142 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/context/form-field-context.js
var import_react141 = __toESM(require_react());
var FormFieldContext = (0, import_react141.createContext)({});
function applyDefault(fields, defaults2, keys) {
  const result = {};
  keys.forEach((key2) => {
    result[key2] = fields[key2] === void 0 ? defaults2[key2] : fields[key2];
  });
  return result;
}
function useFormFieldContext(props2) {
  const context = (0, import_react141.useContext)(FormFieldContext);
  return applyDefault(props2, context, ["invalid", "warning", "controlId", "ariaLabelledby", "ariaDescribedby"]);
}

// node_modules/@cloudscape-design/components/internal/hooks/check-controlled/index.js
function checkControlled(componentName3, propertyName, propertyValue, handlerName, handlerValue) {
  if (propertyValue !== void 0 && handlerValue === void 0 && isDevelopment2) {
    warnOnce(componentName3, `You provided \`${propertyName}\` prop without an \`${handlerName}\` handler. This will render a read-only component. If the component should be mutable, set an \`${handlerName}\` handler.`);
  }
}

// node_modules/@cloudscape-design/components/internal/utils/strings/pad-left-zeros.js
function padLeftZeros(text, length) {
  while (text.length < length) {
    text = `0${text}`;
  }
  return text;
}

// node_modules/@cloudscape-design/components/file-input/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/file-input/styles.scoped.css";
var styles_css_default48 = {
  "root": "awsui_root_1wp4s_1fn0v_185",
  "file-input": "awsui_file-input_1wp4s_1fn0v_189",
  "file-input-button": "awsui_file-input-button_1wp4s_1fn0v_204",
  "force-focus-outline-icon": "awsui_force-focus-outline-icon_1wp4s_1fn0v_204",
  "force-focus-outline-button": "awsui_force-focus-outline-button_1wp4s_1fn0v_225"
};

// node_modules/@cloudscape-design/components/file-input/internal.js
var InternalFileInput = import_react142.default.forwardRef((_a2, ref) => {
  var _b;
  var { accept, ariaRequired, ariaLabel, multiple = false, value, onChange, variant = "button", children: children2, __internalRootRef, __inputClassName, __inputNativeAttributes, __injectAnalyticsComponentMetadata } = _a2, restProps = __rest(_a2, ["accept", "ariaRequired", "ariaLabel", "multiple", "value", "onChange", "variant", "children", "__internalRootRef", "__inputClassName", "__inputNativeAttributes", "__injectAnalyticsComponentMetadata"]);
  const baseProps = getBaseProps(restProps);
  const uploadInputRef = (0, import_react142.useRef)(null);
  const containerRef = (0, import_react142.useRef)(null);
  const mergedRef = useMergeRefs(__internalRootRef, containerRef);
  const uploadButtonLabelId = useUniqueId("upload-button-label");
  const formFieldContext = useFormFieldContext(restProps);
  const selfControlId = useUniqueId("upload-input");
  const controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;
  useForwardFocus(ref, uploadInputRef);
  const [isFocused, setIsFocused] = (0, import_react142.useState)(false);
  const onUploadButtonClick = () => {
    var _a3;
    return (_a3 = uploadInputRef.current) === null || _a3 === void 0 ? void 0 : _a3.click();
  };
  const onUploadInputFocus = () => {
    setIsFocused(true);
  };
  const onUploadInputBlur = () => setIsFocused(false);
  const onUploadInputChange = ({ target }) => {
    fireNonCancelableEvent(onChange, { value: target.files ? Array.from(target.files) : [] });
  };
  checkControlled("FileInput", "value", value, "onChange", onChange);
  const nativeAttributes = Object.assign({ "aria-label": ariaLabel || children2, "aria-labelledby": joinStrings(formFieldContext.ariaLabelledby, uploadButtonLabelId), "aria-describedby": formFieldContext.ariaDescribedby }, __inputNativeAttributes);
  if (formFieldContext.invalid) {
    nativeAttributes["aria-invalid"] = true;
  }
  if (ariaRequired) {
    nativeAttributes["aria-required"] = true;
  }
  if (variant === "icon" && !ariaLabel) {
    warnOnce("FileInput", "Aria label is required with icon variant.");
  }
  (0, import_react142.useEffect)(() => {
    if (window.DataTransfer) {
      const dataTransfer = new DataTransfer();
      for (const file of value) {
        dataTransfer.items.add(file);
      }
      uploadInputRef.current.files = dataTransfer.files;
    }
    if (uploadInputRef.current) {
      uploadInputRef.current.value = "";
    }
  }, [value]);
  const { tabIndex } = useSingleTabStopNavigation(uploadInputRef);
  const analyticsLabel = variant === "button" && children2 ? "button" : "input";
  const componentAnalyticsMetadata2 = {
    name: "awsui.FileInput",
    label: analyticsLabel
  };
  const analyticsMetadata = { detail: { label: analyticsLabel } };
  if (__injectAnalyticsComponentMetadata) {
    analyticsMetadata.component = componentAnalyticsMetadata2;
  }
  return import_react142.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: mergedRef, className: clsx_m_default(baseProps.className, styles_css_default48.root) }, getAnalyticsMetadataAttribute(analyticsMetadata)),
    import_react142.default.createElement("input", Object.assign({ id: controlId, ref: uploadInputRef, type: "file", hidden: false, multiple, accept, onChange: onUploadInputChange, onFocus: onUploadInputFocus, onBlur: onUploadInputBlur, className: clsx_m_default(styles_css_default48["file-input"], styles_css_default48.hidden, __inputClassName), tabIndex }, nativeAttributes)),
    import_react142.default.createElement(internal_default3, { iconName: "upload", variant: variant === "icon" ? "icon" : void 0, formAction: "none", onClick: onUploadButtonClick, className: clsx_m_default(styles_css_default48["file-input-button"], {
      [styles_css_default48["force-focus-outline-button"]]: isFocused && variant === "button",
      [styles_css_default48["force-focus-outline-icon"]]: isFocused && variant === "icon"
    }), nativeButtonAttributes: { tabIndex: -1, "aria-hidden": true }, __skipNativeAttributesWarnings: true }, variant === "button" && children2),
    import_react142.default.createElement(ScreenreaderOnly, { id: uploadButtonLabelId }, ariaLabel || children2)
  );
});
var internal_default8 = InternalFileInput;

// node_modules/@cloudscape-design/components/button-group/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/button-group/test-classes/styles.scoped.css";
var styles_css_default49 = {
  "button-group": "awsui_button-group_1v2mg_1s3dt_5",
  "button-group-item": "awsui_button-group-item_1v2mg_1s3dt_9",
  "button-group-tooltip": "awsui_button-group-tooltip_1v2mg_1s3dt_13",
  "item": "awsui_item_1v2mg_1s3dt_17",
  "tooltip": "awsui_tooltip_1v2mg_1s3dt_21"
};

// node_modules/@cloudscape-design/components/button-group/file-input-item.js
var FileInputItem = (0, import_react143.forwardRef)(({ item, showTooltip, onTooltipDismiss, onFilesChange }, ref) => {
  const [files, setFiles] = (0, import_react143.useState)([]);
  const containerRef = import_react143.default.useRef(null);
  const canShowTooltip = Boolean(showTooltip);
  return import_react143.default.createElement(
    "div",
    { ref: containerRef },
    import_react143.default.createElement(internal_default8, { className: clsx_m_default(styles_css_default49["button-group-item"]), ref, variant: "icon", ariaLabel: item.text, accept: item.accept, multiple: item.multiple, value: files, onChange: (event) => {
      fireCancelableEvent(onFilesChange, { id: item.id, files: event.detail.value });
      setFiles(event.detail.value);
    }, "data-testid": item.id, __inputNativeAttributes: {
      "data-itemid": item.id
    }, __inputClassName: styles_css_default49.item }),
    canShowTooltip && import_react143.default.createElement(Tooltip, { trackRef: containerRef, trackKey: item.id, value: item.text, className: clsx_m_default(styles_css_default49.tooltip, styles_css_default49["button-group-tooltip"]), onDismiss: onTooltipDismiss })
  );
});
var file_input_item_default = FileInputItem;

// node_modules/@cloudscape-design/components/button-group/icon-button-item.js
var import_react144 = __toESM(require_react());
var IconButtonItem = (0, import_react144.forwardRef)(({ item, showTooltip, showFeedback, onTooltipDismiss, onItemClick }, ref) => {
  const containerRef = import_react144.default.useRef(null);
  const hasIcon = item.iconName || item.iconUrl || item.iconSvg;
  if (!hasIcon) {
    warnOnce("ButtonGroup", `Missing icon for item with id: ${item.id}`);
  }
  const canShowTooltip = Boolean(showTooltip && !item.disabled && !item.loading);
  const canShowFeedback = Boolean(showTooltip && showFeedback && item.popoverFeedback);
  return import_react144.default.createElement(
    "div",
    { ref: containerRef },
    import_react144.default.createElement(InternalButton, { variant: "icon", loading: item.loading, loadingText: item.loadingText, disabled: item.disabled, disabledReason: showFeedback ? void 0 : item.disabledReason, __focusable: canShowFeedback, iconName: hasIcon ? item.iconName : "close", iconUrl: item.iconUrl, iconSvg: item.iconSvg, iconAlt: item.text, ariaLabel: item.text, onClick: (event) => fireCancelableEvent(onItemClick, { id: item.id }, event), ref, "data-testid": item.id, "data-itemid": item.id, className: clsx_m_default(styles_css_default49.item, styles_css_default49["button-group-item"]), analyticsAction: item.analyticsAction, __title: "" }, item.text),
    (canShowTooltip || canShowFeedback) && import_react144.default.createElement(Tooltip, { trackRef: containerRef, trackKey: item.id, value: showFeedback && import_react144.default.createElement(internal_default2, { tagName: "span" }, item.popoverFeedback) || item.text, className: clsx_m_default(styles_css_default49.tooltip, styles_css_default49["button-group-tooltip"]), onDismiss: onTooltipDismiss })
  );
});
var icon_button_item_default = IconButtonItem;

// node_modules/@cloudscape-design/components/button-group/icon-toggle-button-item.js
var import_react146 = __toESM(require_react());

// node_modules/@cloudscape-design/components/toggle-button/internal.js
var import_react145 = __toESM(require_react());

// node_modules/@cloudscape-design/components/toggle-button/util.js
function getToggleIcon(pressed, defaultIcon, pressedIcon) {
  if (pressed) {
    return pressedIcon !== null && pressedIcon !== void 0 ? pressedIcon : defaultIcon;
  }
  return defaultIcon;
}

// node_modules/@cloudscape-design/components/toggle-button/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/toggle-button/styles.scoped.css";
var styles_css_default50 = {
  "variant-normal": "awsui_variant-normal_1a743_14khj_9",
  "pressed": "awsui_pressed_1a743_14khj_9",
  "variant-icon": "awsui_variant-icon_1a743_14khj_15"
};

// node_modules/@cloudscape-design/components/toggle-button/internal.js
var InternalToggleButton = import_react145.default.forwardRef((_a2, ref) => {
  var { pressed, iconName: defaultIconName, pressedIconName, iconSvg: defaultIconSvg, pressedIconSvg, iconUrl: defaultIconUrl, pressedIconUrl, variant, nativeButtonAttributes, onChange, className: className2 } = _a2, rest = __rest(_a2, ["pressed", "iconName", "pressedIconName", "iconSvg", "pressedIconSvg", "iconUrl", "pressedIconUrl", "variant", "nativeButtonAttributes", "onChange", "className"]);
  if (isDevelopment2) {
    if (defaultIconName && !pressedIconName) {
      warnOnce("ToggleButton", "`pressedIconName` must be provided for `pressed` state.");
    }
    if (defaultIconSvg && !pressedIconSvg) {
      warnOnce("ToggleButton", "`pressedIconSvg` must be provided for `pressed` state.");
    }
    if (defaultIconUrl && !pressedIconUrl) {
      warnOnce("ToggleButton", "`pressedIconUrl` must be provided for `pressed` state.");
    }
  }
  return import_react145.default.createElement(internal_default3, Object.assign({ className: clsx_m_default(className2, styles_css_default50[`variant-${variant}`], { [styles_css_default50.pressed]: pressed }), variant, formAction: "none", iconName: getToggleIcon(pressed, defaultIconName, pressedIconName), iconUrl: getToggleIcon(pressed, defaultIconUrl, pressedIconUrl), iconSvg: getToggleIcon(pressed, defaultIconSvg, pressedIconSvg), "aria-pressed": pressed, onClick: (event) => {
    event.preventDefault();
    fireNonCancelableEvent(onChange, { pressed: !pressed });
  } }, rest, { ref, nativeButtonAttributes }));
});

// node_modules/@cloudscape-design/components/button-group/icon-toggle-button-item.js
var IconToggleButtonItem = (0, import_react146.forwardRef)(({ item, showTooltip, showFeedback, onTooltipDismiss, onItemClick }, ref) => {
  var _a2;
  const containerRef = import_react146.default.useRef(null);
  const hasIcon = item.iconName || item.iconUrl || item.iconSvg;
  const hasPressedIcon = item.pressedIconName || item.pressedIconUrl || item.pressedIconSvg;
  if (!hasIcon) {
    warnOnce("ButtonGroup", `Missing icon for item with id: ${item.id}`);
  }
  if (!hasPressedIcon) {
    warnOnce("ButtonGroup", `Missing pressed icon for item with id: ${item.id}`);
  }
  const feedbackContent = item.pressed ? (_a2 = item.pressedPopoverFeedback) !== null && _a2 !== void 0 ? _a2 : item.popoverFeedback : item.popoverFeedback;
  const canShowTooltip = showTooltip && !item.disabled && !item.loading;
  const canShowFeedback = showTooltip && showFeedback && feedbackContent;
  return import_react146.default.createElement(
    "div",
    { ref: containerRef },
    import_react146.default.createElement(InternalToggleButton, { variant: "icon", pressed: item.pressed, loading: item.loading, loadingText: item.loadingText, disabled: item.disabled, disabledReason: showFeedback ? void 0 : item.disabledReason, iconName: hasIcon ? item.iconName : "close", iconUrl: item.iconUrl, iconSvg: item.iconSvg, pressedIconName: hasIcon ? item.pressedIconName : "close", pressedIconUrl: item.pressedIconUrl, pressedIconSvg: item.pressedIconUrl, ariaLabel: item.text, onChange: (event) => fireCancelableEvent(onItemClick, { id: item.id, pressed: event.detail.pressed }), ref, "data-testid": item.id, "data-itemid": item.id, className: clsx_m_default(styles_css_default49.item, styles_css_default49["button-group-item"]), __title: "" }, item.text),
    (canShowTooltip || canShowFeedback) && import_react146.default.createElement(Tooltip, { trackRef: containerRef, trackKey: item.id, value: showFeedback && import_react146.default.createElement(internal_default2, { tagName: "span" }, feedbackContent) || item.text, className: clsx_m_default(styles_css_default49.tooltip, styles_css_default49["button-group-tooltip"]), onDismiss: onTooltipDismiss })
  );
});
var icon_toggle_button_item_default = IconToggleButtonItem;

// node_modules/@cloudscape-design/components/button-group/menu-dropdown-item.js
var import_react147 = __toESM(require_react());
var MenuDropdownItem = import_react147.default.forwardRef(({ item, showTooltip, onItemClick, onTooltipDismiss, expandToViewport, position }, ref) => {
  const containerRef = import_react147.default.useRef(null);
  const onClickHandler = (event) => {
    fireCancelableEvent(onItemClick, { id: event.detail.id, checked: event.detail.checked }, event);
  };
  return import_react147.default.createElement(internal_default6, { ref, variant: "icon", items: item.items, onItemClick: onClickHandler, expandToViewport, ariaLabel: item.text, className: styles_css_default49["button-group-item"], position, "data-testid": item.id, disabled: item.disabled, customTriggerBuilder: ({ onClick, isOpen, triggerRef, ariaLabel, ariaExpanded, testUtilsClass }) => import_react147.default.createElement(
    "div",
    Object.assign({ ref: containerRef }, item.disabled ? {} : getAnalyticsMetadataAttribute({ detail: { position } })),
    !isOpen && showTooltip && !item.disabled && !item.loading && import_react147.default.createElement(Tooltip, { trackRef: containerRef, trackKey: item.id, value: item.text, className: clsx_m_default(styles_css_default49.tooltip, styles_css_default49["button-group-tooltip"]), onDismiss: onTooltipDismiss }),
    import_react147.default.createElement(internal_default3, { ref: triggerRef, variant: "icon", ariaLabel, "data-itemid": item.id, ariaExpanded, className: clsx_m_default(styles_css_default49.item, testUtilsClass), iconName: "ellipsis", loading: item.loading, loadingText: item.loadingText, disabled: item.disabled, disabledReason: item.disabledReason, onClick, __title: "" })
  ) });
});
var menu_dropdown_item_default = MenuDropdownItem;

// node_modules/@cloudscape-design/components/button-group/style.js
function getButtonGroupStyles(style) {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
  if (SYSTEM !== "core" || !(style === null || style === void 0 ? void 0 : style.root)) {
    return void 0;
  }
  return Object.assign({ borderRadius: (_a2 = style === null || style === void 0 ? void 0 : style.root) === null || _a2 === void 0 ? void 0 : _a2.borderRadius, borderWidth: (_b = style === null || style === void 0 ? void 0 : style.root) === null || _b === void 0 ? void 0 : _b.borderWidth, borderStyle: ((_c = style === null || style === void 0 ? void 0 : style.root) === null || _c === void 0 ? void 0 : _c.borderWidth) ? "solid" : void 0, boxShadow: (_d = style === null || style === void 0 ? void 0 : style.root) === null || _d === void 0 ? void 0 : _d.boxShadow, paddingBlock: (_e = style === null || style === void 0 ? void 0 : style.root) === null || _e === void 0 ? void 0 : _e.paddingBlock, paddingInline: (_f = style === null || style === void 0 ? void 0 : style.root) === null || _f === void 0 ? void 0 : _f.paddingInline, background: (_g = style === null || style === void 0 ? void 0 : style.root) === null || _g === void 0 ? void 0 : _g.background, borderColor: (_h = style === null || style === void 0 ? void 0 : style.root) === null || _h === void 0 ? void 0 : _h.borderColor }, ((_j = style === null || style === void 0 ? void 0 : style.root) === null || _j === void 0 ? void 0 : _j.focusRing) && {
    [custom_css_properties_default.styleFocusRingBorderColor]: (_k = style.root.focusRing) === null || _k === void 0 ? void 0 : _k.borderColor,
    [custom_css_properties_default.styleFocusRingBorderRadius]: (_l = style.root.focusRing) === null || _l === void 0 ? void 0 : _l.borderRadius,
    [custom_css_properties_default.styleFocusRingBorderWidth]: (_m = style.root.focusRing) === null || _m === void 0 ? void 0 : _m.borderWidth
  });
}
function getButtonGroupItemStyles(style) {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
  if (SYSTEM !== "core" || !(style === null || style === void 0 ? void 0 : style.item)) {
    return void 0;
  }
  return Object.assign(Object.assign(Object.assign({}, ((_a2 = style === null || style === void 0 ? void 0 : style.item) === null || _a2 === void 0 ? void 0 : _a2.color) && {
    [custom_css_properties_default.styleColorActive]: (_b = style.item.color) === null || _b === void 0 ? void 0 : _b.active,
    [custom_css_properties_default.styleColorDefault]: (_c = style.item.color) === null || _c === void 0 ? void 0 : _c.default,
    [custom_css_properties_default.styleColorDisabled]: (_d = style.item.color) === null || _d === void 0 ? void 0 : _d.disabled,
    [custom_css_properties_default.styleColorHover]: (_e = style.item.color) === null || _e === void 0 ? void 0 : _e.hover
  }), ((_f = style === null || style === void 0 ? void 0 : style.item) === null || _f === void 0 ? void 0 : _f.boxShadow) && {
    [custom_css_properties_default.styleBoxShadowActive]: (_g = style.item.boxShadow) === null || _g === void 0 ? void 0 : _g.active,
    [custom_css_properties_default.styleBoxShadowDefault]: (_h = style.item.boxShadow) === null || _h === void 0 ? void 0 : _h.default,
    [custom_css_properties_default.styleBoxShadowDisabled]: (_j = style.item.boxShadow) === null || _j === void 0 ? void 0 : _j.disabled,
    [custom_css_properties_default.styleBoxShadowHover]: (_k = style.item.boxShadow) === null || _k === void 0 ? void 0 : _k.hover
  }), ((_l = style === null || style === void 0 ? void 0 : style.item) === null || _l === void 0 ? void 0 : _l.focusRing) && {
    [custom_css_properties_default.styleFocusRingBorderColor]: (_m = style.item.focusRing) === null || _m === void 0 ? void 0 : _m.borderColor,
    [custom_css_properties_default.styleFocusRingBorderRadius]: (_o = style.item.focusRing) === null || _o === void 0 ? void 0 : _o.borderRadius,
    [custom_css_properties_default.styleFocusRingBorderWidth]: (_p = style.item.focusRing) === null || _p === void 0 ? void 0 : _p.borderWidth
  });
}

// node_modules/@cloudscape-design/components/button-group/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/button-group/styles.scoped.css";
var styles_css_default51 = {
  "root": "awsui_root_vdkpj_18dsz_181",
  "item-wrapper": "awsui_item-wrapper_vdkpj_18dsz_217",
  "group": "awsui_group_vdkpj_18dsz_221",
  "divider": "awsui_divider_vdkpj_18dsz_225"
};

// node_modules/@cloudscape-design/components/button-group/item-element.js
var ItemElement2 = (0, import_react148.forwardRef)(({ item, dropdownExpandToViewport, tooltip, setTooltip, onItemClick, onFilesChange, position, style }, ref) => {
  const containerRef = (0, import_react148.useRef)(null);
  const buttonRef = (0, import_react148.useRef)(null);
  const fileInputRef = (0, import_react148.useRef)(null);
  const buttonDropdownRef = (0, import_react148.useRef)(null);
  (0, import_react148.useImperativeHandle)(ref, () => ({
    focus: () => {
      var _a2, _b, _c;
      (_a2 = buttonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      (_b = fileInputRef.current) === null || _b === void 0 ? void 0 : _b.focus();
      (_c = buttonDropdownRef.current) === null || _c === void 0 ? void 0 : _c.focus();
    }
  }));
  (0, import_react148.useEffect)(() => {
    if ((tooltip === null || tooltip === void 0 ? void 0 : tooltip.item) !== item.id) {
      return;
    }
    const close = () => {
      setTooltip(null);
    };
    const handlePointerDownEvent = (event) => {
      var _a2;
      if (event.target && ((_a2 = containerRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target))) {
        return;
      }
      close();
    };
    const handleKeyDownEvent = (event) => {
      if (event.key === "Escape") {
        close();
      }
    };
    const controller = new AbortController();
    window.addEventListener("pointerdown", handlePointerDownEvent, { signal: controller.signal });
    window.addEventListener("keydown", handleKeyDownEvent, { signal: controller.signal });
    return () => {
      controller.abort();
    };
  }, [item.id, tooltip, setTooltip]);
  const onShowTooltipSoft = (show) => {
    if (!(tooltip === null || tooltip === void 0 ? void 0 : tooltip.feedback)) {
      setTooltip(show ? { item: item.id, feedback: false } : null);
    }
  };
  const onShowTooltipHard = (show) => {
    if (!show && item.id !== (tooltip === null || tooltip === void 0 ? void 0 : tooltip.item)) {
      return;
    }
    setTooltip(show ? { item: item.id, feedback: false } : null);
  };
  const onClickHandler = (event) => {
    const hasPopoverFeedback = "popoverFeedback" in item && item.popoverFeedback;
    if (hasPopoverFeedback) {
      setTooltip({ item: item.id, feedback: true });
    }
    fireCancelableEvent(onItemClick, event.detail, event);
  };
  const onFilesChangeHandler = (event) => {
    fireCancelableEvent(onFilesChange, event.detail, event);
    setTooltip(null);
  };
  const itemStylePropertiesAndVariables = getButtonGroupItemStyles(style);
  return import_react148.default.createElement(
    "div",
    Object.assign({ key: item.id, className: styles_css_default51["item-wrapper"], ref: containerRef, onPointerEnter: () => onShowTooltipSoft(true), onPointerLeave: () => onShowTooltipSoft(false), onFocus: (event) => {
      if (event && event.relatedTarget && nodeBelongs2(containerRef.current, event.relatedTarget)) {
        return;
      }
      onShowTooltipHard(true);
    }, onBlur: () => onShowTooltipHard(false), style: itemStylePropertiesAndVariables }, item.type === "menu-dropdown" || item.disabled ? {} : getAnalyticsMetadataAttribute({ detail: { position, id: item.id } })),
    item.type === "icon-button" && import_react148.default.createElement(icon_button_item_default, { ref: buttonRef, item, onItemClick: onClickHandler, showTooltip: (tooltip === null || tooltip === void 0 ? void 0 : tooltip.item) === item.id, showFeedback: !!(tooltip === null || tooltip === void 0 ? void 0 : tooltip.feedback), onTooltipDismiss: () => setTooltip(null) }),
    item.type === "icon-toggle-button" && import_react148.default.createElement(icon_toggle_button_item_default, { ref: buttonRef, item, onItemClick: onClickHandler, showTooltip: (tooltip === null || tooltip === void 0 ? void 0 : tooltip.item) === item.id, showFeedback: !!(tooltip === null || tooltip === void 0 ? void 0 : tooltip.feedback), onTooltipDismiss: () => setTooltip(null) }),
    item.type === "icon-file-input" && import_react148.default.createElement(file_input_item_default, { ref: fileInputRef, item, onFilesChange: onFilesChangeHandler, showTooltip: (tooltip === null || tooltip === void 0 ? void 0 : tooltip.item) === item.id, onTooltipDismiss: () => setTooltip(null) }),
    item.type === "menu-dropdown" && import_react148.default.createElement(menu_dropdown_item_default, { ref: buttonDropdownRef, item, showTooltip: (tooltip === null || tooltip === void 0 ? void 0 : tooltip.item) === item.id, onItemClick: onClickHandler, expandToViewport: dropdownExpandToViewport, onTooltipDismiss: () => setTooltip(null), position })
  );
});
var item_element_default2 = ItemElement2;

// node_modules/@cloudscape-design/components/button-group/internal.js
var InternalButtonGroup = (0, import_react149.forwardRef)((_a2, ref) => {
  var { items = [], onItemClick, onFilesChange, ariaLabel, dropdownExpandToViewport, style, __internalRootRef } = _a2, props2 = __rest(_a2, ["items", "onItemClick", "onFilesChange", "ariaLabel", "dropdownExpandToViewport", "style", "__internalRootRef"]);
  const baseProps = getBaseProps(props2);
  const itemsRef = (0, import_react149.useRef)({});
  const [tooltip, setTooltip] = (0, import_react149.useState)(null);
  (0, import_react149.useImperativeHandle)(ref, () => ({
    focus: (id) => {
      var _a3;
      (_a3 = itemsRef.current[id]) === null || _a3 === void 0 ? void 0 : _a3.focus();
    }
  }));
  const stylePropertiesAndVariables = getButtonGroupStyles(style);
  return import_react149.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef, className: clsx_m_default(styles_css_default51.root, styles_css_default49["button-group"], baseProps.className), role: "toolbar", "aria-label": ariaLabel, style: stylePropertiesAndVariables }),
    import_react149.default.createElement(internal_default7, { getItemKey: (item) => item.dataset.itemid }, items.map((itemOrGroup, index) => {
      var _a3;
      const itemContent = (item, position) => import_react149.default.createElement(item_element_default2, { key: item.id, item, dropdownExpandToViewport, tooltip, setTooltip, onItemClick, onFilesChange, ref: (element) => itemsRef.current[item.id] = element, position, style });
      const isGroupBefore = ((_a3 = items[index - 1]) === null || _a3 === void 0 ? void 0 : _a3.type) === "group";
      const currentItem = items[index];
      const isGroupNow = (currentItem === null || currentItem === void 0 ? void 0 : currentItem.type) === "group";
      const shouldAddDivider = isGroupBefore || !isGroupBefore && isGroupNow && index !== 0;
      if (isGroupNow && currentItem.items.length === 0) {
        warnOnce("ButtonGroup", "Empty group detected. Empty groups are not allowed.");
      }
      return import_react149.default.createElement(
        import_react149.default.Fragment,
        { key: itemOrGroup.type === "group" ? index : itemOrGroup.id },
        shouldAddDivider && import_react149.default.createElement("div", { className: styles_css_default51.divider }),
        itemOrGroup.type === "group" ? import_react149.default.createElement("div", { key: index, role: "group", "aria-label": itemOrGroup.text, className: styles_css_default51.group }, itemOrGroup.items.map((item, subIndex) => itemContent(item, `${index + 1},${subIndex + 1}`))) : itemContent(itemOrGroup, `${index + 1}`)
      );
    }))
  );
});
var internal_default9 = InternalButtonGroup;

// node_modules/@cloudscape-design/components/internal/hooks/use-previous/index.js
var import_react150 = __toESM(require_react());
var usePrevious = (value) => {
  const ref = (0, import_react150.useRef)();
  (0, import_react150.useEffect)(() => {
    ref.current = value;
  });
  return ref.current;
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/global-drawer.js
function AppLayoutGlobalDrawerImplementation({ appLayoutInternals, show, activeGlobalDrawer }) {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _j;
  const { ariaLabels, globalDrawersFocusControl, isMobile, placement, onActiveGlobalDrawersChange, onActiveDrawerResize, minGlobalDrawersSizes, maxGlobalDrawersSizes, activeGlobalDrawersSizes, activeGlobalDrawers, verticalOffsets, drawersOpenQueue, expandedDrawerId, setExpandedDrawerId, activeAiDrawer } = appLayoutInternals;
  const drawerRef = (0, import_react151.useRef)(null);
  const activeDrawerId = (_a2 = activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.id) !== null && _a2 !== void 0 ? _a2 : "";
  const computedAriaLabels = {
    closeButton: activeGlobalDrawer ? (_b = activeGlobalDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,
    content: activeGlobalDrawer ? (_c = activeGlobalDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.drawerName : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools
  };
  const { drawerTopOffset, drawerHeight } = getDrawerStyles(verticalOffsets, isMobile, placement);
  const activeDrawerSize = (_d = activeDrawerId ? activeGlobalDrawersSizes[activeDrawerId] : 0) !== null && _d !== void 0 ? _d : 0;
  const minDrawerSize = (_e = activeDrawerId ? minGlobalDrawersSizes[activeDrawerId] : 0) !== null && _e !== void 0 ? _e : 0;
  const maxDrawerSize = (_f = activeDrawerId ? maxGlobalDrawersSizes[activeDrawerId] : 0) !== null && _f !== void 0 ? _f : 0;
  const refs = globalDrawersFocusControl.refs[activeDrawerId];
  const resizeProps = useResize2({
    currentWidth: activeDrawerSize,
    minWidth: minDrawerSize,
    maxWidth: maxDrawerSize,
    panelRef: drawerRef,
    handleRef: refs === null || refs === void 0 ? void 0 : refs.slider,
    onResize: (size2) => onActiveDrawerResize({ id: activeDrawerId, size: size2 })
  });
  const size = getLimitedValue(minDrawerSize, activeDrawerSize, maxDrawerSize);
  const lastOpenedDrawerId = drawersOpenQueue.length ? drawersOpenQueue[0] : null;
  const hasTriggerButton = !!(activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.trigger);
  const isExpanded = (activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.isExpandable) && expandedDrawerId === activeDrawerId;
  const wasExpanded = usePrevious(isExpanded);
  const animationDisabled = (activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.defaultActive) && !drawersOpenQueue.includes(activeGlobalDrawer.id) || wasExpanded && !isExpanded;
  let drawerActions = [
    {
      type: "icon-button",
      id: "close",
      iconName: isMobile ? "close" : "angle-right",
      text: (_g = computedAriaLabels.closeButton) !== null && _g !== void 0 ? _g : "",
      analyticsAction: "close"
    }
  ];
  if (!isMobile && (activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.isExpandable)) {
    drawerActions = [
      {
        type: "icon-button",
        id: "expand",
        iconName: isExpanded ? "shrink" : "expand",
        text: (_j = (_h = activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.ariaLabels) === null || _h === void 0 ? void 0 : _h.expandedModeButton) !== null && _j !== void 0 ? _j : "",
        analyticsAction: isExpanded ? "expand" : "collapse"
      },
      ...drawerActions
    ];
  }
  if (activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.headerActions) {
    drawerActions = [
      {
        type: "group",
        text: "Actions",
        items: activeGlobalDrawer.headerActions
      },
      ...drawerActions
    ];
  }
  return import_react151.default.createElement(Transition_default, { nodeRef: drawerRef, in: show || isExpanded, appear: show || isExpanded, timeout: 0 }, (state) => {
    var _a3, _b2;
    return import_react151.default.createElement(
      "aside",
      { id: activeDrawerId, "aria-hidden": !show, "aria-label": computedAriaLabels.content, className: clsx_m_default(styles_css_default45.drawer, styles_css_default45["drawer-global"], styles_css_default45[state], !animationDisabled && styles_css_default36["with-motion-horizontal"], !animationDisabled && isExpanded && styles_css_default45["with-expanded-motion"], {
        [styles_css_default45["drawer-hidden"]]: !show,
        [styles_css_default45["last-opened"]]: !activeAiDrawer && lastOpenedDrawerId === activeDrawerId || isExpanded,
        [styles_css_default20["active-drawer"]]: show,
        [styles_css_default45["drawer-expanded"]]: isExpanded,
        [styles_css_default45["has-next-siblings"]]: activeGlobalDrawers.findIndex((drawer) => drawer.id === activeDrawerId) + 1 < activeGlobalDrawers.length
      }), ref: drawerRef, onBlur: (e3) => {
        if (!hasTriggerButton) {
          return;
        }
        if (!e3.relatedTarget || !e3.currentTarget.contains(e3.relatedTarget)) {
          globalDrawersFocusControl.loseFocus();
        }
      }, style: Object.assign({ blockSize: drawerHeight, insetBlockStart: drawerTopOffset }, !isMobile && {
        [custom_css_properties_default.drawerSize]: `${["entering", "entered"].includes(state) ? isExpanded ? "100%" : size + "px" : 0}`
      }), "data-testid": `awsui-app-layout-drawer-${activeDrawerId}` },
      import_react151.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default45["global-drawer-wrapper"]) },
        !isMobile && import_react151.default.createElement("div", { className: styles_css_default45["drawer-gap"] }),
        !isMobile && (activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.resizable) && !isExpanded && import_react151.default.createElement(
          "div",
          { className: styles_css_default45["drawer-slider"] },
          import_react151.default.createElement(panel_resize_handle_default, { ref: refs === null || refs === void 0 ? void 0 : refs.slider, position: "side", className: styles_css_default20["drawers-slider"], ariaLabel: (_a3 = activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.ariaLabels) === null || _a3 === void 0 ? void 0 : _a3.resizeHandle, tooltipText: (_b2 = activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.ariaLabels) === null || _b2 === void 0 ? void 0 : _b2.resizeHandleTooltipText, ariaValuenow: resizeProps.relativeSize, onKeyDown: resizeProps.onKeyDown, onDirectionClick: resizeProps.onDirectionClick, onPointerDown: resizeProps.onPointerDown })
        ),
        import_react151.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default45["drawer-content-container"], styles_css_default36["with-motion-horizontal"]), "data-testid": `awsui-app-layout-drawer-content-${activeDrawerId}` },
          import_react151.default.createElement(
            "div",
            { className: styles_css_default45["drawer-actions"] },
            import_react151.default.createElement(internal_default9, { dropdownExpandToViewport: false, variant: "icon", onItemClick: (event) => {
              var _a4;
              switch (event.detail.id) {
                case "close":
                  onActiveGlobalDrawersChange(activeDrawerId, { initiatedByUserAction: true });
                  break;
                case "expand":
                  setExpandedDrawerId(isExpanded ? null : activeDrawerId);
                  break;
                default:
                  (_a4 = activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.onHeaderActionClick) === null || _a4 === void 0 ? void 0 : _a4.call(activeGlobalDrawer, event);
              }
            }, ariaLabel: "Global panel actions", items: drawerActions, __internalRootRef: (root) => {
              if (!root) {
                return;
              }
              refs.close = { current: root.querySelector('[data-itemid="close"]') };
            } })
          ),
          import_react151.default.createElement("div", { className: styles_css_default45["drawer-content"], style: { blockSize: drawerHeight } }, activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.content)
        )
      )
    );
  });
}
var global_drawer_default = AppLayoutGlobalDrawerImplementation;

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/global-drawers.js
function AppLayoutGlobalDrawersImplementation({ appLayoutInternals }) {
  const { globalDrawers, activeGlobalDrawersIds, expandedDrawerId } = appLayoutInternals;
  const openDrawersHistory = (0, import_react152.useRef)(/* @__PURE__ */ new Set());
  if (!globalDrawers.length) {
    return import_react152.default.createElement(import_react152.default.Fragment, null);
  }
  return import_react152.default.createElement(import_react152.default.Fragment, null, globalDrawers.filter((drawer) => activeGlobalDrawersIds.includes(drawer.id) || drawer.preserveInactiveContent && openDrawersHistory.current.has(drawer.id)).map((drawer) => {
    openDrawersHistory.current.add(drawer.id);
    return import_react152.default.createElement(global_drawer_default, { key: drawer.id, show: activeGlobalDrawersIds.includes(drawer.id) && (!expandedDrawerId || drawer.id === expandedDrawerId), activeGlobalDrawer: drawer, appLayoutInternals });
  }));
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/split-panel/index.js
var import_react153 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/split-panel/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/split-panel/styles.scoped.css";
var styles_css_default52 = {
  "split-panel-side": "awsui_split-panel-side_j4v3w_1dcwh_145"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/split-panel/index.js
function AppLayoutSplitPanelDrawerSideImplementation({ children: children2, appLayoutInternals, splitPanelInternals }) {
  const { splitPanelControlId, placement, verticalOffsets, isMobile, splitPanelAnimationDisabled } = appLayoutInternals;
  const { drawerTopOffset, drawerHeight } = getDrawerStyles(verticalOffsets, isMobile, placement);
  return import_react153.default.createElement(
    SplitPanelProvider,
    Object.assign({}, splitPanelInternals, { animationDisabled: splitPanelAnimationDisabled }),
    import_react153.default.createElement("section", { id: splitPanelControlId, className: styles_css_default52["split-panel-side"], style: {
      blockSize: drawerHeight,
      insetBlockStart: drawerTopOffset
    } }, children2)
  );
}
function AppLayoutSplitPanelDrawerBottomImplementation({ children: children2, splitPanelInternals, appLayoutInternals }) {
  const { splitPanelControlId, splitPanelAnimationDisabled } = appLayoutInternals;
  return import_react153.default.createElement(
    SplitPanelProvider,
    Object.assign({}, splitPanelInternals, { animationDisabled: splitPanelAnimationDisabled }),
    import_react153.default.createElement("section", { id: splitPanelControlId }, children2)
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/state/invariants.js
function isWidgetReady(state) {
  return !!state.widgetizedState;
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/widget-areas/after-main-slot.js
var AfterMainSlotImplementation = ({ appLayoutState, appLayoutProps }) => {
  if (!isWidgetReady(appLayoutState)) {
    return null;
  }
  const { navigationOpen, activeGlobalDrawersIds, expandedDrawerId, activeDrawer, splitPanelOpen, drawers, splitPanelPosition } = appLayoutState.widgetizedState;
  const drawerExpandedMode = !!expandedDrawerId;
  const toolsOpen = !!activeDrawer;
  const globalToolsOpen = !!(activeGlobalDrawersIds === null || activeGlobalDrawersIds === void 0 ? void 0 : activeGlobalDrawersIds.length);
  return import_react154.default.createElement(
    import_react154.default.Fragment,
    null,
    splitPanelPosition === "side" && import_react154.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default44["split-panel-side"], !splitPanelOpen && styles_css_default44["panel-hidden"], drawerExpandedMode && styles_css_default44.hidden) },
      import_react154.default.createElement(AppLayoutSplitPanelDrawerSideImplementation, { appLayoutInternals: appLayoutState.appLayoutInternals, splitPanelInternals: appLayoutState.splitPanelInternals }, appLayoutProps.splitPanel)
    ),
    import_react154.default.createElement("div", { className: clsx_m_default(styles_css_default44.tools, !toolsOpen && styles_css_default44["panel-hidden"], styles_css_default36["with-motion-horizontal"], navigationOpen && !toolsOpen && styles_css_default44["unfocusable-mobile"], toolsOpen && styles_css_default44["tools-open"], drawerExpandedMode && styles_css_default44.hidden) }, drawers && drawers.length > 0 && import_react154.default.createElement(AppLayoutDrawerImplementation, { appLayoutInternals: appLayoutState.appLayoutInternals })),
    import_react154.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default44["global-tools"], !globalToolsOpen && styles_css_default44["panel-hidden"]) },
      import_react154.default.createElement(
        ActiveDrawersContext.Provider,
        { value: activeGlobalDrawersIds !== null && activeGlobalDrawersIds !== void 0 ? activeGlobalDrawersIds : [] },
        import_react154.default.createElement(AppLayoutGlobalDrawersImplementation, { appLayoutInternals: appLayoutState.appLayoutInternals })
      )
    )
  );
};
var createWidgetizedAppLayoutAfterMainSlot = createWidgetizedComponent(AfterMainSlotImplementation);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/widget-areas/before-main-slot.js
var import_react167 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/drawer/global-ai-drawer.js
var import_react155 = __toESM(require_react());
function AppLayoutGlobalAiDrawerImplementation({ appLayoutInternals, show, activeAiDrawer, aiDrawerProps }) {
  var _a2, _b, _c, _d;
  const { activeAiDrawerSize, minAiDrawerSize, maxAiDrawerSize, ariaLabels, aiDrawerFocusControl, isMobile, drawersOpenQueue, onActiveAiDrawerChange, onActiveDrawerResize, expandedDrawerId, setExpandedDrawerId } = aiDrawerProps;
  const { verticalOffsets, placement } = appLayoutInternals;
  const drawerRef = (0, import_react155.useRef)(null);
  const activeDrawerId = activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.id;
  const computedAriaLabels = {
    closeButton: activeAiDrawer ? (_a2 = activeAiDrawer.ariaLabels) === null || _a2 === void 0 ? void 0 : _a2.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,
    content: activeAiDrawer ? (_b = activeAiDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.drawerName : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools
  };
  const resizeProps = useResize2({
    currentWidth: activeAiDrawerSize,
    minWidth: minAiDrawerSize,
    maxWidth: maxAiDrawerSize,
    panelRef: drawerRef,
    handleRef: aiDrawerFocusControl.refs.slider,
    onResize: (size2) => {
      onActiveDrawerResize({ id: activeDrawerId, size: size2 });
    },
    position: "side-start"
  });
  const size = getLimitedValue(minAiDrawerSize, activeAiDrawerSize, maxAiDrawerSize);
  const isExpanded = (activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.isExpandable) && expandedDrawerId === activeDrawerId;
  const wasExpanded = usePrevious(isExpanded);
  const animationDisabled = (activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.defaultActive) && !(drawersOpenQueue === null || drawersOpenQueue === void 0 ? void 0 : drawersOpenQueue.includes(activeAiDrawer.id)) || wasExpanded && !isExpanded;
  const drawerHeight = `calc(100vh - ${verticalOffsets.toolbar + placement.insetBlockEnd}px)`;
  const isResizingDisabled = maxAiDrawerSize < activeAiDrawerSize;
  let drawerActions = [
    {
      type: "icon-button",
      id: "close",
      iconName: isMobile ? "close" : "angle-left",
      text: computedAriaLabels.closeButton,
      analyticsAction: "close"
    }
  ];
  if (!isMobile && (activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.isExpandable)) {
    drawerActions = [
      {
        type: "icon-button",
        id: "expand",
        iconName: isExpanded ? "shrink" : "expand",
        text: (_d = (_c = activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.expandedModeButton) !== null && _d !== void 0 ? _d : "",
        analyticsAction: isExpanded ? "expand" : "collapse"
      },
      ...drawerActions
    ];
  }
  if (activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.headerActions) {
    drawerActions = [
      {
        type: "group",
        text: "Actions",
        items: activeAiDrawer.headerActions
      },
      ...drawerActions
    ];
  }
  return import_react155.default.createElement(Transition_default, { nodeRef: drawerRef, in: show, appear: show, mountOnEnter: true, timeout: 250 }, (drawerTransitionState) => {
    return import_react155.default.createElement(Transition_default, { nodeRef: drawerRef, in: isExpanded, timeout: 250 }, (expandedTransitionState) => {
      var _a3, _b2, _c2, _d2, _e;
      return import_react155.default.createElement(
        "aside",
        { id: activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.id, "aria-hidden": !activeAiDrawer, "aria-label": computedAriaLabels.content, className: clsx_m_default(styles_css_default45.drawer, styles_css_default45["ai-drawer"], !animationDisabled && isExpanded && styles_css_default45["with-expanded-motion"], {
          [styles_css_default36["with-motion-horizontal"]]: !animationDisabled,
          [styles_css_default20["active-drawer"]]: show,
          [styles_css_default45["drawer-hidden"]]: !show && drawerTransitionState === "exited",
          [styles_css_default20["drawer-closed"]]: !activeAiDrawer,
          [styles_css_default45["drawer-expanded"]]: isExpanded
        }), ref: drawerRef, onBlur: (e3) => {
          if (!e3.relatedTarget || !e3.currentTarget.contains(e3.relatedTarget)) {
            aiDrawerFocusControl === null || aiDrawerFocusControl === void 0 ? void 0 : aiDrawerFocusControl.loseFocus();
          }
        }, style: Object.assign({ blockSize: drawerHeight, insetBlockStart: `${placement.insetBlockStart}px` }, !isMobile && {
          [custom_css_properties_default.drawerMinSize]: `${size}px`,
          [custom_css_properties_default.drawerSize]: `${["entering", "entered"].includes(drawerTransitionState) ? size : 0}px`
        }), "data-testid": activeDrawerId && `awsui-app-layout-drawer-${activeDrawerId}` },
        !isMobile && (activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.resizable) && (!isExpanded || expandedTransitionState !== "entered") && import_react155.default.createElement(
          "div",
          { className: styles_css_default45["drawer-slider"] },
          import_react155.default.createElement(panel_resize_handle_default, { ref: aiDrawerFocusControl === null || aiDrawerFocusControl === void 0 ? void 0 : aiDrawerFocusControl.refs.slider, position: "side-start", className: clsx_m_default(styles_css_default20["drawers-slider"], styles_css_default45["ai-drawer-slider-handle"]), ariaLabel: (_a3 = activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.ariaLabels) === null || _a3 === void 0 ? void 0 : _a3.resizeHandle, tooltipText: (_b2 = activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.ariaLabels) === null || _b2 === void 0 ? void 0 : _b2.resizeHandleTooltipText, ariaValuenow: resizeProps.relativeSize, onKeyDown: resizeProps.onKeyDown, onPointerDown: resizeProps.onPointerDown, onDirectionClick: resizeProps.onDirectionClick, disabled: isResizingDisabled })
        ),
        import_react155.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default45["drawer-content-container"], styles_css_default36["with-motion-horizontal"]) },
          import_react155.default.createElement(
            "div",
            { className: styles_css_default45["drawer-content"] },
            import_react155.default.createElement(
              "header",
              { className: styles_css_default45["drawer-content-header"] },
              import_react155.default.createElement(
                "div",
                { className: styles_css_default45["drawer-content-header-content"] },
                (_c2 = activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.header) !== null && _c2 !== void 0 ? _c2 : import_react155.default.createElement("div", null),
                import_react155.default.createElement(
                  "div",
                  { className: styles_css_default45["drawer-actions"] },
                  import_react155.default.createElement(internal_default9, { dropdownExpandToViewport: false, variant: "icon", onItemClick: (event) => {
                    var _a4;
                    switch (event.detail.id) {
                      case "close":
                        onActiveAiDrawerChange === null || onActiveAiDrawerChange === void 0 ? void 0 : onActiveAiDrawerChange(null, { initiatedByUserAction: true });
                        break;
                      case "expand":
                        setExpandedDrawerId(isExpanded ? null : activeDrawerId);
                        break;
                      default:
                        (_a4 = activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.onHeaderActionClick) === null || _a4 === void 0 ? void 0 : _a4.call(activeAiDrawer, event);
                    }
                  }, ariaLabel: "Left panel actions", items: drawerActions })
                )
              ),
              !isMobile && isExpanded && ((_d2 = activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.ariaLabels) === null || _d2 === void 0 ? void 0 : _d2.exitExpandedModeButton) && import_react155.default.createElement(
                "div",
                { className: styles_css_default45["drawer-back-to-console-slot"] },
                import_react155.default.createElement(
                  "div",
                  { className: styles_css_default45["drawer-back-to-console-button-wrapper"] },
                  import_react155.default.createElement("button", { className: clsx_m_default(styles_css_default20["active-ai-drawer-leave-expanded-mode-custom-button"], styles_css_default45["drawer-back-to-console-button"]), formAction: "none", onClick: () => setExpandedDrawerId(null) }, (_e = activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.ariaLabels) === null || _e === void 0 ? void 0 : _e.exitExpandedModeButton)
                )
              )
            ),
            import_react155.default.createElement("div", { className: styles_css_default45["drawer-content-content"] }, activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.content)
          )
        )
      );
    });
  });
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/navigation/index.js
var import_react156 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/navigation/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/navigation/styles.scoped.css";
var styles_css_default53 = {
  "navigation-container": "awsui_navigation-container_2p2ab_otg1x_153",
  "is-navigation-open": "awsui_is-navigation-open_2p2ab_otg1x_164",
  "navigation": "awsui_navigation_2p2ab_otg1x_153",
  "hide-navigation": "awsui_hide-navigation_2p2ab_otg1x_184"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/navigation/index.js
function AppLayoutNavigationImplementation({ appLayoutInternals }) {
  var _a2, _b;
  const { ariaLabels, onNavigationToggle, isMobile, navigationOpen, navigation, navigationFocusControl, placement, verticalOffsets } = appLayoutInternals;
  const { drawerTopOffset, drawerHeight } = getDrawerStyles(verticalOffsets, isMobile, placement);
  const onNavigationClick = (event) => {
    const hasLink = findUpUntil(event.target, (node) => node.tagName === "A" && !!node.href);
    if (hasLink && isMobile) {
      onNavigationToggle(false);
    }
  };
  return import_react156.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default53["navigation-container"], styles_css_default36["with-motion-horizontal"], {
      [styles_css_default53["is-navigation-open"]]: navigationOpen
    }), style: {
      blockSize: drawerHeight,
      insetBlockStart: drawerTopOffset
    } },
    import_react156.default.createElement(
      "nav",
      { "aria-label": (_a2 = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation) !== null && _a2 !== void 0 ? _a2 : void 0, className: clsx_m_default(styles_css_default53.navigation, {
        [styles_css_default20["drawer-closed"]]: !navigationOpen
      }, styles_css_default20.navigation), "aria-hidden": !navigationOpen, onClick: onNavigationClick },
      import_react156.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default53["hide-navigation"]) },
        import_react156.default.createElement(InternalButton, { ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationClose) !== null && _b !== void 0 ? _b : void 0, iconName: isMobile ? "close" : "angle-left", onClick: () => onNavigationToggle(false), variant: "icon", formAction: "none", className: styles_css_default20["navigation-close"], ref: navigationFocusControl.refs.close, analyticsAction: "close" })
      ),
      navigation
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/skeleton-parts.js
var import_react163 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/slots.js
var import_react162 = __toESM(require_react());

// node_modules/@cloudscape-design/components/breadcrumb-group/implementation.js
var import_react161 = __toESM(require_react());

// node_modules/@cloudscape-design/components/breadcrumb-group/all-items-dropdown.js
var import_react157 = __toESM(require_react());

// node_modules/@cloudscape-design/components/breadcrumb-group/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/breadcrumb-group/styles.scoped.css";
var styles_css_default54 = {
  "breadcrumb-group": "awsui_breadcrumb-group_d19fg_1h5ta_145",
  "breadcrumb-group-list": "awsui_breadcrumb-group-list_d19fg_1h5ta_180",
  "ghost": "awsui_ghost_d19fg_1h5ta_191",
  "item": "awsui_item_d19fg_1h5ta_196",
  "ghost-item": "awsui_ghost-item_d19fg_1h5ta_197",
  "ellipsis": "awsui_ellipsis_d19fg_1h5ta_198",
  "hide": "awsui_hide_d19fg_1h5ta_209",
  "visible": "awsui_visible_d19fg_1h5ta_215",
  "icon": "awsui_icon_d19fg_1h5ta_219",
  "breadcrumbs-skeleton": "awsui_breadcrumbs-skeleton_d19fg_1h5ta_225",
  "collapsed-button": "awsui_collapsed-button_d19fg_1h5ta_229",
  "button-icon": "awsui_button-icon_d19fg_1h5ta_311",
  "button-icon-open": "awsui_button-icon-open_d19fg_1h5ta_325",
  "hidden": "awsui_hidden_d19fg_1h5ta_329"
};

// node_modules/@cloudscape-design/components/breadcrumb-group/all-items-dropdown.js
var metadataTypeAttribute = {
  [DATA_ATTR_RESOURCE_TYPE]: "true"
};
var AllItemsDropdown = ({ items, onItemClick, onItemFollow }) => {
  var _a2;
  return import_react157.default.createElement(
    import_react157.default.Fragment,
    null,
    import_react157.default.createElement(internal_default6, { items: items.map((item, index) => {
      const isCurrentBreadcrumb = index === items.length - 1;
      return {
        id: index.toString(),
        text: item.text,
        href: isCurrentBreadcrumb ? void 0 : item.href,
        isCurrentBreadcrumb
      };
    }), customTriggerBuilder: getDropdownTrigger((_a2 = items[items.length - 1]) === null || _a2 === void 0 ? void 0 : _a2.text), linkStyle: true, fullWidth: true, onItemClick, onItemFollow, analyticsMetadataTransformer: (metadata) => {
      var _a3, _b;
      if ((_a3 = metadata.detail) === null || _a3 === void 0 ? void 0 : _a3.id) {
        delete metadata.detail.id;
      }
      if ((_b = metadata.detail) === null || _b === void 0 ? void 0 : _b.position) {
        metadata.detail.position = `${parseInt(metadata.detail.position, 10) + 1}`;
      }
      return metadata;
    } }),
    items.length > 1 && import_react157.default.createElement("span", Object.assign({ className: styles_css_default54.hidden }, metadataTypeAttribute), items[1].text)
  );
};
var getDropdownTrigger = (currentPage) => ({ ariaLabel, triggerRef, testUtilsClass, isOpen, onClick }) => {
  const metadataAttributes = {
    [DATA_ATTR_FUNNEL_KEY]: FUNNEL_KEY_FUNNEL_NAME
  };
  return import_react157.default.createElement(
    "button",
    Object.assign({ ref: triggerRef }, metadataAttributes, { className: clsx_m_default(styles_css_default54["collapsed-button"], testUtilsClass), onClick: (event) => {
      event.preventDefault();
      onClick();
    }, "aria-expanded": isOpen, "aria-haspopup": true, "aria-label": ariaLabel, formAction: "none" }),
    import_react157.default.createElement(internal_default, { name: "caret-down-filled", className: spinWhenOpen(styles_css_default54, "button-icon", isOpen) }),
    import_react157.default.createElement("span", null, currentPage)
  );
};

// node_modules/@cloudscape-design/components/breadcrumb-group/item/item.js
var import_react159 = __toESM(require_react());

// node_modules/@cloudscape-design/components/breadcrumb-group/utils.js
var getEventDetail = (item) => ({
  item,
  text: item.text,
  href: item.href
});
var MIN_BREADCRUMB_WIDTH = 70;
var ELLIPSIS_WIDTH = 50;
var getItemsDisplayProperties = (itemsWidths, navWidth) => {
  const widthsWithFinalCollapsed = [...itemsWidths];
  widthsWithFinalCollapsed[itemsWidths.length - 1] = Math.min(itemsWidths[itemsWidths.length - 1], MIN_BREADCRUMB_WIDTH);
  return {
    collapsed: computeNumberOfCollapsedItems(widthsWithFinalCollapsed, navWidth)
  };
};
var computeNumberOfCollapsedItems = (itemWidths, navWidth) => {
  if (typeof navWidth !== "number") {
    return 0;
  }
  let usedWidth = itemWidths.reduce((acc, width) => acc + width, 0);
  let collapsedItems = 0;
  while (collapsedItems < itemWidths.length - 1) {
    if (usedWidth <= navWidth) {
      break;
    }
    collapsedItems += 1;
    usedWidth = usedWidth - itemWidths[collapsedItems];
    if (collapsedItems === 1) {
      usedWidth += ELLIPSIS_WIDTH;
    }
  }
  return collapsedItems;
};

// node_modules/@cloudscape-design/components/breadcrumb-group/item/funnel.js
var import_react158 = __toESM(require_react());

// node_modules/@cloudscape-design/components/breadcrumb-group/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/breadcrumb-group/analytics-metadata/styles.scoped.css";
var styles_css_default55 = {
  "breadcrumb-item": "awsui_breadcrumb-item_1c68o_b6unx_5"
};

// node_modules/@cloudscape-design/components/breadcrumb-group/item/funnel.js
var FunnelBreadcrumbItem = import_react158.default.forwardRef(({ className: className2, text, itemIndex, totalCount, disableAnalytics }, ref) => {
  const funnelAttributes = {};
  if (!disableAnalytics) {
    if (itemIndex === totalCount - 1) {
      funnelAttributes[DATA_ATTR_FUNNEL_KEY] = FUNNEL_KEY_FUNNEL_NAME;
    }
    if (itemIndex === 1) {
      funnelAttributes[DATA_ATTR_RESOURCE_TYPE] = "true";
    }
  }
  return import_react158.default.createElement("span", Object.assign({}, funnelAttributes, { className: clsx_m_default(className2, !disableAnalytics && styles_css_default55["breadcrumb-item"]), ref }), text);
});

// node_modules/@cloudscape-design/components/breadcrumb-group/item/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/breadcrumb-group/item/styles.scoped.css";
var styles_css_default56 = {
  "link": "awsui_link_1kosq_mc874_145",
  "breadcrumb": "awsui_breadcrumb_1kosq_mc874_149",
  "ghost-breadcrumb": "awsui_ghost-breadcrumb_1kosq_mc874_150",
  "icon": "awsui_icon_1kosq_mc874_153",
  "anchor": "awsui_anchor_1kosq_mc874_159",
  "text": "awsui_text_1kosq_mc874_206",
  "last": "awsui_last_1kosq_mc874_225"
};

// node_modules/@cloudscape-design/components/breadcrumb-group/item/item.js
var BreadcrumbItemWithPopover = ({ item, isLast, anchorAttributes, itemAttributes, children: children2 }) => {
  const [showTooltip, setShowTooltip] = (0, import_react159.useState)(false);
  const textRef = (0, import_react159.useRef)(null);
  return import_react159.default.createElement(
    Item,
    Object.assign({ ref: textRef, isLast, onFocus: () => {
      setShowTooltip(true);
    }, onBlur: () => setShowTooltip(false), onMouseEnter: () => {
      setShowTooltip(true);
    }, onMouseLeave: () => setShowTooltip(false), anchorAttributes }, itemAttributes),
    children2,
    showTooltip && import_react159.default.createElement(Tooltip, { trackRef: textRef, value: item.text, size: "medium", onDismiss: () => setShowTooltip(false) })
  );
};
var Item = import_react159.default.forwardRef((_a2, ref) => {
  var { anchorAttributes, children: children2, isLast } = _a2, itemAttributes = __rest(_a2, ["anchorAttributes", "children", "isLast"]);
  return isLast ? import_react159.default.createElement("span", Object.assign({ ref, className: styles_css_default56.anchor }, itemAttributes), children2) : import_react159.default.createElement("a", Object.assign({ ref, className: styles_css_default56.anchor }, itemAttributes, anchorAttributes), children2);
});
function BreadcrumbItem({ item, itemIndex, totalCount, onClick, onFollow, isGhost = false, isTruncated = false }) {
  const isLast = itemIndex === totalCount - 1;
  const preventDefault3 = (event) => event.preventDefault();
  const onClickHandler = (event) => {
    if (isPlainLeftClick(event)) {
      fireCancelableEvent(onFollow, getEventDetail(item), event);
    }
    fireCancelableEvent(onClick, getEventDetail(item), event);
  };
  const anchorAttributes = {
    href: item.href || "#",
    onClick: isLast ? preventDefault3 : onClickHandler,
    tabIndex: 0
  };
  const itemAttributes = {};
  if (isGhost) {
    anchorAttributes.tabIndex = -1;
  }
  if (isLast && !isGhost) {
    itemAttributes["aria-current"] = "page";
    itemAttributes["aria-disabled"] = true;
    itemAttributes.tabIndex = 0;
    itemAttributes.role = "link";
  }
  const breadcrumbItem = import_react159.default.createElement(FunnelBreadcrumbItem, { className: styles_css_default56.text, itemIndex, totalCount, text: item.text, disableAnalytics: isGhost });
  return import_react159.default.createElement(
    "div",
    { className: clsx_m_default(!isGhost && styles_css_default56.breadcrumb, isGhost && styles_css_default56["ghost-breadcrumb"], isLast && styles_css_default56.last) },
    isTruncated && !isGhost ? import_react159.default.createElement(BreadcrumbItemWithPopover, { item, isLast, anchorAttributes, itemAttributes }, breadcrumbItem) : import_react159.default.createElement(Item, Object.assign({ isLast, anchorAttributes }, itemAttributes), breadcrumbItem),
    !isLast ? import_react159.default.createElement(
      "span",
      { className: styles_css_default56.icon },
      import_react159.default.createElement(internal_default, { name: "angle-right" })
    ) : null
  );
}

// node_modules/@cloudscape-design/components/breadcrumb-group/skeleton.js
var import_react160 = __toESM(require_react());
var BreadcrumbGroupSkeleton = import_react160.default.forwardRef(({ items }, ref) => import_react160.default.createElement("div", { ref, className: styles_css_default54["breadcrumbs-skeleton"] }, items.map((item, index) => import_react160.default.createElement(FunnelBreadcrumbItem, { itemIndex: index, totalCount: items.length, text: item.text, key: index }))));

// node_modules/@cloudscape-design/components/breadcrumb-group/implementation.js
var DEFAULT_EXPAND_ARIA_LABEL = "Show path";
var getEllipsisDropdownTrigger = ({ ariaLabel, triggerRef, testUtilsClass, isOpen, onClick }) => {
  return import_react161.default.createElement(InternalButton, { ref: triggerRef, className: testUtilsClass, onClick: (event) => {
    event.preventDefault();
    onClick();
  }, ariaExpanded: isOpen, "aria-haspopup": true, ariaLabel, variant: "breadcrumb-group", formAction: "none" }, "...");
};
var EllipsisDropdown = ({ ariaLabel, dropdownItems, onDropdownItemClick, onDropdownItemFollow, visible }) => {
  var _a2;
  const i18n = useInternalI18n("breadcrumb-group");
  return import_react161.default.createElement(
    "li",
    { className: clsx_m_default(styles_css_default54.ellipsis, visible && styles_css_default54.visible) },
    import_react161.default.createElement(internal_default6, { ariaLabel: (_a2 = i18n("expandAriaLabel", ariaLabel)) !== null && _a2 !== void 0 ? _a2 : DEFAULT_EXPAND_ARIA_LABEL, items: dropdownItems, onItemClick: onDropdownItemClick, onItemFollow: onDropdownItemFollow, customTriggerBuilder: getEllipsisDropdownTrigger, linkStyle: true, analyticsMetadataTransformer: (metadata) => {
      var _a3, _b;
      if ((_a3 = metadata.detail) === null || _a3 === void 0 ? void 0 : _a3.id) {
        delete metadata.detail.id;
      }
      if ((_b = metadata.detail) === null || _b === void 0 ? void 0 : _b.position) {
        metadata.detail.position = `${parseInt(metadata.detail.position, 10) + 1}`;
      }
      return metadata;
    } }),
    import_react161.default.createElement(
      "span",
      { className: styles_css_default54.icon },
      import_react161.default.createElement(internal_default, { name: "angle-right" })
    )
  );
};
var areArrayEqual = (first, second2) => {
  if (first.length !== second2.length) {
    return false;
  }
  return first.every((item, index) => item === second2[index]);
};
function BreadcrumbGroupImplementation(_a2) {
  var { items = [], ariaLabel, expandAriaLabel, onClick, onFollow, __internalRootRef, __injectAnalyticsComponentMetadata } = _a2, props2 = __rest(_a2, ["items", "ariaLabel", "expandAriaLabel", "onClick", "onFollow", "__internalRootRef", "__injectAnalyticsComponentMetadata"]);
  for (const item of items) {
    checkSafeUrl("BreadcrumbGroup", item.href);
  }
  const baseProps = getBaseProps(props2);
  const [navWidth, navRef] = useContainerQuery((rect) => rect.borderBoxWidth);
  const mergedRef = useMergeRefs(navRef, __internalRootRef);
  const itemsRefs = (0, import_react161.useRef)({ ghost: {}, real: {} });
  const setBreadcrumb = (type, index, node) => {
    if (node) {
      itemsRefs.current[type][index] = node;
    } else {
      delete itemsRefs.current[type][index];
    }
  };
  const [itemsWidths, setItemsWidths] = (0, import_react161.useState)({ ghost: [], real: [] });
  (0, import_react161.useEffect)(() => {
    if (itemsRefs.current) {
      const newItemsWidths = { ghost: [], real: [] };
      for (const node of Object.values(itemsRefs.current.ghost)) {
        const width = getLogicalBoundingClientRect(node).inlineSize;
        newItemsWidths.ghost.push(width);
      }
      for (const node of Object.values(itemsRefs.current.real)) {
        const width = getLogicalBoundingClientRect(node).inlineSize;
        newItemsWidths.real.push(width);
      }
      setItemsWidths((oldWidths) => {
        if (!areArrayEqual(newItemsWidths.ghost, oldWidths.ghost) || !areArrayEqual(newItemsWidths.real, oldWidths.real)) {
          return newItemsWidths;
        } else {
          return oldWidths;
        }
      });
    }
  }, [items, navWidth]);
  const { collapsed } = getItemsDisplayProperties(itemsWidths.ghost, navWidth);
  let breadcrumbItems = items.map((item, index) => {
    const isLast = index === items.length - 1;
    const isDisplayed = index === 0 || index > collapsed;
    const clickAnalyticsMetadata = {
      action: "click",
      detail: {
        position: `${index + 1}`,
        label: `.${styles_css_default55["breadcrumb-item"]}`,
        href: item.href || ""
      }
    };
    return import_react161.default.createElement(
      "li",
      Object.assign({ className: clsx_m_default(styles_css_default54.item, !isDisplayed && styles_css_default54.hide), key: index }, isLast ? {} : getAnalyticsMetadataAttribute(clickAnalyticsMetadata), { ref: (node) => setBreadcrumb("real", `${index}`, node) }),
      import_react161.default.createElement(BreadcrumbItem, { item, onClick, onFollow, itemIndex: index, totalCount: items.length, isTruncated: itemsWidths.ghost[index] - itemsWidths.real[index] > 0 })
    );
  });
  const hiddenBreadcrumbItems = items.map((item, index) => import_react161.default.createElement(
    "li",
    { className: styles_css_default54["ghost-item"], key: index, ref: (node) => setBreadcrumb("ghost", `${index}`, node) },
    import_react161.default.createElement(BreadcrumbItem, { item, itemIndex: index, totalCount: items.length, isGhost: true })
  ));
  const getEventItem = (e3) => {
    const { id } = e3.detail;
    return items[parseInt(id)];
  };
  if (breadcrumbItems.length >= 2) {
    const dropdownItems = items.slice(1, 1 + collapsed).map((item, index) => ({
      id: (index + 1).toString(),
      text: item.text,
      href: item.href || "#"
    }));
    breadcrumbItems = [
      breadcrumbItems[0],
      import_react161.default.createElement(EllipsisDropdown, { key: "ellipsis", visible: collapsed > 0, ariaLabel: expandAriaLabel, dropdownItems, onDropdownItemClick: (e3) => fireCancelableEvent(onClick, getEventDetail(getEventItem(e3)), e3), onDropdownItemFollow: (e3) => fireCancelableEvent(onFollow, getEventDetail(getEventItem(e3)), e3) }),
      ...breadcrumbItems.slice(1)
    ];
  }
  const componentAnalyticsMetadata2 = {
    name: "awsui.BreadcrumbGroup",
    label: { root: "self" }
  };
  return import_react161.default.createElement(
    "nav",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default54["breadcrumb-group"], baseProps.className), "aria-label": ariaLabel || void 0, ref: mergedRef }, __injectAnalyticsComponentMetadata ? Object.assign({}, getAnalyticsMetadataAttribute({
      component: componentAnalyticsMetadata2
    })) : {}),
    collapsed > 0 && collapsed === items.length - 1 ? import_react161.default.createElement(AllItemsDropdown, { items, onItemClick: (e3) => e3.detail.id !== (items.length - 1).toString() && fireCancelableEvent(onClick, getEventDetail(getEventItem(e3)), e3), onItemFollow: (e3) => e3.detail.id !== (items.length - 1).toString() && fireCancelableEvent(onFollow, getEventDetail(getEventItem(e3)), e3) }) : import_react161.default.createElement("ol", { className: styles_css_default54["breadcrumb-group-list"] }, breadcrumbItems),
    import_react161.default.createElement("ol", { className: clsx_m_default(styles_css_default54["breadcrumb-group-list"], styles_css_default54.ghost), "aria-hidden": true, tabIndex: -1 }, hiddenBreadcrumbItems)
  );
}
var createWidgetizedBreadcrumbGroup = createWidgetizedComponent(BreadcrumbGroupImplementation, BreadcrumbGroupSkeleton);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/slots.js
var ToolbarSlot = import_react162.default.forwardRef(({ className: className2, style, children: children2 }, ref) => import_react162.default.createElement("section", { ref, className: clsx_m_default(styles_css_default44["toolbar-container"], className2), style }, children2));
var NotificationsSlot = import_react162.default.forwardRef(({ className: className2, style, children: children2 }, ref) => import_react162.default.createElement("div", { ref, className: clsx_m_default(styles_css_default44["notifications-container"], className2), style }, children2));
function BreadcrumbsSlot({ ownBreadcrumbs, discoveredBreadcrumbs }) {
  return import_react162.default.createElement(
    BreadcrumbsSlotContext.Provider,
    { value: { isInToolbar: true } },
    import_react162.default.createElement("div", { className: styles_css_default44["breadcrumbs-own"] }, ownBreadcrumbs),
    discoveredBreadcrumbs && import_react162.default.createElement(
      "div",
      { className: styles_css_default44["breadcrumbs-discovered"] },
      import_react162.default.createElement(BreadcrumbGroupImplementation, Object.assign({}, discoveredBreadcrumbs, { "data-awsui-discovered-breadcrumbs": true, __injectAnalyticsComponentMetadata: true }))
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/skeleton-parts.js
var BeforeMainSlotSkeleton = import_react163.default.forwardRef(({ toolbarProps, appLayoutProps }, ref) => {
  return import_react163.default.createElement(
    import_react163.default.Fragment,
    null,
    !!toolbarProps && import_react163.default.createElement(
      ToolbarSlot,
      { ref },
      import_react163.default.createElement(BreadcrumbsSlot, { ownBreadcrumbs: appLayoutProps.breadcrumbs })
    ),
    (toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.navigationOpen) && import_react163.default.createElement("div", { className: styles_css_default44.navigation })
  );
});
var ToolbarSkeleton = import_react163.default.forwardRef(({ appLayoutInternals }, ref) => import_react163.default.createElement(
  ToolbarSlot,
  { ref },
  import_react163.default.createElement(BreadcrumbsSlot, { ownBreadcrumbs: appLayoutInternals.breadcrumbs, discoveredBreadcrumbs: appLayoutInternals.discoveredBreadcrumbs })
));
var NotificationsSkeleton = import_react163.default.forwardRef((props2, ref) => import_react163.default.createElement(NotificationsSlot, { ref }));

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/index.js
var import_react166 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/drawer-triggers.js
var import_react165 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/trigger-button/index.js
var import_react164 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/trigger-button/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/trigger-button/styles.scoped.css";
var styles_css_default57 = {
  "trigger": "awsui_trigger_lpshu_10v1l_145",
  "custom": "awsui_custom_lpshu_10v1l_151",
  "trigger-with-badge": "awsui_trigger-with-badge_lpshu_10v1l_157",
  "circle": "awsui_circle_lpshu_10v1l_167",
  "selected": "awsui_selected_lpshu_10v1l_183",
  "trigger-wrapper": "awsui_trigger-wrapper_lpshu_10v1l_194",
  "dot": "awsui_dot_lpshu_10v1l_219"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/trigger-button/index.js
function TriggerButton2({ ariaLabel, className: className2, iconName, iconSvg, customSvg, ariaExpanded, ariaControls, onClick, testId, disabled = false, badge, selected = false, hasTooltip = false, tooltipText, hasOpenDrawer = false, isMobile = false, isForPreviousActiveDrawer = false, isForSplitPanel = false, variant = "circle" }, ref) {
  const containerRef = (0, import_react164.useRef)(null);
  const tooltipValue = tooltipText ? tooltipText : ariaLabel ? ariaLabel : "";
  const [showTooltip, setShowTooltip] = (0, import_react164.useState)(false);
  const [suppressTooltip, setSupressTooltip] = (0, import_react164.useState)(false);
  const handleTriggerClick = (event) => {
    event.stopPropagation();
    setShowTooltip(false);
    setSupressTooltip(true);
    onClick(event);
  };
  const handleBlur = (keepSupressed = false) => {
    setSupressTooltip(keepSupressed);
    setShowTooltip(false);
  };
  const handlePointerEnter = () => {
    setSupressTooltip(false);
    setShowTooltip(true);
  };
  const handleOnFocus = (0, import_react164.useCallback)((event) => {
    var _a2;
    let shouldShowTooltip = false;
    const eventWithRelatedTarget = event;
    const relatedTarget = eventWithRelatedTarget === null || eventWithRelatedTarget === void 0 ? void 0 : eventWithRelatedTarget.relatedTarget;
    const isFromAnotherTrigger = ((_a2 = relatedTarget === null || relatedTarget === void 0 ? void 0 : relatedTarget.dataset) === null || _a2 === void 0 ? void 0 : _a2.shiftFocus) === "awsui-layout-drawer-trigger";
    if (isForSplitPanel && !!relatedTarget || // relatedTarget is null when split panel is closed
    !isForSplitPanel && (isFromAnotherTrigger || // for key navigation from another trigger button
    !isForPreviousActiveDrawer)) {
      shouldShowTooltip = true;
    }
    setSupressTooltip(!shouldShowTooltip);
    setShowTooltip(true);
  }, [
    // To assert reference equality check
    isForPreviousActiveDrawer,
    isForSplitPanel
  ]);
  const tooltipVisible = (0, import_react164.useMemo)(() => {
    return hasTooltip && showTooltip && !suppressTooltip && !!(containerRef === null || containerRef === void 0 ? void 0 : containerRef.current) && tooltipValue && !(isMobile && hasOpenDrawer);
  }, [hasTooltip, showTooltip, containerRef, tooltipValue, isMobile, hasOpenDrawer, suppressTooltip]);
  (0, import_react164.useEffect)(() => {
    if (hasTooltip && tooltipValue) {
      const close = () => {
        setShowTooltip(false);
        setSupressTooltip(false);
      };
      const shouldCloseTooltip = (event) => {
        var _a2;
        if (event.target && containerRef && ((_a2 = containerRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target))) {
          return false;
        }
        return true;
      };
      const handlePointerDownEvent = (event) => {
        if (shouldCloseTooltip(event)) {
          close();
        }
      };
      const handleKeyDownEvent = (event) => {
        if (event.key === "Escape") {
          close();
        }
      };
      const wrapperDiv = containerRef.current;
      if (wrapperDiv) {
        const controller = new AbortController();
        wrapperDiv.addEventListener("pointerdown", handlePointerDownEvent, { signal: controller.signal });
        wrapperDiv.addEventListener("keydown", handleKeyDownEvent, { signal: controller.signal });
        return () => {
          controller.abort();
        };
      }
    }
  }, [containerRef, hasTooltip, tooltipValue]);
  const triggerEventMetadata = {
    action: selected ? "close" : "open",
    detail: { label: { root: "self" } }
  };
  return import_react164.default.createElement(
    "div",
    Object.assign({ ref: containerRef }, hasTooltip && {
      onPointerEnter: () => handlePointerEnter(),
      onPointerLeave: () => handleBlur(true),
      onFocus: (e3) => handleOnFocus(e3),
      onBlur: () => handleBlur(true)
    }, { className: styles_css_default57["trigger-wrapper"] }),
    import_react164.default.createElement("button", Object.assign({ "aria-expanded": ariaExpanded, "aria-controls": ariaControls, "aria-haspopup": true, "aria-label": ariaLabel, "aria-disabled": disabled, disabled, className: clsx_m_default(styles_css_default57.trigger, styles_css_default57[variant], {
      [styles_css_default57.selected]: selected,
      [styles_css_default57["trigger-with-badge"]]: badge,
      [styles_css_default20["drawers-trigger-with-badge"]]: badge
    }, className2), onClick: handleTriggerClick, ref, type: "button", "data-testid": testId, "data-shift-focus": "awsui-layout-drawer-trigger" }, getAnalyticsMetadataAttribute(triggerEventMetadata)), customSvg !== null && customSvg !== void 0 ? customSvg : (iconName || iconSvg) && import_react164.default.createElement(internal_default, { name: iconName, svg: iconSvg })),
    badge && import_react164.default.createElement("div", { className: styles_css_default57.dot }),
    tooltipVisible && import_react164.default.createElement(Tooltip, { trackRef: containerRef, value: tooltipValue, className: styles_css_default20["trigger-tooltip"], onDismiss: () => {
      setShowTooltip(false);
      setSupressTooltip(false);
    } })
  );
}
var trigger_button_default2 = import_react164.default.forwardRef(TriggerButton2);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/styles.scoped.css";
var styles_css_default58 = {
  "universal-toolbar": "awsui_universal-toolbar_1kzri_iuh1s_153",
  "with-ai-drawer": "awsui_with-ai-drawer_1kzri_iuh1s_172",
  "universal-toolbar-ai-custom": "awsui_universal-toolbar-ai-custom_1kzri_iuh1s_172",
  "disable-body-scroll": "awsui_disable-body-scroll_1kzri_iuh1s_214",
  "toolbar-container": "awsui_toolbar-container_1kzri_iuh1s_267",
  "universal-toolbar-nav": "awsui_universal-toolbar-nav_1kzri_iuh1s_287",
  "universal-toolbar-breadcrumbs": "awsui_universal-toolbar-breadcrumbs_1kzri_iuh1s_292",
  "universal-toolbar-drawers": "awsui_universal-toolbar-drawers_1kzri_iuh1s_301",
  "drawers-desktop-triggers-container": "awsui_drawers-desktop-triggers-container_1kzri_iuh1s_309",
  "drawers-mobile-triggers-container": "awsui_drawers-mobile-triggers-container_1kzri_iuh1s_310",
  "drawers-trigger-content": "awsui_drawers-trigger-content_1kzri_iuh1s_352",
  "group-divider": "awsui_group-divider_1kzri_iuh1s_362",
  "drawers-trigger": "awsui_drawers-trigger_1kzri_iuh1s_352",
  "block-body-scroll": "awsui_block-body-scroll_1kzri_iuh1s_375"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/drawer-triggers.js
function DrawerTriggers({ ariaLabels, activeDrawerId, drawers, drawersFocusRef, onActiveDrawerChange, splitPanelOpen, splitPanelPosition = "bottom", splitPanelFocusRef, splitPanelToggleProps, onSplitPanelToggle, disabled, activeGlobalDrawersIds, globalDrawers, globalDrawersFocusControl, onActiveGlobalDrawersChange, expandedDrawerId, setExpandedDrawerId }) {
  const isMobile = useMobile();
  const hasMultipleTriggers = drawers.length > 1;
  const previousActiveLocalDrawerId = (0, import_react165.useRef)(activeDrawerId);
  const previousActiveGlobalDrawersIds = (0, import_react165.useRef)(activeGlobalDrawersIds);
  const [containerWidth, triggersContainerRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  if (!drawers.length && !globalDrawers.length && !splitPanelToggleProps) {
    return null;
  }
  if (activeDrawerId) {
    previousActiveLocalDrawerId.current = activeDrawerId;
  }
  if (activeGlobalDrawersIds.length) {
    previousActiveGlobalDrawersIds.current = activeGlobalDrawersIds;
  }
  const getIndexOfOverflowItem = () => {
    if (isMobile) {
      return 2;
    }
    if (containerWidth) {
      const ITEM_WIDTH = 50;
      const overflowSpot = containerWidth;
      const index = Math.floor(overflowSpot / ITEM_WIDTH);
      let splitPanelItem = 0;
      if (splitPanelToggleProps) {
        splitPanelItem = 1;
      }
      return index - splitPanelItem;
    }
    return 0;
  };
  const indexOfOverflowItem = getIndexOfOverflowItem();
  const { visibleItems, overflowItems } = splitItems([...drawers, ...globalDrawers], indexOfOverflowItem, activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : null);
  const overflowMenuHasBadge = !!overflowItems.find((item) => item.badge);
  const toolsOnlyMode = drawers.length === 1 && drawers[0].id === TOOLS_DRAWER_ID;
  const globalDrawersStartIndex = drawers.length;
  const hasOpenDrawer = !!activeDrawerId || splitPanelPosition === "side" && splitPanelOpen;
  const splitPanelResolvedPosition = splitPanelToggleProps === null || splitPanelToggleProps === void 0 ? void 0 : splitPanelToggleProps.position;
  const exitExpandedMode = () => {
    if (setExpandedDrawerId) {
      setExpandedDrawerId(null);
    }
  };
  return import_react165.default.createElement(
    "aside",
    { className: styles_css_default58[`drawers-${isMobile ? "mobile" : "desktop"}-triggers-container`], "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers, ref: triggersContainerRef, role: "region" },
    import_react165.default.createElement(
      "div",
      { className: styles_css_default58["drawers-trigger-content"], "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers, role: "toolbar", "aria-orientation": "horizontal" },
      splitPanelToggleProps && import_react165.default.createElement(
        import_react165.default.Fragment,
        null,
        import_react165.default.createElement(trigger_button_default2, { ariaLabel: splitPanelToggleProps.ariaLabel, ariaControls: splitPanelToggleProps.controlId, ariaExpanded: !expandedDrawerId && splitPanelToggleProps.active, className: clsx_m_default(styles_css_default58["drawers-trigger"], styles_css_default20["drawers-trigger"], styles_css_default42["open-button"]), iconName: splitPanelResolvedPosition === "side" ? "view-vertical" : "view-horizontal", onClick: () => {
          exitExpandedMode();
          if (!!expandedDrawerId && splitPanelToggleProps.active) {
            return;
          }
          onSplitPanelToggle === null || onSplitPanelToggle === void 0 ? void 0 : onSplitPanelToggle();
        }, selected: !expandedDrawerId && splitPanelToggleProps.active, ref: splitPanelResolvedPosition === "side" ? splitPanelFocusRef : void 0, hasTooltip: true, isMobile, isForSplitPanel: true, disabled }),
        hasMultipleTriggers ? import_react165.default.createElement("div", { className: styles_css_default58["group-divider"] }) : null
      ),
      visibleItems.slice(0, globalDrawersStartIndex).map((item) => {
        var _a2, _b;
        const isForPreviousActiveDrawer = (previousActiveLocalDrawerId === null || previousActiveLocalDrawerId === void 0 ? void 0 : previousActiveLocalDrawerId.current) === item.id;
        const selected = !expandedDrawerId && item.id === activeDrawerId;
        return import_react165.default.createElement(trigger_button_default2, { ariaLabel: (_a2 = item.ariaLabels) === null || _a2 === void 0 ? void 0 : _a2.triggerButton, ariaExpanded: selected, ariaControls: activeDrawerId === item.id ? item.id : void 0, className: clsx_m_default(styles_css_default58["drawers-trigger"], !toolsOnlyMode && styles_css_default20["drawers-trigger"], item.id === TOOLS_DRAWER_ID && styles_css_default20["tools-toggle"]), iconName: item.trigger.iconName, iconSvg: item.trigger.iconSvg, key: item.id, onClick: () => {
          exitExpandedMode();
          if (!!expandedDrawerId && activeDrawerId === item.id) {
            return;
          }
          onActiveDrawerChange === null || onActiveDrawerChange === void 0 ? void 0 : onActiveDrawerChange(activeDrawerId !== item.id ? item.id : null, { initiatedByUserAction: true });
        }, ref: item.id === previousActiveLocalDrawerId.current ? drawersFocusRef : void 0, selected, badge: item.badge, testId: `awsui-app-layout-trigger-${item.id}`, hasTooltip: true, hasOpenDrawer, tooltipText: (_b = item.ariaLabels) === null || _b === void 0 ? void 0 : _b.drawerName, isForPreviousActiveDrawer, isMobile, disabled });
      }),
      globalDrawersStartIndex > 0 && visibleItems.length > globalDrawersStartIndex && import_react165.default.createElement("div", { className: styles_css_default58["group-divider"] }),
      visibleItems.slice(globalDrawersStartIndex).map((item) => {
        var _a2, _b, _c;
        const isForPreviousActiveDrawer = previousActiveGlobalDrawersIds === null || previousActiveGlobalDrawersIds === void 0 ? void 0 : previousActiveGlobalDrawersIds.current.includes(item.id);
        const selected = activeGlobalDrawersIds.includes(item.id) && (!expandedDrawerId || item.id === expandedDrawerId);
        return import_react165.default.createElement(trigger_button_default2, { ariaLabel: (_a2 = item.ariaLabels) === null || _a2 === void 0 ? void 0 : _a2.triggerButton, ariaExpanded: selected, ariaControls: selected ? item.id : void 0, className: clsx_m_default(styles_css_default58["drawers-trigger"], styles_css_default20["drawers-trigger"], styles_css_default20["drawers-trigger-global"]), iconName: item.trigger.iconName, iconSvg: item.trigger.iconSvg, key: item.id, onClick: () => {
          exitExpandedMode();
          if (!!expandedDrawerId && item.id !== expandedDrawerId && activeGlobalDrawersIds.includes(item.id)) {
            return;
          }
          onActiveGlobalDrawersChange === null || onActiveGlobalDrawersChange === void 0 ? void 0 : onActiveGlobalDrawersChange(item.id, { initiatedByUserAction: true });
        }, ref: (_b = globalDrawersFocusControl === null || globalDrawersFocusControl === void 0 ? void 0 : globalDrawersFocusControl.refs[item.id]) === null || _b === void 0 ? void 0 : _b.toggle, selected, badge: item.badge, testId: `awsui-app-layout-trigger-${item.id}`, hasTooltip: true, hasOpenDrawer, tooltipText: (_c = item.ariaLabels) === null || _c === void 0 ? void 0 : _c.drawerName, isForPreviousActiveDrawer, isMobile, disabled });
      }),
      overflowItems.length > 0 && import_react165.default.createElement(OverflowMenu, { items: overflowItems.map((item) => Object.assign(Object.assign({}, item), { active: activeGlobalDrawersIds.includes(item.id) && (!expandedDrawerId || item.id === expandedDrawerId) })), ariaLabel: overflowMenuHasBadge ? ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflowWithBadge : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflow, customTriggerBuilder: ({ onClick, triggerRef, ariaLabel, ariaExpanded, testUtilsClass }) => {
        return import_react165.default.createElement(trigger_button_default2, { ref: triggerRef, ariaLabel, ariaExpanded, badge: overflowMenuHasBadge, className: clsx_m_default(styles_css_default58["drawers-trigger"], styles_css_default20["drawers-trigger"], styles_css_default20["drawers-trigger-global"], testUtilsClass), iconName: "ellipsis", onClick, disabled });
      }, onItemClick: (event) => {
        const id = event.detail.id;
        exitExpandedMode();
        if (globalDrawers.find((drawer) => drawer.id === id)) {
          if (!!expandedDrawerId && id !== expandedDrawerId && activeGlobalDrawersIds.includes(id)) {
            return;
          }
          onActiveGlobalDrawersChange === null || onActiveGlobalDrawersChange === void 0 ? void 0 : onActiveGlobalDrawersChange(id, { initiatedByUserAction: true });
        } else {
          onActiveDrawerChange === null || onActiveDrawerChange === void 0 ? void 0 : onActiveDrawerChange(event.detail.id, { initiatedByUserAction: true });
        }
      }, globalDrawersStartIndex: globalDrawersStartIndex - indexOfOverflowItem })
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/toolbar/index.js
function AppLayoutToolbarImplementation({
  appLayoutInternals,
  // the value could be undefined if this component is loaded as a widget by a different app layout version
  // not testable in a single-version setup
  toolbarProps = {}
}) {
  var _a2, _b, _c;
  const { breadcrumbs, discoveredBreadcrumbs, verticalOffsets, isMobile, setToolbarHeight, aiDrawer, activeAiDrawer, onActiveAiDrawerChange } = appLayoutInternals;
  const { ariaLabels, activeDrawerId, drawers, drawersFocusRef, onActiveDrawerChange, globalDrawersFocusControl, globalDrawers, activeGlobalDrawersIds, onActiveGlobalDrawersChange, hasNavigation, navigationOpen, navigationFocusRef, onNavigationToggle, hasSplitPanel, splitPanelFocusRef, splitPanelToggleProps, onSplitPanelToggle, expandedDrawerId, setExpandedDrawerId, aiDrawerFocusRef } = toolbarProps;
  const drawerExpandedMode = !!expandedDrawerId;
  const ref = (0, import_react166.useRef)(null);
  const aiDrawerTransitionRef = (0, import_react166.useRef)(null);
  const activeAiDrawerId = activeAiDrawer === null || activeAiDrawer === void 0 ? void 0 : activeAiDrawer.id;
  useResizeObserver(ref, (entry) => setToolbarHeight(entry.borderBoxHeight));
  (0, import_react166.useEffect)(() => {
    return () => {
      setToolbarHeight(0);
    };
  }, []);
  const anyPanelOpenInMobile = !!isMobile && (!!activeDrawerId || !!(activeGlobalDrawersIds === null || activeGlobalDrawersIds === void 0 ? void 0 : activeGlobalDrawersIds.length) || !!activeAiDrawerId || !!navigationOpen && !!hasNavigation);
  (0, import_react166.useEffect)(() => {
    if (anyPanelOpenInMobile) {
      document.body.classList.add(styles_css_default58["block-body-scroll"]);
    } else {
      document.body.classList.remove(styles_css_default58["block-body-scroll"]);
    }
    return () => {
      document.body.classList.remove(styles_css_default58["block-body-scroll"]);
    };
  }, [anyPanelOpenInMobile]);
  const navLandmarkAttributes = navigationOpen ? { role: "presentation" } : { role: "navigation", "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation };
  return import_react166.default.createElement(
    ToolbarSlot,
    { ref, className: clsx_m_default(styles_css_default58["universal-toolbar"], (aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.trigger) && styles_css_default58["with-ai-drawer"], styles_css_default20.toolbar, {
      [styles_css_default20["mobile-bar"]]: isMobile
    }), style: {
      insetBlockStart: verticalOffsets.toolbar
    } },
    import_react166.default.createElement(Transition_default, { in: !!((aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.trigger) && !activeAiDrawerId), timeout: { enter: 0, exit: 165 }, mountOnEnter: true, unmountOnExit: true, nodeRef: aiDrawerTransitionRef }, (state) => {
      var _a3, _b2, _c2;
      return import_react166.default.createElement(
        "div",
        { className: clsx_m_default(!!((_a3 = aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.trigger) === null || _a3 === void 0 ? void 0 : _a3.customIcon) && styles_css_default58["universal-toolbar-ai-custom"], [
          styles_css_default36["with-motion-horizontal"]
        ]), style: {
          opacity: ["entering", "exiting"].includes(state) ? 0 : 1
        } },
        import_react166.default.createElement(trigger_button_default2, { ariaLabel: (_b2 = aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.ariaLabels) === null || _b2 === void 0 ? void 0 : _b2.triggerButton, ariaExpanded: !!activeAiDrawerId, iconName: aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.trigger.iconName, iconSvg: aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.trigger.iconSvg, customSvg: aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.trigger.customIcon, className: styles_css_default20["ai-drawer-toggle"], onClick: () => {
          var _a4;
          if (setExpandedDrawerId) {
            setExpandedDrawerId(null);
          }
          onActiveAiDrawerChange === null || onActiveAiDrawerChange === void 0 ? void 0 : onActiveAiDrawerChange((_a4 = aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.id) !== null && _a4 !== void 0 ? _a4 : null, { initiatedByUserAction: true });
        }, ref: aiDrawerFocusRef, selected: !drawerExpandedMode && !!activeAiDrawerId, disabled: anyPanelOpenInMobile, variant: ((_c2 = aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.trigger) === null || _c2 === void 0 ? void 0 : _c2.customIcon) ? "custom" : "circle", hasTooltip: true, testId: `awsui-app-layout-trigger-${aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.id}`, isForPreviousActiveDrawer: true })
      );
    }),
    import_react166.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default58["toolbar-container"], !!(aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.trigger) && styles_css_default58["with-ai-drawer"]) },
      hasNavigation && import_react166.default.createElement(
        "nav",
        Object.assign({}, navLandmarkAttributes, { className: clsx_m_default(styles_css_default58["universal-toolbar-nav"]) }),
        import_react166.default.createElement(trigger_button_default2, { ariaLabel: (_a2 = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _a2 !== void 0 ? _a2 : void 0, ariaExpanded: !drawerExpandedMode && navigationOpen, iconName: "menu", className: styles_css_default20["navigation-toggle"], onClick: () => {
          if (setExpandedDrawerId) {
            setExpandedDrawerId(null);
          }
          if (navigationOpen && expandedDrawerId) {
            return;
          }
          onNavigationToggle === null || onNavigationToggle === void 0 ? void 0 : onNavigationToggle(!navigationOpen);
        }, ref: navigationFocusRef, selected: !drawerExpandedMode && navigationOpen, disabled: anyPanelOpenInMobile })
      ),
      (breadcrumbs || discoveredBreadcrumbs) && import_react166.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default58["universal-toolbar-breadcrumbs"], styles_css_default20.breadcrumbs) },
        import_react166.default.createElement(BreadcrumbsSlot, { ownBreadcrumbs: appLayoutInternals.breadcrumbs, discoveredBreadcrumbs: appLayoutInternals.discoveredBreadcrumbs })
      ),
      ((drawers === null || drawers === void 0 ? void 0 : drawers.length) || (globalDrawers === null || globalDrawers === void 0 ? void 0 : globalDrawers.length) || hasSplitPanel && (splitPanelToggleProps === null || splitPanelToggleProps === void 0 ? void 0 : splitPanelToggleProps.displayed)) && import_react166.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default58["universal-toolbar-drawers"]) },
        import_react166.default.createElement(DrawerTriggers, { ariaLabels, activeDrawerId: activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : null, drawers: (_b = drawers === null || drawers === void 0 ? void 0 : drawers.filter((item) => !!item.trigger)) !== null && _b !== void 0 ? _b : [], drawersFocusRef, onActiveDrawerChange, splitPanelToggleProps: (splitPanelToggleProps === null || splitPanelToggleProps === void 0 ? void 0 : splitPanelToggleProps.displayed) ? splitPanelToggleProps : void 0, splitPanelFocusRef, onSplitPanelToggle, disabled: anyPanelOpenInMobile, globalDrawersFocusControl, globalDrawers: (_c = globalDrawers === null || globalDrawers === void 0 ? void 0 : globalDrawers.filter((item) => !!item.trigger)) !== null && _c !== void 0 ? _c : [], activeGlobalDrawersIds: activeGlobalDrawersIds !== null && activeGlobalDrawersIds !== void 0 ? activeGlobalDrawersIds : [], onActiveGlobalDrawersChange, expandedDrawerId, setExpandedDrawerId })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/widget-areas/before-main-slot.js
var BeforeMainSlotImplementation = ({ toolbarProps, appLayoutState, appLayoutProps }) => {
  const wasAiDrawerOpenRef = (0, import_react167.useRef)(false);
  if (!isWidgetReady(appLayoutState)) {
    return import_react167.default.createElement(BeforeMainSlotSkeleton, { toolbarProps, appLayoutProps, appLayoutState });
  }
  const { activeDrawer, navigationOpen, navigation, expandedDrawerId, setExpandedDrawerId, navigationAnimationDisabled, activeAiDrawerId, aiDrawerExpandedMode, aiDrawer, activeAiDrawerSize, minAiDrawerSize, maxAiDrawerSize, onActiveAiDrawerResize, aiDrawerFocusControl, ariaLabels, isMobile, drawersOpenQueue, onActiveAiDrawerChange, activeAiDrawer } = appLayoutState.widgetizedState;
  const drawerExpandedMode = !!expandedDrawerId;
  const toolsOpen = !!activeDrawer;
  const drawerExpandedModeInChildLayout = !!(toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.expandedDrawerId);
  const { __embeddedViewMode: embeddedViewMode } = appLayoutProps;
  return import_react167.default.createElement(
    import_react167.default.Fragment,
    null,
    !!toolbarProps && !embeddedViewMode && !aiDrawerExpandedMode && import_react167.default.createElement(AppLayoutToolbarImplementation, { appLayoutInternals: appLayoutState.appLayoutInternals, toolbarProps }),
    aiDrawer && import_react167.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default44["ai-drawer"], (drawerExpandedMode || drawerExpandedModeInChildLayout) && !aiDrawerExpandedMode && styles_css_default44.hidden) },
      import_react167.default.createElement(ActiveDrawersContext.Provider, { value: activeAiDrawer ? [activeAiDrawer.id] : [] }, (!!activeAiDrawerId || (aiDrawer === null || aiDrawer === void 0 ? void 0 : aiDrawer.preserveInactiveContent) && wasAiDrawerOpenRef.current) && import_react167.default.createElement(
        import_react167.default.Fragment,
        null,
        wasAiDrawerOpenRef.current = true,
        import_react167.default.createElement(AppLayoutGlobalAiDrawerImplementation, { show: !!activeAiDrawerId, activeAiDrawer: aiDrawer !== null && aiDrawer !== void 0 ? aiDrawer : null, appLayoutInternals: appLayoutState.appLayoutInternals, aiDrawerProps: {
          activeAiDrawerSize,
          minAiDrawerSize,
          maxAiDrawerSize,
          aiDrawer,
          ariaLabels,
          aiDrawerFocusControl,
          isMobile,
          drawersOpenQueue,
          onActiveAiDrawerChange,
          onActiveDrawerResize: ({ size }) => onActiveAiDrawerResize(size),
          expandedDrawerId,
          setExpandedDrawerId
        } })
      ))
    ),
    navigation && import_react167.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default44.navigation, !navigationOpen && styles_css_default44["panel-hidden"], toolsOpen && styles_css_default44["unfocusable-mobile"], !navigationAnimationDisabled && styles_css_default36["with-motion-horizontal"], (drawerExpandedMode || drawerExpandedModeInChildLayout) && styles_css_default44.hidden) },
      import_react167.default.createElement(AppLayoutNavigationImplementation, { appLayoutInternals: appLayoutState.appLayoutInternals })
    )
  );
};
var createWidgetizedAppLayoutBeforeMainSlot = createWidgetizedComponent(BeforeMainSlotImplementation, BeforeMainSlotSkeleton);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/widget-areas/bottom-content-slot.js
var import_react168 = __toESM(require_react());
var BottomContentSlotImplementation = ({ appLayoutState, appLayoutProps }) => {
  if (!isWidgetReady(appLayoutState)) {
    return null;
  }
  const { splitPanelPosition, placement } = appLayoutState.widgetizedState;
  return import_react168.default.createElement(import_react168.default.Fragment, null, splitPanelPosition === "bottom" && import_react168.default.createElement(
    "div",
    { className: styles_css_default44["split-panel-bottom"], style: { insetBlockEnd: placement.insetBlockEnd } },
    import_react168.default.createElement(AppLayoutSplitPanelDrawerBottomImplementation, { appLayoutInternals: appLayoutState.appLayoutInternals, splitPanelInternals: appLayoutState.splitPanelInternals }, appLayoutProps.splitPanel)
  ));
};
var createWidgetizedAppLayoutBottomContentSlot = createWidgetizedComponent(BottomContentSlotImplementation);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/widget-areas/top-content-slot.js
var import_react170 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/notifications/index.js
var import_react169 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/notifications/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/notifications/styles.scoped.css";
var styles_css_default59 = {
  "sticky-notifications": "awsui_sticky-notifications_154bi_yk7p7_9",
  "sticky-notifications-with-background": "awsui_sticky-notifications-with-background_154bi_yk7p7_13",
  "has-notifications-content": "awsui_has-notifications-content_154bi_yk7p7_17"
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/notifications/index.js
function AppLayoutNotificationsImplementation({ appLayoutInternals, children: children2 }) {
  const { ariaLabels, stickyNotifications, setNotificationsHeight, verticalOffsets } = appLayoutInternals;
  const [hasNotificationsContent, setHasNotificationsContent] = (0, import_react169.useState)(false);
  const rootRef = (0, import_react169.useRef)(null);
  useResizeObserver(rootRef, (entry) => {
    const hasContent = entry.contentBoxHeight > 0;
    setNotificationsHeight(hasContent ? entry.borderBoxHeight : 0);
    setHasNotificationsContent(hasContent);
  });
  (0, import_react169.useEffect)(() => {
    return () => {
      setNotificationsHeight(0);
    };
  }, []);
  return import_react169.default.createElement(
    NotificationsSlot,
    { ref: rootRef, className: clsx_m_default(appLayoutInternals.headerVariant === "high-contrast" && highContrastHeaderClassName, stickyNotifications && styles_css_default59["sticky-notifications"], hasNotificationsContent && styles_css_default59["has-notifications-content"], appLayoutInternals.headerVariant !== "high-contrast" && styles_css_default59["sticky-notifications-with-background"]), style: {
      insetBlockStart: stickyNotifications ? verticalOffsets.notifications : void 0
    } },
    import_react169.default.createElement("div", { className: styles_css_default20.notifications, role: "region", "aria-label": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.notifications }, children2)
  );
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/widget-areas/top-content-slot.js
var TopContentSlotImplementation = ({ appLayoutProps, appLayoutState }) => {
  if (!isWidgetReady(appLayoutState)) {
    return null;
  }
  return import_react170.default.createElement(
    import_react170.default.Fragment,
    null,
    appLayoutProps.notifications && import_react170.default.createElement("div", { className: clsx_m_default(styles_css_default44["notifications-background"], appLayoutProps.headerVariant === "high-contrast" && highContrastHeaderClassName) }),
    appLayoutProps.notifications && import_react170.default.createElement(AppLayoutNotificationsImplementation, { appLayoutInternals: appLayoutState.appLayoutInternals }, appLayoutProps.notifications)
  );
};
var createWidgetizedAppLayoutTopContentSlot = createWidgetizedComponent(TopContentSlotImplementation);

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/internal.js
var AppLayoutBeforeMainSlot = createWidgetizedAppLayoutBeforeMainSlot(createLoadableComponent(BeforeMainSlotImplementation));
var AppLayoutAfterMainSlot = createWidgetizedAppLayoutAfterMainSlot(createLoadableComponent(AfterMainSlotImplementation));
var AppLayoutTopContentSlot = createWidgetizedAppLayoutTopContentSlot(createLoadableComponent(TopContentSlotImplementation));
var AppLayoutBottomContentSlot = createWidgetizedAppLayoutBottomContentSlot(createLoadableComponent(BottomContentSlotImplementation));
var AppLayoutWidgetizedState = createWidgetizedAppLayoutState(createLoadableComponent(AppLayoutStateProvider));

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/index.js
var import_react171 = __toESM(require_react());
var componentAnalyticsMetadata = {
  name: "awsui.AppLayoutToolbar",
  label: {
    selector: "h1",
    root: "body"
  }
};
var SkeletonLayout = ({ registered, appLayoutProps, appLayoutState, toolbarProps, skeletonSlotsAttributes }) => {
  var _a2, _b, _c, _d, _e;
  const { contentHeader, content, navigationWidth } = appLayoutProps;
  const mergedProps = {
    toolbarProps,
    appLayoutProps,
    appLayoutState
  };
  const { wrapperElAttributes, mainElAttributes, contentWrapperElAttributes, contentHeaderElAttributes, contentElAttributes } = skeletonSlotsAttributes;
  return import_react171.default.createElement(
    VisualContext,
    { contextName: "app-layout-toolbar" },
    import_react171.default.createElement(
      "div",
      Object.assign({}, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata }), { ref: appLayoutState.rootRef, "data-awsui-app-layout-widget-loaded": false }, wrapperElAttributes, { className: (_a2 = wrapperElAttributes === null || wrapperElAttributes === void 0 ? void 0 : wrapperElAttributes.className) !== null && _a2 !== void 0 ? _a2 : clsx_m_default(styles_css_default44.root, styles_css_default20.root), style: (_b = wrapperElAttributes === null || wrapperElAttributes === void 0 ? void 0 : wrapperElAttributes.style) !== null && _b !== void 0 ? _b : {
        blockSize: `calc(100vh - ${appLayoutProps.placement.insetBlockStart + appLayoutProps.placement.insetBlockEnd}px)`,
        [custom_css_properties_default.navigationWidth]: `${navigationWidth}px`
      } }),
      import_react171.default.createElement(AppLayoutBeforeMainSlot, Object.assign({}, mergedProps)),
      import_react171.default.createElement(
        "main",
        Object.assign({}, mainElAttributes, { className: (_c = mainElAttributes === null || mainElAttributes === void 0 ? void 0 : mainElAttributes.className) !== null && _c !== void 0 ? _c : styles_css_default44["main-landmark"] }),
        import_react171.default.createElement(AppLayoutTopContentSlot, Object.assign({}, mergedProps)),
        import_react171.default.createElement(
          "div",
          Object.assign({}, contentWrapperElAttributes, { className: (_d = contentWrapperElAttributes === null || contentWrapperElAttributes === void 0 ? void 0 : contentWrapperElAttributes.className) !== null && _d !== void 0 ? _d : clsx_m_default(styles_css_default44.main, { [styles_css_default44["main-disable-paddings"]]: appLayoutProps.disableContentPaddings }) }),
          contentHeader && import_react171.default.createElement("div", Object.assign({}, contentHeaderElAttributes), contentHeader),
          import_react171.default.createElement("div", Object.assign({}, contentElAttributes, { className: (_e = contentElAttributes === null || contentElAttributes === void 0 ? void 0 : contentElAttributes.className) !== null && _e !== void 0 ? _e : styles_css_default20.content }), registered ? content : null)
        ),
        import_react171.default.createElement(AppLayoutBottomContentSlot, Object.assign({}, mergedProps))
      ),
      import_react171.default.createElement(AppLayoutAfterMainSlot, Object.assign({}, mergedProps))
    )
  );
};

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/skeleton/multi-layout.js
var import_react172 = __toESM(require_react());
function useMultiAppLayout(forceDeduplicationType, isEnabled, props2, mergeProps2) {
  const [registration, setRegistration] = (0, import_react172.useState)(null);
  const isToolbar = useAppLayoutFlagEnabled();
  (0, import_react172.useLayoutEffect)(() => {
    if (!isEnabled || forceDeduplicationType === "suspended" || !isToolbar) {
      return;
    }
    if (forceDeduplicationType === "off") {
      setRegistration({ type: "primary", discoveredProps: [] });
      return;
    }
    const unregister = awsuiPluginsInternal.appLayoutWidget.register(forceDeduplicationType, (props3) => setRegistration(props3));
    return () => {
      unregister();
      setRegistration({ type: "suspended" });
    };
  }, [forceDeduplicationType, isEnabled, isToolbar]);
  (0, import_react172.useLayoutEffect)(() => {
    if ((registration === null || registration === void 0 ? void 0 : registration.type) === "secondary") {
      registration.update(props2);
    }
  });
  (0, import_react172.useEffect)(() => {
    if (registration) {
      reportMultiLayoutMetric(registration);
    }
  }, [registration]);
  if (!isToolbar) {
    return {
      registered: true,
      // mergeProps is needed here because the toolbar's behavior depends on reconciliation logic
      // in this function. For example, navigation trigger visibility
      toolbarProps: mergeProps2(props2, [])
    };
  }
  return {
    registered: !!(registration === null || registration === void 0 ? void 0 : registration.type),
    toolbarProps: (registration === null || registration === void 0 ? void 0 : registration.type) === "primary" ? mergeProps2(props2, registration.discoveredProps) : null
  };
}
function reportMultiLayoutMetric(registration) {
  if (registration.type === "primary" && registration.discoveredProps.length > 0) {
    metrics.sendOpsMetricObject("awsui-multi-layout-usage-primary", {
      // temporary workaround for missing typings
      // https://github.com/cloudscape-design/component-toolkit/pull/153
      instancesCount: registration.discoveredProps.length
    });
  } else if (registration.type === "suspended") {
    metrics.sendOpsMetricObject("awsui-multi-layout-usage-suspended", {});
  }
}

// node_modules/@cloudscape-design/components/app-layout/visual-refresh-toolbar/index.js
var AppLayoutStateProvider2 = ({ forceDeduplicationType, appLayoutProps, stateManager, children: children2 }) => {
  const [appLayoutState, setAppLayoutState] = (0, import_react173.useState)({ isIntersecting: true });
  const [skeletonAttributes, setSkeletonAttributes] = (0, import_react173.useState)({});
  const [deduplicator, setDeduplicator] = (0, import_react173.useState)({ fn: mergeProps });
  const [deduplicationProps, setDeduplicationProps] = (0, import_react173.useState)(void 0);
  const { registered, toolbarProps } = useMultiAppLayout(forceDeduplicationType, appLayoutState.isIntersecting, deduplicationProps !== null && deduplicationProps !== void 0 ? deduplicationProps : getPropsToMerge(appLayoutProps, appLayoutState), deduplicator.fn);
  (0, import_react173.useLayoutEffect)(() => {
    stateManager.current.setState = (appLayoutState2, skeletonAttributes2, deduplicationProps2, mergeProps2) => {
      (0, import_react_dom7.unstable_batchedUpdates)(() => {
        setAppLayoutState(appLayoutState2);
        setSkeletonAttributes(skeletonAttributes2);
        setDeduplicationProps(deduplicationProps2);
        setDeduplicator({ fn: mergeProps2 });
      });
    };
  }, [stateManager]);
  const hasToolbar = !!toolbarProps;
  (0, import_react173.useEffect)(() => {
    var _a2, _b;
    stateManager.current.hasToolbar = hasToolbar;
    (_b = (_a2 = stateManager.current).setToolbar) === null || _b === void 0 ? void 0 : _b.call(_a2, hasToolbar);
  }, [stateManager, hasToolbar]);
  return import_react173.default.createElement(import_react173.default.Fragment, null, children2(registered, appLayoutState, toolbarProps, skeletonAttributes));
};
var AppLayoutVisualRefreshToolbar = import_react173.default.forwardRef((props2, forwardRef32) => {
  const stateManager = (0, import_react173.useRef)({ setState: void 0, hasToolbar: true, setToolbar: void 0 });
  const { __forceDeduplicationType: forceDeduplicationType, __embeddedViewMode: embeddedViewMode } = props2;
  return import_react173.default.createElement(
    import_react173.default.Fragment,
    null,
    import_react173.default.createElement(AppLayoutStateProvider2, { forceDeduplicationType, appLayoutProps: props2, stateManager }, (registered, appLayoutState, toolbarProps, skeletonAttributes) => import_react173.default.createElement(
      AppLayoutVisibilityContext.Provider,
      { value: appLayoutState.isIntersecting },
      (embeddedViewMode || !toolbarProps) && props2.breadcrumbs ? import_react173.default.createElement(ScreenreaderOnly, null, props2.breadcrumbs) : null,
      import_react173.default.createElement(SkeletonLayout, { registered, toolbarProps, appLayoutProps: props2, appLayoutState, skeletonSlotsAttributes: skeletonAttributes })
    )),
    import_react173.default.createElement(AppLayoutWidgetizedState, { forwardRef: forwardRef32, appLayoutProps: props2, stateManager })
  );
});
var visual_refresh_toolbar_default = AppLayoutVisualRefreshToolbar;

// node_modules/@cloudscape-design/components/app-layout/internal.js
var AppLayoutInternal = import_react174.default.forwardRef((props2, ref) => {
  const isRefresh = useVisualRefresh();
  const isToolbar = useAppLayoutFlagEnabled();
  if (isRefresh) {
    if (isToolbar) {
      return import_react174.default.createElement(visual_refresh_toolbar_default, Object.assign({ ref }, props2));
    } else {
      return import_react174.default.createElement(visual_refresh_default, Object.assign({ ref }, props2));
    }
  }
  return import_react174.default.createElement(classic_default, Object.assign({ ref }, props2));
});

// node_modules/@cloudscape-design/components/app-layout/utils/use-app-layout-placement.js
var import_react176 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/utils/use-observed-element.js
var import_react175 = __toESM(require_react());
function useObservedElement(rootElementRef, selector) {
  const getElement = (0, import_react175.useCallback)(() => {
    var _a2, _b;
    const document2 = (_b = (_a2 = rootElementRef.current) === null || _a2 === void 0 ? void 0 : _a2.ownerDocument) !== null && _b !== void 0 ? _b : window.document;
    return document2.querySelector(selector);
  }, [rootElementRef, selector]);
  const [height, setHeight] = (0, import_react175.useState)(0);
  useResizeObserver(getElement, (entry) => setHeight(entry.borderBoxHeight));
  return height;
}

// node_modules/@cloudscape-design/components/app-layout/utils/use-app-layout-placement.js
function useAppLayoutPlacement(headerSelector, footerSelector) {
  const mainElementRef = (0, import_react176.useRef)(null);
  const headerHeight = useObservedElement(mainElementRef, headerSelector);
  const footerHeight = useObservedElement(mainElementRef, footerSelector);
  const [offsets, setOffsets] = (0, import_react176.useState)({
    insetInlineStart: 0,
    insetInlineEnd: 0,
    inlineSize: Number.POSITIVE_INFINITY
  });
  const updatePosition2 = (0, import_react176.useCallback)(() => {
    if (!mainElementRef.current) {
      return;
    }
    const { insetInlineStart, insetInlineEnd, inlineSize } = getLogicalBoundingClientRect(mainElementRef.current);
    if (inlineSize === 0) {
      return;
    }
    setOffsets({ insetInlineStart, insetInlineEnd: inlineSize - insetInlineEnd, inlineSize });
  }, []);
  (0, import_react176.useEffect)(() => {
    window.addEventListener("resize", updatePosition2);
    return () => window.removeEventListener("resize", updatePosition2);
  }, [updatePosition2]);
  useResizeObserver(mainElementRef, updatePosition2);
  return [mainElementRef, Object.assign(Object.assign({}, offsets), { insetBlockStart: headerHeight, insetBlockEnd: footerHeight })];
}

// node_modules/@cloudscape-design/components/app-layout/index.js
var AppLayout2 = import_react177.default.forwardRef((_a2, ref) => {
  var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
  var { contentType = "default", headerSelector = "#b #h", footerSelector = "#b #f", navigationWidth = 280, toolsWidth = 290, maxContentWidth, minContentWidth, navigationOpen: controlledNavigationOpen, onNavigationChange: controlledOnNavigationChange, analyticsMetadata } = _a2, rest = __rest(_a2, ["contentType", "headerSelector", "footerSelector", "navigationWidth", "toolsWidth", "maxContentWidth", "minContentWidth", "navigationOpen", "onNavigationChange", "analyticsMetadata"]);
  if (isDevelopment2) {
    if (rest.toolsOpen && rest.toolsHide) {
      warnOnce("AppLayout", `You have enabled both the \`toolsOpen\` prop and the \`toolsHide\` prop. This is not supported. Set \`toolsOpen\` to \`false\` when you set \`toolsHide\` to \`true\`.`);
    }
  }
  const { __internalRootRef } = useBaseComponent("AppLayout", {
    props: {
      contentType,
      disableContentPaddings: rest.disableContentPaddings,
      disableBodyScroll: rest.disableBodyScroll,
      navigationWidth,
      navigationHide: rest.navigationHide,
      toolsHide: rest.toolsHide,
      toolsWidth,
      maxContentWidth,
      minContentWidth,
      stickyNotifications: rest.stickyNotifications,
      disableContentHeaderOverlap: rest.disableContentHeaderOverlap
    },
    metadata: {
      drawersCount: (_c = (_b = rest.drawers) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : null,
      hasContentHeader: !!rest.contentHeader
    }
  }, analyticsMetadata);
  const isRefresh = useVisualRefresh();
  const isMobile = useMobile();
  const i18n = useInternalI18n("app-layout");
  const ariaLabels = {
    navigation: i18n("ariaLabels.navigation", (_d = rest.ariaLabels) === null || _d === void 0 ? void 0 : _d.navigation),
    navigationClose: i18n("ariaLabels.navigationClose", (_e = rest.ariaLabels) === null || _e === void 0 ? void 0 : _e.navigationClose),
    navigationToggle: i18n("ariaLabels.navigationToggle", (_f = rest.ariaLabels) === null || _f === void 0 ? void 0 : _f.navigationToggle),
    notifications: i18n("ariaLabels.notifications", (_g = rest.ariaLabels) === null || _g === void 0 ? void 0 : _g.notifications),
    tools: i18n("ariaLabels.tools", (_h = rest.ariaLabels) === null || _h === void 0 ? void 0 : _h.tools),
    toolsClose: i18n("ariaLabels.toolsClose", (_j = rest.ariaLabels) === null || _j === void 0 ? void 0 : _j.toolsClose),
    toolsToggle: i18n("ariaLabels.toolsToggle", (_k = rest.ariaLabels) === null || _k === void 0 ? void 0 : _k.toolsToggle),
    drawers: i18n("ariaLabels.drawers", (_l = rest.ariaLabels) === null || _l === void 0 ? void 0 : _l.drawers),
    drawersOverflow: i18n("ariaLabels.drawersOverflow", (_m = rest.ariaLabels) === null || _m === void 0 ? void 0 : _m.drawersOverflow),
    drawersOverflowWithBadge: i18n("ariaLabels.drawersOverflowWithBadge", (_o = rest.ariaLabels) === null || _o === void 0 ? void 0 : _o.drawersOverflowWithBadge)
  };
  const _p = applyDefaults(contentType, { maxContentWidth, minContentWidth }, isRefresh), { navigationOpen: defaultNavigationOpen } = _p, restDefaults = __rest(_p, ["navigationOpen"]);
  const [navigationOpen = false, setNavigationOpen] = useControllable2(controlledNavigationOpen, controlledOnNavigationChange, isMobile ? false : defaultNavigationOpen, { componentName: "AppLayout", controlledProp: "navigationOpen", changeHandler: "onNavigationChange" });
  const onNavigationChange = (event) => {
    setNavigationOpen(event.detail.open);
    controlledOnNavigationChange === null || controlledOnNavigationChange === void 0 ? void 0 : controlledOnNavigationChange(event);
  };
  const [rootRef, placement] = useAppLayoutPlacement(headerSelector, footerSelector);
  const props2 = Object.assign(Object.assign(Object.assign({
    contentType,
    navigationWidth,
    toolsWidth,
    navigationOpen,
    onNavigationChange
  }, restDefaults), rest), {
    ariaLabels,
    placement
  });
  const baseProps = getBaseProps(rest);
  return import_react177.default.createElement(
    "div",
    Object.assign({ ref: useMergeRefs(__internalRootRef, rootRef) }, baseProps),
    import_react177.default.createElement(AppLayoutInternal, Object.assign({ ref }, props2))
  );
});
applyDisplayName(AppLayout2, "AppLayout");
var app_layout_default = AppLayout2;

// node_modules/@cloudscape-design/components/app-layout-toolbar/index.js
var import_react178 = __toESM(require_react());
var AppLayoutToolbar = import_react178.default.forwardRef((_a2, ref) => {
  var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
  var { contentType = "default", headerSelector = "#b #h", footerSelector = "#b #f", navigationWidth = 280, toolsWidth = 290, maxContentWidth, minContentWidth, navigationOpen: controlledNavigationOpen, onNavigationChange: controlledOnNavigationChange, analyticsMetadata } = _a2, rest = __rest(_a2, ["contentType", "headerSelector", "footerSelector", "navigationWidth", "toolsWidth", "maxContentWidth", "minContentWidth", "navigationOpen", "onNavigationChange", "analyticsMetadata"]);
  const isRefresh = useVisualRefresh();
  if (!isRefresh) {
    throw new Error(`AppLayoutToolbar component is not supported in the Classic theme. Please switch to the Refresh theme. For more details, refer to the documentation.`);
  }
  if (isDevelopment2) {
    if (rest.toolsOpen && rest.toolsHide) {
      warnOnce("AppLayoutToolbar", `You have enabled both the \`toolsOpen\` prop and the \`toolsHide\` prop. This is not supported. Set \`toolsOpen\` to \`false\` when you set \`toolsHide\` to \`true\`.`);
    }
  }
  const { __internalRootRef } = useBaseComponent("AppLayoutToolbar", {
    props: {
      contentType,
      disableContentPaddings: rest.disableContentPaddings,
      navigationWidth,
      navigationHide: rest.navigationHide,
      toolsHide: rest.toolsHide,
      toolsWidth,
      maxContentWidth,
      minContentWidth,
      stickyNotifications: rest.stickyNotifications,
      disableContentHeaderOverlap: rest.disableContentHeaderOverlap,
      navigationTriggerHide: rest.navigationTriggerHide
    },
    metadata: {
      drawersCount: (_c = (_b = rest.drawers) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : null,
      hasContentHeader: !!rest.contentHeader
    }
  }, analyticsMetadata);
  const isMobile = useMobile();
  const i18n = useInternalI18n("app-layout");
  const ariaLabels = {
    navigation: i18n("ariaLabels.navigation", (_d = rest.ariaLabels) === null || _d === void 0 ? void 0 : _d.navigation),
    navigationClose: i18n("ariaLabels.navigationClose", (_e = rest.ariaLabels) === null || _e === void 0 ? void 0 : _e.navigationClose),
    navigationToggle: i18n("ariaLabels.navigationToggle", (_f = rest.ariaLabels) === null || _f === void 0 ? void 0 : _f.navigationToggle),
    notifications: i18n("ariaLabels.notifications", (_g = rest.ariaLabels) === null || _g === void 0 ? void 0 : _g.notifications),
    tools: i18n("ariaLabels.tools", (_h = rest.ariaLabels) === null || _h === void 0 ? void 0 : _h.tools),
    toolsClose: i18n("ariaLabels.toolsClose", (_j = rest.ariaLabels) === null || _j === void 0 ? void 0 : _j.toolsClose),
    toolsToggle: i18n("ariaLabels.toolsToggle", (_k = rest.ariaLabels) === null || _k === void 0 ? void 0 : _k.toolsToggle),
    drawers: i18n("ariaLabels.drawers", (_l = rest.ariaLabels) === null || _l === void 0 ? void 0 : _l.drawers),
    drawersOverflow: i18n("ariaLabels.drawersOverflow", (_m = rest.ariaLabels) === null || _m === void 0 ? void 0 : _m.drawersOverflow),
    drawersOverflowWithBadge: i18n("ariaLabels.drawersOverflowWithBadge", (_o = rest.ariaLabels) === null || _o === void 0 ? void 0 : _o.drawersOverflowWithBadge)
  };
  const _p = applyDefaults(contentType, { maxContentWidth, minContentWidth }, isRefresh), { navigationOpen: defaultNavigationOpen } = _p, restDefaults = __rest(_p, ["navigationOpen"]);
  const [navigationOpen = false, setNavigationOpen] = useControllable2(controlledNavigationOpen, controlledOnNavigationChange, isMobile ? false : defaultNavigationOpen, { componentName: "AppLayoutToolbar", controlledProp: "navigationOpen", changeHandler: "onNavigationChange" });
  const onNavigationChange = (event) => {
    setNavigationOpen(event.detail.open);
    controlledOnNavigationChange === null || controlledOnNavigationChange === void 0 ? void 0 : controlledOnNavigationChange(event);
  };
  const [rootRef, placement] = useAppLayoutPlacement(headerSelector, footerSelector);
  const props2 = Object.assign(Object.assign(Object.assign({
    contentType,
    navigationWidth,
    toolsWidth,
    navigationOpen,
    onNavigationChange
  }, restDefaults), rest), {
    ariaLabels,
    placement
  });
  const baseProps = getBaseProps(rest);
  return import_react178.default.createElement(
    AppLayoutToolbarPublicContext.Provider,
    { value: true },
    import_react178.default.createElement(
      "div",
      Object.assign({ ref: useMergeRefs(__internalRootRef, rootRef) }, baseProps),
      import_react178.default.createElement(visual_refresh_toolbar_default, Object.assign({ ref }, props2))
    )
  );
});
applyDisplayName(AppLayoutToolbar, "AppLayoutToolbar");
var app_layout_toolbar_default = AppLayoutToolbar;

// node_modules/@cloudscape-design/components/area-chart/index.js
var import_react263 = __toESM(require_react());

// node_modules/@cloudscape-design/components/area-chart/internal.js
var import_react262 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-status-container/index.js
var import_react182 = __toESM(require_react());

// node_modules/@cloudscape-design/components/link/internal.js
var import_react180 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/context/info-link-label-context.js
var import_react179 = __toESM(require_react());
var InfoLinkLabelContext = (0, import_react179.createContext)(void 0);

// node_modules/@cloudscape-design/components/link/style.js
function getLinkStyles(style) {
  var _a2, _b, _c, _d, _e, _f, _g, _h;
  let properties2 = {};
  if ((style === null || style === void 0 ? void 0 : style.root) && SYSTEM === "core") {
    properties2 = Object.assign(Object.assign({}, ((_a2 = style === null || style === void 0 ? void 0 : style.root) === null || _a2 === void 0 ? void 0 : _a2.color) && {
      [custom_css_properties_default.styleColorActive]: (_b = style.root.color) === null || _b === void 0 ? void 0 : _b.active,
      [custom_css_properties_default.styleColorDefault]: (_c = style.root.color) === null || _c === void 0 ? void 0 : _c.default,
      [custom_css_properties_default.styleColorHover]: (_d = style.root.color) === null || _d === void 0 ? void 0 : _d.hover
    }), ((_e = style.root) === null || _e === void 0 ? void 0 : _e.focusRing) && {
      [custom_css_properties_default.styleFocusRingBorderColor]: (_f = style.root.focusRing) === null || _f === void 0 ? void 0 : _f.borderColor,
      [custom_css_properties_default.styleFocusRingBorderRadius]: (_g = style.root.focusRing) === null || _g === void 0 ? void 0 : _g.borderRadius,
      [custom_css_properties_default.styleFocusRingBorderWidth]: (_h = style.root.focusRing) === null || _h === void 0 ? void 0 : _h.borderWidth
    });
  }
  return properties2;
}

// node_modules/@cloudscape-design/components/link/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/link/styles.scoped.css";
var styles_css_default60 = {
  "link": "awsui_link_4c84z_rikkm_145",
  "variant-secondary": "awsui_variant-secondary_4c84z_rikkm_212",
  "variant-primary": "awsui_variant-primary_4c84z_rikkm_247",
  "variant-info": "awsui_variant-info_4c84z_rikkm_280",
  "variant-value-large": "awsui_variant-value-large_4c84z_rikkm_315",
  "variant-top-navigation": "awsui_variant-top-navigation_4c84z_rikkm_347",
  "variant-recovery": "awsui_variant-recovery_4c84z_rikkm_382",
  "button": "awsui_button_4c84z_rikkm_415",
  "color-inverted": "awsui_color-inverted_4c84z_rikkm_450",
  "font-size-body-s": "awsui_font-size-body-s_4c84z_rikkm_471",
  "font-size-body-m": "awsui_font-size-body-m_4c84z_rikkm_478",
  "font-size-heading-xs": "awsui_font-size-heading-xs_4c84z_rikkm_484",
  "font-size-heading-s": "awsui_font-size-heading-s_4c84z_rikkm_490",
  "font-size-heading-m": "awsui_font-size-heading-m_4c84z_rikkm_497",
  "font-size-heading-l": "awsui_font-size-heading-l_4c84z_rikkm_504",
  "font-size-heading-xl": "awsui_font-size-heading-xl_4c84z_rikkm_511",
  "font-size-display-l": "awsui_font-size-display-l_4c84z_rikkm_518",
  "font-size-inherit": "awsui_font-size-inherit_4c84z_rikkm_525",
  "icon-wrapper": "awsui_icon-wrapper_4c84z_rikkm_533",
  "icon": "awsui_icon_4c84z_rikkm_533"
};

// node_modules/@cloudscape-design/components/link/internal.js
var InternalLink = import_react180.default.forwardRef((_a2, ref) => {
  var { variant: providedVariant, fontSize = "body-m", color: color2 = "normal", external = false, target, href, rel, ariaLabel, externalIconAriaLabel, onFollow, onClick, children: children2, nativeAttributes, __internalRootRef, style } = _a2, props2 = __rest(_a2, ["variant", "fontSize", "color", "external", "target", "href", "rel", "ariaLabel", "externalIconAriaLabel", "onFollow", "onClick", "children", "nativeAttributes", "__internalRootRef", "style"]);
  checkSafeUrl("Link", href);
  const isButton = !href;
  const { defaultVariant } = (0, import_react180.useContext)(LinkDefaultVariantContext);
  const variant = providedVariant || defaultVariant;
  const specialStyles = ["top-navigation", "link", "recovery"];
  const hasSpecialStyle = specialStyles.indexOf(variant) > -1;
  const i18n = useInternalI18n("link");
  const baseProps = getBaseProps(props2);
  const anchorTarget = target !== null && target !== void 0 ? target : external ? "_blank" : void 0;
  const anchorRel = rel !== null && rel !== void 0 ? rel : anchorTarget === "_blank" ? "noopener noreferrer" : void 0;
  const uniqueId = useUniqueId("link");
  const linkId = useUniqueId("link-self");
  const infoId = useUniqueId("link-info");
  const infoLinkLabelFromContext = (0, import_react180.useContext)(InfoLinkLabelContext);
  const { funnelIdentifier, funnelInteractionId } = useFunnel();
  const { stepIdentifier, stepNumber, stepNameSelector } = useFunnelStep();
  const { subStepIdentifier, subStepSelector, subStepNameSelector } = useFunnelSubStep();
  const fireFunnelEvent = (funnelInteractionId2) => {
    if (variant === "info") {
      const stepName = getTextFromSelector(stepNameSelector);
      const subStepName = getTextFromSelector(subStepNameSelector);
      FunnelMetrics.helpPanelInteracted({
        funnelIdentifier,
        funnelInteractionId: funnelInteractionId2,
        stepIdentifier,
        stepNumber,
        stepName,
        subStepIdentifier,
        stepNameSelector,
        subStepSelector,
        subStepName,
        subStepNameSelector,
        elementSelector: getFunnelValueSelector(uniqueId),
        subStepAllSelector: getSubStepAllSelector()
      });
    } else if (external) {
      const stepName = getTextFromSelector(stepNameSelector);
      const subStepName = getTextFromSelector(subStepNameSelector);
      FunnelMetrics.externalLinkInteracted({
        funnelIdentifier,
        funnelInteractionId: funnelInteractionId2,
        stepIdentifier,
        stepNumber,
        stepName,
        stepNameSelector,
        subStepIdentifier,
        subStepSelector,
        subStepName,
        subStepNameSelector,
        elementSelector: getFunnelValueSelector(uniqueId),
        subStepAllSelector: getSubStepAllSelector()
      });
    }
  };
  const fireFollowEvent = (event) => {
    if (funnelInteractionId) {
      fireFunnelEvent(funnelInteractionId);
    }
    fireCancelableEvent(onFollow, { href, external, target: anchorTarget }, event);
  };
  const fireClickEvent = (event) => {
    const { altKey, ctrlKey, metaKey, shiftKey } = event;
    const button = "button" in event ? event.button : 0;
    fireNonCancelableEvent(onClick, { altKey, button, ctrlKey, metaKey, shiftKey });
  };
  const handleLinkClick = (event) => {
    if (isPlainLeftClick(event)) {
      fireFollowEvent(event);
    }
    fireClickEvent(event);
  };
  const handleButtonClick = (event) => {
    fireFollowEvent(event);
    fireClickEvent(event);
  };
  const handleButtonKeyDown = (event) => {
    if (event.keyCode === KeyCode2.space || event.keyCode === KeyCode2.enter) {
      event.preventDefault();
      fireFollowEvent(event);
      fireClickEvent(event);
    }
  };
  const linkRef = (0, import_react180.useRef)(null);
  const isVisualRefresh = useVisualRefresh();
  useForwardFocus(ref, linkRef);
  const applyButtonStyles = isButton && isVisualRefresh && !hasSpecialStyle;
  const sharedProps = Object.assign(Object.assign({ id: linkId }, baseProps), { ref: useMergeRefs(linkRef, __internalRootRef), className: clsx_m_default(styles_css_default60.link, baseProps.className, applyButtonStyles ? styles_css_default60.button : null, styles_css_default60[getVariantStyle(variant)], styles_css_default60[getFontSizeStyle(variant, fontSize)], styles_css_default60[getColorStyle(variant, color2)]), style: getLinkStyles(style), "aria-label": ariaLabel, "aria-labelledby": void 0, [DATA_ATTR_FUNNEL_VALUE]: uniqueId });
  if (variant === "info" && infoLinkLabelFromContext && !ariaLabel) {
    sharedProps["aria-labelledby"] = `${sharedProps.id} ${infoId} ${infoLinkLabelFromContext}`;
  }
  const renderedExternalIconAriaLabel = i18n("externalIconAriaLabel", externalIconAriaLabel);
  const content = import_react180.default.createElement(
    import_react180.default.Fragment,
    null,
    children2,
    external && import_react180.default.createElement(
      "span",
      { className: styles_css_default60["icon-wrapper"] },
      " ",
      import_react180.default.createElement(
        "span",
        { className: styles_css_default60.icon, "aria-label": renderedExternalIconAriaLabel, role: renderedExternalIconAriaLabel ? "img" : void 0 },
        import_react180.default.createElement(internal_default, { name: "external", size: "inherit" })
      )
    ),
    variant === "info" && import_react180.default.createElement("span", { hidden: true, id: infoId }, ":")
  );
  const { tabIndex } = useSingleTabStopNavigation(linkRef, { tabIndex: isButton ? 0 : void 0 });
  if (isButton) {
    return import_react180.default.createElement(with_native_attributes_default, Object.assign({}, sharedProps, { tag: "a", componentName: "Link", nativeAttributes, role: "button", tabIndex, onKeyDown: handleButtonKeyDown, onClick: handleButtonClick }), content);
  }
  return import_react180.default.createElement(with_native_attributes_default, Object.assign({}, sharedProps, { tag: "a", componentName: "Link", nativeAttributes, tabIndex, target: anchorTarget, rel: anchorRel, href, onClick: handleLinkClick }), content);
});
function getVariantStyle(variant) {
  return `variant-${variant.replace(/^awsui-/, "")}`;
}
function getFontSizeStyle(variant, fontSize) {
  switch (variant) {
    case "info":
      return "font-size-body-s";
    case "awsui-value-large":
      return "font-size-display-l";
    default:
      return `font-size-${fontSize}`;
  }
}
function getColorStyle(variant, color2) {
  return `color-${variant === "info" ? "normal" : color2}`;
}
var internal_default10 = InternalLink;

// node_modules/@cloudscape-design/components/status-indicator/internal.js
var import_react181 = __toESM(require_react());

// node_modules/@cloudscape-design/components/status-indicator/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/status-indicator/styles.scoped.css";
var styles_css_default61 = {
  "icon-shake": "awsui_icon-shake_1cbgc_12wag_153",
  "awsui-motion-shake-horizontally": "awsui_awsui-motion-shake-horizontally_1cbgc_12wag_1",
  "container-fade-in": "awsui_container-fade-in_1cbgc_12wag_181",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_1cbgc_12wag_1",
  "root": "awsui_root_1cbgc_12wag_203",
  "status-error": "awsui_status-error_1cbgc_12wag_212",
  "status-warning": "awsui_status-warning_1cbgc_12wag_215",
  "status-success": "awsui_status-success_1cbgc_12wag_218",
  "status-info": "awsui_status-info_1cbgc_12wag_221",
  "status-stopped": "awsui_status-stopped_1cbgc_12wag_224",
  "status-pending": "awsui_status-pending_1cbgc_12wag_227",
  "status-in-progress": "awsui_status-in-progress_1cbgc_12wag_230",
  "status-loading": "awsui_status-loading_1cbgc_12wag_233",
  "color-override-red": "awsui_color-override-red_1cbgc_12wag_236",
  "color-override-grey": "awsui_color-override-grey_1cbgc_12wag_239",
  "color-override-blue": "awsui_color-override-blue_1cbgc_12wag_242",
  "color-override-green": "awsui_color-override-green_1cbgc_12wag_245",
  "color-override-yellow": "awsui_color-override-yellow_1cbgc_12wag_248",
  "container": "awsui_container_1cbgc_12wag_181",
  "display-inline": "awsui_display-inline_1cbgc_12wag_252",
  "icon": "awsui_icon_1cbgc_12wag_153",
  "display-inline-block": "awsui_display-inline-block_1cbgc_12wag_260",
  "overflow-ellipsis": "awsui_overflow-ellipsis_1cbgc_12wag_269"
};

// node_modules/@cloudscape-design/components/status-indicator/internal.js
var typeToIcon2 = (size) => ({
  error: import_react181.default.createElement(internal_default, { name: "status-negative", size }),
  warning: import_react181.default.createElement(internal_default, { name: "status-warning", size }),
  success: import_react181.default.createElement(internal_default, { name: "status-positive", size }),
  info: import_react181.default.createElement(internal_default, { name: "status-info", size }),
  stopped: import_react181.default.createElement(internal_default, { name: "status-stopped", size }),
  pending: import_react181.default.createElement(internal_default, { name: "status-pending", size }),
  "in-progress": import_react181.default.createElement(internal_default, { name: "status-in-progress", size }),
  loading: import_react181.default.createElement(InternalSpinner, null)
});
function StatusIndicator(_a2) {
  var { type, children: children2, iconAriaLabel, colorOverride, wrapText = true, nativeAttributes, __animate = false, __internalRootRef, __size = "normal", __display = "inline-block" } = _a2, rest = __rest(_a2, ["type", "children", "iconAriaLabel", "colorOverride", "wrapText", "nativeAttributes", "__animate", "__internalRootRef", "__size", "__display"]);
  const baseProps = getBaseProps(rest);
  return import_react181.default.createElement(
    with_native_attributes_default,
    Object.assign({}, baseProps, { tag: "span", componentName: "StatusIndicator", nativeAttributes, className: clsx_m_default(styles_css_default61.root, styles_css_default61[`status-${type}`], {
      [styles_css_default61[`color-override-${colorOverride}`]]: colorOverride
    }, baseProps.className), ref: __internalRootRef }),
    import_react181.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default61.container, styles_css_default61[`display-${__display}`], wrapText === false && styles_css_default61["overflow-ellipsis"], __animate && styles_css_default61["container-fade-in"]) },
      import_react181.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default61.icon, __animate && styles_css_default61["icon-shake"]), "aria-label": iconAriaLabel, role: iconAriaLabel ? "img" : void 0 },
        typeToIcon2(__size)[type],
        __display === "inline" && import_react181.default.createElement(import_react181.default.Fragment, null, " ")
      ),
      children2
    )
  );
}

// node_modules/@cloudscape-design/components/internal/components/chart-status-container/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/chart-status-container/styles.scoped.css";
var styles_css_default62 = {
  "root": "awsui_root_11n0s_1s2zk_9",
  "empty": "awsui_empty_11n0s_1s2zk_13"
};

// node_modules/@cloudscape-design/components/internal/components/chart-status-container/index.js
function getChartStatus({ externalData, visibleData, statusType }) {
  const isEmpty = !visibleData || visibleData.length === 0;
  const isNoMatch = isEmpty && visibleData.length !== externalData.length;
  const showChart = statusType === "finished" && !isEmpty;
  return { isEmpty, isNoMatch, showChart };
}
function ChartStatusContainer({ statusType, errorText, loadingText, recoveryText, noMatch, empty, onRecoveryClick, isNoMatch, isEmpty, showChart }) {
  const i18n = useInternalI18n("[charts]");
  const statusContainer = (0, import_react182.useMemo)(() => {
    const handleRecoveryClick = (event) => {
      event.preventDefault();
      fireNonCancelableEvent(onRecoveryClick);
    };
    if (statusType === "error") {
      const renderedRecoveryText = i18n("recoveryText", recoveryText);
      return import_react182.default.createElement(
        "span",
        null,
        import_react182.default.createElement(StatusIndicator, { type: "error" }, i18n("errorText", errorText)),
        " ",
        !!renderedRecoveryText && !!onRecoveryClick && import_react182.default.createElement(internal_default10, { onFollow: handleRecoveryClick, variant: "recovery" }, renderedRecoveryText)
      );
    }
    if (statusType === "loading") {
      return import_react182.default.createElement(StatusIndicator, { type: "loading" }, i18n("loadingText", loadingText));
    }
    if (isNoMatch) {
      return import_react182.default.createElement("div", { className: styles_css_default62.empty }, noMatch);
    }
    if (isEmpty) {
      return import_react182.default.createElement("div", { className: styles_css_default62.empty }, empty);
    }
  }, [i18n, statusType, onRecoveryClick, isEmpty, isNoMatch, recoveryText, loadingText, errorText, empty, noMatch]);
  return import_react182.default.createElement(
    "div",
    { className: styles_css_default62.root },
    import_react182.default.createElement(internal_default2, null, !showChart && statusContainer)
  );
}

// node_modules/@cloudscape-design/components/internal/components/chart-wrapper/index.js
var import_react183 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-wrapper/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/chart-wrapper/styles.scoped.css";
var styles_css_default63 = {
  "wrapper": "awsui_wrapper_z5mul_rqo6_181",
  "wrapper--fit-height": "awsui_wrapper--fit-height_z5mul_rqo6_214",
  "inner-wrapper--fit-height": "awsui_inner-wrapper--fit-height_z5mul_rqo6_219",
  "has-default-filter": "awsui_has-default-filter_z5mul_rqo6_225",
  "content": "awsui_content_z5mul_rqo6_229",
  "content--reserve-filter": "awsui_content--reserve-filter_z5mul_rqo6_236",
  "content--reserve-legend": "awsui_content--reserve-legend_z5mul_rqo6_240",
  "content--fit-height": "awsui_content--fit-height_z5mul_rqo6_244",
  "filter-container": "awsui_filter-container_z5mul_rqo6_248"
};

// node_modules/@cloudscape-design/components/internal/components/chart-wrapper/index.js
var ChartWrapper = (0, import_react183.forwardRef)((_a2, ref) => {
  var { defaultFilter, additionalFilters, reserveFilterSpace, reserveLegendSpace, chartStatus, chart, legend, onBlur, contentClassName, contentMinHeight, fitHeight } = _a2, props2 = __rest(_a2, ["defaultFilter", "additionalFilters", "reserveFilterSpace", "reserveLegendSpace", "chartStatus", "chart", "legend", "onBlur", "contentClassName", "contentMinHeight", "fitHeight"]);
  const baseProps = getBaseProps(props2);
  const filtersNode = (defaultFilter || additionalFilters) && import_react183.default.createElement(
    InternalBox,
    { className: styles_css_default63["filter-container"], margin: { bottom: "l" } },
    import_react183.default.createElement(
      internal_default5,
      { size: "l", direction: "horizontal", className: clsx_m_default({ [styles_css_default63["has-default-filter"]]: !!defaultFilter }) },
      defaultFilter,
      additionalFilters
    )
  );
  const legendNode = legend && import_react183.default.createElement(InternalBox, { margin: { top: "m" } }, legend);
  if (fitHeight) {
    return import_react183.default.createElement(
      "div",
      Object.assign({ ref }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default63.wrapper, styles_css_default63["wrapper--fit-height"]), onBlur }),
      import_react183.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default63["inner-wrapper"], styles_css_default63["inner-wrapper--fit-height"]) },
        filtersNode,
        import_react183.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default63.content, contentClassName, {
            [styles_css_default63["content--reserve-filter"]]: reserveFilterSpace,
            [styles_css_default63["content--reserve-legend"]]: reserveLegendSpace,
            [styles_css_default63["content--fit-height"]]: true
          }) },
          chartStatus,
          chart
        ),
        legendNode
      )
    );
  }
  return import_react183.default.createElement(
    "div",
    Object.assign({ ref }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default63.wrapper), onBlur }),
    filtersNode,
    import_react183.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default63.content, contentClassName, {
        [styles_css_default63["content--reserve-filter"]]: reserveFilterSpace,
        [styles_css_default63["content--reserve-legend"]]: reserveLegendSpace
      }), style: { minHeight: contentMinHeight } },
      chartStatus,
      chart
    ),
    legendNode
  );
});

// node_modules/@cloudscape-design/components/area-chart/chart-container.js
var import_react218 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/axis-label.js
var import_react184 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/cartesian-chart/styles.scoped.css";
var styles_css_default64 = {
  "axis": "awsui_axis_f0fot_1tlqz_9",
  "vertical-marker": "awsui_vertical-marker_f0fot_1tlqz_10",
  "axis--emphasized": "awsui_axis--emphasized_f0fot_1tlqz_15",
  "axis-label": "awsui_axis-label_f0fot_1tlqz_19",
  "axis-label--x": "awsui_axis-label--x_f0fot_1tlqz_24",
  "axis-label--y": "awsui_axis-label--y_f0fot_1tlqz_25",
  "grid": "awsui_grid_f0fot_1tlqz_29",
  "ticks__line": "awsui_ticks__line_f0fot_1tlqz_34",
  "ticks__text": "awsui_ticks__text_f0fot_1tlqz_39",
  "ticks--y": "awsui_ticks--y_f0fot_1tlqz_44",
  "ticks--x": "awsui_ticks--x_f0fot_1tlqz_45",
  "ticks--bottom": "awsui_ticks--bottom_f0fot_1tlqz_49",
  "labels-inline-start": "awsui_labels-inline-start_f0fot_1tlqz_54",
  "ticks": "awsui_ticks_f0fot_1tlqz_34",
  "labels-inline-start__label": "awsui_labels-inline-start__label_f0fot_1tlqz_69",
  "labels-inline-start--hidden": "awsui_labels-inline-start--hidden_f0fot_1tlqz_73",
  "labels-block-end": "awsui_labels-block-end_f0fot_1tlqz_81",
  "vertical-marker-circle": "awsui_vertical-marker-circle_f0fot_1tlqz_92",
  "vertical-marker-circle-active": "awsui_vertical-marker-circle-active_f0fot_1tlqz_98",
  "focus-outline": "awsui_focus-outline_f0fot_1tlqz_103",
  "chart-container": "awsui_chart-container_f0fot_1tlqz_111",
  "fit-height": "awsui_fit-height_f0fot_1tlqz_116",
  "chart-container-outer": "awsui_chart-container-outer_f0fot_1tlqz_121",
  "has-filters": "awsui_has-filters_f0fot_1tlqz_127",
  "chart-container-inner": "awsui_chart-container-inner_f0fot_1tlqz_131",
  "chart-container-plot-wrapper": "awsui_chart-container-plot-wrapper_f0fot_1tlqz_138",
  "chart-container-plot": "awsui_chart-container-plot_f0fot_1tlqz_138",
  "chart-container-bottom-labels": "awsui_chart-container-bottom-labels_f0fot_1tlqz_150"
};

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/axis-label.js
var axis_label_default = (0, import_react184.memo)(AxisLabel);
function AxisLabel({ title, axis, position }) {
  if (!title) {
    return null;
  }
  return import_react184.default.createElement(
    InternalBox,
    { className: clsx_m_default(styles_css_default64["axis-label"], axis === "x" ? styles_css_default64["axis-label--x"] : styles_css_default64["axis-label--y"]), fontWeight: "bold", textAlign: position === "left" ? "left" : "center", margin: { bottom: position === "left" ? "l" : "n" } },
    import_react184.default.createElement("span", { "aria-hidden": "true" }, title)
  );
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/block-end-labels.js
var import_react185 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/constants.js
var TICK_LENGTH = 8;
var TICK_MARGIN = 4;
var TICK_LINE_HEIGHT = 16;
var X_TICK_COUNT_RATIO = 100;
var Y_TICK_COUNT_RATIO = 50;

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/label-utils.js
var SPACE_BETWEEN = 4;
function formatTicks({ ticks: ticks2, scale, getLabelSpace, tickFormatter }) {
  return ticks2.map((tick) => {
    var _a2;
    const position = (_a2 = scale.d3Scale(tick)) !== null && _a2 !== void 0 ? _a2 : NaN;
    const label = tickFormatter ? tickFormatter(tick) : tick.toString();
    const lines = (label + "").split("\n");
    return { position, lines, space: Math.max(...lines.map(getLabelSpace)) };
  });
}
function getVisibleTicks(ticks2, from, until, balanceTicks = false) {
  ticks2 = getTicksInRange(ticks2, from, until);
  return balanceTicks ? getReducedTicks(ticks2) : removeIntersections(ticks2);
}
function getTicksInRange(ticks2, from, until) {
  return ticks2.filter((tick) => from <= tick.position - tick.space / 2 && tick.position + tick.space / 2 <= until);
}
function getReducedTicks(ticks2) {
  const reduceLabelRatio = findReduceLabelRatio(ticks2);
  const reducedTicks = [];
  for (let index = 0; index < ticks2.length; index += reduceLabelRatio) {
    reducedTicks.push(ticks2[index]);
  }
  return reducedTicks;
}
function findReduceLabelRatio(ticks2, ratio = 1) {
  if (ratio >= ticks2.length) {
    return ratio;
  }
  for (let i2 = ratio; i2 < ticks2.length; i2 += ratio) {
    if (hasIntersection(ticks2[i2 - ratio], ticks2[i2])) {
      return findReduceLabelRatio(ticks2, ratio + 1);
    }
  }
  return ratio;
}
function removeIntersections(ticks2) {
  const visibleTicks = [];
  let prevTick = null;
  for (const tick of ticks2) {
    if (!prevTick || !hasIntersection(prevTick, tick)) {
      visibleTicks.push(tick);
      prevTick = tick;
    }
  }
  return visibleTicks;
}
function hasIntersection(a4, b2) {
  const [left, right] = a4.position < b2.position ? [a4, b2] : [b2, a4];
  const leftEdge = left.position + left.space / 2 + SPACE_BETWEEN;
  const rightEdge = right.position - right.space / 2;
  return leftEdge > rightEdge;
}
function getSVGTextSize(element) {
  if (element && element.getBBox) {
    return element.getBBox();
  }
  return void 0;
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/block-end-labels.js
function useBLockEndLabels({ ticks: ticks2, scale, tickFormatter }) {
  const virtualTextRef = (0, import_react185.useRef)(null);
  const cacheRef = (0, import_react185.useRef)({});
  const getLabelSpace = (label) => {
    if (cacheRef.current[label] !== void 0 && cacheRef.current[label] !== 0) {
      return cacheRef.current[label];
    }
    if (virtualTextRef.current && virtualTextRef.current.getComputedTextLength) {
      virtualTextRef.current.textContent = label;
      cacheRef.current[label] = virtualTextRef.current.getComputedTextLength();
      return cacheRef.current[label];
    }
    return 0;
  };
  const formattedTicks = formatTicks({ ticks: ticks2, scale, getLabelSpace, tickFormatter });
  if (virtualTextRef.current) {
    virtualTextRef.current.textContent = "";
  }
  let height = TICK_LENGTH + TICK_MARGIN;
  for (const { lines } of formattedTicks) {
    height = Math.max(height, TICK_LENGTH + TICK_MARGIN + lines.length * TICK_LINE_HEIGHT);
  }
  return { virtualTextRef, formattedTicks, height };
}
var block_end_labels_default = (0, import_react185.memo)(BlockEndLabels);
function BlockEndLabels({ axis = "x", width, height, scale, title, ariaRoleDescription, offsetLeft = 0, offsetRight = 0, virtualTextRef, formattedTicks, isRTL = false }) {
  const i18n = useInternalI18n("[charts]");
  const xOffset = scale.isCategorical() && axis === "x" ? Math.max(0, scale.d3Scale.bandwidth() - 1) / 2 : 0;
  const offsetInlineStart = isRTL ? offsetRight : offsetLeft;
  const offsetInlineEnd = isRTL ? offsetLeft : offsetRight;
  const from = 0 - offsetInlineStart - xOffset;
  const until = width + offsetInlineEnd - xOffset;
  const balanceLabels = axis === "x" && scale.scaleType !== "log";
  const visibleTicks = getVisibleTicks(formattedTicks, from, until, balanceLabels);
  return import_react185.default.createElement(
    "g",
    { transform: `translate(0,${height})`, className: styles_css_default64["labels-block-end"], "aria-label": title, role: "list", "aria-roledescription": i18n("i18nStrings.chartAriaRoleDescription", ariaRoleDescription), "aria-hidden": true },
    visibleTicks.map(({ position, lines }, index) => isFinite(position) && import_react185.default.createElement(
      "g",
      { key: index, transform: `translate(${position + xOffset},0)`, className: clsx_m_default(styles_css_default64.ticks, styles_css_default64["ticks--bottom"], {
        [styles_css_default64["ticks--x"]]: axis === "x",
        [styles_css_default64["ticks--y"]]: axis === "y"
      }), role: "listitem", "aria-label": lines.join("\n") },
      import_react185.default.createElement("line", { className: styles_css_default64.ticks__line, x1: 0, x2: 0, y1: 0, y2: TICK_LENGTH, "aria-hidden": "true" }),
      lines.map((line, lineIndex) => import_react185.default.createElement("text", { className: styles_css_default64.ticks__text, key: lineIndex, x: 0, y: TICK_LENGTH + TICK_MARGIN + lineIndex * TICK_LINE_HEIGHT }, line))
    )),
    import_react185.default.createElement("text", { ref: virtualTextRef, x: 0, y: 0, style: { visibility: "hidden" }, "aria-hidden": "true" })
  );
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/chart-container.js
var import_react186 = __toESM(require_react());
var CONTENT_MIN_HEIGHT_BOUNDARY = 40;
var CartesianChartContainer = (0, import_react186.forwardRef)(({ minHeight, fitHeight, leftAxisLabel, leftAxisLabelMeasure, bottomAxisLabel, chartPlot, popover, hasFilters }, ref) => {
  if (fitHeight) {
    return import_react186.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default64["chart-container"], styles_css_default64["fit-height"]), ref },
      leftAxisLabel,
      import_react186.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default64["chart-container-outer"], styles_css_default64["fit-height"], hasFilters && styles_css_default64["has-filters"]) },
        leftAxisLabelMeasure,
        import_react186.default.createElement(
          "div",
          { className: styles_css_default64["chart-container-inner"] },
          import_react186.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default64["chart-container-plot-wrapper"], styles_css_default64["fit-height"]), style: { minHeight: Math.max(minHeight, CONTENT_MIN_HEIGHT_BOUNDARY) } },
            import_react186.default.createElement("div", { className: clsx_m_default(styles_css_default64["chart-container-plot"], styles_css_default64["fit-height"]) }, chartPlot)
          ),
          import_react186.default.createElement("div", { className: clsx_m_default(styles_css_default64["chart-container-bottom-labels"], styles_css_default64["fit-height"]) }, bottomAxisLabel)
        ),
        popover
      )
    );
  }
  return import_react186.default.createElement(
    "div",
    { className: styles_css_default64["chart-container"], ref },
    leftAxisLabel,
    import_react186.default.createElement(
      "div",
      { className: styles_css_default64["chart-container-outer"] },
      leftAxisLabelMeasure,
      import_react186.default.createElement(
        "div",
        { className: styles_css_default64["chart-container-inner"] },
        chartPlot,
        bottomAxisLabel
      ),
      popover
    )
  );
});

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/emphasized-baseline.js
var import_react187 = __toESM(require_react());
var emphasized_baseline_default = (0, import_react187.memo)(EmphasizedBaseline);
function EmphasizedBaseline({ axis = "x", width, height, scale }) {
  var _a2;
  const baselineY = (_a2 = scale.d3Scale(0)) !== null && _a2 !== void 0 ? _a2 : NaN;
  const showYBaseline = axis === "x" && isFinite(baselineY) && baselineY <= height;
  if (showYBaseline) {
    return import_react187.default.createElement("line", { className: clsx_m_default(styles_css_default64.axis, styles_css_default64["axis--emphasized"]), x1: -TICK_MARGIN, x2: width, y1: baselineY, y2: baselineY, "aria-hidden": "true" });
  }
  if (axis === "y") {
    return import_react187.default.createElement("line", { className: clsx_m_default(styles_css_default64.axis, styles_css_default64["axis--emphasized"]), x1: 0, y1: 0, x2: 0, y2: height + TICK_LENGTH, "aria-hidden": "true" });
  }
  return null;
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/inline-start-labels.js
var import_react189 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/responsive-text/index.js
var import_react188 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/responsive-text/responsive-text-utils.js
function getTextWidth(textNode) {
  if (textNode.getComputedTextLength) {
    return textNode.getComputedTextLength();
  }
  return -1;
}

// node_modules/@cloudscape-design/components/internal/components/responsive-text/index.js
var responsive_text_default = (0, import_react188.memo)(ResponsiveText);
function ResponsiveText({ x: x3, y: y4, className: className2, children: children2, maxWidth }) {
  const textRef = (0, import_react188.useRef)(null);
  (0, import_react188.useEffect)(() => {
    const isRtl = getIsRtl(textRef.current);
    renderTextContent(textRef.current, children2, maxWidth, isRtl);
  }, [maxWidth, children2]);
  return import_react188.default.createElement("text", { ref: textRef, x: x3, y: y4, style: { textAnchor: "end" }, className: className2 }, children2);
}
function renderTextContent(textNode, text, maxWidth, isRtl) {
  let visibleLength = text.length;
  while (visibleLength >= 0) {
    textNode.textContent = truncateText(text, visibleLength, isRtl);
    if (getTextWidth(textNode) <= maxWidth) {
      return;
    } else {
      visibleLength--;
    }
  }
}
function truncateText(text, maxLength, isRtl) {
  if (text.length === maxLength) {
    return text;
  }
  if (isRtl) {
    return text.slice(text.length - maxLength) + "…";
  }
  return text.slice(0, maxLength) + "…";
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/inline-start-labels.js
var OFFSET_PX = 12;
var inline_start_labels_default = (0, import_react189.memo)(InlineStartLabels);
function InlineStartLabels({ axis = "y", plotWidth, plotHeight, maxLabelsWidth = Number.POSITIVE_INFINITY, scale, ticks: ticks2, tickFormatter, title, ariaRoleDescription }) {
  const i18n = useInternalI18n("[charts]");
  const virtualTextRef = (0, import_react189.useRef)(null);
  const yOffset = axis === "x" && scale.isCategorical() ? Math.max(0, scale.d3Scale.bandwidth() - 1) / 2 : 0;
  const labelToBoxCache = (0, import_react189.useRef)({});
  const getLabelSpace = (label) => {
    var _a2, _b, _c, _d;
    if (labelToBoxCache.current[label] !== void 0) {
      return (_b = (_a2 = labelToBoxCache.current[label]) === null || _a2 === void 0 ? void 0 : _a2.height) !== null && _b !== void 0 ? _b : 0;
    }
    if (virtualTextRef.current) {
      virtualTextRef.current.textContent = label;
    }
    labelToBoxCache.current[label] = getSVGTextSize(virtualTextRef.current);
    return (_d = (_c = labelToBoxCache.current[label]) === null || _c === void 0 ? void 0 : _c.height) !== null && _d !== void 0 ? _d : 0;
  };
  const formattedTicks = formatTicks({ ticks: ticks2, scale, getLabelSpace, tickFormatter });
  if (virtualTextRef.current) {
    virtualTextRef.current.textContent = "";
  }
  const from = 0 - OFFSET_PX - yOffset;
  const until = plotHeight + OFFSET_PX - yOffset;
  const visibleTicks = getVisibleTicks(formattedTicks, from, until);
  const isRtl = virtualTextRef.current ? getIsRtl(virtualTextRef.current) : false;
  return import_react189.default.createElement(
    "g",
    { className: styles_css_default64["labels-inline-start"], "aria-label": title, role: "list", "aria-roledescription": i18n("i18nStrings.chartAriaRoleDescription", ariaRoleDescription), "aria-hidden": true },
    visibleTicks.map(({ position, lines }, index) => isFinite(position) && import_react189.default.createElement(
      "g",
      { key: index, role: "listitem", transform: `translate(0,${position + yOffset})`, className: clsx_m_default(styles_css_default64.ticks, axis === "x" ? styles_css_default64["ticks--x"] : styles_css_default64["ticks--y"]) },
      axis === "y" && import_react189.default.createElement("line", { className: clsx_m_default(styles_css_default64.grid, styles_css_default64.ticks_line), x1: -TICK_LENGTH, y1: 0, x2: plotWidth, y2: 0, "aria-hidden": "true" }),
      lines.map((line, lineIndex) => {
        var _a2, _b;
        const x3 = -(TICK_LENGTH + TICK_MARGIN);
        const lineTextProps = {
          x: !isRtl ? x3 : plotWidth - x3,
          y: (lineIndex - (lines.length - 1) * 0.5) * TICK_LINE_HEIGHT,
          className: styles_css_default64.ticks__text,
          children: line
        };
        return ((_b = (_a2 = labelToBoxCache.current[lines[0]]) === null || _a2 === void 0 ? void 0 : _a2.width) !== null && _b !== void 0 ? _b : 0) > maxLabelsWidth ? import_react189.default.createElement(responsive_text_default, Object.assign({ key: lineIndex }, lineTextProps, { maxWidth: maxLabelsWidth })) : import_react189.default.createElement("text", Object.assign({ key: lineIndex }, lineTextProps));
      })
    )),
    import_react189.default.createElement("text", { ref: virtualTextRef, x: 0, y: 0, style: { visibility: "hidden" }, "aria-hidden": "true" })
  );
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/labels-measure.js
var import_react190 = __toESM(require_react());
var labels_measure_default = (0, import_react190.memo)(LabelsMeasure);
function LabelsMeasure({ scale, ticks: ticks2, tickFormatter, autoWidth, maxLabelsWidth }) {
  const [width, ref] = useContainerQuery((rect) => rect.contentBoxWidth);
  (0, import_react190.useEffect)(() => {
    autoWidth(width || 0);
  }, [autoWidth, width]);
  const labelMapper = (value) => {
    const scaledValue = scale.d3Scale(value);
    if (scaledValue === void 0 || !isFinite(scaledValue)) {
      return null;
    }
    const formattedValue = tickFormatter ? tickFormatter(value) : value.toString();
    const lines = (formattedValue + "").split("\n");
    return import_react190.default.createElement(import_react190.Fragment, { key: `${value}` }, lines.map((line, lineIndex) => import_react190.default.createElement("div", { key: lineIndex, className: styles_css_default64["labels-inline-start__label"], "aria-hidden": "true" }, line)));
  };
  return import_react190.default.createElement("div", { ref, className: clsx_m_default(styles_css_default64["labels-inline-start"], styles_css_default64["labels-inline-start--hidden"]), style: { maxWidth: maxLabelsWidth } }, ticks2.map(labelMapper));
}

// node_modules/@cloudscape-design/components/internal/components/chart-plot/index.js
var import_react193 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-plot/application-controller.js
var import_react191 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-plot/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/chart-plot/styles.scoped.css";
var styles_css_default65 = {
  "root": "awsui_root_1fcus_5bfgt_145",
  "clickable": "awsui_clickable_1fcus_5bfgt_154",
  "precise": "awsui_precise_1fcus_5bfgt_158",
  "focus-outline": "awsui_focus-outline_1fcus_5bfgt_162",
  "application": "awsui_application_1fcus_5bfgt_171"
};

// node_modules/@cloudscape-design/components/internal/components/chart-plot/application-controller.js
var application_controller_default = (0, import_react191.forwardRef)(ApplicationController);
function ApplicationController({ activeElementKey, activeElementRef, onFocus, onBlur, onKeyDown }, ref) {
  const containerRef = (0, import_react191.useRef)(null);
  const applicationRef = (0, import_react191.useRef)(null);
  const focusTransitionRef = (0, import_react191.useRef)(false);
  const [isFocused, setFocused] = (0, import_react191.useState)(false);
  const onApplicationFocus = (0, import_react191.useCallback)((event) => {
    if (focusTransitionRef.current === false) {
      setFocused(true);
      onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);
    } else {
      focusTransitionRef.current = false;
    }
  }, [onFocus]);
  const onApplicationBlur = (0, import_react191.useCallback)((event) => {
    if (focusTransitionRef.current === false) {
      setFocused(false);
      onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);
      muteApplication(applicationRef.current);
    }
  }, [onBlur]);
  const onApplicationKeyDown = onKeyDown;
  (0, import_react191.useImperativeHandle)(ref, () => ({
    focus: () => focusApplication(applicationRef.current, (activeElementRef === null || activeElementRef === void 0 ? void 0 : activeElementRef.current) || null)
  }), [activeElementRef]);
  (0, import_react191.useEffect)(() => {
    if (!isFocused || focusTransitionRef.current === true) {
      return;
    }
    focusTransitionRef.current = true;
    containerRef.current.removeChild(applicationRef.current);
    containerRef.current.appendChild(applicationRef.current);
    focusApplication(applicationRef.current, (activeElementRef === null || activeElementRef === void 0 ? void 0 : activeElementRef.current) || null);
  }, [isFocused, activeElementKey, activeElementRef]);
  return import_react191.default.createElement(
    "g",
    { ref: containerRef },
    import_react191.default.createElement("g", { tabIndex: -1, ref: applicationRef, onFocus: onApplicationFocus, onBlur: onApplicationBlur, onKeyDown: onApplicationKeyDown, className: styles_css_default65.application })
  );
}
function focusApplication(app, target) {
  for (const attributeName of app.getAttributeNames()) {
    if (attributeName === "role" || attributeName.slice(0, 4) === "aria") {
      app.removeAttribute(attributeName);
    }
  }
  if (target) {
    for (const attributeName of target.getAttributeNames()) {
      if (attributeName === "role" || attributeName.slice(0, 4) === "aria") {
        const attributeValue = target.getAttribute(attributeName);
        if (attributeValue) {
          app.setAttribute(attributeName, attributeValue);
        }
      }
    }
  }
  app.tabIndex = 0;
  app.setAttribute("focusable", "true");
  app.setAttribute("aria-hidden", "false");
  app.focus({ preventScroll: true });
}
function muteApplication(app) {
  for (const attributeName of app.getAttributeNames()) {
    if (attributeName === "role" || attributeName.slice(0, 4) === "aria") {
      app.removeAttribute(attributeName);
    }
  }
  app.tabIndex = -1;
  app.setAttribute("focusable", "false");
  app.setAttribute("aria-hidden", "true");
}

// node_modules/@cloudscape-design/components/internal/components/chart-plot/focus-outline.js
var import_react192 = __toESM(require_react());
function useFocusVisibleState() {
  const [focusVisible, setFocusVisible] = (0, import_react192.useState)(false);
  (0, import_react192.useEffect)(() => {
    function handleMousedown2() {
      return setFocusVisible(false);
    }
    function handleKeydown2(event) {
      if (!isModifierKey(event)) {
        setFocusVisible(true);
      }
    }
    const controller = new AbortController();
    document.addEventListener("mousedown", handleMousedown2, { signal: controller.signal });
    document.addEventListener("keydown", handleKeydown2, { signal: controller.signal });
    return () => {
      controller.abort();
    };
  });
  return focusVisible;
}
function FocusOutline({ elementKey, elementRef, offset = 0 }) {
  const ref = (0, import_react192.useRef)(null);
  const focusVisible = useFocusVisibleState();
  (0, import_react192.useEffect)(() => {
    if (!ref.current) {
      return;
    }
    if (focusVisible && elementKey && elementRef && elementRef.current && elementRef.current.getBBox) {
      const element = elementRef.current.getBBox();
      showOutline(ref.current, element, offset);
    } else {
      hideOutline(ref.current);
    }
  }, [focusVisible, elementKey, elementRef, offset]);
  return import_react192.default.createElement("rect", { ref, "aria-hidden": "true", className: styles_css_default65["focus-outline"], rx: "2" });
}
function showOutline(el, position, offset) {
  const offsetX = typeof offset === "number" ? offset : offset.x;
  const offsetY = typeof offset === "number" ? offset : offset.y;
  el.setAttribute("x", (position.x - offsetX).toString());
  el.setAttribute("y", (position.y - offsetY).toString());
  el.setAttribute("width", (position.width + 2 * offsetX).toString());
  el.setAttribute("height", (position.height + 2 * offsetY).toString());
  el.style.visibility = "visible";
}
function hideOutline(el) {
  el.style.visibility = "hidden";
  el.removeAttribute("x");
  el.removeAttribute("y");
  el.removeAttribute("width");
  el.removeAttribute("height");
}

// node_modules/@cloudscape-design/components/internal/components/chart-plot/index.js
var DEFAULT_PLOT_FOCUS_OFFSET = 3;
var DEFAULT_ELEMENT_FOCUS_OFFSET = 3;
var chart_plot_default = (0, import_react193.forwardRef)(ChartPlot);
function ChartPlot({ width, height, transform, offsetTop, offsetBottom, offsetLeft, offsetRight, ariaLabel, ariaLabelledby, ariaRoleDescription, ariaDescription, ariaDescribedby, activeElementKey, activeElementRef, ariaLiveRegion, isClickable, isPrecise, children: children2, onClick, onKeyDown, focusOffset = DEFAULT_PLOT_FOCUS_OFFSET, activeElementFocusOffset = DEFAULT_ELEMENT_FOCUS_OFFSET, onMouseMove, onMouseOut, onApplicationBlur, onApplicationFocus }, ref) {
  const i18n = useInternalI18n("[charts]");
  const svgRef = (0, import_react193.useRef)(null);
  const applicationRef = (0, import_react193.useRef)(null);
  const plotClickedRef = (0, import_react193.useRef)(false);
  const [isPlotFocused, setPlotFocused] = (0, import_react193.useState)(false);
  const [isApplicationFocused, setApplicationFocused] = (0, import_react193.useState)(false);
  const internalDescriptionId = useUniqueId("awsui-chart-plot__description");
  const ariaDescriptionId = [ariaDescription && internalDescriptionId, ariaDescribedby].filter(Boolean).join(" ");
  (0, import_react193.useImperativeHandle)(ref, () => ({
    svg: svgRef.current,
    focusPlot: () => svgRef.current.focus(),
    focusApplication: () => applicationRef.current.focus()
  }));
  const onPlotMouseDown = () => {
    plotClickedRef.current = true;
  };
  const onPlotFocus = (event) => {
    if (plotClickedRef.current || !!activeElementKey) {
      applicationRef.current.focus();
    } else if (event.target === svgRef.current) {
      setPlotFocused(true);
    }
  };
  const onPlotBlur = (event) => {
    if (event.target === svgRef.current) {
      setPlotFocused(false);
    }
  };
  const onPlotKeyDown = (event) => {
    if (isPlotFocused) {
      const codes = [KeyCode2.space, KeyCode2.enter, KeyCode2.up, KeyCode2.left, KeyCode2.right, KeyCode2.down];
      if (codes.indexOf(event.keyCode) !== -1) {
        applicationRef.current.focus();
      }
    }
  };
  const onPlotApplicationFocus = (event) => {
    onApplicationFocus === null || onApplicationFocus === void 0 ? void 0 : onApplicationFocus(event, plotClickedRef.current ? "mouse" : "keyboard");
    plotClickedRef.current = false;
    setApplicationFocused(true);
  };
  const onPlotApplicationBlur = (event) => {
    onApplicationBlur === null || onApplicationBlur === void 0 ? void 0 : onApplicationBlur(event);
    setApplicationFocused(false);
  };
  const onApplicationKeyDown = onKeyDown;
  const plotFocusable = !isApplicationFocused;
  const plotTabIndex = plotFocusable ? 0 : -1;
  const plotAria = !isApplicationFocused ? {
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    "aria-describedby": ariaDescriptionId,
    "aria-roledescription": i18n("i18nStrings.chartAriaRoleDescription", ariaRoleDescription)
  } : {};
  return import_react193.default.createElement(
    import_react193.default.Fragment,
    null,
    import_react193.default.createElement(
      "svg",
      Object.assign({ onMouseMove, onMouseOut, focusable: plotFocusable, tabIndex: plotTabIndex, role: "application", "aria-hidden": "false" }, plotAria, { ref: svgRef, style: {
        width,
        height,
        marginTop: offsetTop,
        marginBottom: offsetBottom,
        marginLeft: offsetLeft,
        marginRight: offsetRight
      }, className: clsx_m_default(styles_css_default65.root, {
        [styles_css_default65.clickable]: isClickable,
        [styles_css_default65.precise]: isPrecise
      }), onMouseDown: onPlotMouseDown, onClick, onFocus: onPlotFocus, onBlur: onPlotBlur, onKeyDown: onPlotKeyDown }),
      import_react193.default.createElement(FocusOutline, { elementRef: svgRef, elementKey: isPlotFocused, offset: focusOffset }),
      import_react193.default.createElement(
        "g",
        { transform },
        import_react193.default.createElement(application_controller_default, { activeElementKey: isApplicationFocused && activeElementKey || null, activeElementRef, ref: applicationRef, onFocus: onPlotApplicationFocus, onBlur: onPlotApplicationBlur, onKeyDown: onApplicationKeyDown }),
        ariaDescription && plotFocusable && import_react193.default.createElement("desc", { "aria-hidden": "true", id: internalDescriptionId }, ariaDescription),
        children2,
        import_react193.default.createElement(FocusOutline, { elementRef: activeElementRef, elementKey: isApplicationFocused && activeElementKey, offset: activeElementFocusOffset })
      )
    ),
    import_react193.default.createElement(internal_default2, { hidden: true, tagName: "span" }, ariaLiveRegion)
  );
}

// node_modules/@cloudscape-design/components/area-chart/async-store/index.js
var import_react194 = __toESM(require_react());
var import_react_dom8 = __toESM(require_react_dom());
var AsyncStore = class {
  constructor(state) {
    this._listeners = [];
    this._state = state;
  }
  get() {
    return this._state;
  }
  set(cb) {
    const prevState = this._state;
    const newState = cb(prevState);
    this._state = newState;
    (0, import_react_dom8.unstable_batchedUpdates)(() => {
      for (const [selector, listener] of this._listeners) {
        if (selector(prevState) !== selector(newState)) {
          listener(newState, prevState);
        }
      }
    });
  }
  subscribe(selector, listener) {
    this._listeners.push([selector, listener]);
    return () => this.unsubscribe(listener);
  }
  unsubscribe(listener) {
    for (let index = 0; index < this._listeners.length; index++) {
      const [, storedListener] = this._listeners[index];
      if (storedListener === listener) {
        this._listeners.splice(index, 1);
        break;
      }
    }
  }
};
function useReaction(store, selector, effect) {
  (0, import_react194.useLayoutEffect)(
    () => {
      const unsubscribe = store.subscribe(selector, (newState, prevState) => effect(selector(newState), selector(prevState)));
      return unsubscribe;
    },
    // ignoring selector and effect as they are expected to stay constant
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [store]
  );
}
function useSelector(store, selector) {
  const [state, setState] = (0, import_react194.useState)(selector(store.get()));
  useReaction(store, selector, (newState) => {
    setState(newState);
  });
  const prevStore = usePrevious(store);
  if (prevStore !== null && prevStore !== store) {
    return selector(store.get());
  }
  return state;
}

// node_modules/@cloudscape-design/components/area-chart/elements/chart-popover.js
var import_react210 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-popover/index.js
var import_react195 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-popover/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/chart-popover/styles.scoped.css";
var styles_css_default66 = {
  "root": "awsui_root_1t44z_1wh64_145",
  "popover-body": "awsui_popover-body_1t44z_1wh64_178",
  "footer": "awsui_footer_1t44z_1wh64_182"
};

// node_modules/@cloudscape-design/components/internal/components/chart-popover/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/chart-popover/test-classes/styles.scoped.css";
var styles_css_default67 = {
  "header": "awsui_header_dgs8z_qsmmj_5",
  "body": "awsui_body_dgs8z_qsmmj_6",
  "footer": "awsui_footer_dgs8z_qsmmj_7"
};

// node_modules/@cloudscape-design/components/internal/components/chart-popover/index.js
var chart_popover_default = import_react195.default.forwardRef(ChartPopover);
function ChartPopover(_a2, ref) {
  var { position = "right", size = "medium", fixedWidth = false, dismissButton: dismissButton3 = false, dismissAriaLabel, children: children2, footer, title, trackRef, getTrack, trackKey, onDismiss, container, minVisibleBlockSize, onMouseEnter, onMouseLeave, onBlur } = _a2, restProps = __rest(_a2, ["position", "size", "fixedWidth", "dismissButton", "dismissAriaLabel", "children", "footer", "title", "trackRef", "getTrack", "trackKey", "onDismiss", "container", "minVisibleBlockSize", "onMouseEnter", "onMouseLeave", "onBlur"]);
  const baseProps = getBaseProps(restProps);
  const popoverObjectRef = (0, import_react195.useRef)(null);
  const popoverRef = useMergeRefs(popoverObjectRef, ref);
  (0, import_react195.useEffect)(() => {
    const onDocumentClick = (event) => {
      if (event.target && !nodeBelongs2(popoverObjectRef.current, event.target) && // click not in popover
      !nodeContains(container, event.target)) {
        onDismiss(true);
      }
    };
    document.addEventListener("mousedown", onDocumentClick, { capture: true });
    return () => {
      document.removeEventListener("mousedown", onDocumentClick, { capture: true });
    };
  }, [container, onDismiss]);
  const isPinned = dismissButton3;
  return import_react195.default.createElement(
    "div",
    Object.assign({}, baseProps, {
      className: clsx_m_default(styles_css_default2.root, styles_css_default66.root, baseProps.className),
      ref: popoverRef,
      onMouseEnter,
      onMouseLeave,
      onBlur,
      // The tabIndex makes it so that clicking inside popover assigns this element as blur target.
      // That is necessary in charts to ensure the blur target is within the chart and no cleanup is needed.
      tabIndex: -1
    }),
    import_react195.default.createElement(
      PopoverContainer,
      { size, fixedWidth, position, trackRef, getTrack, trackKey, minVisibleBlockSize, arrow: (position2) => import_react195.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default2.arrow, styles_css_default2[`arrow-position-${position2}`]) },
        import_react195.default.createElement("div", { className: styles_css_default2["arrow-outer"] }),
        import_react195.default.createElement("div", { className: styles_css_default2["arrow-inner"] })
      ), keepPosition: true, allowVerticalOverflow: true, allowScrollToFit: isPinned, hoverArea: true },
      import_react195.default.createElement(
        PopoverBody,
        { dismissButton: dismissButton3, dismissAriaLabel, header: import_react195.default.createElement("span", { className: styles_css_default67.header }, title), onDismiss, overflowVisible: "content", className: styles_css_default66["popover-body"], variant: "chart" },
        import_react195.default.createElement("div", { className: styles_css_default67.body }, children2),
        footer && import_react195.default.createElement("div", { className: clsx_m_default(styles_css_default67.footer, styles_css_default66.footer) }, footer)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/internal/components/chart-series-details/index.js
var import_react209 = __toESM(require_react());

// node_modules/@cloudscape-design/components/expandable-section/internal.js
var import_react207 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-series-details/series-details-text.js
var screenReaderTextClass = "awsui-screenreader-text";
function getSeriesDetailsText(element) {
  const elementsWithText = Array.from(element.querySelectorAll(`.${screenReaderTextClass}`));
  return elementsWithText.map((element2) => {
    var _a2;
    if (element2 instanceof HTMLElement) {
      return (_a2 = element2.innerText) === null || _a2 === void 0 ? void 0 : _a2.split("\n").map((s4) => s4.trim()).join(" ").trim();
    }
  }).filter(Boolean).join(", ");
}

// node_modules/@cloudscape-design/components/expandable-section/expandable-section-container.js
var import_react201 = __toESM(require_react());

// node_modules/@cloudscape-design/components/container/internal.js
var import_react198 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/context/container-header.js
var import_react196 = __toESM(require_react());
var ContainerHeaderContext = (0, import_react196.createContext)({ isInContainer: false });
var ContainerHeaderContextProvider = ({ children: children2 }) => {
  return import_react196.default.createElement(ContainerHeaderContext.Provider, { value: { isInContainer: true } }, children2);
};
var useContainerHeader = () => {
  const { isInContainer } = (0, import_react196.useContext)(ContainerHeaderContext);
  return isInContainer;
};

// node_modules/@cloudscape-design/components/container/style.js
function getRootStyles(style) {
  var _a2, _b, _c, _d, _e;
  let properties2 = {};
  if (SYSTEM === "core" && (style === null || style === void 0 ? void 0 : style.root)) {
    properties2 = {
      background: (_a2 = style.root) === null || _a2 === void 0 ? void 0 : _a2.background,
      borderColor: (_b = style.root) === null || _b === void 0 ? void 0 : _b.borderColor,
      borderRadius: (_c = style.root) === null || _c === void 0 ? void 0 : _c.borderRadius,
      borderWidth: (_d = style.root) === null || _d === void 0 ? void 0 : _d.borderWidth,
      boxShadow: (_e = style.root) === null || _e === void 0 ? void 0 : _e.boxShadow
    };
  }
  return properties2;
}
function getContentStyles(style) {
  var _a2, _b;
  let properties2 = {};
  if (SYSTEM === "core" && (style === null || style === void 0 ? void 0 : style.content)) {
    properties2 = {
      paddingBlock: (_a2 = style.content) === null || _a2 === void 0 ? void 0 : _a2.paddingBlock,
      paddingInline: (_b = style.content) === null || _b === void 0 ? void 0 : _b.paddingInline
    };
  }
  return properties2;
}
function getHeaderStyles(style) {
  var _a2, _b, _c, _d, _e, _f;
  let properties2 = {};
  if (SYSTEM === "core" && (style === null || style === void 0 ? void 0 : style.header)) {
    properties2 = Object.assign(Object.assign(Object.assign({}, ((_a2 = style === null || style === void 0 ? void 0 : style.root) === null || _a2 === void 0 ? void 0 : _a2.background) && { background: (_b = style === null || style === void 0 ? void 0 : style.root) === null || _b === void 0 ? void 0 : _b.background }), ((_c = style === null || style === void 0 ? void 0 : style.root) === null || _c === void 0 ? void 0 : _c.borderRadius) && { background: (_d = style === null || style === void 0 ? void 0 : style.root) === null || _d === void 0 ? void 0 : _d.borderRadius }), { paddingBlock: (_e = style.header) === null || _e === void 0 ? void 0 : _e.paddingBlock, paddingInline: (_f = style.header) === null || _f === void 0 ? void 0 : _f.paddingInline });
  }
  return properties2;
}
function getFooterStyles(style) {
  var _a2, _b, _c, _d, _e, _f, _g, _h;
  let properties2 = {};
  if (SYSTEM === "core" && (style === null || style === void 0 ? void 0 : style.footer)) {
    properties2 = {
      borderColor: (_b = (_a2 = style.footer) === null || _a2 === void 0 ? void 0 : _a2.divider) === null || _b === void 0 ? void 0 : _b.borderColor,
      borderWidth: (_d = (_c = style.footer) === null || _c === void 0 ? void 0 : _c.divider) === null || _d === void 0 ? void 0 : _d.borderWidth,
      paddingBlock: (_f = (_e = style.footer) === null || _e === void 0 ? void 0 : _e.root) === null || _f === void 0 ? void 0 : _f.paddingBlock,
      paddingInline: (_h = (_g = style.footer) === null || _g === void 0 ? void 0 : _g.root) === null || _h === void 0 ? void 0 : _h.paddingInline
    };
  }
  return properties2;
}
function getMediaStyles(mediaPosition, style) {
  var _a2, _b;
  let properties2 = {};
  if (SYSTEM === "core" && ((_a2 = style === null || style === void 0 ? void 0 : style.root) === null || _a2 === void 0 ? void 0 : _a2.borderRadius)) {
    properties2 = Object.assign(Object.assign({ borderRadius: (_b = style === null || style === void 0 ? void 0 : style.root) === null || _b === void 0 ? void 0 : _b.borderRadius }, mediaPosition === "top" && { borderEndStartRadius: "0px", borderEndEndRadius: "0px" }), mediaPosition === "side" && { borderStartEndRadius: "0px", borderEndEndRadius: "0px" });
  }
  return properties2;
}

// node_modules/@cloudscape-design/components/container/use-sticky-header.js
var import_react197 = __toESM(require_react());
function computeOffset({ isMobile, __stickyOffset, __mobileStickyOffset, hasInnerOverflowParents, __additionalOffset }) {
  const localOffset = isMobile ? (__stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : 0) - (__mobileStickyOffset !== null && __mobileStickyOffset !== void 0 ? __mobileStickyOffset : 0) : __stickyOffset !== null && __stickyOffset !== void 0 ? __stickyOffset : 0;
  if (hasInnerOverflowParents || __stickyOffset !== void 0) {
    return `${localOffset}px`;
  }
  const globalOffset = `var(${global_vars_default.stickyVerticalTopOffset}, 0px)`;
  return `calc(${globalOffset} + ${localOffset}px + ${__additionalOffset ? spaceScaledS : "0px"})`;
}
var StickyHeaderContext = (0, import_react197.createContext)({
  isStuck: false,
  isStuckAtBottom: false
});
var useStickyHeader = (rootRef, headerRef, __stickyHeader, __stickyOffset, __mobileStickyOffset, __disableMobile, __additionalOffset = false) => {
  const isMobile = useMobile();
  const disableSticky = isMobile && __disableMobile;
  const isSticky = !disableSticky && !!__stickyHeader;
  const [hasInnerOverflowParents, setHasInnerOverflowParents] = (0, import_react197.useState)(false);
  const [isStuck, setIsStuck] = (0, import_react197.useState)(false);
  const [isStuckAtBottom, setIsStuckAtBottom] = (0, import_react197.useState)(false);
  (0, import_react197.useLayoutEffect)(() => {
    if (rootRef.current) {
      const overflowParents = getOverflowParents(rootRef.current);
      const mainElement = findUpUntil(rootRef.current, (elem) => elem.tagName === "MAIN");
      setHasInnerOverflowParents(overflowParents.length > 0 && overflowParents[0] !== mainElement);
    }
  }, [rootRef]);
  const computedOffset = computeOffset({
    isMobile,
    __stickyOffset,
    __mobileStickyOffset,
    hasInnerOverflowParents,
    __additionalOffset
  });
  const stickyStyles = isSticky ? {
    style: {
      top: computedOffset
    }
  } : {};
  const checkIfStuck = (0, import_react197.useCallback)(({ isTrusted, target, type }) => {
    if (type === "resize" && target === window && !isTrusted) {
      return;
    }
    if (rootRef.current && headerRef.current) {
      const rootTopBorderWidth = parseFloat(getComputedStyle(rootRef.current).borderTopWidth) || 0;
      const rootTop = Math.round(rootRef.current.getBoundingClientRect().top + rootTopBorderWidth);
      const headerTop = Math.round(headerRef.current.getBoundingClientRect().top);
      if (rootTop < headerTop) {
        setIsStuck(true);
      } else {
        setIsStuck(false);
      }
      const rootBottom = Math.round(rootRef.current.getBoundingClientRect().bottom - rootTopBorderWidth);
      const headerBottom = Math.round(headerRef.current.getBoundingClientRect().bottom);
      if (rootBottom <= headerBottom) {
        setIsStuckAtBottom(true);
      } else {
        setIsStuckAtBottom(false);
      }
    }
  }, [rootRef, headerRef]);
  (0, import_react197.useEffect)(() => {
    if (isSticky) {
      const controller = new AbortController();
      window.addEventListener("scroll", checkIfStuck, { capture: true, signal: controller.signal });
      window.addEventListener("resize", checkIfStuck, { signal: controller.signal });
      return () => {
        controller.abort();
      };
    }
  }, [isSticky, checkIfStuck]);
  return {
    isSticky,
    isStuck,
    isStuckAtBottom,
    stickyStyles
  };
};

// node_modules/@cloudscape-design/components/container/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/container/analytics-metadata/styles.scoped.css";
var styles_css_default68 = {
  "header": "awsui_header_164jl_1ns0c_5"
};

// node_modules/@cloudscape-design/components/container/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/container/styles.scoped.css";
var styles_css_default69 = {
  "root": "awsui_root_14iqq_1vhb3_189",
  "fit-height": "awsui_fit-height_14iqq_1vhb3_222",
  "with-side-media": "awsui_with-side-media_14iqq_1vhb3_227",
  "variant-default": "awsui_variant-default_14iqq_1vhb3_230",
  "variant-stacked": "awsui_variant-stacked_14iqq_1vhb3_230",
  "refresh": "awsui_refresh_14iqq_1vhb3_238",
  "sticky-enabled": "awsui_sticky-enabled_14iqq_1vhb3_288",
  "with-stuck-sticky-header-at-bottom": "awsui_with-stuck-sticky-header-at-bottom_14iqq_1vhb3_294",
  "with-top-media": "awsui_with-top-media_14iqq_1vhb3_304",
  "content-wrapper": "awsui_content-wrapper_14iqq_1vhb3_309",
  "content-wrapper-fit-height": "awsui_content-wrapper-fit-height_14iqq_1vhb3_314",
  "media": "awsui_media_14iqq_1vhb3_321",
  "media-top": "awsui_media-top_14iqq_1vhb3_339",
  "media-side": "awsui_media-side_14iqq_1vhb3_344",
  "header": "awsui_header_14iqq_1vhb3_350",
  "header-full-page": "awsui_header-full-page_14iqq_1vhb3_355",
  "header-variant-embedded": "awsui_header-variant-embedded_14iqq_1vhb3_358",
  "header-sticky-enabled": "awsui_header-sticky-enabled_14iqq_1vhb3_358",
  "header-with-media": "awsui_header-with-media_14iqq_1vhb3_361",
  "header-sticky-disabled": "awsui_header-sticky-disabled_14iqq_1vhb3_367",
  "header-stuck": "awsui_header-stuck_14iqq_1vhb3_377",
  "header-variant-cards": "awsui_header-variant-cards_14iqq_1vhb3_387",
  "header-dynamic-height": "awsui_header-dynamic-height_14iqq_1vhb3_390",
  "with-paddings": "awsui_with-paddings_14iqq_1vhb3_396",
  "with-hidden-content": "awsui_with-hidden-content_14iqq_1vhb3_405",
  "header-variant-full-page": "awsui_header-variant-full-page_14iqq_1vhb3_463",
  "header-cover": "awsui_header-cover_14iqq_1vhb3_466",
  "content": "awsui_content_14iqq_1vhb3_309",
  "content-fit-height": "awsui_content-fit-height_14iqq_1vhb3_494",
  "content-inner": "awsui_content-inner_14iqq_1vhb3_500",
  "with-header": "awsui_with-header_14iqq_1vhb3_507",
  "footer": "awsui_footer_14iqq_1vhb3_511",
  "with-divider": "awsui_with-divider_14iqq_1vhb3_515"
};

// node_modules/@cloudscape-design/components/container/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/container/test-classes/styles.scoped.css";
var styles_css_default70 = {
  "content-inner": "awsui_content-inner_1mwlm_oyjaq_5"
};

// node_modules/@cloudscape-design/components/container/internal.js
function InternalContainerAsSubstep(props2) {
  const { subStepRef, funnelSubStepProps } = useFunnelSubStep();
  const modalContext = useModalContext();
  return import_react198.default.createElement(InternalContainer, Object.assign({}, props2, { __subStepRef: (modalContext === null || modalContext === void 0 ? void 0 : modalContext.isInModal) ? { current: null } : subStepRef, __funnelSubStepProps: (modalContext === null || modalContext === void 0 ? void 0 : modalContext.isInModal) ? {} : funnelSubStepProps }));
}
function InternalContainer(_a2) {
  var _b;
  var { header, footer, children: children2, variant = "default", disableHeaderPaddings = false, disableContentPaddings = false, disableFooterPaddings = false, fitHeight, media, style, __stickyOffset, __mobileStickyOffset, __stickyHeader = false, __internalRootRef, __disableFooterDivider = false, __hiddenContent = false, __headerRef, __fullPage = false, __disableStickyMobile = true, __funnelSubStepProps, __subStepRef } = _a2, restProps = __rest(_a2, ["header", "footer", "children", "variant", "disableHeaderPaddings", "disableContentPaddings", "disableFooterPaddings", "fitHeight", "media", "style", "__stickyOffset", "__mobileStickyOffset", "__stickyHeader", "__internalRootRef", "__disableFooterDivider", "__hiddenContent", "__headerRef", "__fullPage", "__disableStickyMobile", "__funnelSubStepProps", "__subStepRef"]);
  const isMobile = useMobile();
  const isRefresh = useVisualRefresh();
  const baseProps = getBaseProps(restProps);
  const rootRef = (0, import_react198.useRef)(null);
  const headerRef = (0, import_react198.useRef)(null);
  const { isSticky, isStuck, isStuckAtBottom, stickyStyles } = useStickyHeader(rootRef, headerRef, __stickyHeader, __stickyOffset, __mobileStickyOffset, __disableStickyMobile, __fullPage && isRefresh && !isMobile);
  const contentId = useUniqueId();
  const hasDynamicHeight = isRefresh && variant === "full-page";
  const mergedRef = useMergeRefs(rootRef, __internalRootRef);
  const headerMergedRef = useMergeRefs(headerRef, __headerRef);
  const shouldHaveStickyStyles = isSticky && !isMobile;
  const hasMedia = !!(media === null || media === void 0 ? void 0 : media.content);
  const mediaPosition = (_b = media === null || media === void 0 ? void 0 : media.position) !== null && _b !== void 0 ? _b : "top";
  return import_react198.default.createElement(
    "div",
    Object.assign({}, baseProps, __funnelSubStepProps, { className: clsx_m_default(baseProps.className, styles_css_default69.root, styles_css_default69[`variant-${variant}`], fitHeight && styles_css_default69["fit-height"], hasMedia && (mediaPosition === "side" ? styles_css_default69["with-side-media"] : styles_css_default69["with-top-media"]), shouldHaveStickyStyles && [styles_css_default69["sticky-enabled"]], shouldHaveStickyStyles && isStuck && isStuckAtBottom && [styles_css_default69["with-stuck-sticky-header-at-bottom"]], isRefresh && styles_css_default69.refresh), ref: mergedRef }, getAnalyticsLabelAttribute(`.${styles_css_default68.header} h1, .${styles_css_default68.header} h2, .${styles_css_default68.header} h3`), { style: getRootStyles(style) }),
    hasMedia && import_react198.default.createElement("div", { className: clsx_m_default(styles_css_default69[`media-${mediaPosition === "side" ? "side" : "top"}`], styles_css_default69.media), style: mediaPosition === "top" ? Object.assign(Object.assign({}, getMediaStyles(mediaPosition, style)), { height: (media === null || media === void 0 ? void 0 : media.height) || "" }) : Object.assign(Object.assign({}, getMediaStyles(mediaPosition, style)), { width: (media === null || media === void 0 ? void 0 : media.width) || "" }) }, media.content),
    import_react198.default.createElement(
      "div",
      { id: contentId, ref: __subStepRef, className: clsx_m_default(styles_css_default69["content-wrapper"], fitHeight && styles_css_default69["content-wrapper-fit-height"]) },
      header && import_react198.default.createElement(
        ContainerHeaderContextProvider,
        null,
        import_react198.default.createElement(
          StickyHeaderContext.Provider,
          { value: { isStuck, isStuckAtBottom } },
          import_react198.default.createElement(
            "div",
            { className: clsx_m_default(isRefresh && styles_css_default69.refresh, styles_css_default69.header, styles_css_default68.header, styles_css_default69[`header-variant-${variant}`], {
              [styles_css_default69["header-sticky-disabled"]]: __stickyHeader && !isSticky,
              [styles_css_default69["header-sticky-enabled"]]: isSticky,
              [styles_css_default69["header-dynamic-height"]]: hasDynamicHeight,
              [styles_css_default69["header-stuck"]]: isStuck,
              [styles_css_default69["with-paddings"]]: !disableHeaderPaddings,
              [styles_css_default69["with-hidden-content"]]: !children2 || __hiddenContent,
              [styles_css_default69["header-with-media"]]: hasMedia,
              [styles_css_default69["header-full-page"]]: __fullPage && isRefresh
            }), ref: headerMergedRef, style: Object.assign(Object.assign({}, stickyStyles.style), getHeaderStyles(style)) },
            isStuck && !isMobile && isRefresh && __fullPage && import_react198.default.createElement("div", { className: styles_css_default69["header-cover"] }),
            header
          )
        )
      ),
      import_react198.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default69.content, fitHeight && styles_css_default69["content-fit-height"]) },
        import_react198.default.createElement("div", { className: clsx_m_default(styles_css_default69["content-inner"], styles_css_default70["content-inner"], {
          [styles_css_default69["with-paddings"]]: !disableContentPaddings,
          [styles_css_default69["with-header"]]: !!header
        }), style: getContentStyles(style) }, children2)
      ),
      footer && import_react198.default.createElement("div", { className: clsx_m_default(styles_css_default69.footer, {
        [styles_css_default69["with-divider"]]: !__disableFooterDivider,
        [styles_css_default69["with-paddings"]]: !disableFooterPaddings
      }), style: getFooterStyles(style) }, footer)
    )
  );
}

// node_modules/@cloudscape-design/components/internal/analytics/components/analytics-funnel.js
var import_react200 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-debounce-callback/index.js
var import_react199 = __toESM(require_react());
function useDebounceCallback(callback, delay) {
  const callbackRef = (0, import_react199.useRef)();
  callbackRef.current = callback;
  return (0, import_react199.useCallback)(debounce(((...args) => {
    if (callbackRef.current) {
      callbackRef.current(...args);
    }
  }), delay), []);
}

// node_modules/@cloudscape-design/components/internal/analytics/components/analytics-funnel.js
var FUNNEL_VERSION = "1.4";
var AnalyticsFunnel = (props2) => {
  const { isInFunnel } = useFunnel();
  if (isInFunnel && props2.funnelType === "single-page") {
    return import_react200.default.createElement(import_react200.default.Fragment, null, props2.children);
  }
  return import_react200.default.createElement(InnerAnalyticsFunnel, Object.assign({}, props2));
};
var CREATION_EDIT_FLOW_DONE_EVENT_NAME = "awsui-creation-edit-flow-done";
var dispatchCreateEditFlowDoneEvent = () => {
  var _a2;
  try {
    (_a2 = window.top) === null || _a2 === void 0 ? void 0 : _a2.document.dispatchEvent(new Event(CREATION_EDIT_FLOW_DONE_EVENT_NAME));
  } catch (_b) {
  }
};
var onFunnelCancelled = ({ funnelInteractionId, funnelIdentifier }) => {
  FunnelMetrics.funnelCancelled({ funnelInteractionId, funnelIdentifier });
};
var onFunnelComplete = (taskCompletionDataProps) => {
  FunnelMetrics.funnelComplete({
    funnelInteractionId: taskCompletionDataProps.taskInteractionId,
    funnelIdentifier: taskCompletionDataProps.taskIdentifier
  });
  PerformanceMetrics.taskCompletionData(taskCompletionDataProps);
  dispatchCreateEditFlowDoneEvent();
};
function evaluateSelectors(selectors, defaultSelector) {
  for (const selector of selectors) {
    const element = document.querySelector(selector);
    if (element) {
      return selector;
    }
  }
  return defaultSelector;
}
var InnerAnalyticsFunnel = (_a2) => {
  var { mounted = true, children: children2, stepConfiguration } = _a2, props2 = __rest(_a2, ["mounted", "children", "stepConfiguration"]);
  const [funnelInteractionId, setFunnelInteractionId] = (0, import_react200.useState)("");
  const [submissionAttempt, setSubmissionAttempt] = (0, import_react200.useState)(0);
  const isVisualRefresh = useVisualRefresh();
  const funnelState = (0, import_react200.useRef)("default");
  const funnelNameSelector = (0, import_react200.useRef)(getFunnelNameSelector());
  const errorCount = (0, import_react200.useRef)(0);
  const loadingButtonCount = (0, import_react200.useRef)(0);
  const wizardCount = (0, import_react200.useRef)(0);
  const latestFocusCleanupFunction = (0, import_react200.useRef)(void 0);
  const formSubmitStartTime = (0, import_react200.useRef)(0);
  (0, import_react200.useEffect)(() => {
    if (!mounted) {
      return;
    }
    let funnelInteractionId2;
    const handle = setTimeout(() => {
      var _a3, _b;
      funnelNameSelector.current = evaluateSelectors(((_a3 = props2.funnelNameSelectors) === null || _a3 === void 0 ? void 0 : _a3.call(props2)) || [], getFunnelNameSelector());
      if (props2.funnelType === "single-page" && wizardCount.current > 0) {
        return;
      }
      funnelState.current = "default";
      const funnelName = (_b = getTextFromSelector(funnelNameSelector.current)) !== null && _b !== void 0 ? _b : "";
      const singleStepFlowStepConfiguration = [
        {
          number: 1,
          isOptional: false,
          name: funnelName,
          stepIdentifier: props2.funnelIdentifier
        }
      ];
      let componentTheme = THEME;
      if (THEME === "polaris") {
        componentTheme = isVisualRefresh ? "vr" : "classic";
      }
      funnelInteractionId2 = FunnelMetrics.funnelStart({
        funnelName,
        funnelIdentifier: props2.funnelIdentifier,
        flowType: props2.funnelFlowType,
        funnelNameSelector: funnelNameSelector.current,
        optionalStepNumbers: props2.optionalStepNumbers,
        funnelType: props2.funnelType,
        totalFunnelSteps: props2.totalFunnelSteps,
        componentVersion: PACKAGE_VERSION,
        componentTheme,
        funnelVersion: FUNNEL_VERSION,
        stepConfiguration: stepConfiguration !== null && stepConfiguration !== void 0 ? stepConfiguration : singleStepFlowStepConfiguration,
        resourceType: props2.funnelResourceType || getTextFromSelector(`[${DATA_ATTR_RESOURCE_TYPE}]`)
      });
      setFunnelInteractionId(funnelInteractionId2);
    }, 1);
    return () => {
      clearTimeout(handle);
      if (!funnelInteractionId2) {
        return;
      }
      if (props2.funnelType === "single-page" && wizardCount.current > 0) {
        return;
      }
      if (funnelState.current === "validating") {
        const taskCompletionDataProps = {
          taskIdentifier: props2.funnelIdentifier,
          taskType: props2.funnelType,
          timeToRespondAfterFormSubmit: performance.now() - formSubmitStartTime.current,
          taskInteractionId: funnelInteractionId2,
          taskFlowType: props2.funnelFlowType
        };
        onFunnelComplete(taskCompletionDataProps);
        funnelState.current = "complete";
      }
      if (funnelState.current === "complete") {
        FunnelMetrics.funnelSuccessful({ funnelInteractionId: funnelInteractionId2, funnelIdentifier: props2.funnelIdentifier });
      } else {
        funnelState.current = "cancelled";
        onFunnelCancelled({ funnelInteractionId: funnelInteractionId2, funnelIdentifier: props2.funnelIdentifier });
      }
    };
  }, [mounted]);
  const funnelSubmit = () => {
    funnelState.current = "validating";
    formSubmitStartTime.current = performance.now();
    const VALIDATION_WAIT_DELAY = 50;
    const LOADING_WAIT_DELAY = 100;
    const checkForCompleteness = () => {
      if (funnelState.current === "complete") {
        return;
      }
      if (loadingButtonCount.current > 0) {
        setTimeout(checkForCompleteness, LOADING_WAIT_DELAY);
        return;
      }
      if (errorCount.current === 0) {
        const taskCompletionDataProps = {
          taskIdentifier: props2.funnelIdentifier,
          taskType: props2.funnelType,
          timeToRespondAfterFormSubmit: performance.now() - formSubmitStartTime.current,
          taskInteractionId: funnelInteractionId,
          taskFlowType: props2.funnelFlowType
        };
        onFunnelComplete(taskCompletionDataProps);
        funnelState.current = "complete";
      } else {
        funnelState.current = "default";
      }
    };
    setTimeout(checkForCompleteness, VALIDATION_WAIT_DELAY);
  };
  const funnelNextOrSubmitAttempt = () => setSubmissionAttempt((i2) => i2 + 1);
  const funnelCancel = () => {
  };
  const funnelContextValue = {
    funnelInteractionId,
    funnelIdentifier: props2.funnelIdentifier,
    funnelFlowType: props2.funnelFlowType,
    funnelErrorContext: props2.funnelErrorContext,
    setFunnelInteractionId,
    funnelType: props2.funnelType,
    optionalStepNumbers: props2.optionalStepNumbers,
    totalFunnelSteps: props2.totalFunnelSteps,
    funnelNameSelector: funnelNameSelector.current,
    funnelSubmit,
    funnelCancel,
    submissionAttempt,
    funnelNextOrSubmitAttempt,
    funnelState,
    errorCount,
    loadingButtonCount,
    latestFocusCleanupFunction,
    isInFunnel: true,
    wizardCount
  };
  return import_react200.default.createElement(FunnelContext.Provider, { value: funnelContextValue }, children2);
};
var AnalyticsFunnelStep = (props2) => {
  return import_react200.default.createElement(InnerAnalyticsFunnelStep, Object.assign({}, props2, { key: props2.stepNumber }));
};
function getSubStepConfiguration() {
  const subSteps = Array.from(document.querySelectorAll(getSubStepAllSelector()));
  const subStepConfiguration = subSteps.map((substep, index) => {
    var _a2, _b, _c, _d, _e;
    const subStepIdentifier = (_b = (_a2 = substep === null || substep === void 0 ? void 0 : substep.__awsuiMetadata__) === null || _a2 === void 0 ? void 0 : _a2.analytics) === null || _b === void 0 ? void 0 : _b.instanceIdentifier;
    const name = (_e = (_d = (_c = substep.querySelector(getSubStepNameSelector())) === null || _c === void 0 ? void 0 : _c.innerText) === null || _d === void 0 ? void 0 : _d.trim()) !== null && _e !== void 0 ? _e : "";
    return {
      name,
      number: index + 1,
      subStepIdentifier
    };
  });
  return subStepConfiguration;
}
function useStepChangeListener(stepNumber, handler) {
  const subStepConfiguration = (0, import_react200.useRef)(/* @__PURE__ */ new Map());
  const SUBSTEP_CHANGE_DEBOUNCE = 50;
  const listenForSubStepChanges = (0, import_react200.useRef)(false);
  (0, import_react200.useEffect)(() => {
    const handle = setTimeout(() => listenForSubStepChanges.current = true, SUBSTEP_CHANGE_DEBOUNCE);
    return () => {
      clearTimeout(handle);
      listenForSubStepChanges.current = false;
    };
  }, []);
  (0, import_react200.useEffect)(() => {
    const handle = setTimeout(() => subStepConfiguration.current.set(stepNumber, getSubStepConfiguration()), SUBSTEP_CHANGE_DEBOUNCE);
    return () => {
      clearTimeout(handle);
    };
  }, [stepNumber]);
  const stepChangeCallback = useDebounceCallback(() => {
    if (!listenForSubStepChanges.current) {
      return;
    }
    subStepConfiguration.current.set(stepNumber, getSubStepConfiguration());
    handler(subStepConfiguration.current.get(stepNumber));
  }, SUBSTEP_CHANGE_DEBOUNCE);
  return { onStepChange: stepChangeCallback, subStepConfiguration };
}
var InnerAnalyticsFunnelStep = (_a2) => {
  var { mounted = true, children: children2, stepNumber, stepIdentifier, stepErrorContext } = _a2, rest = __rest(_a2, ["mounted", "children", "stepNumber", "stepIdentifier", "stepErrorContext"]);
  const { funnelInteractionId, funnelIdentifier, funnelNameSelector, funnelState, funnelType } = useFunnel();
  const parentStep = useFunnelStep();
  const parentStepExists = parentStep.isInStep;
  const parentStepFunnelInteractionId = parentStep.funnelInteractionId;
  const funnelStepProps = { [DATA_ATTR_FUNNEL_STEP]: stepNumber };
  const subStepCount = (0, import_react200.useRef)(0);
  const stepNameSelector = rest.stepNameSelector || funnelNameSelector;
  const { onStepChange, subStepConfiguration } = useStepChangeListener(stepNumber, (subStepConfiguration2) => {
    if (!funnelInteractionId) {
      return;
    }
    FunnelMetrics.funnelStepChange({
      stepIdentifier,
      funnelIdentifier,
      funnelInteractionId,
      stepNumber,
      stepNameSelector,
      subStepAllSelector: getSubStepAllSelector(),
      totalSubSteps: subStepCount.current,
      subStepConfiguration: subStepConfiguration2
    });
  });
  (0, import_react200.useEffect)(() => {
    if (!funnelInteractionId) {
      return;
    }
    if (mounted) {
      return;
    }
    const stepName = getTextFromSelector(stepNameSelector);
    const handler = setTimeout(() => {
      if (funnelState.current !== "cancelled") {
        FunnelMetrics.funnelStepComplete({
          funnelIdentifier,
          funnelInteractionId,
          stepIdentifier,
          stepNumber,
          stepName,
          stepNameSelector,
          subStepAllSelector: getSubStepAllSelector(),
          totalSubSteps: subStepCount.current
        });
      }
    }, 0);
    return () => {
      clearTimeout(handler);
    };
  }, [
    stepIdentifier,
    funnelIdentifier,
    funnelInteractionId,
    stepNumber,
    stepNameSelector,
    funnelState,
    parentStepExists,
    funnelType,
    parentStepFunnelInteractionId,
    mounted
  ]);
  (0, import_react200.useEffect)(() => {
    if (!funnelInteractionId) {
      return;
    }
    if (parentStepExists && parentStepFunnelInteractionId) {
      return;
    }
    const stepName = getTextFromSelector(stepNameSelector);
    if (funnelState.current === "default") {
      FunnelMetrics.funnelStepStart({
        stepIdentifier,
        funnelIdentifier,
        funnelInteractionId,
        stepNumber,
        stepName,
        stepNameSelector,
        subStepAllSelector: getSubStepAllSelector(),
        totalSubSteps: subStepCount.current,
        subStepConfiguration: getSubStepConfiguration()
      });
    }
    return () => {
      if (funnelState.current !== "cancelled") {
        FunnelMetrics.funnelStepComplete({
          funnelIdentifier,
          funnelInteractionId,
          stepIdentifier,
          stepNumber,
          stepName,
          stepNameSelector,
          subStepAllSelector: getSubStepAllSelector(),
          // eslint-disable-next-line react-hooks/exhaustive-deps
          totalSubSteps: subStepCount.current
        });
      }
    };
  }, [
    stepIdentifier,
    funnelIdentifier,
    funnelInteractionId,
    stepNumber,
    stepNameSelector,
    funnelState,
    parentStepExists,
    funnelType,
    parentStepFunnelInteractionId
  ]);
  const contextValue = {
    stepIdentifier,
    stepNumber,
    stepNameSelector,
    funnelStepProps,
    subStepCount,
    isInStep: true,
    funnelInteractionId,
    onStepChange,
    subStepConfiguration,
    stepErrorContext
  };
  const effectiveContextValue = parentStepExists && parentStepFunnelInteractionId ? parentStep : contextValue;
  return import_react200.default.createElement(FunnelStepContext.Provider, { value: effectiveContextValue }, typeof children2 === "function" ? children2(effectiveContextValue) : children2);
};
var AnalyticsFunnelSubStep = ({ children: children2, subStepIdentifier, subStepErrorContext }) => {
  const subStepId = useUniqueId("substep");
  const subStepSelector = getSubStepSelector(subStepId);
  const subStepNameSelector = getSubStepNameSelector(subStepId);
  const subStepRef = (0, import_react200.useRef)(null);
  const { subStepCount, onStepChange } = useFunnelStep();
  const mousePressed = (0, import_react200.useRef)(false);
  const isFocusedSubStep = (0, import_react200.useRef)(false);
  const focusCleanupFunction = (0, import_react200.useRef)(void 0);
  const { funnelState, funnelInteractionId } = useFunnel();
  const { stepNumber, stepNameSelector } = useFunnelStep();
  const newContext = {
    subStepIdentifier,
    subStepErrorContext,
    subStepSelector,
    subStepNameSelector,
    subStepId,
    subStepRef,
    mousePressed,
    isFocusedSubStep,
    focusCleanupFunction,
    isNestedSubStep: false
  };
  const inheritedContext = Object.assign(Object.assign({}, (0, import_react200.useContext)(FunnelSubStepContext)), { isNestedSubStep: true });
  const isNested = Boolean(inheritedContext.subStepId);
  (0, import_react200.useEffect)(() => {
    if (!isNested) {
      subStepCount.current++;
      onStepChange();
      return () => {
        subStepCount.current--;
        onStepChange();
      };
    }
  }, [isNested, subStepCount, onStepChange]);
  const context = isNested ? inheritedContext : newContext;
  (0, import_react200.useEffect)(() => {
    if (isNested || !subStepRef.current) {
      return;
    }
    const onMouseDown = () => mousePressed.current = true;
    const onMouseUp = () => __awaiter(void 0, void 0, void 0, function* () {
      var _a2;
      mousePressed.current = false;
      if (!isFocusedSubStep.current) {
        return;
      }
      yield new Promise((r2) => setTimeout(r2, 1));
      if (!subStepRef.current || !document.activeElement || !nodeBelongs2(subStepRef.current, document.activeElement)) {
        isFocusedSubStep.current = false;
        (_a2 = focusCleanupFunction.current) === null || _a2 === void 0 ? void 0 : _a2.call(focusCleanupFunction);
      }
    });
    const controller = new AbortController();
    window.addEventListener("mousedown", onMouseDown, { signal: controller.signal });
    window.addEventListener("mouseup", onMouseUp, { signal: controller.signal });
    return () => {
      controller.abort();
    };
  }, [
    funnelInteractionId,
    funnelState,
    stepNameSelector,
    stepNumber,
    subStepNameSelector,
    subStepSelector,
    focusCleanupFunction,
    isNested,
    subStepRef
  ]);
  return import_react200.default.createElement(FunnelSubStepContext.Provider, { value: context }, typeof children2 === "function" ? children2(context) : children2);
};

// node_modules/@cloudscape-design/components/expandable-section/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/expandable-section/analytics-metadata/styles.scoped.css";
var styles_css_default71 = {
  "header-label": "awsui_header-label_4mvj3_1h74t_5",
  "root": "awsui_root_4mvj3_1h74t_6"
};

// node_modules/@cloudscape-design/components/expandable-section/expandable-section-container.js
var ExpandableSectionContainer = (_a2) => {
  var { className: className2, children: children2, header, variant, expanded, disableContentPaddings, __internalRootRef, __injectAnalyticsComponentMetadata } = _a2, rest = __rest(_a2, ["className", "children", "header", "variant", "expanded", "disableContentPaddings", "__internalRootRef", "__injectAnalyticsComponentMetadata"]);
  const analyticsMetadata = getAnalyticsMetadataProps(rest);
  const analyticsComponentMetadata = {
    name: "awsui.ExpandableSection",
    label: { root: "self" },
    properties: { variant, expanded: `${!!expanded}` }
  };
  const metadataAttribute = __injectAnalyticsComponentMetadata ? getAnalyticsMetadataAttribute({ component: analyticsComponentMetadata }) : {};
  if (variant === "container" || variant === "stacked") {
    return import_react201.default.createElement(
      AnalyticsFunnelSubStep,
      { subStepIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, subStepErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext },
      import_react201.default.createElement(InternalContainerAsSubstep, Object.assign({}, rest, { className: className2, header, variant: variant === "stacked" ? "stacked" : "default", disableContentPaddings: disableContentPaddings || !expanded, disableHeaderPaddings: true, __hiddenContent: !expanded, __internalRootRef }, metadataAttribute), children2)
    );
  }
  return import_react201.default.createElement(
    "div",
    Object.assign({ className: className2 }, rest, { ref: __internalRootRef }, metadataAttribute, getAnalyticsLabelAttribute(`.${styles_css_default71["header-label"]}`)),
    header,
    children2
  );
};

// node_modules/@cloudscape-design/components/expandable-section/expandable-section-header.js
var import_react206 = __toESM(require_react());

// node_modules/@cloudscape-design/components/header/internal.js
var import_react205 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/context/collection-label-context.js
var import_react202 = __toESM(require_react());
var CollectionLabelContext = (0, import_react202.createContext)({});

// node_modules/@cloudscape-design/components/header/analytics/use-table-integration.js
var import_react204 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/analytics/utils/parse-count-text.js
var parseCountValue = (countText) => {
  if (!countText || typeof countText !== "string") {
    return void 0;
  }
  const target = countText.includes("/") ? countText.split("/")[1] : countText;
  const match2 = target.match(/\d+/);
  return match2 ? parseInt(match2[0], 10) : void 0;
};

// node_modules/@cloudscape-design/components/internal/context/table-component-context.js
var import_react203 = __toESM(require_react());
var TableComponentsContext = (0, import_react203.createContext)(null);
var TableComponentsContextProvider = TableComponentsContext.Provider;
var useTableComponentsContext = () => {
  const tableComponentContext = (0, import_react203.useContext)(TableComponentsContext);
  return tableComponentContext;
};

// node_modules/@cloudscape-design/components/header/analytics/use-table-integration.js
var useTableIntegration = (countText) => {
  const tableComponentContext = useTableComponentsContext();
  const countValue = (0, import_react204.useMemo)(() => parseCountValue(countText), [countText]);
  (0, import_react204.useEffect)(() => {
    var _a2;
    if (((_a2 = tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.headerRef) === null || _a2 === void 0 ? void 0 : _a2.current) && countValue !== void 0) {
      tableComponentContext.headerRef.current.totalCount = countValue;
      return () => {
        var _a3;
        (_a3 = tableComponentContext.headerRef.current) === null || _a3 === void 0 ? true : delete _a3.totalCount;
      };
    }
  }, [tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.headerRef, countValue]);
};

// node_modules/@cloudscape-design/components/header/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/header/analytics-metadata/styles.scoped.css";
var styles_css_default72 = {
  "heading-text": "awsui_heading-text_105ke_268sp_5"
};

// node_modules/@cloudscape-design/components/header/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/header/styles.scoped.css";
var styles_css_default73 = {
  "root": "awsui_root_2qdw9_88efd_181",
  "refresh": "awsui_refresh_2qdw9_88efd_217",
  "root-no-actions": "awsui_root-no-actions_2qdw9_88efd_217",
  "root-variant-h2": "awsui_root-variant-h2_2qdw9_88efd_220",
  "root-variant-h3": "awsui_root-variant-h3_2qdw9_88efd_220",
  "root-has-description": "awsui_root-has-description_2qdw9_88efd_220",
  "root-variant-h1": "awsui_root-variant-h1_2qdw9_88efd_229",
  "main": "awsui_main_2qdw9_88efd_239",
  "no-wrap": "awsui_no-wrap_2qdw9_88efd_249",
  "main-variant-h1": "awsui_main-variant-h1_2qdw9_88efd_255",
  "actions": "awsui_actions_2qdw9_88efd_263",
  "actions-centered": "awsui_actions-centered_2qdw9_88efd_268",
  "actions-variant-h1": "awsui_actions-variant-h1_2qdw9_88efd_271",
  "actions-variant-h2": "awsui_actions-variant-h2_2qdw9_88efd_275",
  "actions-variant-h3": "awsui_actions-variant-h3_2qdw9_88efd_279",
  "title": "awsui_title_2qdw9_88efd_295",
  "title-variant-h1": "awsui_title-variant-h1_2qdw9_88efd_300",
  "title-variant-h2": "awsui_title-variant-h2_2qdw9_88efd_307",
  "title-variant-h3": "awsui_title-variant-h3_2qdw9_88efd_313",
  "virtual-space": "awsui_virtual-space_2qdw9_88efd_334",
  "info": "awsui_info_2qdw9_88efd_340",
  "description": "awsui_description_2qdw9_88efd_344",
  "description-variant-h1": "awsui_description-variant-h1_2qdw9_88efd_351",
  "description-variant-h2": "awsui_description-variant-h2_2qdw9_88efd_355",
  "description-variant-h3": "awsui_description-variant-h3_2qdw9_88efd_362",
  "heading": "awsui_heading_2qdw9_88efd_373",
  "heading-variant-h1": "awsui_heading-variant-h1_2qdw9_88efd_384",
  "heading-variant-h2": "awsui_heading-variant-h2_2qdw9_88efd_389",
  "heading-variant-h3": "awsui_heading-variant-h3_2qdw9_88efd_394",
  "heading-text": "awsui_heading-text_2qdw9_88efd_400",
  "heading-text-variant-h1": "awsui_heading-text-variant-h1_2qdw9_88efd_403",
  "heading-text-variant-h2": "awsui_heading-text-variant-h2_2qdw9_88efd_411",
  "heading-text-variant-h3": "awsui_heading-text-variant-h3_2qdw9_88efd_419",
  "counter": "awsui_counter_2qdw9_88efd_428"
};

// node_modules/@cloudscape-design/components/header/internal.js
function InternalHeader(_a2) {
  var { variant, headingTagOverride, children: children2, actions, counter: counter2, description, info, __internalRootRef, __disableActionsWrapping, __headingTagRef, __headingTagTabIndex } = _a2, restProps = __rest(_a2, ["variant", "headingTagOverride", "children", "actions", "counter", "description", "info", "__internalRootRef", "__disableActionsWrapping", "__headingTagRef", "__headingTagTabIndex"]);
  const isMobile = useMobile();
  const HeadingTag = headingTagOverride !== null && headingTagOverride !== void 0 ? headingTagOverride : variant === "awsui-h1-sticky" ? "h1" : variant;
  const { isStuck } = (0, import_react205.useContext)(StickyHeaderContext);
  const baseProps = getBaseProps(restProps);
  const isRefresh = useVisualRefresh();
  const assignHeaderId = (0, import_react205.useContext)(CollectionLabelContext).assignId;
  const isInContainer = useContainerHeader();
  const headingId = useUniqueId("heading");
  useTableIntegration(counter2);
  if (assignHeaderId !== void 0) {
    assignHeaderId(headingId);
  }
  const dynamicVariant = !isMobile && isStuck ? "h2" : "h1";
  const variantOverride = variant === "awsui-h1-sticky" ? isRefresh ? dynamicVariant : "h2" : variant;
  return import_react205.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default73.root, baseProps.className, styles_css_default73[`root-variant-${variantOverride}`], isRefresh && styles_css_default73.refresh, !actions && [styles_css_default73[`root-no-actions`]], description && [styles_css_default73[`root-has-description`]]), ref: __internalRootRef }),
    import_react205.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default73.main, styles_css_default73[`main-variant-${variantOverride}`], isRefresh && styles_css_default73.refresh, __disableActionsWrapping && [styles_css_default73["no-wrap"]]) },
      import_react205.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default73.title, styles_css_default73[`title-variant-${variantOverride}`], isRefresh && styles_css_default73.refresh) },
        import_react205.default.createElement(
          HeadingTag,
          Object.assign({ className: clsx_m_default(styles_css_default73.heading, styles_css_default73[`heading-variant-${variantOverride}`]), ref: __headingTagRef, tabIndex: __headingTagTabIndex }, getAnalyticsLabelAttribute(`.${styles_css_default72["heading-text"]}`)),
          import_react205.default.createElement("span", Object.assign({}, isInContainer ? { [DATA_ATTR_FUNNEL_KEY]: FUNNEL_KEY_SUBSTEP_NAME } : {}, { className: clsx_m_default(styles_css_default73["heading-text"], styles_css_default72["heading-text"], styles_css_default73[`heading-text-variant-${variantOverride}`]), id: headingId }), children2),
          counter2 !== void 0 && import_react205.default.createElement(
            "span",
            { className: styles_css_default73.counter },
            " ",
            counter2
          )
        ),
        info && import_react205.default.createElement(
          InfoLinkLabelContext.Provider,
          { value: headingId },
          import_react205.default.createElement("span", { className: styles_css_default73["virtual-space"] }, "  "),
          import_react205.default.createElement("span", { className: styles_css_default73.info }, info)
        )
      ),
      actions && import_react205.default.createElement("div", { className: clsx_m_default(styles_css_default73.actions, styles_css_default73[`actions-variant-${variantOverride}`], isRefresh && styles_css_default73.refresh, !__disableActionsWrapping && [styles_css_default73["actions-centered"]]) }, actions)
    ),
    import_react205.default.createElement(Description, { variantOverride }, description)
  );
}
function Description({ children: children2, variantOverride }) {
  const isRefresh = useVisualRefresh();
  return children2 && import_react205.default.createElement("p", { className: clsx_m_default(styles_css_default73.description, styles_css_default73[`description-variant-${variantOverride}`], isRefresh && styles_css_default73.refresh) }, children2) || null;
}

// node_modules/@cloudscape-design/components/expandable-section/utils.js
var variantIsOneOf = (variant, oneOf) => oneOf.includes(variant);
function variantSupportsDescription(variant) {
  return variantIsOneOf(variant, ["container", "default", "footer", "inline"]);
}
function variantSupportsActions(variant) {
  return variantIsOneOf(variant, ["container", "compact", "default", "inline"]);
}
function variantSupportsInfoLink(variant) {
  return variantIsOneOf(variant, ["container", "compact"]);
}
function variantRequiresActionsDivider(variant) {
  return variantIsOneOf(variant, ["default", "inline"]);
}

// node_modules/@cloudscape-design/components/expandable-section/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/expandable-section/styles.scoped.css";
var styles_css_default74 = {
  "content-enter": "awsui_content-enter_gwq0h_nchqn_161",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_gwq0h_nchqn_1",
  "trigger-expanded": "awsui_trigger-expanded_gwq0h_nchqn_183",
  "icon": "awsui_icon_gwq0h_nchqn_197",
  "root": "awsui_root_gwq0h_nchqn_211",
  "expand-button": "awsui_expand-button_gwq0h_nchqn_246",
  "expanded": "awsui_expanded_gwq0h_nchqn_254",
  "icon-container": "awsui_icon-container_gwq0h_nchqn_264",
  "icon-container-container": "awsui_icon-container-container_gwq0h_nchqn_268",
  "wrapper": "awsui_wrapper_gwq0h_nchqn_272",
  "wrapper-default": "awsui_wrapper-default_gwq0h_nchqn_280",
  "wrapper-inline": "awsui_wrapper-inline_gwq0h_nchqn_280",
  "wrapper-footer": "awsui_wrapper-footer_gwq0h_nchqn_280",
  "wrapper-navigation": "awsui_wrapper-navigation_gwq0h_nchqn_284",
  "wrapper-container": "awsui_wrapper-container_gwq0h_nchqn_287",
  "wrapper-compact": "awsui_wrapper-compact_gwq0h_nchqn_291",
  "header-deprecated": "awsui_header-deprecated_gwq0h_nchqn_304",
  "wrapper-expanded": "awsui_wrapper-expanded_gwq0h_nchqn_310",
  "header": "awsui_header_gwq0h_nchqn_304",
  "header-wrapper": "awsui_header-wrapper_gwq0h_nchqn_347",
  "header-actions-wrapper": "awsui_header-actions-wrapper_gwq0h_nchqn_359",
  "header-button": "awsui_header-button_gwq0h_nchqn_365",
  "header-container-button": "awsui_header-container-button_gwq0h_nchqn_365",
  "header-container": "awsui_header-container_gwq0h_nchqn_365",
  "header-navigation": "awsui_header-navigation_gwq0h_nchqn_400",
  "header-text": "awsui_header-text_gwq0h_nchqn_437",
  "content": "awsui_content_gwq0h_nchqn_161",
  "content-default": "awsui_content-default_gwq0h_nchqn_450",
  "content-inline": "awsui_content-inline_gwq0h_nchqn_450",
  "content-footer": "awsui_content-footer_gwq0h_nchqn_454",
  "content-expanded": "awsui_content-expanded_gwq0h_nchqn_458",
  "content-compact": "awsui_content-compact_gwq0h_nchqn_461",
  "focusable": "awsui_focusable_gwq0h_nchqn_465",
  "click-target": "awsui_click-target_gwq0h_nchqn_480"
};

// node_modules/@cloudscape-design/components/expandable-section/expandable-section-header.js
var componentName = "ExpandableSection";
var getExpandActionAnalyticsMetadataAttribute = (expanded) => {
  const metadata = {
    action: !expanded ? "expand" : "collapse",
    detail: {
      label: { rootSelector: `.${styles_css_default71.root}` }
    }
  };
  return getAnalyticsMetadataAttribute(metadata);
};
var ExpandableDeprecatedHeader = ({ id, className: className2, onClick, ariaLabel, ariaControls, expanded, children: children2, icon, onKeyUp, onKeyDown, variant }) => {
  return import_react206.default.createElement(
    "div",
    Object.assign({ id, role: "button", className: clsx_m_default(className2, styles_css_default74["expand-button"], styles_css_default74["click-target"], styles_css_default74["header-deprecated"], styles_css_default71["header-label"]), tabIndex: 0, onKeyUp, onKeyDown, onClick, "aria-label": ariaLabel, "aria-controls": ariaControls, "aria-expanded": expanded }, getExpandActionAnalyticsMetadataAttribute(expanded)),
    import_react206.default.createElement("div", { className: clsx_m_default(styles_css_default74["icon-container"], styles_css_default74[`icon-container-${variant}`]) }, icon),
    children2
  );
};
var ExpandableNavigationHeader = ({ id, className: className2, onClick, ariaLabelledBy, ariaLabel, ariaControls, expanded, children: children2, icon }) => {
  return import_react206.default.createElement(
    "div",
    { id, className: clsx_m_default(className2, styles_css_default74["click-target"], styles_css_default71["header-label"]) },
    import_react206.default.createElement("button", Object.assign({ className: clsx_m_default(styles_css_default74["icon-container"], styles_css_default74["expand-button"]), "aria-labelledby": ariaLabelledBy, "aria-label": ariaLabel, "aria-controls": ariaControls, "aria-expanded": expanded, type: "button", onClick }, getExpandActionAnalyticsMetadataAttribute(expanded)), icon),
    children2
  );
};
var ExpandableHeaderTextWrapper = ({ id, descriptionId, className: className2, onClick, ariaLabel, ariaControls, expanded, children: children2, icon, headerDescription, headerCounter, headerInfo, headerActions, variant, headingTagOverride, onKeyUp, onKeyDown }) => {
  const isContainer = variant === "container";
  const HeadingTag = headingTagOverride || "div";
  const supportsInteractiveElements = variantSupportsActions(variant);
  const restrictClickableArea = supportsInteractiveElements && (headerInfo || headerActions);
  const actions = supportsInteractiveElements && headerActions;
  const description = variantSupportsDescription(variant) && headerDescription && import_react206.default.createElement("span", { id: descriptionId, className: styles_css_default74[`description-${variant}`] }, headerDescription);
  const listeners = { onClick, onKeyDown, onKeyUp };
  const headerButtonListeners = restrictClickableArea ? listeners : void 0;
  const headingTagListeners = !headerButtonListeners && !isContainer && description ? listeners : void 0;
  const wrapperListeners = !headerButtonListeners && !headingTagListeners ? listeners : void 0;
  const headerButton = import_react206.default.createElement(
    "span",
    Object.assign({ className: clsx_m_default(styles_css_default74["expand-button"], isContainer ? styles_css_default74["header-container-button"] : styles_css_default74["header-button"], headerButtonListeners && styles_css_default74["click-target"]), role: "button", tabIndex: 0, "aria-label": ariaLabel, "aria-labelledby": !ariaLabel && description ? id : void 0, "aria-describedby": description ? descriptionId : void 0, "aria-controls": ariaControls, "aria-expanded": expanded }, headerButtonListeners, headerButtonListeners ? getExpandActionAnalyticsMetadataAttribute(expanded) : {}),
    import_react206.default.createElement("span", { className: clsx_m_default(styles_css_default74["icon-container"], styles_css_default74[`icon-container-${variant}`]) }, icon),
    import_react206.default.createElement("span", { id, className: clsx_m_default(styles_css_default74["header-text"], styles_css_default71["header-label"]) }, children2)
  );
  return import_react206.default.createElement("div", Object.assign({ className: clsx_m_default(className2, wrapperListeners && styles_css_default74["click-target"]) }, wrapperListeners, wrapperListeners ? getExpandActionAnalyticsMetadataAttribute(expanded) : {}), isContainer ? import_react206.default.createElement(InternalHeader, { variant: "h2", description, counter: headerCounter, info: headerInfo, actions, headingTagOverride }, headerButton) : import_react206.default.createElement(
    import_react206.default.Fragment,
    null,
    import_react206.default.createElement(
      "div",
      { className: clsx_m_default(actions && styles_css_default74["header-actions-wrapper"]) },
      import_react206.default.createElement(HeadingTag, Object.assign({ className: clsx_m_default(styles_css_default74["header-wrapper"], headingTagListeners && styles_css_default74["click-target"]) }, headingTagListeners, headingTagListeners ? getExpandActionAnalyticsMetadataAttribute(expanded) : {}), headerButton),
      actions
    ),
    description && import_react206.default.createElement(Description, { variantOverride: "h3" }, description)
  ));
};
var ExpandableSectionHeader = ({ id, descriptionId, className: className2, variant, header, headerText, headerDescription, headerCounter, headerInfo, headerActions, headingTagOverride, expanded, ariaControls, ariaLabel, ariaLabelledBy, onKeyUp, onKeyDown, onClick }) => {
  const alwaysShowDivider = variantRequiresActionsDivider(variant) && headerActions;
  const icon = import_react206.default.createElement(internal_default, { size: variant === "container" ? "medium" : "normal", className: clsx_m_default(styles_css_default74.icon, expanded && styles_css_default74.expanded), name: "caret-down-filled" });
  const defaultHeaderProps = {
    id,
    icon,
    expanded,
    ariaControls,
    ariaLabel,
    onClick,
    variant
  };
  if ((headerCounter || headerInfo) && !variantSupportsInfoLink(variant) && isDevelopment2) {
    warnOnce(componentName, 'The `headerCounter` and `headerInfo` props are only supported for the "container" variant.');
  }
  if (headerActions && !variantSupportsActions(variant) && isDevelopment2) {
    warnOnce(componentName, `The \`headerActions\` prop is only supported for the "container" and "default" variants.`);
  }
  if (headerDescription && !variantSupportsDescription(variant) && isDevelopment2) {
    warnOnce(componentName, `The \`headerDescription\` prop is not supported for the ${variant} variant.`);
  }
  const wrapperClassName = clsx_m_default(styles_css_default74.wrapper, styles_css_default74[`wrapper-${variant}`], (expanded || alwaysShowDivider) && styles_css_default74["wrapper-expanded"]);
  if (variant === "navigation") {
    return import_react206.default.createElement(ExpandableNavigationHeader, Object.assign({ className: clsx_m_default(className2, wrapperClassName), ariaLabelledBy }, defaultHeaderProps), headerText !== null && headerText !== void 0 ? headerText : header);
  }
  if (headerText || variant === "inline") {
    if (!headerText && header && variant === "inline") {
      warnOnce(componentName, "Only `headerText` instead of `header` is supported for `inline` variant.");
    }
    return import_react206.default.createElement(ExpandableHeaderTextWrapper, Object.assign({ className: clsx_m_default(className2, wrapperClassName, expanded && styles_css_default74.expanded), descriptionId, headerDescription, headerCounter, headerInfo, headerActions, headingTagOverride, onKeyUp, onKeyDown }, defaultHeaderProps), headerText);
  }
  if (variant === "container" && header && isDevelopment2) {
    warnOnce(componentName, "Use `headerText` instead of `header` to provide the button within the heading for a11y.");
  }
  return import_react206.default.createElement(ExpandableDeprecatedHeader, Object.assign({ className: clsx_m_default(className2, wrapperClassName, styles_css_default74.focusable, expanded && styles_css_default74.expanded), onKeyUp, onKeyDown }, defaultHeaderProps), header);
};

// node_modules/@cloudscape-design/components/expandable-section/internal.js
function InternalExpandableSection(_a2) {
  var { expanded: controlledExpanded, defaultExpanded, onChange, variant = "default", children: children2, header, headerText, headerCounter, headerDescription, headerInfo, headerActions, headingTagOverride, disableContentPaddings, headerAriaLabel, __internalRootRef, __injectAnalyticsComponentMetadata } = _a2, props2 = __rest(_a2, ["expanded", "defaultExpanded", "onChange", "variant", "children", "header", "headerText", "headerCounter", "headerDescription", "headerInfo", "headerActions", "headingTagOverride", "disableContentPaddings", "headerAriaLabel", "__internalRootRef", "__injectAnalyticsComponentMetadata"]);
  const ref = (0, import_react207.useRef)(null);
  const controlId = useUniqueId();
  const triggerControlId = `${controlId}-trigger`;
  const descriptionId = `${controlId}-description`;
  const baseProps = getBaseProps(props2);
  const [expanded, setExpanded] = useControllable2(controlledExpanded, onChange, defaultExpanded, {
    componentName: "ExpandableSection",
    controlledProp: "expanded",
    changeHandler: "onChange"
  });
  const onExpandChange = (0, import_react207.useCallback)((expanded2) => {
    setExpanded(expanded2);
    fireNonCancelableEvent(onChange, { expanded: expanded2 });
  }, [onChange, setExpanded]);
  const onClick = (0, import_react207.useCallback)(() => {
    onExpandChange(!expanded);
  }, [onExpandChange, expanded]);
  const onKeyUp = (0, import_react207.useCallback)((event) => {
    const interactionKeys = [KeyCode2.enter, KeyCode2.space];
    if (interactionKeys.indexOf(event.keyCode) !== -1) {
      onExpandChange(!expanded);
    }
  }, [onExpandChange, expanded]);
  const onKeyDown = (0, import_react207.useCallback)((event) => {
    if (event.keyCode === KeyCode2.space) {
      event.preventDefault();
    }
  }, []);
  const triggerProps = {
    ariaControls: controlId,
    ariaLabel: headerAriaLabel,
    ariaLabelledBy: headerAriaLabel ? void 0 : triggerControlId,
    onKeyUp,
    onKeyDown,
    onClick
  };
  const baseVariant = variant === "stacked" ? "container" : variant;
  return import_react207.default.createElement(
    ExpandableSectionContainer,
    Object.assign({}, props2, { expanded, className: clsx_m_default(baseProps.className, styles_css_default74.root, styles_css_default71.root), variant, disableContentPaddings, __injectAnalyticsComponentMetadata, header: import_react207.default.createElement(ExpandableSectionHeader, Object.assign({ id: triggerControlId, descriptionId, className: clsx_m_default(styles_css_default74.header, styles_css_default74[`header-${baseVariant}`], screenReaderTextClass), variant: baseVariant, expanded: !!expanded, header, headerText, headerDescription, headerCounter, headerInfo, headerActions, headingTagOverride }, triggerProps)), __internalRootRef }),
    import_react207.default.createElement(
      CSSTransition_default,
      { in: expanded, timeout: 30, classNames: { enter: styles_css_default74["content-enter"] }, nodeRef: ref },
      import_react207.default.createElement("div", { id: controlId, ref, className: clsx_m_default(styles_css_default74.content, styles_css_default74[`content-${baseVariant}`], expanded && styles_css_default74["content-expanded"]), role: "group", "aria-label": triggerProps.ariaLabel, "aria-labelledby": triggerProps.ariaLabelledBy, "aria-describedby": variantSupportsDescription(baseVariant) && headerDescription ? descriptionId : void 0 }, children2)
    )
  );
}

// node_modules/@cloudscape-design/components/internal/components/chart-series-marker/index.js
var import_react208 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-series-marker/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/chart-series-marker/styles.scoped.css";
var styles_css_default75 = {
  "marker": "awsui_marker_1isd1_1esa0_145",
  "marker--line": "awsui_marker--line_1isd1_1esa0_185",
  "marker--rectangle": "awsui_marker--rectangle_1isd1_1esa0_189",
  "marker--hollow-rectangle": "awsui_marker--hollow-rectangle_1isd1_1esa0_196",
  "marker--dashed": "awsui_marker--dashed_1isd1_1esa0_212"
};

// node_modules/@cloudscape-design/components/internal/components/chart-series-marker/index.js
var chart_series_marker_default = (0, import_react208.memo)(ChartSeriesMarker);
function ChartSeriesMarker({ type = "line", color: color2 }) {
  return import_react208.default.createElement("span", { className: clsx_m_default(styles_css_default75.marker, styles_css_default75[`marker--${type}`]), style: { backgroundColor: color2 }, "aria-hidden": "true" });
}

// node_modules/@cloudscape-design/components/internal/components/chart-series-details/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/chart-series-details/styles.scoped.css";
var styles_css_default76 = {
  "dimmed": "awsui_dimmed_10ipo_8y0ip_153",
  "marker": "awsui_marker_10ipo_8y0ip_205",
  "marker--line": "awsui_marker--line_10ipo_8y0ip_245",
  "marker--rectangle": "awsui_marker--rectangle_10ipo_8y0ip_249",
  "marker--hollow-rectangle": "awsui_marker--hollow-rectangle_10ipo_8y0ip_256",
  "marker--dashed": "awsui_marker--dashed_10ipo_8y0ip_272",
  "root": "awsui_root_10ipo_8y0ip_291",
  "value": "awsui_value_10ipo_8y0ip_323",
  "expandable": "awsui_expandable_10ipo_8y0ip_327",
  "list-item": "awsui_list-item_10ipo_8y0ip_331",
  "inner-list-item": "awsui_inner-list-item_10ipo_8y0ip_332",
  "key-value-pair": "awsui_key-value-pair_10ipo_8y0ip_337",
  "expandable-section": "awsui_expandable-section_10ipo_8y0ip_338",
  "key": "awsui_key_10ipo_8y0ip_337",
  "sub-items": "awsui_sub-items_10ipo_8y0ip_353",
  "list": "awsui_list_10ipo_8y0ip_331",
  "compact": "awsui_compact_10ipo_8y0ip_379",
  "with-sub-items": "awsui_with-sub-items_10ipo_8y0ip_384",
  "full-width": "awsui_full-width_10ipo_8y0ip_389"
};

// node_modules/@cloudscape-design/components/internal/components/chart-series-details/index.js
var chart_series_details_default = (0, import_react209.memo)((0, import_react209.forwardRef)(ChartSeriesDetails));
function ChartSeriesDetails(_a2, ref) {
  var { details, expandedSeries, setPopoverText, setExpandedState, compactList } = _a2, restProps = __rest(_a2, ["details", "expandedSeries", "setPopoverText", "setExpandedState", "compactList"]);
  const baseProps = getBaseProps(restProps);
  const className2 = clsx_m_default(baseProps.className, styles_css_default76.root);
  const detailsRef = (0, import_react209.useRef)(null);
  const mergedRef = useMergeRefs(ref, detailsRef);
  (0, import_react209.useEffect)(() => {
    if (setPopoverText) {
      if (detailsRef.current) {
        setPopoverText(getSeriesDetailsText(detailsRef.current));
      }
      return () => {
        setPopoverText("");
      };
    }
  }, [details, setPopoverText]);
  const isExpanded = (seriesTitle) => !!expandedSeries && expandedSeries.has(seriesTitle);
  return import_react209.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: className2, ref: mergedRef }),
    import_react209.default.createElement("ul", { className: clsx_m_default(styles_css_default76.list, compactList && styles_css_default76.compact) }, details.map(({ key: key2, value, markerType, color: color2, isDimmed, subItems, expandableId }, index) => import_react209.default.createElement("li", { key: index, className: clsx_m_default({
      [styles_css_default76.dimmed]: isDimmed,
      [styles_css_default76["list-item"]]: true,
      [styles_css_default76["with-sub-items"]]: subItems === null || subItems === void 0 ? void 0 : subItems.length,
      [styles_css_default76.expandable]: !!expandableId
    }) }, (subItems === null || subItems === void 0 ? void 0 : subItems.length) && !!expandableId ? import_react209.default.createElement(ExpandableSeries, { itemKey: key2, value, markerType, color: color2, subItems, expanded: isExpanded(expandableId), setExpandedState: (state) => setExpandedState && setExpandedState(expandableId, state) }) : import_react209.default.createElement(NonExpandableSeries, { itemKey: key2, value, markerType, color: color2, subItems }))))
  );
}
function SubItems({ items, expandable, expanded }) {
  return import_react209.default.createElement("ul", { className: clsx_m_default(styles_css_default76["sub-items"], expandable && styles_css_default76.expandable) }, items.map(({ key: key2, value }, index) => import_react209.default.createElement(
    "li",
    { key: index, className: clsx_m_default(styles_css_default76["inner-list-item"], styles_css_default76["key-value-pair"], (expanded || !expandable) && screenReaderTextClass) },
    import_react209.default.createElement("span", { className: styles_css_default76.key }, key2),
    import_react209.default.createElement("span", { className: styles_css_default76.value }, value)
  )));
}
function ExpandableSeries({ itemKey, value, subItems, markerType, color: color2, expanded, setExpandedState }) {
  return import_react209.default.createElement(
    "div",
    { className: styles_css_default76["expandable-section"] },
    markerType && color2 && import_react209.default.createElement(chart_series_marker_default, { type: markerType, color: color2 }),
    import_react209.default.createElement(
      "div",
      { className: styles_css_default76["full-width"] },
      import_react209.default.createElement(
        InternalExpandableSection,
        { variant: "compact", headerText: itemKey, headerActions: import_react209.default.createElement("span", { className: clsx_m_default(styles_css_default76.value, styles_css_default76.expandable) }, value), expanded, onChange: ({ detail }) => setExpandedState(detail.expanded) },
        import_react209.default.createElement(SubItems, { items: subItems, expandable: true, expanded })
      )
    )
  );
}
function NonExpandableSeries({ itemKey, value, subItems, markerType, color: color2 }) {
  return import_react209.default.createElement(
    import_react209.default.Fragment,
    null,
    import_react209.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default76["key-value-pair"], screenReaderTextClass) },
      import_react209.default.createElement(
        "div",
        { className: styles_css_default76.key },
        markerType && color2 && import_react209.default.createElement(chart_series_marker_default, { type: markerType, color: color2 }),
        import_react209.default.createElement("span", null, itemKey)
      ),
      import_react209.default.createElement("span", { className: styles_css_default76.value }, value)
    ),
    subItems && import_react209.default.createElement(SubItems, { items: subItems })
  );
}

// node_modules/@cloudscape-design/components/area-chart/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/area-chart/styles.scoped.css";
var styles_css_default77 = {
  "series": "awsui_series_y1yrh_expam_189",
  "root": "awsui_root_y1yrh_expam_203",
  "series--highlighted": "awsui_series--highlighted_y1yrh_expam_215",
  "series--dimmed": "awsui_series--dimmed_y1yrh_expam_219",
  "series--threshold": "awsui_series--threshold_y1yrh_expam_223",
  "popover-divider": "awsui_popover-divider_y1yrh_expam_228"
};

// node_modules/@cloudscape-design/components/area-chart/elements/chart-popover.js
function AreaChartPopover({ model, highlightDetails, dismissAriaLabel, footer, size, onBlur }) {
  if (!highlightDetails) {
    return null;
  }
  const popoverProps = {
    title: highlightDetails.formattedX,
    trackRef: model.refs.verticalMarker,
    trackKey: highlightDetails.highlightIndex,
    dismissButton: highlightDetails.isPopoverPinned,
    onDismiss: model.handlers.onPopoverDismiss,
    onMouseLeave: model.handlers.onPopoverLeave,
    ref: model.refs.popoverRef
  };
  return import_react210.default.createElement(
    chart_popover_default,
    Object.assign({}, popoverProps, { container: model.refs.container.current, dismissAriaLabel, size, onBlur, footer }),
    import_react210.default.createElement(chart_series_details_default, { details: highlightDetails.seriesDetails }),
    import_react210.default.createElement("div", { className: styles_css_default77["popover-divider"] }),
    import_react210.default.createElement(chart_series_details_default, { details: highlightDetails.totalDetails })
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/data-series.js
var import_react213 = __toESM(require_react());

// node_modules/@cloudscape-design/components/area-chart/elements/area-series.js
var import_react211 = __toESM(require_react());

// node_modules/d3-path/src/path.js
var pi = Math.PI;
var tau = 2 * pi;
var epsilon = 1e-6;
var tauEpsilon = tau - epsilon;
function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null;
  this._ = "";
}
function path() {
  return new Path();
}
Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function(x3, y4) {
    this._ += "M" + (this._x0 = this._x1 = +x3) + "," + (this._y0 = this._y1 = +y4);
  },
  closePath: function() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function(x3, y4) {
    this._ += "L" + (this._x1 = +x3) + "," + (this._y1 = +y4);
  },
  quadraticCurveTo: function(x1, y1, x3, y4) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x3) + "," + (this._y1 = +y4);
  },
  bezierCurveTo: function(x1, y1, x22, y22, x3, y4) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x22 + "," + +y22 + "," + (this._x1 = +x3) + "," + (this._y1 = +y4);
  },
  arcTo: function(x1, y1, x22, y22, r2) {
    x1 = +x1, y1 = +y1, x22 = +x22, y22 = +y22, r2 = +r2;
    var x0 = this._x1, y0 = this._y1, x21 = x22 - x1, y21 = y22 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
    if (r2 < 0) throw new Error("negative radius: " + r2);
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } else if (!(l01_2 > epsilon)) ;
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r2) {
      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
    } else {
      var x20 = x22 - x0, y20 = y22 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r2 * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
      if (Math.abs(t01 - 1) > epsilon) {
        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
      }
      this._ += "A" + r2 + "," + r2 + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
    }
  },
  arc: function(x3, y4, r2, a0, a1, ccw) {
    x3 = +x3, y4 = +y4, r2 = +r2, ccw = !!ccw;
    var dx = r2 * Math.cos(a0), dy = r2 * Math.sin(a0), x0 = x3 + dx, y0 = y4 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
    if (r2 < 0) throw new Error("negative radius: " + r2);
    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
      this._ += "L" + x0 + "," + y0;
    }
    if (!r2) return;
    if (da < 0) da = da % tau + tau;
    if (da > tauEpsilon) {
      this._ += "A" + r2 + "," + r2 + ",0,1," + cw + "," + (x3 - dx) + "," + (y4 - dy) + "A" + r2 + "," + r2 + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } else if (da > epsilon) {
      this._ += "A" + r2 + "," + r2 + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x3 + r2 * Math.cos(a1)) + "," + (this._y1 = y4 + r2 * Math.sin(a1));
    }
  },
  rect: function(x3, y4, w2, h3) {
    this._ += "M" + (this._x0 = this._x1 = +x3) + "," + (this._y0 = this._y1 = +y4) + "h" + +w2 + "v" + +h3 + "h" + -w2 + "Z";
  },
  toString: function() {
    return this._;
  }
};
var path_default = path;

// node_modules/d3-shape/src/constant.js
function constant_default(x3) {
  return function constant2() {
    return x3;
  };
}

// node_modules/d3-shape/src/math.js
var abs = Math.abs;
var atan2 = Math.atan2;
var cos = Math.cos;
var max = Math.max;
var min = Math.min;
var sin = Math.sin;
var sqrt = Math.sqrt;
var epsilon2 = 1e-12;
var pi2 = Math.PI;
var halfPi = pi2 / 2;
var tau2 = 2 * pi2;
function acos(x3) {
  return x3 > 1 ? 0 : x3 < -1 ? pi2 : Math.acos(x3);
}
function asin(x3) {
  return x3 >= 1 ? halfPi : x3 <= -1 ? -halfPi : Math.asin(x3);
}

// node_modules/d3-shape/src/arc.js
function arcInnerRadius(d3) {
  return d3.innerRadius;
}
function arcOuterRadius(d3) {
  return d3.outerRadius;
}
function arcStartAngle(d3) {
  return d3.startAngle;
}
function arcEndAngle(d3) {
  return d3.endAngle;
}
function arcPadAngle(d3) {
  return d3 && d3.padAngle;
}
function intersect(x0, y0, x1, y1, x22, y22, x3, y32) {
  var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x22, y322 = y32 - y22, t2 = y322 * x10 - x32 * y10;
  if (t2 * t2 < epsilon2) return;
  t2 = (x32 * (y0 - y22) - y322 * (x0 - x22)) / t2;
  return [x0 + t2 * x10, y0 + t2 * y10];
}
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d22 = dx * dx + dy * dy, r2 = r1 - rc, D2 = x11 * y10 - x10 * y11, d3 = (dy < 0 ? -1 : 1) * sqrt(max(0, r2 * r2 * d22 - D2 * D2)), cx0 = (D2 * dy - dx * d3) / d22, cy0 = (-D2 * dx - dy * d3) / d22, cx1 = (D2 * dy + dx * d3) / d22, cy1 = (-D2 * dx + dy * d3) / d22, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r2 - 1),
    y11: cy0 * (r1 / r2 - 1)
  };
}
function arc_default() {
  var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant_default(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
  function arc() {
    var buffer, r2, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da = abs(a1 - a0), cw = a1 > a0;
    if (!context) context = buffer = path_default();
    if (r1 < r0) r2 = r1, r1 = r0, r0 = r2;
    if (!(r1 > epsilon2)) context.moveTo(0, 0);
    else if (da > tau2 - epsilon2) {
      context.moveTo(r1 * cos(a0), r1 * sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon2) {
        context.moveTo(r0 * cos(a1), r0 * sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    } else {
      var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon2 && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)), rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t02, t12;
      if (rp > epsilon2) {
        var p0 = asin(rp / r0 * sin(ap)), p1 = asin(rp / r1 * sin(ap));
        if ((da0 -= p0 * 2) > epsilon2) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon2) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }
      var x01 = r1 * cos(a01), y01 = r1 * sin(a01), x10 = r0 * cos(a10), y10 = r0 * sin(a10);
      if (rc > epsilon2) {
        var x11 = r1 * cos(a11), y11 = r1 * sin(a11), x00 = r0 * cos(a00), y00 = r0 * sin(a00), oc;
        if (da < pi2 && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
          var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2), lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = min(rc, (r0 - lc) / (kc - 1));
          rc1 = min(rc, (r1 - lc) / (kc + 1));
        }
      }
      if (!(da1 > epsilon2)) context.moveTo(x01, y01);
      else if (rc1 > epsilon2) {
        t02 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t12 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
        context.moveTo(t02.cx + t02.x01, t02.cy + t02.y01);
        if (rc1 < rc) context.arc(t02.cx, t02.cy, rc1, atan2(t02.y01, t02.x01), atan2(t12.y01, t12.x01), !cw);
        else {
          context.arc(t02.cx, t02.cy, rc1, atan2(t02.y01, t02.x01), atan2(t02.y11, t02.x11), !cw);
          context.arc(0, 0, r1, atan2(t02.cy + t02.y11, t02.cx + t02.x11), atan2(t12.cy + t12.y11, t12.cx + t12.x11), !cw);
          context.arc(t12.cx, t12.cy, rc1, atan2(t12.y11, t12.x11), atan2(t12.y01, t12.x01), !cw);
        }
      } else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
      if (!(r0 > epsilon2) || !(da0 > epsilon2)) context.lineTo(x10, y10);
      else if (rc0 > epsilon2) {
        t02 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t12 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
        context.lineTo(t02.cx + t02.x01, t02.cy + t02.y01);
        if (rc0 < rc) context.arc(t02.cx, t02.cy, rc0, atan2(t02.y01, t02.x01), atan2(t12.y01, t12.x01), !cw);
        else {
          context.arc(t02.cx, t02.cy, rc0, atan2(t02.y01, t02.x01), atan2(t02.y11, t02.x11), !cw);
          context.arc(0, 0, r0, atan2(t02.cy + t02.y11, t02.cx + t02.x11), atan2(t12.cy + t12.y11, t12.cx + t12.x11), cw);
          context.arc(t12.cx, t12.cy, rc0, atan2(t12.y11, t12.x11), atan2(t12.y01, t12.x01), !cw);
        }
      } else context.arc(0, 0, r0, a10, a00, cw);
    }
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }
  arc.centroid = function() {
    var r2 = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a4 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi2 / 2;
    return [cos(a4) * r2, sin(a4) * r2];
  };
  arc.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant_default(+_), arc) : innerRadius;
  };
  arc.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant_default(+_), arc) : outerRadius;
  };
  arc.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant_default(+_), arc) : cornerRadius;
  };
  arc.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant_default(+_), arc) : padRadius;
  };
  arc.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default(+_), arc) : startAngle;
  };
  arc.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default(+_), arc) : endAngle;
  };
  arc.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default(+_), arc) : padAngle;
  };
  arc.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };
  return arc;
}

// node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}
Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
        break;
      case 1:
        this._point = 2;
      // proceed
      default:
        this._context.lineTo(x3, y4);
        break;
    }
  }
};
function linear_default(context) {
  return new Linear(context);
}

// node_modules/d3-shape/src/point.js
function x(p) {
  return p[0];
}
function y(p) {
  return p[1];
}

// node_modules/d3-shape/src/line.js
function line_default() {
  var x3 = x, y4 = y, defined = constant_default(true), context = null, curve = linear_default, output = null;
  function line(data) {
    var i2, n = data.length, d3, defined0 = false, buffer;
    if (context == null) output = curve(buffer = path_default());
    for (i2 = 0; i2 <= n; ++i2) {
      if (!(i2 < n && defined(d3 = data[i2], i2, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();
        else output.lineEnd();
      }
      if (defined0) output.point(+x3(d3, i2, data), +y4(d3, i2, data));
    }
    if (buffer) return output = null, buffer + "" || null;
  }
  line.x = function(_) {
    return arguments.length ? (x3 = typeof _ === "function" ? _ : constant_default(+_), line) : x3;
  };
  line.y = function(_) {
    return arguments.length ? (y4 = typeof _ === "function" ? _ : constant_default(+_), line) : y4;
  };
  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default(!!_), line) : defined;
  };
  line.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };
  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };
  return line;
}

// node_modules/d3-shape/src/area.js
function area_default() {
  var x0 = x, x1 = null, y0 = constant_default(0), y1 = y, defined = constant_default(true), context = null, curve = linear_default, output = null;
  function area(data) {
    var i2, j, k3, n = data.length, d3, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
    if (context == null) output = curve(buffer = path_default());
    for (i2 = 0; i2 <= n; ++i2) {
      if (!(i2 < n && defined(d3 = data[i2], i2, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i2;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k3 = i2 - 1; k3 >= j; --k3) {
            output.point(x0z[k3], y0z[k3]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i2] = +x0(d3, i2, data), y0z[i2] = +y0(d3, i2, data);
        output.point(x1 ? +x1(d3, i2, data) : x0z[i2], y1 ? +y1(d3, i2, data) : y0z[i2]);
      }
    }
    if (buffer) return output = null, buffer + "" || null;
  }
  function arealine() {
    return line_default().defined(defined).curve(curve).context(context);
  }
  area.x = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default(+_), x1 = null, area) : x0;
  };
  area.x0 = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default(+_), area) : x0;
  };
  area.x1 = function(_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant_default(+_), area) : x1;
  };
  area.y = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default(+_), y1 = null, area) : y0;
  };
  area.y0 = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default(+_), area) : y0;
  };
  area.y1 = function(_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant_default(+_), area) : y1;
  };
  area.lineX0 = area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };
  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };
  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };
  area.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default(!!_), area) : defined;
  };
  area.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };
  area.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };
  return area;
}

// node_modules/d3-shape/src/descending.js
function descending_default(a4, b2) {
  return b2 < a4 ? -1 : b2 > a4 ? 1 : b2 >= a4 ? 0 : NaN;
}

// node_modules/d3-shape/src/identity.js
function identity_default(d3) {
  return d3;
}

// node_modules/d3-shape/src/pie.js
function pie_default() {
  var value = identity_default, sortValues = descending_default, sort = null, startAngle = constant_default(0), endAngle = constant_default(tau2), padAngle = constant_default(0);
  function pie(data) {
    var i2, n = data.length, j, k3, sum2 = 0, index = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min(tau2, Math.max(-tau2, endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p * (da < 0 ? -1 : 1), v;
    for (i2 = 0; i2 < n; ++i2) {
      if ((v = arcs[index[i2] = i2] = +value(data[i2], i2, data)) > 0) {
        sum2 += v;
      }
    }
    if (sortValues != null) index.sort(function(i3, j2) {
      return sortValues(arcs[i3], arcs[j2]);
    });
    else if (sort != null) index.sort(function(i3, j2) {
      return sort(data[i3], data[j2]);
    });
    for (i2 = 0, k3 = sum2 ? (da - n * pa) / sum2 : 0; i2 < n; ++i2, a0 = a1) {
      j = index[i2], v = arcs[j], a1 = a0 + (v > 0 ? v * k3 : 0) + pa, arcs[j] = {
        data: data[j],
        index: i2,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }
    return arcs;
  }
  pie.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant_default(+_), pie) : value;
  };
  pie.sortValues = function(_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };
  pie.sort = function(_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };
  pie.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default(+_), pie) : startAngle;
  };
  pie.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default(+_), pie) : endAngle;
  };
  pie.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default(+_), pie) : padAngle;
  };
  return pie;
}

// node_modules/d3-shape/src/curve/radial.js
var curveRadialLinear = curveRadial(linear_default);
function Radial(curve) {
  this._curve = curve;
}
Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a4, r2) {
    this._curve.point(r2 * Math.sin(a4), r2 * -Math.cos(a4));
  }
};
function curveRadial(curve) {
  function radial(context) {
    return new Radial(curve(context));
  }
  radial._curve = curve;
  return radial;
}

// node_modules/d3-shape/src/array.js
var slice = Array.prototype.slice;

// node_modules/d3-shape/src/symbol/diamond.js
var tan30 = Math.sqrt(1 / 3);
var tan30_2 = tan30 * 2;

// node_modules/d3-shape/src/symbol/star.js
var kr = Math.sin(pi2 / 10) / Math.sin(7 * pi2 / 10);
var kx = Math.sin(tau2 / 10) * kr;
var ky = -Math.cos(tau2 / 10) * kr;

// node_modules/d3-shape/src/symbol/triangle.js
var sqrt3 = Math.sqrt(3);

// node_modules/d3-shape/src/symbol/wye.js
var s = Math.sqrt(3) / 2;
var k = 1 / Math.sqrt(12);
var a = (k / 2 + 1) * 3;

// node_modules/d3-shape/src/noop.js
function noop_default() {
}

// node_modules/d3-shape/src/curve/basis.js
function point(that, x3, y4) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x3) / 6,
    (that._y0 + 4 * that._y1 + y4) / 6
  );
}
function Basis(context) {
  this._context = context;
}
Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3:
        point(this, this._x1, this._y1);
      // proceed
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
      // proceed
      default:
        point(this, x3, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = x3;
    this._y0 = this._y1, this._y1 = y4;
  }
};

// node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context) {
  this._context = context;
}
BasisClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x3, this._y2 = y4;
        break;
      case 1:
        this._point = 2;
        this._x3 = x3, this._y3 = y4;
        break;
      case 2:
        this._point = 3;
        this._x4 = x3, this._y4 = y4;
        this._context.moveTo((this._x0 + 4 * this._x1 + x3) / 6, (this._y0 + 4 * this._y1 + y4) / 6);
        break;
      default:
        point(this, x3, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = x3;
    this._y0 = this._y1, this._y1 = y4;
  }
};

// node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context) {
  this._context = context;
}
BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x3) / 6, y0 = (this._y0 + 4 * this._y1 + y4) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;
      case 3:
        this._point = 4;
      // proceed
      default:
        point(this, x3, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = x3;
    this._y0 = this._y1, this._y1 = y4;
  }
};

// node_modules/d3-shape/src/curve/bundle.js
function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}
Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x3 = this._x, y4 = this._y, j = x3.length - 1;
    if (j > 0) {
      var x0 = x3[0], y0 = y4[0], dx = x3[j] - x0, dy = y4[j] - y0, i2 = -1, t2;
      while (++i2 <= j) {
        t2 = i2 / j;
        this._basis.point(
          this._beta * x3[i2] + (1 - this._beta) * (x0 + t2 * dx),
          this._beta * y4[i2] + (1 - this._beta) * (y0 + t2 * dy)
        );
      }
    }
    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x3, y4) {
    this._x.push(+x3);
    this._y.push(+y4);
  }
};
var bundle_default = (function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }
  bundle.beta = function(beta2) {
    return custom(+beta2);
  };
  return bundle;
})(0.85);

// node_modules/d3-shape/src/curve/cardinal.js
function point2(that, x3, y4) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x3),
    that._y2 + that._k * (that._y1 - y4),
    that._x2,
    that._y2
  );
}
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        point2(this, this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
        break;
      case 1:
        this._point = 2;
        this._x1 = x3, this._y1 = y4;
        break;
      case 2:
        this._point = 3;
      // proceed
      default:
        point2(this, x3, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var cardinal_default = (function custom2(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom2(+tension2);
  };
  return cardinal;
})(0);

// node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x3, this._y3 = y4;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x3, this._y4 = y4);
        break;
      case 2:
        this._point = 3;
        this._x5 = x3, this._y5 = y4;
        break;
      default:
        point2(this, x3, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var cardinalClosed_default = (function custom3(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom3(+tension2);
  };
  return cardinal;
})(0);

// node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      // proceed
      default:
        point2(this, x3, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var cardinalOpen_default = (function custom4(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom4(+tension2);
  };
  return cardinal;
})(0);

// node_modules/d3-shape/src/curve/catmullRom.js
function point3(that, x3, y4) {
  var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon2) {
    var a4 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a4 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a4 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }
  if (that._l23_a > epsilon2) {
    var b2 = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m3 = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b2 + that._x1 * that._l23_2a - x3 * that._l12_2a) / m3;
    y22 = (y22 * b2 + that._y1 * that._l23_2a - y4 * that._l12_2a) / m3;
  }
  that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        this.point(this._x2, this._y2);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    if (this._point) {
      var x23 = this._x2 - x3, y23 = this._y2 - y4;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
      // proceed
      default:
        point3(this, x3, y4);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var catmullRom_default = (function custom5(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom5(+alpha2);
  };
  return catmullRom;
})(0.5);

// node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    if (this._point) {
      var x23 = this._x2 - x3, y23 = this._y2 - y4;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x3, this._y3 = y4;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x3, this._y4 = y4);
        break;
      case 2:
        this._point = 3;
        this._x5 = x3, this._y5 = y4;
        break;
      default:
        point3(this, x3, y4);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var catmullRomClosed_default = (function custom6(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom6(+alpha2);
  };
  return catmullRom;
})(0.5);

// node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    if (this._point) {
      var x23 = this._x2 - x3, y23 = this._y2 - y4;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      // proceed
      default:
        point3(this, x3, y4);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var catmullRomOpen_default = (function custom7(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom7(+alpha2);
  };
  return catmullRom;
})(0.5);

// node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context) {
  this._context = context;
}
LinearClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point) this._context.closePath();
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    if (this._point) this._context.lineTo(x3, y4);
    else this._point = 1, this._context.moveTo(x3, y4);
  }
};

// node_modules/d3-shape/src/curve/monotone.js
function sign(x3) {
  return x3 < 0 ? -1 : 1;
}
function slope3(that, x22, y22) {
  var h0 = that._x1 - that._x0, h1 = x22 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y22 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
function slope2(that, t2) {
  var h3 = that._x1 - that._x0;
  return h3 ? (3 * (that._y1 - that._y0) / h3 - t2) / 2 : t2;
}
function point4(that, t02, t12) {
  var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t02, x1 - dx, y1 - dx * t12, x1, y1);
}
function MonotoneX(context) {
  this._context = context;
}
MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
      case 3:
        point4(this, this._t0, slope2(this, this._t0));
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    var t12 = NaN;
    x3 = +x3, y4 = +y4;
    if (x3 === this._x1 && y4 === this._y1) return;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        point4(this, slope2(this, t12 = slope3(this, x3, y4)), t12);
        break;
      default:
        point4(this, this._t0, t12 = slope3(this, x3, y4));
        break;
    }
    this._x0 = this._x1, this._x1 = x3;
    this._y0 = this._y1, this._y1 = y4;
    this._t0 = t12;
  }
};
function MonotoneY(context) {
  this._context = new ReflectContext(context);
}
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x3, y4) {
  MonotoneX.prototype.point.call(this, y4, x3);
};
function ReflectContext(context) {
  this._context = context;
}
ReflectContext.prototype = {
  moveTo: function(x3, y4) {
    this._context.moveTo(y4, x3);
  },
  closePath: function() {
    this._context.closePath();
  },
  lineTo: function(x3, y4) {
    this._context.lineTo(y4, x3);
  },
  bezierCurveTo: function(x1, y1, x22, y22, x3, y4) {
    this._context.bezierCurveTo(y1, x1, y22, x22, y4, x3);
  }
};

// node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}
Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x3 = this._x, y4 = this._y, n = x3.length;
    if (n) {
      this._line ? this._context.lineTo(x3[0], y4[0]) : this._context.moveTo(x3[0], y4[0]);
      if (n === 2) {
        this._context.lineTo(x3[1], y4[1]);
      } else {
        var px = controlPoints(x3), py = controlPoints(y4);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x3[i1], y4[i1]);
        }
      }
    }
    if (this._line || this._line !== 0 && n === 1) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x3, y4) {
    this._x.push(+x3);
    this._y.push(+y4);
  }
};
function controlPoints(x3) {
  var i2, n = x3.length - 1, m3, a4 = new Array(n), b2 = new Array(n), r2 = new Array(n);
  a4[0] = 0, b2[0] = 2, r2[0] = x3[0] + 2 * x3[1];
  for (i2 = 1; i2 < n - 1; ++i2) a4[i2] = 1, b2[i2] = 4, r2[i2] = 4 * x3[i2] + 2 * x3[i2 + 1];
  a4[n - 1] = 2, b2[n - 1] = 7, r2[n - 1] = 8 * x3[n - 1] + x3[n];
  for (i2 = 1; i2 < n; ++i2) m3 = a4[i2] / b2[i2 - 1], b2[i2] -= m3, r2[i2] -= m3 * r2[i2 - 1];
  a4[n - 1] = r2[n - 1] / b2[n - 1];
  for (i2 = n - 2; i2 >= 0; --i2) a4[i2] = (r2[i2] - a4[i2 + 1]) / b2[i2];
  b2[n - 1] = (x3[n] + a4[n - 1]) / 2;
  for (i2 = 0; i2 < n - 1; ++i2) b2[i2] = 2 * x3[i2 + 1] - a4[i2 + 1];
  return [a4, b2];
}

// node_modules/d3-shape/src/curve/step.js
function Step(context, t2) {
  this._context = context;
  this._t = t2;
}
Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x3, y4) {
    x3 = +x3, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y4) : this._context.moveTo(x3, y4);
        break;
      case 1:
        this._point = 2;
      // proceed
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y4);
          this._context.lineTo(x3, y4);
        } else {
          var x1 = this._x * (1 - this._t) + x3 * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y4);
        }
        break;
      }
    }
    this._x = x3, this._y = y4;
  }
};

// node_modules/@cloudscape-design/components/area-chart/elements/area-series.js
var area_series_default = (0, import_react211.memo)(AreaSeries);
function AreaSeries({ data, color: color2, chartAreaClipPath }) {
  const areaGenerator = area_default().x((p) => p.scaled.x).y0((p) => p.scaled.y0).y1((p) => p.scaled.y1);
  const areaPath = areaGenerator(data) || "";
  const lineGenerator = line_default().x((p) => p.scaled.x).y((p) => p.scaled.y1);
  const linePath = lineGenerator(data) || "";
  return import_react211.default.createElement(
    import_react211.default.Fragment,
    null,
    import_react211.default.createElement("path", { "aria-hidden": true, fill: color2, stroke: color2, style: { opacity: 0.4 }, clipPath: `url(#${chartAreaClipPath})`, d: areaPath }),
    import_react211.default.createElement("path", { "aria-hidden": true, stroke: color2, clipPath: `url(#${chartAreaClipPath})`, d: linePath })
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/threshold-series.js
var import_react212 = __toESM(require_react());
var threshold_series_default = (0, import_react212.memo)(ThresholdSeries);
function ThresholdSeries({ data, xScale, color: color2, chartAreaClipPath }) {
  const range3 = xScale.d3Scale.range();
  const y4 = data[0].scaled.y0;
  const path2 = { x1: range3[0], x2: range3[1], y1: y4, y2: y4 };
  return import_react212.default.createElement("line", Object.assign({ "aria-hidden": true, stroke: color2, clipPath: `url(#${chartAreaClipPath})` }, path2));
}

// node_modules/@cloudscape-design/components/area-chart/elements/data-series.js
var data_series_default = (0, import_react213.memo)(DataSeries);
function DataSeries({ model }) {
  const chartAreaClipPath = useUniqueId("awsui-area-chart__chart-area-");
  const highlightedX = useSelector(model.interactions, (state) => state.highlightedX);
  const highlightedSeries = useSelector(model.interactions, (state) => state.highlightedSeries);
  const useHighlightDimmed = !highlightedX;
  const seriesData = [];
  for (let seriesIndex = model.series.length - 1; seriesIndex >= 0; seriesIndex--) {
    if (model.computed.plot.sx[seriesIndex]) {
      seriesData.push([model.series[seriesIndex], model.computed.plot.sx[seriesIndex] || []]);
    }
  }
  return import_react213.default.createElement(
    import_react213.default.Fragment,
    null,
    import_react213.default.createElement(
      "defs",
      { "aria-hidden": "true" },
      import_react213.default.createElement(
        "clipPath",
        { id: chartAreaClipPath },
        import_react213.default.createElement("rect", { x: 0, y: 0, width: model.width, height: model.height })
      )
    ),
    import_react213.default.createElement("g", { role: "group" }, seriesData.map(([series, data]) => {
      const isHighlighted = series === highlightedSeries;
      const isDimmed = !!highlightedSeries && !isHighlighted;
      return import_react213.default.createElement("g", { key: series.title, role: "group", "aria-label": series.title, className: clsx_m_default(styles_css_default77.series, styles_css_default77[`series--${series.type}`], {
        [styles_css_default77["series--highlighted"]]: isHighlighted,
        [styles_css_default77["series--dimmed"]]: useHighlightDimmed && isDimmed
      }) }, series.type === "area" ? import_react213.default.createElement(area_series_default, { data, color: model.getInternalSeries(series).color, chartAreaClipPath }) : import_react213.default.createElement(threshold_series_default, { data, xScale: model.computed.xScale, color: model.getInternalSeries(series).color, chartAreaClipPath }));
    }))
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/highlighted-point.js
var import_react215 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/highlighted-point.js
var import_react214 = __toESM(require_react());
var highlighted_point_default = (0, import_react214.memo)((0, import_react214.forwardRef)(HighlightedPoint));
function HighlightedPoint({ point: point5, role = "group", ariaLabel, ariaHasPopup, ariaExpanded }, ref) {
  if (!point5) {
    return null;
  }
  return import_react214.default.createElement(
    "g",
    { ref, role, "aria-label": ariaLabel, "aria-haspopup": ariaHasPopup, "aria-expanded": ariaExpanded },
    import_react214.default.createElement("circle", { key: point5.key, "aria-hidden": "true", className: styles_css_default64["vertical-marker-circle-active"], cx: point5.x, cy: point5.y, r: 4, stroke: point5.color, fill: point5.color })
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/highlighted-point.js
var highlighted_point_default2 = (0, import_react215.memo)((0, import_react215.forwardRef)(AreaHighlightedPoint));
function AreaHighlightedPoint({ model, ariaLabel }, ref) {
  const highlightedPoint = useSelector(model.interactions, (state) => state.highlightedPoint);
  const isPopoverPinned = useSelector(model.interactions, (state) => state.isPopoverPinned);
  const point5 = highlightedPoint ? {
    key: `${highlightedPoint.index.x}:${highlightedPoint.index.s}`,
    x: highlightedPoint.scaled.x,
    y: highlightedPoint.scaled.y1,
    color: model.getInternalSeries(model.series[highlightedPoint.index.s]).color
  } : null;
  return import_react215.default.createElement(highlighted_point_default, { ref, point: point5, role: "button", ariaLabel, ariaHasPopup: true, ariaExpanded: isPopoverPinned });
}

// node_modules/@cloudscape-design/components/area-chart/elements/use-highlight-details.js
function useHighlightDetails({ model, xTickFormatter, yTickFormatter, detailTotalFormatter, detailTotalLabel }) {
  const i18n = useInternalI18n("area-chart");
  const hX = useSelector(model.interactions, (state) => state.highlightedX);
  const hPoint = useSelector(model.interactions, (state) => state.highlightedPoint);
  const isPopoverPinned = useSelector(model.interactions, (state) => state.isPopoverPinned);
  if (!hX) {
    return null;
  }
  const [firstPoint] = hX;
  const highlightIndex = firstPoint.index.x;
  const seriesPoints = [...model.computed.plot.xs[highlightIndex]];
  const detailsTotal = seriesPoints.reduce((total, point5) => total + point5.value, 0);
  const formattedX = xTickFormatter ? xTickFormatter(firstPoint.x) : firstPoint.x.toString();
  const seriesTitle = hPoint ? getInternalSeries(hPoint).title : "";
  const formattedY = hPoint ? getInternalSeries(hPoint).formatValue(hPoint.value, hPoint.x) : "";
  const seriesDetails = seriesPoints.map((point5) => {
    const { title, formatValue: formatValue2, color: color2, markerType } = getInternalSeries(point5);
    const isDimmed = Boolean(hPoint) && point5 !== hPoint;
    return { key: title, value: formatValue2(point5.value, point5.x), color: color2, markerType, isDimmed };
  });
  const totalDetails = [
    {
      key: i18n("i18nStrings.detailTotalLabel", detailTotalLabel) || "",
      value: detailTotalFormatter ? detailTotalFormatter(detailsTotal) : yTickFormatter ? yTickFormatter(detailsTotal) : detailsTotal
    }
  ];
  const pointDetails = hPoint ? seriesDetails[hPoint.index.s] : null;
  const activeLabel = `${seriesTitle} ${formattedX} ${formattedY}, ${totalDetails[0].key} ${totalDetails[0].value}`;
  return {
    isPopoverPinned,
    highlightIndex,
    formattedX,
    seriesTitle,
    formattedY,
    activeLabel,
    seriesDetails,
    totalDetails,
    pointDetails
  };
  function getInternalSeries(point5) {
    return model.getInternalSeries(model.series[point5.index.s]);
  }
}

// node_modules/@cloudscape-design/components/area-chart/elements/vertical-marker.js
var import_react217 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/vertical-marker.js
var import_react216 = __toESM(require_react());
var vertical_marker_default = (0, import_react216.memo)((0, import_react216.forwardRef)(VerticalMarker));
function VerticalMarker({ height, showPoints = true, showLine = true, points }, ref) {
  const [firstPoint] = points || [];
  return import_react216.default.createElement(
    "g",
    null,
    import_react216.default.createElement("line", { ref, "aria-hidden": "true", className: styles_css_default64["vertical-marker"], style: { visibility: showLine && firstPoint ? "visible" : "hidden" }, x1: firstPoint === null || firstPoint === void 0 ? void 0 : firstPoint.x, x2: firstPoint === null || firstPoint === void 0 ? void 0 : firstPoint.x, y1: 0, y2: height }),
    showPoints && points && points.map((point5) => import_react216.default.createElement("circle", { key: point5.key, "aria-hidden": "true", className: styles_css_default64["vertical-marker-circle"], cx: point5.x, cy: point5.y, r: 4, stroke: point5.color }))
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/vertical-marker.js
var vertical_marker_default2 = (0, import_react217.memo)(AreaVerticalMarker);
function AreaVerticalMarker({ model }) {
  const highlightedX = useSelector(model.interactions, (state) => state.highlightedX);
  const verticalMarker = (highlightedX || []).map((point5) => ({
    key: `${point5.index.x}:${point5.index.s}`,
    x: point5.scaled.x,
    y: point5.scaled.y1,
    color: model.getInternalSeries(model.series[point5.index.s]).color
  }));
  return import_react217.default.createElement(vertical_marker_default, { height: model.height, points: verticalMarker, ref: model.refs.verticalMarker });
}

// node_modules/@cloudscape-design/components/area-chart/chart-container.js
var DEFAULT_CHART_WIDTH = 500;
var INLINE_START_LABELS_MARGIN = 16;
var BLOCK_END_LABELS_OFFSET = 12;
var chart_container_default = (0, import_react218.memo)(ChartContainer);
function ChartContainer({ model, autoWidth, xTitle, yTitle, detailPopoverSize, detailPopoverFooter, ariaLabel, ariaLabelledby, ariaDescription, i18nStrings: { xTickFormatter: deprecatedXTickFormatter, yTickFormatter: deprecatedYTickFormatter, detailTotalFormatter: deprecatedDetailTotalFormatter, detailTotalLabel, chartAriaRoleDescription, xAxisAriaRoleDescription, yAxisAriaRoleDescription, detailPopoverDismissAriaLabel } = {}, fitHeight, hasFilters, minHeight, xTickFormatter = deprecatedXTickFormatter, yTickFormatter = deprecatedYTickFormatter, detailTotalFormatter = deprecatedDetailTotalFormatter, isRTL }) {
  const [inlineStartLabelsWidth, setInlineStartLabelsWidth] = (0, import_react218.useState)(0);
  const [containerWidth, containerWidthRef] = useContainerWidth(DEFAULT_CHART_WIDTH);
  const maxInlineStartLabelsWidth = Math.round(containerWidth / 2);
  const blockEndLabelsProps = useBLockEndLabels({
    ticks: model.computed.xTicks,
    scale: model.computed.xScale,
    tickFormatter: xTickFormatter
  });
  const plotWidth = Math.max(0, containerWidth - inlineStartLabelsWidth - INLINE_START_LABELS_MARGIN);
  (0, import_react218.useEffect)(() => {
    autoWidth(plotWidth);
  }, [autoWidth, plotWidth]);
  const highlightDetails = useHighlightDetails({
    model,
    xTickFormatter,
    yTickFormatter,
    detailTotalFormatter,
    detailTotalLabel
  });
  const highlightedPointRef = (0, import_react218.useRef)(null);
  const mergedRef = useMergeRefs(containerWidthRef, model.refs.container);
  const isPointHighlighted = model.interactions.get().highlightedPoint !== null;
  const highlightedX = useSelector(model.interactions, (state) => state.highlightedX);
  const detailPopoverFooterContent = (0, import_react218.useMemo)(() => detailPopoverFooter && highlightedX ? detailPopoverFooter(highlightedX[0].x) : null, [detailPopoverFooter, highlightedX]);
  return import_react218.default.createElement(CartesianChartContainer, { ref: mergedRef, minHeight: minHeight + blockEndLabelsProps.height, fitHeight: !!fitHeight, hasFilters, leftAxisLabel: import_react218.default.createElement(axis_label_default, { axis: "y", position: "left", title: yTitle }), leftAxisLabelMeasure: import_react218.default.createElement(labels_measure_default, { scale: model.computed.yScale, ticks: model.computed.yTicks, tickFormatter: yTickFormatter, autoWidth: setInlineStartLabelsWidth, maxLabelsWidth: maxInlineStartLabelsWidth }), bottomAxisLabel: import_react218.default.createElement(axis_label_default, { axis: "x", position: "bottom", title: xTitle }), chartPlot: import_react218.default.createElement(
    chart_plot_default,
    { ref: model.refs.plot, width: "100%", height: fitHeight ? `calc(100% - ${blockEndLabelsProps.height}px)` : model.height, offsetBottom: blockEndLabelsProps.height, ariaLabel, ariaLabelledby, ariaDescription, ariaRoleDescription: chartAriaRoleDescription, activeElementKey: !(highlightDetails === null || highlightDetails === void 0 ? void 0 : highlightDetails.isPopoverPinned) && (highlightDetails === null || highlightDetails === void 0 ? void 0 : highlightDetails.activeLabel), activeElementRef: isPointHighlighted ? highlightedPointRef : model.refs.verticalMarker, activeElementFocusOffset: isPointHighlighted ? 3 : { x: 8, y: 0 }, isClickable: !(highlightDetails === null || highlightDetails === void 0 ? void 0 : highlightDetails.isPopoverPinned), onMouseMove: model.handlers.onSVGMouseMove, onMouseOut: model.handlers.onSVGMouseOut, onClick: model.handlers.onSVGMouseDown, onKeyDown: model.handlers.onSVGKeyDown, onApplicationFocus: model.handlers.onApplicationFocus, onApplicationBlur: model.handlers.onApplicationBlur },
    import_react218.default.createElement("line", { ref: model.refs.plotMeasure, x1: "0", x2: "0", y1: "0", y2: "100%", stroke: "transparent", strokeWidth: 1, style: { pointerEvents: "none" } }),
    import_react218.default.createElement(inline_start_labels_default, { plotWidth: model.width, plotHeight: model.height, scale: model.computed.yScale, ticks: model.computed.yTicks, tickFormatter: yTickFormatter, title: yTitle, ariaRoleDescription: yAxisAriaRoleDescription, maxLabelsWidth: maxInlineStartLabelsWidth }),
    import_react218.default.createElement(data_series_default, { model }),
    import_react218.default.createElement(block_end_labels_default, Object.assign({}, blockEndLabelsProps, { width: model.width, height: model.height, scale: model.computed.xScale, title: xTitle, ariaRoleDescription: xAxisAriaRoleDescription, offsetLeft: inlineStartLabelsWidth + BLOCK_END_LABELS_OFFSET, offsetRight: BLOCK_END_LABELS_OFFSET, isRTL })),
    import_react218.default.createElement(emphasized_baseline_default, { width: model.width, height: model.height, scale: model.computed.yScale }),
    import_react218.default.createElement(vertical_marker_default2, { model }),
    import_react218.default.createElement(highlighted_point_default2, { ref: highlightedPointRef, model, ariaLabel: highlightDetails === null || highlightDetails === void 0 ? void 0 : highlightDetails.activeLabel })
  ), popover: import_react218.default.createElement(AreaChartPopover, { model, highlightDetails, dismissAriaLabel: detailPopoverDismissAriaLabel, size: detailPopoverSize, footer: detailPopoverFooterContent, onBlur: model.handlers.onApplicationBlur }) });
}

// node_modules/@cloudscape-design/components/area-chart/elements/area-chart-filter.js
var import_react255 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-filter/index.js
var import_react254 = __toESM(require_react());

// node_modules/@cloudscape-design/components/form-field/internal.js
var import_react220 = __toESM(require_react());

// node_modules/@cloudscape-design/components/grid/internal.js
var import_react219 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/container-queries/use-container-breakpoints.js
function useContainerBreakpoints(triggers) {
  const triggersDep = triggers === null || triggers === void 0 ? void 0 : triggers.join();
  return useContainerQuery((rect) => getMatchingBreakpoint(rect.contentBoxWidth, triggers), [triggersDep]);
}

// node_modules/@cloudscape-design/components/grid/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/grid/styles.scoped.css";
var styles_css_default78 = {
  "grid": "awsui_grid_14yj0_y2kz6_145",
  "no-gutters": "awsui_no-gutters_14yj0_y2kz6_181",
  "grid-column": "awsui_grid-column_14yj0_y2kz6_186",
  "colspan-1": "awsui_colspan-1_14yj0_y2kz6_197",
  "push-1": "awsui_push-1_14yj0_y2kz6_201",
  "pull-1": "awsui_pull-1_14yj0_y2kz6_204",
  "colspan-2": "awsui_colspan-2_14yj0_y2kz6_207",
  "push-2": "awsui_push-2_14yj0_y2kz6_211",
  "pull-2": "awsui_pull-2_14yj0_y2kz6_214",
  "colspan-3": "awsui_colspan-3_14yj0_y2kz6_217",
  "push-3": "awsui_push-3_14yj0_y2kz6_221",
  "pull-3": "awsui_pull-3_14yj0_y2kz6_224",
  "colspan-4": "awsui_colspan-4_14yj0_y2kz6_227",
  "push-4": "awsui_push-4_14yj0_y2kz6_231",
  "pull-4": "awsui_pull-4_14yj0_y2kz6_234",
  "colspan-5": "awsui_colspan-5_14yj0_y2kz6_237",
  "push-5": "awsui_push-5_14yj0_y2kz6_241",
  "pull-5": "awsui_pull-5_14yj0_y2kz6_244",
  "colspan-6": "awsui_colspan-6_14yj0_y2kz6_247",
  "push-6": "awsui_push-6_14yj0_y2kz6_251",
  "pull-6": "awsui_pull-6_14yj0_y2kz6_254",
  "colspan-7": "awsui_colspan-7_14yj0_y2kz6_257",
  "push-7": "awsui_push-7_14yj0_y2kz6_261",
  "pull-7": "awsui_pull-7_14yj0_y2kz6_264",
  "colspan-8": "awsui_colspan-8_14yj0_y2kz6_267",
  "push-8": "awsui_push-8_14yj0_y2kz6_271",
  "pull-8": "awsui_pull-8_14yj0_y2kz6_274",
  "colspan-9": "awsui_colspan-9_14yj0_y2kz6_277",
  "push-9": "awsui_push-9_14yj0_y2kz6_281",
  "pull-9": "awsui_pull-9_14yj0_y2kz6_284",
  "colspan-10": "awsui_colspan-10_14yj0_y2kz6_287",
  "push-10": "awsui_push-10_14yj0_y2kz6_291",
  "pull-10": "awsui_pull-10_14yj0_y2kz6_294",
  "colspan-11": "awsui_colspan-11_14yj0_y2kz6_297",
  "push-11": "awsui_push-11_14yj0_y2kz6_301",
  "pull-11": "awsui_pull-11_14yj0_y2kz6_304",
  "colspan-12": "awsui_colspan-12_14yj0_y2kz6_307",
  "push-12": "awsui_push-12_14yj0_y2kz6_311",
  "pull-12": "awsui_pull-12_14yj0_y2kz6_314",
  "push-0": "awsui_push-0_14yj0_y2kz6_317",
  "pull-0": "awsui_pull-0_14yj0_y2kz6_320",
  "offset-1": "awsui_offset-1_14yj0_y2kz6_323",
  "offset-2": "awsui_offset-2_14yj0_y2kz6_326",
  "offset-3": "awsui_offset-3_14yj0_y2kz6_329",
  "offset-4": "awsui_offset-4_14yj0_y2kz6_332",
  "offset-5": "awsui_offset-5_14yj0_y2kz6_335",
  "offset-6": "awsui_offset-6_14yj0_y2kz6_338",
  "offset-7": "awsui_offset-7_14yj0_y2kz6_341",
  "offset-8": "awsui_offset-8_14yj0_y2kz6_344",
  "offset-9": "awsui_offset-9_14yj0_y2kz6_347",
  "offset-10": "awsui_offset-10_14yj0_y2kz6_350",
  "offset-11": "awsui_offset-11_14yj0_y2kz6_353",
  "restore-pointer-events": "awsui_restore-pointer-events_14yj0_y2kz6_357"
};

// node_modules/@cloudscape-design/components/grid/internal.js
var InternalGrid = import_react219.default.forwardRef((_a2, ref) => {
  var { __breakpoint, gridDefinition = [], disableGutters = false, children: children2, __tagOverride, __responsiveClassName, __internalRootRef } = _a2, restProps = __rest(_a2, ["__breakpoint", "gridDefinition", "disableGutters", "children", "__tagOverride", "__responsiveClassName", "__internalRootRef"]);
  let [defaultBreakpoint, defaultRef] = useContainerBreakpoints(void 0);
  if (__breakpoint !== void 0) {
    defaultBreakpoint = __breakpoint;
    defaultRef = ref;
  }
  const baseProps = getBaseProps(restProps);
  const flattenedChildren = flattenChildren(children2);
  const Tag = __tagOverride !== null && __tagOverride !== void 0 ? __tagOverride : "div";
  if (isDevelopment2) {
    const columnCount = gridDefinition.length;
    const childCount = flattenedChildren.length;
    if (columnCount !== childCount) {
      warnOnce("Grid", `The number of children (${childCount}) does not match the number of columns defined (${columnCount}).`);
    }
  }
  const mergedRef = useMergeRefs(defaultRef, __internalRootRef);
  return import_react219.default.createElement(Tag, Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default78.grid, baseProps.className, { [styles_css_default78["no-gutters"]]: disableGutters }, __responsiveClassName ? __responsiveClassName(defaultBreakpoint) : null), ref: mergedRef }), flattenedChildren.map((child, i2) => {
    var _a3, _b, _c, _d;
    const key2 = child.key;
    return import_react219.default.createElement(
      "div",
      { key: key2 ? String(key2) : void 0, className: clsx_m_default(styles_css_default78["grid-column"], getColumnClassNames("colspan", (_a3 = gridDefinition[i2]) === null || _a3 === void 0 ? void 0 : _a3.colspan, defaultBreakpoint), getColumnClassNames("offset", (_b = gridDefinition[i2]) === null || _b === void 0 ? void 0 : _b.offset, defaultBreakpoint), getColumnClassNames("pull", (_c = gridDefinition[i2]) === null || _c === void 0 ? void 0 : _c.pull, defaultBreakpoint), getColumnClassNames("push", (_d = gridDefinition[i2]) === null || _d === void 0 ? void 0 : _d.push, defaultBreakpoint)) },
      import_react219.default.createElement("div", { className: styles_css_default78["restore-pointer-events"] }, child)
    );
  }));
});
function getColumnClassNames(prop, mapping, breakpoint) {
  if (typeof mapping === "number") {
    return styles_css_default78[`${prop}-${mapping}`];
  }
  if (breakpoint === null || mapping === void 0) {
    return null;
  }
  return styles_css_default78[`${prop}-${matchBreakpointMapping(mapping, breakpoint)}`];
}
var internal_default11 = InternalGrid;

// node_modules/@cloudscape-design/components/form-field/util.js
function makeSlotId(prop, formFieldId, propName) {
  if (!prop) {
    return void 0;
  }
  return `${formFieldId}-${propName}`;
}
function getSlotIds(formFieldId, label, description, constraintText, errorText, warningText) {
  const ids2 = {
    label: makeSlotId(label, formFieldId, "label"),
    description: makeSlotId(description, formFieldId, "description"),
    constraint: makeSlotId(constraintText, formFieldId, "constraint"),
    error: makeSlotId(errorText, formFieldId, "error"),
    warning: makeSlotId(warningText, formFieldId, "warning")
  };
  return ids2;
}
function getAriaDescribedBy({ error, warning, description, constraint }) {
  const describedByAttributes = [error, warning, description, constraint].filter((e3) => !!e3);
  const describedBy = describedByAttributes.length ? describedByAttributes.join(" ") : void 0;
  return describedBy;
}
function getGridDefinition(stretch, secondaryControlPresent, isRefresh) {
  let columns;
  if (stretch) {
    columns = [{ colspan: 12 }, { colspan: 12 }];
  } else if (isRefresh) {
    columns = [{ colspan: { default: 12, xs: 8 } }, { colspan: { default: 12, xs: 4 } }];
  } else {
    columns = [{ colspan: { default: 12, xs: 9 } }, { colspan: { default: 12, xs: 3 } }];
  }
  if (!secondaryControlPresent) {
    return [columns[0]];
  }
  return columns;
}

// node_modules/@cloudscape-design/components/form-field/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/form-field/analytics-metadata/styles.scoped.css";
var styles_css_default79 = {
  "label": "awsui_label_aqu00_ocied_5"
};

// node_modules/@cloudscape-design/components/form-field/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/form-field/styles.scoped.css";
var styles_css_default80 = {
  "error-icon-shake-wrapper": "awsui_error-icon-shake-wrapper_14mhv_fzxwy_153",
  "warning-icon-shake-wrapper": "awsui_warning-icon-shake-wrapper_14mhv_fzxwy_154",
  "awsui-motion-shake-horizontally": "awsui_awsui-motion-shake-horizontally_14mhv_fzxwy_1",
  "error-icon-scale-wrapper": "awsui_error-icon-scale-wrapper_14mhv_fzxwy_184",
  "warning-icon-scale-wrapper": "awsui_warning-icon-scale-wrapper_14mhv_fzxwy_185",
  "awsui-motion-scale-popup": "awsui_awsui-motion-scale-popup_14mhv_fzxwy_1",
  "warning": "awsui_warning_14mhv_fzxwy_154",
  "error": "awsui_error_14mhv_fzxwy_153",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_14mhv_fzxwy_1",
  "root": "awsui_root_14mhv_fzxwy_236",
  "label": "awsui_label_14mhv_fzxwy_269",
  "info": "awsui_info_14mhv_fzxwy_285",
  "description": "awsui_description_14mhv_fzxwy_291",
  "constraint": "awsui_constraint_14mhv_fzxwy_292",
  "hints": "awsui_hints_14mhv_fzxwy_299",
  "constraint-has-validation-text": "awsui_constraint-has-validation-text_14mhv_fzxwy_300",
  "secondary-control": "awsui_secondary-control_14mhv_fzxwy_304",
  "controls": "awsui_controls_14mhv_fzxwy_308",
  "label-hidden": "awsui_label-hidden_14mhv_fzxwy_308",
  "label-wrapper": "awsui_label-wrapper_14mhv_fzxwy_311",
  "control": "awsui_control_14mhv_fzxwy_308",
  "error__message": "awsui_error__message_14mhv_fzxwy_338",
  "warning__message": "awsui_warning__message_14mhv_fzxwy_339",
  "visually-hidden": "awsui_visually-hidden_14mhv_fzxwy_343"
};

// node_modules/@cloudscape-design/components/form-field/internal.js
function FormFieldError({ id, children: children2, errorIconAriaLabel }) {
  const i18n = useInternalI18n("form-field");
  const contentRef = (0, import_react220.useRef)(null);
  const i18nErrorIconAriaLabel = i18n("i18nStrings.errorIconAriaLabel", errorIconAriaLabel);
  return import_react220.default.createElement(
    import_react220.default.Fragment,
    null,
    import_react220.default.createElement(
      "div",
      { id, className: styles_css_default80.error },
      import_react220.default.createElement(
        "div",
        { className: styles_css_default80["error-icon-shake-wrapper"] },
        import_react220.default.createElement(
          "div",
          { className: styles_css_default80["error-icon-scale-wrapper"] },
          import_react220.default.createElement(internal_default, { name: "status-negative", size: "small", ariaLabel: i18nErrorIconAriaLabel })
        )
      ),
      import_react220.default.createElement("span", { className: styles_css_default80.error__message, ref: contentRef }, children2)
    ),
    import_react220.default.createElement(internal_default2, { assertive: true, tagName: "span", sources: [i18nErrorIconAriaLabel, contentRef] })
  );
}
function FormFieldWarning({ id, children: children2, warningIconAriaLabel }) {
  const i18n = useInternalI18n("form-field");
  const contentRef = (0, import_react220.useRef)(null);
  const i18nWarningIconAriaLabel = i18n("i18nStrings.warningIconAriaLabel", warningIconAriaLabel);
  return import_react220.default.createElement(
    import_react220.default.Fragment,
    null,
    import_react220.default.createElement(
      "div",
      { id, className: styles_css_default80.warning },
      import_react220.default.createElement(
        "div",
        { className: styles_css_default80["warning-icon-shake-wrapper"] },
        import_react220.default.createElement(
          "div",
          { className: styles_css_default80["warning-icon-scale-wrapper"] },
          import_react220.default.createElement(internal_default, { name: "status-warning", size: "small", ariaLabel: i18nWarningIconAriaLabel })
        )
      ),
      import_react220.default.createElement("span", { className: styles_css_default80.warning__message, ref: contentRef }, children2)
    ),
    import_react220.default.createElement(internal_default2, { assertive: true, tagName: "span", sources: [i18nWarningIconAriaLabel, contentRef] })
  );
}
function ConstraintText({ id, hasValidationText, children: children2 }) {
  return import_react220.default.createElement("div", { id, className: clsx_m_default(styles_css_default80.constraint, hasValidationText && styles_css_default80["constraint-has-validation-text"]) }, children2);
}
function InternalFormField(_a2) {
  var { controlId, stretch = false, label, info, i18nStrings, children: children2, secondaryControl, description, constraintText, errorText, warningText, __hideLabel, __internalRootRef, __disableGutters = false, __analyticsMetadata = void 0, __style = {} } = _a2, rest = __rest(_a2, ["controlId", "stretch", "label", "info", "i18nStrings", "children", "secondaryControl", "description", "constraintText", "errorText", "warningText", "__hideLabel", "__internalRootRef", "__disableGutters", "__analyticsMetadata", "__style"]);
  const rootRef = (0, import_react220.useRef)();
  const ref = useMergeRefs(rootRef, __internalRootRef);
  const baseProps = getBaseProps(rest);
  const isRefresh = useVisualRefresh();
  const instanceUniqueId = useUniqueId("formField");
  const generatedControlId = controlId || instanceUniqueId;
  const formFieldId = controlId || generatedControlId;
  const { funnelIdentifier, funnelInteractionId, submissionAttempt, funnelState, errorCount } = useFunnel();
  const { stepIdentifier, stepNumber, stepNameSelector } = useFunnelStep();
  const { subStepIdentifier, subStepSelector, subStepNameSelector } = useFunnelSubStep();
  const showWarning = warningText && !errorText;
  if (warningText && errorText) {
    warnOnce("FileUpload", "Both `errorText` and `warningText` exist. `warningText` will not be shown.");
  }
  const slotIds = getSlotIds(formFieldId, label, description, constraintText, errorText, showWarning ? warningText : void 0);
  const ariaDescribedBy = getAriaDescribedBy(slotIds);
  const gridDefinition = getGridDefinition(stretch, !!secondaryControl, isRefresh);
  const { ariaLabelledby: parentAriaLabelledby, ariaDescribedby: parentAriaDescribedby, invalid: parentInvalid, warning: parentWarning } = useFormFieldContext({});
  const contextValuesWithoutControlId = {
    ariaLabelledby: joinStrings(parentAriaLabelledby, slotIds.label) || void 0,
    ariaDescribedby: joinStrings(parentAriaDescribedby, ariaDescribedBy) || void 0,
    invalid: !!errorText || !!parentInvalid,
    warning: !!warningText && !errorText || !!parentWarning && !parentInvalid
  };
  const analyticsAttributes = {
    [DATA_ATTR_FIELD_LABEL]: slotIds.label ? getFieldSlotSeletor(slotIds.label) : void 0,
    [DATA_ATTR_FIELD_ERROR]: slotIds.error ? getFieldSlotSeletor(slotIds.error) : void 0
  };
  (0, import_react220.useEffect)(() => {
    var _a3, _b, _c;
    if (funnelInteractionId && errorText && funnelState.current !== "complete") {
      const stepName = getTextFromSelector(stepNameSelector);
      const subStepName = getTextFromSelector(subStepNameSelector);
      errorCount.current++;
      const errorIsVisible = ((_c = (_b = (_a3 = rootRef.current) === null || _a3 === void 0 ? void 0 : _a3.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.width) !== null && _c !== void 0 ? _c : 0) > 0;
      if (errorIsVisible) {
        FunnelMetrics.funnelSubStepError({
          funnelInteractionId,
          funnelIdentifier,
          subStepSelector,
          subStepName,
          subStepNameSelector,
          subStepIdentifier,
          stepNumber,
          stepName,
          stepNameSelector,
          stepIdentifier,
          fieldErrorSelector: `${getFieldSlotSeletor(slotIds.error)} .${styles_css_default80.error__message}`,
          fieldLabelSelector: getFieldSlotSeletor(slotIds.label),
          subStepAllSelector: getSubStepAllSelector(),
          fieldIdentifier: __analyticsMetadata === null || __analyticsMetadata === void 0 ? void 0 : __analyticsMetadata.instanceIdentifier,
          errorContext: __analyticsMetadata === null || __analyticsMetadata === void 0 ? void 0 : __analyticsMetadata.errorContext
        });
      }
      return () => {
        errorCount.current--;
      };
    }
  }, [funnelInteractionId, errorText, submissionAttempt, errorCount]);
  return import_react220.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default80.root), style: __style, ref }, analyticsAttributes, copyAnalyticsMetadataAttribute(rest)),
    import_react220.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default80["label-wrapper"], __hideLabel && styles_css_default80["visually-hidden"]) },
      label && import_react220.default.createElement("label", { className: clsx_m_default(styles_css_default80.label, styles_css_default79.label), id: slotIds.label, htmlFor: generatedControlId }, label),
      import_react220.default.createElement(InfoLinkLabelContext.Provider, { value: slotIds.label }, !__hideLabel && info && import_react220.default.createElement("span", { className: styles_css_default80.info }, info))
    ),
    description && import_react220.default.createElement("div", { className: styles_css_default80.description, id: slotIds.description }, description),
    import_react220.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default80.controls, __hideLabel && styles_css_default80["label-hidden"]) },
      import_react220.default.createElement(
        internal_default11,
        { gridDefinition, disableGutters: __disableGutters },
        import_react220.default.createElement(FormFieldContext.Provider, { value: Object.assign({ controlId: generatedControlId }, contextValuesWithoutControlId) }, children2 && import_react220.default.createElement("div", { className: styles_css_default80.control }, children2)),
        secondaryControl && import_react220.default.createElement(
          FormFieldContext.Provider,
          { value: contextValuesWithoutControlId },
          import_react220.default.createElement("div", { className: styles_css_default80["secondary-control"] }, secondaryControl)
        )
      )
    ),
    (constraintText || errorText || warningText) && import_react220.default.createElement(
      "div",
      { className: styles_css_default80.hints },
      errorText && import_react220.default.createElement(FormFieldError, { id: slotIds.error, errorIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel }, errorText),
      showWarning && import_react220.default.createElement(FormFieldWarning, { id: slotIds.warning, warningIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel }, warningText),
      constraintText && import_react220.default.createElement(ConstraintText, { id: slotIds.constraint, hasValidationText: !!errorText || !!warningText }, constraintText)
    )
  );
}

// node_modules/@cloudscape-design/components/multiselect/internal.js
var import_react253 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/dropdown-footer/index.js
var import_react222 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/dropdown-status/index.js
var import_react221 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/dropdown-status/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/dropdown-status/styles.scoped.css";
var styles_css_default81 = {
  "root": "awsui_root_vrgzu_11c7p_145",
  "recovery": "awsui_recovery_vrgzu_11c7p_180"
};

// node_modules/@cloudscape-design/components/internal/components/dropdown-status/index.js
function DropdownStatus({ children: children2 }) {
  return import_react221.default.createElement("div", { className: styles_css_default81.root }, children2);
}
var useDropdownStatus = ({ statusType, empty, loadingText, finishedText, filteringResultsText, errorText, recoveryText, isEmpty, isNoMatch, noMatch, onRecoveryClick, hasRecoveryCallback = false, errorIconAriaLabel }) => {
  const previousStatusType = usePrevious(statusType);
  const statusResult = { isSticky: true, content: null, hasRecoveryButton: false };
  if (statusType === "loading") {
    statusResult.content = import_react221.default.createElement(StatusIndicator, { type: "loading" }, loadingText);
  } else if (statusType === "error") {
    statusResult.hasRecoveryButton = !!recoveryText && hasRecoveryCallback;
    statusResult.content = import_react221.default.createElement(
      "span",
      null,
      import_react221.default.createElement(StatusIndicator, { type: "error", __display: "inline", __animate: previousStatusType !== "error", iconAriaLabel: errorIconAriaLabel }, errorText),
      " ",
      statusResult.hasRecoveryButton && import_react221.default.createElement(internal_default10, { onFollow: () => fireNonCancelableEvent(onRecoveryClick), variant: "recovery", className: styles_css_default81.recovery }, recoveryText)
    );
  } else if (isEmpty && empty) {
    statusResult.content = empty;
  } else if (isNoMatch && noMatch) {
    statusResult.content = noMatch;
  } else if (filteringResultsText) {
    statusResult.content = filteringResultsText;
  } else if (statusType === "finished" && finishedText) {
    statusResult.content = finishedText;
    statusResult.isSticky = false;
  }
  return statusResult;
};
var dropdown_status_default = DropdownStatus;

// node_modules/@cloudscape-design/components/internal/components/dropdown-footer/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/dropdown-footer/styles.scoped.css";
var styles_css_default82 = {
  "root": "awsui_root_1afi9_1n6s2_145",
  "hidden": "awsui_hidden_1afi9_1n6s2_176",
  "no-items": "awsui_no-items_1afi9_1n6s2_179"
};

// node_modules/@cloudscape-design/components/internal/components/dropdown-footer/index.js
var DropdownFooter = ({ content, id, hasItems = true }) => import_react222.default.createElement("div", { className: clsx_m_default(styles_css_default82.root, { [styles_css_default82.hidden]: content === null, [styles_css_default82["no-items"]]: !hasItems }) }, content && import_react222.default.createElement(
  internal_default2,
  { id },
  import_react222.default.createElement(dropdown_status_default, null, content)
));
var dropdown_footer_default = DropdownFooter;

// node_modules/@cloudscape-design/components/select/parts/filter.js
var import_react225 = __toESM(require_react());

// node_modules/@cloudscape-design/components/input/internal.js
var import_react224 = __toESM(require_react());

// node_modules/@cloudscape-design/components/input/utils.js
var import_react223 = __toESM(require_react());
var useSearchProps = (type, disabled, readOnly, value, inputRef, onChange) => {
  const searchProps = {};
  const handleIconClick = (0, import_react223.useCallback)(() => {
    var _a2;
    (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    onChange("");
  }, [inputRef, onChange]);
  if (type === "search" || type === "visualSearch") {
    searchProps.__leftIcon = "search";
    if (!disabled && !readOnly && value) {
      searchProps.__rightIcon = "close";
      searchProps.__onRightIconClick = handleIconClick;
    }
  }
  return searchProps;
};
var convertAutoComplete = (propertyValue = false) => {
  if (propertyValue === true) {
    return "on";
  }
  return propertyValue || "off";
};

// node_modules/@cloudscape-design/components/input/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/input/styles.scoped.css";
var styles_css_default83 = {
  "root": "awsui_root_2rhyz_1pxbp_145",
  "input": "awsui_input_2rhyz_1pxbp_149",
  "input-readonly": "awsui_input-readonly_2rhyz_1pxbp_196",
  "input-invalid": "awsui_input-invalid_2rhyz_1pxbp_249",
  "input-has-icon-left": "awsui_input-has-icon-left_2rhyz_1pxbp_258",
  "input-warning": "awsui_input-warning_2rhyz_1pxbp_261",
  "input-type-search": "awsui_input-type-search_2rhyz_1pxbp_273",
  "input-has-icon-right": "awsui_input-has-icon-right_2rhyz_1pxbp_286",
  "input-has-no-border-radius": "awsui_input-has-no-border-radius_2rhyz_1pxbp_289",
  "input-container": "awsui_input-container_2rhyz_1pxbp_296",
  "input-icon-left": "awsui_input-icon-left_2rhyz_1pxbp_301",
  "input-icon-right": "awsui_input-icon-right_2rhyz_1pxbp_308",
  "input-button-right": "awsui_input-button-right_2rhyz_1pxbp_314"
};

// node_modules/@cloudscape-design/components/input/internal.js
function InternalInput(_a2, ref) {
  var { type = "text", step: step2, inputMode, autoComplete = true, ariaLabel, clearAriaLabel: clearAriaLabelOverride, name, value, placeholder, autoFocus, disabled, readOnly, disableBrowserAutocorrect, spellcheck, __noBorderRadius, __leftIcon, __leftIconVariant = "subtle", __onLeftIconClick, ariaRequired, __rightIcon, __onRightIconClick, onKeyDown, onKeyUp, onChange, __onDelayedInput, __onBlurWithDetail, onBlur, onFocus, nativeInputAttributes, __internalRootRef, __inheritFormFieldProps, __injectAnalyticsComponentMetadata, __skipNativeAttributesWarnings } = _a2, rest = __rest(_a2, ["type", "step", "inputMode", "autoComplete", "ariaLabel", "clearAriaLabel", "name", "value", "placeholder", "autoFocus", "disabled", "readOnly", "disableBrowserAutocorrect", "spellcheck", "__noBorderRadius", "__leftIcon", "__leftIconVariant", "__onLeftIconClick", "ariaRequired", "__rightIcon", "__onRightIconClick", "onKeyDown", "onKeyUp", "onChange", "__onDelayedInput", "__onBlurWithDetail", "onBlur", "onFocus", "nativeInputAttributes", "__internalRootRef", "__inheritFormFieldProps", "__injectAnalyticsComponentMetadata", "__skipNativeAttributesWarnings"]);
  const baseProps = getBaseProps(rest);
  const i18n = useInternalI18n("input");
  const fireDelayedInput = useDebounceCallback((value2) => fireNonCancelableEvent(__onDelayedInput, { value: value2 }));
  const handleChange = (value2) => {
    fireDelayedInput(value2);
    fireNonCancelableEvent(onChange, { value: value2 });
  };
  const inputRef = (0, import_react224.useRef)(null);
  const searchProps = useSearchProps(type, disabled, readOnly, value, inputRef, handleChange);
  __leftIcon = __leftIcon !== null && __leftIcon !== void 0 ? __leftIcon : searchProps.__leftIcon;
  __rightIcon = __rightIcon !== null && __rightIcon !== void 0 ? __rightIcon : searchProps.__rightIcon;
  __onRightIconClick = __onRightIconClick !== null && __onRightIconClick !== void 0 ? __onRightIconClick : searchProps.__onRightIconClick;
  const formFieldContext = useFormFieldContext(rest);
  const { ariaLabelledby, ariaDescribedby, controlId, invalid, warning } = __inheritFormFieldProps ? formFieldContext : rest;
  const attributes = {
    "aria-label": ariaLabel,
    // aria-labelledby has precedence over aria-label in accessible name calculation.
    // When aria-label is provided for Input, it should override aria-labelledBy from form-field context.
    // If both aria-label and aria-labelledby come from Input props, aria-labelledby will be used in accessible name
    "aria-labelledby": ariaLabel && !rest.ariaLabelledby ? void 0 : ariaLabelledby,
    "aria-describedby": ariaDescribedby,
    name,
    placeholder,
    autoFocus,
    id: controlId,
    className: clsx_m_default(styles_css_default83.input, type && styles_css_default83[`input-type-${type}`], __rightIcon && styles_css_default83["input-has-icon-right"], __leftIcon && styles_css_default83["input-has-icon-left"], __noBorderRadius && styles_css_default83["input-has-no-border-radius"], {
      [styles_css_default83["input-readonly"]]: readOnly,
      [styles_css_default83["input-invalid"]]: invalid,
      [styles_css_default83["input-warning"]]: warning && !invalid
    }),
    autoComplete: convertAutoComplete(autoComplete),
    disabled,
    readOnly,
    type,
    step: step2,
    inputMode,
    spellCheck: spellcheck,
    onKeyDown: onKeyDown && ((event) => fireKeyboardEvent(onKeyDown, event)),
    onKeyUp: onKeyUp && ((event) => fireKeyboardEvent(onKeyUp, event)),
    // We set a default value on the component in order to force it into the controlled mode.
    value: value !== null && value !== void 0 ? value : "",
    onChange: onChange && ((event) => handleChange(event.target.value)),
    onBlur: (e3) => {
      fireNonCancelableEvent(onBlur);
      fireNonCancelableEvent(__onBlurWithDetail, { relatedTarget: e3.relatedTarget });
    },
    onFocus: onFocus && (() => fireNonCancelableEvent(onFocus))
  };
  if (type === "number") {
    attributes.onWheel = (event) => event.currentTarget.blur();
  }
  if (disableBrowserAutocorrect) {
    attributes.autoCorrect = "off";
    attributes.autoCapitalize = "off";
  }
  if (ariaRequired) {
    attributes["aria-required"] = "true";
  }
  if (invalid) {
    attributes["aria-invalid"] = "true";
  }
  const mergedRef = useMergeRefs(ref, inputRef);
  if (attributes.type === "visualSearch") {
    attributes.type = "text";
  }
  const componentAnalyticsMetadata2 = {
    name: "awsui.Input",
    label: "input",
    properties: {
      value: value || ""
    }
  };
  return import_react224.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default83["input-container"]), ref: __internalRootRef, dir: type === "email" ? "ltr" : void 0 }, __injectAnalyticsComponentMetadata ? getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 }) : copyAnalyticsMetadataAttribute(rest)),
    __leftIcon && import_react224.default.createElement(
      "span",
      { onClick: __onLeftIconClick, className: styles_css_default83["input-icon-left"] },
      import_react224.default.createElement(internal_default, { name: __leftIcon, variant: disabled || readOnly ? "disabled" : __leftIconVariant })
    ),
    import_react224.default.createElement(with_native_attributes_default, Object.assign({}, attributes, { tag: "input", componentName: "Input", nativeAttributes: nativeInputAttributes, skipWarnings: __skipNativeAttributesWarnings, ref: mergedRef })),
    __rightIcon && import_react224.default.createElement(
      "span",
      Object.assign({ className: styles_css_default83["input-icon-right"] }, __rightIcon === "close" ? getAnalyticsMetadataAttribute({
        action: "clearInput"
      }) : {}),
      import_react224.default.createElement(
        internal_default3,
        {
          // Used for test utils
          className: styles_css_default83["input-button-right"],
          variant: "inline-icon-pointer-target",
          formAction: "none",
          iconName: __rightIcon,
          onClick: __onRightIconClick,
          ariaLabel: i18n("clearAriaLabel", clearAriaLabelOverride),
          disabled
        }
      )
    )
  );
}
var internal_default12 = import_react224.default.forwardRef(InternalInput);

// node_modules/@cloudscape-design/components/select/parts/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/select/parts/styles.scoped.css";
var styles_css_default84 = {
  "placeholder": "awsui_placeholder_dwuol_1ao0e_145",
  "item": "awsui_item_dwuol_1ao0e_150",
  "checkbox": "awsui_checkbox_dwuol_1ao0e_154",
  "option-group": "awsui_option-group_dwuol_1ao0e_163",
  "filter": "awsui_filter_dwuol_1ao0e_167",
  "trigger": "awsui_trigger_dwuol_1ao0e_172",
  "layout-strut": "awsui_layout-strut_dwuol_1ao0e_178",
  "list-bottom": "awsui_list-bottom_dwuol_1ao0e_184",
  "selected-icon": "awsui_selected-icon_dwuol_1ao0e_188",
  "show-label-tag": "awsui_show-label-tag_dwuol_1ao0e_192",
  "inline-token-trigger": "awsui_inline-token-trigger_dwuol_1ao0e_196",
  "inline-token-list": "awsui_inline-token-list_dwuol_1ao0e_203",
  "inline-token": "awsui_inline-token_dwuol_1ao0e_196",
  "visual-refresh": "awsui_visual-refresh_dwuol_1ao0e_233",
  "inline-token-hidden-placeholder": "awsui_inline-token-hidden-placeholder_dwuol_1ao0e_240",
  "inline-token-counter": "awsui_inline-token-counter_dwuol_1ao0e_246",
  "inline-token-trigger--disabled": "awsui_inline-token-trigger--disabled_dwuol_1ao0e_250",
  "inline-label-trigger-wrapper": "awsui_inline-label-trigger-wrapper_dwuol_1ao0e_256",
  "inline-label-wrapper": "awsui_inline-label-wrapper_dwuol_1ao0e_260",
  "inline-label": "awsui_inline-label_dwuol_1ao0e_256",
  "inline-label-inline-tokens": "awsui_inline-label-inline-tokens_dwuol_1ao0e_286",
  "disabled-reason-tooltip": "awsui_disabled-reason-tooltip_dwuol_1ao0e_291"
};

// node_modules/@cloudscape-design/components/select/parts/filter.js
var Filter = import_react225.default.forwardRef((_a2, ref) => {
  var { filteringType } = _a2, filterProps = __rest(_a2, ["filteringType"]);
  if (filteringType === "none") {
    return null;
  }
  return import_react225.default.createElement(internal_default12, Object.assign({ ref, type: "visualSearch", className: styles_css_default84.filter, autoComplete: false, disableBrowserAutocorrect: true, invalid: false, __noBorderRadius: true }, filterProps, { nativeInputAttributes: Object.assign({ "aria-expanded": true, "aria-haspopup": true, role: "combobox", autoCorrect: "off", autoCapitalize: "off" }, filterProps.nativeInputAttributes), __skipNativeAttributesWarnings: true }));
});
var filter_default = Filter;

// node_modules/@cloudscape-design/components/select/parts/plain-list.js
var import_react235 = __toESM(require_react());

// node_modules/@cloudscape-design/components/select/utils/render-options.js
var import_react234 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/utils/unflatten-options.js
function unflattenOptions(options) {
  const nestedOptions = [];
  let currentParent;
  options.forEach((option, index) => {
    var _a2;
    if (option.type === "parent") {
      const wrapped = { type: "parent", option, index, children: [] };
      currentParent = wrapped;
      nestedOptions.push(wrapped);
    } else if (!option.type || option.type === "child") {
      ((_a2 = currentParent === null || currentParent === void 0 ? void 0 : currentParent.children) !== null && _a2 !== void 0 ? _a2 : nestedOptions).push({ type: "child", option, index });
    } else {
      currentParent = void 0;
      nestedOptions.push({ type: "child", option, index });
    }
  });
  return nestedOptions;
}

// node_modules/@cloudscape-design/components/select/parts/item.js
var import_react231 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/checkbox-icon/index.js
var import_react226 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/checkbox-icon/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/checkbox-icon/styles.scoped.css";
var styles_css_default85 = {
  "root": "awsui_root_1fn7j_t5xe1_145",
  "styled-box": "awsui_styled-box_1fn7j_t5xe1_152",
  "styled-box-checked": "awsui_styled-box-checked_1fn7j_t5xe1_168",
  "styled-box-indeterminate": "awsui_styled-box-indeterminate_1fn7j_t5xe1_168",
  "styled-box-disabled": "awsui_styled-box-disabled_1fn7j_t5xe1_172",
  "styled-box-readonly": "awsui_styled-box-readonly_1fn7j_t5xe1_172",
  "styled-line": "awsui_styled-line_1fn7j_t5xe1_176",
  "styled-line-disabled": "awsui_styled-line-disabled_1fn7j_t5xe1_181",
  "styled-line-readonly": "awsui_styled-line-readonly_1fn7j_t5xe1_184"
};

// node_modules/@cloudscape-design/components/internal/components/checkbox-icon/index.js
var dimensionsByTheme = {
  default: {
    viewBox: "0 0 14 14",
    indeterminate: "2.5,7 11.5,7",
    checked: "2.5,7 6,10 11,3",
    xy: 0.5,
    r: 1.5,
    size: 13
  },
  refresh: {
    viewBox: "0 0 16 16",
    indeterminate: "3.5,8 12.5,8",
    checked: "3.5,8 7,11 12,4",
    xy: 0.5,
    r: 3,
    size: 15
  }
};
var CheckboxIcon = (_a2) => {
  var _b, _c, _d;
  var { checked, indeterminate, disabled = false, readOnly = false, style } = _a2, restProps = __rest(_a2, ["checked", "indeterminate", "disabled", "readOnly", "style"]);
  const baseProps = getBaseProps(restProps);
  const theme = useVisualRefresh() ? "refresh" : "default";
  const dimensions = dimensionsByTheme[theme];
  return import_react226.default.createElement(
    "svg",
    Object.assign({ className: styles_css_default85.root, viewBox: dimensions.viewBox, "aria-hidden": "true", focusable: "false" }, baseProps),
    import_react226.default.createElement("rect", { className: clsx_m_default(styles_css_default85["styled-box"], {
      [styles_css_default85["styled-box-checked"]]: checked,
      [styles_css_default85["styled-box-indeterminate"]]: indeterminate,
      [styles_css_default85["styled-box-disabled"]]: disabled,
      [styles_css_default85["styled-box-readonly"]]: readOnly
    }), x: dimensions.xy, y: dimensions.xy, rx: dimensions.r, ry: dimensions.r, width: dimensions.size, height: dimensions.size, style: { fill: (_b = style === null || style === void 0 ? void 0 : style.box) === null || _b === void 0 ? void 0 : _b.fill, stroke: (_c = style === null || style === void 0 ? void 0 : style.box) === null || _c === void 0 ? void 0 : _c.stroke } }),
    checked || indeterminate ? import_react226.default.createElement("polyline", { className: clsx_m_default(styles_css_default85["styled-line"], {
      [styles_css_default85["styled-line-disabled"]]: disabled,
      [styles_css_default85["styled-line-readonly"]]: readOnly
    }), points: indeterminate ? dimensions.indeterminate : dimensions.checked, style: { stroke: (_d = style === null || style === void 0 ? void 0 : style.line) === null || _d === void 0 ? void 0 : _d.stroke } }) : null
  );
};
var checkbox_icon_default = CheckboxIcon;

// node_modules/@cloudscape-design/components/internal/components/option/index.js
var import_react229 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/option-parts.js
var import_react228 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/highlight-match.js
var import_react227 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/option/styles.scoped.css";
var styles_css_default86 = {
  "option": "awsui_option_1p2cx_ph5rs_153",
  "disabled": "awsui_disabled_1p2cx_ph5rs_190",
  "parent": "awsui_parent_1p2cx_ph5rs_193",
  "highlighted": "awsui_highlighted_1p2cx_ph5rs_196",
  "content": "awsui_content_1p2cx_ph5rs_200",
  "label-content": "awsui_label-content_1p2cx_ph5rs_207",
  "label": "awsui_label_1p2cx_ph5rs_207",
  "tag": "awsui_tag_1p2cx_ph5rs_214",
  "label-tag": "awsui_label-tag_1p2cx_ph5rs_215",
  "label-prefix": "awsui_label-prefix_1p2cx_ph5rs_225",
  "tags": "awsui_tags_1p2cx_ph5rs_238",
  "description": "awsui_description_1p2cx_ph5rs_239",
  "selected": "awsui_selected_1p2cx_ph5rs_250",
  "icon": "awsui_icon_1p2cx_ph5rs_264",
  "filtering-match-highlight": "awsui_filtering-match-highlight_1p2cx_ph5rs_271",
  "trigger-variant": "awsui_trigger-variant_1p2cx_ph5rs_286"
};

// node_modules/@cloudscape-design/components/internal/components/option/highlight-match.js
var splitOnFiltering = (str, highlightText) => {
  if (highlightText.length > 1e4) {
    return { noMatches: [str], matches: null };
  }
  const filteringPattern = highlightText.replace(/[-[\]/{}()*+?.\\^$|]/g, "\\$&");
  const regexp = new RegExp(filteringPattern, "gi");
  const noMatches = str.split(regexp);
  const matches = str.match(regexp);
  return { noMatches, matches };
};
function Highlight({ str }) {
  return str ? import_react227.default.createElement("mark", { className: styles_css_default86["filtering-match-highlight"] }, str) : null;
}
function HighlightMatch({ str, highlightText }) {
  if (!str || !highlightText) {
    return import_react227.default.createElement("span", null, str);
  }
  if (str === highlightText) {
    return import_react227.default.createElement(Highlight, { str });
  }
  const { noMatches, matches } = splitOnFiltering(str, highlightText);
  const highlighted = [];
  noMatches.forEach((noMatch, idx) => {
    highlighted.push(import_react227.default.createElement("span", { key: `noMatch-${idx}` }, noMatch));
    if (matches && idx < matches.length) {
      highlighted.push(import_react227.default.createElement(Highlight, { key: `match-${idx}`, str: matches[idx] }));
    }
  });
  return import_react227.default.createElement("span", null, highlighted);
}

// node_modules/@cloudscape-design/components/internal/components/option/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/option/analytics-metadata/styles.scoped.css";
var styles_css_default87 = {
  "label": "awsui_label_1q5vz_ocied_5"
};

// node_modules/@cloudscape-design/components/internal/components/option/option-parts.js
var Label = ({ label, prefix, highlightText, triggerVariant }) => import_react228.default.createElement(
  "span",
  { className: clsx_m_default(styles_css_default86.label, styles_css_default87.label, triggerVariant && styles_css_default86["trigger-variant"]) },
  prefix && import_react228.default.createElement(
    "span",
    { className: clsx_m_default(styles_css_default86["label-prefix"], triggerVariant && styles_css_default86["trigger-variant"]) },
    prefix,
    " "
  ),
  import_react228.default.createElement(HighlightMatch, { str: label, highlightText })
);
var LabelTag = ({ labelTag, highlightText, triggerVariant }) => labelTag ? import_react228.default.createElement(
  "span",
  { className: clsx_m_default(styles_css_default86["label-tag"], triggerVariant && styles_css_default86["trigger-variant"]) },
  import_react228.default.createElement(HighlightMatch, { str: labelTag, highlightText })
) : null;
var Description2 = ({ description, highlightedOption, highlightText, selectedOption, triggerVariant }) => description ? import_react228.default.createElement(
  "span",
  { className: clsx_m_default(styles_css_default86.description, {
    [styles_css_default86["trigger-variant"]]: triggerVariant,
    [styles_css_default86.highlighted]: highlightedOption,
    [styles_css_default86.selected]: selectedOption
  }) },
  import_react228.default.createElement(HighlightMatch, { str: description, highlightText })
) : null;
var Tags = ({ tags, highlightedOption, highlightText, selectedOption, triggerVariant }) => tags ? import_react228.default.createElement("span", { className: clsx_m_default(styles_css_default86.tags, {
  [styles_css_default86.highlighted]: highlightedOption,
  [styles_css_default86.selected]: selectedOption
}) }, tags.map((tag, idx) => import_react228.default.createElement(
  "span",
  { key: idx, className: clsx_m_default(styles_css_default86.tag, triggerVariant && styles_css_default86["trigger-variant"]) },
  import_react228.default.createElement(HighlightMatch, { str: tag, highlightText })
))) : null;
var FilteringTags = ({ filteringTags, highlightedOption, highlightText, selectedOption, triggerVariant }) => {
  if (!highlightText || !filteringTags) {
    return null;
  }
  const searchElement = highlightText.toLowerCase();
  return import_react228.default.createElement("span", { className: clsx_m_default(styles_css_default86.tags, {
    [styles_css_default86.highlighted]: highlightedOption,
    [styles_css_default86.selected]: selectedOption
  }) }, filteringTags.map((filteringTag, key2) => {
    const match2 = filteringTag.toLowerCase().indexOf(searchElement) !== -1;
    if (match2) {
      return import_react228.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default86.tag, triggerVariant && styles_css_default86["trigger-variant"]), key: key2 },
        import_react228.default.createElement(HighlightMatch, { str: filteringTag, highlightText })
      );
    }
    return null;
  }));
};
var OptionIcon = (props2) => {
  if (!props2.name && !props2.url && !props2.svg) {
    return null;
  }
  return import_react228.default.createElement(
    "span",
    { className: styles_css_default86.icon },
    import_react228.default.createElement(internal_default, Object.assign({}, props2))
  );
};

// node_modules/@cloudscape-design/components/internal/components/option/index.js
function validateStringValue(value, propertyName) {
  if (typeof value !== "undefined" && typeof value !== "string") {
    warnOnce("DropdownOption", `This component only supports string values, but "option.${propertyName}" has ${typeof value} type. The component may work incorrectly.`);
  }
}
var Option = (_a2) => {
  var _b, _c, _d, _e;
  var { option, highlightText, triggerVariant = false, isGroupOption = false, highlightedOption = false, selectedOption = false } = _a2, restProps = __rest(_a2, ["option", "highlightText", "triggerVariant", "isGroupOption", "highlightedOption", "selectedOption"]);
  if (!option) {
    return null;
  }
  const { disabled } = option;
  const baseProps = getBaseProps(restProps);
  if (isDevelopment2) {
    validateStringValue(option.label, "label");
    validateStringValue(option.description, "description");
    validateStringValue(option.labelTag, "labelTag");
    (_b = option.tags) === null || _b === void 0 ? void 0 : _b.forEach((tag, index) => {
      validateStringValue(tag, `tags[${index}]`);
    });
    (_c = option.filteringTags) === null || _c === void 0 ? void 0 : _c.forEach((tag, index) => {
      validateStringValue(tag, `filteringTags[${index}]`);
    });
  }
  const className2 = clsx_m_default(styles_css_default86.option, disabled && styles_css_default86.disabled, isGroupOption && styles_css_default86.parent, highlightedOption && styles_css_default86.highlighted);
  const icon = option.__customIcon || import_react229.default.createElement(OptionIcon, { name: option.iconName, url: option.iconUrl, svg: option.iconSvg, alt: option.iconAlt, ariaLabel: option.iconAriaLabel, size: "normal" });
  return import_react229.default.createElement(
    "span",
    Object.assign({ "data-value": option.value, className: className2, lang: option.lang, title: (_d = option.label) !== null && _d !== void 0 ? _d : option.value }, baseProps),
    icon,
    import_react229.default.createElement(
      "span",
      { className: styles_css_default86.content },
      import_react229.default.createElement(
        "span",
        { className: styles_css_default86["label-content"] },
        import_react229.default.createElement(Label, { label: (_e = option.label) !== null && _e !== void 0 ? _e : option.value, prefix: option.__labelPrefix, highlightText, triggerVariant }),
        import_react229.default.createElement(LabelTag, { labelTag: option.labelTag, highlightText, triggerVariant })
      ),
      import_react229.default.createElement(Description2, { description: option.description, highlightedOption, selectedOption, highlightText, triggerVariant }),
      import_react229.default.createElement(Tags, { tags: option.tags, highlightedOption, selectedOption, highlightText, triggerVariant }),
      import_react229.default.createElement(FilteringTags, { filteringTags: option.filteringTags, highlightedOption, selectedOption, highlightText, triggerVariant })
    )
  );
};
var option_default = Option;

// node_modules/@cloudscape-design/components/internal/components/selectable-item/index.js
var import_react230 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/selectable-item/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/selectable-item/analytics-metadata/styles.scoped.css";
var styles_css_default88 = {
  "parent": "awsui_parent_2dmmi_qu62t_5",
  "option-content": "awsui_option-content_2dmmi_qu62t_6"
};

// node_modules/@cloudscape-design/components/internal/components/selectable-item/analytics-metadata/utils.js
var getAnalyticsSelectActionMetadata = (_a2) => {
  var { isChild, value } = _a2, restProps = __rest(_a2, ["isChild", "value"]);
  const dataAttributes = restProps;
  const analyticsMetadata = {
    action: "select",
    detail: {
      label: {
        selector: [`.${styles_css_default87.label}`, `.${styles_css_default88["option-content"]}`]
      }
    }
  };
  let position = void 0;
  if (isChild && dataAttributes["data-group-index"] && dataAttributes["data-in-group-index"] || dataAttributes["data-child-index"]) {
    position = `${dataAttributes["data-group-index"]},${dataAttributes["data-in-group-index"] || dataAttributes["data-child-index"]}`;
  } else if (dataAttributes["data-test-index"]) {
    position = `${dataAttributes["data-test-index"]}`;
  }
  if (position) {
    analyticsMetadata.detail.position = position;
  }
  if (value) {
    analyticsMetadata.detail.value = value;
  }
  if (isChild) {
    analyticsMetadata.detail.groupLabel = {
      root: "body",
      selector: `.${styles_css_default88.parent}[data-group-index="${dataAttributes["data-group-index"]}"] .${styles_css_default88["option-content"]}`
    };
  }
  return analyticsMetadata;
};

// node_modules/@cloudscape-design/components/internal/components/selectable-item/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/selectable-item/styles.scoped.css";
var styles_css_default89 = {
  "selectable-item": "awsui_selectable-item_15o6u_d2ghy_145",
  "pad-bottom": "awsui_pad-bottom_15o6u_d2ghy_167",
  "virtual": "awsui_virtual_15o6u_d2ghy_171",
  "has-background": "awsui_has-background_15o6u_d2ghy_174",
  "highlighted": "awsui_highlighted_15o6u_d2ghy_177",
  "selected": "awsui_selected_15o6u_d2ghy_177",
  "disabled": "awsui_disabled_15o6u_d2ghy_195",
  "is-keyboard": "awsui_is-keyboard_15o6u_d2ghy_200",
  "visual-refresh": "awsui_visual-refresh_15o6u_d2ghy_203",
  "next-item-selected": "awsui_next-item-selected_15o6u_d2ghy_211",
  "previous-item-selected": "awsui_previous-item-selected_15o6u_d2ghy_232",
  "parent": "awsui_parent_15o6u_d2ghy_236",
  "interactiveGroups": "awsui_interactiveGroups_15o6u_d2ghy_240",
  "child": "awsui_child_15o6u_d2ghy_256",
  "sticky": "awsui_sticky_15o6u_d2ghy_262",
  "with-scrollbar": "awsui_with-scrollbar_15o6u_d2ghy_274",
  "after-header": "awsui_after-header_15o6u_d2ghy_280",
  "measure-strut": "awsui_measure-strut_15o6u_d2ghy_315",
  "measure-strut-first": "awsui_measure-strut-first_15o6u_d2ghy_324",
  "screenreader-content": "awsui_screenreader-content_15o6u_d2ghy_328",
  "option-content": "awsui_option-content_15o6u_d2ghy_334",
  "select-all": "awsui_select-all_15o6u_d2ghy_338"
};

// node_modules/@cloudscape-design/components/internal/components/selectable-item/index.js
var SelectableItem = (_a2, ref) => {
  var { children: content, ariaSelected, ariaChecked, selected, highlighted, disabled, hasBackground, isParent, isChild, isSelectAll, virtualPosition, padBottom, isNextSelected, isPreviousSelected, useInteractiveGroups, screenReaderContent, ariaPosinset, ariaSetsize, highlightType, value, sticky, afterHeader, withScrollbar } = _a2, restProps = __rest(_a2, ["children", "ariaSelected", "ariaChecked", "selected", "highlighted", "disabled", "hasBackground", "isParent", "isChild", "isSelectAll", "virtualPosition", "padBottom", "isNextSelected", "isPreviousSelected", "useInteractiveGroups", "screenReaderContent", "ariaPosinset", "ariaSetsize", "highlightType", "value", "sticky", "afterHeader", "withScrollbar"]);
  const isVisualRefresh = useVisualRefresh();
  const _b = getBaseProps(restProps), { className: className2 } = _b, rest = __rest(_b, ["className"]);
  const classNames = clsx_m_default(className2, styles_css_default89["selectable-item"], {
    [styles_css_default89.selected]: selected,
    [styles_css_default89.highlighted]: highlighted,
    [styles_css_default89["has-background"]]: hasBackground,
    [styles_css_default89.parent]: isParent,
    [styles_css_default88.parent]: isParent,
    [styles_css_default89.child]: isChild,
    [styles_css_default89["select-all"]]: isSelectAll,
    [styles_css_default89["is-keyboard"]]: highlightType === "keyboard",
    [styles_css_default89.disabled]: disabled,
    [styles_css_default89.virtual]: virtualPosition !== void 0 && !sticky,
    [styles_css_default89["pad-bottom"]]: padBottom,
    [styles_css_default89["next-item-selected"]]: isNextSelected,
    [styles_css_default89["previous-item-selected"]]: isPreviousSelected,
    [styles_css_default89.interactiveGroups]: useInteractiveGroups,
    [styles_css_default89.sticky]: sticky,
    [styles_css_default89["after-header"]]: !!afterHeader,
    [styles_css_default89["with-scrollbar"]]: withScrollbar,
    [styles_css_default89["visual-refresh"]]: isVisualRefresh
  });
  const contentRef = (0, import_react230.useRef)(null);
  const screenReaderContentRef = (0, import_react230.useRef)(null);
  (0, import_react230.useLayoutEffect)(() => {
    if (highlighted && screenReaderContent) {
      if (contentRef.current) {
        contentRef.current.setAttribute("aria-hidden", "true");
      }
      if (screenReaderContentRef.current) {
        screenReaderContentRef.current.textContent = screenReaderContent;
      }
    }
  }, [highlighted, screenReaderContent, contentRef, screenReaderContentRef]);
  const style = virtualPosition !== void 0 ? {
    transform: `translateY(${virtualPosition}px)`
  } : void 0;
  const a11yProperties = {};
  if (isParent && ariaChecked === void 0) {
    a11yProperties.role = "presentation";
  } else {
    a11yProperties.role = "option";
    a11yProperties["aria-disabled"] = disabled;
    if (ariaSelected !== void 0) {
      a11yProperties["aria-selected"] = ariaSelected;
    }
    if (ariaChecked !== void 0) {
      a11yProperties["aria-checked"] = ariaChecked;
    }
    if (ariaPosinset && ariaSetsize) {
      a11yProperties["aria-posinset"] = ariaPosinset;
      a11yProperties["aria-setsize"] = ariaSetsize;
    }
    if (restProps.ariaDescribedby) {
      a11yProperties["aria-describedby"] = restProps.ariaDescribedby;
    }
  }
  return import_react230.default.createElement(
    "div",
    Object.assign({ className: classNames, style }, a11yProperties, rest, isParent || disabled ? {} : getAnalyticsMetadataAttribute(getAnalyticsSelectActionMetadata(Object.assign({ isChild, value }, restProps)))),
    import_react230.default.createElement("div", { className: clsx_m_default(styles_css_default89["option-content"], styles_css_default88["option-content"]), ref: contentRef }, content),
    import_react230.default.createElement("div", { className: styles_css_default89["measure-strut"], ref }),
    import_react230.default.createElement("div", { className: styles_css_default89["screenreader-content"], ref: screenReaderContentRef })
  );
};
var selectable_item_default = import_react230.default.forwardRef(SelectableItem);

// node_modules/@cloudscape-design/components/select/parts/item.js
var Item2 = (_a2, ref) => {
  var { option, highlighted, selected, filteringValue, hasCheckbox, virtualPosition, padBottom, isNextSelected, isPreviousSelected, screenReaderContent, ariaPosinset, ariaSetsize, highlightType, withScrollbar, sticky } = _a2, restProps = __rest(_a2, ["option", "highlighted", "selected", "filteringValue", "hasCheckbox", "virtualPosition", "padBottom", "isNextSelected", "isPreviousSelected", "screenReaderContent", "ariaPosinset", "ariaSetsize", "highlightType", "withScrollbar", "sticky"]);
  const baseProps = getBaseProps(restProps);
  const isParent = option.type === "parent";
  const isChild = option.type === "child";
  const wrappedOption = option.option;
  const disabled = option.disabled || wrappedOption.disabled;
  const disabledReason = disabled && wrappedOption.disabledReason ? wrappedOption.disabledReason : "";
  const isDisabledWithReason = !!disabledReason;
  const internalRef = (0, import_react231.useRef)(null);
  const { descriptionEl, descriptionId } = useHiddenDescription(disabledReason);
  const [canShowTooltip, setCanShowTooltip] = (0, import_react231.useState)(true);
  (0, import_react231.useEffect)(() => setCanShowTooltip(true), [highlighted]);
  return import_react231.default.createElement(
    selectable_item_default,
    Object.assign({ ariaSelected: Boolean(selected), selected, isNextSelected, isPreviousSelected, highlighted, disabled: option.disabled, isParent, isChild, ref: useMergeRefs(ref, internalRef), virtualPosition, padBottom, screenReaderContent, ariaPosinset, ariaSetsize, highlightType, ariaDescribedby: isDisabledWithReason ? descriptionId : "", value: option.option.value, withScrollbar, sticky }, baseProps),
    import_react231.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default84.item, !isParent && wrappedOption.labelTag && styles_css_default84["show-label-tag"]) },
      hasCheckbox && !isParent && import_react231.default.createElement(
        "div",
        { className: styles_css_default84.checkbox },
        import_react231.default.createElement(checkbox_icon_default, { checked: selected || false, disabled: option.disabled })
      ),
      import_react231.default.createElement(option_default, { option: Object.assign(Object.assign({}, wrappedOption), { disabled }), highlightedOption: highlighted, selectedOption: selected, highlightText: filteringValue, isGroupOption: isParent }),
      !hasCheckbox && !isParent && selected && import_react231.default.createElement(
        "div",
        { className: styles_css_default84["selected-icon"] },
        import_react231.default.createElement(internal_default, { name: "check" })
      ),
      isDisabledWithReason && import_react231.default.createElement(
        import_react231.default.Fragment,
        null,
        descriptionEl,
        highlighted && canShowTooltip && import_react231.default.createElement(Tooltip, { className: styles_css_default84["disabled-reason-tooltip"], trackRef: internalRef, value: disabledReason, position: "right", hideOnOverscroll: true, onDismiss: () => setCanShowTooltip(false) })
      )
    )
  );
};
var item_default = import_react231.default.memo(import_react231.default.forwardRef(Item2));

// node_modules/@cloudscape-design/components/select/parts/multiselect-item.js
var import_react232 = __toESM(require_react());
var MultiSelectItem = (_a2, ref) => {
  var { option, highlighted, selected, filteringValue, hasCheckbox, virtualPosition, padBottom, isNextSelected, isPreviousSelected, indeterminate, screenReaderContent, ariaPosinset, ariaSetsize, highlightType, withScrollbar, sticky } = _a2, restProps = __rest(_a2, ["option", "highlighted", "selected", "filteringValue", "hasCheckbox", "virtualPosition", "padBottom", "isNextSelected", "isPreviousSelected", "indeterminate", "screenReaderContent", "ariaPosinset", "ariaSetsize", "highlightType", "withScrollbar", "sticky"]);
  const baseProps = getBaseProps(restProps);
  const isParent = option.type === "parent";
  const isChild = option.type === "child";
  const isSelectAll = option.type === "select-all";
  const wrappedOption = option.option;
  const disabled = option.disabled || wrappedOption.disabled;
  const disabledReason = disabled && (option.disabledReason || wrappedOption.disabledReason) ? option.disabledReason || wrappedOption.disabledReason : "";
  const isDisabledWithReason = !!disabledReason;
  const internalRef = (0, import_react232.useRef)(null);
  const className2 = styles_css_default84.item;
  const { descriptionId, descriptionEl } = useHiddenDescription(disabledReason);
  const [canShowTooltip, setCanShowTooltip] = (0, import_react232.useState)(true);
  (0, import_react232.useEffect)(() => setCanShowTooltip(true), [highlighted]);
  return import_react232.default.createElement(
    selectable_item_default,
    Object.assign({ ariaChecked: isParent && indeterminate ? "mixed" : Boolean(selected), selected, isNextSelected, isPreviousSelected, highlighted, disabled, isParent, isChild, isSelectAll, highlightType, ref: useMergeRefs(ref, internalRef), virtualPosition, padBottom, useInteractiveGroups: true, screenReaderContent, ariaPosinset, ariaSetsize, ariaDescribedby: isDisabledWithReason ? descriptionId : "", value: option.option.value, afterHeader: option.afterHeader, withScrollbar, sticky }, baseProps),
    import_react232.default.createElement(
      "div",
      { className: className2 },
      hasCheckbox && import_react232.default.createElement(
        "div",
        { className: styles_css_default84.checkbox },
        import_react232.default.createElement(checkbox_icon_default, { checked: selected, indeterminate: (isParent || isSelectAll) && indeterminate, disabled })
      ),
      import_react232.default.createElement(option_default, { option: Object.assign(Object.assign({}, wrappedOption), { disabled }), highlightedOption: highlighted, selectedOption: selected, highlightText: filteringValue, isGroupOption: isParent })
    ),
    isDisabledWithReason && import_react232.default.createElement(
      import_react232.default.Fragment,
      null,
      descriptionEl,
      highlighted && canShowTooltip && import_react232.default.createElement(Tooltip, { className: styles_css_default84["disabled-reason-tooltip"], trackRef: internalRef, value: disabledReason, position: "right", hideOnOverscroll: true, onDismiss: () => setCanShowTooltip(false) })
    )
  );
};
var multiselect_item_default = import_react232.default.memo(import_react232.default.forwardRef(MultiSelectItem));

// node_modules/@cloudscape-design/components/select/parts/option-group.js
var import_react233 = __toESM(require_react());
function OptionGroup({ children: children2, virtual, ariaLabelledby, ariaDisabled }) {
  return import_react233.default.createElement("div", { role: "group", className: clsx_m_default(styles_css_default84["option-group"], virtual && styles_css_default84.virtual), "aria-labelledby": ariaLabelledby, "aria-disabled": ariaDisabled }, children2);
}

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/test-indexes.js
var testIndexMap = /* @__PURE__ */ new WeakMap();
var getTestOptionIndexes = (item) => testIndexMap.get(item);
var generateTestIndexes = (filteredItems, getParentGroup) => {
  let throughIndex = 1;
  let groupIndex = 0;
  let inGroupIndex = 1;
  let currentGroup = null;
  filteredItems.forEach((item) => {
    const isGroup5 = item.type === "parent";
    const group = isGroup5 ? item : getParentGroup(item);
    if (group && group !== currentGroup) {
      currentGroup = group;
      groupIndex += 1;
      inGroupIndex = 1;
    }
    if (isGroup5) {
      testIndexMap.set(item, { groupIndex });
    } else if (group && item.type === "child") {
      testIndexMap.set(item, {
        throughIndex: throughIndex++,
        groupIndex,
        inGroupIndex: inGroupIndex++
      });
    } else if (item.type === "child" || !item.type) {
      testIndexMap.set(item, { throughIndex: throughIndex++ });
    }
  });
};

// node_modules/@cloudscape-design/components/select/utils/get-item-props.js
var getItemProps = ({ option, index, getOptionProps: getOptionProps2, filteringValue, checkboxes = false }) => {
  const optionProps = getOptionProps2(option, index);
  optionProps.filteringValue = filteringValue;
  const { inGroupIndex, groupIndex, throughIndex } = getTestOptionIndexes(option) || {};
  return Object.assign(Object.assign({}, optionProps), { hasCheckbox: checkboxes, ["data-group-index"]: groupIndex, ["data-child-index"]: inGroupIndex, ["data-test-index"]: throughIndex });
};

// node_modules/@cloudscape-design/components/select/utils/render-options.js
var renderOptions = ({ options, getOptionProps: getOptionProps2, filteringValue, highlightType, idPrefix, checkboxes = false, hasDropdownStatus, virtualItems, useInteractiveGroups, screenReaderContent, ariaSetsize, withScrollbar, firstOptionSticky, stickyOptionRef }) => {
  const getNestedItemProps = ({ index, option }) => {
    const virtualItem = virtualItems && virtualItems[index];
    const globalIndex = virtualItem ? virtualItem.index : index;
    return getItemProps({
      option,
      index: globalIndex,
      getOptionProps: getOptionProps2,
      filteringValue: option.type === "select-all" ? "" : filteringValue,
      checkboxes
    });
  };
  const renderListItem = (props2, index) => {
    const virtualItem = virtualItems && virtualItems[index];
    const globalIndex = virtualItem ? virtualItem.index : index;
    const isLastItem = index === options.length - 1;
    const padBottom = !hasDropdownStatus && isLastItem;
    const ListItem2 = useInteractiveGroups ? multiselect_item_default : item_default;
    const isSticky = firstOptionSticky && globalIndex === 0;
    return import_react234.default.createElement(ListItem2, Object.assign({ key: globalIndex }, props2, { virtualPosition: virtualItem && virtualItem.start, ref: isSticky && stickyOptionRef ? stickyOptionRef : virtualItem && virtualItem.measureRef, padBottom, screenReaderContent, ariaPosinset: globalIndex + 1, ariaSetsize, highlightType: highlightType.type, withScrollbar, sticky: isSticky }));
  };
  const unflattenedOptions = unflattenOptions(options);
  return unflattenedOptions.map((nestedDropdownOption) => {
    var _a2;
    const index = nestedDropdownOption.index;
    const props2 = getNestedItemProps(nestedDropdownOption);
    if (nestedDropdownOption.type === "parent") {
      const { children: children2 } = nestedDropdownOption;
      const optionId = (_a2 = props2.id) !== null && _a2 !== void 0 ? _a2 : `${idPrefix}-option-${index}`;
      return import_react234.default.createElement(
        OptionGroup,
        { key: index, virtual: (virtualItems === null || virtualItems === void 0 ? void 0 : virtualItems[index]) !== void 0, ariaLabelledby: optionId, ariaDisabled: props2["aria-disabled"] },
        renderListItem(props2, index),
        children2.map((child) => import_react234.default.createElement(import_react234.default.Fragment, { key: child.index }, renderListItem(getNestedItemProps(child), child.index)))
      );
    }
    return renderListItem(props2, index);
  });
};

// node_modules/@cloudscape-design/components/select/utils/scroll-to-index.js
function scroll_to_index_default({ index, menuEl }) {
  const item = menuEl.querySelector(`[data-mouse-target="${index}"]`);
  if (item) {
    if (menuEl.clientHeight !== void 0 && menuEl.clientHeight > 15) {
      const menuRect = menuEl.getBoundingClientRect();
      const itemRect = item.getBoundingClientRect();
      const offset = parseInt(menuEl.style.scrollPaddingBlockStart) || 0;
      if (itemRect.top < menuRect.top + offset || itemRect.height > menuRect.height - offset) {
        menuEl.scrollBy({ top: itemRect.top - menuRect.top - offset });
      } else if (itemRect.bottom > menuRect.bottom) {
        menuEl.scrollBy({ top: itemRect.bottom - menuRect.bottom });
      }
    }
  }
}

// node_modules/@cloudscape-design/components/select/parts/common.js
var fallbackItemHeight = 31;

// node_modules/@cloudscape-design/components/select/parts/plain-list.js
var PlainList = ({ menuProps, getOptionProps: getOptionProps2, filteredOptions, filteringValue, highlightType, checkboxes, hasDropdownStatus, listBottom, useInteractiveGroups, screenReaderContent, firstOptionSticky }, ref) => {
  const idPrefix = useUniqueId("select-list-");
  const stickyOptionRef = (0, import_react235.useRef)(null);
  const [stickyOptionBlockSize, setStickyOptionBlockSize] = (0, import_react235.useState)(firstOptionSticky ? fallbackItemHeight : 0);
  const [width, menuMeasureRef] = useContainerQuery((rect) => {
    if (stickyOptionRef.current) {
      setStickyOptionBlockSize(stickyOptionRef.current.clientHeight);
    }
    return { inner: rect.contentBoxWidth, outer: rect.borderBoxWidth };
  });
  const menuRef = menuProps.ref;
  const mergedRef = useMergeRefs(menuMeasureRef, menuRef);
  (0, import_react235.useImperativeHandle)(ref, () => (index) => {
    const isSticky = firstOptionSticky && index === 0;
    if (highlightType.moveFocus && menuRef.current && !isSticky) {
      scroll_to_index_default({ index, menuEl: menuRef.current });
    }
  }, [firstOptionSticky, highlightType.moveFocus, menuRef]);
  const withScrollbar = !!width && width.inner < width.outer;
  return import_react235.default.createElement(
    options_list_default,
    Object.assign({}, menuProps, { ref: mergedRef, stickyItemBlockSize: stickyOptionBlockSize }),
    renderOptions({
      options: filteredOptions,
      getOptionProps: getOptionProps2,
      filteringValue,
      idPrefix,
      highlightType,
      checkboxes,
      hasDropdownStatus,
      useInteractiveGroups,
      screenReaderContent,
      firstOptionSticky,
      stickyOptionRef,
      withScrollbar
    }),
    listBottom ? import_react235.default.createElement("div", { role: "option", className: styles_css_default84["list-bottom"] }, listBottom) : null
  );
};
var plain_list_default = (0, import_react235.forwardRef)(PlainList);

// node_modules/@cloudscape-design/components/select/parts/trigger.js
var import_react237 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/button-trigger/index.js
var import_react236 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/button-trigger/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/button-trigger/analytics-metadata/styles.scoped.css";
var styles_css_default90 = {
  "button-trigger": "awsui_button-trigger_l32fn_xo3sj_5"
};

// node_modules/@cloudscape-design/components/internal/components/button-trigger/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/button-trigger/styles.scoped.css";
var styles_css_default91 = {
  "button-trigger": "awsui_button-trigger_18eso_1g60k_161",
  "arrow": "awsui_arrow_18eso_1g60k_161",
  "in-filtering-token-root": "awsui_in-filtering-token-root_18eso_1g60k_221",
  "in-filtering-token-nested": "awsui_in-filtering-token-nested_18eso_1g60k_221",
  "has-caret": "awsui_has-caret_18eso_1g60k_257",
  "placeholder": "awsui_placeholder_18eso_1g60k_260",
  "pressed": "awsui_pressed_18eso_1g60k_273",
  "disabled": "awsui_disabled_18eso_1g60k_276",
  "in-filtering-token": "awsui_in-filtering-token_18eso_1g60k_221",
  "readonly": "awsui_readonly_18eso_1g60k_297",
  "invalid": "awsui_invalid_18eso_1g60k_319",
  "warning": "awsui_warning_18eso_1g60k_328",
  "inline-tokens": "awsui_inline-tokens_18eso_1g60k_337"
};

// node_modules/@cloudscape-design/components/internal/components/button-trigger/index.js
var ButtonTrigger = (_a2, ref) => {
  var { children: children2, pressed, hideCaret = false, disabled = false, readOnly = false, invalid = false, warning = false, inlineTokens, inFilteringToken, ariaHasPopup, ariaLabel, ariaLabelledby, ariaDescribedby, ariaControls, onKeyDown, onKeyUp, onMouseDown, onClick, onFocus, onBlur, autoFocus } = _a2, restProps = __rest(_a2, ["children", "pressed", "hideCaret", "disabled", "readOnly", "invalid", "warning", "inlineTokens", "inFilteringToken", "ariaHasPopup", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "ariaControls", "onKeyDown", "onKeyUp", "onMouseDown", "onClick", "onFocus", "onBlur", "autoFocus"]);
  const baseProps = getBaseProps(restProps);
  let attributes = Object.assign(Object.assign({}, baseProps), { type: "button", className: clsx_m_default(styles_css_default91["button-trigger"], styles_css_default90["button-trigger"], baseProps.className, pressed && styles_css_default91.pressed, disabled && styles_css_default91.disabled, invalid && styles_css_default91.invalid, warning && !invalid && styles_css_default91.warning, !hideCaret && styles_css_default91["has-caret"], readOnly && styles_css_default91.readonly, inFilteringToken && styles_css_default91["in-filtering-token"], inFilteringToken && styles_css_default91[`in-filtering-token-${inFilteringToken}`], inlineTokens && styles_css_default91["inline-tokens"]), disabled, "aria-expanded": pressed, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, "aria-haspopup": ariaHasPopup !== null && ariaHasPopup !== void 0 ? ariaHasPopup : "listbox", "aria-controls": ariaControls, "aria-disabled": readOnly && !disabled ? "true" : void 0, autoFocus });
  if (!readOnly) {
    attributes = Object.assign(Object.assign({}, attributes), { onKeyDown: onKeyDown && ((event) => fireKeyboardEvent(onKeyDown, event)), onKeyUp: onKeyUp && ((event) => fireKeyboardEvent(onKeyUp, event)), onMouseDown: onMouseDown && ((event) => fireCancelableEvent(onMouseDown, {}, event)), onClick: onClick && ((event) => fireCancelableEvent(onClick, {}, event)), onFocus: onFocus && ((event) => fireCancelableEvent(onFocus, {}, event)), onBlur: onBlur && ((event) => fireCancelableEvent(onBlur, { relatedTarget: event.relatedTarget }, event)) });
  }
  if (invalid) {
    attributes["aria-invalid"] = invalid;
  }
  const analyticsMetadata = {
    action: !pressed ? "expand" : "collapse",
    detail: {
      label: { root: "self" }
    }
  };
  return import_react236.default.createElement(
    "button",
    Object.assign({ ref }, attributes, disabled || readOnly ? {} : getAnalyticsMetadataAttribute(analyticsMetadata)),
    children2,
    !hideCaret && import_react236.default.createElement(
      "span",
      { className: styles_css_default91.arrow },
      import_react236.default.createElement(internal_default, { name: "caret-down-filled", variant: disabled || readOnly ? "disabled" : "normal" })
    )
  );
};
var button_trigger_default = import_react236.default.forwardRef(ButtonTrigger);

// node_modules/@cloudscape-design/components/select/parts/trigger.js
var Trigger = import_react237.default.forwardRef(({ ariaLabelledby, ariaDescribedby, controlId, invalid, inlineLabelText, warning, triggerProps, selectedOption, selectedOptions, triggerVariant, inFilteringToken, isOpen, placeholder, disabled, readOnly }, ref) => {
  const isVisualRefresh = useVisualRefresh();
  const generatedId = useUniqueId();
  const id = controlId !== null && controlId !== void 0 ? controlId : generatedId;
  const triggerContentId = useUniqueId("trigger-content-");
  let ariaLabelledbyIds = joinStrings(ariaLabelledby, triggerContentId);
  let triggerContent = null;
  if (triggerVariant === "tokens") {
    if (selectedOptions === null || selectedOptions === void 0 ? void 0 : selectedOptions.length) {
      triggerContent = import_react237.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default84["inline-token-trigger"], disabled && styles_css_default84["inline-token-trigger--disabled"], isVisualRefresh && styles_css_default84["visual-refresh"]) },
        import_react237.default.createElement("span", { className: styles_css_default84["inline-token-list"] }, selectedOptions.map(({ label }, i2) => import_react237.default.createElement("span", { key: i2, className: styles_css_default84["inline-token"] }, label))),
        import_react237.default.createElement(
          "span",
          { className: styles_css_default84["inline-token-counter"], id: triggerContentId },
          import_react237.default.createElement("span", { className: styles_css_default84["inline-token-hidden-placeholder"] }, placeholder),
          import_react237.default.createElement(
            "span",
            null,
            "(",
            selectedOptions.length,
            ")"
          )
        )
      );
      ariaLabelledbyIds = ariaLabelledby;
    } else {
      triggerContent = import_react237.default.createElement("span", { "aria-disabled": "true", className: clsx_m_default(styles_css_default84.placeholder, styles_css_default84.trigger), id: triggerContentId }, placeholder);
    }
  } else if (!selectedOption) {
    triggerContent = import_react237.default.createElement("span", { "aria-disabled": "true", className: clsx_m_default(styles_css_default84.placeholder, styles_css_default84.trigger), id: triggerContentId }, placeholder);
  } else if (triggerVariant === "option") {
    triggerContent = import_react237.default.createElement(option_default, { id: triggerContentId, option: Object.assign(Object.assign({}, selectedOption), { disabled }), triggerVariant: true });
  } else {
    triggerContent = import_react237.default.createElement("span", { id: triggerContentId, className: styles_css_default84.trigger }, selectedOption.label || selectedOption.value);
  }
  const mergedRef = useMergeRefs(triggerProps.ref, ref);
  const triggerButton = import_react237.default.createElement(button_trigger_default, Object.assign({}, triggerProps, { id, ref: mergedRef, pressed: !!isOpen, disabled, readOnly, invalid, warning: warning && !invalid, inFilteringToken, inlineTokens: triggerVariant === "tokens", ariaDescribedby, ariaLabelledby: ariaLabelledbyIds }), triggerContent);
  return import_react237.default.createElement(import_react237.default.Fragment, null, inlineLabelText ? import_react237.default.createElement(
    "div",
    { className: styles_css_default84["inline-label-wrapper"] },
    import_react237.default.createElement("label", { htmlFor: controlId, className: clsx_m_default(styles_css_default84["inline-label"], triggerVariant === "tokens" && styles_css_default84["inline-label-inline-tokens"]) }, inlineLabelText),
    import_react237.default.createElement("div", { className: styles_css_default84["inline-label-trigger-wrapper"] }, triggerButton)
  ) : import_react237.default.createElement(import_react237.default.Fragment, null, triggerButton));
});
var trigger_default = Trigger;

// node_modules/@cloudscape-design/components/select/parts/virtual-list.js
var import_react240 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-virtual/index.js
var import_react239 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/vendor/react-virtual.js
var import_react238 = __toESM(require_react());
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key2 in source) {
        if (Object.prototype.hasOwnProperty.call(source, key2)) {
          target[key2] = source[key2];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key2 = sourceKeys[i2];
    if (excluded.indexOf(key2) >= 0) continue;
    target[key2] = source[key2];
  }
  return target;
}
var props = ["bottom", "height", "left", "right", "top", "width"];
var rectChanged = function rectChanged2(a4, b2) {
  if (a4 === void 0) {
    a4 = {};
  }
  if (b2 === void 0) {
    b2 = {};
  }
  return props.some(function(prop) {
    return a4[prop] !== b2[prop];
  });
};
var observedNodes = /* @__PURE__ */ new Map();
var rafId;
var run = function run2() {
  var changedStates = [];
  observedNodes.forEach(function(state, node) {
    var newRect = node.getBoundingClientRect();
    if (rectChanged(newRect, state.rect)) {
      state.rect = newRect;
      changedStates.push(state);
    }
  });
  changedStates.forEach(function(state) {
    state.callbacks.forEach(function(cb) {
      return cb(state.rect);
    });
  });
  rafId = window.requestAnimationFrame(run2);
};
function observeRect(node, cb) {
  return {
    observe: function observe() {
      var wasEmpty = observedNodes.size === 0;
      if (observedNodes.has(node)) {
        observedNodes.get(node).callbacks.push(cb);
      } else {
        observedNodes.set(node, {
          rect: void 0,
          hasRectChanged: false,
          callbacks: [cb]
        });
      }
      if (wasEmpty) run();
    },
    unobserve: function unobserve() {
      var state = observedNodes.get(node);
      if (state) {
        var index = state.callbacks.indexOf(cb);
        if (index >= 0) state.callbacks.splice(index, 1);
        if (!state.callbacks.length) observedNodes["delete"](node);
        if (!observedNodes.size) cancelAnimationFrame(rafId);
      }
    }
  };
}
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? import_react238.default.useLayoutEffect : import_react238.default.useEffect;
function useRect(nodeRef, initialRect) {
  if (initialRect === void 0) {
    initialRect = {
      width: 0,
      height: 0
    };
  }
  var _React$useState = import_react238.default.useState(nodeRef.current), element = _React$useState[0], setElement = _React$useState[1];
  var _React$useReducer = import_react238.default.useReducer(rectReducer, initialRect), rect = _React$useReducer[0], dispatch = _React$useReducer[1];
  var initialRectSet = import_react238.default.useRef(false);
  useIsomorphicLayoutEffect(function() {
    if (nodeRef.current !== element) {
      setElement(nodeRef.current);
    }
  });
  useIsomorphicLayoutEffect(function() {
    if (element && !initialRectSet.current) {
      initialRectSet.current = true;
      var _rect = element.getBoundingClientRect();
      dispatch({
        rect: _rect
      });
    }
  }, [element]);
  import_react238.default.useEffect(function() {
    if (!element) {
      return;
    }
    var observer2 = observeRect(element, function(rect2) {
      dispatch({
        rect: rect2
      });
    });
    observer2.observe();
    return function() {
      observer2.unobserve();
    };
  }, [element]);
  return rect;
}
function rectReducer(state, action) {
  var rect = action.rect;
  if (state.height !== rect.height || state.width !== rect.width) {
    return rect;
  }
  return state;
}
var defaultEstimateSize = function defaultEstimateSize2() {
  return 50;
};
var defaultKeyExtractor = function defaultKeyExtractor2(index) {
  return index;
};
var defaultMeasureSize = function defaultMeasureSize2(el, horizontal) {
  var key2 = horizontal ? "offsetWidth" : "offsetHeight";
  return el[key2];
};
var defaultRangeExtractor = function defaultRangeExtractor2(range3) {
  var start = Math.max(range3.start - range3.overscan, 0);
  var end = Math.min(range3.end + range3.overscan, range3.size - 1);
  var arr = [];
  for (var i2 = start; i2 <= end; i2++) {
    arr.push(i2);
  }
  return arr;
};
function useVirtual(_ref) {
  var _measurements;
  var _ref$size = _ref.size, size = _ref$size === void 0 ? 0 : _ref$size, _ref$estimateSize = _ref.estimateSize, estimateSize = _ref$estimateSize === void 0 ? defaultEstimateSize : _ref$estimateSize, _ref$overscan = _ref.overscan, overscan = _ref$overscan === void 0 ? 1 : _ref$overscan, _ref$paddingStart = _ref.paddingStart, paddingStart = _ref$paddingStart === void 0 ? 0 : _ref$paddingStart, _ref$paddingEnd = _ref.paddingEnd, paddingEnd = _ref$paddingEnd === void 0 ? 0 : _ref$paddingEnd, parentRef = _ref.parentRef, horizontal = _ref.horizontal, scrollToFn = _ref.scrollToFn, useObserver = _ref.useObserver, initialRect = _ref.initialRect, onScrollElement = _ref.onScrollElement, scrollOffsetFn = _ref.scrollOffsetFn, _ref$keyExtractor = _ref.keyExtractor, keyExtractor = _ref$keyExtractor === void 0 ? defaultKeyExtractor : _ref$keyExtractor, _ref$measureSize = _ref.measureSize, measureSize = _ref$measureSize === void 0 ? defaultMeasureSize : _ref$measureSize, _ref$rangeExtractor = _ref.rangeExtractor, rangeExtractor = _ref$rangeExtractor === void 0 ? defaultRangeExtractor : _ref$rangeExtractor;
  var sizeKey = horizontal ? "width" : "height";
  var scrollKey = horizontal ? "scrollLeft" : "scrollTop";
  var latestRef = import_react238.default.useRef({
    scrollOffset: 0,
    measurements: []
  });
  var _React$useState = import_react238.default.useState(0), scrollOffset = _React$useState[0], setScrollOffset = _React$useState[1];
  latestRef.current.scrollOffset = scrollOffset;
  var useMeasureParent = useObserver || useRect;
  var _useMeasureParent = useMeasureParent(parentRef, initialRect), outerSize = _useMeasureParent[sizeKey];
  latestRef.current.outerSize = outerSize;
  var defaultScrollToFn = import_react238.default.useCallback(function(offset) {
    if (parentRef.current) {
      parentRef.current[scrollKey] = offset;
    }
  }, [parentRef, scrollKey]);
  var resolvedScrollToFn = scrollToFn || defaultScrollToFn;
  scrollToFn = import_react238.default.useCallback(function(offset) {
    resolvedScrollToFn(offset, defaultScrollToFn);
  }, [defaultScrollToFn, resolvedScrollToFn]);
  var _React$useState2 = import_react238.default.useState({}), measuredCache = _React$useState2[0], setMeasuredCache = _React$useState2[1];
  var measure = import_react238.default.useCallback(function() {
    return setMeasuredCache({});
  }, []);
  var pendingMeasuredCacheIndexesRef = import_react238.default.useRef([]);
  var measurements = import_react238.default.useMemo(function() {
    var min3 = pendingMeasuredCacheIndexesRef.current.length > 0 ? Math.min.apply(Math, pendingMeasuredCacheIndexesRef.current) : 0;
    pendingMeasuredCacheIndexesRef.current = [];
    var measurements2 = latestRef.current.measurements.slice(0, min3);
    for (var i2 = min3; i2 < size; i2++) {
      var key2 = keyExtractor(i2);
      var measuredSize = measuredCache[key2];
      var _start = measurements2[i2 - 1] ? measurements2[i2 - 1].end : paddingStart;
      var _size = typeof measuredSize === "number" ? measuredSize : estimateSize(i2);
      var _end = _start + _size;
      measurements2[i2] = {
        index: i2,
        start: _start,
        size: _size,
        end: _end,
        key: key2
      };
    }
    return measurements2;
  }, [estimateSize, measuredCache, paddingStart, size, keyExtractor]);
  var totalSize = (((_measurements = measurements[size - 1]) == null ? void 0 : _measurements.end) || paddingStart) + paddingEnd;
  latestRef.current.measurements = measurements;
  latestRef.current.totalSize = totalSize;
  var element = onScrollElement ? onScrollElement.current : parentRef.current;
  var scrollOffsetFnRef = import_react238.default.useRef(scrollOffsetFn);
  scrollOffsetFnRef.current = scrollOffsetFn;
  useIsomorphicLayoutEffect(function() {
    if (!element) {
      setScrollOffset(0);
      return;
    }
    var onScroll = function onScroll2(event) {
      var offset = scrollOffsetFnRef.current ? scrollOffsetFnRef.current(event) : element[scrollKey];
      setScrollOffset(offset);
    };
    onScroll();
    element.addEventListener("scroll", onScroll, {
      capture: false,
      passive: true
    });
    return function() {
      element.removeEventListener("scroll", onScroll);
    };
  }, [element, scrollKey]);
  var _calculateRange = calculateRange(latestRef.current), start = _calculateRange.start, end = _calculateRange.end;
  var indexes = import_react238.default.useMemo(function() {
    return rangeExtractor({
      start,
      end,
      overscan,
      size: measurements.length
    });
  }, [start, end, overscan, measurements.length, rangeExtractor]);
  var measureSizeRef = import_react238.default.useRef(measureSize);
  measureSizeRef.current = measureSize;
  var virtualItems = import_react238.default.useMemo(function() {
    var virtualItems2 = [];
    var _loop = function _loop2(k4, len2) {
      var i2 = indexes[k4];
      var measurement = measurements[i2];
      var item = _extends2(_extends2({}, measurement), {}, {
        measureRef: function measureRef(el) {
          if (el) {
            var measuredSize = measureSizeRef.current(el, horizontal);
            if (measuredSize !== item.size) {
              var _scrollOffset = latestRef.current.scrollOffset;
              if (item.start < _scrollOffset) {
                defaultScrollToFn(_scrollOffset + (measuredSize - item.size));
              }
              pendingMeasuredCacheIndexesRef.current.push(i2);
              setMeasuredCache(function(old) {
                var _extends22;
                return _extends2(_extends2({}, old), {}, (_extends22 = {}, _extends22[item.key] = measuredSize, _extends22));
              });
            }
          }
        }
      });
      virtualItems2.push(item);
    };
    for (var k3 = 0, len = indexes.length; k3 < len; k3++) {
      _loop(k3);
    }
    return virtualItems2;
  }, [indexes, defaultScrollToFn, horizontal, measurements]);
  var mountedRef = import_react238.default.useRef(false);
  useIsomorphicLayoutEffect(function() {
    if (mountedRef.current) {
      setMeasuredCache({});
    }
    mountedRef.current = true;
  }, [estimateSize]);
  var scrollToOffset = import_react238.default.useCallback(function(toOffset, _temp) {
    var _ref2 = _temp === void 0 ? {} : _temp, _ref2$align = _ref2.align, align = _ref2$align === void 0 ? "start" : _ref2$align;
    var _latestRef$current = latestRef.current, scrollOffset2 = _latestRef$current.scrollOffset, outerSize2 = _latestRef$current.outerSize;
    if (align === "auto") {
      if (toOffset <= scrollOffset2) {
        align = "start";
      } else if (toOffset >= scrollOffset2 + outerSize2) {
        align = "end";
      } else {
        align = "start";
      }
    }
    if (align === "start") {
      scrollToFn(toOffset);
    } else if (align === "end") {
      scrollToFn(toOffset - outerSize2);
    } else if (align === "center") {
      scrollToFn(toOffset - outerSize2 / 2);
    }
  }, [scrollToFn]);
  var tryScrollToIndex = import_react238.default.useCallback(function(index, _temp2) {
    var _ref3 = _temp2 === void 0 ? {} : _temp2, _ref3$align = _ref3.align, align = _ref3$align === void 0 ? "auto" : _ref3$align, rest = _objectWithoutPropertiesLoose2(_ref3, ["align"]);
    var _latestRef$current2 = latestRef.current, measurements2 = _latestRef$current2.measurements, scrollOffset2 = _latestRef$current2.scrollOffset, outerSize2 = _latestRef$current2.outerSize;
    var measurement = measurements2[Math.max(0, Math.min(index, size - 1))];
    if (!measurement) {
      return;
    }
    if (align === "auto") {
      if (measurement.end >= scrollOffset2 + outerSize2) {
        align = "end";
      } else if (measurement.start <= scrollOffset2) {
        align = "start";
      } else {
        return;
      }
    }
    var toOffset = align === "center" ? measurement.start + measurement.size / 2 : align === "end" ? measurement.end : measurement.start;
    scrollToOffset(toOffset, _extends2({
      align
    }, rest));
  }, [scrollToOffset, size]);
  var scrollToIndex = import_react238.default.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    tryScrollToIndex.apply(void 0, args);
    requestAnimationFrame(function() {
      tryScrollToIndex.apply(void 0, args);
    });
  }, [tryScrollToIndex]);
  return {
    virtualItems,
    totalSize,
    scrollToOffset,
    scrollToIndex,
    measure
  };
}
var findNearestBinarySearch = function findNearestBinarySearch2(low, high, getCurrentValue, value) {
  while (low <= high) {
    var middle = (low + high) / 2 | 0;
    var currentValue = getCurrentValue(middle);
    if (currentValue < value) {
      low = middle + 1;
    } else if (currentValue > value) {
      high = middle - 1;
    } else {
      return middle;
    }
  }
  if (low > 0) {
    return low - 1;
  } else {
    return 0;
  }
};
function calculateRange(_ref4) {
  var measurements = _ref4.measurements, outerSize = _ref4.outerSize, scrollOffset = _ref4.scrollOffset;
  var size = measurements.length - 1;
  var getOffset = function getOffset2(index) {
    return measurements[index].start;
  };
  var start = findNearestBinarySearch(0, size, getOffset, scrollOffset);
  var end = start;
  while (end < size && measurements[end].end < scrollOffset + outerSize) {
    end++;
  }
  return {
    start,
    end
  };
}

// node_modules/@cloudscape-design/components/internal/hooks/use-virtual/sticky-range-extractor.js
function sticky_range_extractor_default(range3) {
  const defaultRange = defaultRangeExtractor(range3);
  return defaultRange[0] === 0 ? defaultRange : [0, ...defaultRange];
}

// node_modules/@cloudscape-design/components/internal/hooks/use-virtual/index.js
var MAX_ITEM_MOUNTS = 50 - 1;
function useVirtual2({ items, parentRef, estimateSize, firstItemSticky }) {
  const rowVirtualizer = useVirtual({
    size: items.length,
    parentRef,
    estimateSize,
    overscan: 5,
    rangeExtractor: firstItemSticky ? sticky_range_extractor_default : void 0
  });
  const measuresCache = (0, import_react239.useRef)(/* @__PURE__ */ new WeakMap());
  const indicesKey = rowVirtualizer.virtualItems.map((item) => `${item.index}`).join(":");
  (0, import_react239.useEffect)(() => {
    measuresCache.current = /* @__PURE__ */ new WeakMap();
  }, [indicesKey, items, estimateSize]);
  const virtualItems = (0, import_react239.useMemo)(() => rowVirtualizer.virtualItems.map((virtualItem) => Object.assign(Object.assign({}, virtualItem), { measureRef: (node) => {
    var _a2;
    const mountedCount = (_a2 = measuresCache.current.get(items[virtualItem.index])) !== null && _a2 !== void 0 ? _a2 : 0;
    if (mountedCount < MAX_ITEM_MOUNTS) {
      virtualItem.measureRef(node);
      measuresCache.current.set(items[virtualItem.index], mountedCount + 1);
    }
  } })), [items, rowVirtualizer.virtualItems]);
  return {
    virtualItems,
    totalSize: rowVirtualizer.totalSize,
    scrollToIndex: rowVirtualizer.scrollToIndex
  };
}

// node_modules/@cloudscape-design/components/select/parts/virtual-list.js
var VirtualList = (props2, ref) => {
  return props2.menuProps.open ? import_react240.default.createElement(VirtualListOpen, Object.assign({}, props2, { ref })) : import_react240.default.createElement(VirtualListClosed, Object.assign({}, props2, { ref }));
};
var VirtualListOpen = (0, import_react240.forwardRef)(({ menuProps, getOptionProps: getOptionProps2, filteredOptions, filteringValue, highlightType, checkboxes, hasDropdownStatus, listBottom, useInteractiveGroups, screenReaderContent, firstOptionSticky }, ref) => {
  const [width, menuMeasureRef] = useContainerQuery((rect) => ({ inner: rect.contentBoxWidth, outer: rect.borderBoxWidth }), []);
  const menuRefObject = (0, import_react240.useRef)(null);
  const menuRef = useMergeRefs(menuMeasureRef, menuRefObject, menuProps.ref);
  const previousHighlightedIndex = (0, import_react240.useRef)();
  const { virtualItems, totalSize, scrollToIndex } = useVirtual2({
    items: filteredOptions,
    parentRef: menuRefObject,
    // estimateSize is a dependency of measurements memo. We update it to force full recalculation
    // when the height of any option could have changed:
    // 1: because the component got resized (width property got updated)
    // 2: because the option changed its content (filteringValue property controls the highlight and the visibility of hidden tags)
    // eslint-disable-next-line react-hooks/exhaustive-deps
    estimateSize: (0, import_react240.useCallback)(() => fallbackItemHeight, [width === null || width === void 0 ? void 0 : width.inner, filteringValue]),
    firstItemSticky: firstOptionSticky
  });
  (0, import_react240.useImperativeHandle)(ref, () => (index) => {
    if (highlightType.moveFocus) {
      const movingUp = previousHighlightedIndex.current !== void 0 && index < previousHighlightedIndex.current;
      if (firstOptionSticky && movingUp && index !== 0 && menuRefObject.current) {
        scroll_to_index_default({
          index,
          menuEl: menuRefObject === null || menuRefObject === void 0 ? void 0 : menuRefObject.current
        });
      } else {
        scrollToIndex(index);
      }
    }
    previousHighlightedIndex.current = index;
  }, [firstOptionSticky, highlightType.moveFocus, scrollToIndex]);
  const stickySize = firstOptionSticky ? virtualItems[0].size : 0;
  const withScrollbar = !!width && width.inner < width.outer;
  const idPrefix = useUniqueId("select-list-");
  const finalOptions = renderOptions({
    options: virtualItems.map(({ index }) => filteredOptions[index]),
    getOptionProps: getOptionProps2,
    filteringValue,
    highlightType,
    idPrefix,
    checkboxes,
    hasDropdownStatus,
    virtualItems,
    useInteractiveGroups,
    screenReaderContent,
    firstOptionSticky,
    withScrollbar
  });
  return import_react240.default.createElement(
    options_list_default,
    Object.assign({}, menuProps, { stickyItemBlockSize: stickySize, ref: menuRef }),
    finalOptions,
    import_react240.default.createElement("div", { "aria-hidden": "true", key: "total-size", className: styles_css_default84["layout-strut"], style: { height: totalSize - stickySize } }),
    listBottom ? import_react240.default.createElement("div", { role: "option", className: styles_css_default84["list-bottom"] }, listBottom) : null
  );
});
var VirtualListClosed = (0, import_react240.forwardRef)(({ menuProps, listBottom }, ref) => {
  (0, import_react240.useImperativeHandle)(ref, () => () => {
  }, []);
  return import_react240.default.createElement(options_list_default, Object.assign({}, menuProps, { ref: menuProps.ref }), listBottom ? import_react240.default.createElement("div", { role: "option", className: styles_css_default84["list-bottom"] }, listBottom) : null);
});
var virtual_list_default = (0, import_react240.forwardRef)(VirtualList);

// node_modules/@cloudscape-design/components/token-group/internal.js
var import_react246 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/token-list/index.js
var import_react242 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/token-list/token-limit-toggle.js
var import_react241 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/token-list/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/token-list/styles.scoped.css";
var styles_css_default92 = {
  "root": "awsui_root_gfwv3_1hmoa_193",
  "horizontal": "awsui_horizontal_gfwv3_1hmoa_196",
  "vertical": "awsui_vertical_gfwv3_1hmoa_202",
  "list": "awsui_list_gfwv3_1hmoa_207",
  "grid": "awsui_grid_gfwv3_1hmoa_226",
  "list-item": "awsui_list-item_gfwv3_1hmoa_238",
  "toggle-container-inline": "awsui_toggle-container-inline_gfwv3_1hmoa_245",
  "toggle": "awsui_toggle_gfwv3_1hmoa_245",
  "description": "awsui_description_gfwv3_1hmoa_337",
  "separator": "awsui_separator_gfwv3_1hmoa_341"
};

// node_modules/@cloudscape-design/components/internal/components/token-list/token-limit-toggle.js
function TokenLimitToggle({ controlId, allHidden, expanded, numberOfHiddenOptions, onClick, i18nStrings = {}, limitShowFewerAriaLabel, limitShowMoreAriaLabel }) {
  const i18n = useInternalI18n("token-group");
  const numberOfHiddenOptionLabel = allHidden ? numberOfHiddenOptions : `+${numberOfHiddenOptions}`;
  const description = expanded ? i18n("i18nStrings.limitShowFewer", i18nStrings.limitShowFewer) : `${i18n("i18nStrings.limitShowMore", i18nStrings.limitShowMore) || ""} (${numberOfHiddenOptionLabel})`;
  const ariaLabel = expanded ? limitShowFewerAriaLabel : limitShowMoreAriaLabel;
  const handleClick = (0, import_react241.useCallback)(() => {
    fireNonCancelableEvent(onClick, null);
  }, [onClick]);
  const analyticsMetadata = {
    action: !expanded ? "showMore" : "showLess",
    detail: {
      label: { root: "self" }
    }
  };
  return import_react241.default.createElement(
    "button",
    Object.assign({ type: "button", className: styles_css_default92.toggle, onClick: handleClick, "aria-controls": controlId, "aria-expanded": expanded, "aria-label": ariaLabel }, getAnalyticsMetadataAttribute(analyticsMetadata)),
    import_react241.default.createElement(internal_default, { name: expanded ? "treeview-collapse" : "treeview-expand" }),
    import_react241.default.createElement("span", { className: styles_css_default92.description }, description)
  );
}

// node_modules/@cloudscape-design/components/internal/components/token-list/index.js
function TokenList({ items, alignment, renderItem, limit, after, i18nStrings, limitShowFewerAriaLabel, limitShowMoreAriaLabel, onExpandedClick = () => void 0 }) {
  const controlId = useUniqueId();
  const [expanded, setExpanded] = (0, import_react242.useState)(false);
  const hasItems = items.length > 0;
  const hasHiddenItems = hasItems && limit !== void 0 && items.length > limit;
  const visibleItems = hasHiddenItems && !expanded ? items.slice(0, limit) : items;
  const hasVisibleItems = visibleItems.length > 0;
  const toggle = hasHiddenItems ? import_react242.default.createElement(
    "div",
    { className: styles_css_default92[`toggle-container-${alignment}`] },
    import_react242.default.createElement(TokenLimitToggle, { controlId: hasVisibleItems ? controlId : void 0, allHidden: limit === 0, expanded, numberOfHiddenOptions: items.length - visibleItems.length, i18nStrings, limitShowFewerAriaLabel, limitShowMoreAriaLabel, onClick: () => {
      const isExpanded = !expanded;
      setExpanded(isExpanded);
      onExpandedClick(isExpanded);
    } })
  ) : null;
  if (alignment === "inline") {
    return import_react242.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default92.root, styles_css_default92.horizontal) },
      hasItems && import_react242.default.createElement("ul", { id: controlId, className: styles_css_default92.list }, visibleItems.map((item, itemIndex) => import_react242.default.createElement("li", { key: itemIndex, className: styles_css_default92["list-item"], "aria-setsize": items.length, "aria-posinset": itemIndex + 1 }, renderItem(item, itemIndex)))),
      toggle,
      after && import_react242.default.createElement("div", { className: styles_css_default92.separator }),
      after
    );
  }
  return import_react242.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default92.root, styles_css_default92.vertical) },
    hasVisibleItems && import_react242.default.createElement("ul", { id: controlId, className: clsx_m_default(styles_css_default92.list, {
      [styles_css_default92.vertical]: alignment === "vertical",
      [styles_css_default92.horizontal]: alignment === "horizontal",
      [styles_css_default92.grid]: alignment === "horizontal-grid"
    }) }, visibleItems.map((item, itemIndex) => import_react242.default.createElement("li", { key: itemIndex, className: styles_css_default92["list-item"], "aria-setsize": items.length, "aria-posinset": itemIndex + 1 }, renderItem(item, itemIndex)))),
    toggle,
    after
  );
}

// node_modules/@cloudscape-design/components/internal/hooks/use-list-focus-controller.js
var import_react243 = __toESM(require_react());
function useListFocusController({ nextFocusIndex, onFocusMoved, listItemSelector, fallbackSelector, showMoreSelector }) {
  const tokenListRef = (0, import_react243.useRef)(null);
  (0, import_react243.useEffect)(() => {
    if (nextFocusIndex === void 0 || nextFocusIndex === null || tokenListRef.current === null) {
      return;
    }
    const tokenElements = tokenListRef.current.querySelectorAll(listItemSelector);
    const fallbackElement = fallbackSelector ? selectElement(tokenListRef.current, fallbackSelector) : null;
    const toggleButton = showMoreSelector ? selectElement(tokenListRef.current, showMoreSelector) : null;
    let closestPrevIndex = Number.NEGATIVE_INFINITY;
    let closestNextIndex = Number.POSITIVE_INFINITY;
    for (let activeIndex = 0; activeIndex < tokenElements.length; activeIndex++) {
      if (activeIndex < nextFocusIndex) {
        closestPrevIndex = nextFocusIndex - activeIndex < nextFocusIndex - closestPrevIndex ? activeIndex : closestPrevIndex;
      } else {
        closestNextIndex = activeIndex - nextFocusIndex < closestNextIndex - nextFocusIndex ? activeIndex : closestNextIndex;
      }
    }
    const nextElement = tokenElements[closestNextIndex];
    const prevElement = tokenElements[closestPrevIndex];
    const focusTarget = getFirstEligible({ id: "next", element: nextElement }, { id: "prev", element: prevElement }, { id: "show-more", element: toggleButton }, { id: "fallback", element: fallbackElement });
    if (focusTarget) {
      onFocusMoved(focusTarget.element, focusTarget.id);
    }
  }, [nextFocusIndex, listItemSelector, fallbackSelector, showMoreSelector]);
  return tokenListRef;
}
function getFirstEligible(...elements) {
  for (const { id, element } of elements) {
    const focusable = element ? getFocusableElement(element) : null;
    if (focusable) {
      return { id, element: focusable };
    }
  }
  return null;
}
function getFocusableElement(element) {
  if (!(element instanceof HTMLElement)) {
    return null;
  }
  if (isFocusable2(element)) {
    return element;
  }
  return getFirstFocusable2(element);
}
function selectElement(container, selector) {
  if (container.matches(selector)) {
    return container;
  }
  return container.querySelector(selector);
}

// node_modules/@cloudscape-design/components/token-group/token.js
var import_react245 = __toESM(require_react());

// node_modules/@cloudscape-design/components/token-group/dismiss-button.js
var import_react244 = __toESM(require_react());

// node_modules/@cloudscape-design/components/token-group/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/token-group/styles.scoped.css";
var styles_css_default93 = {
  "root": "awsui_root_dm8gx_1a95u_161",
  "has-items": "awsui_has-items_dm8gx_1a95u_192",
  "no-padding": "awsui_no-padding_dm8gx_1a95u_192",
  "dismiss-button": "awsui_dismiss-button_dm8gx_1a95u_196",
  "token": "awsui_token_dm8gx_1a95u_238",
  "token-box": "awsui_token-box_dm8gx_1a95u_245",
  "token-box-readonly": "awsui_token-box-readonly_dm8gx_1a95u_265",
  "token-box-disabled": "awsui_token-box-disabled_dm8gx_1a95u_279"
};

// node_modules/@cloudscape-design/components/token-group/dismiss-button.js
var dismiss_button_default = (0, import_react244.forwardRef)(DismissButton);
function DismissButton({ disabled, dismissLabel, onDismiss, readOnly }, ref) {
  const analyticsMetadata = {
    action: "dismiss",
    detail: {
      label: { root: "self" }
    }
  };
  return import_react244.default.createElement(
    "button",
    Object.assign({ ref, type: "button", className: styles_css_default93["dismiss-button"], "aria-disabled": disabled || readOnly ? true : void 0, onClick: () => {
      if (disabled || readOnly || !onDismiss) {
        return;
      }
      onDismiss();
    }, "aria-label": dismissLabel }, disabled || readOnly ? {} : getAnalyticsMetadataAttribute(analyticsMetadata)),
    import_react244.default.createElement(internal_default, { name: "close" })
  );
}

// node_modules/@cloudscape-design/components/token-group/token.js
function Token(_a2) {
  var { ariaLabel, disabled, readOnly, dismissLabel, onDismiss, children: children2 } = _a2, restProps = __rest(_a2, ["ariaLabel", "disabled", "readOnly", "dismissLabel", "onDismiss", "children"]);
  const baseProps = getBaseProps(restProps);
  return import_react245.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default93.token, baseProps.className), role: "group", "aria-label": ariaLabel, "aria-disabled": disabled }),
    import_react245.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default93["token-box"], disabled && styles_css_default93["token-box-disabled"], readOnly && styles_css_default93["token-box-readonly"]) },
      children2,
      onDismiss && import_react245.default.createElement(dismiss_button_default, { disabled, dismissLabel, onDismiss, readOnly })
    )
  );
}

// node_modules/@cloudscape-design/components/token-group/internal.js
function InternalTokenGroup(_a2) {
  var { alignment, items, onDismiss, limit, i18nStrings, disableOuterPadding, limitShowFewerAriaLabel, limitShowMoreAriaLabel, readOnly, isItemReadOnly, __internalRootRef } = _a2, props2 = __rest(_a2, ["alignment", "items", "onDismiss", "limit", "i18nStrings", "disableOuterPadding", "limitShowFewerAriaLabel", "limitShowMoreAriaLabel", "readOnly", "isItemReadOnly", "__internalRootRef"]);
  checkControlled("TokenGroup", "items", items, "onDismiss", onDismiss);
  const [nextFocusIndex, setNextFocusIndex] = (0, import_react246.useState)(null);
  const tokenListRef = useListFocusController({
    nextFocusIndex,
    onFocusMoved: (target) => {
      target.focus();
      setNextFocusIndex(null);
    },
    listItemSelector: `.${styles_css_default92["list-item"]}`,
    showMoreSelector: `.${styles_css_default92.toggle}`
  });
  const baseProps = getBaseProps(props2);
  const hasItems = items.length > 0;
  const mergedRef = useMergeRefs(__internalRootRef, tokenListRef);
  return import_react246.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default93.root, hasItems && styles_css_default93["has-items"], disableOuterPadding && styles_css_default93["no-padding"]), ref: mergedRef }),
    import_react246.default.createElement(TokenList, { alignment, items, limit, renderItem: (item, itemIndex) => import_react246.default.createElement(
      Token,
      Object.assign({ ariaLabel: item.label, dismissLabel: item.dismissLabel, onDismiss: () => {
        fireNonCancelableEvent(onDismiss, { itemIndex });
        setNextFocusIndex(itemIndex);
      }, disabled: item.disabled, readOnly: readOnly || (isItemReadOnly === null || isItemReadOnly === void 0 ? void 0 : isItemReadOnly(item)) }, item.disabled || readOnly ? {} : getAnalyticsMetadataAttribute({ detail: { position: `${itemIndex + 1}` } })),
      import_react246.default.createElement(option_default, { option: item })
    ), i18nStrings, limitShowFewerAriaLabel, limitShowMoreAriaLabel, onExpandedClick: (isExpanded) => {
      if (isExpanded && limit) {
        setNextFocusIndex(limit);
      } else {
        setNextFocusIndex(null);
      }
    } })
  );
}

// node_modules/@cloudscape-design/components/multiselect/use-multiselect.js
var import_react252 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/utils/filter-options.js
var searchableFields = ["value", "label", "description", "labelTag"];
var matchesString = (value, searchText, strictMatching) => {
  if (!value) {
    return false;
  }
  const index = value.toLowerCase().indexOf(searchText);
  return strictMatching ? index === 0 : index > -1;
};
var matchesSingleOption = (dropdownOption, text, strictMatching) => {
  const searchText = text.toLowerCase();
  const option = dropdownOption.option;
  const searchStrFields = (attr) => matchesString(option[attr], searchText, strictMatching);
  const searchTagsFields = (attr) => {
    var _a2;
    return (_a2 = option[attr]) === null || _a2 === void 0 ? void 0 : _a2.some((value) => matchesString(value, searchText, strictMatching));
  };
  const searchableTagFields = ["tags"];
  if (!strictMatching) {
    searchableTagFields.push("filteringTags");
  }
  return searchableFields.some(searchStrFields) || searchableTagFields.some(searchTagsFields);
};
var filterOptions = (options, searchText, strictMatching = false) => {
  if (searchText === "") {
    return options;
  }
  let currentGroup = null;
  let parentMatched = false;
  return options.reduce((acc, option) => {
    if (option.type === "parent") {
      parentMatched = false;
      currentGroup = option;
      if (matchesSingleOption(option, searchText, strictMatching)) {
        parentMatched = true;
        acc.push(currentGroup);
      }
      return acc;
    }
    if (option.type !== "child") {
      currentGroup = null;
      parentMatched = false;
    }
    if (parentMatched) {
      acc.push(option);
    } else if (matchesSingleOption(option, searchText, strictMatching)) {
      if (currentGroup) {
        acc.push(currentGroup);
        currentGroup = null;
      }
      acc.push(option);
    }
    return acc;
  }, []);
};
var isInteractive = (option) => !!option && !option.disabled && option.type !== "parent";
var isGroupInteractive = (option) => !!option && !option.disabled;
var isGroup = (option) => !!option && "options" in option && !!option.options;

// node_modules/@cloudscape-design/components/internal/components/option/utils/flatten-options.js
var flattenOptions = (options) => {
  const parentMap = /* @__PURE__ */ new Map();
  const flatOptions = options.reduce((acc, option) => {
    if (isGroup(option)) {
      const { options: options2 } = option, rest = __rest(option, ["options"]);
      const parentDropdownOption = { type: "parent", option };
      const allOptionsDisabled = options2.every((option2) => option2.disabled);
      if (option.disabled || allOptionsDisabled) {
        parentDropdownOption.disabled = true;
      }
      acc.push(parentDropdownOption);
      options2.forEach((child) => {
        const childDropdownOption = { type: "child", option: child };
        if (rest.disabled || child.disabled) {
          childDropdownOption.disabled = true;
        }
        acc.push(childDropdownOption);
        parentMap.set(childDropdownOption, parentDropdownOption);
      });
    } else {
      const dropdownOption = { option };
      if (option.disabled) {
        dropdownOption.disabled = true;
      }
      acc.push(dropdownOption);
    }
    return acc;
  }, []);
  return {
    flatOptions,
    parentMap
  };
};

// node_modules/@cloudscape-design/components/internal/components/option/utils/prepare-options.js
function prepareOptions(options, filteringType, filteringText) {
  const { flatOptions, parentMap } = flattenOptions(options);
  const filteredOptions = filteringType !== "auto" ? flatOptions : filterOptions(flatOptions, filteringText);
  generateTestIndexes(filteredOptions, parentMap.get.bind(parentMap));
  return {
    flatOptions,
    filteredOptions,
    parentMap,
    totalCount: flatOptions.length,
    matchesCount: filteredOptions.length
  };
}

// node_modules/@cloudscape-design/components/select/utils/check-option-value-field.js
function checkOptionValueField(componentName3, propertyName, propertyValue) {
  if (isDevelopment2) {
    if (!propertyValue) {
      return;
    }
    const valuePropertyMissing = !propertyValue.every((element) => {
      return "options" in element || "value" in element;
    });
    if (valuePropertyMissing) {
      warnOnce(componentName3, `You provided an \`${propertyName}\` prop where at least one non-group array element is missing the \`value\` field. This field is required for all options without sub-items.`);
    }
  }
}

// node_modules/@cloudscape-design/components/select/utils/connect-options.js
var connectOptionsByValue = (options, selectedOptions) => {
  return (selectedOptions || []).map((selectedOption) => {
    for (const dropdownOption of options) {
      if (dropdownOption.type !== "parent" && dropdownOption.option.value === selectedOption.value) {
        return dropdownOption;
      }
    }
    return { option: selectedOption };
  });
};
var findOptionIndex = (options, option) => {
  for (let index = 0; index < options.length; index++) {
    const __option = options[index];
    if (__option === option || __option.value === option.value) {
      return index;
    }
  }
  return -1;
};

// node_modules/@cloudscape-design/components/select/utils/use-announcement.js
var import_react247 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/option/option-announcer.js
function getMatchingFilteringTags(filteringTags, highlightText) {
  if (!highlightText || !filteringTags) {
    return [];
  }
  return filteringTags.filter((filteringTag) => matchesString(filteringTag, highlightText, false));
}
function defaultOptionDescription({ option, parentGroup, highlightText }) {
  return [
    parentGroup && parentGroup.label,
    option.__labelPrefix,
    option.label || option.value,
    option.description,
    option.labelTag
  ].concat(option.tags).concat(getMatchingFilteringTags(option.filteringTags, highlightText)).filter((el) => !!el).join(" ");
}
var option_announcer_default = defaultOptionDescription;

// node_modules/@cloudscape-design/components/select/utils/use-announcement.js
function useAnnouncement({ highlightText, announceSelected, highlightedOption, getParent, selectedAriaLabel, renderHighlightedAriaLive }) {
  const prevAnnouncedGroup = (0, import_react247.useRef)(void 0);
  (0, import_react247.useEffect)(() => {
    if (highlightedOption) {
      const frameId = requestAnimationFrame(() => {
        prevAnnouncedGroup.current = getParent(highlightedOption);
      });
      return () => cancelAnimationFrame(frameId);
    }
  });
  if (!highlightedOption) {
    return "";
  }
  const option = highlightedOption.option;
  const parent = getParent(highlightedOption);
  const group = parent && parent !== prevAnnouncedGroup.current ? parent : void 0;
  if (renderHighlightedAriaLive) {
    return renderHighlightedAriaLive(option, group);
  }
  const selectedAnnouncement = announceSelected && selectedAriaLabel ? selectedAriaLabel : "";
  const defaultDescription = option_announcer_default({ option, parentGroup: group, highlightText });
  return [selectedAnnouncement, defaultDescription].filter(Boolean).join(" ");
}

// node_modules/@cloudscape-design/components/select/utils/use-load-items.js
var import_react248 = __toESM(require_react());
var useLoadItems = ({ onLoadItems, options, statusType }) => {
  const prevFilteringText = (0, import_react248.useRef)(void 0);
  const fireLoadItems = (filteringText) => {
    if (prevFilteringText.current === filteringText) {
      return;
    }
    prevFilteringText.current = filteringText;
    fireNonCancelableEvent(onLoadItems, { filteringText, firstPage: true, samePage: false });
  };
  const handleLoadMore = () => {
    const firstPage = options.length === 0;
    if (statusType === "pending") {
      fireNonCancelableEvent(onLoadItems, {
        firstPage,
        samePage: false,
        filteringText: prevFilteringText.current || ""
      });
    }
  };
  const handleRecoveryClick = () => fireNonCancelableEvent(onLoadItems, {
    firstPage: false,
    samePage: true,
    filteringText: prevFilteringText.current || ""
  });
  return {
    fireLoadItems,
    handleLoadMore,
    handleRecoveryClick
  };
};

// node_modules/@cloudscape-design/components/select/utils/use-native-search.js
var import_react249 = __toESM(require_react());
var isRepeatedChar = (str) => str.split("").every((c2) => c2 === str[0]);
function findMatchingOption(options, searchText, currentHighlight, useInteractiveGroups) {
  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;
  const filter = (searchText2) => filterOptions(options, searchText2, true).filter((option) => interactivityCheck(option));
  const matchingOptions = filter(searchText);
  if (matchingOptions.length === 1) {
    return matchingOptions[0];
  }
  if (currentHighlight && searchText.length > 1 && isRepeatedChar(searchText)) {
    const matchingOptions2 = filter(searchText[0]);
    if (matchingOptions2.length > 0) {
      let active = isGroup(currentHighlight) ? matchingOptions2.map(({ option }) => option).indexOf(currentHighlight) : matchingOptions2.map(({ option }) => option.value).indexOf(currentHighlight.value);
      active += 1;
      active = active % matchingOptions2.length;
      return matchingOptions2[active];
    }
  }
  if (matchingOptions.length > 0) {
    return matchingOptions[0];
  }
  return null;
}
function useNativeSearch({ isEnabled, options, highlightOption, highlightedOption, useInteractiveGroups }) {
  const value = (0, import_react249.useRef)("");
  const delayedResetValue = useDebounceCallback(() => value.current = "", 500);
  return (event) => {
    if (!isEnabled) {
      return;
    }
    const { key: key2 } = event;
    if (!key2 || key2.length !== 1) {
      return;
    }
    delayedResetValue();
    const newValue = value.current + key2;
    value.current = newValue;
    const nextHighlight = findMatchingOption(options, newValue, highlightedOption, useInteractiveGroups);
    if (nextHighlight) {
      highlightOption(nextHighlight);
    }
  };
}

// node_modules/@cloudscape-design/components/select/utils/use-select.js
var import_react251 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-highlight-option.js
var import_react250 = __toESM(require_react());
var HighlightType = class {
  constructor(type, moveFocus = type === "keyboard") {
    this.type = type;
    this.moveFocus = moveFocus;
  }
};
function useHighlightedOption({ options, isHighlightable: isHighlightable2 }) {
  const [highlightedIndex, setHighlightedIndexState] = (0, import_react250.useState)(-1);
  const [highlightType, setHighlightType] = (0, import_react250.useState)(new HighlightType("keyboard"));
  const setHighlightedIndex = (0, import_react250.useCallback)((index, newHighlightType) => {
    setHighlightedIndexState(index);
    setHighlightType((oldHighlight) => oldHighlight.type !== newHighlightType.type ? newHighlightType : oldHighlight);
  }, []);
  const highlightedOption = options[highlightedIndex] && isHighlightable2(options[highlightedIndex]) ? options[highlightedIndex] : void 0;
  const moveHighlightFrom = (direction, startIndex = highlightedIndex, highlightType2) => {
    const fromBottomEnd = startIndex === -1 && direction === -1;
    let newIndex = fromBottomEnd ? options.length : startIndex;
    do {
      newIndex += direction;
    } while (options[newIndex] && !isHighlightable2(options[newIndex]));
    if (options[newIndex]) {
      setHighlightedIndex(newIndex, highlightType2);
    }
  };
  const moveHighlight2 = (direction, highlightType2) => moveHighlightFrom(direction, highlightedIndex, highlightType2);
  const highlightOption = (0, import_react250.useCallback)((option, highlightType2) => {
    const index = options.indexOf(option);
    setHighlightedIndex(index, highlightType2);
  }, [options, setHighlightedIndex]);
  return [
    { highlightType, highlightedIndex, highlightedOption },
    {
      setHighlightedIndexWithMouse: (index, moveFocus = false) => setHighlightedIndex(index, new HighlightType("mouse", moveFocus)),
      highlightFirstOptionWithMouse: () => moveHighlightFrom(1, -1, new HighlightType("mouse", true)),
      moveHighlightWithKeyboard: (direction) => moveHighlight2(direction, new HighlightType("keyboard")),
      highlightOptionWithKeyboard: (option) => highlightOption(option, new HighlightType("keyboard")),
      resetHighlightWithKeyboard: () => setHighlightedIndex(-1, new HighlightType("keyboard")),
      goHomeWithKeyboard: () => moveHighlightFrom(1, -1, new HighlightType("keyboard")),
      goEndWithKeyboard: () => moveHighlightFrom(-1, options.length, new HighlightType("keyboard"))
    }
  ];
}

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-ids.js
var getOptionId = (menuId, index) => {
  if (index < 0) {
    return void 0;
  }
  return `${menuId}-option-${index}`;
};

// node_modules/@cloudscape-design/components/internal/components/options-list/utils/use-keyboard.js
var HOME = 36;
var END = 35;
var useMenuKeyboard = ({ goUp, goDown, selectOption, goHome, goEnd, closeDropdown, preventNativeSpace = false }) => {
  return (event) => {
    switch (event.detail.keyCode) {
      case KeyCode2.up:
        event.preventDefault();
        goUp();
        break;
      case KeyCode2.down:
        event.preventDefault();
        goDown();
        break;
      case HOME:
        goHome();
        break;
      case END:
        goEnd();
        break;
      case KeyCode2.escape:
        event.stopPropagation();
        closeDropdown();
        break;
      case KeyCode2.enter:
        event.preventDefault();
        selectOption();
        break;
      case KeyCode2.space:
        if (preventNativeSpace) {
          event.preventDefault();
          selectOption();
        }
    }
  };
};
var useTriggerKeyboard = ({ openDropdown, goHome }) => {
  return (event) => {
    switch (event.detail.keyCode) {
      case KeyCode2.up:
      case KeyCode2.down:
        event.preventDefault();
        goHome();
        openDropdown();
        break;
      case KeyCode2.space:
      case KeyCode2.enter:
        event.preventDefault();
        openDropdown();
        break;
    }
  };
};

// node_modules/@cloudscape-design/components/select/utils/use-select.js
function useSelect({ selectedOptions, updateSelectedOption, options, filteringType, onBlur, onFocus, externalRef, keepOpen, embedded, fireLoadItems, setFilteringValue, useInteractiveGroups = false, statusType, isAllSelected, isSomeSelected, toggleAll }) {
  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;
  const isHighlightable2 = (option) => !!option && (useInteractiveGroups || option.type !== "parent");
  const filterRef = (0, import_react251.useRef)(null);
  const triggerRef = (0, import_react251.useRef)(null);
  const menuRef = (0, import_react251.useRef)(null);
  const hasFilter = filteringType !== "none" && !embedded;
  const activeRef = hasFilter ? filterRef : menuRef;
  const __selectedOptions = connectOptionsByValue(options, selectedOptions);
  const __selectedValuesSet = selectedOptions.reduce((selectedValuesSet, item) => {
    if (item.value) {
      selectedValuesSet.add(item.value);
    }
    return selectedValuesSet;
  }, /* @__PURE__ */ new Set());
  const [{ highlightType, highlightedOption, highlightedIndex }, { moveHighlightWithKeyboard, resetHighlightWithKeyboard, setHighlightedIndexWithMouse, highlightOptionWithKeyboard, highlightFirstOptionWithMouse, goHomeWithKeyboard, goEndWithKeyboard }] = useHighlightedOption({ options, isHighlightable: isHighlightable2 });
  const { isOpen, openDropdown, closeDropdown, toggleDropdown, openedWithKeyboard } = useOpenState({
    defaultOpen: embedded,
    onOpen: () => fireLoadItems(""),
    onClose: () => {
      resetHighlightWithKeyboard();
      setFilteringValue === null || setFilteringValue === void 0 ? void 0 : setFilteringValue("");
    }
  });
  const handleFocus = () => {
    fireNonCancelableEvent(onFocus, {});
  };
  const handleBlur = () => {
    fireNonCancelableEvent(onBlur, {});
    closeDropdown();
  };
  const hasSelectedOption = __selectedOptions.length > 0;
  const menuId = useUniqueId("option-list");
  const dialogId = useUniqueId("dialog");
  const highlightedOptionId = getOptionId(menuId, highlightedIndex);
  const closeDropdownIfNecessary = () => {
    var _a2;
    if (!keepOpen) {
      (_a2 = triggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      closeDropdown();
    }
  };
  const selectOption = (option) => {
    const optionToSelect = option || highlightedOption;
    if (!optionToSelect || !interactivityCheck(optionToSelect)) {
      return;
    }
    if (optionToSelect.type === "select-all" && toggleAll) {
      toggleAll();
    } else {
      updateSelectedOption(optionToSelect.option);
    }
    closeDropdownIfNecessary();
  };
  const activeKeyDownHandler = useMenuKeyboard({
    goUp: () => {
      if (!useInteractiveGroups && (highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.type) === "child" && highlightedIndex === 1 || highlightedIndex === 0) {
        goEndWithKeyboard();
        return;
      }
      moveHighlightWithKeyboard(-1);
    },
    goDown: () => {
      if (highlightedIndex === options.length - 1) {
        goHomeWithKeyboard();
        return;
      }
      moveHighlightWithKeyboard(1);
    },
    selectOption,
    goHome: goHomeWithKeyboard,
    goEnd: goEndWithKeyboard,
    closeDropdown: () => {
      var _a2;
      if (!embedded) {
        (_a2 = triggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
        closeDropdown();
      }
    },
    preventNativeSpace: !hasFilter || highlightedOption && highlightType.type === "keyboard"
  });
  const triggerKeyDownHandler = useTriggerKeyboard({
    openDropdown: () => openDropdown(true),
    goHome: goHomeWithKeyboard
  });
  const getDropdownProps = () => ({
    onFocus: handleFocus,
    onBlur: handleBlur,
    dropdownContentId: dialogId,
    dropdownContentRole: hasFilter ? "dialog" : void 0
  });
  const getTriggerProps = (disabled = false, autoFocus = false) => {
    const triggerProps = {
      ref: triggerRef,
      onFocus: () => closeDropdown(),
      autoFocus,
      ariaHasPopup: hasFilter ? "dialog" : "listbox",
      ariaControls: isOpen ? hasFilter ? dialogId : menuId : void 0
    };
    if (!disabled) {
      triggerProps.onMouseDown = (event) => {
        var _a2;
        event.preventDefault();
        if (isOpen) {
          (_a2 = triggerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
        }
        toggleDropdown();
      };
      triggerProps.onKeyDown = triggerKeyDownHandler;
    }
    return triggerProps;
  };
  const getFilterProps = () => {
    if (!hasFilter || !setFilteringValue) {
      return {};
    }
    return {
      ref: filterRef,
      onKeyDown: activeKeyDownHandler,
      onChange: (event) => {
        setFilteringValue(event.detail.value);
        resetHighlightWithKeyboard();
      },
      __onDelayedInput: (event) => {
        fireLoadItems(event.detail.value);
      },
      nativeInputAttributes: {
        "aria-activedescendant": highlightedOptionId,
        ["aria-owns"]: menuId,
        ["aria-controls"]: menuId
      }
    };
  };
  const getMenuProps = () => {
    const menuProps = {
      id: menuId,
      ref: menuRef,
      open: isOpen,
      onMouseUp: (itemIndex) => {
        if (itemIndex > -1) {
          selectOption(options[itemIndex]);
        }
      },
      onMouseMove: (itemIndex) => {
        if (itemIndex > -1) {
          setHighlightedIndexWithMouse(itemIndex);
        }
      },
      statusType
    };
    if (!hasFilter) {
      menuProps.onKeyDown = activeKeyDownHandler;
      menuProps.nativeAttributes = {
        "aria-activedescendant": highlightedOptionId
      };
    }
    if (embedded) {
      menuProps.onFocus = () => {
        if (!highlightedOption) {
          goHomeWithKeyboard();
        }
      };
      menuProps.onBlur = () => {
        resetHighlightWithKeyboard();
      };
    }
    return menuProps;
  };
  const getGroupState = (option) => {
    const totalSelected = option.options.filter((item) => !!item.value && __selectedValuesSet.has(item.value)).length;
    const hasSelected = totalSelected > 0;
    const allSelected = totalSelected === option.options.length;
    return {
      selected: hasSelected && allSelected && useInteractiveGroups,
      indeterminate: hasSelected && !allSelected
    };
  };
  const getOptionProps2 = (option, index) => {
    var _a2, _b;
    const isSelectAll = option.type === "select-all";
    const highlighted = option === highlightedOption;
    const groupState = isGroup(option.option) ? getGroupState(option.option) : void 0;
    const selected = isSelectAll ? isAllSelected : __selectedOptions.indexOf(option) > -1 || !!(groupState === null || groupState === void 0 ? void 0 : groupState.selected);
    const nextOption = (_a2 = options[index + 1]) === null || _a2 === void 0 ? void 0 : _a2.option;
    const isNextSelected = !!nextOption && isGroup(nextOption) ? getGroupState(nextOption).selected : __selectedOptions.indexOf(options[index + 1]) > -1;
    const previousOption = (_b = options[index - 1]) === null || _b === void 0 ? void 0 : _b.option;
    const isPreviousSelected = !!previousOption && isGroup(previousOption) ? getGroupState(previousOption).selected : __selectedOptions.indexOf(options[index - 1]) > -1;
    const optionProps = {
      key: index,
      option,
      highlighted,
      selected,
      isNextSelected,
      isPreviousSelected,
      indeterminate: !!(groupState === null || groupState === void 0 ? void 0 : groupState.indeterminate) || isSelectAll && !isAllSelected && isSomeSelected,
      ["data-mouse-target"]: isHighlightable2(option) ? index : -1,
      id: getOptionId(menuId, index)
    };
    return optionProps;
  };
  const prevOpen = usePrevious(isOpen);
  (0, import_react251.useEffect)(() => {
    if (isOpen && !prevOpen && options.length > 0 && !hasFilter) {
      if (openedWithKeyboard) {
        if (__selectedOptions[0]) {
          highlightOptionWithKeyboard(__selectedOptions[0]);
        } else {
          goHomeWithKeyboard();
        }
      } else {
        if (!__selectedOptions[0] || !options.includes(__selectedOptions[0])) {
          highlightFirstOptionWithMouse();
        } else {
          const highlightedIndex2 = options.indexOf(__selectedOptions[0]);
          setHighlightedIndexWithMouse(highlightedIndex2, true);
        }
      }
    }
  }, [
    isOpen,
    __selectedOptions,
    hasSelectedOption,
    setHighlightedIndexWithMouse,
    highlightOptionWithKeyboard,
    highlightFirstOptionWithMouse,
    goHomeWithKeyboard,
    openedWithKeyboard,
    options,
    prevOpen,
    hasFilter
  ]);
  (0, import_react251.useEffect)(() => {
    var _a2;
    if (isOpen && !embedded) {
      (_a2 = activeRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus({ preventScroll: true });
    }
  }, [isOpen, activeRef, embedded]);
  useForwardFocus(externalRef, triggerRef);
  const highlightedGroupSelected = !!highlightedOption && isGroup(highlightedOption.option) && getGroupState(highlightedOption.option).selected;
  const announceSelected = !!highlightedOption && (__selectedOptions.indexOf(highlightedOption) > -1 || highlightedGroupSelected);
  return {
    isOpen,
    highlightedOption,
    highlightedIndex,
    highlightType,
    getTriggerProps,
    getDropdownProps,
    getMenuProps,
    getFilterProps,
    getOptionProps: getOptionProps2,
    highlightOption: highlightOptionWithKeyboard,
    selectOption,
    announceSelected,
    dialogId
  };
}

// node_modules/@cloudscape-design/components/multiselect/use-multiselect.js
function useMultiselect(_a2) {
  var { options, filteringType, filteringResultsText, disabled, statusType, empty, loadingText, finishedText, errorText, noMatch, renderHighlightedAriaLive, selectedOptions, deselectAriaLabel, keepOpen, onBlur, onFocus, onLoadItems, onChange, controlId, ariaLabelId, footerId, filteringValue, setFilteringValue, externalRef, embedded, enableSelectAll, i18nStrings } = _a2, restProps = __rest(_a2, ["options", "filteringType", "filteringResultsText", "disabled", "statusType", "empty", "loadingText", "finishedText", "errorText", "noMatch", "renderHighlightedAriaLive", "selectedOptions", "deselectAriaLabel", "keepOpen", "onBlur", "onFocus", "onLoadItems", "onChange", "controlId", "ariaLabelId", "footerId", "filteringValue", "setFilteringValue", "externalRef", "embedded", "enableSelectAll", "i18nStrings"]);
  checkOptionValueField("Multiselect", "options", options);
  const i18n = useInternalI18n("multiselect");
  const i18nCommon = useInternalI18n("select");
  const recoveryText = i18nCommon("recoveryText", restProps.recoveryText);
  const errorIconAriaLabel = i18nCommon("errorIconAriaLabel", restProps.errorIconAriaLabel);
  const selectedAriaLabel = i18nCommon("selectedAriaLabel", restProps.selectedAriaLabel);
  if (restProps.recoveryText && !onLoadItems) {
    warnOnce("Multiselect", "`onLoadItems` must be provided for `recoveryText` to be displayed.");
  }
  const { handleLoadMore, handleRecoveryClick, fireLoadItems } = useLoadItems({
    onLoadItems,
    options,
    statusType
  });
  const useInteractiveGroups = true;
  const { flatOptions, filteredOptions, parentMap, totalCount, matchesCount } = prepareOptions(options, filteringType, filteringValue);
  const selectAllOption = {
    type: "select-all",
    afterHeader: filteringType !== "none",
    option: { label: i18n("i18nStrings.selectAllText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectAllText) }
  };
  const visibleOptions = enableSelectAll && filteredOptions.length ? [selectAllOption, ...filteredOptions] : filteredOptions;
  const allNonParentOptions = flatOptions.filter((item) => item.type !== "parent").map((option) => option.option);
  const filteredNonParentOptions = filteredOptions.filter((item) => item.type !== "parent").map((item) => item.option);
  const selectedValues = (0, import_react252.useMemo)(() => new Set(selectedOptions.map((option) => option.value)), [selectedOptions]);
  const isSomeSelected = selectedOptions.length > 0;
  const isAllVisibleSelectableSelected = isSomeSelected && filteredNonParentOptions.every((option) => option.disabled || selectedValues.has(option.value));
  const isAllSelected = allNonParentOptions.every((option) => selectedValues.has(option.value));
  const toggleAll = () => {
    const filteredNonParentOptionValues = new Set(filteredNonParentOptions.map((option) => option.value));
    fireNonCancelableEvent(onChange, {
      selectedOptions: isAllVisibleSelectableSelected ? selectedOptions.filter((option) => !filteredNonParentOptionValues.has(option.value)) : allNonParentOptions.filter(({ disabled: disabled2, value }) => selectedValues.has(value) || !disabled2 && filteredNonParentOptionValues.has(value))
    });
  };
  const updateSelectedOption = (0, import_react252.useCallback)((option) => {
    const isAllChildrenSelected = (optionsArray) => optionsArray.every((item) => findOptionIndex(selectedOptions, item) > -1 || item.disabled);
    const intersection = (visibleOptions2, options2) => visibleOptions2.filter((item) => findOptionIndex(options2, item) > -1 && !item.disabled);
    const union = (visibleOptions2, options2) => visibleOptions2.filter((item) => findOptionIndex(options2, item) === -1).concat(options2);
    const select = (options2, selectedOptions2) => {
      return union(selectedOptions2, options2);
    };
    const unselect = (options2, selectedOptions2) => {
      return selectedOptions2.filter((option2) => findOptionIndex(options2, option2) === -1);
    };
    let newSelectedOptions = [...selectedOptions];
    if (isGroup(option)) {
      const visibleOptions2 = intersection([...option.options], filteredNonParentOptions);
      newSelectedOptions = isAllChildrenSelected(visibleOptions2) ? unselect(visibleOptions2, newSelectedOptions) : select(visibleOptions2, newSelectedOptions);
    } else {
      newSelectedOptions = isAllChildrenSelected([option]) ? unselect([option], newSelectedOptions) : select([option], newSelectedOptions);
    }
    fireNonCancelableEvent(onChange, {
      selectedOptions: newSelectedOptions
    });
  }, [selectedOptions, onChange, filteredNonParentOptions]);
  const scrollToIndex = (0, import_react252.useRef)(null);
  const { isOpen, highlightType, highlightedOption, highlightedIndex, getTriggerProps, getDropdownProps, getFilterProps, getMenuProps, getOptionProps: getOptionProps2, highlightOption, announceSelected } = useSelect({
    selectedOptions,
    updateSelectedOption,
    options: visibleOptions,
    filteringType,
    onFocus,
    onBlur,
    externalRef,
    keepOpen,
    fireLoadItems,
    setFilteringValue,
    useInteractiveGroups,
    statusType,
    embedded,
    isAllSelected,
    isSomeSelected,
    toggleAll
  });
  const wrapperOnKeyDown = useNativeSearch({
    isEnabled: filteringType === "none" && isOpen,
    options: visibleOptions,
    highlightOption,
    highlightedOption: highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.option,
    useInteractiveGroups
  });
  const isEmpty = !options || options.length === 0;
  const isNoMatch = filteredOptions && filteredOptions.length === 0;
  const isFiltered = filteringType !== "none" && filteringValue.length > 0 && filteredOptions && filteredOptions.length > 0;
  const filteredText = isFiltered ? filteringResultsText === null || filteringResultsText === void 0 ? void 0 : filteringResultsText(matchesCount, totalCount) : void 0;
  const dropdownStatus = useDropdownStatus({
    statusType,
    empty,
    loadingText,
    finishedText,
    errorText,
    recoveryText,
    isEmpty,
    isNoMatch,
    noMatch,
    filteringResultsText: filteredText,
    onRecoveryClick: handleRecoveryClick,
    errorIconAriaLabel,
    hasRecoveryCallback: !!onLoadItems
  });
  const announcement = useAnnouncement({
    announceSelected,
    highlightedOption,
    getParent: (option) => {
      var _a3;
      return (_a3 = parentMap.get(option)) === null || _a3 === void 0 ? void 0 : _a3.option;
    },
    selectedAriaLabel,
    renderHighlightedAriaLive
  });
  const tokens = selectedOptions.map((option) => ({
    label: option.label,
    disabled: disabled || option.disabled,
    labelTag: option.labelTag,
    description: option.description,
    iconAlt: option.iconAlt,
    iconName: option.iconName,
    iconUrl: option.iconUrl,
    iconSvg: option.iconSvg,
    tags: option.tags,
    dismissLabel: i18n("deselectAriaLabel", deselectAriaLabel === null || deselectAriaLabel === void 0 ? void 0 : deselectAriaLabel(option), (format3) => {
      var _a3;
      return format3({ option__label: (_a3 = option.label) !== null && _a3 !== void 0 ? _a3 : "" });
    })
  }));
  (0, import_react252.useEffect)(() => {
    var _a3;
    (_a3 = scrollToIndex.current) === null || _a3 === void 0 ? void 0 : _a3.call(scrollToIndex, highlightedIndex);
  }, [highlightedIndex]);
  const dropdownOnMouseDown = (event) => {
    const target = event.target;
    if (target !== document.activeElement) {
      event.preventDefault();
    }
  };
  const tokenOnDismiss = ({ detail }) => {
    const optionToDeselect = selectedOptions[detail.itemIndex];
    updateSelectedOption(optionToDeselect);
    const targetRef = getTriggerProps().ref;
    if (targetRef.current) {
      targetRef.current.focus();
    }
  };
  return {
    isOpen,
    tokens,
    announcement,
    dropdownStatus,
    filteringValue,
    filteredOptions: visibleOptions,
    highlightType,
    scrollToIndex,
    getFilterProps,
    getTriggerProps,
    getMenuProps: () => Object.assign(Object.assign({}, getMenuProps()), { onLoadMore: handleLoadMore, ariaLabelledby: joinStrings(ariaLabelId, controlId), ariaDescribedby: dropdownStatus.content ? footerId : void 0, embedded }),
    getOptionProps: getOptionProps2,
    getTokenProps: () => ({ onDismiss: tokenOnDismiss }),
    getDropdownProps: () => Object.assign(Object.assign({}, getDropdownProps()), { onMouseDown: dropdownOnMouseDown }),
    getWrapperProps: () => ({ onKeyDown: wrapperOnKeyDown }),
    highlightedIndex
  };
}

// node_modules/@cloudscape-design/components/multiselect/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/multiselect/styles.scoped.css";
var styles_css_default94 = {
  "root": "awsui_root_f8g6q_anlz5_145",
  "embedded": "awsui_embedded_f8g6q_anlz5_177",
  "tokens": "awsui_tokens_f8g6q_anlz5_210"
};

// node_modules/@cloudscape-design/components/multiselect/internal.js
var InternalMultiselect = import_react253.default.forwardRef((_a2, externalRef) => {
  var _b;
  var { options, filteringType, filteringPlaceholder, filteringAriaLabel, filteringClearAriaLabel, ariaRequired, placeholder, disabled, readOnly, ariaLabel, inlineLabelText, selectedOptions, deselectAriaLabel, tokenLimit, i18nStrings, virtualScroll, inlineTokens = false, hideTokens, expandToViewport, tokenLimitShowFewerAriaLabel, tokenLimitShowMoreAriaLabel, __internalRootRef, autoFocus, enableSelectAll } = _a2, restProps = __rest(_a2, ["options", "filteringType", "filteringPlaceholder", "filteringAriaLabel", "filteringClearAriaLabel", "ariaRequired", "placeholder", "disabled", "readOnly", "ariaLabel", "inlineLabelText", "selectedOptions", "deselectAriaLabel", "tokenLimit", "i18nStrings", "virtualScroll", "inlineTokens", "hideTokens", "expandToViewport", "tokenLimitShowFewerAriaLabel", "tokenLimitShowMoreAriaLabel", "__internalRootRef", "autoFocus", "enableSelectAll"]);
  const baseProps = getBaseProps(restProps);
  const formFieldContext = useFormFieldContext(restProps);
  const i18n = useInternalI18n("multiselect");
  const selfControlId = useUniqueId("trigger");
  const controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;
  const ariaLabelId = useUniqueId("multiselect-ariaLabel-");
  const footerId = useUniqueId("multiselect-footer-");
  const [filteringValue, setFilteringValue] = (0, import_react253.useState)("");
  const multiselectProps = useMultiselect(Object.assign({
    options,
    selectedOptions,
    filteringType,
    disabled,
    deselectAriaLabel,
    controlId,
    ariaLabelId,
    footerId,
    filteringValue,
    setFilteringValue,
    externalRef,
    enableSelectAll,
    i18nStrings
  }, restProps));
  const filter = import_react253.default.createElement(filter_default, Object.assign({ clearAriaLabel: filteringClearAriaLabel, filteringType, placeholder: filteringPlaceholder, ariaLabel: filteringAriaLabel, ariaRequired, value: filteringValue }, multiselectProps.getFilterProps()));
  const trigger = import_react253.default.createElement(trigger_default, Object.assign({ placeholder, disabled, readOnly, triggerProps: multiselectProps.getTriggerProps(disabled, autoFocus), selectedOption: null, selectedOptions, triggerVariant: inlineTokens ? "tokens" : "placeholder", isOpen: multiselectProps.isOpen, inlineLabelText }, formFieldContext, { controlId, ariaLabelledby: joinStrings(formFieldContext.ariaLabelledby, ariaLabelId) }));
  const tokens = selectedOptions.map((option) => ({
    label: option.label,
    disabled,
    labelTag: option.labelTag,
    description: option.description,
    iconAlt: option.iconAlt,
    iconName: option.iconName,
    iconUrl: option.iconUrl,
    iconSvg: option.iconSvg,
    tags: option.tags,
    dismissLabel: i18n("deselectAriaLabel", deselectAriaLabel === null || deselectAriaLabel === void 0 ? void 0 : deselectAriaLabel(option), (format3) => {
      var _a3;
      return format3({ option__label: (_a3 = option.label) !== null && _a3 !== void 0 ? _a3 : "" });
    }),
    _readOnly: !!option.disabled
  }));
  const ListComponent = virtualScroll ? virtual_list_default : plain_list_default;
  const showTokens = !hideTokens && !inlineTokens && tokens.length > 0;
  const tokenGroupI18nStrings = {
    limitShowFewer: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tokenLimitShowFewer,
    limitShowMore: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tokenLimitShowMore
  };
  const dropdownStatus = multiselectProps.dropdownStatus;
  const dropdownProps = multiselectProps.getDropdownProps();
  const hasFilteredOptions = multiselectProps.filteredOptions.length > 0;
  return import_react253.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef, className: clsx_m_default(styles_css_default94.root, baseProps.className) }, multiselectProps.getWrapperProps()),
    import_react253.default.createElement(
      dropdown_default,
      Object.assign({}, dropdownProps, { ariaLabelledby: dropdownProps.dropdownContentRole ? joinStrings(ariaLabelId, controlId) : void 0, ariaDescribedby: dropdownProps.dropdownContentRole ? dropdownStatus.content ? footerId : void 0 : void 0, open: multiselectProps.isOpen, trigger, header: filter, footer: dropdownStatus.isSticky ? import_react253.default.createElement(dropdown_footer_default, { content: multiselectProps.isOpen ? dropdownStatus.content : null, id: footerId }) : null, expandToViewport, stretchBeyondTriggerWidth: true }),
      import_react253.default.createElement(ListComponent, { listBottom: !dropdownStatus.isSticky ? import_react253.default.createElement(dropdown_footer_default, { content: multiselectProps.isOpen ? dropdownStatus.content : null, id: footerId }) : null, menuProps: multiselectProps.getMenuProps(), getOptionProps: multiselectProps.getOptionProps, filteredOptions: multiselectProps.filteredOptions, filteringValue, ref: multiselectProps.scrollToIndex, hasDropdownStatus: dropdownStatus.content !== null, checkboxes: true, useInteractiveGroups: true, screenReaderContent: multiselectProps.announcement, highlightType: multiselectProps.highlightType, firstOptionSticky: hasFilteredOptions && enableSelectAll })
    ),
    showTokens && import_react253.default.createElement(InternalTokenGroup, Object.assign({}, multiselectProps.getTokenProps(), { className: styles_css_default94.tokens, alignment: "horizontal", limit: tokenLimit, items: tokens, i18nStrings: tokenGroupI18nStrings, limitShowMoreAriaLabel: tokenLimitShowMoreAriaLabel, limitShowFewerAriaLabel: tokenLimitShowFewerAriaLabel, disableOuterPadding: true, readOnly, isItemReadOnly: (item) => item._readOnly })),
    import_react253.default.createElement(ScreenreaderOnly, { id: ariaLabelId }, ariaLabel || inlineLabelText)
  );
});
var internal_default13 = InternalMultiselect;

// node_modules/@cloudscape-design/components/internal/components/chart-filter/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/chart-filter/styles.scoped.css";
var styles_css_default95 = {
  "root": "awsui_root_1px7g_143y5_145",
  "chart-filter": "awsui_chart-filter_1px7g_143y5_177",
  "custom-icon-wrapper": "awsui_custom-icon-wrapper_1px7g_143y5_181"
};

// node_modules/@cloudscape-design/components/internal/components/chart-filter/index.js
var chart_filter_default = (0, import_react254.memo)(ChartFilter);
function ChartFilter(_a2) {
  var { series, i18nStrings, selectedSeries, onChange } = _a2, restProps = __rest(_a2, ["series", "i18nStrings", "selectedSeries", "onChange"]);
  const baseProps = getBaseProps(restProps);
  const className2 = clsx_m_default(baseProps.className, styles_css_default95.root);
  const i18n = useInternalI18n("[charts]");
  const defaultOptions3 = series.map((d3, i2) => ({
    label: d3.label,
    value: "" + i2,
    datum: d3.datum,
    __customIcon: import_react254.default.createElement("span", { className: styles_css_default95["custom-icon-wrapper"] }, d3.marker)
  }));
  const selectedOptions = defaultOptions3.filter((option) => (selectedSeries === null || selectedSeries === void 0 ? void 0 : selectedSeries.indexOf(option.datum)) !== -1);
  const updateSelection = (0, import_react254.useCallback)(({ detail: { selectedOptions: selectedOptions2 } }) => {
    const selectedSeries2 = defaultOptions3.filter((option) => selectedOptions2.indexOf(option) !== -1).map((option) => option.datum);
    onChange(selectedSeries2);
  }, [onChange, defaultOptions3]);
  return import_react254.default.createElement(
    InternalFormField,
    Object.assign({}, baseProps, { label: i18n("i18nStrings.filterLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filterLabel), className: className2 }),
    import_react254.default.createElement(internal_default13, { placeholder: i18n("i18nStrings.filterPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filterPlaceholder), options: defaultOptions3, selectedOptions, onChange: updateSelection, className: styles_css_default95["chart-filter"], selectedAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filterSelectedAriaLabel, filteringType: "none", statusType: "finished", keepOpen: true, hideTokens: true })
  );
}

// node_modules/@cloudscape-design/components/area-chart/elements/area-chart-filter.js
var area_chart_filter_default = (0, import_react255.memo)(AreaChartFilter);
function AreaChartFilter({ model, filterLabel, filterPlaceholder, filterSelectedAriaLabel }) {
  const filterItems = model.allSeries.map((s4) => {
    const { title, color: color2, markerType } = model.getInternalSeries(s4);
    return {
      label: title,
      marker: import_react255.default.createElement(chart_series_marker_default, { type: markerType, color: color2 }),
      datum: s4
    };
  });
  return import_react255.default.createElement(chart_filter_default, { series: filterItems, onChange: model.handlers.onFilterSeries, selectedSeries: model.series, i18nStrings: {
    filterLabel,
    filterPlaceholder,
    filterSelectedAriaLabel
  } });
}

// node_modules/@cloudscape-design/components/area-chart/elements/area-chart-legend.js
var import_react257 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-legend/index.js
var import_react256 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/chart-legend/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/chart-legend/styles.scoped.css";
var styles_css_default96 = {
  "marker": "awsui_marker_1kjc7_9chwz_153",
  "root": "awsui_root_1kjc7_9chwz_167",
  "title": "awsui_title_1kjc7_9chwz_202",
  "list": "awsui_list_1kjc7_9chwz_206",
  "marker--dimmed": "awsui_marker--dimmed_1kjc7_9chwz_252",
  "marker--highlighted": "awsui_marker--highlighted_1kjc7_9chwz_255"
};

// node_modules/@cloudscape-design/components/internal/components/chart-legend/index.js
var chart_legend_default = (0, import_react256.memo)(ChartLegend);
function ChartLegend({ series, onHighlightChange, highlightedSeries, legendTitle, ariaLabel, plotContainerRef }) {
  const i18n = useInternalI18n("[charts]");
  const containerRef = (0, import_react256.useRef)(null);
  const segmentsRef = (0, import_react256.useRef)([]);
  const highlightedSeriesIndex = findSeriesIndex(series, highlightedSeries);
  const highlightInlineStart = () => {
    var _a2;
    const currentIndex = highlightedSeriesIndex !== null && highlightedSeriesIndex !== void 0 ? highlightedSeriesIndex : 0;
    const nextIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : series.length - 1;
    (_a2 = segmentsRef.current[nextIndex]) === null || _a2 === void 0 ? void 0 : _a2.focus();
  };
  const highlightInlineEnd = () => {
    var _a2;
    const currentIndex = highlightedSeriesIndex !== null && highlightedSeriesIndex !== void 0 ? highlightedSeriesIndex : 0;
    const nextIndex = currentIndex + 1 < series.length ? currentIndex + 1 : 0;
    (_a2 = segmentsRef.current[nextIndex]) === null || _a2 === void 0 ? void 0 : _a2.focus();
  };
  const handleKeyPress = (event) => {
    if (event.keyCode === KeyCode2.right || event.keyCode === KeyCode2.left) {
      event.preventDefault();
      handleKey2(event, {
        onInlineStart: () => highlightInlineStart(),
        onInlineEnd: () => highlightInlineEnd()
      });
    }
  };
  const handleSelection = (index) => {
    if (series[index].datum !== highlightedSeries) {
      onHighlightChange(series[index].datum);
    }
  };
  const handleBlur = (event) => {
    var _a2;
    if (event.relatedTarget === null || containerRef.current && !containerRef.current.contains(event.relatedTarget) && !((_a2 = plotContainerRef === null || plotContainerRef === void 0 ? void 0 : plotContainerRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.relatedTarget))) {
      onHighlightChange(null);
    }
  };
  const handleMouseOver = (s4) => {
    if (s4 !== highlightedSeries) {
      onHighlightChange(s4);
    }
  };
  const handleMouseLeave = () => {
    onHighlightChange(null);
  };
  return import_react256.default.createElement(
    import_react256.default.Fragment,
    null,
    import_react256.default.createElement(
      "div",
      { ref: containerRef, role: "toolbar", "aria-label": legendTitle || i18n("i18nStrings.legendAriaLabel", ariaLabel), className: styles_css_default96.root, onKeyDown: handleKeyPress, onBlur: handleBlur },
      legendTitle && import_react256.default.createElement(InternalBox, { fontWeight: "bold", className: styles_css_default96.title }, legendTitle),
      import_react256.default.createElement("div", { className: styles_css_default96.list }, series.map((s4, index) => {
        const someHighlighted = highlightedSeries !== null;
        const isHighlighted = highlightedSeries === s4.datum;
        const isDimmed = someHighlighted && !isHighlighted;
        return import_react256.default.createElement(
          "div",
          { role: "button", key: index, "aria-pressed": isHighlighted, className: clsx_m_default(styles_css_default96.marker, {
            [styles_css_default96["marker--dimmed"]]: isDimmed,
            [styles_css_default96["marker--highlighted"]]: isHighlighted
          }), ref: (elem) => {
            if (elem) {
              segmentsRef.current[index] = elem;
            } else {
              delete segmentsRef.current[index];
            }
          }, tabIndex: index === highlightedSeriesIndex || highlightedSeriesIndex === void 0 && index === 0 ? 0 : -1, onFocus: () => handleSelection(index), onClick: () => handleSelection(index), onMouseOver: () => handleMouseOver(s4.datum), onMouseLeave: handleMouseLeave },
          s4.marker,
          " ",
          s4.label
        );
      }))
    )
  );
}
function findSeriesIndex(series, targetSeries) {
  for (let index = 0; index < series.length; index++) {
    if (series[index].datum === targetSeries) {
      return index;
    }
  }
  return void 0;
}

// node_modules/@cloudscape-design/components/area-chart/elements/area-chart-legend.js
var area_chart_legend_default = (0, import_react257.memo)(AreaChartLegend);
function AreaChartLegend({ model, legendTitle, ariaLabel, plotContainerRef }) {
  const legendItems = (0, import_react257.useMemo)(() => model.series.map((s4) => {
    const { title, color: color2, markerType } = model.getInternalSeries(s4);
    return { label: title, marker: import_react257.default.createElement(chart_series_marker_default, { color: color2, type: markerType }), datum: s4 };
  }), [model]);
  const legendSeries = useSelector(model.interactions, (state) => state.legendSeries);
  return import_react257.default.createElement(chart_legend_default, { series: legendItems, highlightedSeries: legendSeries, onHighlightChange: model.handlers.onLegendHighlight, legendTitle, ariaLabel, plotContainerRef });
}

// node_modules/@cloudscape-design/components/area-chart/model/use-chart-model.js
var import_react259 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/container-queries/use-height-measure.js
var import_react258 = __toESM(require_react());
function useHeightMeasure(getMeasure, skip = false, deps = []) {
  const [measuredHeight, setHeight] = (0, import_react258.useState)(0);
  const stableGetMeasure = (0, import_react258.useCallback)(getMeasure, [...deps, skip]);
  useResizeObserver(stableGetMeasure, (entry) => !skip && setHeight(entry.borderBoxHeight));
  return !skip ? measuredHeight : void 0;
}

// node_modules/@cloudscape-design/components/internal/utils/throttle.js
function throttle(func, delay, { trailing = true } = {}) {
  let pending = null;
  let lastInvokeTime = null;
  let timerId = null;
  function pendingFunc() {
    if (pending === null || lastInvokeTime === null) {
      return;
    }
    const invokeTime = Date.now();
    const shouldInvoke = invokeTime - lastInvokeTime >= delay;
    if (shouldInvoke) {
      func.apply(pending.this, pending.args);
      lastInvokeTime = invokeTime;
      pending = null;
      timerId = null;
    } else if (trailing) {
      startTimer();
    }
  }
  function startTimer() {
    if (timerId) {
      cancelAnimationFrame(timerId);
    }
    timerId = requestAnimationFrame(pendingFunc);
  }
  function throttled(...args) {
    if (lastInvokeTime === null) {
      lastInvokeTime = Date.now();
      func.apply(this, args);
    } else {
      pending = { this: this, args };
      startTimer();
    }
  }
  throttled.cancel = () => {
    if (timerId) {
      cancelAnimationFrame(timerId);
    }
    pending = null;
    lastInvokeTime = null;
    timerId = null;
  };
  return throttled;
}

// node_modules/@cloudscape-design/components/internal/vendor/d3-scale.js
function ascending(a4, b2) {
  return a4 == null || b2 == null ? NaN : a4 < b2 ? -1 : a4 > b2 ? 1 : a4 >= b2 ? 0 : NaN;
}
function descending(a4, b2) {
  return a4 == null || b2 == null ? NaN : b2 < a4 ? -1 : b2 > a4 ? 1 : b2 >= a4 ? 0 : NaN;
}
function bisector(f) {
  let compare1, compare2, delta;
  if (f.length !== 2) {
    compare1 = ascending;
    compare2 = (d3, x3) => ascending(f(d3), x3);
    delta = (d3, x3) => f(d3) - x3;
  } else {
    compare1 = f === ascending || f === descending ? f : zero$1;
    compare2 = f;
    delta = f;
  }
  function left(a4, x3, lo = 0, hi = a4.length) {
    if (lo < hi) {
      if (compare1(x3, x3) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a4[mid], x3) < 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a4, x3, lo = 0, hi = a4.length) {
    if (lo < hi) {
      if (compare1(x3, x3) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a4[mid], x3) <= 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a4, x3, lo = 0, hi = a4.length) {
    const i2 = left(a4, x3, lo, hi - 1);
    return i2 > lo && delta(a4[i2 - 1], x3) > -delta(a4[i2], x3) ? i2 - 1 : i2;
  }
  return { left, center, right };
}
function zero$1() {
  return 0;
}
function number$2(x3) {
  return x3 === null ? NaN : +x3;
}
var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
bisector(number$2).center;
var bisect = bisectRight;
var InternMap = class extends Map {
  constructor(entries, key2 = keyof) {
    super();
    Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key2 } });
    if (entries != null) for (const [key3, value] of entries) this.set(key3, value);
  }
  get(key2) {
    return super.get(intern_get(this, key2));
  }
  has(key2) {
    return super.has(intern_get(this, key2));
  }
  set(key2, value) {
    return super.set(intern_set(this, key2), value);
  }
  delete(key2) {
    return super.delete(intern_delete(this, key2));
  }
};
function intern_get({ _intern, _key }, value) {
  const key2 = _key(value);
  return _intern.has(key2) ? _intern.get(key2) : value;
}
function intern_set({ _intern, _key }, value) {
  const key2 = _key(value);
  if (_intern.has(key2)) return _intern.get(key2);
  _intern.set(key2, value);
  return value;
}
function intern_delete({ _intern, _key }, value) {
  const key2 = _key(value);
  if (_intern.has(key2)) {
    value = _intern.get(key2);
    _intern.delete(key2);
  }
  return value;
}
function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function tickSpec(start, stop, count) {
  const step2 = (stop - start) / Math.max(0, count), power = Math.floor(Math.log10(step2)), error = step2 / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
  let i1, i2, inc;
  if (power < 0) {
    inc = Math.pow(10, -power) / factor;
    i1 = Math.round(start * inc);
    i2 = Math.round(stop * inc);
    if (i1 / inc < start) ++i1;
    if (i2 / inc > stop) --i2;
    inc = -inc;
  } else {
    inc = Math.pow(10, power) * factor;
    i1 = Math.round(start / inc);
    i2 = Math.round(stop / inc);
    if (i1 * inc < start) ++i1;
    if (i2 * inc > stop) --i2;
  }
  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);
  return [i1, i2, inc];
}
function ticks(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  if (!(count > 0)) return [];
  if (start === stop) return [start];
  const reverse = stop < start, [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);
  if (!(i2 >= i1)) return [];
  const n = i2 - i1 + 1, ticks2 = new Array(n);
  if (reverse) {
    if (inc < 0) for (let i3 = 0; i3 < n; ++i3) ticks2[i3] = (i2 - i3) / -inc;
    else for (let i3 = 0; i3 < n; ++i3) ticks2[i3] = (i2 - i3) * inc;
  } else {
    if (inc < 0) for (let i3 = 0; i3 < n; ++i3) ticks2[i3] = (i1 + i3) / -inc;
    else for (let i3 = 0; i3 < n; ++i3) ticks2[i3] = (i1 + i3) * inc;
  }
  return ticks2;
}
function tickIncrement(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  return tickSpec(start, stop, count)[2];
}
function tickStep(start, stop, count) {
  stop = +stop, start = +start, count = +count;
  const reverse = stop < start, inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);
  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}
function range(start, stop, step2) {
  start = +start, stop = +stop, step2 = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step2;
  var i2 = -1, n = Math.max(0, Math.ceil((stop - start) / step2)) | 0, range3 = new Array(n);
  while (++i2 < n) {
    range3[i2] = start + i2 * step2;
  }
  return range3;
}
function initRange(domain, range3) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range3).domain(domain);
      break;
  }
  return this;
}
var implicit = Symbol("implicit");
function ordinal() {
  var index = new InternMap(), domain = [], range3 = [], unknown = implicit;
  function scale(d3) {
    let i2 = index.get(d3);
    if (i2 === void 0) {
      if (unknown !== implicit) return unknown;
      index.set(d3, i2 = domain.push(d3) - 1);
    }
    return range3[i2 % range3.length];
  }
  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = new InternMap();
    for (const value of _) {
      if (index.has(value)) continue;
      index.set(value, domain.push(value) - 1);
    }
    return scale;
  };
  scale.range = function(_) {
    return arguments.length ? (range3 = Array.from(_), scale) : range3.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range3).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}
function band() {
  var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step2, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
  delete scale.unknown;
  function rescale() {
    var n = domain().length, reverse = r1 < r0, start = reverse ? r1 : r0, stop = reverse ? r0 : r1;
    step2 = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step2 = Math.floor(step2);
    start += (stop - start - step2 * (n - paddingInner)) * align;
    bandwidth = step2 * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values2 = range(n).map(function(i2) {
      return start + step2 * i2;
    });
    return ordinalRange(reverse ? values2.reverse() : values2);
  }
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.range = function(_) {
    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };
  scale.rangeRound = function(_) {
    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
  };
  scale.bandwidth = function() {
    return bandwidth;
  };
  scale.step = function() {
    return step2;
  };
  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };
  scale.padding = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };
  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };
  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };
  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };
  scale.copy = function() {
    return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };
  return initRange.apply(rescale(), arguments);
}
function define(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key2 in definition) prototype[key2] = definition[key2];
  return prototype;
}
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format3) {
  var m3, l;
  format3 = (format3 + "").trim().toLowerCase();
  return (m3 = reHex.exec(format3)) ? (l = m3[1].length, m3 = parseInt(m3[1], 16), l === 6 ? rgbn(m3) : l === 3 ? new Rgb(m3 >> 8 & 15 | m3 >> 4 & 240, m3 >> 4 & 15 | m3 & 240, (m3 & 15) << 4 | m3 & 15, 1) : l === 8 ? rgba(m3 >> 24 & 255, m3 >> 16 & 255, m3 >> 8 & 255, (m3 & 255) / 255) : l === 4 ? rgba(m3 >> 12 & 15 | m3 >> 8 & 240, m3 >> 8 & 15 | m3 >> 4 & 240, m3 >> 4 & 15 | m3 & 240, ((m3 & 15) << 4 | m3 & 15) / 255) : null) : (m3 = reRgbInteger.exec(format3)) ? new Rgb(m3[1], m3[2], m3[3], 1) : (m3 = reRgbPercent.exec(format3)) ? new Rgb(m3[1] * 255 / 100, m3[2] * 255 / 100, m3[3] * 255 / 100, 1) : (m3 = reRgbaInteger.exec(format3)) ? rgba(m3[1], m3[2], m3[3], m3[4]) : (m3 = reRgbaPercent.exec(format3)) ? rgba(m3[1] * 255 / 100, m3[2] * 255 / 100, m3[3] * 255 / 100, m3[4]) : (m3 = reHslPercent.exec(format3)) ? hsla(m3[1], m3[2] / 100, m3[3] / 100, 1) : (m3 = reHslaPercent.exec(format3)) ? hsla(m3[1], m3[2] / 100, m3[3] / 100, m3[4]) : named.hasOwnProperty(format3) ? rgbn(named[format3]) : format3 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r2, g, b2, a4) {
  if (a4 <= 0) r2 = g = b2 = NaN;
  return new Rgb(r2, g, b2, a4);
}
function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb$1(r2, g, b2, opacity) {
  return arguments.length === 1 ? rgbConvert(r2) : new Rgb(r2, g, b2, opacity == null ? 1 : opacity);
}
function Rgb(r2, g, b2, opacity) {
  this.r = +r2;
  this.g = +g;
  this.b = +b2;
  this.opacity = +opacity;
}
define(Rgb, rgb$1, extend(Color, {
  brighter(k3) {
    k3 = k3 == null ? brighter : Math.pow(brighter, k3);
    return new Rgb(this.r * k3, this.g * k3, this.b * k3, this.opacity);
  },
  darker(k3) {
    k3 = k3 == null ? darker : Math.pow(darker, k3);
    return new Rgb(this.r * k3, this.g * k3, this.b * k3, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a4 = clampa(this.opacity);
  return `${a4 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a4 === 1 ? ")" : `, ${a4})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h3, s4, l, a4) {
  if (a4 <= 0) h3 = s4 = l = NaN;
  else if (l <= 0 || l >= 1) h3 = s4 = NaN;
  else if (s4 <= 0) h3 = NaN;
  return new Hsl(h3, s4, l, a4);
}
function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r2 = o.r / 255, g = o.g / 255, b2 = o.b / 255, min3 = Math.min(r2, g, b2), max3 = Math.max(r2, g, b2), h3 = NaN, s4 = max3 - min3, l = (max3 + min3) / 2;
  if (s4) {
    if (r2 === max3) h3 = (g - b2) / s4 + (g < b2) * 6;
    else if (g === max3) h3 = (b2 - r2) / s4 + 2;
    else h3 = (r2 - g) / s4 + 4;
    s4 /= l < 0.5 ? max3 + min3 : 2 - max3 - min3;
    h3 *= 60;
  } else {
    s4 = l > 0 && l < 1 ? 0 : h3;
  }
  return new Hsl(h3, s4, l, o.opacity);
}
function hsl(h3, s4, l, opacity) {
  return arguments.length === 1 ? hslConvert(h3) : new Hsl(h3, s4, l, opacity == null ? 1 : opacity);
}
function Hsl(h3, s4, l, opacity) {
  this.h = +h3;
  this.s = +s4;
  this.l = +l;
  this.opacity = +opacity;
}
define(Hsl, hsl, extend(Color, {
  brighter(k3) {
    k3 = k3 == null ? brighter : Math.pow(brighter, k3);
    return new Hsl(this.h, this.s, this.l * k3, this.opacity);
  },
  darker(k3) {
    k3 = k3 == null ? darker : Math.pow(darker, k3);
    return new Hsl(this.h, this.s, this.l * k3, this.opacity);
  },
  rgb() {
    var h3 = this.h % 360 + (this.h < 0) * 360, s4 = isNaN(h3) || isNaN(this.s) ? 0 : this.s, l = this.l, m22 = l + (l < 0.5 ? l : 1 - l) * s4, m1 = 2 * l - m22;
    return new Rgb(
      hsl2rgb(h3 >= 240 ? h3 - 240 : h3 + 120, m1, m22),
      hsl2rgb(h3, m1, m22),
      hsl2rgb(h3 < 120 ? h3 + 240 : h3 - 120, m1, m22),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a4 = clampa(this.opacity);
    return `${a4 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a4 === 1 ? ")" : `, ${a4})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h3, m1, m22) {
  return (h3 < 60 ? m1 + (m22 - m1) * h3 / 60 : h3 < 180 ? m22 : h3 < 240 ? m1 + (m22 - m1) * (240 - h3) / 60 : m1) * 255;
}
var constant = (x3) => () => x3;
function linear$1(a4, d3) {
  return function(t2) {
    return a4 + t2 * d3;
  };
}
function exponential(a4, b2, y4) {
  return a4 = Math.pow(a4, y4), b2 = Math.pow(b2, y4) - a4, y4 = 1 / y4, function(t2) {
    return Math.pow(a4 + t2 * b2, y4);
  };
}
function gamma(y4) {
  return (y4 = +y4) === 1 ? nogamma : function(a4, b2) {
    return b2 - a4 ? exponential(a4, b2, y4) : constant(isNaN(a4) ? b2 : a4);
  };
}
function nogamma(a4, b2) {
  var d3 = b2 - a4;
  return d3 ? linear$1(a4, d3) : constant(isNaN(a4) ? b2 : a4);
}
var rgb = (function rgbGamma(y4) {
  var color2 = gamma(y4);
  function rgb2(start, end) {
    var r2 = color2((start = rgb$1(start)).r, (end = rgb$1(end)).r), g = color2(start.g, end.g), b2 = color2(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
    return function(t2) {
      start.r = r2(t2);
      start.g = g(t2);
      start.b = b2(t2);
      start.opacity = opacity(t2);
      return start + "";
    };
  }
  rgb2.gamma = rgbGamma;
  return rgb2;
})(1);
function numberArray(a4, b2) {
  if (!b2) b2 = [];
  var n = a4 ? Math.min(b2.length, a4.length) : 0, c2 = b2.slice(), i2;
  return function(t2) {
    for (i2 = 0; i2 < n; ++i2) c2[i2] = a4[i2] * (1 - t2) + b2[i2] * t2;
    return c2;
  };
}
function isNumberArray(x3) {
  return ArrayBuffer.isView(x3) && !(x3 instanceof DataView);
}
function genericArray(a4, b2) {
  var nb = b2 ? b2.length : 0, na = a4 ? Math.min(nb, a4.length) : 0, x3 = new Array(na), c2 = new Array(nb), i2;
  for (i2 = 0; i2 < na; ++i2) x3[i2] = interpolate(a4[i2], b2[i2]);
  for (; i2 < nb; ++i2) c2[i2] = b2[i2];
  return function(t2) {
    for (i2 = 0; i2 < na; ++i2) c2[i2] = x3[i2](t2);
    return c2;
  };
}
function date$1(a4, b2) {
  var d3 = /* @__PURE__ */ new Date();
  return a4 = +a4, b2 = +b2, function(t2) {
    return d3.setTime(a4 * (1 - t2) + b2 * t2), d3;
  };
}
function interpolateNumber(a4, b2) {
  return a4 = +a4, b2 = +b2, function(t2) {
    return a4 * (1 - t2) + b2 * t2;
  };
}
function object(a4, b2) {
  var i2 = {}, c2 = {}, k3;
  if (a4 === null || typeof a4 !== "object") a4 = {};
  if (b2 === null || typeof b2 !== "object") b2 = {};
  for (k3 in b2) {
    if (k3 in a4) {
      i2[k3] = interpolate(a4[k3], b2[k3]);
    } else {
      c2[k3] = b2[k3];
    }
  }
  return function(t2) {
    for (k3 in i2) c2[k3] = i2[k3](t2);
    return c2;
  };
}
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero(b2) {
  return function() {
    return b2;
  };
}
function one(b2) {
  return function(t2) {
    return b2(t2) + "";
  };
}
function string(a4, b2) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i2 = -1, s4 = [], q2 = [];
  a4 = a4 + "", b2 = b2 + "";
  while ((am = reA.exec(a4)) && (bm = reB.exec(b2))) {
    if ((bs = bm.index) > bi) {
      bs = b2.slice(bi, bs);
      if (s4[i2]) s4[i2] += bs;
      else s4[++i2] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s4[i2]) s4[i2] += bm;
      else s4[++i2] = bm;
    } else {
      s4[++i2] = null;
      q2.push({ i: i2, x: interpolateNumber(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b2.length) {
    bs = b2.slice(bi);
    if (s4[i2]) s4[i2] += bs;
    else s4[++i2] = bs;
  }
  return s4.length < 2 ? q2[0] ? one(q2[0].x) : zero(b2) : (b2 = q2.length, function(t2) {
    for (var i3 = 0, o; i3 < b2; ++i3) s4[(o = q2[i3]).i] = o.x(t2);
    return s4.join("");
  });
}
function interpolate(a4, b2) {
  var t2 = typeof b2, c2;
  return b2 == null || t2 === "boolean" ? constant(b2) : (t2 === "number" ? interpolateNumber : t2 === "string" ? (c2 = color(b2)) ? (b2 = c2, rgb) : string : b2 instanceof color ? rgb : b2 instanceof Date ? date$1 : isNumberArray(b2) ? numberArray : Array.isArray(b2) ? genericArray : typeof b2.valueOf !== "function" && typeof b2.toString !== "function" || isNaN(b2) ? object : interpolateNumber)(a4, b2);
}
function interpolateRound(a4, b2) {
  return a4 = +a4, b2 = +b2, function(t2) {
    return Math.round(a4 * (1 - t2) + b2 * t2);
  };
}
function constants(x3) {
  return function() {
    return x3;
  };
}
function number$1(x3) {
  return +x3;
}
var unit = [0, 1];
function identity$1(x3) {
  return x3;
}
function normalize(a4, b2) {
  return (b2 -= a4 = +a4) ? function(x3) {
    return (x3 - a4) / b2;
  } : constants(isNaN(b2) ? NaN : 0.5);
}
function clamper(a4, b2) {
  var t2;
  if (a4 > b2) t2 = a4, a4 = b2, b2 = t2;
  return function(x3) {
    return Math.max(a4, Math.min(b2, x3));
  };
}
function bimap(domain, range3, interpolate2) {
  var d0 = domain[0], d1 = domain[1], r0 = range3[0], r1 = range3[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate2(r1, r0);
  else d0 = normalize(d0, d1), r0 = interpolate2(r0, r1);
  return function(x3) {
    return r0(d0(x3));
  };
}
function polymap(domain, range3, interpolate2) {
  var j = Math.min(domain.length, range3.length) - 1, d3 = new Array(j), r2 = new Array(j), i2 = -1;
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range3 = range3.slice().reverse();
  }
  while (++i2 < j) {
    d3[i2] = normalize(domain[i2], domain[i2 + 1]);
    r2[i2] = interpolate2(range3[i2], range3[i2 + 1]);
  }
  return function(x3) {
    var i3 = bisect(domain, x3, 1, j) - 1;
    return r2[i3](d3[i3](x3));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range3 = unit, interpolate$1 = interpolate, transform, untransform, unknown, clamp3 = identity$1, piecewise, output, input;
  function rescale() {
    var n = Math.min(domain.length, range3.length);
    if (clamp3 !== identity$1) clamp3 = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x3) {
    return x3 == null || isNaN(x3 = +x3) ? unknown : (output || (output = piecewise(domain.map(transform), range3, interpolate$1)))(transform(clamp3(x3)));
  }
  scale.invert = function(y4) {
    return clamp3(untransform((input || (input = piecewise(range3, domain.map(transform), interpolateNumber)))(y4)));
  };
  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number$1), rescale()) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range3 = Array.from(_), rescale()) : range3.slice();
  };
  scale.rangeRound = function(_) {
    return range3 = Array.from(_), interpolate$1 = interpolateRound, rescale();
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp3 = _ ? true : identity$1, rescale()) : clamp3 !== identity$1;
  };
  scale.interpolate = function(_) {
    return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function(t2, u2) {
    transform = t2, untransform = u2;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity$1, identity$1);
}
function formatDecimal(x3) {
  return Math.abs(x3 = Math.round(x3)) >= 1e21 ? x3.toLocaleString("en").replace(/,/g, "") : x3.toString(10);
}
function formatDecimalParts(x3, p) {
  if ((i2 = (x3 = p ? x3.toExponential(p - 1) : x3.toExponential()).indexOf("e")) < 0) return null;
  var i2, coefficient = x3.slice(0, i2);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x3.slice(i2 + 1)
  ];
}
function exponent(x3) {
  return x3 = formatDecimalParts(Math.abs(x3)), x3 ? x3[1] : NaN;
}
function formatGroup(grouping, thousands) {
  return function(value, width) {
    var i2 = value.length, t2 = [], j = 0, g = grouping[0], length = 0;
    while (i2 > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t2.push(value.substring(i2 -= g, i2 + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t2.reverse().join(thousands);
  };
}
function formatNumerals(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i2) {
      return numerals[+i2];
    });
  };
}
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match2 = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match2;
  return new FormatSpecifier({
    fill: match2[1],
    align: match2[2],
    sign: match2[3],
    symbol: match2[4],
    zero: match2[5],
    width: match2[6],
    comma: match2[7],
    precision: match2[8] && match2[8].slice(1),
    trim: match2[9],
    type: match2[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};
function formatTrim(s4) {
  out: for (var n = s4.length, i2 = 1, i0 = -1, i1; i2 < n; ++i2) {
    switch (s4[i2]) {
      case ".":
        i0 = i1 = i2;
        break;
      case "0":
        if (i0 === 0) i0 = i2;
        i1 = i2;
        break;
      default:
        if (!+s4[i2]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }
  return i0 > 0 ? s4.slice(0, i0) + s4.slice(i1 + 1) : s4;
}
var prefixExponent;
function formatPrefixAuto(x3, p) {
  var d3 = formatDecimalParts(x3, p);
  if (!d3) return x3 + "";
  var coefficient = d3[0], exponent2 = d3[1], i2 = exponent2 - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent2 / 3))) * 3) + 1, n = coefficient.length;
  return i2 === n ? coefficient : i2 > n ? coefficient + new Array(i2 - n + 1).join("0") : i2 > 0 ? coefficient.slice(0, i2) + "." + coefficient.slice(i2) : "0." + new Array(1 - i2).join("0") + formatDecimalParts(x3, Math.max(0, p + i2 - 1))[0];
}
function formatRounded(x3, p) {
  var d3 = formatDecimalParts(x3, p);
  if (!d3) return x3 + "";
  var coefficient = d3[0], exponent2 = d3[1];
  return exponent2 < 0 ? "0." + new Array(-exponent2).join("0") + coefficient : coefficient.length > exponent2 + 1 ? coefficient.slice(0, exponent2 + 1) + "." + coefficient.slice(exponent2 + 1) : coefficient + new Array(exponent2 - coefficient.length + 2).join("0");
}
var formatTypes = {
  "%": (x3, p) => (x3 * 100).toFixed(p),
  "b": (x3) => Math.round(x3).toString(2),
  "c": (x3) => x3 + "",
  "d": formatDecimal,
  "e": (x3, p) => x3.toExponential(p),
  "f": (x3, p) => x3.toFixed(p),
  "g": (x3, p) => x3.toPrecision(p),
  "o": (x3) => Math.round(x3).toString(8),
  "p": (x3, p) => formatRounded(x3 * 100, p),
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": (x3) => Math.round(x3).toString(16).toUpperCase(),
  "x": (x3) => Math.round(x3).toString(16)
};
function identity(x3) {
  return x3;
}
var map2 = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function formatLocale$1(locale3) {
  var group = locale3.grouping === void 0 || locale3.thousands === void 0 ? identity : formatGroup(map2.call(locale3.grouping, Number), locale3.thousands + ""), currencyPrefix = locale3.currency === void 0 ? "" : locale3.currency[0] + "", currencySuffix = locale3.currency === void 0 ? "" : locale3.currency[1] + "", decimal = locale3.decimal === void 0 ? "." : locale3.decimal + "", numerals = locale3.numerals === void 0 ? identity : formatNumerals(map2.call(locale3.numerals, String)), percent = locale3.percent === void 0 ? "%" : locale3.percent + "", minus = locale3.minus === void 0 ? "−" : locale3.minus + "", nan = locale3.nan === void 0 ? "NaN" : locale3.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n") comma = true, type = "g";
    else if (!formatTypes[type]) precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero2 || fill === "0" && align === "=") zero2 = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format3(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i2, n, c2;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim) value = formatTrim(value);
        if (valueNegative && +value === 0 && sign2 !== "+") valueNegative = false;
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i2 = -1, n = value.length;
          while (++i2 < n) {
            if (c2 = value.charCodeAt(i2), 48 > c2 || c2 > 57) {
              valueSuffix = (c2 === 46 ? decimal + value.slice(i2 + 1) : value.slice(i2)) + valueSuffix;
              value = value.slice(0, i2);
              break;
            }
          }
        }
      }
      if (comma && !zero2) value = group(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero2) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format3.toString = function() {
      return specifier + "";
    };
    return format3;
  }
  function formatPrefix2(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e3 = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3, k3 = Math.pow(10, -e3), prefix = prefixes[8 + e3 / 3];
    return function(value2) {
      return f(k3 * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}
var locale$1;
var format;
var formatPrefix;
defaultLocale$1({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale$1(definition) {
  locale$1 = formatLocale$1(definition);
  format = locale$1.format;
  formatPrefix = locale$1.formatPrefix;
  return locale$1;
}
function precisionFixed(step2) {
  return Math.max(0, -exponent(Math.abs(step2)));
}
function precisionPrefix(step2, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step2)));
}
function precisionRound(step2, max3) {
  step2 = Math.abs(step2), max3 = Math.abs(max3) - step2;
  return Math.max(0, exponent(max3) - exponent(step2)) + 1;
}
function tickFormat(start, stop, count, specifier) {
  var step2 = tickStep(start, stop, count), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step2, value))) specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound(step2, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed(step2))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count) {
    var d3 = domain();
    return ticks(d3[0], d3[d3.length - 1], count == null ? 10 : count);
  };
  scale.tickFormat = function(count, specifier) {
    var d3 = domain();
    return tickFormat(d3[0], d3[d3.length - 1], count == null ? 10 : count, specifier);
  };
  scale.nice = function(count) {
    if (count == null) count = 10;
    var d3 = domain();
    var i0 = 0;
    var i1 = d3.length - 1;
    var start = d3[i0];
    var stop = d3[i1];
    var prestep;
    var step2;
    var maxIter = 10;
    if (stop < start) {
      step2 = start, start = stop, stop = step2;
      step2 = i0, i0 = i1, i1 = step2;
    }
    while (maxIter-- > 0) {
      step2 = tickIncrement(start, stop, count);
      if (step2 === prestep) {
        d3[i0] = start;
        d3[i1] = stop;
        return domain(d3);
      } else if (step2 > 0) {
        start = Math.floor(start / step2) * step2;
        stop = Math.ceil(stop / step2) * step2;
      } else if (step2 < 0) {
        start = Math.ceil(start * step2) / step2;
        stop = Math.floor(stop * step2) / step2;
      } else {
        break;
      }
      prestep = step2;
    }
    return scale;
  };
  return scale;
}
function linear() {
  var scale = continuous();
  scale.copy = function() {
    return copy(scale, linear());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}
function nice(domain, interval) {
  domain = domain.slice();
  var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t2;
  if (x1 < x0) {
    t2 = i0, i0 = i1, i1 = t2;
    t2 = x0, x0 = x1, x1 = t2;
  }
  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}
function transformLog(x3) {
  return Math.log(x3);
}
function transformExp(x3) {
  return Math.exp(x3);
}
function transformLogn(x3) {
  return -Math.log(-x3);
}
function transformExpn(x3) {
  return -Math.exp(-x3);
}
function pow10(x3) {
  return isFinite(x3) ? +("1e" + x3) : x3 < 0 ? 0 : x3;
}
function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : (x3) => Math.pow(base, x3);
}
function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x3) => Math.log(x3) / base);
}
function reflect(f) {
  return (x3, k3) => -f(-x3, k3);
}
function loggish(transform) {
  const scale = transform(transformLog, transformExp);
  const domain = scale.domain;
  let base = 10;
  let logs;
  let pows;
  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale;
  }
  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.ticks = (count) => {
    const d3 = domain();
    let u2 = d3[0];
    let v = d3[d3.length - 1];
    const r2 = v < u2;
    if (r2) [u2, v] = [v, u2];
    let i2 = logs(u2);
    let j = logs(v);
    let k3;
    let t2;
    const n = count == null ? 10 : +count;
    let z2 = [];
    if (!(base % 1) && j - i2 < n) {
      i2 = Math.floor(i2), j = Math.ceil(j);
      if (u2 > 0) for (; i2 <= j; ++i2) {
        for (k3 = 1; k3 < base; ++k3) {
          t2 = i2 < 0 ? k3 / pows(-i2) : k3 * pows(i2);
          if (t2 < u2) continue;
          if (t2 > v) break;
          z2.push(t2);
        }
      }
      else for (; i2 <= j; ++i2) {
        for (k3 = base - 1; k3 >= 1; --k3) {
          t2 = i2 > 0 ? k3 / pows(-i2) : k3 * pows(i2);
          if (t2 < u2) continue;
          if (t2 > v) break;
          z2.push(t2);
        }
      }
      if (z2.length * 2 < n) z2 = ticks(u2, v, n);
    } else {
      z2 = ticks(i2, j, Math.min(j - i2, n)).map(pows);
    }
    return r2 ? z2.reverse() : z2;
  };
  scale.tickFormat = (count, specifier) => {
    if (count == null) count = 10;
    if (specifier == null) specifier = base === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;
      specifier = format(specifier);
    }
    if (count === Infinity) return specifier;
    const k3 = Math.max(1, base * count / scale.ticks().length);
    return (d3) => {
      let i2 = d3 / pows(Math.round(logs(d3)));
      if (i2 * base < base - 0.5) i2 *= base;
      return i2 <= k3 ? specifier(d3) : "";
    };
  };
  scale.nice = () => {
    return domain(nice(domain(), {
      floor: (x3) => pows(Math.floor(logs(x3))),
      ceil: (x3) => pows(Math.ceil(logs(x3)))
    }));
  };
  return scale;
}
function log() {
  const scale = loggish(transformer()).domain([1, 10]);
  scale.copy = () => copy(scale, log()).base(scale.base());
  initRange.apply(scale, arguments);
  return scale;
}
var t0 = /* @__PURE__ */ new Date();
var t1 = /* @__PURE__ */ new Date();
function timeInterval(floori, offseti, count, field) {
  function interval(date2) {
    return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
  }
  interval.floor = (date2) => {
    return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
  };
  interval.ceil = (date2) => {
    return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
  };
  interval.round = (date2) => {
    const d0 = interval(date2), d1 = interval.ceil(date2);
    return date2 - d0 < d1 - date2 ? d0 : d1;
  };
  interval.offset = (date2, step2) => {
    return offseti(date2 = /* @__PURE__ */ new Date(+date2), step2 == null ? 1 : Math.floor(step2)), date2;
  };
  interval.range = (start, stop, step2) => {
    const range3 = [];
    start = interval.ceil(start);
    step2 = step2 == null ? 1 : Math.floor(step2);
    if (!(start < stop) || !(step2 > 0)) return range3;
    let previous;
    do
      range3.push(previous = /* @__PURE__ */ new Date(+start)), offseti(start, step2), floori(start);
    while (previous < start && start < stop);
    return range3;
  };
  interval.filter = (test) => {
    return timeInterval((date2) => {
      if (date2 >= date2) while (floori(date2), !test(date2)) date2.setTime(date2 - 1);
    }, (date2, step2) => {
      if (date2 >= date2) {
        if (step2 < 0) while (++step2 <= 0) {
          while (offseti(date2, -1), !test(date2)) {
          }
        }
        else while (--step2 >= 0) {
          while (offseti(date2, 1), !test(date2)) {
          }
        }
      }
    });
  };
  if (count) {
    interval.count = (start, end) => {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };
    interval.every = (step2) => {
      step2 = Math.floor(step2);
      return !isFinite(step2) || !(step2 > 0) ? null : !(step2 > 1) ? interval : interval.filter(field ? (d3) => field(d3) % step2 === 0 : (d3) => interval.count(0, d3) % step2 === 0);
    };
  }
  return interval;
}
var millisecond = timeInterval(() => {
}, (date2, step2) => {
  date2.setTime(+date2 + step2);
}, (start, end) => {
  return end - start;
});
millisecond.every = (k3) => {
  k3 = Math.floor(k3);
  if (!isFinite(k3) || !(k3 > 0)) return null;
  if (!(k3 > 1)) return millisecond;
  return timeInterval((date2) => {
    date2.setTime(Math.floor(date2 / k3) * k3);
  }, (date2, step2) => {
    date2.setTime(+date2 + step2 * k3);
  }, (start, end) => {
    return (end - start) / k3;
  });
};
millisecond.range;
var durationSecond = 1e3;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;
var second = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds());
}, (date2, step2) => {
  date2.setTime(+date2 + step2 * durationSecond);
}, (start, end) => {
  return (end - start) / durationSecond;
}, (date2) => {
  return date2.getUTCSeconds();
});
second.range;
var timeMinute = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
}, (date2, step2) => {
  date2.setTime(+date2 + step2 * durationMinute);
}, (start, end) => {
  return (end - start) / durationMinute;
}, (date2) => {
  return date2.getMinutes();
});
timeMinute.range;
var utcMinute = timeInterval((date2) => {
  date2.setUTCSeconds(0, 0);
}, (date2, step2) => {
  date2.setTime(+date2 + step2 * durationMinute);
}, (start, end) => {
  return (end - start) / durationMinute;
}, (date2) => {
  return date2.getUTCMinutes();
});
utcMinute.range;
var timeHour = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
}, (date2, step2) => {
  date2.setTime(+date2 + step2 * durationHour);
}, (start, end) => {
  return (end - start) / durationHour;
}, (date2) => {
  return date2.getHours();
});
timeHour.range;
var utcHour = timeInterval((date2) => {
  date2.setUTCMinutes(0, 0, 0);
}, (date2, step2) => {
  date2.setTime(+date2 + step2 * durationHour);
}, (start, end) => {
  return (end - start) / durationHour;
}, (date2) => {
  return date2.getUTCHours();
});
utcHour.range;
var timeDay = timeInterval(
  (date2) => date2.setHours(0, 0, 0, 0),
  (date2, step2) => date2.setDate(date2.getDate() + step2),
  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
  (date2) => date2.getDate() - 1
);
timeDay.range;
var utcDay = timeInterval((date2) => {
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step2) => {
  date2.setUTCDate(date2.getUTCDate() + step2);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date2) => {
  return date2.getUTCDate() - 1;
});
utcDay.range;
var unixDay = timeInterval((date2) => {
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step2) => {
  date2.setUTCDate(date2.getUTCDate() + step2);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date2) => {
  return Math.floor(date2 / durationDay);
});
unixDay.range;
function timeWeekday(i2) {
  return timeInterval((date2) => {
    date2.setDate(date2.getDate() - (date2.getDay() + 7 - i2) % 7);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step2) => {
    date2.setDate(date2.getDate() + step2 * 7);
  }, (start, end) => {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var timeSunday = timeWeekday(0);
var timeMonday = timeWeekday(1);
var timeTuesday = timeWeekday(2);
var timeWednesday = timeWeekday(3);
var timeThursday = timeWeekday(4);
var timeFriday = timeWeekday(5);
var timeSaturday = timeWeekday(6);
timeSunday.range;
timeMonday.range;
timeTuesday.range;
timeWednesday.range;
timeThursday.range;
timeFriday.range;
timeSaturday.range;
function utcWeekday(i2) {
  return timeInterval((date2) => {
    date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i2) % 7);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step2) => {
    date2.setUTCDate(date2.getUTCDate() + step2 * 7);
  }, (start, end) => {
    return (end - start) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
utcSunday.range;
utcMonday.range;
utcTuesday.range;
utcWednesday.range;
utcThursday.range;
utcFriday.range;
utcSaturday.range;
var timeMonth = timeInterval((date2) => {
  date2.setDate(1);
  date2.setHours(0, 0, 0, 0);
}, (date2, step2) => {
  date2.setMonth(date2.getMonth() + step2);
}, (start, end) => {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, (date2) => {
  return date2.getMonth();
});
timeMonth.range;
var utcMonth = timeInterval((date2) => {
  date2.setUTCDate(1);
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step2) => {
  date2.setUTCMonth(date2.getUTCMonth() + step2);
}, (start, end) => {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, (date2) => {
  return date2.getUTCMonth();
});
utcMonth.range;
var timeYear = timeInterval((date2) => {
  date2.setMonth(0, 1);
  date2.setHours(0, 0, 0, 0);
}, (date2, step2) => {
  date2.setFullYear(date2.getFullYear() + step2);
}, (start, end) => {
  return end.getFullYear() - start.getFullYear();
}, (date2) => {
  return date2.getFullYear();
});
timeYear.every = (k3) => {
  return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : timeInterval((date2) => {
    date2.setFullYear(Math.floor(date2.getFullYear() / k3) * k3);
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step2) => {
    date2.setFullYear(date2.getFullYear() + step2 * k3);
  });
};
timeYear.range;
var utcYear = timeInterval((date2) => {
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step2) => {
  date2.setUTCFullYear(date2.getUTCFullYear() + step2);
}, (start, end) => {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, (date2) => {
  return date2.getUTCFullYear();
});
utcYear.every = (k3) => {
  return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : timeInterval((date2) => {
    date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k3) * k3);
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step2) => {
    date2.setUTCFullYear(date2.getUTCFullYear() + step2 * k3);
  });
};
utcYear.range;
function ticker(year, month, week, day, hour, minute) {
  const tickIntervals = [
    [second, 1, durationSecond],
    [second, 5, 5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute, 1, durationMinute],
    [minute, 5, 5 * durationMinute],
    [minute, 15, 15 * durationMinute],
    [minute, 30, 30 * durationMinute],
    [hour, 1, durationHour],
    [hour, 3, 3 * durationHour],
    [hour, 6, 6 * durationHour],
    [hour, 12, 12 * durationHour],
    [day, 1, durationDay],
    [day, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month, 1, durationMonth],
    [month, 3, 3 * durationMonth],
    [year, 1, durationYear]
  ];
  function ticks2(start, stop, count) {
    const reverse = stop < start;
    if (reverse) [start, stop] = [stop, start];
    const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
    const ticks3 = interval ? interval.range(start, +stop + 1) : [];
    return reverse ? ticks3.reverse() : ticks3;
  }
  function tickInterval(start, stop, count) {
    const target = Math.abs(stop - start) / count;
    const i2 = bisector(([, , step3]) => step3).right(tickIntervals, target);
    if (i2 === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count));
    if (i2 === 0) return millisecond.every(Math.max(tickStep(start, stop, count), 1));
    const [t2, step2] = tickIntervals[target / tickIntervals[i2 - 1][2] < tickIntervals[i2][2] / target ? i2 - 1 : i2];
    return t2.every(step2);
  }
  return [ticks2, tickInterval];
}
var [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);
function localDate(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date2 = new Date(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
    date2.setFullYear(d3.y);
    return date2;
  }
  return new Date(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
}
function utcDate(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date2 = new Date(Date.UTC(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
    date2.setUTCFullYear(d3.y);
    return date2;
  }
  return new Date(Date.UTC(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
}
function newDate(y4, m3, d3) {
  return { y: y4, m: m3, d: d3, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale3) {
  var locale_dateTime = locale3.dateTime, locale_date = locale3.date, locale_time = locale3.time, locale_periods = locale3.periods, locale_weekdays = locale3.days, locale_shortWeekdays = locale3.shortDays, locale_months = locale3.months, locale_shortMonths = locale3.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date2) {
      var string2 = [], i2 = -1, j = 0, n = specifier.length, c2, pad2, format3;
      if (!(date2 instanceof Date)) date2 = /* @__PURE__ */ new Date(+date2);
      while (++i2 < n) {
        if (specifier.charCodeAt(i2) === 37) {
          string2.push(specifier.slice(j, i2));
          if ((pad2 = pads[c2 = specifier.charAt(++i2)]) != null) c2 = specifier.charAt(++i2);
          else pad2 = c2 === "e" ? " " : "0";
          if (format3 = formats2[c2]) c2 = format3(date2, pad2);
          string2.push(c2);
          j = i2 + 1;
        }
      }
      string2.push(specifier.slice(j, i2));
      return string2.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string2) {
      var d3 = newDate(1900, void 0, 1), i2 = parseSpecifier(d3, specifier, string2 += "", 0), week, day;
      if (i2 != string2.length) return null;
      if ("Q" in d3) return new Date(d3.Q);
      if ("s" in d3) return new Date(d3.s * 1e3 + ("L" in d3 ? d3.L : 0));
      if (Z && !("Z" in d3)) d3.Z = 0;
      if ("p" in d3) d3.H = d3.H % 12 + d3.p * 12;
      if (d3.m === void 0) d3.m = "q" in d3 ? d3.q : 0;
      if ("V" in d3) {
        if (d3.V < 1 || d3.V > 53) return null;
        if (!("w" in d3)) d3.w = 1;
        if ("Z" in d3) {
          week = utcDate(newDate(d3.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay.offset(week, (d3.V - 1) * 7);
          d3.y = week.getUTCFullYear();
          d3.m = week.getUTCMonth();
          d3.d = week.getUTCDate() + (d3.w + 6) % 7;
        } else {
          week = localDate(newDate(d3.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
          week = timeDay.offset(week, (d3.V - 1) * 7);
          d3.y = week.getFullYear();
          d3.m = week.getMonth();
          d3.d = week.getDate() + (d3.w + 6) % 7;
        }
      } else if ("W" in d3 || "U" in d3) {
        if (!("w" in d3)) d3.w = "u" in d3 ? d3.u % 7 : "W" in d3 ? 1 : 0;
        day = "Z" in d3 ? utcDate(newDate(d3.y, 0, 1)).getUTCDay() : localDate(newDate(d3.y, 0, 1)).getDay();
        d3.m = 0;
        d3.d = "W" in d3 ? (d3.w + 6) % 7 + d3.W * 7 - (day + 5) % 7 : d3.w + d3.U * 7 - (day + 6) % 7;
      }
      if ("Z" in d3) {
        d3.H += d3.Z / 100 | 0;
        d3.M += d3.Z % 100;
        return utcDate(d3);
      }
      return localDate(d3);
    };
  }
  function parseSpecifier(d3, specifier, string2, j) {
    var i2 = 0, n = specifier.length, m3 = string2.length, c2, parse2;
    while (i2 < n) {
      if (j >= m3) return -1;
      c2 = specifier.charCodeAt(i2++);
      if (c2 === 37) {
        c2 = specifier.charAt(i2++);
        parse2 = parses[c2 in pads ? specifier.charAt(i2++) : c2];
        if (!parse2 || (j = parse2(d3, string2, j)) < 0) return -1;
      } else if (c2 != string2.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function parsePeriod(d3, string2, i2) {
    var n = periodRe.exec(string2.slice(i2));
    return n ? (d3.p = periodLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
  }
  function parseShortWeekday(d3, string2, i2) {
    var n = shortWeekdayRe.exec(string2.slice(i2));
    return n ? (d3.w = shortWeekdayLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
  }
  function parseWeekday(d3, string2, i2) {
    var n = weekdayRe.exec(string2.slice(i2));
    return n ? (d3.w = weekdayLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
  }
  function parseShortMonth(d3, string2, i2) {
    var n = shortMonthRe.exec(string2.slice(i2));
    return n ? (d3.m = shortMonthLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
  }
  function parseMonth(d3, string2, i2) {
    var n = monthRe.exec(string2.slice(i2));
    return n ? (d3.m = monthLookup.get(n[0].toLowerCase()), i2 + n[0].length) : -1;
  }
  function parseLocaleDateTime(d3, string2, i2) {
    return parseSpecifier(d3, locale_dateTime, string2, i2);
  }
  function parseLocaleDate(d3, string2, i2) {
    return parseSpecifier(d3, locale_date, string2, i2);
  }
  function parseLocaleTime(d3, string2, i2) {
    return parseSpecifier(d3, locale_time, string2, i2);
  }
  function formatShortWeekday(d3) {
    return locale_shortWeekdays[d3.getDay()];
  }
  function formatWeekday(d3) {
    return locale_weekdays[d3.getDay()];
  }
  function formatShortMonth(d3) {
    return locale_shortMonths[d3.getMonth()];
  }
  function formatMonth(d3) {
    return locale_months[d3.getMonth()];
  }
  function formatPeriod(d3) {
    return locale_periods[+(d3.getHours() >= 12)];
  }
  function formatQuarter(d3) {
    return 1 + ~~(d3.getMonth() / 3);
  }
  function formatUTCShortWeekday(d3) {
    return locale_shortWeekdays[d3.getUTCDay()];
  }
  function formatUTCWeekday(d3) {
    return locale_weekdays[d3.getUTCDay()];
  }
  function formatUTCShortMonth(d3) {
    return locale_shortMonths[d3.getUTCMonth()];
  }
  function formatUTCMonth(d3) {
    return locale_months[d3.getUTCMonth()];
  }
  function formatUTCPeriod(d3) {
    return locale_periods[+(d3.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d3) {
    return 1 + ~~(d3.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", false);
      p.toString = function() {
        return specifier;
      };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier += "", true);
      p.toString = function() {
        return specifier;
      };
      return p;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
  var sign2 = value < 0 ? "-" : "", string2 = (sign2 ? -value : value) + "", length = string2.length;
  return sign2 + (length < width ? new Array(width - length + 1).join(fill) + string2 : string2);
}
function requote(s4) {
  return s4.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name, i2) => [name.toLowerCase(), i2]));
}
function parseWeekdayNumberSunday(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 1));
  return n ? (d3.w = +n[0], i2 + n[0].length) : -1;
}
function parseWeekdayNumberMonday(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 1));
  return n ? (d3.u = +n[0], i2 + n[0].length) : -1;
}
function parseWeekNumberSunday(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.U = +n[0], i2 + n[0].length) : -1;
}
function parseWeekNumberISO(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.V = +n[0], i2 + n[0].length) : -1;
}
function parseWeekNumberMonday(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.W = +n[0], i2 + n[0].length) : -1;
}
function parseFullYear(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 4));
  return n ? (d3.y = +n[0], i2 + n[0].length) : -1;
}
function parseYear(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i2 + n[0].length) : -1;
}
function parseZone(d3, string2, i2) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string2.slice(i2, i2 + 6));
  return n ? (d3.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i2 + n[0].length) : -1;
}
function parseQuarter(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 1));
  return n ? (d3.q = n[0] * 3 - 3, i2 + n[0].length) : -1;
}
function parseMonthNumber(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.m = n[0] - 1, i2 + n[0].length) : -1;
}
function parseDayOfMonth(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.d = +n[0], i2 + n[0].length) : -1;
}
function parseDayOfYear(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 3));
  return n ? (d3.m = 0, d3.d = +n[0], i2 + n[0].length) : -1;
}
function parseHour24(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.H = +n[0], i2 + n[0].length) : -1;
}
function parseMinutes(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.M = +n[0], i2 + n[0].length) : -1;
}
function parseSeconds(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 2));
  return n ? (d3.S = +n[0], i2 + n[0].length) : -1;
}
function parseMilliseconds(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 3));
  return n ? (d3.L = +n[0], i2 + n[0].length) : -1;
}
function parseMicroseconds(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2, i2 + 6));
  return n ? (d3.L = Math.floor(n[0] / 1e3), i2 + n[0].length) : -1;
}
function parseLiteralPercent(d3, string2, i2) {
  var n = percentRe.exec(string2.slice(i2, i2 + 1));
  return n ? i2 + n[0].length : -1;
}
function parseUnixTimestamp(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2));
  return n ? (d3.Q = +n[0], i2 + n[0].length) : -1;
}
function parseUnixTimestampSeconds(d3, string2, i2) {
  var n = numberRe.exec(string2.slice(i2));
  return n ? (d3.s = +n[0], i2 + n[0].length) : -1;
}
function formatDayOfMonth(d3, p) {
  return pad(d3.getDate(), p, 2);
}
function formatHour24(d3, p) {
  return pad(d3.getHours(), p, 2);
}
function formatHour12(d3, p) {
  return pad(d3.getHours() % 12 || 12, p, 2);
}
function formatDayOfYear(d3, p) {
  return pad(1 + timeDay.count(timeYear(d3), d3), p, 3);
}
function formatMilliseconds(d3, p) {
  return pad(d3.getMilliseconds(), p, 3);
}
function formatMicroseconds(d3, p) {
  return formatMilliseconds(d3, p) + "000";
}
function formatMonthNumber(d3, p) {
  return pad(d3.getMonth() + 1, p, 2);
}
function formatMinutes(d3, p) {
  return pad(d3.getMinutes(), p, 2);
}
function formatSeconds(d3, p) {
  return pad(d3.getSeconds(), p, 2);
}
function formatWeekdayNumberMonday(d3) {
  var day = d3.getDay();
  return day === 0 ? 7 : day;
}
function formatWeekNumberSunday(d3, p) {
  return pad(timeSunday.count(timeYear(d3) - 1, d3), p, 2);
}
function dISO(d3) {
  var day = d3.getDay();
  return day >= 4 || day === 0 ? timeThursday(d3) : timeThursday.ceil(d3);
}
function formatWeekNumberISO(d3, p) {
  d3 = dISO(d3);
  return pad(timeThursday.count(timeYear(d3), d3) + (timeYear(d3).getDay() === 4), p, 2);
}
function formatWeekdayNumberSunday(d3) {
  return d3.getDay();
}
function formatWeekNumberMonday(d3, p) {
  return pad(timeMonday.count(timeYear(d3) - 1, d3), p, 2);
}
function formatYear(d3, p) {
  return pad(d3.getFullYear() % 100, p, 2);
}
function formatYearISO(d3, p) {
  d3 = dISO(d3);
  return pad(d3.getFullYear() % 100, p, 2);
}
function formatFullYear(d3, p) {
  return pad(d3.getFullYear() % 1e4, p, 4);
}
function formatFullYearISO(d3, p) {
  var day = d3.getDay();
  d3 = day >= 4 || day === 0 ? timeThursday(d3) : timeThursday.ceil(d3);
  return pad(d3.getFullYear() % 1e4, p, 4);
}
function formatZone(d3) {
  var z2 = d3.getTimezoneOffset();
  return (z2 > 0 ? "-" : (z2 *= -1, "+")) + pad(z2 / 60 | 0, "0", 2) + pad(z2 % 60, "0", 2);
}
function formatUTCDayOfMonth(d3, p) {
  return pad(d3.getUTCDate(), p, 2);
}
function formatUTCHour24(d3, p) {
  return pad(d3.getUTCHours(), p, 2);
}
function formatUTCHour12(d3, p) {
  return pad(d3.getUTCHours() % 12 || 12, p, 2);
}
function formatUTCDayOfYear(d3, p) {
  return pad(1 + utcDay.count(utcYear(d3), d3), p, 3);
}
function formatUTCMilliseconds(d3, p) {
  return pad(d3.getUTCMilliseconds(), p, 3);
}
function formatUTCMicroseconds(d3, p) {
  return formatUTCMilliseconds(d3, p) + "000";
}
function formatUTCMonthNumber(d3, p) {
  return pad(d3.getUTCMonth() + 1, p, 2);
}
function formatUTCMinutes(d3, p) {
  return pad(d3.getUTCMinutes(), p, 2);
}
function formatUTCSeconds(d3, p) {
  return pad(d3.getUTCSeconds(), p, 2);
}
function formatUTCWeekdayNumberMonday(d3) {
  var dow = d3.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d3, p) {
  return pad(utcSunday.count(utcYear(d3) - 1, d3), p, 2);
}
function UTCdISO(d3) {
  var day = d3.getUTCDay();
  return day >= 4 || day === 0 ? utcThursday(d3) : utcThursday.ceil(d3);
}
function formatUTCWeekNumberISO(d3, p) {
  d3 = UTCdISO(d3);
  return pad(utcThursday.count(utcYear(d3), d3) + (utcYear(d3).getUTCDay() === 4), p, 2);
}
function formatUTCWeekdayNumberSunday(d3) {
  return d3.getUTCDay();
}
function formatUTCWeekNumberMonday(d3, p) {
  return pad(utcMonday.count(utcYear(d3) - 1, d3), p, 2);
}
function formatUTCYear(d3, p) {
  return pad(d3.getUTCFullYear() % 100, p, 2);
}
function formatUTCYearISO(d3, p) {
  d3 = UTCdISO(d3);
  return pad(d3.getUTCFullYear() % 100, p, 2);
}
function formatUTCFullYear(d3, p) {
  return pad(d3.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCFullYearISO(d3, p) {
  var day = d3.getUTCDay();
  d3 = day >= 4 || day === 0 ? utcThursday(d3) : utcThursday.ceil(d3);
  return pad(d3.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d3) {
  return +d3;
}
function formatUnixTimestampSeconds(d3) {
  return Math.floor(+d3 / 1e3);
}
var locale;
var timeFormat;
defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale(definition) {
  locale = formatLocale(definition);
  timeFormat = locale.format;
  locale.parse;
  locale.utcFormat;
  locale.utcParse;
  return locale;
}
function date(t2) {
  return new Date(t2);
}
function number(t2) {
  return t2 instanceof Date ? +t2 : +/* @__PURE__ */ new Date(+t2);
}
function calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format3) {
  var scale = continuous(), invert = scale.invert, domain = scale.domain;
  var formatMillisecond = format3(".%L"), formatSecond = format3(":%S"), formatMinute = format3("%I:%M"), formatHour = format3("%I %p"), formatDay = format3("%a %d"), formatWeek = format3("%b %d"), formatMonth = format3("%B"), formatYear2 = format3("%Y");
  function tickFormat2(date2) {
    return (second2(date2) < date2 ? formatMillisecond : minute(date2) < date2 ? formatSecond : hour(date2) < date2 ? formatMinute : day(date2) < date2 ? formatHour : month(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year(date2) < date2 ? formatMonth : formatYear2)(date2);
  }
  scale.invert = function(y4) {
    return new Date(invert(y4));
  };
  scale.domain = function(_) {
    return arguments.length ? domain(Array.from(_, number)) : domain().map(date);
  };
  scale.ticks = function(interval) {
    var d3 = domain();
    return ticks2(d3[0], d3[d3.length - 1], interval == null ? 10 : interval);
  };
  scale.tickFormat = function(count, specifier) {
    return specifier == null ? tickFormat2 : format3(specifier);
  };
  scale.nice = function(interval) {
    var d3 = domain();
    if (!interval || typeof interval.range !== "function") interval = tickInterval(d3[0], d3[d3.length - 1], interval == null ? 10 : interval);
    return interval ? domain(nice(d3, interval)) : scale;
  };
  scale.copy = function() {
    return copy(scale, calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format3));
  };
  return scale;
}
function time() {
  return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute, second, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/scales.js
function isNumericDomain(domain) {
  return domain.length > 0 && typeof domain[0] === "number";
}
function isDateDomain(domain) {
  return domain.length > 0 && domain[0] instanceof Date;
}
function createNumericScale(type, domain) {
  let scale;
  switch (type) {
    case "log":
      scale = log();
      break;
    default:
      scale = linear();
  }
  if (isNumericDomain(domain)) {
    scale.domain(domain);
  }
  return scale;
}
function createTimeScale(domain) {
  const scale = time();
  if (isDateDomain(domain)) {
    scale.domain(domain);
  }
  return scale;
}
function createBandScale(domain) {
  const scale = band().padding(0.1);
  scale.domain(domain);
  return scale;
}
function createScale(type, domain, range3) {
  switch (type) {
    case "linear":
    case "log":
      return { type: "numeric", scale: createNumericScale(type, domain).range(range3) };
    case "time":
      return { type: "time", scale: createTimeScale(domain).range(range3) };
    case "categorical":
      return { type: "categorical", scale: createBandScale(domain).range(range3) };
  }
}
var ChartScale = class _ChartScale {
  constructor(scaleType, domain, range3, noCategoricalOuterPadding = false) {
    this.scaleType = scaleType;
    this.domain = domain;
    this.range = range3;
    this.scale = createScale(this.scaleType, this.domain, this.range);
    this.d3Scale = this.scale.scale;
    if (this.isCategorical()) {
      if (noCategoricalOuterPadding) {
        this.d3Scale.paddingInner(0.7);
        this.d3Scale.paddingOuter(0);
      } else {
        this.d3Scale.paddingInner(0.2);
        this.d3Scale.paddingOuter(0.05);
      }
    }
  }
  cloneScale(newScaleType, newDomain, newRange) {
    return new _ChartScale(newScaleType || this.scaleType, newDomain || this.domain, newRange || this.range);
  }
  isNumeric() {
    return this.scale.type === "numeric";
  }
  isTime() {
    return this.scale.type === "time";
  }
  isCategorical() {
    return this.scale.type === "categorical";
  }
};
var NumericChartScale = class {
  constructor(scaleType, domain, range3, adjustDomain) {
    this.scaleType = scaleType;
    const scale = createNumericScale(scaleType, domain).range(range3);
    if (adjustDomain !== null) {
      scale.nice(adjustDomain);
    }
    this.scale = { type: "numeric", scale };
    this.d3Scale = this.scale.scale;
  }
  isCategorical() {
    return false;
  }
};

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number2 = Number(dirtyNumber);
  if (isNaN(number2)) {
    return number2;
  }
  return number2 < 0 ? Math.ceil(number2) : Math.floor(number2);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return /* @__PURE__ */ new Date(NaN);
  }
}

// node_modules/date-fns/esm/addDays/index.js
function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date2;
  }
  date2.setDate(date2.getDate() + amount);
  return date2;
}

// node_modules/date-fns/esm/addMonths/index.js
function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date2;
  }
  var dayOfMonth = date2.getDate();
  var endOfDesiredMonth = new Date(date2.getTime());
  endOfDesiredMonth.setMonth(date2.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    date2.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date2;
  }
}

// node_modules/date-fns/esm/add/index.js
function add(dirtyDate, duration) {
  requiredArgs(2, arguments);
  if (!duration || _typeof(duration) !== "object") return /* @__PURE__ */ new Date(NaN);
  var years = duration.years ? toInteger(duration.years) : 0;
  var months = duration.months ? toInteger(duration.months) : 0;
  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;
  var days = duration.days ? toInteger(duration.days) : 0;
  var hours = duration.hours ? toInteger(duration.hours) : 0;
  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;
  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;
  var date2 = toDate(dirtyDate);
  var dateWithMonths = months || years ? addMonths(date2, months + years * 12) : date2;
  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;
  var minutesToAdd = minutes + hours * 60;
  var secondsToAdd = seconds + minutesToAdd * 60;
  var msToAdd = secondsToAdd * 1e3;
  var finalDate = new Date(dateWithDays.getTime() + msToAdd);
  return finalDate;
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/_lib/defaultOptions/index.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(date2) {
  var utcDate2 = new Date(Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate(), date2.getHours(), date2.getMinutes(), date2.getSeconds(), date2.getMilliseconds()));
  utcDate2.setUTCFullYear(date2.getFullYear());
  return date2.getTime() - utcDate2.getTime();
}

// node_modules/date-fns/esm/startOfDay/index.js
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  date2.setHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/differenceInCalendarDays/index.js
var MILLISECONDS_IN_DAY = 864e5;
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
}

// node_modules/date-fns/esm/addMinutes/index.js
var MILLISECONDS_IN_MINUTE = 6e4;
function addMinutes(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
}

// node_modules/date-fns/esm/addYears/index.js
function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}

// node_modules/date-fns/esm/max/index.js
function max2(dirtyDatesArray) {
  requiredArgs(1, arguments);
  var datesArray;
  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === "function") {
    datesArray = dirtyDatesArray;
  } else if (_typeof(dirtyDatesArray) === "object" && dirtyDatesArray !== null) {
    datesArray = Array.prototype.slice.call(dirtyDatesArray);
  } else {
    return /* @__PURE__ */ new Date(NaN);
  }
  var result;
  datesArray.forEach(function(dirtyDate) {
    var currentDate = toDate(dirtyDate);
    if (result === void 0 || result < currentDate || isNaN(Number(currentDate))) {
      result = currentDate;
    }
  });
  return result || /* @__PURE__ */ new Date(NaN);
}

// node_modules/date-fns/esm/min/index.js
function min2(dirtyDatesArray) {
  requiredArgs(1, arguments);
  var datesArray;
  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === "function") {
    datesArray = dirtyDatesArray;
  } else if (_typeof(dirtyDatesArray) === "object" && dirtyDatesArray !== null) {
    datesArray = Array.prototype.slice.call(dirtyDatesArray);
  } else {
    return /* @__PURE__ */ new Date(NaN);
  }
  var result;
  datesArray.forEach(function(dirtyDate) {
    var currentDate = toDate(dirtyDate);
    if (result === void 0 || result > currentDate || isNaN(currentDate.getDate())) {
      result = currentDate;
    }
  });
  return result || /* @__PURE__ */ new Date(NaN);
}

// node_modules/date-fns/esm/compareAsc/index.js
function compareAsc(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var diff = dateLeft.getTime() - dateRight.getTime();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}

// node_modules/date-fns/esm/constants/index.js
var daysInYear = 365.2425;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
var minTime = -maxTime;
var secondsInHour = 3600;
var secondsInDay = secondsInHour * 24;
var secondsInWeek = secondsInDay * 7;
var secondsInYear = secondsInDay * daysInYear;
var secondsInMonth = secondsInYear / 12;
var secondsInQuarter = secondsInMonth * 3;

// node_modules/date-fns/esm/isSameDay/index.js
function isSameDay(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
  var dateRightStartOfDay = startOfDay(dirtyDateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}

// node_modules/date-fns/esm/isDate/index.js
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date2 = toDate(dirtyDate);
  return !isNaN(Number(date2));
}

// node_modules/date-fns/esm/differenceInCalendarYears/index.js
function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() - dateRight.getFullYear();
}

// node_modules/date-fns/esm/differenceInDays/index.js
function compareLocalAsc(dateLeft, dateRight) {
  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}
function differenceInDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareLocalAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));
  dateLeft.setDate(dateLeft.getDate() - sign2 * difference);
  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign2);
  var result = sign2 * (difference - isLastDayNotFull);
  return result === 0 ? 0 : result;
}

// node_modules/date-fns/esm/endOfDay/index.js
function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  date2.setHours(23, 59, 59, 999);
  return date2;
}

// node_modules/date-fns/esm/endOfMonth/index.js
function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var month = date2.getMonth();
  date2.setFullYear(date2.getFullYear(), month + 1, 0);
  date2.setHours(23, 59, 59, 999);
  return date2;
}

// node_modules/date-fns/esm/isLastDayOfMonth/index.js
function isLastDayOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  return endOfDay(date2).getTime() === endOfMonth(date2).getTime();
}

// node_modules/date-fns/esm/differenceInYears/index.js
function differenceInYears(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign2 = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight));
  dateLeft.setFullYear(1584);
  dateRight.setFullYear(1584);
  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign2;
  var result = sign2 * (difference - Number(isLastYearNotFull));
  return result === 0 ? 0 : result;
}

// node_modules/date-fns/esm/startOfMonth/index.js
function startOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  date2.setDate(1);
  date2.setHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/startOfYear/index.js
function startOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var cleanDate = toDate(dirtyDate);
  var date2 = /* @__PURE__ */ new Date(0);
  date2.setFullYear(cleanDate.getFullYear(), 0, 1);
  date2.setHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
var MILLISECONDS_IN_DAY2 = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var timestamp = date2.getTime();
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date2.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY2) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date2 = toDate(dirtyDate);
  var day = date2.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date2.setUTCDate(date2.getUTCDate() - diff);
  date2.setUTCHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var year = date2.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date2.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date2.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date2 = startOfUTCISOWeek(fourthOfJanuary);
  return date2;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date2).getTime() - startOfUTCISOWeekYear(date2).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions3 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions3.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions3.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date2 = toDate(dirtyDate);
  var day = date2.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date2.setUTCDate(date2.getUTCDate() - diff);
  date2.setUTCHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var year = date2.getUTCFullYear();
  var defaultOptions3 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions3.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions3.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date2.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date2.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions3 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions3.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions3.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = /* @__PURE__ */ new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date2 = startOfUTCWeek(firstWeek, options);
  return date2;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var diff = startOfUTCWeek(date2, options).getTime() - startOfUTCWeekYear(date2, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number2, targetLength) {
  var sign2 = number2 < 0 ? "-" : "";
  var output = Math.abs(number2).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign2 + output;
}

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters = {
  // Year
  y: function y2(date2, token) {
    var signedYear = date2.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M: function M(date2, token) {
    var month = date2.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d(date2, token) {
    return addLeadingZeros(date2.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a2(date2, token) {
    var dayPeriodEnumValue = date2.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h(date2, token) {
    return addLeadingZeros(date2.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H(date2, token) {
    return addLeadingZeros(date2.getUTCHours(), token.length);
  },
  // Minute
  m: function m(date2, token) {
    return addLeadingZeros(date2.getUTCMinutes(), token.length);
  },
  // Second
  s: function s2(date2, token) {
    return addLeadingZeros(date2.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S(date2, token) {
    var numberOfDigits = token.length;
    var milliseconds2 = date2.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds2 * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var lightFormatters_default = formatters;

// node_modules/date-fns/esm/_lib/format/formatters/index.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters2 = {
  // Era
  G: function G(date2, token, localize2) {
    var era = date2.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      // AD, BC
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      // A, B
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      // Anno Domini, Before Christ
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y3(date2, token, localize2) {
    if (token === "yo") {
      var signedYear = date2.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters_default.y(date2, token);
  },
  // Local week-numbering year
  Y: function Y(date2, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date2, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R(date2, token) {
    var isoWeekYear = getUTCISOWeekYear(date2);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u(date2, token) {
    var year = date2.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function Q(date2, token, localize2) {
    var quarter = Math.ceil((date2.getUTCMonth() + 1) / 3);
    switch (token) {
      // 1, 2, 3, 4
      case "Q":
        return String(quarter);
      // 01, 02, 03, 04
      case "QQ":
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      // Q1, Q2, Q3, Q4
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      // 1st quarter, 2nd quarter, ...
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q(date2, token, localize2) {
    var quarter = Math.ceil((date2.getUTCMonth() + 1) / 3);
    switch (token) {
      // 1, 2, 3, 4
      case "q":
        return String(quarter);
      // 01, 02, 03, 04
      case "qq":
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      // Q1, Q2, Q3, Q4
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      // 1st quarter, 2nd quarter, ...
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M2(date2, token, localize2) {
    var month = date2.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters_default.M(date2, token);
      // 1st, 2nd, ..., 12th
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      // Jan, Feb, ..., Dec
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      // J, F, ..., D
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      // January, February, ..., December
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L(date2, token, localize2) {
    var month = date2.getUTCMonth();
    switch (token) {
      // 1, 2, ..., 12
      case "L":
        return String(month + 1);
      // 01, 02, ..., 12
      case "LL":
        return addLeadingZeros(month + 1, 2);
      // 1st, 2nd, ..., 12th
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      // Jan, Feb, ..., Dec
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      // J, F, ..., D
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      // January, February, ..., December
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w(date2, token, localize2, options) {
    var week = getUTCWeek(date2, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function I(date2, token, localize2) {
    var isoWeek = getUTCISOWeek(date2);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function d2(date2, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date2.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters_default.d(date2, token);
  },
  // Day of year
  D: function D(date2, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date2);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function E(date2, token, localize2) {
    var dayOfWeek = date2.getUTCDay();
    switch (token) {
      // Tue
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      // T
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      // Tuesday
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e(date2, token, localize2, options) {
    var dayOfWeek = date2.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      // Numerical value (Nth day of week with current locale or weekStartsOn)
      case "e":
        return String(localDayOfWeek);
      // Padded numerical value
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      // 1st, 2nd, ..., 7th
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      // T
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      // Tuesday
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c(date2, token, localize2, options) {
    var dayOfWeek = date2.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      // Numerical value (same as in `e`)
      case "c":
        return String(localDayOfWeek);
      // Padded numerical value
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      // 1st, 2nd, ..., 7th
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      // T
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      // Tu
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      // Tuesday
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i(date2, token, localize2) {
    var dayOfWeek = date2.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      // 2
      case "i":
        return String(isoDayOfWeek);
      // 02
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      // 2nd
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      // Tue
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      // T
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      // Tuesday
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a3(date2, token, localize2) {
    var hours = date2.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b(date2, token, localize2) {
    var hours = date2.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B(date2, token, localize2) {
    var hours = date2.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h2(date2, token, localize2) {
    if (token === "ho") {
      var hours = date2.getUTCHours() % 12;
      if (hours === 0) hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters_default.h(date2, token);
  },
  // Hour [0-23]
  H: function H2(date2, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date2.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters_default.H(date2, token);
  },
  // Hour [0-11]
  K: function K(date2, token, localize2) {
    var hours = date2.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function k2(date2, token, localize2) {
    var hours = date2.getUTCHours();
    if (hours === 0) hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function m2(date2, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date2.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters_default.m(date2, token);
  },
  // Second
  s: function s3(date2, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date2.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters_default.s(date2, token);
  },
  // Fraction of second
  S: function S2(date2, token) {
    return lightFormatters_default.S(date2, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      // Hours and optional minutes
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`
      case "XXXXX":
      case "XXX":
      // Hours and minutes with `:` delimiter
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x2(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      // Hours and optional minutes
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`
      case "xxxxx":
      case "xxx":
      // Hours and minutes with `:` delimiter
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      // Short
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      // Long
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      // Short
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      // Long
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign2 = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign2 + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign2 + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign2 = offset > 0 ? "-" : "+";
    return sign2 + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign2 = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign2 + hours + delimiter + minutes;
}
var formatters_default = formatters2;

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters_default = longFormatters;

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format3, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format3, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format3, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format3, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format3, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
var formatDistance_default = formatDistance;

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format3 = args.formats[width] || args.formats[args.defaultWidth];
    return format3;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
var formatLong_default = formatLong;

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
var formatRelative_default = formatRelative;

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number2 = Number(dirtyNumber);
  var rem100 = number2 % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number2 + "st";
      case 2:
        return number2 + "nd";
      case 3:
        return number2 + "rd";
    }
  }
  return number2 + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
var localize_default = localize;

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string2) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string2.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key2 = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key2) : key2;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string2.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object2, predicate) {
  for (var key2 in object2) {
    if (object2.hasOwnProperty(key2) && predicate(object2[key2])) {
      return key2;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key2 = 0; key2 < array.length; key2++) {
    if (predicate(array[key2])) {
      return key2;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string2) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string2.match(args.matchPattern);
    if (!matchResult) return null;
    var matchedString = matchResult[0];
    var parseResult = string2.match(args.parsePattern);
    if (!parseResult) return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string2.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
var match_default = match;

// node_modules/date-fns/esm/locale/en-US/index.js
var locale2 = {
  code: "en-US",
  formatDistance: formatDistance_default,
  formatLong: formatLong_default,
  formatRelative: formatRelative_default,
  localize: localize_default,
  match: match_default,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
var en_US_default = locale2;

// node_modules/date-fns/esm/_lib/defaultLocale/index.js
var defaultLocale_default = en_US_default;

// node_modules/date-fns/esm/format/index.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format2(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions3 = getDefaultOptions();
  var locale3 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions3.locale) !== null && _ref !== void 0 ? _ref : defaultLocale_default;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions3.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions3.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions3.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions3.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale3.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale3.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate2 = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale3,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale3.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate2, substring, locale3.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  var matched = input.match(escapedStringRegExp);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}

// node_modules/date-fns/esm/formatDistanceStrict/index.js
var MILLISECONDS_IN_MINUTE2 = 1e3 * 60;
var MINUTES_IN_DAY = 60 * 24;
var MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;
var MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;

// node_modules/date-fns/esm/getDaysInMonth/index.js
function getDaysInMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date2 = toDate(dirtyDate);
  var year = date2.getFullYear();
  var monthIndex = date2.getMonth();
  var lastDayOfMonth2 = /* @__PURE__ */ new Date(0);
  lastDayOfMonth2.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth2.setHours(0, 0, 0, 0);
  return lastDayOfMonth2.getDate();
}

// node_modules/date-fns/esm/getOverlappingDaysInIntervals/index.js
var MILLISECONDS_IN_DAY3 = 24 * 60 * 60 * 1e3;

// node_modules/date-fns/esm/isAfter/index.js
function isAfter(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date2.getTime() > dateToCompare.getTime();
}

// node_modules/date-fns/esm/isBefore/index.js
function isBefore(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date2.getTime() < dateToCompare.getTime();
}

// node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(t2, e3) {
  if ("function" != typeof e3 && null !== e3) throw new TypeError("Super expression must either be null or a function");
  t2.prototype = Object.create(e3 && e3.prototype, {
    constructor: {
      value: t2,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t2, "prototype", {
    writable: false
  }), e3 && _setPrototypeOf(t2, e3);
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(t2) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t3) {
    return t3.__proto__ || Object.getPrototypeOf(t3);
  }, _getPrototypeOf(t2);
}

// node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct() {
  try {
    var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t3) {
  }
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
    return !!t2;
  })();
}

// node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(t2, e3) {
  if (e3 && ("object" == _typeof(e3) || "function" == typeof e3)) return e3;
  if (void 0 !== e3) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t2);
}

// node_modules/@babel/runtime/helpers/esm/createSuper.js
function _createSuper(t2) {
  var r2 = _isNativeReflectConstruct();
  return function() {
    var e3, o = _getPrototypeOf(t2);
    if (r2) {
      var s4 = _getPrototypeOf(this).constructor;
      e3 = Reflect.construct(o, arguments, s4);
    } else e3 = o.apply(this, arguments);
    return _possibleConstructorReturn(this, e3);
  };
}

// node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(a4, n) {
  if (!(a4 instanceof n)) throw new TypeError("Cannot call a class as a function");
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function toPrimitive(t2, r2) {
  if ("object" != _typeof(t2) || !t2) return t2;
  var e3 = t2[Symbol.toPrimitive];
  if (void 0 !== e3) {
    var i2 = e3.call(t2, r2 || "default");
    if ("object" != _typeof(i2)) return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t2);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function toPropertyKey(t2) {
  var i2 = toPrimitive(t2, "string");
  return "symbol" == _typeof(i2) ? i2 : i2 + "";
}

// node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(e3, r2) {
  for (var t2 = 0; t2 < r2.length; t2++) {
    var o = r2[t2];
    o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e3, toPropertyKey(o.key), o);
  }
}
function _createClass(e3, r2, t2) {
  return r2 && _defineProperties(e3.prototype, r2), t2 && _defineProperties(e3, t2), Object.defineProperty(e3, "prototype", {
    writable: false
  }), e3;
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(e3, r2, t2) {
  return (r2 = toPropertyKey(r2)) in e3 ? Object.defineProperty(e3, r2, {
    value: t2,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e3[r2] = t2, e3;
}

// node_modules/date-fns/esm/parse/_lib/Setter.js
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = (function() {
  function Setter2() {
    _classCallCheck(this, Setter2);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", 0);
  }
  _createClass(Setter2, [{
    key: "validate",
    value: function validate3(_utcDate, _options) {
      return true;
    }
  }]);
  return Setter2;
})();
var ValueSetter = (function(_Setter) {
  _inherits(ValueSetter2, _Setter);
  var _super = _createSuper(ValueSetter2);
  function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
    var _this;
    _classCallCheck(this, ValueSetter2);
    _this = _super.call(this);
    _this.value = value;
    _this.validateValue = validateValue;
    _this.setValue = setValue;
    _this.priority = priority;
    if (subPriority) {
      _this.subPriority = subPriority;
    }
    return _this;
  }
  _createClass(ValueSetter2, [{
    key: "validate",
    value: function validate3(utcDate2, options) {
      return this.validateValue(utcDate2, this.value, options);
    }
  }, {
    key: "set",
    value: function set2(utcDate2, flags, options) {
      return this.setValue(utcDate2, flags, this.value, options);
    }
  }]);
  return ValueSetter2;
})(Setter);
var DateToSystemTimezoneSetter = (function(_Setter2) {
  _inherits(DateToSystemTimezoneSetter2, _Setter2);
  var _super2 = _createSuper(DateToSystemTimezoneSetter2);
  function DateToSystemTimezoneSetter2() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this2 = _super2.call.apply(_super2, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
    _defineProperty(_assertThisInitialized(_this2), "subPriority", -1);
    return _this2;
  }
  _createClass(DateToSystemTimezoneSetter2, [{
    key: "set",
    value: function set2(date2, flags) {
      if (flags.timestampIsSet) {
        return date2;
      }
      var convertedDate = /* @__PURE__ */ new Date(0);
      convertedDate.setFullYear(date2.getUTCFullYear(), date2.getUTCMonth(), date2.getUTCDate());
      convertedDate.setHours(date2.getUTCHours(), date2.getUTCMinutes(), date2.getUTCSeconds(), date2.getUTCMilliseconds());
      return convertedDate;
    }
  }]);
  return DateToSystemTimezoneSetter2;
})(Setter);

// node_modules/date-fns/esm/parse/_lib/Parser.js
var Parser = (function() {
  function Parser2() {
    _classCallCheck(this, Parser2);
    _defineProperty(this, "incompatibleTokens", void 0);
    _defineProperty(this, "priority", void 0);
    _defineProperty(this, "subPriority", void 0);
  }
  _createClass(Parser2, [{
    key: "run",
    value: function run3(dateString, token, match2, options) {
      var result = this.parse(dateString, token, match2, options);
      if (!result) {
        return null;
      }
      return {
        setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
        rest: result.rest
      };
    }
  }, {
    key: "validate",
    value: function validate3(_utcDate, _value, _options) {
      return true;
    }
  }]);
  return Parser2;
})();

// node_modules/date-fns/esm/parse/_lib/parsers/EraParser.js
var EraParser = (function(_Parser) {
  _inherits(EraParser2, _Parser);
  var _super = _createSuper(EraParser2);
  function EraParser2() {
    var _this;
    _classCallCheck(this, EraParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 140);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["R", "u", "t", "T"]);
    return _this;
  }
  _createClass(EraParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        // AD, BC
        case "G":
        case "GG":
        case "GGG":
          return match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
        // A, B
        case "GGGGG":
          return match2.era(dateString, {
            width: "narrow"
          });
        // Anno Domini, Before Christ
        case "GGGG":
        default:
          return match2.era(dateString, {
            width: "wide"
          }) || match2.era(dateString, {
            width: "abbreviated"
          }) || match2.era(dateString, {
            width: "narrow"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date2, flags, value) {
      flags.era = value;
      date2.setUTCFullYear(value, 0, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return EraParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/constants.js
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/
  // 0 to 9999, -0 to -9999
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

// node_modules/date-fns/esm/parse/_lib/utils.js
function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  var sign2 = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign2 * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
  }
}
function parseNDigitsSigned(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

// node_modules/date-fns/esm/parse/_lib/parsers/YearParser.js
var YearParser = (function(_Parser) {
  _inherits(YearParser2, _Parser);
  var _super = _createSuper(YearParser2);
  function YearParser2() {
    var _this;
    _classCallCheck(this, YearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(YearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date2, flags, value) {
      var currentYear = date2.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date2.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date2.setUTCHours(0, 0, 0, 0);
        return date2;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date2.setUTCFullYear(year, 0, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return YearParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekYearParser.js
var LocalWeekYearParser = (function(_Parser) {
  _inherits(LocalWeekYearParser2, _Parser);
  var _super = _createSuper(LocalWeekYearParser2);
  function LocalWeekYearParser2() {
    var _this;
    _classCallCheck(this, LocalWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return mapValue(parseNDigits(4, dateString), valueCallback3);
        case "Yo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "year"
          }), valueCallback3);
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }
  }, {
    key: "set",
    value: function set2(date2, flags, value, options) {
      var currentYear = getUTCWeekYear(date2, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date2.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date2.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date2, options);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date2.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date2.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date2, options);
    }
  }]);
  return LocalWeekYearParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekYearParser.js
var ISOWeekYearParser = (function(_Parser) {
  _inherits(ISOWeekYearParser2, _Parser);
  var _super = _createSuper(ISOWeekYearParser2);
  function ISOWeekYearParser2() {
    var _this;
    _classCallCheck(this, ISOWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "R") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      var firstWeekOfYear = /* @__PURE__ */ new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    }
  }]);
  return ISOWeekYearParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ExtendedYearParser.js
var ExtendedYearParser = (function(_Parser) {
  _inherits(ExtendedYearParser2, _Parser);
  var _super = _createSuper(ExtendedYearParser2);
  function ExtendedYearParser2() {
    var _this;
    _classCallCheck(this, ExtendedYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 130);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ExtendedYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      if (token === "u") {
        return parseNDigitsSigned(4, dateString);
      }
      return parseNDigitsSigned(token.length, dateString);
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCFullYear(value, 0, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return ExtendedYearParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/QuarterParser.js
var QuarterParser = (function(_Parser) {
  _inherits(QuarterParser2, _Parser);
  var _super = _createSuper(QuarterParser2);
  function QuarterParser2() {
    var _this;
    _classCallCheck(this, QuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(QuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        // 1, 2, 3, 4
        case "Q":
        case "QQ":
          return parseNDigits(token.length, dateString);
        // 1st, 2nd, 3rd, 4th
        case "Qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        // Q1, Q2, Q3, Q4
        case "QQQ":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case "QQQQQ":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // 1st quarter, 2nd quarter, ...
        case "QQQQ":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMonth((value - 1) * 3, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return QuarterParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneQuarterParser.js
var StandAloneQuarterParser = (function(_Parser) {
  _inherits(StandAloneQuarterParser2, _Parser);
  var _super = _createSuper(StandAloneQuarterParser2);
  function StandAloneQuarterParser2() {
    var _this;
    _classCallCheck(this, StandAloneQuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 120);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneQuarterParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        // 1, 2, 3, 4
        case "q":
        case "qq":
          return parseNDigits(token.length, dateString);
        // 1st, 2nd, 3rd, 4th
        case "qo":
          return match2.ordinalNumber(dateString, {
            unit: "quarter"
          });
        // Q1, Q2, Q3, Q4
        case "qqq":
          return match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case "qqqqq":
          return match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
        // 1st quarter, 2nd quarter, ...
        case "qqqq":
        default:
          return match2.quarter(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 4;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMonth((value - 1) * 3, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return StandAloneQuarterParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/MonthParser.js
var MonthParser = (function(_Parser) {
  _inherits(MonthParser2, _Parser);
  var _super = _createSuper(MonthParser2);
  function MonthParser2() {
    var _this;
    _classCallCheck(this, MonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    return _this;
  }
  _createClass(MonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        // 1, 2, ..., 12
        case "M":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        // 01, 02, ..., 12
        case "MM":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        // 1st, 2nd, ..., 12th
        case "Mo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        // Jan, Feb, ..., Dec
        case "MMM":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // J, F, ..., D
        case "MMMMM":
          return match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // January, February, ..., December
        case "MMMM":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMonth(value, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return MonthParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneMonthParser.js
var StandAloneMonthParser = (function(_Parser) {
  _inherits(StandAloneMonthParser2, _Parser);
  var _super = _createSuper(StandAloneMonthParser2);
  function StandAloneMonthParser2() {
    var _this;
    _classCallCheck(this, StandAloneMonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 110);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneMonthParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        return value - 1;
      };
      switch (token) {
        // 1, 2, ..., 12
        case "L":
          return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback3);
        // 01, 02, ..., 12
        case "LL":
          return mapValue(parseNDigits(2, dateString), valueCallback3);
        // 1st, 2nd, ..., 12th
        case "Lo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "month"
          }), valueCallback3);
        // Jan, Feb, ..., Dec
        case "LLL":
          return match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        // J, F, ..., D
        case "LLLLL":
          return match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
        // January, February, ..., December
        case "LLLL":
        default:
          return match2.month(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMonth(value, 1);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return StandAloneMonthParser2;
})(Parser);

// node_modules/date-fns/esm/_lib/setUTCWeek/index.js
function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date2, options) - week;
  date2.setUTCDate(date2.getUTCDate() - diff * 7);
  return date2;
}

// node_modules/date-fns/esm/parse/_lib/parsers/LocalWeekParser.js
var LocalWeekParser = (function(_Parser) {
  _inherits(LocalWeekParser2, _Parser);
  var _super = _createSuper(LocalWeekParser2);
  function LocalWeekParser2() {
    var _this;
    _classCallCheck(this, LocalWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
    return _this;
  }
  _createClass(LocalWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "wo":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date2, value, options), options);
    }
  }]);
  return LocalWeekParser2;
})(Parser);

// node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date2 = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date2) - isoWeek;
  date2.setUTCDate(date2.getUTCDate() - diff * 7);
  return date2;
}

// node_modules/date-fns/esm/parse/_lib/parsers/ISOWeekParser.js
var ISOWeekParser = (function(_Parser) {
  _inherits(ISOWeekParser2, _Parser);
  var _super = _createSuper(ISOWeekParser2);
  function ISOWeekParser2() {
    var _this;
    _classCallCheck(this, ISOWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 100);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISOWeekParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "Io":
          return match2.ordinalNumber(dateString, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 53;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      return startOfUTCISOWeek(setUTCISOWeek(date2, value));
    }
  }]);
  return ISOWeekParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DateParser.js
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DateParser = (function(_Parser) {
  _inherits(DateParser2, _Parser);
  var _super = _createSuper(DateParser2);
  function DateParser2() {
    var _this;
    _classCallCheck(this, DateParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subPriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DateParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, dateString);
        case "do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(date2, value) {
      var year = date2.getUTCFullYear();
      var isLeapYear2 = isLeapYearIndex(year);
      var month = date2.getUTCMonth();
      if (isLeapYear2) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCDate(value);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return DateParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DayOfYearParser.js
var DayOfYearParser = (function(_Parser) {
  _inherits(DayOfYearParser2, _Parser);
  var _super = _createSuper(DayOfYearParser2);
  function DayOfYearParser2() {
    var _this;
    _classCallCheck(this, DayOfYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "subpriority", 1);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayOfYearParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case "Do":
          return match2.ordinalNumber(dateString, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(date2, value) {
      var year = date2.getUTCFullYear();
      var isLeapYear2 = isLeapYearIndex(year);
      if (isLeapYear2) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMonth(0, value);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return DayOfYearParser2;
})(Parser);

// node_modules/date-fns/esm/_lib/setUTCDay/index.js
function setUTCDay(dirtyDate, dirtyDay, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions3 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions3.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions3.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date2 = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date2.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date2.setUTCDate(date2.getUTCDate() + diff);
  return date2;
}

// node_modules/date-fns/esm/parse/_lib/parsers/DayParser.js
var DayParser = (function(_Parser) {
  _inherits(DayParser2, _Parser);
  var _super = _createSuper(DayParser2);
  function DayParser2() {
    var _this;
    _classCallCheck(this, DayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(DayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        // Tue
        case "E":
        case "EE":
        case "EEE":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // T
        case "EEEEE":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // Tu
        case "EEEEEE":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // Tuesday
        case "EEEE":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value, options) {
      date2 = setUTCDay(date2, value, options);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return DayParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/LocalDayParser.js
var LocalDayParser = (function(_Parser) {
  _inherits(LocalDayParser2, _Parser);
  var _super = _createSuper(LocalDayParser2);
  function LocalDayParser2() {
    var _this;
    _classCallCheck(this, LocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
    return _this;
  }
  _createClass(LocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        // 3
        case "e":
        case "ee":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        // 3rd
        case "eo":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        // Tue
        case "eee":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // T
        case "eeeee":
          return match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // Tu
        case "eeeeee":
          return match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
        // Tuesday
        case "eeee":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value, options) {
      date2 = setUTCDay(date2, value, options);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return LocalDayParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/StandAloneLocalDayParser.js
var StandAloneLocalDayParser = (function(_Parser) {
  _inherits(StandAloneLocalDayParser2, _Parser);
  var _super = _createSuper(StandAloneLocalDayParser2);
  function StandAloneLocalDayParser2() {
    var _this;
    _classCallCheck(this, StandAloneLocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
    return _this;
  }
  _createClass(StandAloneLocalDayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2, options) {
      var valueCallback3 = function valueCallback4(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        // 3
        case "c":
        case "cc":
          return mapValue(parseNDigits(token.length, dateString), valueCallback3);
        // 3rd
        case "co":
          return mapValue(match2.ordinalNumber(dateString, {
            unit: "day"
          }), valueCallback3);
        // Tue
        case "ccc":
          return match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        // T
        case "ccccc":
          return match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        // Tu
        case "cccccc":
          return match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
        // Tuesday
        case "cccc":
        default:
          return match2.day(dateString, {
            width: "wide",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "short",
            context: "standalone"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "standalone"
          });
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 6;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value, options) {
      date2 = setUTCDay(date2, value, options);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return StandAloneLocalDayParser2;
})(Parser);

// node_modules/date-fns/esm/_lib/setUTCISODay/index.js
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date2 = toDate(dirtyDate);
  var currentDay = date2.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date2.setUTCDate(date2.getUTCDate() + diff);
  return date2;
}

// node_modules/date-fns/esm/parse/_lib/parsers/ISODayParser.js
var ISODayParser = (function(_Parser) {
  _inherits(ISODayParser2, _Parser);
  var _super = _createSuper(ISODayParser2);
  function ISODayParser2() {
    var _this;
    _classCallCheck(this, ISODayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 90);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
    return _this;
  }
  _createClass(ISODayParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      var valueCallback3 = function valueCallback4(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        // 2
        case "i":
        case "ii":
          return parseNDigits(token.length, dateString);
        // 2nd
        case "io":
          return match2.ordinalNumber(dateString, {
            unit: "day"
          });
        // Tue
        case "iii":
          return mapValue(match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        // T
        case "iiiii":
          return mapValue(match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        // Tu
        case "iiiiii":
          return mapValue(match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
        // Tuesday
        case "iiii":
        default:
          return mapValue(match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }), valueCallback3);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 7;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2 = setUTCISODay(date2, value);
      date2.setUTCHours(0, 0, 0, 0);
      return date2;
    }
  }]);
  return ISODayParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/AMPMParser.js
var AMPMParser = (function(_Parser) {
  _inherits(AMPMParser2, _Parser);
  var _super = _createSuper(AMPMParser2);
  function AMPMParser2() {
    var _this;
    _classCallCheck(this, AMPMParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date2;
    }
  }]);
  return AMPMParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/AMPMMidnightParser.js
var AMPMMidnightParser = (function(_Parser) {
  _inherits(AMPMMidnightParser2, _Parser);
  var _super = _createSuper(AMPMMidnightParser2);
  function AMPMMidnightParser2() {
    var _this;
    _classCallCheck(this, AMPMMidnightParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(AMPMMidnightParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date2;
    }
  }]);
  return AMPMMidnightParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/DayPeriodParser.js
var DayPeriodParser = (function(_Parser) {
  _inherits(DayPeriodParser2, _Parser);
  var _super = _createSuper(DayPeriodParser2);
  function DayPeriodParser2() {
    var _this;
    _classCallCheck(this, DayPeriodParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 80);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "t", "T"]);
    return _this;
  }
  _createClass(DayPeriodParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting"
          });
      }
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date2;
    }
  }]);
  return DayPeriodParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour1to12Parser.js
var Hour1to12Parser = (function(_Parser) {
  _inherits(Hour1to12Parser2, _Parser);
  var _super = _createSuper(Hour1to12Parser2);
  function Hour1to12Parser2() {
    var _this;
    _classCallCheck(this, Hour1to12Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour1to12Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case "ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 12;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      var isPM = date2.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date2.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date2.setUTCHours(0, 0, 0, 0);
      } else {
        date2.setUTCHours(value, 0, 0, 0);
      }
      return date2;
    }
  }]);
  return Hour1to12Parser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour0to23Parser.js
var Hour0to23Parser = (function(_Parser) {
  _inherits(Hour0to23Parser2, _Parser);
  var _super = _createSuper(Hour0to23Parser2);
  function Hour0to23Parser2() {
    var _this;
    _classCallCheck(this, Hour0to23Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0to23Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case "Ho":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 23;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCHours(value, 0, 0, 0);
      return date2;
    }
  }]);
  return Hour0to23Parser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour0To11Parser.js
var Hour0To11Parser = (function(_Parser) {
  _inherits(Hour0To11Parser2, _Parser);
  var _super = _createSuper(Hour0To11Parser2);
  function Hour0To11Parser2() {
    var _this;
    _classCallCheck(this, Hour0To11Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]);
    return _this;
  }
  _createClass(Hour0To11Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case "Ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 11;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      var isPM = date2.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date2.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date2.setUTCHours(value, 0, 0, 0);
      }
      return date2;
    }
  }]);
  return Hour0To11Parser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/Hour1To24Parser.js
var Hour1To24Parser = (function(_Parser) {
  _inherits(Hour1To24Parser2, _Parser);
  var _super = _createSuper(Hour1To24Parser2);
  function Hour1To24Parser2() {
    var _this;
    _classCallCheck(this, Hour1To24Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 70);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
    return _this;
  }
  _createClass(Hour1To24Parser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case "ko":
          return match2.ordinalNumber(dateString, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 1 && value <= 24;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      var hours = value <= 24 ? value % 24 : value;
      date2.setUTCHours(hours, 0, 0, 0);
      return date2;
    }
  }]);
  return Hour1To24Parser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/MinuteParser.js
var MinuteParser = (function(_Parser) {
  _inherits(MinuteParser2, _Parser);
  var _super = _createSuper(MinuteParser2);
  function MinuteParser2() {
    var _this;
    _classCallCheck(this, MinuteParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 60);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(MinuteParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, dateString);
        case "mo":
          return match2.ordinalNumber(dateString, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMinutes(value, 0, 0);
      return date2;
    }
  }]);
  return MinuteParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/SecondParser.js
var SecondParser = (function(_Parser) {
  _inherits(SecondParser2, _Parser);
  var _super = _createSuper(SecondParser2);
  function SecondParser2() {
    var _this;
    _classCallCheck(this, SecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 50);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(SecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token, match2) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, dateString);
        case "so":
          return match2.ordinalNumber(dateString, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, dateString);
      }
    }
  }, {
    key: "validate",
    value: function validate3(_date, value) {
      return value >= 0 && value <= 59;
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCSeconds(value, 0);
      return date2;
    }
  }]);
  return SecondParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/FractionOfSecondParser.js
var FractionOfSecondParser = (function(_Parser) {
  _inherits(FractionOfSecondParser2, _Parser);
  var _super = _createSuper(FractionOfSecondParser2);
  function FractionOfSecondParser2() {
    var _this;
    _classCallCheck(this, FractionOfSecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 30);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]);
    return _this;
  }
  _createClass(FractionOfSecondParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      var valueCallback3 = function valueCallback4(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return mapValue(parseNDigits(token.length, dateString), valueCallback3);
    }
  }, {
    key: "set",
    value: function set2(date2, _flags, value) {
      date2.setUTCMilliseconds(value);
      return date2;
    }
  }]);
  return FractionOfSecondParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneWithZParser.js
var ISOTimezoneWithZParser = (function(_Parser) {
  _inherits(ISOTimezoneWithZParser2, _Parser);
  var _super = _createSuper(ISOTimezoneWithZParser2);
  function ISOTimezoneWithZParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneWithZParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "x"]);
    return _this;
  }
  _createClass(ISOTimezoneWithZParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date2, flags, value) {
      if (flags.timestampIsSet) {
        return date2;
      }
      return new Date(date2.getTime() - value);
    }
  }]);
  return ISOTimezoneWithZParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/ISOTimezoneParser.js
var ISOTimezoneParser = (function(_Parser) {
  _inherits(ISOTimezoneParser2, _Parser);
  var _super = _createSuper(ISOTimezoneParser2);
  function ISOTimezoneParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 10);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "X"]);
    return _this;
  }
  _createClass(ISOTimezoneParser2, [{
    key: "parse",
    value: function parse2(dateString, token) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }
  }, {
    key: "set",
    value: function set2(date2, flags, value) {
      if (flags.timestampIsSet) {
        return date2;
      }
      return new Date(date2.getTime() - value);
    }
  }]);
  return ISOTimezoneParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/TimestampSecondsParser.js
var TimestampSecondsParser = (function(_Parser) {
  _inherits(TimestampSecondsParser2, _Parser);
  var _super = _createSuper(TimestampSecondsParser2);
  function TimestampSecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampSecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 40);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampSecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampSecondsParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/TimestampMillisecondsParser.js
var TimestampMillisecondsParser = (function(_Parser) {
  _inherits(TimestampMillisecondsParser2, _Parser);
  var _super = _createSuper(TimestampMillisecondsParser2);
  function TimestampMillisecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampMillisecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "priority", 20);
    _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*");
    return _this;
  }
  _createClass(TimestampMillisecondsParser2, [{
    key: "parse",
    value: function parse2(dateString) {
      return parseAnyDigitsSigned(dateString);
    }
  }, {
    key: "set",
    value: function set2(_date, _flags, value) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    }
  }]);
  return TimestampMillisecondsParser2;
})(Parser);

// node_modules/date-fns/esm/parse/_lib/parsers/index.js
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};

// node_modules/date-fns/esm/isSameMonth/index.js
function isSameMonth(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
}

// node_modules/date-fns/esm/isSameYear/index.js
function isSameYear(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear();
}

// node_modules/date-fns/esm/isThisMonth/index.js
function isThisMonth(dirtyDate) {
  requiredArgs(1, arguments);
  return isSameMonth(Date.now(), dirtyDate);
}

// node_modules/date-fns/esm/isToday/index.js
function isToday(dirtyDate) {
  requiredArgs(1, arguments);
  return isSameDay(dirtyDate, Date.now());
}

// node_modules/date-fns/esm/parseISO/index.js
function parseISO(argument, options) {
  var _options$additionalDi;
  requiredArgs(1, arguments);
  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
    throw new RangeError("additionalDigits must be 0, 1 or 2");
  }
  if (!(typeof argument === "string" || Object.prototype.toString.call(argument) === "[object String]")) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var dateStrings = splitDateString(argument);
  var date2;
  if (dateStrings.date) {
    var parseYearResult = parseYear2(dateStrings.date, additionalDigits);
    date2 = parseDate(parseYearResult.restDateString, parseYearResult.year);
  }
  if (!date2 || isNaN(date2.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  var timestamp = date2.getTime();
  var time2 = 0;
  var offset;
  if (dateStrings.time) {
    time2 = parseTime(dateStrings.time);
    if (isNaN(time2)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  if (dateStrings.timezone) {
    offset = parseTimezone(dateStrings.timezone);
    if (isNaN(offset)) {
      return /* @__PURE__ */ new Date(NaN);
    }
  } else {
    var dirtyDate = new Date(timestamp + time2);
    var result = /* @__PURE__ */ new Date(0);
    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
    return result;
  }
  return new Date(timestamp + time2 + offset);
}
var patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function splitDateString(dateString) {
  var dateStrings = {};
  var array = dateString.split(patterns.dateTimeDelimiter);
  var timeString;
  if (array.length > 2) {
    return dateStrings;
  }
  if (/:/.test(array[0])) {
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];
    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(dateStrings.date.length, dateString.length);
    }
  }
  if (timeString) {
    var token = patterns.timezone.exec(timeString);
    if (token) {
      dateStrings.time = timeString.replace(token[1], "");
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }
  return dateStrings;
}
function parseYear2(dateString, additionalDigits) {
  var regex = new RegExp("^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)");
  var captures = dateString.match(regex);
  if (!captures) return {
    year: NaN,
    restDateString: ""
  };
  var year = captures[1] ? parseInt(captures[1]) : null;
  var century = captures[2] ? parseInt(captures[2]) : null;
  return {
    year: century === null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length)
  };
}
function parseDate(dateString, year) {
  if (year === null) return /* @__PURE__ */ new Date(NaN);
  var captures = dateString.match(dateRegex);
  if (!captures) return /* @__PURE__ */ new Date(NaN);
  var isWeekDate = !!captures[4];
  var dayOfYear = parseDateUnit(captures[1]);
  var month = parseDateUnit(captures[2]) - 1;
  var day = parseDateUnit(captures[3]);
  var week = parseDateUnit(captures[4]);
  var dayOfWeek = parseDateUnit(captures[5]) - 1;
  if (isWeekDate) {
    if (!validateWeekDate(year, week, dayOfWeek)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    return dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    var date2 = /* @__PURE__ */ new Date(0);
    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    date2.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date2;
  }
}
function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}
function parseTime(timeString) {
  var captures = timeString.match(timeRegex);
  if (!captures) return NaN;
  var hours = parseTimeUnit(captures[1]);
  var minutes = parseTimeUnit(captures[2]);
  var seconds = parseTimeUnit(captures[3]);
  if (!validateTime(hours, minutes, seconds)) {
    return NaN;
  }
  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1e3;
}
function parseTimeUnit(value) {
  return value && parseFloat(value.replace(",", ".")) || 0;
}
function parseTimezone(timezoneString) {
  if (timezoneString === "Z") return 0;
  var captures = timezoneString.match(timezoneRegex);
  if (!captures) return 0;
  var sign2 = captures[1] === "+" ? -1 : 1;
  var hours = parseInt(captures[2]);
  var minutes = captures[3] && parseInt(captures[3]) || 0;
  if (!validateTimezone(hours, minutes)) {
    return NaN;
  }
  return sign2 * (hours * millisecondsInHour + minutes * millisecondsInMinute);
}
function dayOfISOWeekYear(isoWeekYear, week, day) {
  var date2 = /* @__PURE__ */ new Date(0);
  date2.setUTCFullYear(isoWeekYear, 0, 4);
  var fourthOfJanuaryDay = date2.getUTCDay() || 7;
  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date2.setUTCDate(date2.getUTCDate() + diff);
  return date2;
}
var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex2(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function validateDate(year, month, date2) {
  return month >= 0 && month <= 11 && date2 >= 1 && date2 <= (daysInMonths[month] || (isLeapYearIndex2(year) ? 29 : 28));
}
function validateDayOfYearDate(year, dayOfYear) {
  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex2(year) ? 366 : 365);
}
function validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}
function validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }
  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}
function validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}

// node_modules/date-fns/esm/subMonths/index.js
function subMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, -amount);
}

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/ticks.js
function getXTickCount(width) {
  return Math.ceil(width / X_TICK_COUNT_RATIO);
}
function getYTickCount(height) {
  return Math.ceil(height / Y_TICK_COUNT_RATIO);
}
function createXTicks(scale, values2) {
  if (scale.isNumeric()) {
    return scale.d3Scale.ticks(values2);
  } else if (scale.isTime()) {
    const rawTicks = scale.d3Scale.ticks(values2);
    const domain = scale.d3Scale.domain();
    return uniform(rawTicks, domain[domain.length - 1]);
  } else {
    return scale.d3Scale.domain();
  }
}
function createYTicks(scale, values2) {
  const ticks2 = scale.d3Scale.ticks(values2);
  if (scale.scaleType === "log" && ticks2.length > 10) {
    return scale.d3Scale.ticks(3);
  }
  return ticks2;
}
function uniform(ticks2, max3) {
  if (ticks2.length < 3 || !isMixedDayInterval(ticks2)) {
    return ticks2;
  }
  return createTwoDayInterval(ticks2[0], max3);
}
function isMixedDayInterval(ticks2) {
  let oneDayInterval = false;
  let twoDayInterval = false;
  for (let i2 = 1; i2 < ticks2.length; i2++) {
    oneDayInterval = oneDayInterval || isDayInterval(ticks2[i2 - 1], ticks2[i2], 1);
    twoDayInterval = twoDayInterval || isDayInterval(ticks2[i2 - 1], ticks2[i2], 2);
  }
  return oneDayInterval && twoDayInterval;
}
function isDayInterval(a4, b2, difference = 1) {
  return Math.abs(differenceInDays(a4, b2)) === difference;
}
function createTwoDayInterval(start, max3) {
  const result = [];
  let curr = start;
  while (curr < max3) {
    result.push(curr);
    curr = add(curr, { days: 2 });
  }
  return result;
}

// node_modules/@cloudscape-design/components/area-chart/model/utils.js
var EPSILON = 1e-13;
function computeDomainX(series) {
  const xValues = getXValues(series);
  if (xValues.length === 0) {
    return [];
  }
  if (typeof xValues[0] === "string") {
    return uniq(xValues);
  }
  return xValues.reduce(([min3, max3], x3) => [x3 < min3 ? x3 : min3, max3 < x3 ? x3 : max3], [xValues[0], xValues[0]]);
}
function computeDomainY(series, scaleType) {
  let min3 = Number.POSITIVE_INFINITY;
  let max3 = Number.NEGATIVE_INFINITY;
  series.forEach((s4) => {
    if (s4.type === "threshold") {
      min3 = Math.min(min3, s4.y);
      max3 = Math.max(max3, s4.y);
    }
  });
  getXValues(series).forEach((_, xIndex) => {
    var _a2;
    let stackY = scaleType === "linear" ? 0 : EPSILON;
    for (const s4 of series) {
      if (s4.type === "area") {
        stackY = stackY + (((_a2 = s4.data[xIndex]) === null || _a2 === void 0 ? void 0 : _a2.y) || 0);
        min3 = Math.min(min3, stackY);
        max3 = Math.max(max3, stackY);
      }
    }
  });
  if (min3 === Number.POSITIVE_INFINITY) {
    return [];
  }
  if (scaleType === "log" && min3 === 0 && max3 > 1) {
    return [1, max3];
  }
  return [min3, max3];
}
function computePlotPoints(series, xScale, yScale) {
  const xValues = getXValues(series);
  const xy = [];
  const xs = [];
  const sx = [];
  getVisibleData(xValues, xScale).forEach(({ x: x3, scaledX }, xIndex) => {
    let stackY = yScale.scaleType === "linear" ? 0 : EPSILON;
    const points = [];
    series.forEach((s4, sIndex) => {
      var _a2;
      if (s4.type === "threshold") {
        const scaledY = yScale.d3Scale(s4.y) || 0;
        points.push({
          x: x3,
          y0: s4.y,
          y1: s4.y,
          scaled: { x: scaledX, y0: scaledY, y1: scaledY },
          index: { x: xIndex, s: sIndex, y: 0 },
          value: 0
        });
      } else {
        const value = ((_a2 = s4.data[xIndex]) === null || _a2 === void 0 ? void 0 : _a2.y) || 0;
        const y0 = stackY;
        const y1 = stackY + value;
        points.push({
          x: x3,
          y0,
          y1,
          scaled: { x: scaledX, y0: yScale.d3Scale(y0) || 0, y1: yScale.d3Scale(y1) || 0 },
          index: { x: xIndex, s: sIndex, y: 0 },
          value
        });
        stackY = y1;
      }
    });
    points.sort((p1, p2) => p1.y1 - p2.y1).forEach((point5, index) => {
      point5.index.y = index;
      insertIntoMatrix(xy, point5.index.x, point5.index.y, point5);
      insertIntoMatrix(xs, point5.index.x, point5.index.s, point5);
      insertIntoMatrix(sx, point5.index.s, point5.index.x, point5);
    });
  });
  return { xy, xs, sx };
}
function findClosest(sortedArray, target, getter) {
  if (sortedArray.length === 0) {
    return null;
  }
  const isAscending = getter(sortedArray[0]) < getter(sortedArray[sortedArray.length - 1]);
  const compare = (x3) => isAscending ? getter(x3) < target : getter(x3) > target;
  const delta = (x3) => Math.abs(getter(x3) - target);
  let lo = 0;
  let hi = sortedArray.length - 1;
  while (hi - lo > 1) {
    const mid = Math.floor((lo + hi) / 2);
    if (compare(sortedArray[mid])) {
      lo = mid;
    } else {
      hi = mid;
    }
  }
  return delta(sortedArray[lo]) < delta(sortedArray[hi]) ? sortedArray[lo] : sortedArray[hi];
}
function isSeriesValid(series) {
  var _a2;
  const sampleXValues = getXValues(series);
  for (const s4 of series) {
    if (s4.type === "area") {
      for (let i2 = 0; i2 < Math.max(s4.data.length, sampleXValues.length); i2++) {
        if (((_a2 = s4.data[i2]) === null || _a2 === void 0 ? void 0 : _a2.x) !== sampleXValues[i2]) {
          return false;
        }
      }
    }
  }
  return true;
}
function getXValues(series) {
  for (const s4 of series) {
    if (s4.type === "area") {
      return s4.data.map(({ x: x3 }) => x3);
    }
  }
  return [];
}
function getVisibleData(data, xScale) {
  const scaledOffsetX = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;
  const visibleData = [];
  for (const x3 of data) {
    const scaledX = xScale.d3Scale(x3);
    if (scaledX !== void 0) {
      visibleData.push({ x: x3, scaledX: scaledX + scaledOffsetX });
    }
  }
  return visibleData;
}
function insertIntoMatrix(matrix, row, col, value) {
  if (!matrix[row]) {
    matrix[row] = [];
  }
  matrix[row][col] = value;
}
function uniq(arr) {
  const set2 = /* @__PURE__ */ new Set();
  const uniqArray = [];
  for (const value of arr) {
    if (!set2.has(value)) {
      set2.add(value);
      uniqArray.push(value);
    }
  }
  return uniqArray;
}

// node_modules/@cloudscape-design/components/area-chart/model/compute-chart-props.js
function computeChartProps({ isRtl, series, xDomain: externalXDomain, yDomain: externalYDomain, xScaleType, yScaleType, height, width }) {
  const xDomain = externalXDomain ? [...externalXDomain] : computeDomainX(series);
  const xTickCount = getXTickCount(width);
  const xScale = new ChartScale(xScaleType, xDomain, !isRtl ? [0, width] : [width, 0]);
  const xTicks = xScale.domain.length > 0 ? createXTicks(xScale, xTickCount) : [];
  const yDomain = externalYDomain || computeDomainY(series, yScaleType);
  const yTickCount = getYTickCount(height);
  const yScale = new NumericChartScale(yScaleType, yDomain, [height, 0], externalYDomain ? null : yTickCount);
  const yTicks = createYTicks(yScale, yTickCount);
  const plot = computePlotPoints(series, xScale, yScale);
  return { xDomain, yDomain, xScale, yScale, xTicks, yTicks, plot };
}

// node_modules/@cloudscape-design/components/internal/styles/colors.js
var categoryPalette = [
  colorChartsPaletteCategorical1,
  colorChartsPaletteCategorical2,
  colorChartsPaletteCategorical3,
  colorChartsPaletteCategorical4,
  colorChartsPaletteCategorical5,
  colorChartsPaletteCategorical6,
  colorChartsPaletteCategorical7,
  colorChartsPaletteCategorical8,
  colorChartsPaletteCategorical9,
  colorChartsPaletteCategorical10,
  colorChartsPaletteCategorical11,
  colorChartsPaletteCategorical12,
  colorChartsPaletteCategorical13,
  colorChartsPaletteCategorical14,
  colorChartsPaletteCategorical15,
  colorChartsPaletteCategorical16,
  colorChartsPaletteCategorical17,
  colorChartsPaletteCategorical18,
  colorChartsPaletteCategorical19,
  colorChartsPaletteCategorical20,
  colorChartsPaletteCategorical21,
  colorChartsPaletteCategorical22,
  colorChartsPaletteCategorical23,
  colorChartsPaletteCategorical24,
  colorChartsPaletteCategorical25,
  colorChartsPaletteCategorical26,
  colorChartsPaletteCategorical27,
  colorChartsPaletteCategorical28,
  colorChartsPaletteCategorical29,
  colorChartsPaletteCategorical30,
  colorChartsPaletteCategorical31,
  colorChartsPaletteCategorical32,
  colorChartsPaletteCategorical33,
  colorChartsPaletteCategorical34,
  colorChartsPaletteCategorical35,
  colorChartsPaletteCategorical36,
  colorChartsPaletteCategorical37,
  colorChartsPaletteCategorical38,
  colorChartsPaletteCategorical39,
  colorChartsPaletteCategorical40,
  colorChartsPaletteCategorical41,
  colorChartsPaletteCategorical42,
  colorChartsPaletteCategorical43,
  colorChartsPaletteCategorical44,
  colorChartsPaletteCategorical45,
  colorChartsPaletteCategorical46,
  colorChartsPaletteCategorical47,
  colorChartsPaletteCategorical48,
  colorChartsPaletteCategorical49,
  colorChartsPaletteCategorical50
];

// node_modules/@cloudscape-design/components/internal/utils/create-category-color-scale.js
function createCategoryColorScale(items, isThreshold = () => false, getOwnColor = () => null) {
  const colors = [];
  let categoryIndex = 0;
  for (const it of items) {
    const ownColor = getOwnColor(it);
    const defaultColor = isThreshold(it) ? colorChartsThresholdNeutral : categoryPalette[categoryIndex % categoryPalette.length];
    colors.push(ownColor || defaultColor);
    if (!isThreshold(it) && !ownColor) {
      categoryIndex++;
    }
  }
  return colors;
}

// node_modules/@cloudscape-design/components/area-chart/model/create-series-decorator.js
function createSeriesDecorator(externalSeries) {
  const colorScale = createCategoryColorScale(externalSeries, (s4) => s4.type === "threshold", (s4) => s4.color || null);
  const decorateSeries = (s4, index) => {
    const title = s4.title;
    const color2 = colorScale[index];
    const markerType = s4.type === "area" ? "hollow-rectangle" : "dashed";
    const formatValue2 = s4.type === "threshold" ? () => s4.valueFormatter ? s4.valueFormatter(s4.y) : s4.y : (y4, x3) => s4.valueFormatter ? s4.valueFormatter(y4, x3) : y4;
    return { series: s4, title, color: color2, markerType, formatValue: formatValue2 };
  };
  const mapping = externalSeries.reduce((map3, series, index) => {
    map3.set(series, decorateSeries(series, index));
    return map3;
  }, /* @__PURE__ */ new Map());
  const seriesDecorator = (series) => mapping.get(series) || decorateSeries(series, externalSeries.length);
  return seriesDecorator;
}

// node_modules/@cloudscape-design/components/area-chart/model/interactions-store.js
var initialState = Object.freeze({
  highlightedX: null,
  highlightedPoint: null,
  highlightedSeries: null,
  legendSeries: null,
  isPopoverPinned: false
});
var InteractionsStore = class extends AsyncStore {
  constructor(series, plot) {
    super(initialState);
    this.series = series;
    this.plot = plot;
  }
  highlightPoint(point5) {
    this.set((state) => Object.assign(Object.assign({}, state), { highlightedX: this.plot.xy[point5.index.x], highlightedPoint: point5, highlightedSeries: this.series[point5.index.s], legendSeries: this.series[point5.index.s] }));
  }
  highlightX(points) {
    this.set((state) => Object.assign(Object.assign({}, state), { highlightedX: points, highlightedPoint: null, highlightedSeries: null, legendSeries: null }));
  }
  highlightFirstPoint() {
    this.set((state) => {
      const series = state.legendSeries || state.highlightedSeries;
      const firstSeriesPoint = series && this._getFirstSeriesPoint(series);
      const point5 = state.highlightedPoint || firstSeriesPoint || this.plot.sx[0][0];
      return Object.assign(Object.assign({}, state), { highlightedX: this.plot.xy[point5.index.x], highlightedPoint: point5, highlightedSeries: this.series[point5.index.s], legendSeries: this.series[point5.index.s] });
    });
  }
  highlightSeries(s4) {
    this.set((state) => Object.assign(Object.assign({}, state), { highlightedSeries: s4, legendSeries: s4 }));
  }
  clearHighlight() {
    this.set((state) => Object.assign(Object.assign({}, state), { highlightedX: null, highlightedPoint: null, highlightedSeries: null }));
  }
  clearHighlightedLegend() {
    this.set((state) => Object.assign(Object.assign({}, state), { legendSeries: null }));
  }
  clearState() {
    this.set(() => initialState);
  }
  pinPopover() {
    this.set((state) => Object.assign(Object.assign({}, state), { isPopoverPinned: true }));
  }
  unpinPopover() {
    this.set((state) => Object.assign(Object.assign({}, state), { isPopoverPinned: false }));
  }
  togglePopoverPin() {
    this.set((state) => Object.assign(Object.assign({}, state), { isPopoverPinned: !state.isPopoverPinned }));
  }
  _getFirstSeriesPoint(s4) {
    const seriesIndex = this.series.indexOf(s4);
    const [firstSeriesPoint] = this.plot.sx[seriesIndex] || [];
    return firstSeriesPoint || null;
  }
};

// node_modules/@cloudscape-design/components/area-chart/model/use-chart-model.js
var MAX_HOVER_MARGIN = 6;
var SVG_HOVER_THROTTLE = 25;
var POPOVER_DEADZONE = 12;
function useChartModel({ isRtl, fitHeight, externalSeries: allSeries, visibleSeries: series, setVisibleSeries, highlightedSeries, setHighlightedSeries, xDomain, yDomain, xScaleType, yScaleType, height: explicitHeight, width, popoverRef, statusType }) {
  var _a2;
  const plotRef = (0, import_react259.useRef)(null);
  const containerRef = (0, import_react259.useRef)(null);
  const verticalMarkerRef = (0, import_react259.useRef)(null);
  const plotMeasureRef = (0, import_react259.useRef)(null);
  const hasVisibleSeries = series.length > 0;
  const height = (_a2 = useHeightMeasure(() => plotMeasureRef.current, !fitHeight, [hasVisibleSeries, statusType])) !== null && _a2 !== void 0 ? _a2 : explicitHeight;
  const stableSetVisibleSeries = useStableCallback(setVisibleSeries);
  const model = (0, import_react259.useMemo)(() => {
    const computed = computeChartProps({
      isRtl,
      series,
      xDomain,
      yDomain,
      xScaleType,
      yScaleType,
      height,
      width
    });
    const interactions = new InteractionsStore(series, computed.plot);
    const containsMultipleSeries = interactions.series.length > 1;
    const getInternalSeries = createSeriesDecorator(allSeries);
    const isMouseOverPopover = (clientX, clientY) => {
      var _a3;
      if ((_a3 = popoverRef.current) === null || _a3 === void 0 ? void 0 : _a3.firstChild) {
        const popoverPosition = popoverRef.current.firstChild.getBoundingClientRect();
        if (clientX > popoverPosition.x - POPOVER_DEADZONE && clientX < popoverPosition.x + popoverPosition.width + POPOVER_DEADZONE && clientY > popoverPosition.y - POPOVER_DEADZONE && clientY < popoverPosition.y + popoverPosition.height + POPOVER_DEADZONE) {
          return true;
        }
      }
      return false;
    };
    const onSVGMouseMoveThrottled = throttle((clientX, clientY) => {
      if (interactions.get().isPopoverPinned || !plotRef.current || interactions.plot.xy.length === 0 || isMouseOverPopover(clientX, clientY)) {
        return;
      }
      const svgRect = plotRef.current.svg.getBoundingClientRect();
      const offsetX = clientX - svgRect.left;
      const offsetY = clientY - svgRect.top;
      const closestX = findClosest(interactions.plot.xy, offsetX, (xPoints) => xPoints[0].scaled.x);
      if (closestX === null) {
        return;
      }
      const closestPoint = findClosest(closestX, offsetY, (point5) => point5.scaled.y1);
      if (closestPoint === null) {
        return;
      }
      if (Math.abs(offsetX - closestPoint.scaled.x) < MAX_HOVER_MARGIN && Math.abs(offsetY - closestPoint.scaled.y1) < MAX_HOVER_MARGIN) {
        interactions.highlightPoint(closestPoint);
      } else {
        interactions.highlightX(closestX);
      }
    }, SVG_HOVER_THROTTLE);
    const onSVGMouseMove = ({ clientX, clientY }) => onSVGMouseMoveThrottled(clientX, clientY);
    const onSVGMouseOut = (event) => {
      onSVGMouseMoveThrottled.cancel();
      if (interactions.get().isPopoverPinned || isMouseOverPopover(event.clientX, event.clientY)) {
        return;
      }
      if (!nodeContains(plotRef.current.svg, event.relatedTarget)) {
        interactions.clearHighlightedLegend();
        interactions.clearHighlight();
      }
    };
    const onSVGMouseDown = (event) => {
      interactions.togglePopoverPin();
      event.preventDefault();
    };
    const moveWithinXAxis = (direction) => {
      if (interactions.get().highlightedPoint) {
        return moveWithinSeries(direction);
      } else if (containsMultipleSeries) {
        const { highlightedX } = interactions.get();
        if (highlightedX) {
          const currentXIndex = highlightedX[0].index.x;
          const nextXIndex = circleIndex2(currentXIndex + direction, [0, interactions.plot.xy.length - 1]);
          interactions.highlightX(interactions.plot.xy[nextXIndex]);
        }
      }
    };
    const moveWithinSeries = (direction) => {
      const point5 = interactions.get().highlightedPoint;
      if (!point5) {
        return;
      }
      const sIndex = point5.index.s;
      const xIndex = circleIndex2(point5.index.x + direction, [0, interactions.plot.xs.length - 1]);
      interactions.highlightPoint(interactions.plot.xs[xIndex][sIndex]);
    };
    const moveBetweenSeries = (direction) => {
      const point5 = interactions.get().highlightedPoint;
      if (!point5) {
        const { highlightedX } = interactions.get();
        if (highlightedX) {
          const xIndex2 = highlightedX[0].index.x;
          const points = interactions.plot.xy[xIndex2];
          const yIndex = direction === 1 ? 0 : points.length - 1;
          interactions.highlightPoint(points[yIndex]);
        }
        return;
      }
      const xIndex = point5.index.x;
      const currentYIndex = point5.index.y;
      if (containsMultipleSeries && (currentYIndex === 0 && direction === -1 || currentYIndex === interactions.plot.xy[xIndex].length - 1 && direction === 1)) {
        interactions.highlightX(interactions.plot.xy[xIndex]);
      } else {
        const nextYIndex = circleIndex2(currentYIndex + direction, [0, interactions.plot.xy[xIndex].length - 1]);
        interactions.highlightPoint(interactions.plot.xy[xIndex][nextYIndex]);
      }
    };
    const onSVGKeyDown = (event) => {
      const keyCode = event.keyCode;
      if (keyCode !== KeyCode2.up && keyCode !== KeyCode2.right && keyCode !== KeyCode2.down && keyCode !== KeyCode2.left && keyCode !== KeyCode2.space && keyCode !== KeyCode2.enter) {
        return;
      }
      event.preventDefault();
      if (interactions.get().isPopoverPinned) {
        return;
      }
      handleKey2(event, {
        onBlockEnd: () => moveBetweenSeries(-1),
        onBlockStart: () => moveBetweenSeries(1),
        onInlineStart: () => moveWithinXAxis(-1),
        onInlineEnd: () => moveWithinXAxis(1),
        onActivate: () => interactions.pinPopover()
      });
    };
    const highlightFirstX = () => {
      interactions.highlightX(interactions.plot.xy[0]);
    };
    const onApplicationFocus = (_event, trigger) => {
      if (trigger === "keyboard") {
        const { highlightedX, highlightedPoint, highlightedSeries: highlightedSeries2, legendSeries } = interactions.get();
        if (containsMultipleSeries && !highlightedX && !highlightedPoint && !highlightedSeries2 && !legendSeries) {
          highlightFirstX();
        } else if (!highlightedX) {
          interactions.highlightFirstPoint();
        }
      }
    };
    const onApplicationBlur = (event) => {
      if (!nodeBelongs2(containerRef.current, event.relatedTarget) && !interactions.get().isPopoverPinned) {
        interactions.clearHighlight();
      }
    };
    const onFilterSeries = (series2) => {
      stableSetVisibleSeries(series2);
    };
    const onLegendHighlight = (series2) => {
      interactions.highlightSeries(series2);
    };
    const onPopoverDismiss = (outsideClick) => {
      interactions.unpinPopover();
      if (!outsideClick) {
        setTimeout(() => {
          if (interactions.get().highlightedPoint || interactions.get().highlightedX) {
            plotRef.current.focusApplication();
          } else {
            interactions.clearHighlight();
            plotRef.current.focusPlot();
          }
        }, 0);
      }
    };
    const onContainerBlur = () => {
      interactions.clearState();
    };
    const onDocumentKeyDown = (event) => {
      if (event.key === "Escape") {
        interactions.clearHighlight();
        interactions.clearHighlightedLegend();
      }
    };
    const onPopoverLeave = (event) => {
      if (nodeContains(plotRef.current.svg, event.relatedTarget) || interactions.get().isPopoverPinned) {
        return;
      }
      interactions.clearHighlight();
      interactions.clearHighlightedLegend();
    };
    return {
      width,
      height,
      series,
      allSeries,
      getInternalSeries,
      computed,
      interactions,
      handlers: {
        onSVGMouseMove,
        onSVGMouseOut,
        onSVGMouseDown,
        onSVGKeyDown,
        onApplicationFocus,
        onApplicationBlur,
        onFilterSeries,
        onLegendHighlight,
        onPopoverDismiss,
        onContainerBlur,
        onDocumentKeyDown,
        onPopoverLeave
      },
      refs: {
        plot: plotRef,
        plotMeasure: plotMeasureRef,
        container: containerRef,
        verticalMarker: verticalMarkerRef,
        popoverRef
      }
    };
  }, [
    allSeries,
    series,
    xDomain,
    yDomain,
    xScaleType,
    yScaleType,
    height,
    width,
    stableSetVisibleSeries,
    popoverRef,
    isRtl
  ]);
  useReaction(model.interactions, (state) => state.highlightedSeries, setHighlightedSeries);
  (0, import_react259.useEffect)(() => {
    if (highlightedSeries !== model.interactions.get().highlightedSeries) {
      model.interactions.highlightSeries(highlightedSeries);
    }
  }, [model, highlightedSeries]);
  return model;
}

// node_modules/@cloudscape-design/components/area-chart/model/use-filter-props.js
var import_react260 = __toESM(require_react());
function useFilterProps(series, controlledVisibleSeries, controlledOnVisibleChange) {
  const [visibleSeries = [], setVisibleSeriesState] = useControllable2(controlledVisibleSeries, controlledOnVisibleChange, series, {
    componentName: "AreaChart",
    controlledProp: "visibleSeries",
    changeHandler: "onFilterChange"
  });
  const setVisibleSeries = (0, import_react260.useCallback)((selectedSeries) => {
    setVisibleSeriesState(selectedSeries);
    fireNonCancelableEvent(controlledOnVisibleChange, { visibleSeries: selectedSeries });
  }, [controlledOnVisibleChange, setVisibleSeriesState]);
  (0, import_react260.useEffect)(() => {
    const newVisibleSeries = visibleSeries.filter((s4) => series.indexOf(s4) !== -1);
    if (newVisibleSeries.length !== visibleSeries.length) {
      setVisibleSeries(newVisibleSeries);
    }
  }, [series, visibleSeries, setVisibleSeries]);
  return [visibleSeries, setVisibleSeries];
}

// node_modules/@cloudscape-design/components/area-chart/model/use-highlight-props.js
var import_react261 = __toESM(require_react());
function useHighlightProps(series, controlledHighlightedSeries, controlledOnHighlightChange) {
  const [highlightedSeries = null, setHighlightedSeries] = useControllable2(controlledHighlightedSeries, controlledOnHighlightChange, null, {
    componentName: "AreaChart",
    controlledProp: "highlightedSeries",
    changeHandler: "onHighlightChange"
  });
  const notifyHighlightedSeries = (0, import_react261.useCallback)((s4) => {
    fireNonCancelableEvent(controlledOnHighlightChange, { highlightedSeries: s4 });
  }, [controlledOnHighlightChange]);
  (0, import_react261.useEffect)(() => {
    if (controlledHighlightedSeries) {
      const highlightedSeriesIndex = series.indexOf(controlledHighlightedSeries);
      if (highlightedSeriesIndex === -1) {
        setHighlightedSeries(null);
        notifyHighlightedSeries(null);
      }
    }
  }, [series, controlledHighlightedSeries, setHighlightedSeries, notifyHighlightedSeries]);
  return [highlightedSeries, notifyHighlightedSeries];
}

// node_modules/@cloudscape-design/components/area-chart/internal.js
function InternalAreaChart(_a2) {
  var { fitHeight, height, xScaleType, yScaleType, xDomain, yDomain, xTickFormatter, yTickFormatter, detailTotalFormatter, highlightedSeries: controlledHighlightedSeries, visibleSeries: controlledVisibleSeries, series: externalSeries, onFilterChange: controlledOnVisibleChange, onHighlightChange: controlledOnHighlightChange, i18nStrings, ariaLabel, ariaLabelledby, ariaDescription, xTitle, yTitle, hideFilter, additionalFilters, hideLegend, legendTitle, statusType, detailPopoverSize, detailPopoverFooter, empty, noMatch, errorText, loadingText, recoveryText, onRecoveryClick, __internalRootRef } = _a2, props2 = __rest(_a2, ["fitHeight", "height", "xScaleType", "yScaleType", "xDomain", "yDomain", "xTickFormatter", "yTickFormatter", "detailTotalFormatter", "highlightedSeries", "visibleSeries", "series", "onFilterChange", "onHighlightChange", "i18nStrings", "ariaLabel", "ariaLabelledby", "ariaDescription", "xTitle", "yTitle", "hideFilter", "additionalFilters", "hideLegend", "legendTitle", "statusType", "detailPopoverSize", "detailPopoverFooter", "empty", "noMatch", "errorText", "loadingText", "recoveryText", "onRecoveryClick", "__internalRootRef"]);
  const baseProps = getBaseProps(props2);
  const containerRef = (0, import_react262.useRef)(null);
  const popoverRef = (0, import_react262.useRef)(null);
  if (isDevelopment2) {
    (0, import_react262.useEffect)(() => {
      if (!isSeriesValid(externalSeries)) {
        warnOnce("AreaChart", "The `series` property violates the component's constraints: all `area` series must have `data` arrays of the same length and with the same x-values.");
      }
    }, [externalSeries]);
  }
  const [width, setWidth] = (0, import_react262.useState)(0);
  const [visibleSeries, setVisibleSeries] = useFilterProps(externalSeries, controlledVisibleSeries, controlledOnVisibleChange);
  const [highlightedSeries, setHighlightedSeries] = useHighlightProps(externalSeries, controlledHighlightedSeries, controlledOnHighlightChange);
  const isRtl = containerRef.current ? getIsRtl(containerRef.current) : false;
  const model = useChartModel({
    isRtl,
    fitHeight,
    externalSeries,
    visibleSeries,
    setVisibleSeries,
    highlightedSeries,
    setHighlightedSeries,
    xDomain,
    yDomain,
    xScaleType,
    yScaleType,
    height,
    width,
    popoverRef,
    statusType
  });
  const { isEmpty, isNoMatch, showChart } = getChartStatus({
    externalData: externalSeries,
    visibleData: visibleSeries,
    statusType
  });
  const showFilters = statusType === "finished" && (!isEmpty || isNoMatch) && (additionalFilters || !hideFilter);
  const showLegend = !hideLegend && !isEmpty && statusType === "finished";
  const reserveLegendSpace = !showChart && !hideLegend;
  const reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);
  (0, import_react262.useEffect)(() => {
    const onKeyDown = model.handlers.onDocumentKeyDown;
    document.addEventListener("keydown", onKeyDown);
    return () => document.removeEventListener("keydown", onKeyDown);
  }, [model.handlers.onDocumentKeyDown]);
  const onBlur = (event) => {
    if (event.relatedTarget && !nodeBelongs2(containerRef.current, event.relatedTarget)) {
      model.handlers.onContainerBlur();
    }
  };
  const mergedRef = useMergeRefs(containerRef, __internalRootRef);
  return import_react262.default.createElement(ChartWrapper, Object.assign({ ref: mergedRef }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default77.root), fitHeight: !!fitHeight, contentMinHeight: height, defaultFilter: showFilters && !hideFilter ? import_react262.default.createElement(area_chart_filter_default, { model, filterLabel: i18nStrings.filterLabel, filterPlaceholder: i18nStrings.filterPlaceholder, filterSelectedAriaLabel: i18nStrings.filterSelectedAriaLabel }) : null, additionalFilters: showFilters ? additionalFilters : null, reserveFilterSpace: !!reserveFilterSpace, reserveLegendSpace: !!reserveLegendSpace, chartStatus: import_react262.default.createElement(ChartStatusContainer, { isEmpty, isNoMatch, showChart, statusType, empty, noMatch, loadingText, errorText, recoveryText, onRecoveryClick }), chart: showChart ? import_react262.default.createElement(chart_container_default, { model, autoWidth: setWidth, detailPopoverSize, detailPopoverFooter, xTitle, yTitle, xTickFormatter, yTickFormatter, detailTotalFormatter, ariaLabel, ariaLabelledby, ariaDescription, i18nStrings, fitHeight, hasFilters: !!showFilters, minHeight: height, isRTL: isRtl }) : null, legend: showLegend ? import_react262.default.createElement(area_chart_legend_default, { plotContainerRef: containerRef, model, legendTitle, ariaLabel: i18nStrings.legendAriaLabel }) : null, onBlur }));
}

// node_modules/@cloudscape-design/components/area-chart/index.js
function AreaChart(_a2) {
  var { height = 500, xScaleType = "linear", yScaleType = "linear", statusType = "finished", detailPopoverSize = "medium", i18nStrings = {} } = _a2, props2 = __rest(_a2, ["height", "xScaleType", "yScaleType", "statusType", "detailPopoverSize", "i18nStrings"]);
  const baseComponentProps = useBaseComponent("AreaChart", {
    props: {
      detailPopoverSize,
      hideLegend: props2.hideLegend,
      hideFilter: props2.hideFilter,
      fitHeight: props2.fitHeight,
      xScaleType,
      yScaleType
    }
  });
  return import_react263.default.createElement(InternalAreaChart, Object.assign({ height, xScaleType, yScaleType, statusType, detailPopoverSize, i18nStrings }, props2, baseComponentProps));
}
applyDisplayName(AreaChart, "AreaChart");
var area_chart_default = AreaChart;

// node_modules/@cloudscape-design/components/attribute-editor/index.js
var import_react267 = __toESM(require_react());

// node_modules/@cloudscape-design/components/attribute-editor/internal.js
var import_react266 = __toESM(require_react());

// node_modules/@cloudscape-design/components/attribute-editor/additional-info.js
var import_react264 = __toESM(require_react());

// node_modules/@cloudscape-design/components/attribute-editor/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/attribute-editor/styles.scoped.css";
var styles_css_default97 = {
  "empty-appear": "awsui_empty-appear_n4qlp_1d9g0_153",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_n4qlp_1d9g0_1",
  "root": "awsui_root_n4qlp_1d9g0_175",
  "empty": "awsui_empty_n4qlp_1d9g0_153",
  "row": "awsui_row_n4qlp_1d9g0_218",
  "divider": "awsui_divider_n4qlp_1d9g0_222",
  "row-control": "awsui_row-control_n4qlp_1d9g0_227",
  "field": "awsui_field_n4qlp_1d9g0_231",
  "additional-info": "awsui_additional-info_n4qlp_1d9g0_235",
  "add-row": "awsui_add-row_n4qlp_1d9g0_281",
  "add-button": "awsui_add-button_n4qlp_1d9g0_285",
  "remove-button-container": "awsui_remove-button-container_n4qlp_1d9g0_289",
  "remove-button-field-padding": "awsui_remove-button-field-padding_n4qlp_1d9g0_293",
  "remove-button-own-row": "awsui_remove-button-own-row_n4qlp_1d9g0_297",
  "remove-button": "awsui_remove-button_n4qlp_1d9g0_289"
};

// node_modules/@cloudscape-design/components/attribute-editor/additional-info.js
var AdditionalInfo = ({ children: children2, id }) => import_react264.default.createElement(
  internal_default2,
  { "data-testid": "info-live-region" },
  import_react264.default.createElement("div", { id, className: styles_css_default97["additional-info"] }, children2)
);

// node_modules/@cloudscape-design/components/attribute-editor/grid-defaults.js
var gridDefaults = {
  1: [
    {
      breakpoint: "xxs",
      rows: [[3]]
    },
    {
      rows: [[1]],
      removeButton: {
        ownRow: true
      }
    }
  ],
  2: [
    {
      breakpoint: "xs",
      rows: [[3, 3]],
      removeButton: {
        width: 2
      }
    },
    {
      breakpoint: "xxs",
      rows: [[1, 1]],
      removeButton: {
        ownRow: true
      }
    },
    {
      rows: [[1], [1]]
    }
  ],
  3: [
    {
      breakpoint: "xs",
      rows: [[3, 3, 3]],
      removeButton: {
        width: 3
      }
    },
    {
      breakpoint: "xxs",
      rows: [[1, 1], [1]],
      removeButton: {
        ownRow: true
      }
    },
    {
      rows: [[1], [1], [1]]
    }
  ],
  4: [
    {
      breakpoint: "xs",
      rows: [[3, 3, 3, 3]],
      removeButton: {
        width: 4
      }
    },
    {
      breakpoint: "xxs",
      rows: [
        [1, 1],
        [1, 1]
      ]
    },
    {
      rows: [[1], [1], [1], [1]]
    }
  ],
  5: [
    {
      breakpoint: "s",
      rows: [[3, 3, 3, 3, 3]],
      removeButton: {
        width: 5
      }
    },
    {
      breakpoint: "xs",
      rows: [
        [1, 1, 1],
        [1, 1]
      ]
    },
    {
      breakpoint: "xxs",
      rows: [[1, 1], [1, 1], [1]]
    },
    {
      rows: [[1], [1], [1], [1], [1]]
    }
  ],
  6: [
    {
      breakpoint: "s",
      rows: [[3, 3, 3, 3, 3, 3]],
      removeButton: {
        width: 6
      }
    },
    {
      breakpoint: "xs",
      rows: [
        [1, 1, 1],
        [1, 1, 1]
      ]
    },
    {
      breakpoint: "xxs",
      rows: [
        [1, 1],
        [1, 1],
        [1, 1]
      ]
    },
    {
      rows: [[1], [1], [1], [1], [1], [1]]
    }
  ]
};

// node_modules/@cloudscape-design/components/attribute-editor/row.js
var import_react265 = __toESM(require_react());

// node_modules/@cloudscape-design/components/attribute-editor/utils.js
function getItemGridColumns(layout, itemIndex) {
  let i2 = 0;
  for (const row of layout.rows) {
    let gridColumnStart = 1;
    for (const columnWidth of row) {
      if (i2 === itemIndex) {
        return { gridColumnStart, gridColumnEnd: gridColumnStart + columnWidth };
      } else {
        gridColumnStart += columnWidth;
      }
      i2++;
    }
  }
  return { gridColumnStart: 1, gridColumnEnd: 1 };
}
function getRemoveButtonGridColumns(layout, previousGridColumnEnd) {
  var _a2, _b;
  const maxColumns = layout.rows.reduce((max3, columns) => Math.max(max3, columns.reduce((sum2, col) => sum2 + col, 0)), 0);
  if (isRemoveButtonOnSameLine(layout)) {
    const removeButtonWidth = typeof ((_a2 = layout.removeButton) === null || _a2 === void 0 ? void 0 : _a2.width) === "number" ? (_b = layout.removeButton) === null || _b === void 0 ? void 0 : _b.width : 1;
    return {
      gridColumnStart: previousGridColumnEnd,
      gridColumnEnd: previousGridColumnEnd + removeButtonWidth
    };
  }
  return { gridColumnStart: 1, gridColumnEnd: maxColumns + 1 };
}
function isRemoveButtonOnSameLine(layout) {
  var _a2;
  return layout.rows.length === 1 && !((_a2 = layout.removeButton) === null || _a2 === void 0 ? void 0 : _a2.ownRow);
}
function getGridTemplateColumns(layout) {
  var _a2, _b, _c;
  const totalColumnUnits = layout.rows.reduce((maxCols, row) => Math.max(maxCols, row.reduce((cols, col) => cols + col, 0)), 0);
  const removeButtonColumn = isRemoveButtonOnSameLine(layout) ? ((_a2 = layout.removeButton) === null || _a2 === void 0 ? void 0 : _a2.width) === "auto" ? "max-content" : `${(_c = (_b = layout.removeButton) === null || _b === void 0 ? void 0 : _b.width) !== null && _c !== void 0 ? _c : 1}fr` : "";
  return `repeat(${totalColumnUnits}, 1fr) ${removeButtonColumn}`;
}

// node_modules/@cloudscape-design/components/attribute-editor/row.js
function render(item, itemIndex, slot) {
  if (isSlotFunction(slot)) {
    return slot(item, itemIndex);
  }
  return slot;
  function isSlotFunction(slot2) {
    return typeof slot2 === "function";
  }
}
var Row = import_react265.default.memo(({ breakpoint, item, definition, layout, i18nStrings = {}, index, removable, removeButtonText, removeButtonRefs, customRowActions, onRemoveButtonClick, removeButtonAriaLabel }) => {
  var _a2;
  const i18n = useInternalI18n("attribute-editor");
  const handleRemoveClick = (0, import_react265.useCallback)(() => {
    fireNonCancelableEvent(onRemoveButtonClick, { itemIndex: index });
  }, [onRemoveButtonClick, index]);
  const firstControlId = useUniqueId("first-control-id-");
  const buttonRef = (ref) => {
    removeButtonRefs[index] = ref !== null && ref !== void 0 ? ref : void 0;
  };
  let gridColumnStart = 1;
  let gridColumnEnd = 1;
  const removeButtonOnSameLine = isRemoveButtonOnSameLine(layout);
  const customActions = customRowActions === null || customRowActions === void 0 ? void 0 : customRowActions({
    item,
    itemIndex: index,
    ref: buttonRef,
    breakpoint,
    ownRow: !removeButtonOnSameLine
  });
  return import_react265.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default97.row, layout.rows.length === 1 && styles_css_default97["single-row"]), role: "group", "aria-labelledby": `${firstControlId}-label ${firstControlId}` },
    definition.map(({ info, label, constraintText, errorText, warningText, control }, defIndex) => {
      ({ gridColumnStart, gridColumnEnd } = getItemGridColumns(layout, defIndex));
      return import_react265.default.createElement(InternalFormField, { key: defIndex, className: styles_css_default97.field, __style: { gridColumnStart, gridColumnEnd }, label, info, constraintText: render(item, index, constraintText), errorText: render(item, index, errorText), warningText: render(item, index, warningText), stretch: true, i18nStrings: {
        errorIconAriaLabel: i18nStrings.errorIconAriaLabel,
        warningIconAriaLabel: i18nStrings.warningIconAriaLabel
      }, __hideLabel: index !== 0 && removeButtonOnSameLine, controlId: defIndex === 0 ? firstControlId : void 0 }, render(item, index, control));
    }),
    import_react265.default.createElement("div", { className: clsx_m_default(styles_css_default97["remove-button-container"], {
      [styles_css_default97["remove-button-field-padding"]]: removeButtonOnSameLine && index === 0,
      [styles_css_default97["remove-button-own-row"]]: !removeButtonOnSameLine
    }), style: Object.assign({}, getRemoveButtonGridColumns(layout, gridColumnEnd)) }, removable && (customActions !== void 0 ? customActions : import_react265.default.createElement(InternalButton, { className: styles_css_default97["remove-button"], formAction: "none", ref: buttonRef, ariaLabel: (_a2 = removeButtonAriaLabel !== null && removeButtonAriaLabel !== void 0 ? removeButtonAriaLabel : i18nStrings.removeButtonAriaLabel) === null || _a2 === void 0 ? void 0 : _a2(item), onClick: handleRemoveClick }, i18n("removeButtonText", removeButtonText)))),
    !removeButtonOnSameLine && import_react265.default.createElement("div", { className: styles_css_default97.divider })
  );
});

// node_modules/@cloudscape-design/components/attribute-editor/internal.js
var InternalAttributeEditor = import_react266.default.forwardRef((_a2, ref) => {
  var { additionalInfo, disableAddButton, definition = [{}], gridLayout, items, isItemRemovable: isItemRemovable2 = () => true, empty, addButtonText, addButtonVariant, removeButtonText, removeButtonAriaLabel, customRowActions, i18nStrings, onAddButtonClick, onRemoveButtonClick, __internalRootRef } = _a2, props2 = __rest(_a2, ["additionalInfo", "disableAddButton", "definition", "gridLayout", "items", "isItemRemovable", "empty", "addButtonText", "addButtonVariant", "removeButtonText", "removeButtonAriaLabel", "customRowActions", "i18nStrings", "onAddButtonClick", "onRemoveButtonClick", "__internalRootRef"]);
  const removeButtonRefs = (0, import_react266.useRef)([]);
  const addButtonRef = (0, import_react266.useRef)(null);
  const wasNonEmpty = (0, import_react266.useRef)(false);
  const [removalAnnouncement, setRemovalAnnouncement] = (0, import_react266.useState)("");
  const baseProps = getBaseProps(props2);
  const isEmpty = items && items.length === 0;
  wasNonEmpty.current = wasNonEmpty.current || !isEmpty;
  (0, import_react266.useImperativeHandle)(ref, () => ({
    focusRemoveButton(rowIndex) {
      var _a3;
      (_a3 = removeButtonRefs.current[rowIndex]) === null || _a3 === void 0 ? void 0 : _a3.focus();
    },
    focusAddButton() {
      var _a3;
      (_a3 = addButtonRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
    }
  }));
  const additionalInfoId = useUniqueId("attribute-editor-info");
  const infoAriaDescribedBy = additionalInfo ? additionalInfoId : void 0;
  const prevItemsLength = usePrevious(items.length);
  import_react266.default.useEffect(() => {
    if (prevItemsLength && prevItemsLength > items.length && (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.itemRemovedAriaLive)) {
      setRemovalAnnouncement(i18nStrings.itemRemovedAriaLive);
    } else {
      setRemovalAnnouncement("");
    }
  }, [items, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.itemRemovedAriaLive]);
  if (!gridLayout) {
    gridLayout = gridDefaults[definition.length];
    if (!gridLayout) {
      console.warn("AttributeEditor", "`gridLayout` is required for more than 6 attributes. Cannot render.");
      gridLayout = [];
    }
  }
  const gridLayoutBreakpoints = gridLayout.reduce((acc, layout) => Object.assign(Object.assign({}, acc), { [layout.breakpoint || "default"]: layout }), {});
  const [breakpoint, breakpointRef] = useContainerBreakpoints(Object.keys(gridLayoutBreakpoints));
  const mergedRef = useMergeRefs(breakpointRef, __internalRootRef);
  const gridLayoutForBreakpoint = matchBreakpointMapping(gridLayoutBreakpoints, breakpoint || "default");
  if (!gridLayoutForBreakpoint) {
    console.warn("AttributeEditor", `No \`gridLayout\` entry found for breakpoint ${breakpoint}. Cannot render.`);
    return import_react266.default.createElement("div", null);
  }
  const totalColumnsInLayout = gridLayoutForBreakpoint.rows.reduce((total, columns) => total + columns.length, 0);
  if (totalColumnsInLayout !== definition.length) {
    console.warn("AttributeEditor", `Incorrect number of columns in layout (${totalColumnsInLayout}) for definition (${definition.length}). Cannot render.`);
    return import_react266.default.createElement("div", null);
  }
  return import_react266.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: mergedRef, className: clsx_m_default(baseProps.className, styles_css_default97.root), style: { gridTemplateColumns: getGridTemplateColumns(gridLayoutForBreakpoint) } }),
    isEmpty && import_react266.default.createElement("div", { className: clsx_m_default(styles_css_default97.empty, wasNonEmpty.current && styles_css_default97["empty-appear"]) }, empty),
    items.map((item, index) => import_react266.default.createElement(Row, { key: index, index, breakpoint, layout: gridLayoutForBreakpoint, item, definition, i18nStrings, removable: isItemRemovable2(item), removeButtonText, removeButtonRefs: removeButtonRefs.current, customRowActions, onRemoveButtonClick, removeButtonAriaLabel })),
    import_react266.default.createElement(
      "div",
      { className: styles_css_default97["add-row"] },
      import_react266.default.createElement(InternalButton, {
        className: styles_css_default97["add-button"],
        disabled: disableAddButton,
        // Using aria-disabled="true" and tabindex="-1" instead of "disabled"
        // because focus can be dynamically moved to this button by calling
        // `focusAddButton()` on the ref.
        nativeButtonAttributes: disableAddButton ? { tabIndex: -1 } : {},
        __skipNativeAttributesWarnings: true,
        __focusable: true,
        onClick: onAddButtonClick,
        formAction: "none",
        ref: addButtonRef,
        ariaDescribedby: infoAriaDescribedBy,
        variant: addButtonVariant,
        iconName: addButtonVariant === "inline-link" ? "add-plus" : void 0
      }, addButtonText),
      import_react266.default.createElement(internal_default2, { "data-testid": "removal-announcement", tagName: "span", hidden: true, delay: 5, key: items.length }, removalAnnouncement),
      !!additionalInfo && import_react266.default.createElement(AdditionalInfo, { id: infoAriaDescribedBy }, additionalInfo)
    )
  );
});
var internal_default14 = InternalAttributeEditor;

// node_modules/@cloudscape-design/components/attribute-editor/index.js
var AttributeEditor = import_react267.default.forwardRef((_a2, ref) => {
  var _b, _c;
  var { items = [], addButtonVariant = "normal", isItemRemovable: isItemRemovable2 = () => true } = _a2, props2 = __rest(_a2, ["items", "addButtonVariant", "isItemRemovable"]);
  const baseComponentProps = useBaseComponent("AttributeEditor", {
    props: {
      addButtonVariant
    },
    metadata: {
      definitionItems: (_c = (_b = props2.definition) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : null,
      hasGridLayout: !!props2.gridLayout,
      hasCustomRowActions: !!props2.customRowActions
    }
  });
  return import_react267.default.createElement(internal_default14, Object.assign({ items, isItemRemovable: isItemRemovable2, addButtonVariant }, props2, baseComponentProps, { ref }));
});
applyDisplayName(AttributeEditor, "AttributeEditor");
var attribute_editor_default = AttributeEditor;

// node_modules/@cloudscape-design/components/autosuggest/index.js
var import_react277 = __toESM(require_react());

// node_modules/@cloudscape-design/components/autosuggest/internal-do-not-use-core.js
var import_react276 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/utils/external-props.js
var getExternalProps = (props2) => {
  const externalPropNames = Object.keys(props2).filter((propName) => propName.indexOf("__") !== 0);
  return externalPropNames.reduce((acc, propName) => {
    acc[propName] = props2[propName];
    return acc;
  }, {});
};

// node_modules/@cloudscape-design/components/autosuggest/internal.js
var import_react275 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/autosuggest-input/index.js
var import_react268 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/autosuggest-input/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/autosuggest-input/styles.scoped.css";
var styles_css_default98 = {
  "dropdown-footer": "awsui_dropdown-footer_vm8qf_jxdvh_5",
  "dropdown-content": "awsui_dropdown-content_vm8qf_jxdvh_10"
};

// node_modules/@cloudscape-design/components/internal/components/autosuggest-input/index.js
var AutosuggestInput = import_react268.default.forwardRef((_a2, ref) => {
  var { value, onChange, onBlur, onFocus, onKeyUp, onKeyDown, name, placeholder, disabled, readOnly, autoFocus, ariaLabel, ariaRequired, disableBrowserAutocorrect = false, expandToViewport, ariaControls, ariaActivedescendant, clearAriaLabel, dropdownExpanded = true, dropdownContentKey, dropdownContentFocusable = false, dropdownContent = null, dropdownFooter = null, dropdownWidth, loopFocus, nativeInputAttributes, onCloseDropdown, onDelayedInput, onPressArrowDown, onPressArrowUp, onPressEnter, __internalRootRef } = _a2, restProps = __rest(_a2, ["value", "onChange", "onBlur", "onFocus", "onKeyUp", "onKeyDown", "name", "placeholder", "disabled", "readOnly", "autoFocus", "ariaLabel", "ariaRequired", "disableBrowserAutocorrect", "expandToViewport", "ariaControls", "ariaActivedescendant", "clearAriaLabel", "dropdownExpanded", "dropdownContentKey", "dropdownContentFocusable", "dropdownContent", "dropdownFooter", "dropdownWidth", "loopFocus", "nativeInputAttributes", "onCloseDropdown", "onDelayedInput", "onPressArrowDown", "onPressArrowUp", "onPressEnter", "__internalRootRef"]);
  const baseProps = getBaseProps(restProps);
  const formFieldContext = useFormFieldContext(restProps);
  const inputRef = (0, import_react268.useRef)(null);
  const dropdownContentRef = (0, import_react268.useRef)(null);
  const dropdownFooterRef = (0, import_react268.useRef)(null);
  const preventOpenOnFocusRef = (0, import_react268.useRef)(false);
  const preventCloseOnBlurRef = (0, import_react268.useRef)(false);
  const [open, setOpen] = (0, import_react268.useState)(false);
  const openDropdown = () => !readOnly && setOpen(true);
  const closeDropdown = () => {
    setOpen(false);
    fireNonCancelableEvent(onCloseDropdown, null);
  };
  (0, import_react268.useImperativeHandle)(ref, () => ({
    focus(options) {
      var _a3;
      if (options === null || options === void 0 ? void 0 : options.preventDropdown) {
        preventOpenOnFocusRef.current = true;
      }
      (_a3 = inputRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
    },
    select() {
      var _a3;
      (_a3 = inputRef.current) === null || _a3 === void 0 ? void 0 : _a3.select();
    },
    open: openDropdown,
    close: closeDropdown
  }));
  const handleBlur = () => {
    if (!preventCloseOnBlurRef.current) {
      closeDropdown();
      fireNonCancelableEvent(onBlur, null);
    }
  };
  const handleFocus = () => {
    if (!preventOpenOnFocusRef.current) {
      openDropdown();
      fireNonCancelableEvent(onFocus, null);
    }
    preventOpenOnFocusRef.current = false;
  };
  const fireKeydown = (event) => fireCancelableEvent(onKeyDown, event.detail, event);
  const handleKeyDown = (event) => {
    switch (event.detail.keyCode) {
      case KeyCode2.down: {
        onPressArrowDown === null || onPressArrowDown === void 0 ? void 0 : onPressArrowDown();
        openDropdown();
        event.preventDefault();
        break;
      }
      case KeyCode2.up: {
        onPressArrowUp === null || onPressArrowUp === void 0 ? void 0 : onPressArrowUp();
        openDropdown();
        event.preventDefault();
        break;
      }
      case KeyCode2.enter: {
        if (open) {
          if (!(onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter())) {
            closeDropdown();
          }
          event.preventDefault();
        }
        fireKeydown(event);
        break;
      }
      case KeyCode2.escape: {
        if (open) {
          event.stopPropagation();
          closeDropdown();
        } else if (value) {
          event.stopPropagation();
          fireNonCancelableEvent(onChange, { value: "" });
        }
        event.preventDefault();
        fireKeydown(event);
        break;
      }
      default: {
        fireKeydown(event);
      }
    }
  };
  const handleChange = (value2) => {
    openDropdown();
    fireNonCancelableEvent(onChange, { value: value2 });
  };
  const handleDelayedInput = (value2) => {
    fireNonCancelableEvent(onDelayedInput, { value: value2 });
  };
  const handleDropdownMouseDown = (event) => {
    if (!dropdownContentFocusable) {
      event.preventDefault();
    } else {
      preventCloseOnBlurRef.current = true;
      requestAnimationFrame(() => {
        preventCloseOnBlurRef.current = false;
      });
    }
  };
  const expanded = open && dropdownExpanded;
  const nativeAttributes = {
    name,
    placeholder,
    autoFocus,
    onClick: openDropdown,
    role: "combobox",
    "aria-autocomplete": "list",
    "aria-expanded": expanded,
    "aria-controls": open ? ariaControls : void 0,
    // 'aria-owns' needed for safari+vo to announce activedescendant content
    "aria-owns": open ? ariaControls : void 0,
    "aria-label": ariaLabel,
    "aria-activedescendant": ariaActivedescendant
  };
  (0, import_react268.useEffect)(() => {
    if (!open) {
      return;
    }
    const clickListener = (event) => {
      if (!nodeBelongs2(inputRef.current, event.target) && !nodeBelongs2(dropdownContentRef.current, event.target) && !nodeBelongs2(dropdownFooterRef.current, event.target)) {
        closeDropdown();
      }
    };
    window.addEventListener("mousedown", clickListener);
    return () => {
      window.removeEventListener("mousedown", clickListener);
    };
  }, [open]);
  return import_react268.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default98.root), ref: __internalRootRef }),
    import_react268.default.createElement(dropdown_default, { minWidth: dropdownWidth, stretchWidth: !dropdownWidth, stretchBeyondTriggerWidth: true, contentKey: dropdownContentKey, onFocus: handleFocus, onBlur: handleBlur, trigger: import_react268.default.createElement(internal_default12, Object.assign({ type: "visualSearch", value, onChange: (event) => handleChange(event.detail.value), __onDelayedInput: (event) => handleDelayedInput(event.detail.value), onKeyDown: handleKeyDown, onKeyUp, disabled, disableBrowserAutocorrect, readOnly, ariaRequired, clearAriaLabel, ref: inputRef, autoComplete: false, nativeInputAttributes: processAttributes(nativeAttributes, nativeInputAttributes, "Autosuggest"), __skipNativeAttributesWarnings: Object.keys(nativeAttributes) }, formFieldContext)), onMouseDown: handleDropdownMouseDown, open: open && (!!dropdownContent || !!dropdownFooter), footer: dropdownFooterRef && import_react268.default.createElement("div", { ref: dropdownFooterRef, className: styles_css_default98["dropdown-footer"] }, open && dropdownFooter ? dropdownFooter : null), expandToViewport, loopFocus }, open && dropdownContent ? import_react268.default.createElement("div", { ref: dropdownContentRef, className: styles_css_default98["dropdown-content"] }, dropdownContent) : null)
  );
});
var autosuggest_input_default = AutosuggestInput;

// node_modules/@cloudscape-design/components/autosuggest/load-more-controller.js
var import_react269 = __toESM(require_react());
var useAutosuggestLoadMore = ({ options = [], statusType, onLoadItems }) => {
  const lastFilteringText = (0, import_react269.useRef)(null);
  const fireLoadMore = ({ firstPage, samePage, filteringText }) => {
    var _a2;
    if (filteringText === void 0 || lastFilteringText.current !== filteringText) {
      if (filteringText !== void 0) {
        lastFilteringText.current = filteringText;
      }
      onLoadItems({ filteringText: (_a2 = lastFilteringText.current) !== null && _a2 !== void 0 ? _a2 : "", firstPage, samePage });
    }
  };
  const fireLoadMoreOnScroll = () => {
    if (options.length > 0 && statusType === "pending") {
      fireLoadMore({ firstPage: false, samePage: false });
    }
  };
  const fireLoadMoreOnRecoveryClick = () => fireLoadMore({ firstPage: false, samePage: true });
  const fireLoadMoreOnInputFocus = () => {
    var _a2;
    return fireLoadMore({ firstPage: true, samePage: false, filteringText: (_a2 = lastFilteringText.current) !== null && _a2 !== void 0 ? _a2 : "" });
  };
  const fireLoadMoreOnInputChange = (filteringText) => fireLoadMore({ firstPage: true, samePage: false, filteringText });
  return { fireLoadMoreOnScroll, fireLoadMoreOnRecoveryClick, fireLoadMoreOnInputFocus, fireLoadMoreOnInputChange };
};

// node_modules/@cloudscape-design/components/autosuggest/options-controller.js
var import_react270 = __toESM(require_react());

// node_modules/@cloudscape-design/components/autosuggest/utils/utils.js
var isGroup2 = (option) => "type" in option && option.type === "parent";
var popLastGroup = (options) => {
  if (options.length) {
    const lastOption = options[options.length - 1];
    if (isGroup2(lastOption)) {
      options.pop();
    }
  }
};
var filterOptions2 = (options, text) => {
  const filteredOptions = options.reduce((filteredIn, option) => {
    if (isGroup2(option)) {
      popLastGroup(filteredIn);
      filteredIn.push(option);
    } else if (matchSingleOption(option, text)) {
      filteredIn.push(option);
    }
    return filteredIn;
  }, []);
  popLastGroup(filteredOptions);
  return filteredOptions;
};
var matchSingleOption = (option, text) => {
  const searchableFields2 = ["value", "label", "description", "labelTag"];
  const searchableTagFields = ["tags", "filteringTags"];
  const searchText = text.toLowerCase();
  const searchStrFieldsFn = (attr) => matchString(option[attr], searchText);
  const searchTagsFieldsFn = (attr) => {
    var _a2;
    return (_a2 = option[attr]) === null || _a2 === void 0 ? void 0 : _a2.some((value) => matchString(value, searchText));
  };
  return searchableFields2.some(searchStrFieldsFn) || searchableTagFields.some(searchTagsFieldsFn);
};
var matchString = (value, searchText) => {
  return value && value.toLowerCase().indexOf(searchText) !== -1;
};

// node_modules/@cloudscape-design/components/autosuggest/options-controller.js
var isHighlightable = (option) => {
  return !!option && option.type !== "parent";
};
var isInteractive2 = (option) => !!option && !option.disabled && option.type !== "parent";
var useAutosuggestItems = ({ options, filterValue, filterText, filteringType, enteredTextLabel, hideEnteredTextLabel, onSelectItem }) => {
  const i18n = useInternalI18n("autosuggest");
  const [showAll, setShowAll] = (0, import_react270.useState)(false);
  const { items, getItemGroup, getItemParent } = (0, import_react270.useMemo)(() => createItems(options), [options]);
  const enteredItemLabel = i18n("enteredTextLabel", enteredTextLabel === null || enteredTextLabel === void 0 ? void 0 : enteredTextLabel(filterValue), (format3) => format3({ value: filterValue }));
  if (!enteredItemLabel) {
    warnOnce("Autosuggest", "A value for enteredTextLabel must be provided.");
  }
  const filteredItems = (0, import_react270.useMemo)(() => {
    const filteredItems2 = filteringType === "auto" && !showAll ? filterOptions2(items, filterText) : [...items];
    if (filterValue && !hideEnteredTextLabel) {
      filteredItems2.unshift({
        value: filterValue,
        type: "use-entered",
        label: enteredItemLabel,
        option: { value: filterValue }
      });
    }
    generateTestIndexes(filteredItems2, getItemParent);
    return filteredItems2;
  }, [filteringType, showAll, items, filterText, filterValue, hideEnteredTextLabel, getItemParent, enteredItemLabel]);
  const [highlightedOptionState, highlightedOptionHandlers] = useHighlightedOption({
    options: filteredItems,
    isHighlightable
  });
  const selectHighlightedOptionWithKeyboard = () => {
    var _a2;
    if (highlightedOptionState.highlightedOption && !isInteractive2(highlightedOptionState.highlightedOption)) {
      return false;
    }
    onSelectItem((_a2 = highlightedOptionState.highlightedOption) !== null && _a2 !== void 0 ? _a2 : {
      // put use-entered item as a fallback
      value: filterValue,
      type: "use-entered",
      option: { value: filterValue }
    });
    return true;
  };
  const highlightVisibleOptionWithMouse = (index) => {
    if (filteredItems[index] && isHighlightable(filteredItems[index])) {
      highlightedOptionHandlers.setHighlightedIndexWithMouse(index);
    }
  };
  const selectVisibleOptionWithMouse = (index) => {
    if (filteredItems[index] && isInteractive2(filteredItems[index])) {
      onSelectItem(filteredItems[index]);
    }
  };
  return [
    Object.assign(Object.assign({}, highlightedOptionState), { items: filteredItems, showAll, getItemGroup }),
    Object.assign(Object.assign({}, highlightedOptionHandlers), {
      setShowAll,
      selectHighlightedOptionWithKeyboard,
      highlightVisibleOptionWithMouse,
      selectVisibleOptionWithMouse
    })
  ];
};
function createItems(options) {
  const items = [];
  const itemToGroup = /* @__PURE__ */ new WeakMap();
  const getItemParent = (item) => itemToGroup.get(item);
  const getItemGroup = (item) => {
    var _a2;
    return (_a2 = getItemParent(item)) === null || _a2 === void 0 ? void 0 : _a2.option;
  };
  for (const option of options) {
    if (isGroup3(option)) {
      for (const item of flattenGroup(option)) {
        items.push(item);
      }
    } else {
      items.push(Object.assign(Object.assign({}, option), { option }));
    }
  }
  function flattenGroup(group) {
    const { options: options2 } = group, rest = __rest(group, ["options"]);
    let hasOnlyDisabledChildren = true;
    const groupItem = Object.assign(Object.assign({}, rest), { type: "parent", option: group });
    const items2 = [groupItem];
    for (const option of options2) {
      if (!option.disabled) {
        hasOnlyDisabledChildren = false;
      }
      const childOption = Object.assign(Object.assign({}, option), { type: "child", disabled: option.disabled || rest.disabled, option });
      items2.push(childOption);
      itemToGroup.set(childOption, groupItem);
    }
    items2[0].disabled = items2[0].disabled || hasOnlyDisabledChildren;
    return items2;
  }
  return { items, getItemGroup, getItemParent };
}
function isGroup3(optionOrGroup) {
  return "options" in optionOrGroup;
}

// node_modules/@cloudscape-design/components/autosuggest/options-list.js
var import_react274 = __toESM(require_react());

// node_modules/@cloudscape-design/components/autosuggest/plain-list.js
var import_react272 = __toESM(require_react());

// node_modules/@cloudscape-design/components/autosuggest/autosuggest-option.js
var import_react271 = __toESM(require_react());

// node_modules/@cloudscape-design/components/autosuggest/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/autosuggest/styles.scoped.css";
var styles_css_default99 = {
  "root": "awsui_root_12hwc_oboi4_5",
  "layout-strut": "awsui_layout-strut_12hwc_oboi4_9",
  "list-bottom": "awsui_list-bottom_12hwc_oboi4_15"
};

// node_modules/@cloudscape-design/components/autosuggest/autosuggest-option.js
var AutosuggestOption = (_a2, ref) => {
  var { nativeAttributes = {}, highlightText, option, highlighted, highlightType, current, virtualPosition, padBottom, screenReaderContent, ariaSetsize, ariaPosinset } = _a2, rest = __rest(_a2, ["nativeAttributes", "highlightText", "option", "highlighted", "highlightType", "current", "virtualPosition", "padBottom", "screenReaderContent", "ariaSetsize", "ariaPosinset"]);
  const baseProps = getBaseProps(rest);
  const useEntered = "type" in option && option.type === "use-entered";
  const isParent = "type" in option && option.type === "parent";
  const isChild = "type" in option && option.type === "child";
  const { throughIndex, inGroupIndex, groupIndex } = getTestOptionIndexes(option) || {};
  let optionContent;
  if (useEntered) {
    optionContent = option.label;
    screenReaderContent = void 0;
  } else if (isParent) {
    optionContent = option.label;
  } else {
    const a11yProperties = {};
    if (nativeAttributes["aria-label"]) {
      a11yProperties["aria-label"] = nativeAttributes["aria-label"];
    }
    optionContent = import_react271.default.createElement(
      "div",
      Object.assign({}, a11yProperties),
      import_react271.default.createElement(option_default, { option, highlightedOption: highlighted, highlightText })
    );
  }
  return import_react271.default.createElement(selectable_item_default, Object.assign({}, baseProps, { className: styles_css_default99.option, ariaSelected: current, highlighted, disabled: option.disabled, hasBackground: useEntered, isParent, isChild, virtualPosition, "data-test-index": throughIndex, "data-in-group-index": inGroupIndex, "data-group-index": groupIndex, ref, padBottom, screenReaderContent, ariaSetsize, ariaPosinset, highlightType: highlightType.type, value: option.value }), optionContent);
};
var autosuggest_option_default = import_react271.default.memo(import_react271.default.forwardRef(AutosuggestOption));

// node_modules/@cloudscape-design/components/autosuggest/plain-list.js
var getOptionProps = (index, item, filteredItems, highlightedA11yProps, highlightedOption, hasDropdownStatus) => {
  const nativeAttributes = item === highlightedOption ? highlightedA11yProps : {};
  const baseOptionProps = getBaseProps(nativeAttributes);
  const isLastItem = index === filteredItems.length - 1;
  const isNotEnteredTextItem = filteredItems.length > 1;
  const padBottom = !hasDropdownStatus && isNotEnteredTextItem && isLastItem;
  return Object.assign({ nativeAttributes, padBottom }, baseOptionProps);
};
var PlainList2 = ({ autosuggestItemsState, handleLoadMore, menuProps, highlightedA11yProps, hasDropdownStatus, highlightText, listBottom, screenReaderContent }) => {
  const listRef = (0, import_react272.useRef)(null);
  (0, import_react272.useEffect)(() => {
    var _a2;
    const item = (_a2 = listRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector(`[data-mouse-target="${autosuggestItemsState.highlightedIndex}"]`);
    if (autosuggestItemsState.highlightType.moveFocus && item) {
      scrollElementIntoView(item);
    }
  }, [autosuggestItemsState.highlightType, autosuggestItemsState.highlightedIndex]);
  return import_react272.default.createElement(
    options_list_default,
    Object.assign({}, menuProps, { onLoadMore: handleLoadMore, open: true, ref: listRef }),
    autosuggestItemsState.items.map((item, index) => {
      const optionProps = getOptionProps(index, item, autosuggestItemsState.items, highlightedA11yProps, autosuggestItemsState.highlightedOption, hasDropdownStatus);
      return import_react272.default.createElement(autosuggest_option_default, Object.assign({ highlightText, option: item, highlighted: item === autosuggestItemsState.highlightedOption, current: item.value === highlightText, key: index, "data-mouse-target": index, screenReaderContent, highlightType: autosuggestItemsState.highlightType }, optionProps));
    }),
    listBottom ? import_react272.default.createElement("div", { role: "option", className: styles_css_default99["list-bottom"] }, listBottom) : null
  );
};
var plain_list_default2 = PlainList2;

// node_modules/@cloudscape-design/components/autosuggest/virtual-list.js
var import_react273 = __toESM(require_react());
var VirtualList2 = ({ autosuggestItemsState, handleLoadMore, menuProps, highlightedA11yProps, hasDropdownStatus, highlightText, listBottom, screenReaderContent }) => {
  const scrollRef = (0, import_react273.useRef)(null);
  const [width, strutRef] = useContainerQuery((rect) => rect.contentBoxWidth, []);
  (0, import_react273.useImperativeHandle)(strutRef, () => scrollRef.current);
  const rowVirtualizer = useVirtual2({
    items: autosuggestItemsState.items,
    parentRef: scrollRef,
    // estimateSize is a dependency of measurements memo. We update it to force full recalculation
    // when the height of any option could have changed:
    // 1: because the component got resized (width property got updated)
    // 2: because the option changed its content (highlightText property controls the highlight and the visibility of hidden tags)
    // eslint-disable-next-line react-hooks/exhaustive-deps
    estimateSize: (0, import_react273.useCallback)(() => 31, [width, highlightText])
  });
  (0, import_react273.useEffect)(() => {
    if (autosuggestItemsState.highlightType.moveFocus) {
      rowVirtualizer.scrollToIndex(autosuggestItemsState.highlightedIndex);
    }
  }, [autosuggestItemsState.highlightType, autosuggestItemsState.highlightedIndex, rowVirtualizer]);
  return import_react273.default.createElement(
    options_list_default,
    Object.assign({}, menuProps, { onLoadMore: handleLoadMore, ref: scrollRef, open: true }),
    import_react273.default.createElement("div", { "aria-hidden": "true", key: "total-size", className: styles_css_default99["layout-strut"], style: { height: rowVirtualizer.totalSize + (autosuggestItemsState.items.length === 1 ? 1 : 0) } }),
    rowVirtualizer.virtualItems.map((virtualRow) => {
      const { index, start, measureRef } = virtualRow;
      const item = autosuggestItemsState.items[index];
      const optionProps = getOptionProps(index, item, autosuggestItemsState.items, highlightedA11yProps, autosuggestItemsState.highlightedOption, hasDropdownStatus);
      return import_react273.default.createElement(autosuggest_option_default, Object.assign({ key: index, ref: measureRef, highlightText, option: item, highlighted: item === autosuggestItemsState.highlightedOption, current: item.value === highlightText, "data-mouse-target": index, virtualPosition: start + (index === 0 ? 1 : 0), screenReaderContent, ariaSetsize: autosuggestItemsState.items.length, ariaPosinset: index + 1, highlightType: autosuggestItemsState.highlightType }, optionProps));
    }),
    listBottom ? import_react273.default.createElement("div", { role: "option", className: styles_css_default99["list-bottom"] }, listBottom) : null
  );
};
var virtual_list_default2 = VirtualList2;

// node_modules/@cloudscape-design/components/autosuggest/options-list.js
var createMouseEventHandler = (handler) => (itemIndex) => {
  if (itemIndex > -1) {
    handler(itemIndex);
  }
};
function AutosuggestOptionsList({ statusType, autosuggestItemsState, autosuggestItemsHandlers, highlightedOptionId, highlightText, listId, controlId, handleLoadMore, hasDropdownStatus, virtualScroll, selectedAriaLabel, renderHighlightedAriaLive, listBottom, ariaDescribedby }) {
  var _a2;
  const handleMouseUp = createMouseEventHandler(autosuggestItemsHandlers.selectVisibleOptionWithMouse);
  const handleMouseMove = createMouseEventHandler(autosuggestItemsHandlers.highlightVisibleOptionWithMouse);
  const ListComponent = virtualScroll ? virtual_list_default2 : plain_list_default2;
  const announcement = useAnnouncement({
    highlightText,
    announceSelected: ((_a2 = autosuggestItemsState.highlightedOption) === null || _a2 === void 0 ? void 0 : _a2.value) === highlightText,
    highlightedOption: autosuggestItemsState.highlightedOption,
    getParent: (option) => autosuggestItemsState.getItemGroup(option),
    selectedAriaLabel,
    renderHighlightedAriaLive
  });
  return import_react274.default.createElement(ListComponent, { listBottom, handleLoadMore, autosuggestItemsState, highlightText, highlightedA11yProps: highlightedOptionId ? { id: highlightedOptionId } : {}, hasDropdownStatus, menuProps: {
    id: listId,
    ariaLabelledby: controlId,
    onMouseUp: handleMouseUp,
    onMouseMove: handleMouseMove,
    ariaDescribedby,
    statusType
  }, screenReaderContent: announcement });
}

// node_modules/@cloudscape-design/components/autosuggest/internal.js
var InternalAutosuggest = import_react275.default.forwardRef((props2, ref) => {
  var _a2, _b;
  const { value, onChange, onBlur, onFocus, onKeyUp, onLoadItems, options, filteringType = "auto", statusType = "finished", placeholder, clearAriaLabel, name, disabled, disableBrowserAutocorrect = false, autoFocus, readOnly, ariaLabel, ariaRequired, enteredTextLabel, filteringResultsText, onKeyDown, virtualScroll, expandToViewport, onSelect, renderHighlightedAriaLive, __internalRootRef } = props2, restProps = __rest(props2, ["value", "onChange", "onBlur", "onFocus", "onKeyUp", "onLoadItems", "options", "filteringType", "statusType", "placeholder", "clearAriaLabel", "name", "disabled", "disableBrowserAutocorrect", "autoFocus", "readOnly", "ariaLabel", "ariaRequired", "enteredTextLabel", "filteringResultsText", "onKeyDown", "virtualScroll", "expandToViewport", "onSelect", "renderHighlightedAriaLive", "__internalRootRef"]);
  checkControlled("Autosuggest", "value", value, "onChange", onChange);
  checkOptionValueField("Autosuggest", "options", options);
  const autosuggestInputRef = (0, import_react275.useRef)(null);
  (0, import_react275.useImperativeHandle)(ref, () => ({
    focus: () => {
      var _a3;
      return (_a3 = autosuggestInputRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
    },
    select: () => {
      var _a3;
      return (_a3 = autosuggestInputRef.current) === null || _a3 === void 0 ? void 0 : _a3.select();
    }
  }), []);
  const i18n = useInternalI18n("autosuggest");
  const errorIconAriaLabel = i18n("errorIconAriaLabel", restProps.errorIconAriaLabel);
  const selectedAriaLabel = i18n("selectedAriaLabel", restProps.selectedAriaLabel);
  const recoveryText = i18n("recoveryText", restProps.recoveryText);
  if (restProps.recoveryText && !onLoadItems) {
    warnOnce("Autosuggest", "`onLoadItems` must be provided for `recoveryText` to be displayed.");
  }
  const [autosuggestItemsState, autosuggestItemsHandlers] = useAutosuggestItems({
    options: options || [],
    filterValue: value,
    filterText: value,
    filteringType,
    enteredTextLabel,
    hideEnteredTextLabel: false,
    onSelectItem: (option) => {
      var _a3;
      const value2 = option.value || "";
      fireNonCancelableEvent(onChange, { value: value2 });
      fireNonCancelableEvent(onSelect, {
        value: value2,
        selectedOption: option.type !== "use-entered" ? option.option : void 0
      });
      (_a3 = autosuggestInputRef.current) === null || _a3 === void 0 ? void 0 : _a3.close();
    }
  });
  const autosuggestLoadMoreHandlers = useAutosuggestLoadMore({
    options,
    statusType,
    onLoadItems: (detail) => fireNonCancelableEvent(onLoadItems, detail)
  });
  const handleChange = (event) => {
    autosuggestItemsHandlers.setShowAll(false);
    autosuggestItemsHandlers.resetHighlightWithKeyboard();
    fireNonCancelableEvent(onChange, event.detail);
  };
  const handleDelayedInput = (event) => {
    autosuggestLoadMoreHandlers.fireLoadMoreOnInputChange(event.detail.value);
  };
  const handleBlur = () => {
    fireNonCancelableEvent(onBlur, null);
  };
  const handleFocus = () => {
    autosuggestItemsHandlers.setShowAll(true);
    autosuggestLoadMoreHandlers.fireLoadMoreOnInputFocus();
    fireNonCancelableEvent(onFocus, null);
  };
  const handleKeyUp = (event) => {
    fireCancelableEvent(onKeyUp, event.detail, event);
  };
  const handleKeyDown = (event) => {
    fireCancelableEvent(onKeyDown, event.detail, event);
  };
  const handlePressArrowDown = () => {
    if (autosuggestItemsState.items.length - 1 === autosuggestItemsState.highlightedIndex) {
      autosuggestItemsHandlers.goHomeWithKeyboard();
      return;
    }
    autosuggestItemsHandlers.moveHighlightWithKeyboard(1);
  };
  const handlePressArrowUp = () => {
    var _a3;
    if (((_a3 = autosuggestItemsState.highlightedOption) === null || _a3 === void 0 ? void 0 : _a3.type) === "child" && autosuggestItemsState.highlightedIndex === 1 || autosuggestItemsState.highlightedIndex === 0) {
      autosuggestItemsHandlers.goEndWithKeyboard();
      return;
    }
    autosuggestItemsHandlers.moveHighlightWithKeyboard(-1);
  };
  const handlePressEnter = () => {
    return autosuggestItemsHandlers.selectHighlightedOptionWithKeyboard();
  };
  const handleCloseDropdown = () => {
    autosuggestItemsHandlers.resetHighlightWithKeyboard();
  };
  const handleRecoveryClick = () => {
    var _a3;
    autosuggestLoadMoreHandlers.fireLoadMoreOnRecoveryClick();
    (_a3 = autosuggestInputRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
  };
  const formFieldContext = useFormFieldContext(restProps);
  const selfControlId = useUniqueId("input");
  const footerControlId = useUniqueId("footer");
  const controlId = (_a2 = formFieldContext.controlId) !== null && _a2 !== void 0 ? _a2 : selfControlId;
  const listId = useUniqueId("list");
  const highlightedOptionIdSource = useUniqueId();
  const highlightedOptionId = autosuggestItemsState.highlightedOption ? highlightedOptionIdSource : void 0;
  const isEmpty = !value && !autosuggestItemsState.items.length;
  const isFiltered = !!value && value.length !== 0 && !(filteringType === "auto" && autosuggestItemsState.showAll);
  const filteredText = isFiltered ? filteringResultsText === null || filteringResultsText === void 0 ? void 0 : filteringResultsText(autosuggestItemsState.items.length, (_b = options === null || options === void 0 ? void 0 : options.length) !== null && _b !== void 0 ? _b : 0) : void 0;
  const dropdownStatus = useDropdownStatus(Object.assign(Object.assign({}, props2), {
    isEmpty,
    recoveryText,
    errorIconAriaLabel,
    onRecoveryClick: handleRecoveryClick,
    filteringResultsText: filteredText,
    hasRecoveryCallback: !!onLoadItems
  }));
  const shouldRenderDropdownContent = !isEmpty || !!dropdownStatus.content;
  return import_react275.default.createElement(autosuggest_input_default, Object.assign({}, restProps, { className: clsx_m_default(styles_css_default99.root, restProps.className), ref: autosuggestInputRef, __internalRootRef, value, onChange: handleChange, onBlur: handleBlur, onFocus: handleFocus, onKeyUp: handleKeyUp, onKeyDown: handleKeyDown, name, controlId, placeholder, disabled, readOnly, autoFocus, ariaLabel, ariaRequired, clearAriaLabel, disableBrowserAutocorrect, expandToViewport, ariaControls: listId, ariaActivedescendant: highlightedOptionId, dropdownExpanded: shouldRenderDropdownContent, dropdownContent: shouldRenderDropdownContent && import_react275.default.createElement(AutosuggestOptionsList, { statusType, autosuggestItemsState, autosuggestItemsHandlers, highlightedOptionId, highlightText: value, listId, controlId, handleLoadMore: autosuggestLoadMoreHandlers.fireLoadMoreOnScroll, hasDropdownStatus: dropdownStatus.content !== null, virtualScroll, selectedAriaLabel, renderHighlightedAriaLive, listBottom: !dropdownStatus.isSticky ? import_react275.default.createElement(dropdown_footer_default, { content: dropdownStatus.content, id: footerControlId }) : null, ariaDescribedby: dropdownStatus.content ? footerControlId : void 0 }), dropdownFooter: dropdownStatus.isSticky && dropdownStatus.content ? import_react275.default.createElement(dropdown_footer_default, { id: footerControlId, content: dropdownStatus.content, hasItems: autosuggestItemsState.items.length >= 1 }) : null, loopFocus: dropdownStatus.hasRecoveryButton, onCloseDropdown: handleCloseDropdown, onDelayedInput: handleDelayedInput, onPressArrowDown: handlePressArrowDown, onPressArrowUp: handlePressArrowUp, onPressEnter: handlePressEnter }));
});
var internal_default15 = InternalAutosuggest;

// node_modules/@cloudscape-design/components/autosuggest/internal-do-not-use-core.js
var Autosuggest = import_react276.default.forwardRef((_a2, ref) => {
  var { filteringType = "auto", statusType = "finished", disableBrowserAutocorrect = false } = _a2, props2 = __rest(_a2, ["filteringType", "statusType", "disableBrowserAutocorrect"]);
  const baseComponentProps = useBaseComponent("Autosuggest", {
    props: {
      autoFocus: props2.autoFocus,
      disableBrowserAutocorrect,
      expandToViewport: props2.expandToViewport,
      filteringType,
      readOnly: props2.readOnly,
      virtualScroll: props2.virtualScroll
    }
  });
  const componentAnalyticsMetadata2 = {
    name: "awsui.Autosuggest",
    label: "input",
    properties: {
      disabled: `${!!props2.disabled}`,
      value: props2.value || ""
    }
  };
  const externalProps = getExternalProps(props2);
  return import_react276.default.createElement(internal_default15, Object.assign({ filteringType, statusType, disableBrowserAutocorrect }, externalProps, baseComponentProps, { ref }, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 })));
});
applyDisplayName(Autosuggest, "Autosuggest");
var internal_do_not_use_core_default2 = Autosuggest;

// node_modules/@cloudscape-design/components/autosuggest/index.js
var Autosuggest2 = import_react277.default.forwardRef((props2, ref) => {
  validateProps("Autosuggest", props2, ["nativeInputAttributes"], {}, "console");
  return import_react277.default.createElement(internal_do_not_use_core_default2, { ref, ...props2 });
});
applyDisplayName(Autosuggest2, "Autosuggest");
var autosuggest_default = Autosuggest2;

// node_modules/@cloudscape-design/components/badge/index.js
var import_react279 = __toESM(require_react());

// node_modules/@cloudscape-design/components/badge/internal-do-not-use-core.js
var import_react278 = __toESM(require_react());

// node_modules/@cloudscape-design/components/badge/style.js
function getBadgeStyles(style) {
  let properties2 = {};
  if ((style === null || style === void 0 ? void 0 : style.root) && SYSTEM === "core") {
    properties2 = {
      background: style.root.background,
      borderColor: style.root.borderColor,
      borderRadius: style.root.borderRadius,
      borderWidth: style.root.borderWidth,
      color: style.root.color,
      paddingBlock: style.root.paddingBlock,
      paddingInline: style.root.paddingInline
    };
  }
  return properties2;
}

// node_modules/@cloudscape-design/components/badge/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/badge/styles.scoped.css";
var styles_css_default100 = {
  "badge": "awsui_badge_1yjyg_12ixj_145",
  "badge-color-grey": "awsui_badge-color-grey_1yjyg_12ixj_191",
  "badge-color-green": "awsui_badge-color-green_1yjyg_12ixj_194",
  "badge-color-blue": "awsui_badge-color-blue_1yjyg_12ixj_197",
  "badge-color-red": "awsui_badge-color-red_1yjyg_12ixj_200",
  "badge-color-severity-critical": "awsui_badge-color-severity-critical_1yjyg_12ixj_203",
  "badge-color-severity-high": "awsui_badge-color-severity-high_1yjyg_12ixj_207",
  "badge-color-severity-medium": "awsui_badge-color-severity-medium_1yjyg_12ixj_211",
  "badge-color-severity-low": "awsui_badge-color-severity-low_1yjyg_12ixj_215",
  "badge-color-severity-neutral": "awsui_badge-color-severity-neutral_1yjyg_12ixj_219"
};

// node_modules/@cloudscape-design/components/badge/internal-do-not-use-core.js
function Badge(_a2) {
  var { color: color2 = "grey", children: children2, style, nativeAttributes } = _a2, rest = __rest(_a2, ["color", "children", "style", "nativeAttributes"]);
  const { __internalRootRef } = useBaseComponent("Badge", { props: { color: color2 } });
  const baseProps = getBaseProps(rest);
  const className2 = clsx_m_default(baseProps.className, styles_css_default100.badge, styles_css_default100[`badge-color-${color2}`]);
  return import_react278.default.createElement(with_native_attributes_default, Object.assign({}, baseProps, { tag: "span", componentName: "Badge", nativeAttributes, className: className2, ref: __internalRootRef, style: getBadgeStyles(style) }), children2);
}
applyDisplayName(Badge, "Badge");

// node_modules/@cloudscape-design/components/badge/index.js
var Badge2 = (props2) => {
  validateProps("Badge", props2, ["nativeAttributes", "style"], {}, "console");
  return import_react279.default.createElement(Badge, props2);
};
applyDisplayName(Badge2, "Badge");
var badge_default = Badge2;

// node_modules/@cloudscape-design/components/bar-chart/index.js
var import_react291 = __toESM(require_react());

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/internal.js
var import_react290 = __toESM(require_react());

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/chart-container.js
var import_react288 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/cartesian-chart/vertical-grid-lines.js
var import_react280 = __toESM(require_react());
var vertical_grid_lines_default = (0, import_react280.memo)(VerticalGridLines);
function VerticalGridLines({ ticks: ticks2, scale, height }) {
  return import_react280.default.createElement("g", { "aria-hidden": "true" }, ticks2.map((tick) => {
    var _a2;
    const x3 = (_a2 = scale.d3Scale(tick)) !== null && _a2 !== void 0 ? _a2 : NaN;
    return isFinite(x3) && import_react280.default.createElement("line", { key: tick, className: styles_css_default64.grid, x1: x3, y1: 0, x2: x3, y2: height });
  }));
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/bar-groups.js
var import_react281 = __toESM(require_react());

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/mixed-line-bar-chart/styles.scoped.css";
var styles_css_default101 = {
  "series": "awsui_series_1yz9c_v68e6_189",
  "series--bar": "awsui_series--bar_1yz9c_v68e6_190",
  "series__rect": "awsui_series__rect_1yz9c_v68e6_190",
  "exiting": "awsui_exiting_1yz9c_v68e6_207",
  "awsui-motion-fade-out-0": "awsui_awsui-motion-fade-out-0_1yz9c_v68e6_1",
  "root": "awsui_root_1yz9c_v68e6_229",
  "series--highlighted": "awsui_series--highlighted_1yz9c_v68e6_242",
  "series__bar--highlighted": "awsui_series__bar--highlighted_1yz9c_v68e6_243",
  "series--dimmed": "awsui_series--dimmed_1yz9c_v68e6_247",
  "series--threshold": "awsui_series--threshold_1yz9c_v68e6_251",
  "bar-group": "awsui_bar-group_1yz9c_v68e6_256"
};

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/bar-groups.js
var OUTLINE_PADDING = 2;
function BarGroups({ ariaLabel, isRefresh, isPopoverPinned, barGroups, highlightedGroupIndex, highlightedGroupRef }) {
  return import_react281.default.createElement("g", { role: "group", "aria-hidden": "true" }, barGroups.map((group, index) => import_react281.default.createElement("rect", {
    key: index,
    x: Math.max(0, group.position.x - OUTLINE_PADDING),
    y: Math.max(0, group.position.y - OUTLINE_PADDING),
    width: group.position.width + 2 * OUTLINE_PADDING,
    height: group.position.height + 2 * OUTLINE_PADDING,
    ref: index === highlightedGroupIndex ? highlightedGroupRef : void 0,
    rx: isRefresh ? 4 : 2,
    role: "button",
    "aria-label": ariaLabel,
    "aria-haspopup": true,
    "aria-expanded": isPopoverPinned,
    // We must use "transparent" instead of "none" so that Firefox popover placement works correctly.
    // When an SVG element has no stroke or fill color the Firefox optimizes it out.
    fill: "transparent",
    className: styles_css_default101["bar-group"]
  })));
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/chart-popover.js
var import_react282 = __toESM(require_react());
var chart_popover_default2 = import_react282.default.forwardRef(MixedChartPopover);
function MixedChartPopover({ containerRef, trackRef, isOpen, isPinned, highlightDetails, footer, onDismiss, size = "medium", dismissAriaLabel, onMouseEnter, onMouseLeave, onBlur, setPopoverText }, popoverRef) {
  const [expandedSeries, setExpandedSeries] = (0, import_react282.useState)({});
  return import_react282.default.createElement(Transition2, { in: isOpen }, (state, ref) => import_react282.default.createElement("div", { ref, className: clsx_m_default(state === "exiting" && styles_css_default101.exiting) }, (isOpen || state !== "exited") && highlightDetails && import_react282.default.createElement(
    chart_popover_default,
    { ref: popoverRef, title: highlightDetails.position, trackRef, trackKey: highlightDetails.position, dismissButton: isPinned, dismissAriaLabel, onDismiss, container: containerRef.current, size, onMouseEnter, onMouseLeave, onBlur, footer },
    import_react282.default.createElement(chart_series_details_default, { key: highlightDetails.position, details: highlightDetails.details, setPopoverText, expandedSeries: expandedSeries[highlightDetails.position], setExpandedState: (id, isExpanded) => setExpandedSeries((oldState) => {
      const expandedSeriesInCurrentCoordinate = new Set(oldState[highlightDetails.position]);
      if (isExpanded) {
        expandedSeriesInCurrentCoordinate.add(id);
      } else {
        expandedSeriesInCurrentCoordinate.delete(id);
      }
      return Object.assign(Object.assign({}, oldState), { [highlightDetails.position]: expandedSeriesInCurrentCoordinate });
    }) })
  )));
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/data-series.js
var import_react285 = __toESM(require_react());

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/bar-series.js
var import_react283 = __toESM(require_react());

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/create-one-side-rounded-rect-path.js
function createOneSideRoundedRectPath({ x: x3, y: y4, width, height }, radius, side) {
  const coordinates = [
    { x: x3, y: y4 },
    { x: x3 + width, y: y4 },
    { x: x3 + width, y: y4 + height },
    { x: x3, y: y4 + height }
  ];
  const startIndex = { left: 2, right: 0, top: 3, bottom: 1 }[side];
  let path2 = "";
  for (let i2 = startIndex; i2 < startIndex + coordinates.length + 1; i2++) {
    const start = coordinates[i2 % coordinates.length];
    const end = coordinates[(i2 + 1) % coordinates.length];
    const c2 = radius && i2 < startIndex + 3 ? Math.min(radius / Math.hypot(end.x - start.x, end.y - start.y), 0.5) : 0;
    if (i2 === startIndex) {
      path2 += `M${start.x * (1 - c2) + end.x * c2},${start.y * (1 - c2) + end.y * c2}`;
    }
    if (i2 > startIndex) {
      path2 += `Q${start.x},${start.y} ${start.x * (1 - c2) + end.x * c2},${start.y * (1 - c2) + end.y * c2}`;
    }
    if (i2 < startIndex + coordinates.length) {
      path2 += `L${start.x * c2 + end.x * (1 - c2)},${start.y * c2 + end.y * (1 - c2)}`;
    }
  }
  return path2 + "Z";
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/utils.js
var chartLegendMap = {
  line: "line",
  bar: "rectangle",
  threshold: "dashed"
};
var nextValidDomainIndex = (nextGroupIndex, barGroups, direction = 1) => {
  let index = nextGroupIndex;
  if (index < 0 || index >= barGroups.length) {
    index = 0;
  }
  do {
    if (barGroups[index].isValid && barGroups[index].hasData) {
      return index;
    }
    index += direction;
    if (index >= barGroups.length) {
      index = 0;
    } else if (index < 0) {
      index = barGroups.length - 1;
    }
  } while (index !== nextGroupIndex);
  return 0;
};
function findNavigableSeries(series) {
  const navigableSeries = [];
  let navigableBarSeriesIndex = -1;
  series.forEach((internalSeries) => {
    if (internalSeries.series.type === "bar") {
      if (navigableBarSeriesIndex === -1) {
        navigableBarSeriesIndex = navigableSeries.length;
        navigableSeries.push(internalSeries.series);
      }
    } else {
      navigableSeries.push(internalSeries.series);
    }
  });
  return { navigableSeries, navigableBarSeriesIndex };
}
var matchesX = (x1, x22) => {
  if (x1 instanceof Date && x22 instanceof Date) {
    return x1.getTime() === x22.getTime();
  }
  return x1 === x22;
};
function calculateStackedBarValues(dataBySeries) {
  var _a2, _b, _c, _d;
  const negativeValues = /* @__PURE__ */ new Map();
  const positiveValues = /* @__PURE__ */ new Map();
  const values2 = /* @__PURE__ */ new Map();
  for (let seriesIndex = 0; seriesIndex < dataBySeries.length; seriesIndex++) {
    for (const datum of dataBySeries[seriesIndex]) {
      const key2 = getKeyValue(datum.x);
      if (datum.y < 0) {
        negativeValues.set(key2, ((_a2 = negativeValues.get(key2)) !== null && _a2 !== void 0 ? _a2 : 0) + datum.y);
      } else {
        positiveValues.set(key2, ((_b = positiveValues.get(key2)) !== null && _b !== void 0 ? _b : 0) + datum.y);
      }
      const seriesValue = (_c = datum.y < 0 ? negativeValues.get(key2) : positiveValues.get(key2)) !== null && _c !== void 0 ? _c : 0;
      const valuesByIndex = (_d = values2.get(key2)) !== null && _d !== void 0 ? _d : /* @__PURE__ */ new Map();
      valuesByIndex.set(seriesIndex, seriesValue);
      values2.set(key2, valuesByIndex);
    }
  }
  return values2;
}
var getKeyValue = (key2) => key2 instanceof Date ? key2.getTime() : key2;
function isYThreshold(series) {
  return series.type === "threshold" && "y" in series;
}
function isXThreshold(series) {
  return series.type === "threshold" && "x" in series;
}
function isDataSeries(series) {
  return series.type === "line" || series.type === "bar";
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/bar-series.js
function BarSeries({ axis, series, color: color2, xScale, yScale, highlighted, dimmed, highlightedGroupIndex, totalSeriesCount, seriesIndex, plotSize, chartAreaClipPath, stackedBarValues, isRtl }) {
  const isRefresh = useVisualRefresh();
  const isStacked = !!stackedBarValues;
  const isVertical = axis === "x";
  const xCoordinates = (() => {
    var _a2;
    if (series.type !== "bar" || !xScale.isCategorical()) {
      return [];
    }
    const yContinuosScale = yScale.d3Scale;
    const xPoints = series.data.map(({ x: x3 }) => xScale.d3Scale(x3) || NaN);
    const zeroY = (_a2 = yScale.d3Scale(0)) !== null && _a2 !== void 0 ? _a2 : NaN;
    const baseY = isFinite(zeroY) ? Math.min(plotSize, zeroY) : plotSize;
    let barWidth = xScale.d3Scale.bandwidth();
    const PADDING = 4;
    const MINWIDTH = 4;
    if (!isStacked && totalSeriesCount > 1) {
      barWidth = (barWidth - (totalSeriesCount - 1) * PADDING) / totalSeriesCount;
      barWidth = Math.max(barWidth, MINWIDTH);
    }
    return xPoints.map((x3, i2) => {
      var _a3, _b, _c, _d;
      const d3 = series.data[i2];
      const key2 = getKeyValue(d3.x);
      let barX = x3;
      let yValue = d3.y;
      let isRoundedStart = !isStacked;
      let isRoundedEnd = !isStacked;
      if (isStacked) {
        const allXValues = (_a3 = stackedBarValues.get(key2)) !== null && _a3 !== void 0 ? _a3 : /* @__PURE__ */ new Map();
        yValue = (_b = allXValues.get(seriesIndex)) !== null && _b !== void 0 ? _b : 0;
        const allXValuesSorted = Array.from(allXValues.values()).sort((a4, b2) => a4 - b2);
        isRoundedStart = yValue === allXValuesSorted[0];
        isRoundedEnd = yValue === allXValuesSorted[allXValuesSorted.length - 1];
      } else if (totalSeriesCount > 1) {
        barX += seriesIndex * (barWidth + PADDING);
      }
      yValue = yValue < 0 ? yValue - d3.y : yValue;
      return {
        x: barX,
        y: (_c = yContinuosScale(yValue)) !== null && _c !== void 0 ? _c : NaN,
        width: barWidth,
        height: Math.abs(((_d = yContinuosScale(d3.y)) !== null && _d !== void 0 ? _d : NaN) - baseY),
        isRoundedStart,
        isRoundedEnd
      };
    });
  })();
  const highlightedXValue = highlightedGroupIndex !== null ? xScale.domain[highlightedGroupIndex] : null;
  return import_react283.default.createElement("g", { "aria-label": series.title, clipPath: `url(#${chartAreaClipPath})`, className: clsx_m_default(styles_css_default101.series, styles_css_default101["series--bar"], {
    [styles_css_default101["series--highlighted"]]: highlighted,
    [styles_css_default101["series--dimmed"]]: dimmed
  }) }, xCoordinates.map(({ x: x3, y: y4, width, height, isRoundedStart, isRoundedEnd }, i2) => {
    if (!isFinite(x3) || !isFinite(height)) {
      return;
    }
    const baseHeightOffset = isStacked ? 3 : 0;
    const isSmallBar = height < 4;
    const heightOffset = isSmallBar ? 0 : baseHeightOffset;
    const widthOffset = 2;
    const rx = isRefresh ? isSmallBar ? 2 : 4 : 0;
    const placement = isVertical ? {
      x: x3 + widthOffset / 2,
      y: y4 + heightOffset / 2,
      width: width - widthOffset,
      height: height - heightOffset
    } : {
      x: y4 - (!isRtl ? height : 0) + heightOffset / 2,
      y: x3 + widthOffset / 2,
      width: height - heightOffset,
      height: width - widthOffset
    };
    const className2 = clsx_m_default(styles_css_default101.series__rect, {
      [styles_css_default101["series--dimmed"]]: highlightedXValue !== null && !matchesX(highlightedXValue, series.data[i2].x)
    });
    const styleProps = { fill: color2, className: className2 };
    let side = "none";
    if (isRoundedStart && isRoundedEnd) {
      side = "all";
    } else if (!isRoundedStart && !isRoundedEnd) {
      side = "none";
    } else if (isVertical) {
      side = isRoundedStart ? "bottom" : "top";
    } else if (!isRtl) {
      side = isRoundedStart ? "left" : "right";
    } else {
      side = isRoundedStart ? "right" : "left";
    }
    if (side === "all") {
      return import_react283.default.createElement("rect", Object.assign({ key: i2 }, placement, styleProps, { rx }));
    }
    if (side === "none") {
      return import_react283.default.createElement("rect", Object.assign({ key: i2 }, placement, styleProps, { rx: 0 }));
    }
    return import_react283.default.createElement("path", Object.assign({ key: i2, d: createOneSideRoundedRectPath(placement, rx, side) }, styleProps));
  }));
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/line-series.js
var import_react284 = __toESM(require_react());
function LineSeries({ axis, series, color: color2, xScale, yScale, chartAreaClipPath }) {
  var _a2;
  const commonProps = { "aria-hidden": true, stroke: color2, clipPath: `url(#${chartAreaClipPath})` };
  if (series.type === "line") {
    const lineGenerator = line_default().x((d3) => {
      let x3 = xScale.d3Scale(d3.x) || 0;
      if (xScale.isCategorical()) {
        const offset = Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2;
        x3 += offset;
      }
      return x3;
    }).y((d3) => yScale.d3Scale(d3.y) || 0);
    const visibleData = series.data.filter(({ x: x3 }) => xScale.d3Scale(x3) !== void 0);
    return import_react284.default.createElement("path", Object.assign({}, commonProps, { d: lineGenerator(visibleData) || "" }));
  } else if (isYThreshold(series)) {
    const [x1, x22] = xScale.d3Scale.range();
    const y4 = yScale.d3Scale(series.y);
    const coordinates = axis === "x" ? { x1, x2: x22, y1: y4, y2: y4 } : { x1: y4, x2: y4, y1: x1, y2: x22 };
    return import_react284.default.createElement("line", Object.assign({}, commonProps, coordinates));
  } else if (isXThreshold(series)) {
    const [y1, y22] = yScale.d3Scale.range();
    const xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;
    const x3 = ((_a2 = xScale.d3Scale(series.x)) !== null && _a2 !== void 0 ? _a2 : NaN) + xOffset;
    const coordinates = axis === "x" ? { x1: x3, x2: x3, y1, y2: y22 } : { x1: y1, x2: y22, y1: x3, y2: x3 };
    return import_react284.default.createElement("line", Object.assign({}, commonProps, coordinates));
  } else {
    return null;
  }
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/data-series.js
var STROKE_WIDTH = 2;
function DataSeries2({ axis, plotHeight, plotWidth, highlightedGroupIndex, highlightedSeries, stackedBars, isGroupNavigation, visibleSeries, xScale, yScale, isRtl }) {
  const chartAreaClipPath = useUniqueId("awsui-mixed-line-bar-chart__chart-area-");
  const lineAreaClipPath = useUniqueId("awsui-line-chart__chart-area-");
  const stackedBarValues = (0, import_react285.useMemo)(() => {
    if (!stackedBars) {
      return void 0;
    }
    const barData = [];
    visibleSeries.forEach(({ series }) => {
      if (series.type === "bar") {
        barData.push(series.data);
      } else {
        barData.push([]);
      }
    });
    return calculateStackedBarValues(barData);
  }, [visibleSeries, stackedBars]);
  return import_react285.default.createElement(
    import_react285.default.Fragment,
    null,
    import_react285.default.createElement(
      "defs",
      { "aria-hidden": "true" },
      import_react285.default.createElement(
        "clipPath",
        { id: chartAreaClipPath },
        import_react285.default.createElement("rect", { x: 0, y: 0, width: plotWidth, height: plotHeight })
      ),
      import_react285.default.createElement(
        "clipPath",
        { id: lineAreaClipPath },
        import_react285.default.createElement("rect", { x: 0, y: -STROKE_WIDTH / 2, width: plotWidth, height: plotHeight + STROKE_WIDTH })
      )
    ),
    import_react285.default.createElement("g", { "aria-hidden": isGroupNavigation ? true : void 0, role: "group" }, visibleSeries.map(({ series, color: color2 }, index) => {
      const isHighlighted = series === highlightedSeries;
      const isDimmed = !!highlightedSeries && !isHighlighted;
      switch (series.type) {
        case "line":
        case "threshold": {
          return import_react285.default.createElement(
            "g",
            { key: index, role: "group", "aria-label": series.title, className: clsx_m_default(styles_css_default101.series, styles_css_default101[`series--${series.type}`], {
              [styles_css_default101["series--highlighted"]]: isHighlighted,
              [styles_css_default101["series--dimmed"]]: isDimmed
            }) },
            import_react285.default.createElement(LineSeries, { axis, series, color: color2, xScale, yScale, chartAreaClipPath: lineAreaClipPath })
          );
        }
        case "bar":
          return import_react285.default.createElement(BarSeries, { key: index, axis, series, color: color2, totalSeriesCount: visibleSeries.filter((s4) => s4.series.type === "bar").length, seriesIndex: index, xScale, yScale, plotSize: axis === "y" ? plotWidth : plotHeight, highlighted: isHighlighted, dimmed: isDimmed, chartAreaClipPath, stackedBarValues, highlightedGroupIndex, isRtl });
      }
    }))
  );
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/domain.js
function computeDomainX2(series, xScaleType) {
  if (xScaleType === "categorical") {
    return series.reduce((acc, s4) => {
      if (isDataSeries(s4.series)) {
        s4.series.data.forEach(({ x: x3 }) => {
          if (acc.indexOf(x3) === -1) {
            acc.push(x3);
          }
        });
      }
      if (isXThreshold(s4.series)) {
        if (acc.indexOf(s4.series.x) === -1) {
          acc.push(s4.series.x);
        }
      }
      return acc;
    }, []);
  }
  return series.reduce((acc, curr) => {
    if (isYThreshold(curr.series)) {
      return acc;
    }
    if (isXThreshold(curr.series)) {
      const [min3, max3] = acc;
      const newMin = min3 === void 0 || min3 === null || curr.series.x < min3 ? curr.series.x : min3;
      const newMax = max3 === void 0 || max3 === null || max3 < curr.series.x ? curr.series.x : max3;
      return [newMin, newMax];
    }
    if (isDataSeries(curr.series)) {
      return curr.series.data.reduce(([min3, max3], { x: x3 }) => {
        const newMin = min3 === void 0 || min3 === null || x3 < min3 ? x3 : min3;
        const newMax = max3 === void 0 || max3 === null || max3 < x3 ? x3 : max3;
        return [newMin, newMax];
      }, acc);
    }
    return acc;
  }, []);
}
function find(arr, func) {
  for (let i2 = 0; i2 < arr.length; i2++) {
    const found = func(arr[i2]);
    if (found) {
      return arr[i2];
    }
  }
  return null;
}
function computeDomainY2(series, scaleType, stackedBars) {
  let _series = series;
  if (stackedBars) {
    const { positiveData, negativeData } = series.reduce((acc, curr) => {
      if (curr.series.type === "bar") {
        curr.series.data.forEach(({ x: x3, y: y4 }) => {
          const data = y4 < 0 ? acc.negativeData : acc.positiveData;
          const stackedDatum = find(data, (el) => matchesX(el.x, x3));
          if (stackedDatum) {
            stackedDatum.y += y4;
          } else {
            data.push({ x: x3, y: y4 });
          }
          return acc;
        });
      }
      return acc;
    }, {
      positiveData: [],
      negativeData: []
    });
    const stackedSeries = [
      {
        color: "",
        index: NaN,
        series: {
          type: "bar",
          title: "positive",
          data: positiveData
        }
      },
      {
        color: "",
        index: NaN,
        series: {
          type: "bar",
          title: "negative",
          data: negativeData
        }
      }
    ];
    _series = [...stackedSeries, ..._series.filter((s4) => s4.series.type !== "bar")];
  }
  const domain = _series.reduce((acc, curr) => {
    if (isYThreshold(curr.series)) {
      const [min3, max3] = acc;
      const newMin = min3 === void 0 || curr.series.y < min3 ? curr.series.y : min3;
      const newMax = max3 === void 0 || max3 < curr.series.y ? curr.series.y : max3;
      return [newMin, newMax];
    }
    if (isXThreshold(curr.series)) {
      return acc;
    }
    if (isDataSeries(curr.series)) {
      return curr.series.data.reduce(([min3, max3], { y: y4 }) => {
        const newMin = min3 === void 0 || y4 < min3 ? y4 : min3;
        const newMax = max3 === void 0 || max3 < y4 ? y4 : max3;
        return [newMin, newMax];
      }, acc);
    }
    return acc;
  }, [0, 0]);
  if (scaleType === "log" && domain[0] === 0 && domain[1] > 1) {
    return [1, domain[1]];
  }
  return domain;
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/format-highlighted.js
function formatHighlighted({ position, series, xTickFormatter, detailPopoverSeriesContent }) {
  const formattedPosition = xTickFormatter ? xTickFormatter(position) : position.toString();
  const details = [];
  series.forEach((s4) => {
    const detail = getSeriesDetail({ internalSeries: s4, targetX: position, detailPopoverSeriesContent });
    if (detail) {
      details.push(detail);
    }
  });
  return { position: formattedPosition, details };
}
function getSeriesDetail({ internalSeries, targetX, detailPopoverSeriesContent }) {
  var _a2;
  const { series, color: color2 } = internalSeries;
  if (isXThreshold(series)) {
    return series.x === targetX ? {
      key: series.title,
      value: "",
      color: color2,
      markerType: "dashed"
    } : null;
  }
  if (isYThreshold(series)) {
    return {
      key: series.title,
      value: series.valueFormatter ? series.valueFormatter(series.y) : series.y,
      color: color2,
      markerType: "dashed"
    };
  }
  if (isDataSeries(series)) {
    for (const datum of series.data) {
      if (matchesX(targetX, datum.x)) {
        const customContent = detailPopoverSeriesContent ? detailPopoverSeriesContent({ series, x: targetX, y: datum.y }) : void 0;
        const hasSubItems = !!((_a2 = customContent === null || customContent === void 0 ? void 0 : customContent.subItems) === null || _a2 === void 0 ? void 0 : _a2.length);
        const isExpandable = (customContent === null || customContent === void 0 ? void 0 : customContent.expandable) && hasSubItems;
        const isKeyString = typeof (customContent === null || customContent === void 0 ? void 0 : customContent.key) === "string";
        const key2 = (customContent === null || customContent === void 0 ? void 0 : customContent.key) && (!isExpandable || isKeyString) ? customContent.key : series.title;
        if ((customContent === null || customContent === void 0 ? void 0 : customContent.expandable) && !hasSubItems) {
          warnOnce("MixedLineBarChart", "`expandable` was set to `true` for a series without sub-items. This property will be ignored.");
        }
        if (isExpandable && !isKeyString) {
          warnOnce("MixedLineBarChart", "A ReactNode was used for the key of an expandable series. The series title will be used instead because nested interactive elements can cause accessiblity issues.");
        }
        if (!isKeyString && !isExpandable && (customContent === null || customContent === void 0 ? void 0 : customContent.value) && typeof customContent.value !== "string") {
          warnOnce("MixedLineBarChart", "Use a ReactNode for the key or the value of a series, but not for both. It is not recommended to use links for key and value at the same time.");
        }
        return {
          key: key2,
          value: (customContent === null || customContent === void 0 ? void 0 : customContent.value) || (series.valueFormatter ? series.valueFormatter(datum.y, targetX) : datum.y),
          color: color2,
          markerType: series.type === "line" ? "line" : "rectangle",
          subItems: customContent === null || customContent === void 0 ? void 0 : customContent.subItems,
          expandableId: isExpandable ? series.title : void 0
        };
      }
    }
  }
  return null;
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/hooks/use-mouse-hover.js
var MAX_HOVER_MARGIN2 = 6;
var POPOVER_DEADZONE2 = 12;
function useMouseHover({ plotRef, popoverRef, scaledSeries, barGroups, highlightPoint, highlightGroup, clearHighlightedSeries, isGroupNavigation, isHandlersDisabled, highlightX }) {
  const isMouseOverPopover = (event) => {
    var _a2;
    if ((_a2 = popoverRef.current) === null || _a2 === void 0 ? void 0 : _a2.firstChild) {
      const popoverPosition = popoverRef.current.firstChild.getBoundingClientRect();
      if (event.clientX > popoverPosition.x - POPOVER_DEADZONE2 && event.clientX < popoverPosition.x + popoverPosition.width + POPOVER_DEADZONE2 && event.clientY > popoverPosition.y - POPOVER_DEADZONE2 && event.clientY < popoverPosition.y + popoverPosition.height + POPOVER_DEADZONE2) {
        return true;
      }
    }
    return false;
  };
  const onSeriesMouseMove = (event) => {
    var _a2, _b;
    const svgRect = event.target.getBoundingClientRect();
    const offsetX = event.clientX - svgRect.left;
    const closestX = scaledSeries.map((v) => v.x).reduce((prev, curr) => Math.abs(curr - offsetX) < Math.abs(prev - offsetX) ? curr : prev, -Infinity);
    if (isFinite(closestX)) {
      const offsetY = event.clientY - svgRect.top;
      const closestY = scaledSeries.filter((v) => v.x === closestX || isYThreshold(v.series)).map((v) => v.y).reduce((prev, curr) => Math.abs(curr - offsetY) < Math.abs(prev - offsetY) ? curr : prev, -Infinity);
      if (isFinite(closestY) && Math.abs(offsetX - closestX) < MAX_HOVER_MARGIN2 && Math.abs(offsetY - closestY) < MAX_HOVER_MARGIN2) {
        const [{ color: color2, datum, series }] = scaledSeries.filter((s4) => (s4.x === closestX || isYThreshold(s4.series)) && s4.y === closestY);
        highlightPoint({ x: closestX, y: closestY, color: color2, datum, series });
      } else {
        let datumX = null;
        for (const point5 of scaledSeries) {
          if (point5.x === closestX) {
            datumX = (_b = (_a2 = point5.datum) === null || _a2 === void 0 ? void 0 : _a2.x) !== null && _b !== void 0 ? _b : null;
            break;
          }
        }
        highlightX({ scaledX: closestX, label: datumX });
      }
    }
  };
  const onGroupMouseMove = (event) => {
    const svgRect = event.target.getBoundingClientRect();
    const offsetX = event.clientX - svgRect.left;
    const offsetY = event.clientY - svgRect.top;
    for (let groupIndex = 0; groupIndex < barGroups.length; groupIndex++) {
      const { position: { x: x3, y: y4, width, height } } = barGroups[groupIndex];
      if (x3 <= offsetX && offsetX <= x3 + width && y4 <= offsetY && offsetY <= y4 + height) {
        highlightGroup(groupIndex);
        return;
      }
    }
    clearHighlightedSeries();
  };
  const onSVGMouseMove = (event) => {
    if (event.target === plotRef.current.svg && !isHandlersDisabled && !isMouseOverPopover(event)) {
      if (isGroupNavigation) {
        onGroupMouseMove(event);
      } else if (scaledSeries.length > 0) {
        onSeriesMouseMove(event);
      }
    }
  };
  const onSVGMouseOut = (event) => {
    if (isHandlersDisabled || isMouseOverPopover(event)) {
      return;
    }
    if (!nodeContains(plotRef.current.svg, event.relatedTarget) || event.relatedTarget && event.relatedTarget.classList.contains(styles_css_default101.series)) {
      highlightX(null);
      clearHighlightedSeries();
    }
  };
  const onPopoverLeave = (event) => {
    if (!isHandlersDisabled && nodeContains(plotRef.current.svg, event.relatedTarget)) {
      highlightX(null);
      clearHighlightedSeries();
    }
  };
  return { onSVGMouseMove, onSVGMouseOut, onPopoverLeave };
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/hooks/use-navigation.js
var import_react286 = __toESM(require_react());
function useNavigation({ series, visibleSeries, scaledSeries, barGroups, xScale, yScale, highlightedPoint, highlightedGroupIndex, highlightedSeries, isHandlersDisabled, pinPopover, highlightSeries, highlightGroup, highlightPoint, highlightX, verticalMarkerX, isRtl, horizontalBars }) {
  const [targetX, setTargetX] = (0, import_react286.useState)(null);
  const [xIndex, setXIndex] = (0, import_react286.useState)(0);
  const isGroupNavigation = (0, import_react286.useMemo)(() => visibleSeries.some(({ series: series2 }) => series2.type === "bar"), [visibleSeries]);
  const { navigableSeries } = (0, import_react286.useMemo)(() => findNavigableSeries(visibleSeries), [visibleSeries]);
  const containsMultipleSeries = navigableSeries.length > 1;
  const onBarGroupFocus = () => {
    const groupIndex = highlightedGroupIndex !== null && highlightedGroupIndex !== void 0 ? highlightedGroupIndex : 0;
    setTargetX(xScale.domain[groupIndex]);
    highlightGroup(groupIndex);
  };
  const onLineFocus = () => {
    var _a2;
    if (verticalMarkerX === null) {
      const index = !isRtl ? 0 : allUniqueX.length - 1;
      if (containsMultipleSeries) {
        moveToLineGroupIndex(index);
      } else {
        moveBetweenSeries(0, (_a2 = allUniqueX[index].datum) === null || _a2 === void 0 ? void 0 : _a2.x);
      }
    }
  };
  const onFocus = () => {
    if (isGroupNavigation) {
      onBarGroupFocus();
    } else {
      onLineFocus();
    }
  };
  const allUniqueX = (0, import_react286.useMemo)(() => {
    const result = [];
    for (let i2 = 0; i2 < scaledSeries.length; i2 += 1) {
      const point5 = scaledSeries[i2];
      if (point5 !== void 0 && (!result.length || result[result.length - 1].scaledX !== point5.x)) {
        result.push({ scaledX: point5.x, datum: point5.datum });
      }
    }
    return result;
  }, [scaledSeries]);
  const moveBetweenSeries = (0, import_react286.useCallback)((direction, startFrom) => {
    var _a2, _b, _c, _d, _e;
    if (isGroupNavigation) {
      return;
    }
    const xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;
    const MAX_SERIES_INDEX = navigableSeries.length - 1;
    let previousSeriesIndex = -1;
    if (highlightedSeries) {
      previousSeriesIndex = navigableSeries.indexOf(highlightedSeries);
    }
    const firstPossibleIndex = containsMultipleSeries ? -1 : 0;
    let nextSeriesIndex = 0;
    if (previousSeriesIndex !== null) {
      nextSeriesIndex = previousSeriesIndex + direction;
      if (nextSeriesIndex > MAX_SERIES_INDEX) {
        nextSeriesIndex = firstPossibleIndex;
      } else if (nextSeriesIndex < firstPossibleIndex) {
        nextSeriesIndex = MAX_SERIES_INDEX;
      }
    }
    if (nextSeriesIndex === -1) {
      highlightSeries(null);
      highlightPoint(null);
      return;
    }
    const nextSeries = navigableSeries[nextSeriesIndex];
    const nextInternalSeries = series.filter(({ series: series2 }) => series2 === nextSeries)[0];
    const actualTargetX = (_a2 = targetX !== null && targetX !== void 0 ? targetX : startFrom) !== null && _a2 !== void 0 ? _a2 : null;
    let targetXPoint = ((_b = xScale.d3Scale(actualTargetX)) !== null && _b !== void 0 ? _b : NaN) + xOffset;
    if (!isFinite(targetXPoint)) {
      targetXPoint = 0;
    }
    if (nextSeries.type === "line") {
      const nextScaledSeries = scaledSeries.filter((it) => it.series === nextSeries);
      const closestNextSeriesPoint = nextScaledSeries.reduce((prev, curr) => Math.abs(curr.x - targetXPoint) < Math.abs(prev.x - targetXPoint) ? curr : prev, { x: -Infinity, y: -Infinity });
      highlightPoint(Object.assign(Object.assign({}, closestNextSeriesPoint), { color: nextInternalSeries.color, series: nextSeries }));
    } else if (isYThreshold(nextSeries)) {
      const scaledTargetIndex = scaledSeries.map((it) => {
        var _a3;
        return ((_a3 = it.datum) === null || _a3 === void 0 ? void 0 : _a3.x) || null;
      }).indexOf(actualTargetX);
      highlightPoint({
        x: targetXPoint,
        y: (_c = yScale.d3Scale(nextSeries.y)) !== null && _c !== void 0 ? _c : NaN,
        color: nextInternalSeries.color,
        series: nextSeries,
        datum: (_d = scaledSeries[scaledTargetIndex]) === null || _d === void 0 ? void 0 : _d.datum
      });
    } else if (isXThreshold(nextSeries)) {
      highlightPoint({
        x: (_e = xScale.d3Scale(nextSeries.x)) !== null && _e !== void 0 ? _e : NaN,
        y: yScale.d3Scale.range()[0],
        color: nextInternalSeries.color,
        series: nextSeries,
        datum: { x: nextSeries.x, y: NaN }
      });
    }
  }, [
    isGroupNavigation,
    xScale,
    navigableSeries,
    highlightedSeries,
    containsMultipleSeries,
    highlightSeries,
    highlightPoint,
    series,
    targetX,
    scaledSeries,
    yScale
  ]);
  const moveWithinSeries = (0, import_react286.useCallback)((direction) => {
    var _a2;
    const series2 = highlightedSeries || visibleSeries[0].series;
    if (series2.type === "line" || isYThreshold(series2)) {
      const targetScaledSeries = scaledSeries.filter((it) => it.series === series2);
      const previousPoint = highlightedPoint || targetScaledSeries[0];
      const indexOfPreviousPoint = targetScaledSeries.map((it) => it.x).indexOf(previousPoint.x);
      const nextPointIndex = circleIndex2(indexOfPreviousPoint + direction, [0, targetScaledSeries.length - 1]);
      const nextPoint = targetScaledSeries[nextPointIndex];
      setTargetX(((_a2 = nextPoint.datum) === null || _a2 === void 0 ? void 0 : _a2.x) || null);
      setXIndex(nextPointIndex);
      highlightPoint(nextPoint);
    } else if (series2.type === "bar") {
      const xDomain = xScale.domain;
      const MAX_GROUP_INDEX = xDomain.length - 1;
      let nextGroupIndex = 0;
      if (highlightedGroupIndex !== null) {
        if (isRtl && !horizontalBars) {
          direction = -direction;
        }
        nextGroupIndex = highlightedGroupIndex + direction;
        if (nextGroupIndex > MAX_GROUP_INDEX) {
          nextGroupIndex = 0;
        } else if (nextGroupIndex < 0) {
          nextGroupIndex = MAX_GROUP_INDEX;
        }
      }
      const nextDomainIndex = nextValidDomainIndex(nextGroupIndex, barGroups, direction);
      setTargetX(xDomain[nextDomainIndex]);
      highlightGroup(nextDomainIndex);
    }
  }, [
    highlightedSeries,
    visibleSeries,
    scaledSeries,
    highlightedPoint,
    highlightPoint,
    xScale.domain,
    highlightedGroupIndex,
    barGroups,
    highlightGroup,
    isRtl,
    horizontalBars
  ]);
  const moveToLineGroupIndex = (0, import_react286.useCallback)((index) => {
    var _a2, _b, _c, _d;
    const point5 = allUniqueX[index];
    setXIndex(index);
    setTargetX(((_a2 = point5.datum) === null || _a2 === void 0 ? void 0 : _a2.x) || null);
    highlightX({ scaledX: (_b = point5 === null || point5 === void 0 ? void 0 : point5.scaledX) !== null && _b !== void 0 ? _b : null, label: (_d = (_c = point5.datum) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : null });
  }, [allUniqueX, highlightX]);
  const moveWithinXAxis = (0, import_react286.useCallback)((direction) => {
    if (highlightedSeries || isGroupNavigation) {
      moveWithinSeries(direction);
    } else {
      const nextPointGroupIndex = circleIndex2(xIndex + direction, [0, allUniqueX.length - 1]);
      moveToLineGroupIndex(nextPointGroupIndex);
    }
  }, [highlightedSeries, isGroupNavigation, moveWithinSeries, xIndex, allUniqueX.length, moveToLineGroupIndex]);
  const onKeyDown = (0, import_react286.useCallback)((event) => {
    const keyCode = event.keyCode;
    if (keyCode !== KeyCode2.up && keyCode !== KeyCode2.right && keyCode !== KeyCode2.down && keyCode !== KeyCode2.left && keyCode !== KeyCode2.space && keyCode !== KeyCode2.enter) {
      return;
    }
    event.preventDefault();
    if (isHandlersDisabled) {
      return;
    }
    if (keyCode === KeyCode2.down || keyCode === KeyCode2.up) {
      moveBetweenSeries(keyCode === KeyCode2.down ? 1 : -1);
    } else if (keyCode === KeyCode2.left || keyCode === KeyCode2.right) {
      moveWithinXAxis(keyCode === KeyCode2.right ? 1 : -1);
    } else if (keyCode === KeyCode2.enter || keyCode === KeyCode2.space) {
      pinPopover();
    }
  }, [isHandlersDisabled, moveBetweenSeries, moveWithinXAxis, pinPopover]);
  return { isGroupNavigation, onFocus, onKeyDown, xIndex };
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/hooks/use-popover.js
var import_react287 = __toESM(require_react());
var REOPEN_DELAY_MS = 50;
function usePopover() {
  const dismissedTimeRef = (0, import_react287.useRef)(Date.now() - REOPEN_DELAY_MS);
  const [state, setState] = (0, import_react287.useState)("closed");
  const isPopoverOpen = state !== "closed";
  const isPopoverPinned = state === "pinned";
  const showPopover = (0, import_react287.useCallback)(() => {
    if (Date.now() - dismissedTimeRef.current > REOPEN_DELAY_MS) {
      setState("open");
    }
  }, []);
  const pinPopover = (0, import_react287.useCallback)(() => setState("pinned"), []);
  const hidePopover = (0, import_react287.useCallback)(() => setState("closed"), []);
  const dismissPopover = (0, import_react287.useCallback)(() => {
    setState((prev) => {
      if (prev === "pinned") {
        dismissedTimeRef.current = Date.now();
      }
      return "closed";
    });
  }, []);
  return { isPopoverOpen, isPopoverPinned, showPopover, pinPopover, hidePopover, dismissPopover };
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/make-scaled-bar-groups.js
function makeScaledBarGroups(series, xScale, plotWidth, plotHeight, axis) {
  if (!xScale.isCategorical()) {
    return [];
  }
  return xScale.domain.map((x3) => {
    const scaledX = xScale.d3Scale(x3);
    const isValid2 = typeof scaledX !== "undefined" && isFinite(scaledX);
    return {
      x: x3,
      isValid: isValid2,
      hasData: series.some(({ series: series2 }) => {
        if (isYThreshold(series2)) {
          return true;
        }
        if (isXThreshold(series2)) {
          return false;
        }
        if (isDataSeries(series2)) {
          return series2.data.some((datum) => matchesX(datum.x, x3));
        }
        return false;
      }),
      position: axis === "x" ? {
        x: 0,
        y: isValid2 ? scaledX || 0 : 0,
        width: plotWidth,
        height: xScale.d3Scale.bandwidth()
      } : {
        x: isValid2 ? scaledX || 0 : 0,
        y: 0,
        width: xScale.d3Scale.bandwidth(),
        height: plotHeight
      }
    };
  });
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/make-scaled-series.js
function makeScaledSeries(allSeries, xScale, yScale) {
  const xOffset = xScale.isCategorical() ? Math.max(0, xScale.d3Scale.bandwidth() - 1) / 2 : 0;
  const scaleX = (x3) => (xScale.d3Scale(x3) || 0) + xOffset;
  const scaleY = (y4) => yScale.d3Scale(y4) || 0;
  const allX = getAllX(allSeries);
  function mergeLineSeriesPointsWithXThresholds(scaledPoints, xThresholdSeries, xThresholdSeriesColor) {
    var _a2, _b;
    const x3 = scaleX(xThresholdSeries.x);
    let bisectIndex = -1;
    for (let i2 = 0; i2 < scaledPoints.length - 1; i2++) {
      if (scaledPoints[i2].x < x3 && x3 < scaledPoints[i2 + 1].x) {
        bisectIndex = i2;
        break;
      }
    }
    if (bisectIndex !== -1) {
      const prevY = ((_a2 = scaledPoints[bisectIndex].datum) === null || _a2 === void 0 ? void 0 : _a2.y) || 0;
      const nextY = ((_b = scaledPoints[bisectIndex + 1].datum) === null || _b === void 0 ? void 0 : _b.y) || 0;
      const averageY = (prevY + nextY) / 2;
      scaledPoints.push({
        x: x3,
        y: scaleY(averageY),
        datum: { x: xThresholdSeries.x, y: NaN },
        series: scaledPoints[bisectIndex].series,
        color: xThresholdSeriesColor
      });
    }
  }
  const scaledSeriesX = allSeries.map(({ series, color: color2 }) => {
    const scaledPoints = [];
    if (series.type === "line") {
      for (const datum of series.data) {
        scaledPoints.push({ x: scaleX(datum.x), y: scaleY(datum.y), datum, series, color: color2 });
      }
      scaledPoints.sort((s1, s22) => s1.x - s22.x);
      for (const otherSeries of allSeries) {
        if (isXThreshold(otherSeries.series)) {
          mergeLineSeriesPointsWithXThresholds(scaledPoints, otherSeries.series, otherSeries.color);
        }
      }
    } else if (isYThreshold(series)) {
      for (const x3 of allX) {
        scaledPoints.push({ x: scaleX(x3), y: scaleY(series.y), datum: { x: x3, y: series.y }, series, color: color2 });
      }
      if (allX.length === 0) {
        scaledPoints.push({ x: NaN, y: scaleY(series.y), series, color: color2 });
      }
    } else if (isXThreshold(series)) {
      scaledPoints.push({ x: scaleX(series.x), y: NaN, datum: { x: series.x, y: NaN }, series, color: color2 });
    }
    return scaledPoints;
  });
  return flatten(scaledSeriesX).sort((s1, s22) => s1.x - s22.x);
}
function getAllX(series) {
  const addDataXSet = /* @__PURE__ */ new Set();
  for (const { series: s4 } of series) {
    switch (s4.type) {
      // Add all X values from data series.
      case "bar":
      case "line":
        for (const d3 of s4.data) {
          addDataXSet.add(d3.x);
        }
        break;
      case "threshold":
        if (isXThreshold(s4)) {
          addDataXSet.add(s4.x);
        }
        break;
    }
  }
  const allDataX = [];
  addDataXSet.forEach((x3) => allDataX.push(x3));
  return allDataX;
}
function flatten(arrays) {
  const merged = [];
  for (const array of arrays) {
    for (const item of array) {
      merged.push(item);
    }
  }
  return merged;
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/chart-container.js
var INLINE_START_LABELS_MARGIN2 = 16;
var BLOCK_END_LABELS_OFFSET2 = 12;
var fallbackContainerWidth = 500;
function ChartContainer2(_a2) {
  var _b, _c;
  var { fitHeight, hasFilters, height: explicitPlotHeight, series, visibleSeries, highlightedSeries, onHighlightChange, highlightedPoint, setHighlightedPoint, highlightedGroupIndex, setHighlightedGroupIndex, detailPopoverFooter, detailPopoverSize = "medium", stackedBars = false, horizontalBars = false, xScaleType, yScaleType, xTickFormatter, yTickFormatter, emphasizeBaselineAxis, xTitle, yTitle, ariaLabel, ariaLabelledby, ariaDescription, i18nStrings = {}, detailPopoverSeriesContent } = _a2, props2 = __rest(_a2, ["fitHeight", "hasFilters", "height", "series", "visibleSeries", "highlightedSeries", "onHighlightChange", "highlightedPoint", "setHighlightedPoint", "highlightedGroupIndex", "setHighlightedGroupIndex", "detailPopoverFooter", "detailPopoverSize", "stackedBars", "horizontalBars", "xScaleType", "yScaleType", "xTickFormatter", "yTickFormatter", "emphasizeBaselineAxis", "xTitle", "yTitle", "ariaLabel", "ariaLabelledby", "ariaDescription", "i18nStrings", "detailPopoverSeriesContent"]);
  const plotRef = (0, import_react288.useRef)(null);
  const verticalMarkerRef = (0, import_react288.useRef)(null);
  const [inlineStartLabelsWidth, setInlineStartLabelsWidth] = (0, import_react288.useState)(0);
  const [verticalMarkerX, setVerticalMarkerX] = (0, import_react288.useState)(null);
  const [detailsPopoverText, setDetailsPopoverText] = (0, import_react288.useState)("");
  const [containerWidth, containerMeasureRef] = useContainerWidth(fallbackContainerWidth);
  const maxInlineStartLabelsWidth = Math.round(containerWidth / 2);
  const plotWidth = containerWidth ? (
    // Calculate the minimum between inlineStartLabelsWidth and maxInlineStartLabelsWidth for extra safety because inlineStarteLabelsWidth could be out of date
    Math.max(0, containerWidth - Math.min(inlineStartLabelsWidth, maxInlineStartLabelsWidth) - INLINE_START_LABELS_MARGIN2)
  ) : fallbackContainerWidth;
  const containerRefObject = (0, import_react288.useRef)(null);
  const containerRef = useMergeRefs(containerMeasureRef, containerRefObject);
  const popoverRef = (0, import_react288.useRef)(null);
  const isRtl = getIsRtl(containerRefObject.current);
  const xDomain = props2.xDomain || computeDomainX2(series, xScaleType);
  const yDomain = props2.yDomain || computeDomainY2(series, yScaleType, stackedBars);
  const linesOnly = series.every(({ series: series2 }) => series2.type === "line" || series2.type === "threshold");
  function getXAxisProps(size, range3) {
    const tickCount = getXTickCount(size);
    const scale = new ChartScale(xScaleType, xDomain, range3, linesOnly);
    const ticks2 = createXTicks(scale, tickCount);
    return {
      axis: "x",
      tickCount,
      scale,
      ticks: ticks2,
      tickFormatter: xTickFormatter,
      title: xTitle,
      ariaRoleDescription: i18nStrings.xAxisAriaRoleDescription
    };
  }
  function getYAxisProps(size, range3) {
    const tickCount = getYTickCount(size);
    const scale = new NumericChartScale(yScaleType, yDomain, range3, props2.yDomain ? null : tickCount);
    const ticks2 = createYTicks(scale, tickCount);
    return {
      axis: "y",
      tickCount,
      scale,
      ticks: ticks2,
      tickFormatter: yTickFormatter,
      title: yTitle,
      ariaRoleDescription: i18nStrings.yAxisAriaRoleDescription
    };
  }
  const bottomAxisProps = !horizontalBars ? getXAxisProps(plotWidth, !isRtl ? [0, plotWidth] : [plotWidth, 0]) : getYAxisProps(plotWidth, !isRtl ? [0, plotWidth] : [plotWidth, 0]);
  const blockEndLabelsProps = useBLockEndLabels(Object.assign({}, bottomAxisProps));
  const plotMeasureRef = (0, import_react288.useRef)(null);
  const measuredHeight = useHeightMeasure(() => plotMeasureRef.current, !fitHeight);
  const plotHeight = fitHeight ? measuredHeight !== null && measuredHeight !== void 0 ? measuredHeight : 0 : explicitPlotHeight;
  const leftAxisProps = !horizontalBars ? getYAxisProps(plotHeight, [plotHeight, 0]) : getXAxisProps(plotHeight, [0, plotHeight]);
  const xAxisProps = bottomAxisProps.axis === "x" ? bottomAxisProps : leftAxisProps.axis === "x" ? leftAxisProps : null;
  const yAxisProps = bottomAxisProps.axis === "y" ? bottomAxisProps : leftAxisProps.axis === "y" ? leftAxisProps : null;
  if (!xAxisProps || !yAxisProps) {
    throw new Error("Invariant violation: invalid chart axes.");
  }
  const highlightedPointRef = (0, import_react288.useRef)(null);
  const highlightedGroupRef = (0, import_react288.useRef)(null);
  const x3 = !horizontalBars ? "x" : "y";
  const y4 = !horizontalBars ? "y" : "x";
  const scaledSeries = makeScaledSeries(visibleSeries, xAxisProps.scale, yAxisProps.scale);
  const barGroups = makeScaledBarGroups(visibleSeries, xAxisProps.scale, plotWidth, plotHeight, y4);
  const { isPopoverOpen, isPopoverPinned, showPopover, pinPopover, hidePopover, dismissPopover } = usePopover();
  const [isHandlersDisabled, setHandlersDisabled] = (0, import_react288.useState)(false);
  (0, import_react288.useEffect)(() => {
    if (isPopoverPinned) {
      setHandlersDisabled(true);
    } else {
      const timeoutId = setTimeout(() => setHandlersDisabled(false), 25);
      return () => clearTimeout(timeoutId);
    }
  }, [isPopoverPinned]);
  const highlightSeries = (0, import_react288.useCallback)((series2) => {
    if (series2 !== highlightedSeries) {
      onHighlightChange(series2);
    }
  }, [highlightedSeries, onHighlightChange]);
  const highlightPoint = (0, import_react288.useCallback)((point6) => {
    var _a3, _b2;
    setHighlightedGroupIndex(null);
    setHighlightedPoint(point6);
    if (point6) {
      highlightSeries(point6.series);
      setVerticalMarkerX({ scaledX: point6.x, label: (_b2 = (_a3 = point6.datum) === null || _a3 === void 0 ? void 0 : _a3.x) !== null && _b2 !== void 0 ? _b2 : null });
      showPopover();
    }
  }, [setHighlightedGroupIndex, setHighlightedPoint, highlightSeries, showPopover]);
  const clearAllHighlights = (0, import_react288.useCallback)(() => {
    setHighlightedPoint(null);
    highlightSeries(null);
    setHighlightedGroupIndex(null);
  }, [highlightSeries, setHighlightedGroupIndex, setHighlightedPoint]);
  const highlightX = (0, import_react288.useCallback)((marker) => {
    if (marker) {
      clearAllHighlights();
    }
    setVerticalMarkerX(marker);
    showPopover();
  }, [clearAllHighlights, showPopover]);
  const highlightGroup = (0, import_react288.useCallback)((groupIndex) => {
    highlightSeries(null);
    setHighlightedPoint(null);
    setHighlightedGroupIndex(groupIndex);
    showPopover();
  }, [highlightSeries, setHighlightedPoint, setHighlightedGroupIndex, showPopover]);
  const clearHighlightedSeries = (0, import_react288.useCallback)(() => {
    clearAllHighlights();
    hidePopover();
  }, [hidePopover, clearAllHighlights]);
  const _d = useNavigation({
    series,
    visibleSeries,
    scaledSeries,
    barGroups,
    xScale: xAxisProps.scale,
    yScale: yAxisProps.scale,
    highlightedPoint,
    highlightedGroupIndex,
    highlightedSeries,
    isHandlersDisabled,
    pinPopover,
    highlightSeries,
    highlightGroup,
    highlightPoint,
    highlightX,
    clearHighlightedSeries,
    verticalMarkerX,
    isRtl: !!isRtl,
    horizontalBars
  }), { isGroupNavigation } = _d, handlers = __rest(_d, ["isGroupNavigation"]);
  const { onSVGMouseMove, onSVGMouseOut, onPopoverLeave } = useMouseHover({
    scaledSeries,
    barGroups,
    plotRef,
    popoverRef,
    highlightPoint,
    highlightGroup,
    clearHighlightedSeries,
    isGroupNavigation,
    isHandlersDisabled,
    highlightX
  });
  const highlightedX = (0, import_react288.useMemo)(() => {
    var _a3, _b2, _c2;
    if (highlightedGroupIndex !== null) {
      return (_a3 = barGroups[highlightedGroupIndex]) === null || _a3 === void 0 ? void 0 : _a3.x;
    }
    if (verticalMarkerX !== null) {
      return verticalMarkerX.label;
    }
    return (_c2 = (_b2 = highlightedPoint === null || highlightedPoint === void 0 ? void 0 : highlightedPoint.datum) === null || _b2 === void 0 ? void 0 : _b2.x) !== null && _c2 !== void 0 ? _c2 : null;
  }, [highlightedPoint, verticalMarkerX, highlightedGroupIndex, barGroups]);
  (0, import_react288.useEffect)(() => {
    const onKeyDown = (event) => {
      if (event.key === "Escape") {
        dismissPopover();
      }
    };
    document.addEventListener("keydown", onKeyDown);
    return () => document.removeEventListener("keydown", onKeyDown);
  }, [dismissPopover]);
  const onPopoverDismiss = (outsideClick) => {
    dismissPopover();
    if (!outsideClick) {
      setTimeout(() => {
        var _a3, _b2;
        const isSomeElementHighlighted = !!(highlightedPoint || highlightedGroupIndex !== null || verticalMarkerX);
        if (isSomeElementHighlighted) {
          (_a3 = plotRef.current) === null || _a3 === void 0 ? void 0 : _a3.focusApplication();
        } else {
          (_b2 = plotRef.current) === null || _b2 === void 0 ? void 0 : _b2.focusPlot();
        }
      }, 0);
    } else {
      clearAllHighlights();
      setVerticalMarkerX(null);
    }
  };
  const onSVGClick = (e3) => {
    if (isPopoverOpen) {
      if (isPopoverPinned) {
        dismissPopover();
      } else {
        pinPopover();
        e3.preventDefault();
      }
    } else {
      showPopover();
    }
  };
  const onApplicationFocus = (event, trigger) => {
    if (trigger === "keyboard") {
      handlers.onFocus();
    } else {
    }
  };
  const onApplicationBlur = (event) => {
    const blurTarget = event.relatedTarget || event.target;
    if (blurTarget === null || !(blurTarget instanceof Element) || !nodeBelongs2(containerRefObject.current, blurTarget)) {
      clearHighlightedSeries();
      setVerticalMarkerX(null);
      if (isPopoverOpen && !isPopoverPinned) {
        dismissPopover();
      }
    }
  };
  const onSVGKeyDown = handlers.onKeyDown;
  const xOffset = xAxisProps.scale.isCategorical() ? Math.max(0, xAxisProps.scale.d3Scale.bandwidth() - 1) / 2 : 0;
  let verticalLineX = null;
  if (verticalMarkerX !== null) {
    verticalLineX = verticalMarkerX.scaledX;
  } else if (isGroupNavigation && highlightedGroupIndex !== null) {
    const x4 = (_c = xAxisProps.scale.d3Scale((_b = barGroups[highlightedGroupIndex]) === null || _b === void 0 ? void 0 : _b.x)) !== null && _c !== void 0 ? _c : null;
    if (x4 !== null) {
      verticalLineX = xOffset + x4;
    }
  }
  const point5 = (0, import_react288.useMemo)(() => highlightedPoint ? {
    key: `${highlightedPoint.x}-${highlightedPoint.y}`,
    x: highlightedPoint.x,
    y: highlightedPoint.y,
    color: highlightedPoint.color
  } : null, [highlightedPoint]);
  const verticalMarkers = (0, import_react288.useMemo)(() => verticalLineX !== null ? scaledSeries.filter(({ x: x4, y: y5 }) => (x4 === verticalLineX || isNaN(x4)) && !isNaN(y5)).map(({ x: x4, y: y5, color: color2 }, index) => ({
    key: `${index}-${x4}-${y5}`,
    x: !horizontalBars ? verticalLineX || 0 : y5,
    y: !horizontalBars ? y5 : verticalLineX || 0,
    color: color2
  })) : [], [scaledSeries, verticalLineX, horizontalBars]);
  const highlightedElementRef = isGroupNavigation ? highlightedGroupRef : highlightedPoint ? highlightedPointRef : verticalMarkerRef;
  const highlightDetails = (0, import_react288.useMemo)(() => {
    if (highlightedX === null) {
      return null;
    }
    if (highlightedPoint) {
      const seriesToShow = visibleSeries.filter((series2) => series2.series === (highlightedPoint === null || highlightedPoint === void 0 ? void 0 : highlightedPoint.series) || isXThreshold(series2.series));
      return formatHighlighted({
        position: highlightedX,
        series: seriesToShow,
        xTickFormatter,
        detailPopoverSeriesContent
      });
    }
    return formatHighlighted({
      position: highlightedX,
      series: visibleSeries,
      xTickFormatter,
      detailPopoverSeriesContent
    });
  }, [highlightedX, highlightedPoint, visibleSeries, xTickFormatter, detailPopoverSeriesContent]);
  const detailPopoverFooterContent = (0, import_react288.useMemo)(() => detailPopoverFooter && highlightedX ? detailPopoverFooter(highlightedX) : null, [detailPopoverFooter, highlightedX]);
  const activeAriaLabel = highlightDetails && detailsPopoverText ? `${highlightDetails.position}, ${detailsPopoverText}` : "";
  const activeLiveRegion = activeAriaLabel && !highlightedPoint && highlightedGroupIndex === null ? activeAriaLabel : "";
  const isLineXKeyboardFocused = !highlightedPoint && verticalMarkerX;
  const isRefresh = useVisualRefresh();
  return import_react288.default.createElement(CartesianChartContainer, { ref: containerRef, minHeight: explicitPlotHeight + blockEndLabelsProps.height, fitHeight: !!fitHeight, hasFilters, leftAxisLabel: import_react288.default.createElement(axis_label_default, { axis: y4, position: "left", title: leftAxisProps.title }), leftAxisLabelMeasure: import_react288.default.createElement(labels_measure_default, { ticks: leftAxisProps.ticks, scale: leftAxisProps.scale, tickFormatter: leftAxisProps.tickFormatter, autoWidth: setInlineStartLabelsWidth, maxLabelsWidth: maxInlineStartLabelsWidth }), bottomAxisLabel: import_react288.default.createElement(axis_label_default, { axis: x3, position: "bottom", title: bottomAxisProps.title }), chartPlot: import_react288.default.createElement(
    chart_plot_default,
    { ref: plotRef, width: "100%", height: fitHeight ? `calc(100% - ${blockEndLabelsProps.height}px)` : plotHeight, offsetBottom: blockEndLabelsProps.height, isClickable: isPopoverOpen && !isPopoverPinned, ariaLabel, ariaLabelledby, ariaDescription, ariaRoleDescription: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.chartAriaRoleDescription, ariaLiveRegion: activeLiveRegion, activeElementRef: highlightedElementRef, activeElementKey: activeAriaLabel, activeElementFocusOffset: isGroupNavigation ? 0 : isLineXKeyboardFocused ? { x: 8, y: 0 } : 3, onMouseMove: onSVGMouseMove, onMouseOut: onSVGMouseOut, onClick: onSVGClick, onApplicationFocus, onApplicationBlur, onKeyDown: onSVGKeyDown },
    import_react288.default.createElement("line", { ref: plotMeasureRef, x1: "0", x2: "0", y1: "0", y2: "100%", stroke: "transparent", strokeWidth: 1, style: { pointerEvents: "none" } }),
    import_react288.default.createElement(inline_start_labels_default, { axis: y4, ticks: leftAxisProps.ticks, scale: leftAxisProps.scale, tickFormatter: leftAxisProps.tickFormatter, title: leftAxisProps.title, ariaRoleDescription: leftAxisProps.ariaRoleDescription, maxLabelsWidth: maxInlineStartLabelsWidth, plotWidth, plotHeight }),
    horizontalBars && import_react288.default.createElement(vertical_grid_lines_default, { scale: yAxisProps.scale, ticks: yAxisProps.ticks, height: plotHeight }),
    emphasizeBaselineAxis && linesOnly && import_react288.default.createElement(emphasized_baseline_default, { axis: x3, scale: yAxisProps.scale, width: plotWidth, height: plotHeight }),
    import_react288.default.createElement(DataSeries2, { axis: x3, plotWidth, plotHeight, highlightedSeries: highlightedSeries !== null && highlightedSeries !== void 0 ? highlightedSeries : null, highlightedGroupIndex, stackedBars, isGroupNavigation, visibleSeries, xScale: xAxisProps.scale, yScale: yAxisProps.scale, isRtl: !!isRtl }),
    emphasizeBaselineAxis && !linesOnly && import_react288.default.createElement(emphasized_baseline_default, { axis: x3, scale: yAxisProps.scale, width: plotWidth, height: plotHeight }),
    import_react288.default.createElement(vertical_marker_default, { key: verticalLineX || "", height: plotHeight, showPoints: highlightedPoint === null, showLine: !isGroupNavigation, points: verticalMarkers, ref: verticalMarkerRef }),
    highlightedPoint && import_react288.default.createElement(highlighted_point_default, { ref: highlightedPointRef, point: point5, role: "button", ariaLabel: activeAriaLabel, ariaHasPopup: true, ariaExpanded: isPopoverPinned }),
    isGroupNavigation && xAxisProps.scale.isCategorical() && import_react288.default.createElement(BarGroups, { ariaLabel: activeAriaLabel, isRefresh, isPopoverPinned, barGroups, highlightedGroupIndex, highlightedGroupRef }),
    import_react288.default.createElement(block_end_labels_default, Object.assign({}, blockEndLabelsProps, { axis: x3, scale: bottomAxisProps.scale, title: bottomAxisProps.title, ariaRoleDescription: bottomAxisProps.ariaRoleDescription, height: plotHeight, width: plotWidth, offsetLeft: inlineStartLabelsWidth + BLOCK_END_LABELS_OFFSET2, offsetRight: BLOCK_END_LABELS_OFFSET2, isRTL: isRtl }))
  ), popover: import_react288.default.createElement(chart_popover_default2, { ref: popoverRef, containerRef: containerRefObject, trackRef: highlightedElementRef, isOpen: isPopoverOpen, isPinned: isPopoverPinned, highlightDetails, onDismiss: onPopoverDismiss, size: detailPopoverSize, footer: detailPopoverFooterContent, dismissAriaLabel: i18nStrings.detailPopoverDismissAriaLabel, onMouseLeave: onPopoverLeave, onBlur: onApplicationBlur, setPopoverText: setDetailsPopoverText }) });
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/chart-legend.js
var import_react289 = __toESM(require_react());
function InternalChartLegend({ series, visibleSeries, highlightedSeries, onHighlightChange, legendTitle, ariaLabel, plotContainerRef }) {
  const legendItems = (0, import_react289.useMemo)(() => {
    return series.filter((s4) => visibleSeries.indexOf(s4.series) !== -1).map(({ series: series2, color: color2 }) => ({
      label: series2.title,
      marker: import_react289.default.createElement(chart_series_marker_default, { color: color2, type: chartLegendMap[series2.type] }),
      datum: series2
    }));
  }, [series, visibleSeries]);
  return import_react289.default.createElement(chart_legend_default, { series: legendItems, highlightedSeries: highlightedSeries || null, onHighlightChange, legendTitle, ariaLabel, plotContainerRef });
}

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/internal.js
function InternalMixedLineBarChart(_a2) {
  var { fitHeight, height, xScaleType, yScaleType, xDomain, yDomain, xTickFormatter, yTickFormatter, highlightedSeries: controlledHighlightedSeries, visibleSeries: controlledVisibleSeries, series: externalSeries, onFilterChange, onHighlightChange: controlledOnHighlightChange, i18nStrings, ariaLabel, ariaLabelledby, ariaDescription, xTitle, yTitle, stackedBars, horizontalBars, hideFilter, additionalFilters, hideLegend, legendTitle, statusType, detailPopoverSize, detailPopoverFooter, detailPopoverSeriesContent, emphasizeBaselineAxis, empty, noMatch, errorText, loadingText, recoveryText, onRecoveryClick, __internalRootRef } = _a2, props2 = __rest(_a2, ["fitHeight", "height", "xScaleType", "yScaleType", "xDomain", "yDomain", "xTickFormatter", "yTickFormatter", "highlightedSeries", "visibleSeries", "series", "onFilterChange", "onHighlightChange", "i18nStrings", "ariaLabel", "ariaLabelledby", "ariaDescription", "xTitle", "yTitle", "stackedBars", "horizontalBars", "hideFilter", "additionalFilters", "hideLegend", "legendTitle", "statusType", "detailPopoverSize", "detailPopoverFooter", "detailPopoverSeriesContent", "emphasizeBaselineAxis", "empty", "noMatch", "errorText", "loadingText", "recoveryText", "onRecoveryClick", "__internalRootRef"]);
  const baseProps = getBaseProps(props2);
  const containerRef = (0, import_react290.useRef)(null);
  (0, import_react290.useEffect)(() => {
    const gotBarSeries = externalSeries.some((s4) => s4.type === "bar");
    const gotLineSeries = externalSeries.some((s4) => s4.type === "line");
    if (xScaleType !== "categorical" && gotBarSeries) {
      warnOnce("MixedLineBarChart", `Bar series cannot be used with a ${xScaleType} scale. Use a categorical x axis instead.`);
    }
    if (horizontalBars && gotLineSeries) {
      warnOnce("MixedLineBarChart", `Property horizontalBars can only be used with charts that contain only bar or threshold series.`);
    }
    for (const s4 of externalSeries) {
      if (s4.type === "threshold" && s4.x !== void 0 && s4.y !== void 0) {
        warnOnce("MixedLineBarChart", `Series of type "threshold" must contain either x or y property.`);
      }
      if (s4.type === "threshold" && s4.x === void 0 && s4.y === void 0) {
        warnOnce("MixedLineBarChart", `Series of type "threshold" must contain either x or y property.`);
      }
    }
  }, [xScaleType, horizontalBars, externalSeries]);
  const series = (0, import_react290.useMemo)(() => {
    const colors = createCategoryColorScale(externalSeries, (it) => isYThreshold(it) || isXThreshold(it), (it) => it.color || null);
    return externalSeries.map((s4, i2) => ({ index: i2, color: colors[i2], series: s4 }));
  }, [externalSeries]);
  const [highlightedPoint, setHighlightedPoint] = (0, import_react290.useState)(null);
  const [highlightedGroupIndex, setHighlightedGroupIndex] = (0, import_react290.useState)(null);
  const [highlightedSeries = null, setHighlightedSeries] = useControllable2(controlledHighlightedSeries, controlledOnHighlightChange, null, {
    componentName: "MixedLineBarChart",
    controlledProp: "highlightedSeries",
    changeHandler: "onHighlightChange"
  });
  const [legendSeries, setLegendSeries] = (0, import_react290.useState)(highlightedSeries);
  (0, import_react290.useEffect)(() => {
    setLegendSeries(controlledHighlightedSeries || null);
  }, [controlledHighlightedSeries]);
  const [externalVisibleSeries, setExternalVisibleSeries] = useControllable2(controlledVisibleSeries, onFilterChange, externalSeries, {
    componentName: "MixedLineBarChart",
    controlledProp: "visibleSeries",
    changeHandler: "onFilterChange"
  });
  if (isDevelopment2) {
    const previousSeries = usePrevious(externalSeries);
    const hasPrevious = !!(previousSeries && previousSeries.length);
    const hasCurrent = !!externalSeries.length;
    if (hasPrevious && hasCurrent && externalSeries !== previousSeries && !controlledVisibleSeries && !hideFilter) {
      warnOnce("MixedLineBarChart", "The `series` value passed into the component changed. This may cause problems with filtering - we recommend that you make the `series` value constant, or provide a `visibleSeries` value that derives from the current `series` value.");
    }
  }
  const visibleSeries = (0, import_react290.useMemo)(() => series.filter((s4) => (externalVisibleSeries === null || externalVisibleSeries === void 0 ? void 0 : externalVisibleSeries.indexOf(s4.series)) !== -1), [series, externalVisibleSeries]);
  const filterChange = (selectedSeries) => {
    setExternalVisibleSeries(selectedSeries);
    fireNonCancelableEvent(onFilterChange, {
      visibleSeries: selectedSeries
    });
  };
  const onHighlightChange = (series2) => {
    setHighlightedSeries(series2);
    fireNonCancelableEvent(controlledOnHighlightChange, {
      highlightedSeries: series2
    });
    setLegendSeries(series2);
  };
  const onBlur = (event) => {
    if (event.relatedTarget && !nodeBelongs2(containerRef.current, event.relatedTarget)) {
      if (highlightedSeries) {
        onHighlightChange(highlightedSeries);
      }
      setHighlightedPoint(null);
      setHighlightedGroupIndex(null);
      setLegendSeries(null);
    }
  };
  const { isEmpty, isNoMatch, showChart } = getChartStatus({
    externalData: externalSeries,
    visibleData: visibleSeries || [],
    statusType
  });
  const showFilters = statusType === "finished" && (!isEmpty || isNoMatch) && (additionalFilters || !hideFilter);
  const showLegend = !hideLegend && !isEmpty && statusType === "finished";
  const reserveLegendSpace = !showChart && !hideLegend;
  const reserveFilterSpace = !showChart && !isNoMatch && (!hideFilter || additionalFilters);
  const mergedRef = useMergeRefs(containerRef, __internalRootRef);
  const filterItems = series.map(({ series: series2, color: color2 }) => ({
    label: series2.title,
    marker: import_react290.default.createElement(chart_series_marker_default, { type: chartLegendMap[series2.type], color: color2 }),
    datum: series2
  }));
  return import_react290.default.createElement(ChartWrapper, Object.assign({ ref: mergedRef }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default101.root), fitHeight: !!fitHeight, contentMinHeight: height, defaultFilter: showFilters && !hideFilter ? import_react290.default.createElement(chart_filter_default, { series: filterItems, onChange: filterChange, selectedSeries: externalVisibleSeries || [], i18nStrings }) : null, additionalFilters: showFilters ? additionalFilters : null, reserveFilterSpace: !!reserveFilterSpace, reserveLegendSpace: !!reserveLegendSpace, chartStatus: import_react290.default.createElement(ChartStatusContainer, { isEmpty, isNoMatch, showChart, statusType, empty, noMatch, loadingText, errorText, recoveryText, onRecoveryClick }), chart: showChart ? import_react290.default.createElement(ChartContainer2, { fitHeight, hasFilters: !!showFilters, height, xScaleType, yScaleType, xDomain, yDomain, xTickFormatter: xTickFormatter !== null && xTickFormatter !== void 0 ? xTickFormatter : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.xTickFormatter, yTickFormatter: yTickFormatter !== null && yTickFormatter !== void 0 ? yTickFormatter : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.yTickFormatter, emphasizeBaselineAxis, stackedBars, horizontalBars, series, visibleSeries, highlightedSeries, onHighlightChange, highlightedPoint, setHighlightedPoint, highlightedGroupIndex, setHighlightedGroupIndex, detailPopoverSize, detailPopoverFooter, detailPopoverSeriesContent, xTitle, yTitle, ariaLabel, ariaLabelledby, ariaDescription, i18nStrings }) : null, legend: showLegend ? import_react290.default.createElement(InternalChartLegend, { series, visibleSeries: externalVisibleSeries || [], highlightedSeries: legendSeries, onHighlightChange, legendTitle, ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.legendAriaLabel, plotContainerRef: containerRef }) : null, onBlur }));
}

// node_modules/@cloudscape-design/components/bar-chart/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/bar-chart/styles.scoped.css";
var styles_css_default102 = {
  "root": "awsui_root_1gfe1_7b6p8_9"
};

// node_modules/@cloudscape-design/components/bar-chart/index.js
function BarChart(_a2) {
  var { series = [], height = 500, xScaleType = "categorical", yScaleType = "linear", stackedBars = false, horizontalBars = false, detailPopoverSize = "medium", statusType = "finished", emphasizeBaselineAxis = true, detailPopoverSeriesContent } = _a2, props2 = __rest(_a2, ["series", "height", "xScaleType", "yScaleType", "stackedBars", "horizontalBars", "detailPopoverSize", "statusType", "emphasizeBaselineAxis", "detailPopoverSeriesContent"]);
  const baseComponentProps = useBaseComponent("BarChart", {
    props: {
      detailPopoverSize,
      emphasizeBaselineAxis,
      fitHeight: props2.fitHeight,
      hideFilter: props2.hideFilter,
      hideLegend: props2.hideLegend,
      horizontalBars,
      stackedBars,
      xScaleType,
      yScaleType
    }
  });
  const baseProps = getBaseProps(props2);
  const className2 = clsx_m_default(baseProps.className, styles_css_default102.root);
  return import_react291.default.createElement(InternalMixedLineBarChart, Object.assign({}, props2, baseComponentProps, { className: className2, height, xScaleType, yScaleType, stackedBars, horizontalBars, series, detailPopoverSize, statusType, emphasizeBaselineAxis, detailPopoverSeriesContent }));
}
applyDisplayName(BarChart, "BarChart");
var bar_chart_default = BarChart;

// node_modules/@cloudscape-design/components/box/index.js
var import_react293 = __toESM(require_react());

// node_modules/@cloudscape-design/components/box/internal-do-not-use-core.js
var import_react292 = __toESM(require_react());
function Box(_a2) {
  var { variant = "div", margin = {}, padding = {} } = _a2, props2 = __rest(_a2, ["variant", "margin", "padding"]);
  const baseComponentProps = useBaseComponent("Box", {
    props: {
      color: props2.color,
      display: props2.display,
      float: props2.float,
      fontSize: props2.fontSize,
      fontWeight: props2.fontWeight,
      textAlign: props2.textAlign,
      variant
    }
  });
  return import_react292.default.createElement(InternalBox, Object.assign({ variant, margin, padding }, props2, baseComponentProps));
}
applyDisplayName(Box, "Box");

// node_modules/@cloudscape-design/components/box/index.js
var Box2 = (props2) => {
  validateProps("Box", props2, ["nativeAttributes"], {}, "console");
  return import_react293.default.createElement(Box, props2);
};
applyDisplayName(Box2, "Box");
var box_default = Box2;

// node_modules/@cloudscape-design/components/breadcrumb-group/index.js
var import_react294 = __toESM(require_react());

// node_modules/@cloudscape-design/components/breadcrumb-group/internal.js
var InternalBreadcrumbGroup = createWidgetizedBreadcrumbGroup(createLoadableComponent(BreadcrumbGroupImplementation));

// node_modules/@cloudscape-design/components/breadcrumb-group/index.js
function BreadcrumbGroup(_a2) {
  var { items = [] } = _a2, props2 = __rest(_a2, ["items"]);
  const registeredGlobally = useSetGlobalBreadcrumbs(Object.assign({ items }, props2));
  const baseComponentProps = useBaseComponent("BreadcrumbGroup");
  if (registeredGlobally) {
    return import_react294.default.createElement(BreadcrumbGroupSkeleton, { items });
  }
  return import_react294.default.createElement(InternalBreadcrumbGroup, Object.assign({ items }, props2, baseComponentProps, { __injectAnalyticsComponentMetadata: true }));
}
applyDisplayName(BreadcrumbGroup, "BreadcrumbGroup");

// node_modules/@cloudscape-design/components/button/index.js
var import_react296 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button/internal-do-not-use-core.js
var import_react295 = __toESM(require_react());
var Button = import_react295.default.forwardRef((_a2, ref) => {
  var { children: children2, iconName, iconAlign = "left", iconUrl, iconSvg, iconAlt, variant = "normal", loading = false, loadingText, disabled = false, disabledReason, wrapText = true, href, target, rel, external = false, download, formAction = "submit", ariaLabel, ariaDescribedby, onClick, onFollow, ariaExpanded, ariaControls, fullWidth, form, i18nStrings, style, nativeButtonAttributes, nativeAnchorAttributes } = _a2, props2 = __rest(_a2, ["children", "iconName", "iconAlign", "iconUrl", "iconSvg", "iconAlt", "variant", "loading", "loadingText", "disabled", "disabledReason", "wrapText", "href", "target", "rel", "external", "download", "formAction", "ariaLabel", "ariaDescribedby", "onClick", "onFollow", "ariaExpanded", "ariaControls", "fullWidth", "form", "i18nStrings", "style", "nativeButtonAttributes", "nativeAnchorAttributes"]);
  const baseComponentProps = useBaseComponent("Button", {
    props: { formAction, fullWidth, iconAlign, iconName, rel, target, external, variant, wrapText },
    metadata: { hasDisabledReason: Boolean(disabledReason) }
  });
  const baseProps = getBaseProps(props2);
  return import_react295.default.createElement(InternalButton, Object.assign({}, baseProps, baseComponentProps, { ref, iconName, iconAlign, iconUrl, iconSvg, iconAlt, variant, loading, loadingText, disabled, disabledReason, wrapText, href, target, rel, external, download, formAction, ariaLabel, ariaDescribedby, onClick, onFollow, ariaExpanded, ariaControls, fullWidth, form, i18nStrings, style, nativeButtonAttributes, nativeAnchorAttributes, __injectAnalyticsComponentMetadata: true }), children2);
});
applyDisplayName(Button, "Button");
var internal_do_not_use_core_default3 = Button;

// node_modules/@cloudscape-design/components/button/index.js
var Button2 = import_react296.default.forwardRef((props2, ref) => {
  validateProps("Button", props2, ["nativeAnchorAttributes", "nativeButtonAttributes", "style"], {}, "console");
  return import_react296.default.createElement(internal_do_not_use_core_default3, { ref, ...props2 });
});
applyDisplayName(Button2, "Button");
var button_default2 = Button2;

// node_modules/@cloudscape-design/components/button-dropdown/index.js
var import_react298 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-dropdown/internal-do-not-use-core.js
var import_react297 = __toESM(require_react());
var ButtonDropdown = import_react297.default.forwardRef((_a2, ref) => {
  var { items, variant = "normal", loading = false, loadingText, disabled = false, disabledReason, expandableGroups = false, expandToViewport = false, ariaLabel, children: children2, onItemClick, onItemFollow, mainAction, fullWidth, nativeMainActionAttributes, nativeTriggerAttributes } = _a2, props2 = __rest(_a2, ["items", "variant", "loading", "loadingText", "disabled", "disabledReason", "expandableGroups", "expandToViewport", "ariaLabel", "children", "onItemClick", "onItemFollow", "mainAction", "fullWidth", "nativeMainActionAttributes", "nativeTriggerAttributes"]);
  const baseComponentProps = useBaseComponent("ButtonDropdown", {
    props: { expandToViewport, expandableGroups, variant },
    metadata: {
      mainAction: !!mainAction,
      checkboxItems: hasCheckboxItems(items),
      hasDisabledReason: Boolean(disabledReason),
      hasDisabledReasons: hasDisabledReasonItems(items)
    }
  });
  const baseProps = getBaseProps(props2);
  const analyticsComponentMetadata = {
    name: "awsui.ButtonDropdown",
    label: `.${styles_css_default27["trigger-label"]}`,
    properties: { variant, disabled: `${disabled}` }
  };
  return import_react297.default.createElement(internal_default6, Object.assign({}, baseProps, baseComponentProps, { ref, items, variant, loading, loadingText, disabled, disabledReason, expandableGroups, expandToViewport, ariaLabel, onItemClick, onItemFollow, mainAction, fullWidth, nativeMainActionAttributes, nativeTriggerAttributes }, getAnalyticsMetadataAttribute({
    component: analyticsComponentMetadata
  })), children2);
});
applyDisplayName(ButtonDropdown, "ButtonDropdown");
var internal_do_not_use_core_default4 = ButtonDropdown;

// node_modules/@cloudscape-design/components/button-dropdown/index.js
var ButtonDropdown2 = import_react298.default.forwardRef((props2, ref) => {
  validateProps("ButtonDropdown", props2, ["nativeMainActionAttributes", "nativeTriggerAttributes"], {}, "console");
  return import_react298.default.createElement(internal_do_not_use_core_default4, { ref, ...props2 });
});
applyDisplayName(ButtonDropdown2, "ButtonDropdown");
var button_dropdown_default = ButtonDropdown2;

// node_modules/@cloudscape-design/components/button-group/index.js
var import_react300 = __toESM(require_react());

// node_modules/@cloudscape-design/components/button-group/internal-do-not-use-core.js
var import_react299 = __toESM(require_react());
var ButtonGroup = import_react299.default.forwardRef((_a2, ref) => {
  var { variant, dropdownExpandToViewport = false, style } = _a2, rest = __rest(_a2, ["variant", "dropdownExpandToViewport", "style"]);
  const baseProps = getBaseProps(rest);
  const itemCounts = getItemCounts(rest.items);
  const baseComponentProps = useBaseComponent("ButtonGroup", {
    props: {
      variant,
      dropdownExpandToViewport
    },
    metadata: {
      iconButtonsCount: itemCounts["icon-button"],
      iconToggleButtonsCount: itemCounts["icon-toggle-button"],
      iconFileInputsCount: itemCounts["icon-file-input"],
      menuDropdownsCount: itemCounts["menu-dropdown"],
      groupsCount: itemCounts.group
    }
  });
  const externalProps = getExternalProps(rest);
  const componentMetadata = {
    name: "awsui.ButtonGroup",
    label: { root: "self" }
  };
  return import_react299.default.createElement(internal_default9, Object.assign({}, baseProps, baseComponentProps, externalProps, { ref, variant, dropdownExpandToViewport, style }, getAnalyticsMetadataAttribute({ component: componentMetadata })));
});
function getItemCounts(allItems = []) {
  const counters = { "icon-button": 0, "icon-toggle-button": 0, "icon-file-input": 0, "menu-dropdown": 0, group: 0 };
  function count(items) {
    for (const item of items) {
      counters[item.type] += 1;
      if (item.type === "group") {
        count(item.items);
      }
    }
  }
  count(allItems);
  return counters;
}
applyDisplayName(ButtonGroup, "ButtonGroup");
var internal_do_not_use_core_default5 = ButtonGroup;

// node_modules/@cloudscape-design/components/button-group/index.js
var ButtonGroup2 = import_react300.default.forwardRef((props2, ref) => {
  validateProps("ButtonGroup", props2, ["style"], {}, "console");
  return import_react300.default.createElement(internal_do_not_use_core_default5, { ref, ...props2 });
});
applyDisplayName(ButtonGroup2, "ButtonGroup");
var button_group_default = ButtonGroup2;

// node_modules/@cloudscape-design/components/calendar/index.js
var import_react308 = __toESM(require_react());

// node_modules/@cloudscape-design/components/calendar/internal.js
var import_react307 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-date-cache/index.js
var import_react301 = __toESM(require_react());
function useDateCache() {
  const cacheRef = (0, import_react301.useRef)(/* @__PURE__ */ new Map());
  return (date2) => {
    const current = cacheRef.current.get(date2.getTime());
    if (current) {
      return current;
    }
    cacheRef.current.set(date2.getTime(), date2);
    return date2;
  };
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/display-format.js
function isoToDisplay(value) {
  return value.replace(/-/g, "/");
}
function displayToIso(value) {
  return value.replace(/\//g, "-");
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-time-offset.js
function formatTimeOffsetISOInternal(isoDate, offsetInMinutes) {
  offsetInMinutes = defaultToLocal(isoDate, offsetInMinutes);
  const { hours, minutes } = getMinutesAndHours(offsetInMinutes);
  const sign2 = offsetInMinutes < 0 ? "-" : "+";
  const formattedOffset = `${sign2}${formatISO2Digits(hours)}:${formatISO2Digits(minutes)}`;
  return formattedOffset;
}
function formatTimeOffsetISO(isoDate, offsetInMinutes) {
  offsetInMinutes = defaultToLocal(isoDate, offsetInMinutes);
  if (offsetInMinutes === 0) {
    return "Z";
  }
  const { hours, minutes } = getMinutesAndHours(offsetInMinutes);
  const sign2 = offsetInMinutes < 0 ? "-" : "+";
  const formattedOffset = `${sign2}${formatISO2Digits(hours)}:${formatISO2Digits(minutes)}`;
  return formattedOffset;
}
function formatTimeOffsetLocalized(isoDate, offsetInMinutes) {
  offsetInMinutes = defaultToLocal(isoDate, offsetInMinutes);
  if (offsetInMinutes === 0) {
    return "(UTC)";
  }
  const { hours, minutes } = getMinutesAndHours(offsetInMinutes);
  const sign2 = offsetInMinutes < 0 ? "-" : "+";
  const formattedMinutes = minutes === 0 ? "" : `:${minutes}`;
  const formattedOffset = `(UTC${sign2}${hours}${formattedMinutes})`;
  return formattedOffset;
}
function defaultToLocal(isoDate, offsetInMinutes) {
  return offsetInMinutes !== null && offsetInMinutes !== void 0 ? offsetInMinutes : 0 - new Date(isoDate).getTimezoneOffset();
}
function getMinutesAndHours(minutes) {
  return { hours: Math.floor(Math.abs(minutes) / 60), minutes: Math.abs(minutes % 60) };
}
function formatISO2Digits(n) {
  return padLeftZeros(n.toFixed(0), 2);
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-date-iso.js
function format_date_iso_default({ date: isoDate, hideTimeOffset, isDateOnly, timeOffset, isMonthOnly }) {
  const formattedOffset = hideTimeOffset || isDateOnly || isMonthOnly ? "" : formatTimeOffsetISO(isoDate, timeOffset);
  if (isMonthOnly) {
    return format2(parseISO(isoDate), "yyyy-MM");
  }
  return isoDate + formattedOffset;
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-date-localized.js
function formatDateLocalized({ date: isoDate, hideTimeOffset, isDateOnly, isMonthOnly, timeOffset, locale: locale3 }) {
  let date2 = parseISO(isoDate);
  if (!isValid(date2)) {
    date2 = new Date(isoDate);
  }
  if (isMonthOnly) {
    const formattedMonthDate = new Intl.DateTimeFormat(locale3, {
      month: "long",
      year: "numeric"
    }).format(date2);
    return formattedMonthDate;
  }
  const formattedDate = new Intl.DateTimeFormat(locale3, {
    month: "long",
    year: "numeric",
    day: "numeric"
  }).format(date2);
  if (isDateOnly) {
    return formattedDate;
  }
  const formattedTime = new Intl.DateTimeFormat(locale3, {
    hour: "2-digit",
    hourCycle: "h23",
    minute: "2-digit",
    second: "2-digit"
  }).format(date2);
  const formattedDateTime = formattedDate + getDateTimeSeparator(locale3) + formattedTime;
  if (hideTimeOffset) {
    return formattedDateTime;
  }
  const formattedTimeOffset = formatTimeOffsetLocalized(isoDate, timeOffset);
  return formattedDateTime + " " + formattedTimeOffset;
}
var languagesWithoutDateTimeSeparator = ["ja", "zh-CN", "zh-TW"];
function getDateTimeSeparator(locale3) {
  return locale3 && languagesWithoutDateTimeSeparator.includes(locale3) ? " " : ", ";
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/is-iso-only.js
var dateOnlyRegex = /^\d{4}-\d{2}-\d{2}$/;
var monthOnlyRegex = /^\d{4}-(?:0[1-9]|1[0-2])$/;
function isIsoDateOnly(dateString) {
  return dateOnlyRegex.test(dateString);
}
function isIsoMonthOnly(dateString) {
  return monthOnlyRegex.test(dateString);
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-date-time-with-offset.js
function formatDateTimeWithOffset({ date: date2, format: format3, hideTimeOffset, timeOffset, locale: locale3 }) {
  const isDateOnly = isIsoDateOnly(date2);
  const isMonthOnly = isIsoMonthOnly(date2);
  switch (format3) {
    case "long-localized": {
      return formatDateLocalized({ date: date2, hideTimeOffset, isDateOnly, isMonthOnly, locale: locale3, timeOffset });
    }
    case "slashed": {
      const formatted = format_date_iso_default({ date: date2, hideTimeOffset, isDateOnly, isMonthOnly, timeOffset }).split("T");
      return `${formatted[0].split("-").join("/")}${formatted[1] ? `T${formatted[1]}` : ""}`;
    }
    default: {
      return format_date_iso_default({ date: date2, hideTimeOffset, isDateOnly, isMonthOnly, timeOffset });
    }
  }
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-date.js
function formatDate(value, granularity = "day") {
  const year = value.getFullYear();
  const month = padLeftZeros(`${value.getMonth() + 1}`, 2);
  if (granularity === "month") {
    return `${year}-${month}`;
  }
  const date2 = padLeftZeros(`${value.getDate()}`, 2);
  return `${year}-${month}-${date2}`;
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-time.js
var formatTime = (value) => {
  const hours = padLeftZeros(`${value.getHours()}`, 2);
  const minutes = padLeftZeros(`${value.getMinutes()}`, 2);
  const seconds = padLeftZeros(`${value.getSeconds()}`, 2);
  return `${hours}:${minutes}:${seconds}`;
};

// node_modules/@cloudscape-design/components/internal/utils/date-time/format-date-time.js
function formatDateTime(date2) {
  return formatDate(date2) + "T" + formatTime(date2);
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/join-date-time.js
function normalizeTimeString(timeString) {
  const parts = timeString.split(":");
  while (parts.length < 3) {
    parts.push("00");
  }
  return parts.join(":");
}
function joinDateTime(dateString, timeString) {
  return `${dateString}T${timeString}`;
}
function splitDateTime(dateStr) {
  const [date2 = "", time2 = ""] = dateStr.split("T");
  return { date: date2, time: time2 };
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/parse-date.js
function parseDate2(value, strict = false) {
  const [yearString, monthString, dayString] = value.split("-");
  const year = Number(yearString);
  const month = Number(monthString);
  const day = Number(dayString);
  if (strict) {
    if (isNaN(year) || isNaN(month) || isNaN(day)) {
      return null;
    }
  }
  return new Date(year, (month || 1) - 1, day || 1);
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/parse-timezone-offset.js
function parseTimezoneOffset(isoDate) {
  const [, time2 = ""] = isoDate.split("T");
  const [, signCharacter, offsetPart] = time2.split(/(-|\+)/);
  if (signCharacter && offsetPart) {
    const [offsetHours, offsetMinutes] = offsetPart.split(":");
    return Number(signCharacter + "1") * (Number(offsetHours) * 60 + Number(offsetMinutes));
  }
  const utcTimezoneIndicator = isoDate.indexOf("Z");
  if (utcTimezoneIndicator !== -1) {
    return 0;
  }
  const date2 = new Date(isoDate);
  return 0 - date2.getTimezoneOffset();
}

// node_modules/@cloudscape-design/components/internal/utils/date-time/shift-timezone-offset.js
function shiftTimezoneOffset(dateString, targetTimezoneOffset) {
  const [datePart, timeAndOffsetPart = ""] = dateString.split("T");
  const [timePart] = timeAndOffsetPart.split(/-|\+|Z/);
  const valueWithoutOffset = joinDateTime(datePart, timePart);
  const originalTimezoneOffset = parseTimezoneOffset(dateString);
  const date2 = new Date(valueWithoutOffset);
  targetTimezoneOffset = targetTimezoneOffset !== null && targetTimezoneOffset !== void 0 ? targetTimezoneOffset : 0 - date2.getTimezoneOffset();
  const adjustedDate = addMinutes(date2, targetTimezoneOffset - originalTimezoneOffset);
  return joinDateTime(formatDate(adjustedDate), formatTime(adjustedDate));
}

// node_modules/@cloudscape-design/components/internal/utils/locale/merge-locales.js
function mergeLocales(locale3, fullLocale) {
  const isShort = locale3.length === 2;
  if (isShort && fullLocale.indexOf(locale3) === 0) {
    return fullLocale;
  }
  return locale3;
}

// node_modules/@cloudscape-design/components/internal/utils/locale/normalize-locale.js
function normalizeLocale(component, locale3) {
  var _a2;
  locale3 = checkLocale(component, locale3);
  const browserLocale = getBrowserLocale();
  if (locale3) {
    return mergeLocales(locale3, browserLocale);
  }
  const htmlLocale = checkLocale(component, (_a2 = getHtmlElement()) === null || _a2 === void 0 ? void 0 : _a2.getAttribute("lang"));
  if (htmlLocale) {
    return mergeLocales(htmlLocale, browserLocale);
  }
  return browserLocale;
}
function checkLocale(component, locale3) {
  if (!locale3 || locale3 === "") {
    return "";
  }
  locale3 = locale3 && locale3.replace(/^([a-z]{2})_/, "$1-");
  if (locale3 && !locale3.match(/^[a-z]{2}(-[A-Z]{2})?$/)) {
    warnOnce(component, `Invalid locale provided: ${locale3}. Falling back to default`);
    locale3 = "";
  }
  return locale3;
}
function getHtmlElement() {
  return typeof document !== "undefined" ? document.querySelector("html") : null;
}
function getBrowserLocale() {
  return new Intl.DateTimeFormat().resolvedOptions().locale;
}

// node_modules/weekstart/dist/es-module/api.js
function getWeekStartByRegion(regionCode, regionDayMap2) {
  var code = regionDayMap2[typeof regionCode === "string" ? regionCode.toUpperCase() : regionCode];
  return typeof code === "number" ? code : 1;
}
function getWeekStartByLocale(locale3, langRegionMap2, regionDayMap2) {
  if (locale3) {
    var data = locale3.toLowerCase().split(/[-_]/);
    var language = data[0];
    var country;
    if (data[1] && data[1].length === 4) {
      language += "_" + data[1];
      country = data[2];
    } else {
      country = data[1];
    }
    if (!country) {
      country = langRegionMap2[language];
    }
    if (country) {
      return getWeekStartByRegion(country.match(/^\d+$/) ? Number(country) : country, regionDayMap2);
    }
  }
  return 1;
}

// node_modules/weekstart/dist/es-module/langRegionMap.js
var langRegionMap = {
  en: "US",
  zh: "CN",
  zh_hans: "CN",
  hans: "CN",
  wuu: "CN",
  hsn: "CN",
  hak: "CN",
  nan: "CN",
  gan: "CN",
  hi: "IN",
  te: "IN",
  mr: "IN",
  ta: "IN",
  gu: "IN",
  kn: "IN",
  or: "IN",
  ml: "IN",
  pa_guru: "IN",
  bho: "IN",
  awa: "IN",
  as: "IN",
  mwr: "IN",
  mai: "IN",
  mag: "IN",
  bgc: "IN",
  hne: "IN",
  dcc: "IN",
  dz: "BT",
  tn: "BW",
  am: "ET",
  om: "ET",
  quc: "GT",
  id: "ID",
  jv: "ID",
  su: "ID",
  mad: "ID",
  ms_arab: "ID",
  ga: "IE",
  he: "IL",
  jam: "JM",
  ja: "JP",
  km: "KH",
  ko: "KR",
  lo: "LA",
  mh: "MH",
  my: "MM",
  mt: "MT",
  ne: "NP",
  fil: "PH",
  ceb: "PH",
  ilo: "PH",
  ur: "PK",
  pa: "PK",
  pa_arab: "PK",
  arab: "PK",
  lah: "PK",
  ps: "PK",
  sd: "PK",
  sd_arab: "PK",
  skr: "PK",
  gn: "PY",
  th: "TH",
  tts: "TH",
  aeb: "TN",
  zh_hant: "TW",
  hant: "TW",
  sm: "WS",
  zu: "ZA",
  sn: "ZW",
  arq: "DZ",
  ar: "EG",
  arz: "EG",
  fa: "IR",
  az_arab: "IR",
  ary: "MA",
  bn: "BD",
  rkt: "BD",
  dv: "MV"
};
var langRegionMap_default = langRegionMap;

// node_modules/weekstart/dist/es-module/regionDayMap.js
var regionDayMap = {
  AG: 0,
  ATG: 0,
  28: 0,
  AR: 0,
  ARG: 0,
  32: 0,
  AS: 0,
  ASM: 0,
  16: 0,
  AU: 0,
  AUS: 0,
  36: 0,
  BR: 0,
  BRA: 0,
  76: 0,
  BS: 0,
  BHS: 0,
  44: 0,
  BT: 0,
  BTN: 0,
  64: 0,
  BW: 0,
  BWA: 0,
  72: 0,
  BZ: 0,
  BLZ: 0,
  84: 0,
  CA: 0,
  CAN: 0,
  124: 0,
  CN: 0,
  CHN: 0,
  156: 0,
  CO: 0,
  COL: 0,
  170: 0,
  DM: 0,
  DMA: 0,
  212: 0,
  DO: 0,
  DOM: 0,
  214: 0,
  ET: 0,
  ETH: 0,
  231: 0,
  GT: 0,
  GTM: 0,
  320: 0,
  GU: 0,
  GUM: 0,
  316: 0,
  HK: 0,
  HKG: 0,
  344: 0,
  HN: 0,
  HND: 0,
  340: 0,
  ID: 0,
  IDN: 0,
  360: 0,
  IE: 0,
  IRL: 0,
  372: 0,
  IL: 0,
  ISR: 0,
  376: 0,
  IN: 0,
  IND: 0,
  356: 0,
  JM: 0,
  JAM: 0,
  388: 0,
  JP: 0,
  JPN: 0,
  392: 0,
  KE: 0,
  KEN: 0,
  404: 0,
  KH: 0,
  KHM: 0,
  116: 0,
  KR: 0,
  KOR: 0,
  410: 0,
  LA: 0,
  LA0: 0,
  418: 0,
  MH: 0,
  MHL: 0,
  584: 0,
  MM: 0,
  MMR: 0,
  104: 0,
  MO: 0,
  MAC: 0,
  446: 0,
  MT: 0,
  MLT: 0,
  470: 0,
  MX: 0,
  MEX: 0,
  484: 0,
  MZ: 0,
  MOZ: 0,
  508: 0,
  NI: 0,
  NIC: 0,
  558: 0,
  NP: 0,
  NPL: 0,
  524: 0,
  NZ: 0,
  NZL: 0,
  554: 0,
  PA: 0,
  PAN: 0,
  591: 0,
  PE: 0,
  PER: 0,
  604: 0,
  PH: 0,
  PHL: 0,
  608: 0,
  PK: 0,
  PAK: 0,
  586: 0,
  PR: 0,
  PRI: 0,
  630: 0,
  PY: 0,
  PRY: 0,
  600: 0,
  SA: 0,
  SAU: 0,
  682: 0,
  SG: 0,
  SGP: 0,
  702: 0,
  SV: 0,
  SLV: 0,
  222: 0,
  TH: 0,
  THA: 0,
  764: 0,
  TN: 0,
  TUN: 0,
  788: 0,
  TT: 0,
  TTO: 0,
  780: 0,
  TW: 0,
  TWN: 0,
  158: 0,
  UM: 0,
  UMI: 0,
  581: 0,
  US: 0,
  USA: 0,
  840: 0,
  VE: 0,
  VEN: 0,
  862: 0,
  VI: 0,
  VIR: 0,
  850: 0,
  WS: 0,
  WSM: 0,
  882: 0,
  YE: 0,
  YEM: 0,
  887: 0,
  ZA: 0,
  ZAF: 0,
  710: 0,
  ZW: 0,
  ZWE: 0,
  716: 0,
  AE: 6,
  ARE: 6,
  784: 6,
  AF: 6,
  AFG: 6,
  4: 6,
  BH: 6,
  BHR: 6,
  48: 6,
  DJ: 6,
  DJI: 6,
  262: 6,
  DZ: 6,
  DZA: 6,
  12: 6,
  EG: 6,
  EGY: 6,
  818: 6,
  IQ: 6,
  IRQ: 6,
  368: 6,
  IR: 6,
  IRN: 6,
  364: 6,
  JO: 6,
  JOR: 6,
  400: 6,
  KW: 6,
  KWT: 6,
  414: 6,
  LY: 6,
  LBY: 6,
  434: 6,
  MA: 6,
  MAR: 6,
  504: 6,
  OM: 6,
  OMN: 6,
  512: 6,
  QA: 6,
  QAT: 6,
  634: 6,
  SD: 6,
  SDN: 6,
  729: 6,
  SY: 6,
  SYR: 6,
  760: 6,
  BD: 5,
  BGD: 5,
  50: 5,
  MV: 5,
  MDV: 5,
  462: 5
};
var regionDayMap_default = regionDayMap;

// node_modules/weekstart/dist/es-module/main.js
function getWeekStartByLocale$1(locale3) {
  return getWeekStartByLocale(locale3, langRegionMap_default, regionDayMap_default);
}

// node_modules/@cloudscape-design/components/internal/utils/locale/normalize-start-of-week.js
function normalizeStartOfWeek(startOfWeek2, locale3) {
  return typeof startOfWeek2 === "number" ? startOfWeek2 % 7 : getWeekStartByLocale$1(locale3);
}

// node_modules/@cloudscape-design/components/calendar/grid/index.js
var import_react302 = __toESM(require_react());

// node_modules/@cloudscape-design/components/calendar/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/calendar/styles.scoped.css";
var styles_css_default103 = {
  "calendar": "awsui_calendar_1ykar_1p0hg_153",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_1ykar_1p0hg_1",
  "root": "awsui_root_1ykar_1p0hg_180",
  "calendar-inner": "awsui_calendar-inner_1ykar_1p0hg_218",
  "calendar-header": "awsui_calendar-header_1ykar_1p0hg_222",
  "calendar-header-title": "awsui_calendar-header-title_1ykar_1p0hg_227",
  "calendar-next-btn": "awsui_calendar-next-btn_1ykar_1p0hg_235",
  "calendar-prev-btn": "awsui_calendar-prev-btn_1ykar_1p0hg_238",
  "calendar-grid": "awsui_calendar-grid_1ykar_1p0hg_241",
  "calendar-grid-dense": "awsui_calendar-grid-dense_1ykar_1p0hg_245",
  "calendar-grid-cell": "awsui_calendar-grid-cell_1ykar_1p0hg_253",
  "calendar-date-header": "awsui_calendar-date-header_1ykar_1p0hg_258",
  "calendar-date": "awsui_calendar-date_1ykar_1p0hg_258",
  "calendar-date-enabled": "awsui_calendar-date-enabled_1ykar_1p0hg_278",
  "calendar-date-current-page": "awsui_calendar-date-current-page_1ykar_1p0hg_288",
  "calendar-date-selected": "awsui_calendar-date-selected_1ykar_1p0hg_299",
  "calendar-date-current": "awsui_calendar-date-current_1ykar_1p0hg_288",
  "calendar-date-dense": "awsui_calendar-date-dense_1ykar_1p0hg_320",
  "date-inner": "awsui_date-inner_1ykar_1p0hg_328",
  "calendar-row": "awsui_calendar-row_1ykar_1p0hg_403",
  "disabled-reason-tooltip": "awsui_disabled-reason-tooltip_1ykar_1p0hg_407"
};

// node_modules/@cloudscape-design/components/calendar/grid/index.js
var GridCell = (0, import_react302.forwardRef)((props2, focusedDateRef) => {
  const { disabledReason } = props2, rest = __rest(props2, ["disabledReason"]);
  const isDisabledWithReason = !!disabledReason;
  const { targetProps, descriptionEl } = useHiddenDescription(disabledReason);
  const ref = (0, import_react302.useRef)(null);
  const [showTooltip, setShowTooltip] = (0, import_react302.useState)(false);
  return import_react302.default.createElement(
    "td",
    Object.assign({ ref: useMergeRefs(focusedDateRef, ref) }, isDisabledWithReason ? targetProps : {}, rest, { onFocus: () => isDisabledWithReason ? setShowTooltip(true) : void 0, onBlur: () => isDisabledWithReason ? setShowTooltip(false) : void 0, onMouseEnter: () => isDisabledWithReason ? setShowTooltip(true) : void 0, onMouseLeave: () => isDisabledWithReason ? setShowTooltip(false) : void 0 }),
    props2.children,
    isDisabledWithReason && import_react302.default.createElement(
      import_react302.default.Fragment,
      null,
      descriptionEl,
      showTooltip && import_react302.default.createElement(Tooltip, { className: styles_css_default103["disabled-reason-tooltip"], trackRef: ref, value: disabledReason, onDismiss: () => setShowTooltip(false) })
    )
  );
});
applyDisplayName(GridCell, "GridCell");
function Grid({ isDateEnabled, dateDisabledReason, focusedDate, focusableDate, onSelectDate, selectedDate, ariaLabelledby, header, rows, isCurrentPage, renderDate, renderDateAnnouncement: renderDateAnnouncement2, isSameDate, onGridKeyDownHandler }) {
  const focusedDateRef = (0, import_react302.useRef)(null);
  useEffectOnUpdate2(() => {
    if (focusedDate && focusedDateRef.current) {
      focusedDateRef.current.focus();
    }
  }, [focusedDate]);
  const rowLength = rows[0].length;
  const denseGrid = rowLength > 3;
  return import_react302.default.createElement(
    "table",
    { role: "grid", className: clsx_m_default(styles_css_default103["calendar-grid"], denseGrid && styles_css_default103["calendar-grid-dense"]), "aria-labelledby": ariaLabelledby },
    header,
    import_react302.default.createElement("tbody", { onKeyDown: onGridKeyDownHandler }, rows.map((row, rowIndex) => import_react302.default.createElement("tr", { key: rowIndex, className: styles_css_default103["calendar-row"] }, row.map((date2, dateIndex) => {
      const isFocusable3 = !!focusableDate && isSameDate(date2, focusableDate);
      const isSelected = !!selectedDate && isSameDate(date2, selectedDate);
      const isEnabled = !isDateEnabled || isDateEnabled(date2);
      const disabledReason = dateDisabledReason(date2);
      const isDisabledWithReason = !isEnabled && !!disabledReason;
      const isCurrentDate = isSameDate(date2, /* @__PURE__ */ new Date());
      let tabIndex = void 0;
      if (isFocusable3 && (isEnabled || isDisabledWithReason)) {
        tabIndex = 0;
      } else if (isEnabled || isDisabledWithReason) {
        tabIndex = -1;
      }
      return import_react302.default.createElement(
        GridCell,
        {
          key: `${rowIndex}:${dateIndex}`,
          ref: tabIndex === 0 ? focusedDateRef : void 0,
          tabIndex,
          "aria-current": isCurrentDate ? "date" : void 0,
          "aria-selected": isEnabled ? isSelected : void 0,
          "aria-disabled": !isEnabled,
          // Do not attach click event when the date is disabled, otherwise VO+safari announces clickable
          onClick: isEnabled ? () => onSelectDate(date2) : void 0,
          className: clsx_m_default(styles_css_default103["calendar-grid-cell"], styles_css_default103["calendar-date"], {
            [styles_css_default103["calendar-date-current-page"]]: isCurrentPage(date2),
            [styles_css_default103["calendar-date-enabled"]]: isEnabled,
            [styles_css_default103["calendar-date-selected"]]: isSelected,
            [styles_css_default103["calendar-date-current"]]: isCurrentDate,
            [styles_css_default103["calendar-date-dense"]]: denseGrid
          }),
          disabledReason: isDisabledWithReason ? disabledReason : void 0
        },
        import_react302.default.createElement("span", { className: styles_css_default103["date-inner"], "aria-hidden": "true" }, renderDate(date2)),
        import_react302.default.createElement(ScreenreaderOnly, null, renderDateAnnouncement2(date2, isCurrentDate))
      );
    }))))
  );
}

// node_modules/@cloudscape-design/components/calendar/grid/calendar-grid-header.js
var import_react303 = __toESM(require_react());

// node_modules/@cloudscape-design/components/calendar/utils/intl.js
function setDayIndex(date2, dayIndex) {
  const diff = dayIndex - date2.getDay();
  date2.setDate(date2.getDate() + diff);
}
function renderDayName(locale3, dayIndex, mode) {
  const tempDate = /* @__PURE__ */ new Date();
  setDayIndex(tempDate, dayIndex);
  return tempDate.toLocaleDateString(locale3, { weekday: mode });
}
function renderMonthAndYear(locale3, baseDate) {
  const result = baseDate.toLocaleDateString(locale3, {
    year: "numeric",
    month: "long"
  });
  return result;
}
function renderYear(locale3, date2) {
  return date2.toLocaleDateString(locale3, {
    year: "numeric"
  });
}
var dayLabelCache = /* @__PURE__ */ new Map();
function getDateLabel(locale3, date2, mode = "full") {
  const cacheKey = locale3 + date2.getTime() + mode;
  const cachedValue = dayLabelCache.get(cacheKey);
  if (cachedValue) {
    return cachedValue;
  }
  const value = date2.toLocaleDateString(locale3, {
    weekday: mode === "full" ? "long" : void 0,
    month: "long",
    day: "numeric",
    year: "numeric"
  });
  dayLabelCache.set(cacheKey, value);
  return value;
}
function renderTimeLabel(locale3, date2, format3) {
  let options = {};
  if (format3 === "hh") {
    options = { hour: "2-digit" };
  }
  if (format3 === "hh:mm") {
    options = { hour: "2-digit", minute: "2-digit" };
  }
  const value = date2.toLocaleTimeString(locale3, options);
  return value;
}

// node_modules/@cloudscape-design/components/calendar/grid/calendar-grid-header.js
function CalendarGridHeader({ locale: locale3, rows }) {
  return import_react303.default.createElement(
    "thead",
    null,
    import_react303.default.createElement("tr", null, rows[0].map((date2) => date2.getDay()).map((dayIndex) => import_react303.default.createElement(
      "th",
      { key: dayIndex, scope: "col", className: clsx_m_default(styles_css_default103["calendar-grid-cell"], styles_css_default103["calendar-date-header"]) },
      import_react303.default.createElement("span", { "aria-hidden": "true" }, renderDayName(locale3, dayIndex, "short")),
      import_react303.default.createElement(ScreenreaderOnly, null, renderDayName(locale3, dayIndex, "long"))
    )))
  );
}

// node_modules/@cloudscape-design/components/calendar/utils/navigation-day.js
function moveNextDay(startDate, isDateFocusable) {
  return moveDay(startDate, isDateFocusable, 1);
}
function movePrevDay(startDate, isDateFocusable) {
  return moveDay(startDate, isDateFocusable, -1);
}
function moveNextWeek(startDate, isDateFocusable) {
  return moveDay(startDate, isDateFocusable, 7);
}
function movePrevWeek(startDate, isDateFocusable) {
  return moveDay(startDate, isDateFocusable, -7);
}
function getBaseDay(date2, isDateFocusable) {
  const startDate = startOfMonth(date2);
  if (isDateFocusable(startDate)) {
    return startDate;
  }
  const firstEnabledDate = moveDay(startDate, isDateFocusable, 1);
  return isSameMonth(startDate, firstEnabledDate) ? firstEnabledDate : startDate;
}
function moveDay(startDate, isDateFocusable, step2) {
  const limitYears = 1;
  let current = addDays(startDate, step2);
  while (!isDateFocusable(current)) {
    if (Math.abs(differenceInYears(startDate, current)) > limitYears) {
      return startDate;
    }
    current = addDays(current, step2);
  }
  return current;
}

// node_modules/@cloudscape-design/components/calendar/utils/navigation-month.js
function moveNextMonth(startDate, isDateFocusable) {
  return moveMonth(startDate, isDateFocusable, 1);
}
function movePrevMonth(startDate, isDateFocusable) {
  return moveMonth(startDate, isDateFocusable, -1);
}
function moveMonthDown(startDate, isDateFocusable) {
  return moveMonth(startDate, isDateFocusable, 3);
}
function moveMonthUp(startDate, isDateFocusable) {
  return moveMonth(startDate, isDateFocusable, -3);
}
function getBaseMonth(date2, isDateFocusable) {
  const startDate = startOfYear(date2);
  if (isDateFocusable(startDate)) {
    return startDate;
  }
  const firstEnabledDate = moveMonth(startDate, isDateFocusable, 1);
  return isSameYear(startDate, firstEnabledDate) ? firstEnabledDate : startDate;
}
function moveMonth(startDate, isDateFocusable, step2) {
  const limitYears = 10;
  let current = addMonths(startDate, step2);
  while (!isDateFocusable(current)) {
    if (Math.abs(differenceInYears(startDate, current)) > limitYears) {
      return startDate;
    }
    current = addMonths(current, step2);
  }
  return current;
}

// node_modules/@cloudscape-design/components/calendar/grid/use-calendar-grid-keyboard-navigation.js
function useCalendarGridKeyboardNavigation({ baseDate, focusableDate, granularity, isDateEnabled, isDateFocusable, onChangePage, onFocusDate, onSelectDate }) {
  const isMonthPicker = granularity === "month";
  const moveDown = isMonthPicker ? moveMonthDown : moveNextWeek;
  const moveLeft = isMonthPicker ? movePrevMonth : movePrevDay;
  const moveRight = isMonthPicker ? moveNextMonth : moveNextDay;
  const moveUp = isMonthPicker ? moveMonthUp : movePrevWeek;
  const isSamePage = isMonthPicker ? isSameYear : isSameMonth;
  const onGridKeyDownHandler = (event) => {
    let updatedFocusDate;
    const keys = [KeyCode2.up, KeyCode2.down, KeyCode2.left, KeyCode2.right, KeyCode2.space, KeyCode2.enter];
    if (focusableDate === null || keys.indexOf(event.keyCode) === -1) {
      return;
    }
    event.preventDefault();
    handleKey2(event, {
      onActivate: () => {
        if (!isDateEnabled(focusableDate)) {
          return;
        }
        onFocusDate(null);
        onSelectDate(focusableDate);
      },
      onBlockEnd: () => updatedFocusDate = moveDown(focusableDate, isDateFocusable),
      onBlockStart: () => updatedFocusDate = moveUp(focusableDate, isDateFocusable),
      onInlineStart: () => updatedFocusDate = moveLeft(focusableDate, isDateFocusable),
      onInlineEnd: () => updatedFocusDate = moveRight(focusableDate, isDateFocusable)
    });
    if (!updatedFocusDate) {
      return;
    }
    if (!isSamePage(updatedFocusDate, baseDate)) {
      onChangePage(updatedFocusDate);
    }
    onFocusDate(updatedFocusDate);
  };
  return onGridKeyDownHandler;
}

// node_modules/@cloudscape-design/components/calendar/grid/use-calendar-grid-rows.js
var import_react304 = __toESM(require_react());

// node_modules/mnth/web/add-days.js
var addDays2 = function addDays3(date2, days) {
  var result = new Date(date2);
  result.setDate(result.getDate() + days);
  return result;
};

// node_modules/mnth/web/set-date.js
var setDate2 = function setDate3(date2, day) {
  var result = new Date(date2);
  result.setDate(day);
  return result;
};

// node_modules/mnth/web/index.js
function ownKeys(object2, enumerableOnly) {
  var keys = Object.keys(object2);
  if (Object.getOwnPropertySymbols) {
    var symbols2 = Object.getOwnPropertySymbols(object2);
    if (enumerableOnly) symbols2 = symbols2.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
    });
    keys.push.apply(keys, symbols2);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys(Object(source), true).forEach(function(key2) {
        _defineProperty(target, key2, source[key2]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
      });
    }
  }
  return target;
}
var DAYS_IN_WEEK = 7;
var getCalendarMonth = function getCalendarMonth2(date2, options) {
  var _firstDayOfWeek$optio = _objectSpread({
    firstDayOfWeek: 1
  }, options), firstDayOfWeek = _firstDayOfWeek$optio.firstDayOfWeek;
  var firstDateOfMonth = new Date(date2.getFullYear(), date2.getMonth(), 1);
  var lastDateOfMonth = new Date(date2.getFullYear(), date2.getMonth() + 1, 0);
  var firstWeekdayOfMonth = firstDateOfMonth.getDay();
  var lastWeekdayOfMonth = lastDateOfMonth.getDay();
  var daysInMonth = lastDateOfMonth.getDate();
  var daysToPrepend = (firstWeekdayOfMonth - firstDayOfWeek + DAYS_IN_WEEK) % DAYS_IN_WEEK;
  var daysToAppend = (DAYS_IN_WEEK - 1 - lastWeekdayOfMonth + firstDayOfWeek) % DAYS_IN_WEEK;
  var month = [];
  var week = [];
  for (var i2 = 1 - daysToPrepend; i2 <= daysInMonth + daysToAppend + 1; i2++) {
    if (i2 <= 0) {
      week.push(addDays2(firstDateOfMonth, i2 - 1));
    } else if (i2 > daysInMonth) {
      week.push(addDays2(lastDateOfMonth, i2 - daysInMonth));
    } else {
      week.push(setDate2(date2, i2));
    }
    if (week.length === 7) {
      month.push(week);
      week = [];
    }
  }
  return month;
};

// node_modules/@cloudscape-design/components/internal/utils/date-time/calendar.js
function getCalendarYear(date2) {
  const year = date2.getFullYear();
  return new Array(4).fill(0).map((_, i2) => new Array(3).fill(0).map((_2, j) => new Date(year, i2 * 3 + j)));
}
var MonthCalendar = class {
  constructor({ padDates, baseDate, startOfWeek: startOfWeek2, selection }) {
    this.padDates = padDates;
    this.weeks = [];
    this.range = [baseDate, baseDate];
    const allCalendarDates = getCalendarMonthWithSixRows(baseDate, { startOfWeek: startOfWeek2, padDates });
    this.weekdays = allCalendarDates[0].map((date2) => date2.getDay());
    const isDateVisible = (weekIndex, dayIndex) => {
      const week = allCalendarDates[weekIndex];
      const date2 = week === null || week === void 0 ? void 0 : week[dayIndex];
      if (!date2) {
        return false;
      }
      switch (padDates) {
        case "before":
          return isSameMonth(date2, baseDate) || isBefore(date2, baseDate);
        case "after":
          return isSameMonth(date2, baseDate) || isAfter(date2, baseDate);
      }
    };
    const isDateInRange = (weekIndex, dayIndex) => {
      const week = allCalendarDates[weekIndex];
      const date2 = week === null || week === void 0 ? void 0 : week[dayIndex];
      return !!(date2 && selection && checkDateIsInRange(date2, selection[0], selection[1]));
    };
    const getWeekTestIndex = (weekIndex) => {
      var _a2;
      const week = allCalendarDates[weekIndex];
      if (!week) {
        return void 0;
      }
      if (!isSameMonth(week[0], baseDate) && !isSameMonth(week[week.length - 1], baseDate)) {
        return void 0;
      }
      return ((_a2 = getWeekTestIndex(weekIndex - 1)) !== null && _a2 !== void 0 ? _a2 : 0) + 1;
    };
    for (let weekIndex = 0; weekIndex < allCalendarDates.length; weekIndex++) {
      const daysOfWeek = allCalendarDates[weekIndex];
      const week = { days: [], testIndex: getWeekTestIndex(weekIndex) };
      for (let dayIndex = 0; dayIndex < daysOfWeek.length; dayIndex++) {
        const date2 = daysOfWeek[dayIndex];
        const isVisible3 = isDateVisible(weekIndex, dayIndex);
        const isSelected = !!(selection && (isSameDay(date2, selection[0]) || isSameDay(date2, selection[1])));
        const isInRange = isDateInRange(weekIndex, dayIndex);
        const isTop = isVisible3 && !isDateVisible(weekIndex - 1, dayIndex);
        const isBottom = isVisible3 && !isDateVisible(weekIndex + 1, dayIndex);
        const isLeft = isVisible3 && !isDateVisible(weekIndex, dayIndex - 1);
        const isRight = isVisible3 && !isDateVisible(weekIndex, dayIndex + 1);
        const isRangeTop = isInRange && !isDateInRange(weekIndex - 1, dayIndex);
        const isRangeBottom = isInRange && !isDateInRange(weekIndex + 1, dayIndex);
        const isRangeLeft = isInRange && !isDateInRange(weekIndex, dayIndex - 1);
        const isRangeRight = isInRange && !isDateInRange(weekIndex, dayIndex + 1);
        week.days.push({
          date: date2,
          isVisible: isVisible3,
          isSelected,
          isInRange,
          isSelectionTop: isTop || isRangeTop,
          isSelectionBottom: isBottom || isRangeBottom,
          isSelectionLeft: isLeft || isRangeLeft,
          isSelectionRight: isRight || isRangeRight
        });
      }
      this.weeks.push(week);
    }
  }
};
var YearCalendar = class {
  constructor({ baseDate, selection }) {
    this.quarters = [];
    this.range = [baseDate, baseDate];
    const allCalendarMonths = getCalendarYear(baseDate);
    const isMonthInRange = (quarterIndex, monthIndex) => {
      const quarter = allCalendarMonths[quarterIndex];
      const month = quarter === null || quarter === void 0 ? void 0 : quarter[monthIndex];
      return !!(month && selection && checkMonthIsInRange(month, selection[0], selection[1]));
    };
    const isMonthVisible = (quarterIndex, monthIndex) => {
      const quarter = allCalendarMonths[quarterIndex];
      const month = quarter === null || quarter === void 0 ? void 0 : quarter[monthIndex];
      if (!month) {
        return false;
      }
      return isSameYear(month, baseDate);
    };
    for (let quarterIndex = 0; quarterIndex < allCalendarMonths.length; quarterIndex++) {
      const monthsOfQuarter = allCalendarMonths[quarterIndex];
      const quarter = { months: [] };
      for (let monthIndex = 0; monthIndex < monthsOfQuarter.length; monthIndex++) {
        const month = monthsOfQuarter[monthIndex];
        const isVisible3 = isMonthVisible(quarterIndex, monthIndex);
        const isSelected = !!(selection && (isSameMonth(month, selection[0]) || isSameMonth(month, selection[1])));
        const isInRange = isMonthInRange(quarterIndex, monthIndex);
        const isTop = isVisible3 && !isMonthVisible(quarterIndex - 1, monthIndex);
        const isBottom = isVisible3 && !isMonthVisible(quarterIndex + 1, monthIndex);
        const isLeft = isVisible3 && !isMonthVisible(quarterIndex, monthIndex - 1);
        const isRight = isVisible3 && !isMonthVisible(quarterIndex, monthIndex + 1);
        const isRangeTop = isInRange && !isMonthInRange(quarterIndex - 1, monthIndex);
        const isRangeBottom = isInRange && !isMonthInRange(quarterIndex + 1, monthIndex);
        const isRangeLeft = isInRange && !isMonthInRange(quarterIndex, monthIndex - 1);
        const isRangeRight = isInRange && !isMonthInRange(quarterIndex, monthIndex + 1);
        quarter.months.push({
          date: month,
          isVisible: isVisible3,
          isSelected,
          isInRange,
          isSelectionTop: isTop || isRangeTop,
          isSelectionBottom: isBottom || isRangeBottom,
          isSelectionLeft: isLeft || isRangeLeft,
          isSelectionRight: isRight || isRangeRight
        });
      }
      this.quarters.push(quarter);
    }
  }
};
function getCalendarMonthWithSixRows(date2, { startOfWeek: startOfWeek2, padDates }) {
  switch (padDates) {
    case "before":
      return [...getPrevMonthRows(date2, startOfWeek2), ...getCurrentMonthRows(date2, startOfWeek2)].slice(-6);
    case "after":
      return [...getCurrentMonthRows(date2, startOfWeek2), ...getNextMonthRows(date2, startOfWeek2)].slice(0, 6);
  }
}
function checkDateIsInRange(date2, dateOne, dateTwo) {
  if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {
    return false;
  }
  const inRange = isAfter(date2, dateOne) && isBefore(date2, dateTwo) || isAfter(date2, dateTwo) && isBefore(date2, dateOne);
  return inRange || isSameDay(date2, dateOne) || isSameDay(date2, dateTwo);
}
function checkMonthIsInRange(date2, dateOne, dateTwo) {
  if (!dateOne || !dateTwo || isSameMonth(dateOne, dateTwo)) {
    return false;
  }
  const inRange = isAfter(date2, dateOne) && isBefore(date2, dateTwo) || isAfter(date2, dateTwo) && isBefore(date2, dateOne);
  return inRange || isSameMonth(date2, dateOne) || isSameMonth(date2, dateTwo);
}
function getCurrentMonthRows(date2, firstDayOfWeek) {
  return getCalendarMonth(date2, { firstDayOfWeek });
}
function getPrevMonthRows(date2, firstDayOfWeek) {
  const rows = getCalendarMonth(subMonths(date2, 1), { firstDayOfWeek });
  const lastDay = rows[rows.length - 1][rows[rows.length - 1].length - 1];
  return !isSameMonth(date2, lastDay) ? rows : rows.slice(0, -1);
}
function getNextMonthRows(date2, firstDayOfWeek) {
  const rows = getCalendarMonth(addMonths(date2, 1), { firstDayOfWeek });
  const firstDay = rows[0][0];
  return !isSameMonth(date2, firstDay) ? rows : rows.slice(1);
}

// node_modules/@cloudscape-design/components/calendar/grid/use-calendar-grid-rows.js
function useCalendarGridRows({ baseDate, granularity, locale: locale3, startOfWeek: rawStartOfWeek }) {
  const isMonthPicker = granularity === "month";
  const rows = (0, import_react304.useMemo)(() => {
    if (isMonthPicker) {
      return getCalendarYear(baseDate);
    } else {
      const startOfWeek2 = normalizeStartOfWeek(rawStartOfWeek, locale3);
      return getCalendarMonthWithSixRows(baseDate, { startOfWeek: startOfWeek2, padDates: "after" });
    }
  }, [baseDate, isMonthPicker, rawStartOfWeek, locale3]);
  return rows;
}

// node_modules/@cloudscape-design/components/calendar/header/index.js
var import_react306 = __toESM(require_react());

// node_modules/@cloudscape-design/components/calendar/header/header-button.js
var import_react305 = __toESM(require_react());
function HeaderPrevButton({ ariaLabel, onChange }) {
  return import_react305.default.createElement(InternalButton, { iconName: "angle-left", ariaLabel, variant: "icon", onClick: () => onChange(-1), formAction: "none", className: styles_css_default103["calendar-prev-btn"] });
}
function HeaderNextButton({ ariaLabel, onChange }) {
  return import_react305.default.createElement(InternalButton, { iconName: "angle-right", ariaLabel, variant: "icon", onClick: () => onChange(1), formAction: "none", className: styles_css_default103["calendar-next-btn"] });
}

// node_modules/@cloudscape-design/components/calendar/header/index.js
var CalendarHeader = ({ formattedDate, onChange, previousLabel, nextLabel, headingId }) => {
  return import_react306.default.createElement(
    "div",
    { className: styles_css_default103["calendar-header"] },
    import_react306.default.createElement(HeaderPrevButton, { ariaLabel: previousLabel, onChange }),
    import_react306.default.createElement("h2", { className: styles_css_default103["calendar-header-title"], id: headingId }, formattedDate),
    import_react306.default.createElement(HeaderNextButton, { ariaLabel: nextLabel, onChange })
  );
};
var header_default = CalendarHeader;

// node_modules/@cloudscape-design/components/calendar/use-calendar-labels.js
function useCalendarLabels({ granularity, locale: locale3, i18nStrings, previousMonthAriaLabel, nextMonthAriaLabel, todayAriaLabel }) {
  var _a2, _b, _c;
  const i18n = useInternalI18n("calendar");
  const isMonthPicker = granularity === "month";
  const previousButtonLabel = isMonthPicker ? i18n("i18nStrings.previousYearAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousYearAriaLabel) : i18n("previousMonthAriaLabel", (_a2 = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousMonthAriaLabel) !== null && _a2 !== void 0 ? _a2 : previousMonthAriaLabel);
  const nextButtonLabel = isMonthPicker ? i18n("i18nStrings.nextYearAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextYearAriaLabel) : i18n("nextMonthAriaLabel", (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextMonthAriaLabel) !== null && _b !== void 0 ? _b : nextMonthAriaLabel);
  const currentDateLabel = isMonthPicker ? i18n("i18nStrings.currentMonthAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.currentMonthAriaLabel) : i18n("todayAriaLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.todayAriaLabel) !== null && _c !== void 0 ? _c : todayAriaLabel);
  const renderDate = (date2) => isMonthPicker ? date2.toLocaleString(locale3, { month: "short" }) : date2.getDate().toString();
  const renderDateAnnouncement2 = (date2, isCurrentDate) => {
    const formattedDate = isMonthPicker ? renderMonthAndYear(locale3, date2) : getDateLabel(locale3, date2, "short");
    if (isCurrentDate && currentDateLabel) {
      return formattedDate + ". " + currentDateLabel;
    }
    return formattedDate;
  };
  const renderHeaderText = (date2) => isMonthPicker ? date2.getFullYear().toString() : renderMonthAndYear(locale3, date2);
  return {
    previousButtonLabel,
    nextButtonLabel,
    renderDate,
    renderDateAnnouncement: renderDateAnnouncement2,
    renderHeaderText
  };
}

// node_modules/@cloudscape-design/components/calendar/internal.js
function Calendar(_a2) {
  var { value, locale: locale3 = "", startOfWeek: startOfWeek2, isDateEnabled = () => true, dateDisabledReason = () => "", ariaLabel, ariaLabelledby, ariaDescribedby, onChange, __internalRootRef, i18nStrings, granularity = "day", previousMonthAriaLabel, nextMonthAriaLabel, todayAriaLabel } = _a2, rest = __rest(_a2, ["value", "locale", "startOfWeek", "isDateEnabled", "dateDisabledReason", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "onChange", "__internalRootRef", "i18nStrings", "granularity", "previousMonthAriaLabel", "nextMonthAriaLabel", "todayAriaLabel"]);
  checkControlled("Calendar", "value", value, "onChange", onChange);
  const baseProps = getBaseProps(rest);
  const normalizedLocale = normalizeLocale("Calendar", locale3);
  const gridWrapperRef = (0, import_react307.useRef)(null);
  const [focusedDate, setFocusedDate] = (0, import_react307.useState)(null);
  const valueDateCache = useDateCache();
  const focusedDateCache = useDateCache();
  const parsedValue = value && value.length >= 4 ? parseDate2(value) : null;
  const memoizedValue = parsedValue && !isNaN(parsedValue.getDate()) ? valueDateCache(parsedValue) : null;
  const defaultDisplayedDate = memoizedValue !== null && memoizedValue !== void 0 ? memoizedValue : /* @__PURE__ */ new Date();
  const [displayedDate, setDisplayedDate] = (0, import_react307.useState)(defaultDisplayedDate);
  const headingId = useUniqueId("calendar-heading");
  const isMonthPicker = granularity === "month";
  const isDateFocusable = (date2) => isDateEnabled(date2) || !isDateEnabled(date2) && !!dateDisabledReason(date2);
  const baseDate = isMonthPicker ? getBaseMonth(displayedDate, isDateEnabled) : getBaseDay(displayedDate, isDateEnabled);
  const isSameDate = isMonthPicker ? isSameMonth : isSameDay;
  const isSamePage = isMonthPicker ? isSameYear : isSameMonth;
  const isCurrentPage = (date2) => isMonthPicker || isSameMonth(date2, baseDate);
  const { previousButtonLabel, nextButtonLabel, renderDate, renderDateAnnouncement: renderDateAnnouncement2, renderHeaderText } = useCalendarLabels({
    granularity,
    i18nStrings,
    locale: normalizedLocale,
    previousMonthAriaLabel,
    nextMonthAriaLabel,
    todayAriaLabel
  });
  const gridRows = useCalendarGridRows({ baseDate, granularity, startOfWeek: startOfWeek2, locale: normalizedLocale });
  (0, import_react307.useEffect)(() => {
    if (memoizedValue) {
      setDisplayedDate((prev) => prev.getTime() !== memoizedValue.getTime() ? memoizedValue : prev);
    }
  }, [memoizedValue]);
  const selectFocusedDate = (selected, baseDate2) => {
    if (selected && isDateFocusable(selected) && isSamePage(selected, baseDate2)) {
      return selected;
    }
    const today = /* @__PURE__ */ new Date();
    if (isDateFocusable(today) && isSamePage(today, baseDate2)) {
      return today;
    }
    if (isDateFocusable(baseDate2)) {
      return baseDate2;
    }
    return null;
  };
  const focusableDate = focusedDate || selectFocusedDate(memoizedValue, baseDate);
  const onHeaderChangePageHandler = (amount) => {
    const movePage = isMonthPicker ? addYears : addMonths;
    const newDate2 = movePage(baseDate, amount);
    onChangePageHandler(newDate2);
  };
  const onChangePageHandler = (newDate2) => {
    setDisplayedDate(newDate2);
    setFocusedDate(null);
  };
  const onGridFocusDateHandler = (date2) => {
    if (date2) {
      setFocusedDate(date2 ? focusedDateCache(date2) : null);
    }
  };
  const onGridSelectDateHandler = (date2) => {
    fireNonCancelableEvent(onChange, { value: formatDate(date2, granularity) });
    setFocusedDate(null);
  };
  const onGridBlur = (event) => {
    var _a3;
    const newFocusTargetIsInGrid = event.relatedTarget && ((_a3 = gridWrapperRef.current) === null || _a3 === void 0 ? void 0 : _a3.contains(event.relatedTarget));
    if (!newFocusTargetIsInGrid) {
      setFocusedDate(null);
    }
  };
  const onGridKeyDownHandler = useCalendarGridKeyboardNavigation({
    baseDate,
    focusableDate,
    granularity,
    isDateEnabled,
    isDateFocusable,
    onChangePage: onChangePageHandler,
    onFocusDate: onGridFocusDateHandler,
    onSelectDate: onGridSelectDateHandler
  });
  const headerText = renderHeaderText(baseDate);
  return import_react307.default.createElement(
    "div",
    Object.assign({ ref: __internalRootRef }, baseProps, { role: "group", "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, className: clsx_m_default(styles_css_default103.root, styles_css_default103.calendar, baseProps.className) }),
    import_react307.default.createElement(
      "div",
      { className: styles_css_default103["calendar-inner"] },
      import_react307.default.createElement(header_default, { formattedDate: headerText, onChange: onHeaderChangePageHandler, previousLabel: previousButtonLabel, nextLabel: nextButtonLabel, headingId }),
      import_react307.default.createElement(
        "div",
        { onBlur: onGridBlur, ref: gridWrapperRef },
        import_react307.default.createElement(Grid, { isDateEnabled, dateDisabledReason, focusedDate, focusableDate, onSelectDate: onGridSelectDateHandler, onFocusDate: onGridFocusDateHandler, onChangePage: onChangePageHandler, selectedDate: memoizedValue, ariaLabelledby: headingId, header: isMonthPicker ? null : import_react307.default.createElement(CalendarGridHeader, { locale: normalizedLocale, rows: gridRows }), rows: gridRows, isCurrentPage, renderDate, renderDateAnnouncement: renderDateAnnouncement2, isSameDate, onGridKeyDownHandler })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/calendar/index.js
function Calendar2(_a2) {
  var { locale: locale3 = "", isDateEnabled = () => true, granularity = "day" } = _a2, props2 = __rest(_a2, ["locale", "isDateEnabled", "granularity"]);
  const baseComponentProps = useBaseComponent("Calendar", {
    props: { granularity },
    metadata: {
      hasDisabledReasons: Boolean(props2.dateDisabledReason)
    }
  });
  return import_react308.default.createElement(Calendar, Object.assign({}, props2, baseComponentProps, { locale: locale3, isDateEnabled, granularity }));
}
applyDisplayName(Calendar2, "Calendar");

// node_modules/@cloudscape-design/components/cards/index.js
var import_react316 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-mouse-down-target.js
var import_react309 = __toESM(require_react());
var useEventListenersSingleton = createSingletonHandler((setTarget) => {
  function handleMouseDown(event) {
    setTarget(event.target);
  }
  function handleKeyDown() {
    setTarget(null);
  }
  const controller = new AbortController();
  window.addEventListener("mousedown", handleMouseDown, { signal: controller.signal });
  window.addEventListener("keydown", handleKeyDown, { signal: controller.signal });
  return () => {
    controller.abort();
  };
});
function useMouseDownTarget() {
  const mouseDownTargetRef = (0, import_react309.useRef)(null);
  useEventListenersSingleton((target) => {
    mouseDownTargetRef.current = target;
  });
  return () => mouseDownTargetRef.current;
}

// node_modules/@cloudscape-design/components/table/selection/selection-control.js
var import_react313 = __toESM(require_react());

// node_modules/@cloudscape-design/components/checkbox/internal.js
var import_react311 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/abstract-switch/index.js
var import_react310 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/abstract-switch/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/abstract-switch/analytics-metadata/styles.scoped.css";
var styles_css_default104 = {
  "label": "awsui_label_13tpe_9w8pd_5",
  "native-input": "awsui_native-input_13tpe_9w8pd_6"
};

// node_modules/@cloudscape-design/components/internal/components/abstract-switch/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/abstract-switch/styles.scoped.css";
var styles_css_default105 = {
  "content": "awsui_content_1wepg_fp1bh_145",
  "description": "awsui_description_1wepg_fp1bh_146",
  "label": "awsui_label_1wepg_fp1bh_147",
  "outline": "awsui_outline_1wepg_fp1bh_155",
  "show-outline": "awsui_show-outline_1wepg_fp1bh_158",
  "native-input": "awsui_native-input_1wepg_fp1bh_162",
  "wrapper": "awsui_wrapper_1wepg_fp1bh_166",
  "label-wrapper": "awsui_label-wrapper_1wepg_fp1bh_172",
  "empty-content": "awsui_empty-content_1wepg_fp1bh_183",
  "description-bottom-padding": "awsui_description-bottom-padding_1wepg_fp1bh_193",
  "label-disabled": "awsui_label-disabled_1wepg_fp1bh_201",
  "description-disabled": "awsui_description-disabled_1wepg_fp1bh_202",
  "control": "awsui_control_1wepg_fp1bh_206"
};

// node_modules/@cloudscape-design/components/internal/components/abstract-switch/index.js
function joinString(values2) {
  return values2.filter((value) => !!value).join(" ");
}
function AbstractSwitch(_a2) {
  var _b, _c, _d, _e, _f, _g;
  var { controlId, controlClassName, outlineClassName, showOutline: showOutline2, disabled, readOnly, nativeControl, styledControl, label, description, descriptionBottomPadding, ariaLabel, ariaLabelledby, ariaDescribedby, ariaControls, onClick, style, __internalRootRef } = _a2, rest = __rest(_a2, ["controlId", "controlClassName", "outlineClassName", "showOutline", "disabled", "readOnly", "nativeControl", "styledControl", "label", "description", "descriptionBottomPadding", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "ariaControls", "onClick", "style", "__internalRootRef"]);
  const uniqueId = useUniqueId();
  const id = controlId || uniqueId;
  const labelId = `${id}-label`;
  const descriptionId = `${id}-description`;
  const ariaLabelledByIds = [];
  if (label && !ariaLabel) {
    ariaLabelledByIds.push(labelId);
  }
  if (ariaLabelledby) {
    ariaLabelledByIds.push(ariaLabelledby);
  }
  const ariaDescriptions = [];
  if (ariaDescribedby) {
    ariaDescriptions.push(ariaDescribedby);
  }
  if (description) {
    ariaDescriptions.push(descriptionId);
  }
  return import_react310.default.createElement(
    "span",
    Object.assign({}, rest, { className: clsx_m_default(styles_css_default105.wrapper, rest.className), ref: __internalRootRef }, getAnalyticsLabelAttribute(label ? `.${styles_css_default104.label}` : `.${styles_css_default104["native-input"]}`)),
    import_react310.default.createElement(
      "span",
      Object.assign({ className: styles_css_default105["label-wrapper"], "aria-disabled": disabled ? "true" : void 0, onClick: disabled || readOnly ? void 0 : onClick }, getAnalyticsMetadataAttribute(disabled || readOnly ? {} : {
        action: "select",
        detail: {
          label: label ? `.${styles_css_default104.label}` : `.${styles_css_default104["native-input"]}`
        }
      })),
      import_react310.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default105.control, controlClassName), style: Object.assign({ background: (_b = style === null || style === void 0 ? void 0 : style.control) === null || _b === void 0 ? void 0 : _b.background }, (style === null || style === void 0 ? void 0 : style.focusRing) && {
          [custom_css_properties_default.styleFocusRingBorderColor]: (_c = style.focusRing) === null || _c === void 0 ? void 0 : _c.borderColor,
          [custom_css_properties_default.styleFocusRingBorderRadius]: (_d = style.focusRing) === null || _d === void 0 ? void 0 : _d.borderRadius,
          [custom_css_properties_default.styleFocusRingBorderWidth]: (_e = style.focusRing) === null || _e === void 0 ? void 0 : _e.borderWidth
        }) },
        styledControl,
        nativeControl({
          id,
          disabled,
          className: clsx_m_default(styles_css_default105["native-input"], styles_css_default104["native-input"]),
          "aria-describedby": ariaDescriptions.length ? joinString(ariaDescriptions) : void 0,
          "aria-labelledby": ariaLabelledByIds.length ? joinString(ariaLabelledByIds) : void 0,
          "aria-label": ariaLabel,
          "aria-controls": ariaControls
        }),
        import_react310.default.createElement("span", { className: clsx_m_default(styles_css_default105.outline, outlineClassName, showOutline2 && styles_css_default105["show-outline"]) })
      ),
      import_react310.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default105.content, !label && !description && styles_css_default105["empty-content"]) },
        label && import_react310.default.createElement("span", { id: labelId, className: clsx_m_default(styles_css_default105.label, styles_css_default104.label, { [styles_css_default105["label-disabled"]]: disabled }), style: { color: (_f = style === null || style === void 0 ? void 0 : style.label) === null || _f === void 0 ? void 0 : _f.color } }, label),
        description && import_react310.default.createElement("span", { id: descriptionId, className: clsx_m_default(styles_css_default105.description, {
          [styles_css_default105["description-disabled"]]: disabled,
          [styles_css_default105["description-bottom-padding"]]: descriptionBottomPadding
        }), style: { color: (_g = style === null || style === void 0 ? void 0 : style.description) === null || _g === void 0 ? void 0 : _g.color } }, description)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/internal/utils/style.js
function getComputedAbstractSwitchState(checked, disabled, readOnly, indeterminate, defaultValue4 = "default") {
  let computedState;
  if (disabled) {
    computedState = "disabled";
  } else if (readOnly) {
    computedState = "readOnly";
  } else if (indeterminate) {
    computedState = "indeterminate";
  } else if (checked) {
    computedState = "checked";
  } else {
    computedState = defaultValue4;
  }
  return computedState;
}

// node_modules/@cloudscape-design/components/checkbox/style.js
function getAbstractSwitchStyles(style, checked, disabled, readOnly, indeterminate) {
  var _a2, _b, _c, _d, _e, _f, _g;
  let properties2 = {};
  if (SYSTEM === "core" && ((style === null || style === void 0 ? void 0 : style.label) || (style === null || style === void 0 ? void 0 : style.input))) {
    const computedState = getComputedAbstractSwitchState(checked, disabled, readOnly, indeterminate);
    properties2 = {
      label: {
        color: ((_a2 = style === null || style === void 0 ? void 0 : style.label) === null || _a2 === void 0 ? void 0 : _a2.color) && style.label.color[computedState]
      },
      focusRing: {
        borderColor: (_c = (_b = style === null || style === void 0 ? void 0 : style.input) === null || _b === void 0 ? void 0 : _b.focusRing) === null || _c === void 0 ? void 0 : _c.borderColor,
        borderRadius: (_e = (_d = style === null || style === void 0 ? void 0 : style.input) === null || _d === void 0 ? void 0 : _d.focusRing) === null || _e === void 0 ? void 0 : _e.borderRadius,
        borderWidth: (_g = (_f = style === null || style === void 0 ? void 0 : style.input) === null || _f === void 0 ? void 0 : _f.focusRing) === null || _g === void 0 ? void 0 : _g.borderWidth
      }
    };
  }
  return properties2;
}
function getCheckboxIconStyles(style, checked, disabled, readOnly, indeterminate) {
  var _a2, _b, _c, _d;
  let properties2 = {};
  if (SYSTEM === "core" && (style === null || style === void 0 ? void 0 : style.input)) {
    const computedState = getComputedAbstractSwitchState(checked, disabled, readOnly, indeterminate);
    properties2 = {
      box: {
        fill: ((_a2 = style.input) === null || _a2 === void 0 ? void 0 : _a2.fill) && style.input.fill[computedState],
        stroke: ((_b = style.input) === null || _b === void 0 ? void 0 : _b.stroke) && style.input.stroke[computedState]
      },
      line: {
        stroke: ((_d = (_c = style.input) === null || _c === void 0 ? void 0 : _c.check) === null || _d === void 0 ? void 0 : _d.stroke) && style.input.check.stroke[computedState]
      }
    };
  }
  return properties2;
}

// node_modules/@cloudscape-design/components/checkbox/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/checkbox/styles.scoped.css";
var styles_css_default106 = {
  "root": "awsui_root_k2y2q_lw8kg_145",
  "checkbox-control": "awsui_checkbox-control_k2y2q_lw8kg_178",
  "outline": "awsui_outline_k2y2q_lw8kg_186"
};

// node_modules/@cloudscape-design/components/checkbox/internal.js
var InternalCheckbox = import_react311.default.forwardRef((_a2, ref) => {
  var { controlId, name, checked, disabled, readOnly, ariaRequired, indeterminate, children: children2, description, ariaLabel, onFocus, onBlur, onChange, tabIndex: explicitTabIndex, showOutline: showOutline2, ariaControls, style, nativeInputAttributes, __internalRootRef, __injectAnalyticsComponentMetadata = false } = _a2, rest = __rest(_a2, ["controlId", "name", "checked", "disabled", "readOnly", "ariaRequired", "indeterminate", "children", "description", "ariaLabel", "onFocus", "onBlur", "onChange", "tabIndex", "showOutline", "ariaControls", "style", "nativeInputAttributes", "__internalRootRef", "__injectAnalyticsComponentMetadata"]);
  const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(rest);
  const baseProps = getBaseProps(rest);
  const checkboxRef = (0, import_react311.useRef)(null);
  useForwardFocus(ref, checkboxRef);
  (0, import_react311.useEffect)(() => {
    if (checkboxRef.current) {
      checkboxRef.current.indeterminate = Boolean(indeterminate);
    }
  });
  const { tabIndex } = useSingleTabStopNavigation(checkboxRef, { tabIndex: explicitTabIndex });
  const analyticsMetadata = {};
  const analyticsComponentMetadata = {
    name: "awsui.Checkbox",
    label: { root: "self" },
    properties: {
      checked: `${!!checked}`
    }
  };
  if (__injectAnalyticsComponentMetadata) {
    analyticsMetadata.component = analyticsComponentMetadata;
  }
  if (!disabled && !readOnly) {
    analyticsMetadata.action = !checked ? "select" : "deselect";
  }
  return import_react311.default.createElement(AbstractSwitch, Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default106.root, baseProps.className), controlClassName: styles_css_default106["checkbox-control"], outlineClassName: styles_css_default106.outline, controlId, disabled, readOnly, label: children2, description, descriptionBottomPadding: true, ariaLabel, ariaLabelledby, ariaDescribedby, ariaControls, showOutline: showOutline2, nativeControl: (nativeControlProps) => import_react311.default.createElement(with_native_attributes_default, Object.assign({}, nativeControlProps, {
    tag: "input",
    componentName: "Checkbox",
    nativeAttributes: nativeInputAttributes,
    ref: checkboxRef,
    type: "checkbox",
    checked,
    name,
    "aria-required": ariaRequired ? "true" : void 0,
    "aria-disabled": readOnly && !disabled ? "true" : void 0,
    tabIndex,
    onFocus: () => fireNonCancelableEvent(onFocus),
    onBlur: () => fireNonCancelableEvent(onBlur),
    // empty handler to suppress React controllability warning
    onChange: () => {
    }
  })), onClick: () => {
    var _a3;
    (_a3 = checkboxRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
    fireNonCancelableEvent(
      onChange,
      // for deterministic transitions "indeterminate" -> "checked" -> "unchecked"
      indeterminate ? { checked: true, indeterminate: false } : { checked: !checked, indeterminate: false }
    );
  }, styledControl: import_react311.default.createElement(checkbox_icon_default, { checked, indeterminate, disabled, readOnly, style: getCheckboxIconStyles(style, checked, disabled, readOnly, indeterminate) }), style: getAbstractSwitchStyles(style, checked, disabled, readOnly, indeterminate), __internalRootRef }, getAnalyticsMetadataAttribute(analyticsMetadata)));
});
var internal_default16 = InternalCheckbox;

// node_modules/@cloudscape-design/components/radio-group/radio-button.js
var import_react312 = __toESM(require_react());

// node_modules/@cloudscape-design/components/radio-group/style.js
function getOuterCircleStyle(style, checked, disabled, readOnly) {
  var _a2, _b;
  let properties2;
  if (SYSTEM === "core" && (style === null || style === void 0 ? void 0 : style.input)) {
    const computedState = getComputedAbstractSwitchState(checked, disabled, readOnly, void 0);
    properties2 = {
      fill: ((_a2 = style.input) === null || _a2 === void 0 ? void 0 : _a2.fill) && style.input.fill[computedState],
      stroke: ((_b = style.input) === null || _b === void 0 ? void 0 : _b.stroke) && style.input.stroke[computedState]
    };
  }
  return properties2;
}
function getInnerCircleStyle(style, checked, disabled, readOnly) {
  var _a2, _b, _c;
  let properties2;
  if (SYSTEM === "core" && (style === null || style === void 0 ? void 0 : style.input)) {
    const computedState = getComputedAbstractSwitchState(checked, disabled, readOnly, void 0);
    properties2 = {
      fill: ((_b = (_a2 = style.input) === null || _a2 === void 0 ? void 0 : _a2.circle) === null || _b === void 0 ? void 0 : _b.fill) && style.input.circle.fill[computedState],
      stroke: ((_c = style.input) === null || _c === void 0 ? void 0 : _c.fill) && style.input.fill[computedState]
    };
  }
  return properties2;
}
function getAbstractSwitchStyles2(style, checked, disabled, readOnly) {
  var _a2, _b, _c, _d, _e, _f, _g, _h;
  let properties2 = {};
  if (SYSTEM === "core" && ((style === null || style === void 0 ? void 0 : style.label) || (style === null || style === void 0 ? void 0 : style.description) || (style === null || style === void 0 ? void 0 : style.input))) {
    const computedState = getComputedAbstractSwitchState(checked, disabled, readOnly, void 0);
    properties2 = {
      label: {
        color: ((_a2 = style === null || style === void 0 ? void 0 : style.label) === null || _a2 === void 0 ? void 0 : _a2.color) && style.label.color[computedState]
      },
      description: {
        color: ((_b = style === null || style === void 0 ? void 0 : style.description) === null || _b === void 0 ? void 0 : _b.color) && style.description.color[computedState]
      },
      focusRing: {
        borderColor: (_d = (_c = style === null || style === void 0 ? void 0 : style.input) === null || _c === void 0 ? void 0 : _c.focusRing) === null || _d === void 0 ? void 0 : _d.borderColor,
        borderRadius: (_f = (_e = style === null || style === void 0 ? void 0 : style.input) === null || _e === void 0 ? void 0 : _e.focusRing) === null || _f === void 0 ? void 0 : _f.borderRadius,
        borderWidth: (_h = (_g = style === null || style === void 0 ? void 0 : style.input) === null || _g === void 0 ? void 0 : _g.focusRing) === null || _h === void 0 ? void 0 : _h.borderWidth
      }
    };
  }
  return properties2;
}

// node_modules/@cloudscape-design/components/radio-group/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/radio-group/styles.scoped.css";
var styles_css_default107 = {
  "root": "awsui_root_1mabk_zffy1_145",
  "radio": "awsui_radio_1mabk_zffy1_178",
  "radio--has-description": "awsui_radio--has-description_1mabk_zffy1_186",
  "radio-control": "awsui_radio-control_1mabk_zffy1_190",
  "outline": "awsui_outline_1mabk_zffy1_198",
  "styled-circle-border": "awsui_styled-circle-border_1mabk_zffy1_221",
  "styled-circle-disabled": "awsui_styled-circle-disabled_1mabk_zffy1_225",
  "styled-circle-readonly": "awsui_styled-circle-readonly_1mabk_zffy1_225",
  "styled-circle-fill": "awsui_styled-circle-fill_1mabk_zffy1_230",
  "styled-circle-checked": "awsui_styled-circle-checked_1mabk_zffy1_246"
};

// node_modules/@cloudscape-design/components/radio-group/radio-button.js
var radio_button_default = import_react312.default.forwardRef(function RadioButton(_a2, ref) {
  var { name, label, value, checked, description, disabled, controlId, onChange, readOnly, className: className2, style } = _a2, rest = __rest(_a2, ["name", "label", "value", "checked", "description", "disabled", "controlId", "onChange", "readOnly", "className", "style"]);
  const radioButtonRef = (0, import_react312.useRef)(null);
  const mergedRefs = useMergeRefs(radioButtonRef, ref);
  const { tabIndex } = useSingleTabStopNavigation(radioButtonRef);
  return import_react312.default.createElement(AbstractSwitch, Object.assign({ className: clsx_m_default(styles_css_default107.radio, description && styles_css_default107["radio--has-description"], className2), controlClassName: styles_css_default107["radio-control"], outlineClassName: styles_css_default107.outline, label, description, disabled, readOnly, controlId, style: getAbstractSwitchStyles2(style, checked, disabled, readOnly) }, copyAnalyticsMetadataAttribute(rest), { nativeControl: (nativeControlProps) => import_react312.default.createElement("input", Object.assign({}, nativeControlProps, {
    tabIndex,
    type: "radio",
    ref: mergedRefs,
    name,
    value,
    checked,
    "aria-disabled": readOnly && !disabled ? "true" : void 0,
    // empty handler to suppress React controllability warning
    onChange: () => {
    }
  })), onClick: () => {
    var _a3;
    (_a3 = radioButtonRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
    if (checked) {
      return;
    }
    fireNonCancelableEvent(onChange, { value });
  }, styledControl: import_react312.default.createElement(
    "svg",
    { viewBox: "0 0 100 100", focusable: "false", "aria-hidden": "true" },
    import_react312.default.createElement("circle", { className: clsx_m_default(styles_css_default107["styled-circle-border"], {
      [styles_css_default107["styled-circle-disabled"]]: disabled,
      [styles_css_default107["styled-circle-readonly"]]: readOnly
    }), strokeWidth: 6.25, cx: 50, cy: 50, r: 46, style: getOuterCircleStyle(style, checked, disabled, readOnly) }),
    import_react312.default.createElement("circle", { className: clsx_m_default(styles_css_default107["styled-circle-fill"], {
      [styles_css_default107["styled-circle-disabled"]]: disabled,
      [styles_css_default107["styled-circle-checked"]]: checked,
      [styles_css_default107["styled-circle-readonly"]]: readOnly
    }), strokeWidth: 30, cx: 50, cy: 50, r: 35, style: getInnerCircleStyle(style, checked, disabled, readOnly) })
  ) }));
});

// node_modules/@cloudscape-design/components/table/selection/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/table/selection/styles.scoped.css";
var styles_css_default108 = {
  "root": "awsui_root_1s55x_14pps_145",
  "label": "awsui_label_1s55x_14pps_149",
  "label-top": "awsui_label-top_1s55x_14pps_163",
  "stud": "awsui_stud_1s55x_14pps_168"
};

// node_modules/@cloudscape-design/components/table/selection/selection-control.js
function SelectionControl(_a2) {
  var { selectionType, indeterminate = false, onShiftToggle, onFocusUp, onFocusDown, name, ariaLabel, focusedComponent, rowIndex, itemKey, verticalAlign = "middle" } = _a2, sharedProps = __rest(_a2, ["selectionType", "indeterminate", "onShiftToggle", "onFocusUp", "onFocusDown", "name", "ariaLabel", "focusedComponent", "rowIndex", "itemKey", "verticalAlign"]);
  const controlId = useUniqueId();
  const isMultiSelection = selectionType === "multi";
  const { navigationActive } = useSingleTabStopNavigation(null);
  const setShiftState = (event) => {
    if (isMultiSelection) {
      onShiftToggle === null || onShiftToggle === void 0 ? void 0 : onShiftToggle(event.shiftKey);
    }
  };
  const onMouseDownHandler = (event) => {
    setShiftState(event);
    if (isMultiSelection) {
      event.preventDefault();
    }
  };
  const handleKeyDown = (event) => {
    setShiftState(event);
    if (isMultiSelection && !navigationActive) {
      if (event.keyCode === KeyCode2.up) {
        event.preventDefault();
        onFocusUp === null || onFocusUp === void 0 ? void 0 : onFocusUp(event);
      }
      if (event.keyCode === KeyCode2.down) {
        event.preventDefault();
        onFocusDown === null || onFocusDown === void 0 ? void 0 : onFocusDown(event);
      }
    }
  };
  const handleClick = (event) => {
    const target = event.currentTarget;
    const nativeInput = target.tagName === "INPUT" ? target : target.querySelector("input");
    nativeInput === null || nativeInput === void 0 ? void 0 : nativeInput.focus();
  };
  const selector = isMultiSelection ? import_react313.default.createElement(internal_default16, Object.assign({}, sharedProps, { showOutline: focusedComponent === "selection-control", controlId, "data-focus-id": "selection-control", indeterminate })) : import_react313.default.createElement(radio_button_default, Object.assign({}, sharedProps, { controlId, name, value: "", label: "" }));
  return import_react313.default.createElement(
    import_react313.default.Fragment,
    null,
    import_react313.default.createElement("label", Object.assign({ onKeyDown: handleKeyDown, onKeyUp: setShiftState, onMouseDown: onMouseDownHandler, onMouseUp: setShiftState, onClick: handleClick, htmlFor: controlId, className: clsx_m_default(styles_css_default108.label, styles_css_default108.root, verticalAlign === "top" && styles_css_default108["label-top"]), "aria-label": ariaLabel, title: ariaLabel }, rowIndex !== void 0 && !sharedProps.disabled ? getAnalyticsMetadataAttribute({
      detail: {
        position: `${rowIndex + 1}`,
        item: itemKey || ""
      }
    }) : {}), selector),
    import_react313.default.createElement("span", { className: styles_css_default108.stud, "aria-hidden": true }, " ")
  );
}

// node_modules/@cloudscape-design/components/table/utils.js
var applyTrackBy = (trackBy, item) => {
  if (typeof trackBy === "function") {
    return trackBy(item);
  }
  return item[trackBy];
};
var getItemKey = (trackBy, item, index) => {
  if (!trackBy) {
    return index;
  }
  return applyTrackBy(trackBy, item);
};
var getTrackableValue = (trackBy, item) => {
  if (!trackBy) {
    return item;
  }
  return applyTrackBy(trackBy, item);
};
var getColumnKey = (column, index) => {
  return column.id || index;
};
var toContainerVariant = (variant) => {
  const isDefaultVariant = !variant || variant === "container";
  return isDefaultVariant ? "default" : variant === "borderless" ? "embedded" : variant;
};
function checkSortingState(columnDefinitions, sortingComparator) {
  const matchedColumn = columnDefinitions.filter((column) => column.sortingComparator === sortingComparator)[0];
  if (!matchedColumn) {
    warnOnce("Table", "Currently active sorting comparator was not found in any columns. Make sure to provide the same comparator function instance on each render.");
  }
}
function getVisibleColumnDefinitions({ columnDisplay, visibleColumns, columnDefinitions }) {
  if (columnDisplay) {
    return getVisibleColumnDefinitionsFromColumnDisplay({ columnDisplay, columnDefinitions });
  } else if (visibleColumns) {
    return getVisibleColumnDefinitionsFromVisibleColumns({ visibleColumns, columnDefinitions });
  } else {
    return columnDefinitions;
  }
}
function getVisibleColumnDefinitionsFromColumnDisplay({ columnDisplay, columnDefinitions }) {
  const columnDefinitionsById = columnDefinitions.reduce((accumulator, item) => item.id === void 0 ? accumulator : Object.assign(Object.assign({}, accumulator), { [item.id]: item }), {});
  return columnDisplay.filter((item) => item.visible).map((item) => columnDefinitionsById[item.id]).filter(Boolean);
}
function getVisibleColumnDefinitionsFromVisibleColumns({ visibleColumns, columnDefinitions }) {
  const ids2 = new Set(visibleColumns);
  return columnDefinitions.filter(({ id }) => id !== void 0 && ids2.has(id));
}
function getStickyClassNames(styles, props2) {
  return {
    [styles["sticky-cell"]]: !!props2,
    [styles["sticky-cell-pad-inline-start"]]: !!(props2 === null || props2 === void 0 ? void 0 : props2.padInlineStart),
    [styles["sticky-cell-last-inline-start"]]: !!(props2 === null || props2 === void 0 ? void 0 : props2.lastInsetInlineStart),
    [styles["sticky-cell-last-inline-end"]]: !!(props2 === null || props2 === void 0 ? void 0 : props2.lastInsetInlineEnd)
  };
}

// node_modules/@cloudscape-design/components/table/selection/utils.js
var SELECTION_ITEM = "selection-item";
var SELECTION_ROOT = "selection-root";
var ItemSet = class {
  constructor(trackBy, items) {
    this.map = /* @__PURE__ */ new Map();
    this.put = (item) => this.map.set.call(this.map, getTrackableValue(this.trackBy, item), item);
    this.has = (item) => this.map.has.call(this.map, getTrackableValue(this.trackBy, item));
    this.forEach = this.map.forEach.bind(this.map);
    this.trackBy = trackBy;
    items.forEach(this.put);
  }
};
var focusMarkers = {
  item: { ["data-" + SELECTION_ITEM]: "item" },
  all: { ["data-" + SELECTION_ITEM]: "all" },
  root: { ["data-" + SELECTION_ROOT]: "true" }
};

// node_modules/@cloudscape-design/components/table/selection/use-selection-focus-move.js
function useSelectionFocusMove(selectionType, totalItems) {
  if (selectionType !== "multi") {
    return {};
  }
  function moveFocus(sourceElement, fromIndex, direction) {
    let index = fromIndex;
    const rootContainer = findRootContainer(sourceElement);
    while (index >= -1 && index < totalItems) {
      index += direction;
      const control = findSelectionControlByIndex(rootContainer, index);
      if (control && !control.disabled) {
        control.focus();
        break;
      }
    }
  }
  const [moveFocusDown, moveFocusUp] = [1, -1].map((direction) => {
    return (event) => {
      const target = event.currentTarget;
      const itemNode = findUpUntil(target, (node) => node.dataset.selectionItem === "item");
      const fromIndex = Array.prototype.indexOf.call(itemNode.parentElement.children, itemNode);
      moveFocus(target, fromIndex, direction);
    };
  });
  return {
    moveFocusDown,
    moveFocusUp,
    moveFocus
  };
}
function findSelectionControlByIndex(rootContainer, index) {
  if (index === -1) {
    return rootContainer.querySelector(`[data-${SELECTION_ITEM}="all"] .${styles_css_default108.root} input`);
  }
  return rootContainer.querySelectorAll(`[data-${SELECTION_ITEM}="item"] .${styles_css_default108.root} input`)[index];
}
function findRootContainer(element) {
  return findUpUntil(element, (node) => node.dataset.selectionRoot === "true");
}

// node_modules/@cloudscape-design/components/table/selection/use-selection.js
var import_react314 = __toESM(require_react());
function useSelection(options) {
  const singleSelectionProps = useSingleSelection(options);
  const multiSelectionProps = useMultiSelection(options);
  return options.selectionType === "single" ? singleSelectionProps : multiSelectionProps;
}
function useSingleSelection({ ariaLabels, isItemDisabled = () => false, onSelectionChange, selectedItems = [], selectionType, trackBy, setLastUserAction }) {
  const selectionControlName = useUniqueId();
  if (selectionType !== "single") {
    return { isItemSelected: () => false };
  }
  const selectedSet = new ItemSet(trackBy, selectedItems.slice(0, 1));
  const isItemSelected = selectedSet.has.bind(selectedSet);
  const handleToggleItem = (item) => {
    if (!isItemDisabled(item) && !isItemSelected(item)) {
      fireNonCancelableEvent(onSelectionChange, { selectedItems: [item] });
      setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("selection");
    }
  };
  return {
    isItemSelected,
    getItemSelectionProps: (item) => {
      var _a2;
      return {
        name: selectionControlName,
        selectionType: "single",
        disabled: isItemDisabled(item),
        checked: isItemSelected(item),
        onChange: () => handleToggleItem(item),
        ariaLabel: joinStrings(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel, (_a2 = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.itemSelectionLabel) === null || _a2 === void 0 ? void 0 : _a2.call(ariaLabels, { selectedItems }, item))
      };
    }
  };
}
function useMultiSelection({ ariaLabels, isItemDisabled = () => false, items, loading, onSelectionChange, selectedItems = [], selectionType, trackBy, setLastUserAction }) {
  const selectionControlName = useUniqueId();
  const [shiftPressed, setShiftPressed] = (0, import_react314.useState)(false);
  const [lastClickedItem, setLastClickedItem] = (0, import_react314.useState)(null);
  if (selectionType !== "multi") {
    return { isItemSelected: () => false };
  }
  const selectedSet = new ItemSet(trackBy, selectedItems);
  const isItemSelected = selectedSet.has.bind(selectedSet);
  let allItemsDisabled = true;
  let allEnabledItemsSelected = true;
  for (const item of items) {
    allItemsDisabled = allItemsDisabled && isItemDisabled(item);
    allEnabledItemsSelected = allEnabledItemsSelected && (isItemSelected(item) || isItemDisabled(item));
  }
  const allItemsCheckboxSelected = selectedItems.length > 0 && allEnabledItemsSelected;
  const allItemsCheckboxIndeterminate = selectedItems.length > 0 && !allEnabledItemsSelected;
  const itemIndexesMap = /* @__PURE__ */ new Map();
  items.forEach((item, i2) => itemIndexesMap.set(getTrackableValue(trackBy, item), i2));
  const getShiftSelectedItems = (item) => {
    const lastClickedItemIndex = lastClickedItem ? itemIndexesMap.get(getTrackableValue(trackBy, lastClickedItem)) : void 0;
    if (lastClickedItemIndex !== void 0) {
      const currentItemIndex = itemIndexesMap.get(getTrackableValue(trackBy, item));
      const start = Math.min(currentItemIndex, lastClickedItemIndex);
      const end = Math.max(currentItemIndex, lastClickedItemIndex);
      return items.slice(start, end + 1);
    }
    return [item];
  };
  const selectItems = (requestedItems) => {
    const newSelectedItems = [...selectedItems];
    requestedItems.forEach((newItem) => {
      if (!isItemSelected(newItem) && !isItemDisabled(newItem)) {
        newSelectedItems.push(newItem);
      }
    });
    return newSelectedItems;
  };
  const deselectItems = (requestedItems) => {
    const requestedItemsSet = new ItemSet(trackBy, requestedItems);
    const newSelectedItems = [];
    selectedItems.forEach((selectedItem) => {
      const shouldUnselect = requestedItemsSet.has(selectedItem);
      if (!shouldUnselect || isItemDisabled(selectedItem)) {
        newSelectedItems.push(selectedItem);
      }
    });
    return newSelectedItems;
  };
  const handleToggleAll = () => {
    const newSelectedItems = allEnabledItemsSelected ? deselectItems(items) : selectItems(items);
    fireNonCancelableEvent(onSelectionChange, { selectedItems: newSelectedItems });
    setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("selection");
  };
  const handleToggleItem = (item) => {
    if (!isItemDisabled(item)) {
      const requestedItems = shiftPressed ? getShiftSelectedItems(item) : [item];
      const selectedItems2 = isItemSelected(item) ? deselectItems(requestedItems) : selectItems(requestedItems);
      fireNonCancelableEvent(onSelectionChange, { selectedItems: selectedItems2 });
      setLastClickedItem(item);
      setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("selection");
    }
  };
  return {
    isItemSelected,
    getSelectAllProps: () => {
      var _a2;
      return {
        name: selectionControlName,
        selectionType: "multi",
        disabled: allItemsDisabled || !!loading,
        checked: allItemsCheckboxSelected,
        indeterminate: allItemsCheckboxIndeterminate,
        onChange: handleToggleAll,
        ariaLabel: joinStrings(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel, (_a2 = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.allItemsSelectionLabel) === null || _a2 === void 0 ? void 0 : _a2.call(ariaLabels, { selectedItems })),
        selectionGroupLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel
      };
    },
    getItemSelectionProps: (item) => {
      var _a2;
      return {
        name: selectionControlName,
        selectionType: "multi",
        disabled: isItemDisabled(item),
        checked: isItemSelected(item),
        onChange: () => handleToggleItem(item),
        onShiftToggle: (value) => setShiftPressed(value),
        ariaLabel: joinStrings(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel, (_a2 = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.itemSelectionLabel) === null || _a2 === void 0 ? void 0 : _a2.call(ariaLabels, { selectedItems }, item))
      };
    }
  };
}

// node_modules/@cloudscape-design/components/table/sticky-scrolling.js
function stickyScrolling(containerRef, stickyRef) {
  const scrollToTop = () => {
    if (!containerRef.current || !stickyRef.current) {
      return;
    }
    const scrollingOffset = calculateScrollingOffset(containerRef.current, stickyRef.current);
    if (scrollingOffset > 0) {
      scrollUpBy(scrollingOffset, containerRef.current);
    }
  };
  const scrollToItem = (item) => {
    if (!item || !containerRef.current || !stickyRef.current) {
      return;
    }
    const stickyBottom = getLogicalBoundingClientRect(stickyRef.current).insetBlockEnd;
    const scrollingOffset = stickyBottom - getLogicalBoundingClientRect(item).insetBlockStart;
    if (scrollingOffset > 0) {
      scrollUpBy(scrollingOffset, containerRef.current);
    }
  };
  return {
    scrollToTop,
    scrollToItem
  };
}
function calculateScrollingOffset(container, sticky) {
  const stickyRect = getLogicalBoundingClientRect(sticky);
  const containerRect = getLogicalBoundingClientRect(container);
  return stickyRect.insetBlockStart - containerRect.insetBlockStart;
}
function scrollUpBy(amount, container) {
  const parent = getOverflowParents(container);
  if (parent.length) {
    parent[0].scrollTop -= amount;
  } else {
    window.scrollTo({ top: window.pageYOffset - amount });
  }
}

// node_modules/@cloudscape-design/components/table/tools-header.js
var import_react315 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/table/styles.scoped.css";
var styles_css_default109 = {
  "root": "awsui_root_wih1l_1xndw_153",
  "tools": "awsui_tools_wih1l_1xndw_164",
  "tools-filtering": "awsui_tools-filtering_wih1l_1xndw_172",
  "tools-align-right": "awsui_tools-align-right_wih1l_1xndw_186",
  "tools-pagination": "awsui_tools-pagination_wih1l_1xndw_190",
  "tools-preferences": "awsui_tools-preferences_wih1l_1xndw_190",
  "tools-small": "awsui_tools-small_wih1l_1xndw_196",
  "table": "awsui_table_wih1l_1xndw_202",
  "table-layout-fixed": "awsui_table-layout-fixed_wih1l_1xndw_208",
  "wrapper": "awsui_wrapper_wih1l_1xndw_212",
  "variant-stacked": "awsui_variant-stacked_wih1l_1xndw_219",
  "wrapper-content-measure": "awsui_wrapper-content-measure_wih1l_1xndw_219",
  "variant-container": "awsui_variant-container_wih1l_1xndw_219",
  "has-footer": "awsui_has-footer_wih1l_1xndw_222",
  "has-header": "awsui_has-header_wih1l_1xndw_225",
  "cell-merged": "awsui_cell-merged_wih1l_1xndw_242",
  "cell-merged-content": "awsui_cell-merged-content_wih1l_1xndw_254",
  "empty": "awsui_empty_wih1l_1xndw_270",
  "loading": "awsui_loading_wih1l_1xndw_274",
  "selection-control": "awsui_selection-control_wih1l_1xndw_283",
  "selection-control-header": "awsui_selection-control-header_wih1l_1xndw_290",
  "header-secondary": "awsui_header-secondary_wih1l_1xndw_296",
  "variant-full-page": "awsui_variant-full-page_wih1l_1xndw_307",
  "table-has-header": "awsui_table-has-header_wih1l_1xndw_313",
  "header-controls": "awsui_header-controls_wih1l_1xndw_324",
  "variant-embedded": "awsui_variant-embedded_wih1l_1xndw_333",
  "variant-borderless": "awsui_variant-borderless_wih1l_1xndw_333",
  "footer-wrapper": "awsui_footer-wrapper_wih1l_1xndw_338",
  "footer": "awsui_footer_wih1l_1xndw_338",
  "footer-with-pagination": "awsui_footer-with-pagination_wih1l_1xndw_346",
  "footer-pagination": "awsui_footer-pagination_wih1l_1xndw_354",
  "thead-active": "awsui_thead-active_wih1l_1xndw_358",
  "row": "awsui_row_wih1l_1xndw_359",
  "row-selected": "awsui_row-selected_wih1l_1xndw_360"
};

// node_modules/@cloudscape-design/components/table/tools-header.js
function ToolsHeader({ header, filter, pagination, preferences, setLastUserAction }) {
  const [breakpoint, ref] = useContainerBreakpoints(["xs"]);
  const isHeaderString = typeof header === "string";
  const assignHeaderId = (0, import_react315.useContext)(CollectionLabelContext).assignId;
  const headingId = useUniqueId("heading");
  if (assignHeaderId !== void 0 && isHeaderString) {
    assignHeaderId(headingId);
  }
  const isSmall = breakpoint === "default";
  const hasTools = filter || pagination || preferences;
  return import_react315.default.createElement(
    import_react315.default.Fragment,
    null,
    isHeaderString ? import_react315.default.createElement("span", { id: headingId }, header) : header,
    hasTools && import_react315.default.createElement(
      "div",
      { ref, className: clsx_m_default(styles_css_default109.tools, isSmall && styles_css_default109["tools-small"]) },
      filter && import_react315.default.createElement("div", { className: styles_css_default109["tools-filtering"], onClickCapture: () => setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("filter"), onKeyDownCapture: () => setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("filter") }, filter),
      import_react315.default.createElement(
        "div",
        { className: styles_css_default109["tools-align-right"] },
        pagination && import_react315.default.createElement("div", { className: styles_css_default109["tools-pagination"], onClickCapture: () => setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("pagination") }, pagination),
        preferences && import_react315.default.createElement("div", { className: styles_css_default109["tools-preferences"], onClickCapture: () => setLastUserAction === null || setLastUserAction === void 0 ? void 0 : setLastUserAction("preferences") }, preferences)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/cards/cards-layout-helper.js
var WIDTHS = [1920, 1400, 1200, 992, 768];
var defaultCardsPerRow = WIDTHS.map((value, index, widths) => ({
  minWidth: value,
  cards: widths.length + 1 - index
}));
var getCardsPerRow = (width, config) => {
  if (config.length === 0) {
    config = defaultCardsPerRow;
  }
  let cardsPerRow = 1;
  const sortedConfig = config.slice().map((value) => ({
    minWidth: value.minWidth || 0,
    cards: value.cards
  })).sort((a4, b2) => b2.minWidth - a4.minWidth);
  sortedConfig.some((layout) => {
    if (width >= layout.minWidth) {
      cardsPerRow = layout.cards;
      return true;
    }
  });
  return cardsPerRow;
};

// node_modules/@cloudscape-design/components/cards/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/cards/styles.scoped.css";
var styles_css_default110 = {
  "card-inner": "awsui_card-inner_p8a6i_1m5fe_161",
  "root": "awsui_root_p8a6i_1m5fe_193",
  "header-variant-full-page": "awsui_header-variant-full-page_p8a6i_1m5fe_232",
  "header-refresh": "awsui_header-refresh_p8a6i_1m5fe_232",
  "list": "awsui_list_p8a6i_1m5fe_239",
  "list-grid-1": "awsui_list-grid-1_p8a6i_1m5fe_250",
  "card": "awsui_card_p8a6i_1m5fe_161",
  "list-grid-2": "awsui_list-grid-2_p8a6i_1m5fe_253",
  "list-grid-3": "awsui_list-grid-3_p8a6i_1m5fe_256",
  "list-grid-4": "awsui_list-grid-4_p8a6i_1m5fe_259",
  "list-grid-5": "awsui_list-grid-5_p8a6i_1m5fe_262",
  "list-grid-6": "awsui_list-grid-6_p8a6i_1m5fe_265",
  "list-grid-7": "awsui_list-grid-7_p8a6i_1m5fe_268",
  "list-grid-8": "awsui_list-grid-8_p8a6i_1m5fe_271",
  "list-grid-9": "awsui_list-grid-9_p8a6i_1m5fe_274",
  "list-grid-10": "awsui_list-grid-10_p8a6i_1m5fe_277",
  "list-grid-11": "awsui_list-grid-11_p8a6i_1m5fe_280",
  "list-grid-12": "awsui_list-grid-12_p8a6i_1m5fe_283",
  "list-grid-13": "awsui_list-grid-13_p8a6i_1m5fe_286",
  "list-grid-14": "awsui_list-grid-14_p8a6i_1m5fe_289",
  "list-grid-15": "awsui_list-grid-15_p8a6i_1m5fe_292",
  "list-grid-16": "awsui_list-grid-16_p8a6i_1m5fe_295",
  "list-grid-17": "awsui_list-grid-17_p8a6i_1m5fe_298",
  "list-grid-18": "awsui_list-grid-18_p8a6i_1m5fe_301",
  "list-grid-19": "awsui_list-grid-19_p8a6i_1m5fe_304",
  "list-grid-20": "awsui_list-grid-20_p8a6i_1m5fe_307",
  "selection-control": "awsui_selection-control_p8a6i_1m5fe_311",
  "loading": "awsui_loading_p8a6i_1m5fe_321",
  "empty": "awsui_empty_p8a6i_1m5fe_322",
  "has-header": "awsui_has-header_p8a6i_1m5fe_329",
  "refresh": "awsui_refresh_p8a6i_1m5fe_332",
  "card-header": "awsui_card-header_p8a6i_1m5fe_403",
  "card-header-inner": "awsui_card-header-inner_p8a6i_1m5fe_411",
  "card-selectable": "awsui_card-selectable_p8a6i_1m5fe_415",
  "card-selected": "awsui_card-selected_p8a6i_1m5fe_418",
  "section": "awsui_section_p8a6i_1m5fe_426",
  "section-header": "awsui_section-header_p8a6i_1m5fe_434",
  "section-content": "awsui_section-content_p8a6i_1m5fe_440",
  "footer-pagination": "awsui_footer-pagination_p8a6i_1m5fe_450"
};

// node_modules/@cloudscape-design/components/cards/index.js
var Cards = import_react316.default.forwardRef(function(_a2, ref) {
  var { items = [], cardDefinition, cardsPerRow = [], header, filter, pagination, preferences, empty, loading, loadingText, trackBy, selectedItems, selectionType, isItemDisabled, onSelectionChange, ariaLabels, visibleSections, stickyHeader, stickyHeaderVerticalOffset, variant = "container", renderAriaLive, firstIndex = 1, totalItemsCount, entireCardClickable } = _a2, rest = __rest(_a2, ["items", "cardDefinition", "cardsPerRow", "header", "filter", "pagination", "preferences", "empty", "loading", "loadingText", "trackBy", "selectedItems", "selectionType", "isItemDisabled", "onSelectionChange", "ariaLabels", "visibleSections", "stickyHeader", "stickyHeaderVerticalOffset", "variant", "renderAriaLive", "firstIndex", "totalItemsCount", "entireCardClickable"]);
  const { __internalRootRef } = useBaseComponent("Cards", {
    props: { entireCardClickable, selectionType, stickyHeader, variant },
    metadata: { usesVisibleSections: !!visibleSections }
  });
  const baseProps = getBaseProps(rest);
  const isRefresh = useVisualRefresh();
  const isMobile = useMobile();
  const computedVariant = isRefresh ? variant : "container";
  const headerIdRef = (0, import_react316.useRef)(void 0);
  const setHeaderRef = (0, import_react316.useCallback)((id) => {
    headerIdRef.current = id;
  }, []);
  const isLabelledByHeader = !(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.cardsLabel) && !!header;
  const [columns, measureRef] = useContainerQuery(({ contentBoxWidth }) => getCardsPerRow(contentBoxWidth, cardsPerRow), [cardsPerRow]);
  const refObject = (0, import_react316.useRef)(null);
  const mergedRef = useMergeRefs(measureRef, refObject, __internalRootRef);
  const getMouseDownTarget = useMouseDownTarget();
  const i18n = useInternalI18n("cards");
  const { isItemSelected, getItemSelectionProps } = useSelection({
    items,
    trackBy,
    selectedItems,
    selectionType,
    isItemDisabled,
    onSelectionChange,
    ariaLabels: {
      itemSelectionLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.itemSelectionLabel,
      selectionGroupLabel: i18n("ariaLabels.selectionGroupLabel", ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel)
    }
  });
  const hasToolsHeader = header || filter || pagination || preferences;
  const hasFooterPagination = isMobile && variant === "full-page" && !!pagination;
  const headerRef = (0, import_react316.useRef)(null);
  const { scrollToTop, scrollToItem } = stickyScrolling(refObject, headerRef);
  stickyHeader = !isMobile && stickyHeader;
  const onCardFocus = (event) => {
    if (stickyHeader && !event.currentTarget.contains(getMouseDownTarget())) {
      scrollToItem(event.currentTarget);
    }
  };
  (0, import_react316.useImperativeHandle)(ref, () => ({
    scrollToTop: () => {
      if (stickyHeader) {
        scrollToTop();
      }
    }
  }), [stickyHeader, scrollToTop]);
  let status;
  if (loading) {
    status = import_react316.default.createElement(
      "div",
      { className: styles_css_default110.loading },
      import_react316.default.createElement(
        StatusIndicator,
        { type: "loading" },
        import_react316.default.createElement(internal_default2, { tagName: "span" }, loadingText)
      )
    );
  } else if (empty && !items.length) {
    status = import_react316.default.createElement("div", { className: styles_css_default110.empty }, empty);
  }
  return import_react316.default.createElement(
    LinkDefaultVariantContext.Provider,
    { value: { defaultVariant: "primary" } },
    import_react316.default.createElement(
      AnalyticsFunnelSubStep,
      null,
      import_react316.default.createElement(
        "div",
        Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default110.root), ref: mergedRef }),
        import_react316.default.createElement(
          InternalContainerAsSubstep,
          { header: hasToolsHeader && import_react316.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default110.header, isRefresh && styles_css_default110["header-refresh"], styles_css_default110[`header-variant-${computedVariant}`]) },
            import_react316.default.createElement(
              CollectionLabelContext.Provider,
              { value: { assignId: setHeaderRef } },
              import_react316.default.createElement(ToolsHeader, { header, filter, pagination, preferences })
            )
          ), footer: hasFooterPagination && import_react316.default.createElement("div", { className: styles_css_default110["footer-pagination"] }, pagination), disableContentPaddings: true, disableHeaderPaddings: computedVariant === "full-page", variant: computedVariant === "container" ? "cards" : computedVariant, __stickyHeader: stickyHeader, __stickyOffset: stickyHeaderVerticalOffset, __headerRef: headerRef, __fullPage: computedVariant === "full-page", __disableFooterDivider: true },
          import_react316.default.createElement(
            "div",
            { className: clsx_m_default(hasToolsHeader && styles_css_default110["has-header"], isRefresh && styles_css_default110.refresh, styles_css_default110[`header-variant-${computedVariant}`]) },
            !!renderAriaLive && !!firstIndex && import_react316.default.createElement(
              internal_default2,
              { hidden: true, tagName: "span" },
              import_react316.default.createElement("span", null, renderAriaLive({ totalItemsCount, firstIndex, lastIndex: firstIndex + items.length - 1 }))
            ),
            status !== null && status !== void 0 ? status : import_react316.default.createElement(CardsList, { items, cardDefinition, trackBy, selectionType, columns, isItemSelected, getItemSelectionProps, visibleSections, onFocus: onCardFocus, ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.cardsLabel, ariaLabelledby: isLabelledByHeader && headerIdRef.current ? headerIdRef.current : void 0, entireCardClickable })
          )
        )
      )
    )
  );
});
var cards_default = Cards;
var CardsList = ({ items, cardDefinition, trackBy, selectionType, columns, isItemSelected, getItemSelectionProps, visibleSections, onFocus, ariaLabelledby, ariaLabel, entireCardClickable }) => {
  const selectable = !!selectionType;
  const canClickEntireCard = selectable && entireCardClickable;
  const isRefresh = useVisualRefresh();
  const { moveFocusDown, moveFocusUp } = useSelectionFocusMove(selectionType, items.length);
  let visibleSectionsDefinition = cardDefinition.sections || [];
  visibleSectionsDefinition = visibleSections ? visibleSectionsDefinition.filter((section) => section.id && visibleSections.indexOf(section.id) !== -1) : visibleSectionsDefinition;
  let listRole = void 0;
  let listItemRole = void 0;
  if (selectable) {
    listRole = "group";
    listItemRole = "presentation";
  }
  return import_react316.default.createElement("ol", Object.assign({ className: clsx_m_default(styles_css_default110.list, styles_css_default110[`list-grid-${columns || 1}`]), role: listRole, "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel }, focusMarkers && focusMarkers.root), items.map((item, index) => import_react316.default.createElement(
    "li",
    Object.assign({ className: clsx_m_default(styles_css_default110.card, {
      [styles_css_default110["card-selectable"]]: selectable,
      [styles_css_default110["card-selected"]]: selectable && isItemSelected(item)
    }), key: getItemKey(trackBy, item, index), onFocus }, focusMarkers && focusMarkers.item, { role: listItemRole }),
    import_react316.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default110["card-inner"], isRefresh && styles_css_default110.refresh), onClick: canClickEntireCard ? (event) => {
        var _a2;
        getItemSelectionProps === null || getItemSelectionProps === void 0 ? void 0 : getItemSelectionProps(item).onChange();
        (_a2 = event.currentTarget.querySelector("input")) === null || _a2 === void 0 ? void 0 : _a2.focus();
      } : void 0 },
      import_react316.default.createElement(
        "div",
        { className: styles_css_default110["card-header"] },
        import_react316.default.createElement("div", { className: styles_css_default110["card-header-inner"] }, cardDefinition.header ? cardDefinition.header(item) : ""),
        getItemSelectionProps && import_react316.default.createElement(
          "div",
          { className: styles_css_default110["selection-control"] },
          import_react316.default.createElement(SelectionControl, Object.assign({ onFocusDown: moveFocusDown, onFocusUp: moveFocusUp }, getItemSelectionProps(item)))
        )
      ),
      visibleSectionsDefinition.map(({ width = 100, header, content, id }, index2) => import_react316.default.createElement(
        "div",
        { key: id || index2, className: styles_css_default110.section, style: { width: `${width}%` } },
        header ? import_react316.default.createElement("div", { className: styles_css_default110["section-header"] }, header) : "",
        content ? import_react316.default.createElement("div", { className: styles_css_default110["section-content"] }, content(item)) : ""
      ))
    )
  )));
};
applyDisplayName(Cards, "Cards");

// node_modules/@cloudscape-design/components/checkbox/index.js
var import_react318 = __toESM(require_react());

// node_modules/@cloudscape-design/components/checkbox/internal-do-not-use-core.js
var import_react317 = __toESM(require_react());
var Checkbox = import_react317.default.forwardRef((_a2, ref) => {
  var props2 = __rest(_a2, []);
  const baseComponentProps = useBaseComponent("Checkbox", {
    props: { readOnly: props2.readOnly }
  });
  return import_react317.default.createElement(internal_default16, Object.assign({}, props2, baseComponentProps, { ref, __injectAnalyticsComponentMetadata: true }));
});
applyDisplayName(Checkbox, "Checkbox");
var internal_do_not_use_core_default6 = Checkbox;

// node_modules/@cloudscape-design/components/checkbox/index.js
var Checkbox2 = import_react318.default.forwardRef((props2, ref) => {
  validateProps("Checkbox", props2, ["nativeInputAttributes", "style"], {}, "console");
  return import_react318.default.createElement(internal_do_not_use_core_default6, { ref, ...props2 });
});
applyDisplayName(Checkbox2, "Checkbox");
var checkbox_default = Checkbox2;

// node_modules/@cloudscape-design/components/code-editor/index.js
var import_react334 = __toESM(require_react());

// node_modules/@cloudscape-design/components/code-editor/error-screen.js
var import_react319 = __toESM(require_react());

// node_modules/@cloudscape-design/components/code-editor/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/code-editor/styles.scoped.css";
var styles_css_default111 = {
  "code-editor-refresh": "awsui_code-editor-refresh_1gl9c_wxtw7_158",
  "code-editor": "awsui_code-editor_1gl9c_wxtw7_158",
  "pane": "awsui_pane_1gl9c_wxtw7_492",
  "pane__close-container": "awsui_pane__close-container_1gl9c_wxtw7_503",
  "pane__list": "awsui_pane__list_1gl9c_wxtw7_508",
  "pane__table": "awsui_pane__table_1gl9c_wxtw7_515",
  "pane__item": "awsui_pane__item_1gl9c_wxtw7_521",
  "pane__cell": "awsui_pane__cell_1gl9c_wxtw7_521",
  "pane__item--highlighted": "awsui_pane__item--highlighted_1gl9c_wxtw7_535",
  "pane__location": "awsui_pane__location_1gl9c_wxtw7_556",
  "pane__description": "awsui_pane__description_1gl9c_wxtw7_556",
  "focus-lock": "awsui_focus-lock_1gl9c_wxtw7_571",
  "editor": "awsui_editor_1gl9c_wxtw7_615",
  "editor-refresh": "awsui_editor-refresh_1gl9c_wxtw7_645",
  "status-bar": "awsui_status-bar_1gl9c_wxtw7_650",
  "status-bar-with-hidden-pane": "awsui_status-bar-with-hidden-pane_1gl9c_wxtw7_659",
  "status-bar__left": "awsui_status-bar__left_1gl9c_wxtw7_663",
  "status-bar__right": "awsui_status-bar__right_1gl9c_wxtw7_670",
  "status-bar__language-mode": "awsui_status-bar__language-mode_1gl9c_wxtw7_674",
  "status-bar__cursor-position": "awsui_status-bar__cursor-position_1gl9c_wxtw7_674",
  "status-bar__cog-button": "awsui_status-bar__cog-button_1gl9c_wxtw7_680",
  "tab-list": "awsui_tab-list_1gl9c_wxtw7_685",
  "tab-button": "awsui_tab-button_1gl9c_wxtw7_690",
  "tab-button--refresh": "awsui_tab-button--refresh_1gl9c_wxtw7_723",
  "tab-button--warnings": "awsui_tab-button--warnings_1gl9c_wxtw7_726",
  "tab-button--active": "awsui_tab-button--active_1gl9c_wxtw7_735",
  "tab-button--disabled": "awsui_tab-button--disabled_1gl9c_wxtw7_751",
  "tab-button--divider": "awsui_tab-button--divider_1gl9c_wxtw7_784",
  "tab-button--errors": "awsui_tab-button--errors_1gl9c_wxtw7_791",
  "count": "awsui_count_1gl9c_wxtw7_800",
  "text": "awsui_text_1gl9c_wxtw7_803",
  "loading-screen": "awsui_loading-screen_1gl9c_wxtw7_825",
  "error-screen": "awsui_error-screen_1gl9c_wxtw7_826"
};

// node_modules/@cloudscape-design/components/code-editor/error-screen.js
var error_screen_default = ({ children: children2, recoveryText, onRecoveryClick }) => {
  const onFollow = (0, import_react319.useCallback)(() => fireNonCancelableEvent(onRecoveryClick), [onRecoveryClick]);
  return import_react319.default.createElement(
    "div",
    { className: styles_css_default111["error-screen"] },
    import_react319.default.createElement(internal_default, { name: "status-negative", variant: "error" }),
    " ",
    children2,
    " ",
    import_react319.default.createElement(internal_default10, { variant: "recovery", onFollow }, recoveryText)
  );
};

// node_modules/@cloudscape-design/components/code-editor/listeners.js
var import_react320 = __toESM(require_react());
function useChangeEffect(editor, onChange, onDelayedChange) {
  const debouncedChangeHandler = useDebounceCallback((detail) => {
    fireNonCancelableEvent(onDelayedChange, detail);
  }, 0);
  const handleChange = useStableCallback(() => {
    const changeDetail = { value: (editor === null || editor === void 0 ? void 0 : editor.getValue()) || "" };
    fireNonCancelableEvent(onChange, changeDetail);
    debouncedChangeHandler(changeDetail);
  });
  (0, import_react320.useEffect)(() => {
    if (!editor) {
      return;
    }
    editor.on("change", handleChange);
    return () => editor.off("change", handleChange);
  }, [editor, handleChange]);
}

// node_modules/@cloudscape-design/components/code-editor/loading-screen.js
var import_react321 = __toESM(require_react());
var loading_screen_default = (props2) => import_react321.default.createElement(
  "div",
  { className: styles_css_default111["loading-screen"] },
  import_react321.default.createElement(InternalSpinner, { size: "normal", variant: "normal" }),
  " ",
  props2.children
);

// node_modules/@cloudscape-design/components/code-editor/pane.js
var import_react323 = __toESM(require_react());

// node_modules/@cloudscape-design/components/code-editor/resizable-box/index.js
var import_react322 = __toESM(require_react());

// node_modules/@cloudscape-design/components/code-editor/resizable-box/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/code-editor/resizable-box/styles.scoped.css";
var styles_css_default112 = {
  "resizable-box": "awsui_resizable-box_cufu9_1152v_149",
  "cursor-active": "awsui_cursor-active_cufu9_1152v_153",
  "resizable-box-handle": "awsui_resizable-box-handle_cufu9_1152v_167",
  "resize-active": "awsui_resize-active_cufu9_1152v_176"
};

// node_modules/@cloudscape-design/components/code-editor/resizable-box/index.js
var KEYBOARD_STEP_SIZE = 20;
function ResizableBox({ children: children2, height, minHeight, onResize, handleAriaLabel, handleTooltipText }) {
  const [dragOffset, setDragOffset] = (0, import_react322.useState)(null);
  const onResizeStable = useStableCallback(onResize);
  const containerRef = (0, import_react322.useRef)(null);
  const onPointerDown = (event) => {
    if (event.pointerType === "mouse" && event.button !== 0 || !containerRef.current) {
      return;
    }
    const containerBottom = containerRef.current.getBoundingClientRect().bottom;
    setDragOffset(containerBottom - event.clientY);
  };
  const onKeyDown = (event) => {
    switch (event.key) {
      case "ArrowDown":
      case "ArrowRight":
        event.preventDefault();
        onResizeStable(height + KEYBOARD_STEP_SIZE);
        break;
      case "ArrowUp":
      case "ArrowLeft":
        event.preventDefault();
        onResizeStable(Math.max(height - KEYBOARD_STEP_SIZE, minHeight));
        break;
    }
  };
  (0, import_react322.useEffect)(() => {
    if (dragOffset === null || !containerRef.current) {
      return;
    }
    const container = containerRef.current;
    const onPointerMove = (event) => {
      const { top } = container.getBoundingClientRect();
      const cursor = event.clientY;
      onResizeStable(Math.max(cursor + dragOffset - top, minHeight));
    };
    const onPointerUp = () => {
      setDragOffset(null);
    };
    const controller = new AbortController();
    document.body.classList.add(styles_css_default112["resize-active"]);
    container.classList.add(styles_css_default112["cursor-active"]);
    document.addEventListener("pointermove", onPointerMove, { signal: controller.signal });
    document.addEventListener("pointerup", onPointerUp, { signal: controller.signal });
    return () => {
      controller.abort();
      document.body.classList.remove(styles_css_default112["resize-active"]);
      container.classList.remove(styles_css_default112["cursor-active"]);
    };
  }, [dragOffset, minHeight, onResizeStable]);
  return import_react322.default.createElement(
    "div",
    { ref: containerRef, className: styles_css_default112["resizable-box"], style: { height } },
    children2,
    import_react322.default.createElement(
      "div",
      { className: styles_css_default112["resizable-box-handle"] },
      import_react322.default.createElement(drag_handle_default, {
        ariaLabel: handleAriaLabel,
        variant: "resize-area",
        // Provide an arbitrary large value to valueMax since the editor can be
        // resized to be infinitely large.
        ariaValue: { valueMin: minHeight, valueMax: 1e6, valueNow: height },
        tooltipText: handleTooltipText,
        onPointerDown,
        onKeyDown,
        directions: {
          "block-start": height > minHeight ? "active" : "disabled",
          "block-end": "active"
        },
        onDirectionClick: (direction) => {
          switch (direction) {
            case "block-end":
              onResizeStable(height + KEYBOARD_STEP_SIZE);
              break;
            case "block-start":
              onResizeStable(Math.max(height - KEYBOARD_STEP_SIZE, minHeight));
              break;
          }
        }
      })
    )
  );
}

// node_modules/@cloudscape-design/components/code-editor/ace-modes.js
var AceModes = [
  { value: "abap", label: "ABAP" },
  { value: "abc", label: "ABC" },
  { value: "actionscript", label: "ActionScript" },
  { value: "ada", label: "ADA" },
  { value: "alda", label: "Alda" },
  { value: "apache_conf", label: "Apache Conf" },
  { value: "apex", label: "Apex" },
  { value: "aql", label: "AQL" },
  { value: "asciidoc", label: "AsciiDoc" },
  { value: "asl", label: "ASL" },
  { value: "assembly_x86", label: "Assembly x86" },
  { value: "autohotkey", label: "AutoHotkey/AutoIt" },
  { value: "batchfile", label: "BatchFile" },
  { value: "c_cpp", label: "C/C++" },
  { value: "c9search", label: "C9Search" },
  { value: "cirru", label: "Cirru" },
  { value: "clojure", label: "Clojure" },
  { value: "cobol", label: "Cobol" },
  { value: "coffee", label: "CoffeeScript" },
  { value: "coldfusion", label: "ColdFusion" },
  { value: "crystal", label: "Crystal" },
  { value: "csharp", label: "C#" },
  { value: "csound_document", label: "Csound Document" },
  { value: "csound_orchestra", label: "Csound" },
  { value: "csound_score", label: "Csound Score" },
  { value: "css", label: "CSS" },
  { value: "curly", label: "Curly" },
  { value: "d", label: "D" },
  { value: "dart", label: "Dart" },
  { value: "diff", label: "Diff" },
  { value: "django", label: "Django" },
  { value: "dockerfile", label: "Dockerfile" },
  { value: "dot", label: "Dot" },
  { value: "drools", label: "Drools" },
  { value: "edifact", label: "Edifact" },
  { value: "eiffel", label: "Eiffel" },
  { value: "ejs", label: "EJS" },
  { value: "elixir", label: "Elixir" },
  { value: "elm", label: "Elm" },
  { value: "erlang", label: "Erlang" },
  { value: "forth", label: "Forth" },
  { value: "fortran", label: "Fortran" },
  { value: "fsharp", label: "FSharp" },
  { value: "fsl", label: "FSL" },
  { value: "ftl", label: "FreeMarker" },
  { value: "gcode", label: "Gcode" },
  { value: "gherkin", label: "Gherkin" },
  { value: "gitignore", label: "Gitignore" },
  { value: "glsl", label: "Glsl" },
  { value: "gobstones", label: "Gobstones" },
  { value: "golang", label: "Go" },
  { value: "graphqlschema", label: "GraphQLSchema" },
  { value: "groovy", label: "Groovy" },
  { value: "haml", label: "HAML" },
  { value: "handlebars", label: "Handlebars" },
  { value: "haskell", label: "Haskell" },
  { value: "haskell_cabal", label: "Haskell Cabal" },
  { value: "haxe", label: "haXe" },
  { value: "hjson", label: "Hjson" },
  { value: "html", label: "HTML" },
  { value: "html_elixir", label: "HTML (Elixir)" },
  { value: "html_ruby", label: "HTML (Ruby)" },
  { value: "ini", label: "INI" },
  { value: "io", label: "Io" },
  { value: "jack", label: "Jack" },
  { value: "jade", label: "Jade" },
  { value: "java", label: "Java" },
  { value: "javascript", label: "JavaScript" },
  { value: "json", label: "JSON" },
  { value: "json5", label: "JSON5" },
  { value: "jsoniq", label: "JSONiq" },
  { value: "jsp", label: "JSP" },
  { value: "jssm", label: "JSSM" },
  { value: "jsx", label: "JSX" },
  { value: "julia", label: "Julia" },
  { value: "kotlin", label: "Kotlin" },
  { value: "latex", label: "LaTeX" },
  { value: "less", label: "LESS" },
  { value: "liquid", label: "Liquid" },
  { value: "lisp", label: "Lisp" },
  { value: "livescript", label: "LiveScript" },
  { value: "logiql", label: "LogiQL" },
  { value: "lsl", label: "LSL" },
  { value: "lua", label: "Lua" },
  { value: "luapage", label: "LuaPage" },
  { value: "lucene", label: "Lucene" },
  { value: "makefile", label: "Makefile" },
  { value: "markdown", label: "Markdown" },
  { value: "mask", label: "Mask" },
  { value: "matlab", label: "MATLAB" },
  { value: "maze", label: "Maze" },
  { value: "mediawiki", label: "MediaWiki" },
  { value: "mel", label: "MEL" },
  { value: "mixal", label: "MIXAL" },
  { value: "mushcode", label: "MUSHCode" },
  { value: "mysql", label: "MySQL" },
  { value: "nginx", label: "Nginx" },
  { value: "nim", label: "Nim" },
  { value: "nix", label: "Nix" },
  { value: "nsis", label: "NSIS" },
  { value: "nunjucks", label: "Nunjucks" },
  { value: "objectivec", label: "Objective-C" },
  { value: "ocaml", label: "OCaml" },
  { value: "pascal", label: "Pascal" },
  { value: "perl", label: "Perl" },
  { value: "perl6", label: "Perl 6" },
  { value: "pgsql", label: "pgSQL" },
  { value: "php", label: "PHP" },
  { value: "php_laravel_blade", label: "PHP (Blade Template)" },
  { value: "pig", label: "Pig" },
  { value: "powershell", label: "Powershell" },
  { value: "praat", label: "Praat" },
  { value: "prisma", label: "Prisma" },
  { value: "prolog", label: "Prolog" },
  { value: "properties", label: "Properties" },
  { value: "protobuf", label: "Protobuf" },
  { value: "puppet", label: "Puppet" },
  { value: "python", label: "Python" },
  { value: "qml", label: "QML" },
  { value: "r", label: "R" },
  { value: "razor", label: "Razor" },
  { value: "rdoc", label: "RDoc" },
  { value: "red", label: "Red" },
  { value: "rhtml", label: "RHTML" },
  { value: "rst", label: "RST" },
  { value: "ruby", label: "Ruby" },
  { value: "rust", label: "Rust" },
  { value: "sass", label: "SASS" },
  { value: "scad", label: "SCAD" },
  { value: "scala", label: "Scala" },
  { value: "scheme", label: "Scheme" },
  { value: "scss", label: "SCSS" },
  { value: "sh", label: "SH" },
  { value: "sjs", label: "SJS" },
  { value: "slim", label: "Slim" },
  { value: "smarty", label: "Smarty" },
  { value: "snippets", label: "snippets" },
  { value: "soy_template", label: "Soy Template" },
  { value: "space", label: "Space" },
  { value: "sql", label: "SQL" },
  { value: "sqlserver", label: "SQLServer" },
  { value: "stylus", label: "Stylus" },
  { value: "svg", label: "SVG" },
  { value: "swift", label: "Swift" },
  { value: "tcl", label: "Tcl" },
  { value: "terraform", label: "Terraform" },
  { value: "tex", label: "Tex" },
  { value: "text", label: "Text" },
  { value: "textile", label: "Textile" },
  { value: "toml", label: "Toml" },
  { value: "tsx", label: "TSX" },
  { value: "twig", label: "Twig" },
  { value: "typescript", label: "TypeScript" },
  { value: "vala", label: "Vala" },
  { value: "vbscript", label: "VBScript" },
  { value: "velocity", label: "Velocity" },
  { value: "verilog", label: "Verilog" },
  { value: "vhdl", label: "VHDL" },
  { value: "visualforce", label: "Visualforce" },
  { value: "wollok", label: "Wollok" },
  { value: "xml", label: "XML" },
  { value: "xquery", label: "XQuery" },
  { value: "yaml", label: "YAML" },
  { value: "zeek", label: "Zeek" }
];

// node_modules/@cloudscape-design/components/code-editor/ace-themes.js
var LightThemes = [
  { value: "chrome", label: "Chrome" },
  { value: "clouds", label: "Clouds" },
  { value: "crimson_editor", label: "Crimson Editor" },
  { value: "dawn", label: "Dawn" },
  { value: "dreamweaver", label: "Dreamweaver" },
  { value: "eclipse", label: "Eclipse" },
  { value: "github", label: "GitHub" },
  { value: "iplastic", label: "IPlastic" },
  { value: "solarized_light", label: "Solarized Light" },
  { value: "textmate", label: "TextMate" },
  { value: "tomorrow", label: "Tomorrow" },
  { value: "xcode", label: "Xcode" },
  { value: "kuroir", label: "Kuroir" },
  { value: "katzenmilch", label: "KatzenMilch" },
  { value: "sqlserver", label: "SQL Server" },
  { value: "cloud_editor", label: "CloudEditor" }
];
var DarkThemes = [
  { value: "ambiance", label: "Ambiance" },
  { value: "chaos", label: "Chaos" },
  { value: "clouds_midnight", label: "Clouds Midnight" },
  { value: "dracula", label: "Dracula" },
  { value: "cobalt", label: "Cobalt" },
  { value: "gruvbox", label: "Gruvbox" },
  { value: "gob", label: "Green on Black" },
  { value: "idle_fingers", label: "idle Fingers" },
  { value: "kr_theme", label: "krTheme" },
  { value: "merbivore", label: "Merbivore" },
  { value: "merbivore_soft", label: "Merbivore Soft" },
  { value: "mono_industrial", label: "Mono Industrial" },
  { value: "monokai", label: "Monokai" },
  { value: "nord_dark", label: "Nord Dark" },
  { value: "pastel_on_dark", label: "Pastel on dark" },
  { value: "solarized_dark", label: "Solarized Dark" },
  { value: "terminal", label: "Terminal" },
  { value: "tomorrow_night", label: "Tomorrow Night" },
  { value: "tomorrow_night_blue", label: "Tomorrow Night Blue" },
  { value: "tomorrow_night_bright", label: "Tomorrow Night Bright" },
  { value: "tomorrow_night_eighties", label: "Tomorrow Night 80s" },
  { value: "twilight", label: "Twilight" },
  { value: "vibrant_ink", label: "Vibrant Ink" },
  { value: "cloud_editor_dark", label: "CloudEditor Dark" }
];

// node_modules/@cloudscape-design/components/code-editor/util.js
var CLOUD_EDITOR_LIGHT_THEME = "cloud_editor";
var CLOUD_EDITOR_DARK_THEME = "cloud_editor_dark";
var FALLBACK_LIGHT_THEME = "dawn";
var FALLBACK_DARK_THEME = "tomorrow_night_bright";
var DEFAULT_AVAILABLE_THEMES = {
  light: LightThemes.map((theme) => theme.value).filter((value) => value !== CLOUD_EDITOR_LIGHT_THEME),
  dark: DarkThemes.map((theme) => theme.value).filter((value) => value !== CLOUD_EDITOR_DARK_THEME)
};
function isAceVersionAtLeast(ace, minVersion) {
  var _a2;
  const semanticVersion = (_a2 = ace === null || ace === void 0 ? void 0 : ace.version) === null || _a2 === void 0 ? void 0 : _a2.split(".").map((part) => {
    const parsed = parseInt(part);
    return Number.isNaN(parsed) ? part : parsed;
  });
  return !!semanticVersion && typeof semanticVersion[0] === "number" && semanticVersion[0] >= minVersion[0] && typeof semanticVersion[1] === "number" && semanticVersion[1] >= minVersion[1] && typeof semanticVersion[2] === "number" && semanticVersion[2] >= minVersion[2];
}
function supportsKeyboardAccessibility(ace) {
  return isAceVersionAtLeast(ace, [1, 23, 0]);
}
function getDefaultConfig(ace) {
  return Object.assign({ behavioursEnabled: true }, supportsKeyboardAccessibility(ace) ? { enableKeyboardAccessibility: true } : {});
}
function getDefaultTheme(mode, themes) {
  if (mode === "light") {
    return (themes === null || themes === void 0 ? void 0 : themes.light.some((value) => value === CLOUD_EDITOR_LIGHT_THEME)) ? CLOUD_EDITOR_LIGHT_THEME : FALLBACK_LIGHT_THEME;
  } else {
    return (themes === null || themes === void 0 ? void 0 : themes.dark.some((value) => value === CLOUD_EDITOR_DARK_THEME)) ? CLOUD_EDITOR_DARK_THEME : FALLBACK_DARK_THEME;
  }
}
function getAceTheme(theme) {
  return `ace/theme/${theme}`;
}
function getLanguageLabel(language) {
  var _a2;
  return ((_a2 = AceModes.filter((mode) => mode.value === language)[0]) === null || _a2 === void 0 ? void 0 : _a2.label) || language;
}
function getStatusButtonId({ paneId, paneStatus }) {
  return paneId ? `${paneId}-button-${paneStatus}` : void 0;
}

// node_modules/@cloudscape-design/components/code-editor/pane.js
var ANNOTATION_ITEM_HEIGHT = 31;
var PANE_ANNOTATIONS_PADDING = 12;
var MIN_HEIGHT = 3 * ANNOTATION_ITEM_HEIGHT + 2 * PANE_ANNOTATIONS_PADDING;
var Pane = ({ id, paneStatus, visible, annotations, highlighted, onClose, onAnnotationClick, onAnnotationClear, cursorPositionLabel, closeButtonAriaLabel, handleAriaLabel, handleTooltipText }) => {
  const [paneHeight, setPaneHeight] = (0, import_react323.useState)(MIN_HEIGHT);
  const listRef = (0, import_react323.useRef)(null);
  (0, import_react323.useEffect)(() => {
    var _a2;
    if (!highlighted) {
      return;
    }
    const { row, column } = highlighted;
    const highlightedAnnotationIndex = annotations.indexOf(annotations.filter((a4) => a4.row === row && a4.column === column)[0]);
    if (highlightedAnnotationIndex > -1) {
      const errorItem = (_a2 = listRef.current) === null || _a2 === void 0 ? void 0 : _a2.children[highlightedAnnotationIndex];
      errorItem === null || errorItem === void 0 ? void 0 : errorItem.focus();
    }
  }, [highlighted, annotations]);
  const onItemClick = (annotation) => {
    onAnnotationClick(annotation);
  };
  const onItemKeyDown = (annotation, event) => {
    if (event.keyCode === KeyCode2.enter || event.keyCode === KeyCode2.space) {
      event.preventDefault();
      onAnnotationClick(annotation);
    }
  };
  const onEscKeyDown = (event) => {
    if (event.keyCode === KeyCode2.escape) {
      event.preventDefault();
      onClose();
    }
  };
  const ariaLabelledBy = getStatusButtonId({ paneId: id, paneStatus });
  if (!visible) {
    return null;
  }
  return import_react323.default.createElement(
    "div",
    { id, className: styles_css_default111.pane, onKeyDown: onEscKeyDown, role: "tabpanel", "aria-labelledby": ariaLabelledBy },
    import_react323.default.createElement(
      ResizableBox,
      { height: paneHeight, minHeight: MIN_HEIGHT, onResize: (newHeight) => setPaneHeight(newHeight), handleAriaLabel, handleTooltipText },
      import_react323.default.createElement(
        focus_lock_default,
        { className: styles_css_default111["focus-lock"], autoFocus: true, restoreFocus: true },
        import_react323.default.createElement(
          "div",
          { className: styles_css_default111.pane__list, tabIndex: -1 },
          import_react323.default.createElement(
            "table",
            { className: styles_css_default111.pane__table, role: "presentation" },
            import_react323.default.createElement(
              "colgroup",
              null,
              import_react323.default.createElement("col", {
                style: { width: 1 }
                /* shrink to fit content */
              }),
              import_react323.default.createElement("col", { style: { width: "auto" } })
            ),
            import_react323.default.createElement("tbody", { ref: listRef }, annotations.map((annotation, i2) => {
              var _a2;
              return import_react323.default.createElement(
                "tr",
                { key: i2, role: "link", className: styles_css_default111.pane__item, onMouseOver: onAnnotationClear, onClick: onItemClick.bind(null, annotation), onKeyDown: onItemKeyDown.bind(null, annotation), tabIndex: 0 },
                import_react323.default.createElement("td", { className: clsx_m_default(styles_css_default111.pane__location, styles_css_default111.pane__cell), tabIndex: -1 }, (_a2 = cursorPositionLabel === null || cursorPositionLabel === void 0 ? void 0 : cursorPositionLabel((annotation.row || 0) + 1, (annotation.column || 0) + 1)) !== null && _a2 !== void 0 ? _a2 : ""),
                import_react323.default.createElement("td", { className: clsx_m_default(styles_css_default111.pane__description, styles_css_default111.pane__cell), tabIndex: -1 }, annotation.text)
              );
            }))
          )
        ),
        import_react323.default.createElement(
          "div",
          { className: styles_css_default111["pane__close-container"] },
          import_react323.default.createElement(InternalButton, { formAction: "none", variant: "icon", iconName: "close", onClick: onClose, ariaLabel: closeButtonAriaLabel })
        )
      )
    )
  );
};

// node_modules/@cloudscape-design/components/code-editor/preferences-modal.js
var import_react330 = __toESM(require_react());

// node_modules/@cloudscape-design/components/column-layout/internal.js
var import_react326 = __toESM(require_react());

// node_modules/@cloudscape-design/components/column-layout/flexible-column-layout/index.js
var import_react324 = __toESM(require_react());

// node_modules/@cloudscape-design/components/column-layout/flexible-column-layout/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/column-layout/flexible-column-layout/styles.scoped.css";
var styles_css_default113 = {
  "css-grid": "awsui_css-grid_zqq3x_1t536_181",
  "grid-no-gutters": "awsui_grid-no-gutters_zqq3x_1t536_192",
  "grid-variant-text-grid": "awsui_grid-variant-text-grid_zqq3x_1t536_195",
  "item": "awsui_item_zqq3x_1t536_195",
  "first-column": "awsui_first-column_zqq3x_1t536_212"
};

// node_modules/@cloudscape-design/components/column-layout/flexible-column-layout/index.js
var isOdd = (value) => value % 2 !== 0;
function calculcateCssColumnCount(columns, minColumnWidth, containerWidth) {
  if (!containerWidth) {
    return columns;
  }
  const targetColumnCount = Math.min(columns, Math.floor(containerWidth / minColumnWidth));
  return Math.max(1, targetColumnCount < columns && isOdd(targetColumnCount) ? targetColumnCount - 1 : targetColumnCount);
}
function FlexibleColumnLayout({ columns = 1, minColumnWidth = 0, disableGutters, variant, children: children2, __tagOverride }) {
  const [containerWidth, containerRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  const columnCount = calculcateCssColumnCount(columns, minColumnWidth, containerWidth);
  const shouldDisableGutters = variant !== "text-grid" && disableGutters;
  const flattenedChildren = flattenChildren(children2);
  const Tag = __tagOverride !== null && __tagOverride !== void 0 ? __tagOverride : "div";
  return import_react324.default.createElement(Tag, { ref: containerRef, className: clsx_m_default(styles_css_default113["css-grid"], styles_css_default113[`grid-variant-${variant}`], shouldDisableGutters && [styles_css_default113["grid-no-gutters"]]), style: { gridTemplateColumns: `repeat(${columnCount}, minmax(0, 1fr))` } }, flattenedChildren.map((child, i2) => {
    const key2 = child.key;
    return import_react324.default.createElement("div", { key: key2 ? String(key2) : void 0, className: clsx_m_default(styles_css_default113.item, {
      [styles_css_default113["first-column"]]: i2 % columnCount === 0
    }) }, child);
  }));
}

// node_modules/@cloudscape-design/components/column-layout/grid-column-layout.js
var import_react325 = __toESM(require_react());

// node_modules/@cloudscape-design/components/column-layout/util.js
function repeat(value, times) {
  const array = [];
  for (let i2 = 0; i2 < times; i2++) {
    array[i2] = value;
  }
  return array;
}

// node_modules/@cloudscape-design/components/column-layout/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/column-layout/styles.scoped.css";
var styles_css_default114 = {
  "column-layout": "awsui_column-layout_vvxn7_u5w81_181",
  "grid": "awsui_grid_vvxn7_u5w81_213",
  "grid-no-gutters": "awsui_grid-no-gutters_vvxn7_u5w81_219",
  "grid-variant-text-grid": "awsui_grid-variant-text-grid_vvxn7_u5w81_223",
  "grid-breakpoint-default": "awsui_grid-breakpoint-default_vvxn7_u5w81_231",
  "grid-columns-1": "awsui_grid-columns-1_vvxn7_u5w81_234",
  "grid-breakpoint-xxs": "awsui_grid-breakpoint-xxs_vvxn7_u5w81_234",
  "grid-breakpoint-xs": "awsui_grid-breakpoint-xs_vvxn7_u5w81_237",
  "grid-columns-2": "awsui_grid-columns-2_vvxn7_u5w81_240",
  "grid-columns-3": "awsui_grid-columns-3_vvxn7_u5w81_246",
  "grid-columns-4": "awsui_grid-columns-4_vvxn7_u5w81_252",
  "grid-vertical-borders": "awsui_grid-vertical-borders_vvxn7_u5w81_268",
  "grid-horizontal-borders": "awsui_grid-horizontal-borders_vvxn7_u5w81_301"
};

// node_modules/@cloudscape-design/components/column-layout/grid-column-layout.js
var COLUMN_DEFS = {
  1: { colspan: { default: 12, xxs: 12, xs: 12 } },
  2: { colspan: { default: 12, xxs: 6, xs: 6 } },
  3: { colspan: { default: 12, xxs: 6, xs: 4 } },
  4: { colspan: { default: 12, xxs: 6, xs: 3 } }
};
function GridColumnLayout({ columns, variant, borders, disableGutters, __breakpoint, children: children2, __tagOverride }) {
  var _a2;
  const isTextGridVariant = variant === "text-grid";
  const shouldDisableGutters = !isTextGridVariant && disableGutters;
  const shouldHaveHorizontalBorders = !isTextGridVariant && (borders === "horizontal" || borders === "all");
  const shouldHaveVerticalBorders = !isTextGridVariant && (borders === "vertical" || borders === "all");
  const flattenedChildren = flattenChildren(children2);
  const [breakpoint, ref] = useContainerBreakpoints(COLUMN_TRIGGERS);
  return import_react325.default.createElement(internal_default11, { ref, disableGutters: true, gridDefinition: repeat((_a2 = COLUMN_DEFS[columns]) !== null && _a2 !== void 0 ? _a2 : {}, flattenedChildren.length), className: clsx_m_default(styles_css_default114.grid, styles_css_default114[`grid-columns-${columns}`], styles_css_default114[`grid-variant-${variant}`], {
    [styles_css_default114["grid-horizontal-borders"]]: shouldHaveHorizontalBorders,
    [styles_css_default114["grid-vertical-borders"]]: shouldHaveVerticalBorders,
    [styles_css_default114["grid-no-gutters"]]: shouldDisableGutters
  }), __breakpoint: __breakpoint || breakpoint, __responsiveClassName: (breakpoint2) => breakpoint2 && styles_css_default114[`grid-breakpoint-${breakpoint2}`], __tagOverride }, children2);
}

// node_modules/@cloudscape-design/components/column-layout/internal.js
var COLUMN_TRIGGERS = ["default", "xxs", "xs"];
function ColumnLayout(_a2) {
  var { columns = 1, variant = "default", borders = "none", disableGutters = false, minColumnWidth, children: children2, __tagOverride, __breakpoint, __internalRootRef } = _a2, restProps = __rest(_a2, ["columns", "variant", "borders", "disableGutters", "minColumnWidth", "children", "__tagOverride", "__breakpoint", "__internalRootRef"]);
  const baseProps = getBaseProps(restProps);
  return import_react326.default.createElement("div", Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default114["column-layout"]), ref: __internalRootRef }), minColumnWidth ? import_react326.default.createElement(FlexibleColumnLayout, { columns, borders, variant, minColumnWidth, disableGutters, __tagOverride }, children2) : import_react326.default.createElement(GridColumnLayout, { columns, variant, borders, disableGutters, __breakpoint, __tagOverride }, children2));
}

// node_modules/@cloudscape-design/components/modal/internal.js
var import_react328 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/context/reset-contexts-for-modal.js
var import_react327 = __toESM(require_react());
var ResetContextsForModal = ({ children: children2 }) => import_react327.default.createElement(
  ButtonContext.Provider,
  { value: { onClick: () => {
  } } },
  import_react327.default.createElement(
    CollectionLabelContext.Provider,
    { value: { assignId: () => {
    } } },
    import_react327.default.createElement(
      FormFieldContext.Provider,
      { value: {} },
      import_react327.default.createElement(
        InfoLinkLabelContext.Provider,
        { value: "" },
        import_react327.default.createElement(
          LinkDefaultVariantContext.Provider,
          { value: defaultValue2 },
          import_react327.default.createElement(SingleTabStopNavigationReset, null, children2)
        )
      )
    )
  )
);
var reset_contexts_for_modal_default = ResetContextsForModal;

// node_modules/@cloudscape-design/components/modal/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/modal/styles.scoped.css";
var styles_css_default115 = {
  "dialog": "awsui_dialog_1d2i7_1e7ip_169",
  "modal-slide-up": "awsui_modal-slide-up_1d2i7_1e7ip_1",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_1d2i7_1e7ip_1",
  "refresh": "awsui_refresh_1d2i7_1e7ip_192",
  "awsui-motion-scale-popup": "awsui_awsui-motion-scale-popup_1d2i7_1e7ip_1",
  "root": "awsui_root_1d2i7_1e7ip_225",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_1d2i7_1e7ip_1",
  "hidden": "awsui_hidden_1d2i7_1e7ip_302",
  "focus-lock": "awsui_focus-lock_1d2i7_1e7ip_306",
  "small": "awsui_small_1d2i7_1e7ip_326",
  "medium": "awsui_medium_1d2i7_1e7ip_329",
  "large": "awsui_large_1d2i7_1e7ip_332",
  "max": "awsui_max_1d2i7_1e7ip_335",
  "breakpoint-xs": "awsui_breakpoint-xs_1d2i7_1e7ip_335",
  "container": "awsui_container_1d2i7_1e7ip_341",
  "content": "awsui_content_1d2i7_1e7ip_382",
  "no-paddings": "awsui_no-paddings_1d2i7_1e7ip_387",
  "header": "awsui_header_1d2i7_1e7ip_392",
  "header--text": "awsui_header--text_1d2i7_1e7ip_404",
  "footer": "awsui_footer_1d2i7_1e7ip_408",
  "footer--stuck": "awsui_footer--stuck_1d2i7_1e7ip_417",
  "dismiss-control": "awsui_dismiss-control_1d2i7_1e7ip_429",
  "modal-open": "awsui_modal-open_1d2i7_1e7ip_433"
};

// node_modules/@cloudscape-design/components/modal/body-scroll.js
var initialBodyPaddingRightStyle = void 0;
function disableBodyScrolling() {
  setBodyScrollbarPadding();
  document.body.classList.add(styles_css_default115["modal-open"]);
}
function enableBodyScrolling() {
  document.body.classList.remove(styles_css_default115["modal-open"]);
  restoreBodyScrollbarPadding();
}
function setBodyScrollbarPadding() {
  if (bodyHasScrollbar()) {
    initialBodyPaddingRightStyle = document.body.style.paddingRight;
    const initialBodyPaddingRight = computedBodyPaddingRightPixels();
    const scrollbarWidth = browserScrollbarSize().width;
    const newBodyPaddingRight = initialBodyPaddingRight + scrollbarWidth;
    document.body.style.paddingRight = newBodyPaddingRight + "px";
  }
}
function computedBodyPaddingRightPixels() {
  return parseInt(window.getComputedStyle(document.body).paddingRight, 10);
}
function restoreBodyScrollbarPadding() {
  if (initialBodyPaddingRightStyle) {
    document.body.style.setProperty("padding-right", initialBodyPaddingRightStyle);
  } else {
    document.body.style.removeProperty("padding-right");
  }
  initialBodyPaddingRightStyle = void 0;
}
function bodyHasScrollbar() {
  return document.body.clientWidth < window.innerWidth;
}

// node_modules/@cloudscape-design/components/modal/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/modal/analytics-metadata/styles.scoped.css";
var styles_css_default116 = {
  "header": "awsui_header_15dxs_1ns0c_5"
};

// node_modules/@cloudscape-design/components/modal/internal.js
function InternalModalAsFunnel(props2) {
  const { funnelProps, funnelSubmit, funnelNextOrSubmitAttempt } = useFunnel();
  const { funnelStepProps } = useFunnelStep();
  const { subStepRef, funnelSubStepProps } = useFunnelSubStep();
  const onButtonClick = ({ variant }) => {
    if (variant === "primary") {
      funnelNextOrSubmitAttempt();
      funnelSubmit();
    }
  };
  return import_react328.default.createElement(InternalModal, Object.assign({ __funnelProps: funnelProps, __funnelStepProps: funnelStepProps, __subStepRef: subStepRef, __subStepFunnelProps: funnelSubStepProps, onButtonClick }, props2));
}
function InternalModal(_a2) {
  var { modalRoot, getModalRoot, removeModalRoot } = _a2, rest = __rest(_a2, ["modalRoot", "getModalRoot", "removeModalRoot"]);
  return import_react328.default.createElement(
    Portal,
    { container: modalRoot, getContainer: getModalRoot, removeContainer: removeModalRoot },
    import_react328.default.createElement(PortaledModal, Object.assign({}, rest))
  );
}
function PortaledModal(_a2) {
  var _b;
  var { size, visible, header, children: children2, footer, disableContentPaddings, onButtonClick = () => {
  }, onDismiss, __internalRootRef, __injectAnalyticsComponentMetadata, __funnelProps, __funnelStepProps, __subStepRef, __subStepFunnelProps, referrerId } = _a2, rest = __rest(_a2, ["size", "visible", "header", "children", "footer", "disableContentPaddings", "onButtonClick", "onDismiss", "__internalRootRef", "__injectAnalyticsComponentMetadata", "__funnelProps", "__funnelStepProps", "__subStepRef", "__subStepFunnelProps", "referrerId"]);
  const instanceUniqueId = useUniqueId();
  const headerId = `${rest.id || instanceUniqueId}-header`;
  const lastMouseDownElementRef = (0, import_react328.useRef)(null);
  const [breakpoint, breakpointsRef] = useContainerBreakpoints(["xs"]);
  const i18n = useInternalI18n("modal");
  const closeAriaLabel = i18n("closeAriaLabel", rest.closeAriaLabel);
  const refObject = (0, import_react328.useRef)(null);
  const mergedRef = useMergeRefs(breakpointsRef, refObject, __internalRootRef);
  const isRefresh = useVisualRefresh();
  const baseProps = getBaseProps(rest);
  const analyticsComponentMetadata = {
    name: "awsui.Modal",
    label: `.${styles_css_default116.header} h2`
  };
  const metadataAttribute = __injectAnalyticsComponentMetadata ? getAnalyticsMetadataAttribute({ component: analyticsComponentMetadata }) : {};
  const loadStartTime = (0, import_react328.useRef)(0);
  const loadCompleteTime = (0, import_react328.useRef)(0);
  const componentLoadingCount = (0, import_react328.useRef)(0);
  const performanceMetricLogged = (0, import_react328.useRef)(false);
  (0, import_react328.useEffect)(() => {
    return () => {
      enableBodyScrolling();
    };
  }, []);
  const resetModalPerformanceData = () => {
    loadStartTime.current = performance.now();
    loadCompleteTime.current = 0;
    performanceMetricLogged.current = false;
  };
  const emitTimeToContentReadyInModal = (loadCompleteTime2) => {
    var _a3;
    if (componentLoadingCount.current === 0 && loadStartTime.current && loadStartTime.current !== 0 && !performanceMetricLogged.current) {
      const timeToContentReadyInModal = loadCompleteTime2 - loadStartTime.current;
      PerformanceMetrics.modalPerformanceData({
        timeToContentReadyInModal,
        instanceIdentifier: instanceUniqueId,
        componentIdentifier: ((_a3 = headerRef.current) === null || _a3 === void 0 ? void 0 : _a3.textContent) || ""
      });
      performanceMetricLogged.current = true;
    }
  };
  const MODAL_READY_TIMEOUT = 100;
  (0, import_react328.useEffect)(() => {
    if (visible) {
      disableBodyScrolling();
      resetModalPerformanceData();
      setTimeout(() => {
        emitTimeToContentReadyInModal(loadStartTime.current);
      }, MODAL_READY_TIMEOUT);
    } else {
      enableBodyScrolling();
    }
  }, [visible]);
  (0, import_react328.useEffect)(() => {
    if (visible && refObject.current) {
      refObject.current.scrollTop = 0;
    }
  }, [visible]);
  const dismiss = (reason) => fireNonCancelableEvent(onDismiss, { reason });
  const onOverlayMouseDown = (event) => {
    lastMouseDownElementRef.current = event.target;
  };
  const onOverlayClick = (event) => {
    const overlay = refObject.current;
    const lastClicked = lastMouseDownElementRef.current;
    if (event.target === overlay && lastClicked === overlay) {
      dismiss("overlay");
    }
  };
  const onCloseButtonClick = () => dismiss("closeButton");
  const escKeyHandler = (event) => {
    if (event.keyCode === KeyCode2.escape) {
      dismiss("keyboard");
    }
  };
  const { ref: stickySentinelRef, isIntersecting: footerStuck } = useIntersectionObserver();
  const [footerHeight, footerRef] = useContainerQuery((rect) => rect.borderBoxHeight);
  const headerRef = (0, import_react328.useRef)(null);
  const { subStepRef } = useFunnelSubStep();
  return import_react328.default.createElement(
    FunnelNameSelectorContext.Provider,
    { value: `.${styles_css_default115["header--text"]}` },
    import_react328.default.createElement(
      reset_contexts_for_modal_default,
      null,
      import_react328.default.createElement(
        ModalContext.Provider,
        { value: {
          isInModal: true,
          componentLoadingCount,
          emitTimeToContentReadyInModal
        } },
        import_react328.default.createElement(
          "div",
          Object.assign({}, baseProps, __funnelProps, __funnelStepProps, { className: clsx_m_default(styles_css_default115.root, { [styles_css_default115.hidden]: !visible }, baseProps.className, isRefresh && styles_css_default115.refresh), role: "dialog", "aria-labelledby": headerId, onMouseDown: onOverlayMouseDown, onClick: onOverlayClick, ref: mergedRef, style: footerHeight ? { scrollPaddingBottom: footerHeight } : void 0, "data-awsui-referrer-id": ((_b = subStepRef.current) === null || _b === void 0 ? void 0 : _b.id) || referrerId }),
          import_react328.default.createElement(
            focus_lock_default,
            { disabled: !visible, autoFocus: true, restoreFocus: true, className: styles_css_default115["focus-lock"] },
            import_react328.default.createElement(
              "div",
              Object.assign({ className: clsx_m_default(styles_css_default115.dialog, styles_css_default115[size], styles_css_default115[`breakpoint-${breakpoint}`], isRefresh && styles_css_default115.refresh), onKeyDown: escKeyHandler }, metadataAttribute),
              import_react328.default.createElement(
                "div",
                { className: styles_css_default115.container },
                import_react328.default.createElement(
                  "div",
                  { className: clsx_m_default(styles_css_default115.header, styles_css_default116.header) },
                  import_react328.default.createElement(
                    InternalHeader,
                    { variant: "h2", __disableActionsWrapping: true, actions: import_react328.default.createElement(
                      "div",
                      Object.assign({}, getAnalyticsMetadataAttribute({
                        action: "dismiss"
                      })),
                      import_react328.default.createElement(InternalButton, { ariaLabel: closeAriaLabel, className: styles_css_default115["dismiss-control"], variant: "modal-dismiss", iconName: "close", formAction: "none", onClick: onCloseButtonClick })
                    ) },
                    import_react328.default.createElement("span", { ref: headerRef, id: headerId, className: styles_css_default115["header--text"] }, header)
                  )
                ),
                import_react328.default.createElement(
                  "div",
                  Object.assign({ ref: __subStepRef }, __subStepFunnelProps, { className: clsx_m_default(styles_css_default115.content, { [styles_css_default115["no-paddings"]]: disableContentPaddings }) }),
                  children2,
                  import_react328.default.createElement("div", { ref: stickySentinelRef })
                ),
                footer && import_react328.default.createElement(
                  ButtonContext.Provider,
                  { value: { onClick: onButtonClick } },
                  import_react328.default.createElement("div", { ref: footerRef, className: clsx_m_default(styles_css_default115.footer, footerStuck && styles_css_default115["footer--stuck"]) }, footer)
                )
              )
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/select/internal.js
var import_react329 = __toESM(require_react());

// node_modules/@cloudscape-design/components/select/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/select/styles.scoped.css";
var styles_css_default117 = {
  "root": "awsui_root_r2vco_1yzpb_145"
};

// node_modules/@cloudscape-design/components/select/internal.js
var InternalSelect = import_react329.default.forwardRef((_a2, externalRef) => {
  var _b;
  var { options, filteringType = "none", filteringPlaceholder, filteringAriaLabel, filteringClearAriaLabel, filteringResultsText, inlineLabelText, ariaRequired, placeholder, disabled, readOnly, ariaLabel, statusType = "finished", empty, loadingText, finishedText, errorText, noMatch, triggerVariant = "label", renderHighlightedAriaLive, selectedOption, onBlur, onFocus, onLoadItems, onChange, virtualScroll, expandToViewport, autoFocus, __inFilteringToken, __internalRootRef } = _a2, restProps = __rest(_a2, ["options", "filteringType", "filteringPlaceholder", "filteringAriaLabel", "filteringClearAriaLabel", "filteringResultsText", "inlineLabelText", "ariaRequired", "placeholder", "disabled", "readOnly", "ariaLabel", "statusType", "empty", "loadingText", "finishedText", "errorText", "noMatch", "triggerVariant", "renderHighlightedAriaLive", "selectedOption", "onBlur", "onFocus", "onLoadItems", "onChange", "virtualScroll", "expandToViewport", "autoFocus", "__inFilteringToken", "__internalRootRef"]);
  const baseProps = getBaseProps(restProps);
  const formFieldContext = useFormFieldContext(restProps);
  const i18n = useInternalI18n("select");
  const errorIconAriaLabel = i18n("errorIconAriaLabel", restProps.errorIconAriaLabel);
  const selectedAriaLabel = i18n("selectedAriaLabel", restProps.selectedAriaLabel);
  const recoveryText = i18n("recoveryText", restProps.recoveryText);
  if (restProps.recoveryText && !onLoadItems) {
    warnOnce("Select", "`onLoadItems` must be provided for `recoveryText` to be displayed.");
  }
  const { handleLoadMore, handleRecoveryClick, fireLoadItems } = useLoadItems({
    onLoadItems,
    options,
    statusType
  });
  checkControlled("Select", "selectedOption", selectedOption, "onChange", onChange);
  checkOptionValueField("Select", "options", options);
  const [filteringValue, setFilteringValue] = (0, import_react329.useState)("");
  const { filteredOptions, parentMap, totalCount, matchesCount } = prepareOptions(options, filteringType, filteringValue);
  const rootRef = (0, import_react329.useRef)(null);
  const triggerRef = (0, import_react329.useRef)(null);
  const selfControlId = useUniqueId("trigger");
  const controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;
  const scrollToIndex = (0, import_react329.useRef)(null);
  const { isOpen, highlightType, highlightedOption, highlightedIndex, getTriggerProps, getDropdownProps, getFilterProps, getMenuProps, getOptionProps: getOptionProps2, highlightOption, selectOption, announceSelected } = useSelect({
    selectedOptions: selectedOption ? [selectedOption] : [],
    updateSelectedOption: (option) => fireNonCancelableEvent(onChange, { selectedOption: option }),
    options: filteredOptions,
    filteringType,
    onBlur,
    onFocus,
    externalRef,
    fireLoadItems,
    setFilteringValue,
    statusType
  });
  const handleNativeSearch = useNativeSearch({
    isEnabled: filteringType === "none" && !readOnly,
    options: filteredOptions,
    highlightOption: !isOpen ? selectOption : highlightOption,
    highlightedOption: !isOpen ? selectedOption : highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.option
  });
  const selectAriaLabelId = useUniqueId("select-arialabel-");
  const footerId = useUniqueId("footer");
  (0, import_react329.useEffect)(() => {
    var _a3;
    (_a3 = scrollToIndex.current) === null || _a3 === void 0 ? void 0 : _a3.call(scrollToIndex, highlightedIndex);
  }, [highlightedIndex]);
  const filter = import_react329.default.createElement(filter_default, Object.assign({ clearAriaLabel: filteringClearAriaLabel, filteringType, placeholder: filteringPlaceholder, ariaLabel: filteringAriaLabel, ariaRequired, value: filteringValue }, getFilterProps()));
  const trigger = import_react329.default.createElement(trigger_default, Object.assign({ ref: triggerRef, placeholder, disabled, readOnly, triggerVariant, triggerProps: getTriggerProps(disabled, autoFocus), selectedOption, isOpen, inFilteringToken: __inFilteringToken, inlineLabelText }, formFieldContext, { controlId, ariaLabelledby: joinStrings(formFieldContext.ariaLabelledby, selectAriaLabelId) }));
  const isEmpty = !options || options.length === 0;
  const isNoMatch = filteredOptions && filteredOptions.length === 0;
  const isFiltered = filteringType !== "none" && filteringValue.length > 0 && filteredOptions && filteredOptions.length > 0;
  const filteredText = isFiltered ? filteringResultsText === null || filteringResultsText === void 0 ? void 0 : filteringResultsText(matchesCount, totalCount) : void 0;
  const dropdownStatus = useDropdownStatus({
    statusType,
    empty,
    loadingText,
    finishedText,
    errorText,
    recoveryText,
    isEmpty,
    isNoMatch,
    noMatch,
    filteringResultsText: filteredText,
    errorIconAriaLabel,
    onRecoveryClick: handleRecoveryClick,
    hasRecoveryCallback: !!onLoadItems
  });
  const menuProps = Object.assign(Object.assign({}, getMenuProps()), { onLoadMore: handleLoadMore, ariaLabelledby: joinStrings(selectAriaLabelId, controlId), ariaDescribedby: dropdownStatus.content ? footerId : void 0 });
  const announcement = useAnnouncement({
    announceSelected,
    highlightedOption,
    getParent: (option) => {
      var _a3;
      return (_a3 = parentMap.get(option)) === null || _a3 === void 0 ? void 0 : _a3.option;
    },
    selectedAriaLabel,
    renderHighlightedAriaLive
  });
  const ListComponent = virtualScroll ? virtual_list_default : plain_list_default;
  const handleMouseDown = (event) => {
    const target = event.target;
    if (target !== document.activeElement) {
      event.preventDefault();
    }
  };
  const mergedRef = useMergeRefs(rootRef, __internalRootRef);
  const dropdownProps = getDropdownProps();
  return import_react329.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: mergedRef, className: clsx_m_default(styles_css_default117.root, baseProps.className), onKeyDown: handleNativeSearch }),
    import_react329.default.createElement(
      dropdown_default,
      Object.assign({}, dropdownProps, { ariaLabelledby: dropdownProps.dropdownContentRole ? joinStrings(selectAriaLabelId, controlId) : void 0, ariaDescribedby: dropdownProps.dropdownContentRole ? dropdownStatus.content ? footerId : void 0 : void 0, open: isOpen, stretchTriggerHeight: !!__inFilteringToken, stretchBeyondTriggerWidth: true, trigger, header: filter, onMouseDown: handleMouseDown, footer: dropdownStatus.isSticky ? import_react329.default.createElement(dropdown_footer_default, { content: isOpen ? dropdownStatus.content : null, id: footerId }) : null, expandToViewport }),
      import_react329.default.createElement(ListComponent, { listBottom: !dropdownStatus.isSticky ? import_react329.default.createElement(dropdown_footer_default, { content: isOpen ? dropdownStatus.content : null, id: footerId }) : null, menuProps, getOptionProps: getOptionProps2, filteredOptions, filteringValue, ref: scrollToIndex, hasDropdownStatus: dropdownStatus.content !== null, screenReaderContent: announcement, highlightType })
    ),
    import_react329.default.createElement("div", { hidden: true, id: selectAriaLabelId }, ariaLabel || inlineLabelText)
  );
});
var internal_default17 = InternalSelect;

// node_modules/@cloudscape-design/components/code-editor/preferences-modal.js
function filterThemes(allThemes, available) {
  return allThemes.filter((theme) => available.indexOf(theme.value) > -1);
}
var preferences_modal_default = (props2) => {
  var _a2, _b, _c, _d;
  const [wrapLines, setWrapLines] = (0, import_react330.useState)((_b = (_a2 = props2.preferences) === null || _a2 === void 0 ? void 0 : _a2.wrapLines) !== null && _b !== void 0 ? _b : true);
  const [theme, setTheme] = (0, import_react330.useState)((_d = (_c = props2.preferences) === null || _c === void 0 ? void 0 : _c.theme) !== null && _d !== void 0 ? _d : props2.defaultTheme);
  const themeOptions = [
    {
      label: props2.i18nStrings.lightThemes,
      options: filterThemes(LightThemes, props2.themes.light)
    },
    {
      label: props2.i18nStrings.darkThemes,
      options: filterThemes(DarkThemes, props2.themes.dark)
    }
  ];
  const [selectedThemeOption, setSelectedThemeOption] = (0, import_react330.useState)(() => [...LightThemes, ...DarkThemes].filter((t2) => t2.value === theme)[0]);
  const onThemeSelected = (e3) => {
    setTheme(e3.detail.selectedOption.value);
    setSelectedThemeOption(e3.detail.selectedOption);
  };
  return import_react330.default.createElement(
    InternalModal,
    { size: "medium", visible: true, getModalRoot: props2.getModalRoot, removeModalRoot: props2.removeModalRoot, onDismiss: props2.onDismiss, header: props2.i18nStrings.header, closeAriaLabel: props2.i18nStrings.close, footer: import_react330.default.createElement(
      InternalBox,
      { float: "right" },
      import_react330.default.createElement(
        internal_default5,
        { direction: "horizontal", size: "xs" },
        import_react330.default.createElement(InternalButton, { onClick: props2.onDismiss }, props2.i18nStrings.cancel),
        import_react330.default.createElement(InternalButton, { onClick: () => props2.onConfirm({ wrapLines, theme }), variant: "primary" }, props2.i18nStrings.confirm)
      )
    ) },
    import_react330.default.createElement(
      ColumnLayout,
      { columns: 2, variant: "text-grid" },
      import_react330.default.createElement(
        "div",
        null,
        import_react330.default.createElement(internal_default16, { checked: wrapLines, onChange: (e3) => setWrapLines(e3.detail.checked) }, props2.i18nStrings.wrapLines)
      ),
      import_react330.default.createElement(
        "div",
        null,
        import_react330.default.createElement(
          InternalFormField,
          { label: props2.i18nStrings.theme },
          import_react330.default.createElement(internal_default17, { selectedOption: selectedThemeOption, onChange: onThemeSelected, options: themeOptions, filteringType: "auto", filteringAriaLabel: props2.i18nStrings.themeFilteringAriaLabel, filteringClearAriaLabel: props2.i18nStrings.themeFilteringClearAriaLabel, filteringPlaceholder: props2.i18nStrings.themeFilteringPlaceholder })
        )
      )
    )
  );
};

// node_modules/@cloudscape-design/components/code-editor/setup-editor.js
function setupEditor(ace, editor, setAnnotations, setCursorPosition, setHighlightedAnnotation, setPaneStatus) {
  setEditorDefaults(ace, editor);
  editor.session.selection.on("changeCursor", () => {
    setCursorPosition(editor.getCursorPosition());
  });
  editor.session.on("changeAnnotation", () => {
    const editorAnnotations = editor.session.getAnnotations();
    const newAnnotations = editorAnnotations.filter((a4) => a4.type !== "info");
    if (editorAnnotations.length !== newAnnotations.length) {
      editor.session.setAnnotations(newAnnotations);
    }
    setAnnotations(newAnnotations);
  });
  const moveCursorToAnnotation = (a4) => {
    if (typeof a4.row === "number") {
      editor.gotoLine(a4.row + 1, a4.column || 0, false);
    }
  };
  const openAnnotation = (row) => {
    const currentAnnotations = editor.session.getAnnotations().filter((a4) => a4.row === row && a4.type !== "info");
    const errors = currentAnnotations.filter((a4) => a4.type === "error");
    if (errors.length > 0) {
      setHighlightedAnnotation(errors[0]);
      setPaneStatus("error");
      moveCursorToAnnotation(errors[0]);
    } else if (currentAnnotations.length > 0) {
      setHighlightedAnnotation(currentAnnotations[0]);
      setPaneStatus("warning");
      moveCursorToAnnotation(currentAnnotations[0]);
    } else {
      setHighlightedAnnotation(void 0);
      setPaneStatus("hidden");
      editor.gotoLine(row + 1, 0, false);
    }
  };
  editor.on("gutterclick", (e3) => {
    const { row } = e3.getDocumentPosition();
    openAnnotation(row);
  });
  editor.on("gutterkeydown", (e3) => {
    if (e3.isInAnnotationLane() && (e3.getKey() === "space" || e3.getKey() === "return")) {
      const row = e3.getRow();
      openAnnotation(row);
    }
  });
  editor.on("change", () => {
    if (editor.getValue().length === 0) {
      editor.session.clearAnnotations();
    }
  });
}
function setEditorDefaults(ace, editor) {
  ace.config.loadModule("ace/ext/language_tools", function() {
    editor.setOptions({
      displayIndentGuides: false,
      enableSnippets: true,
      enableBasicAutocompletion: true
    });
  });
  editor.setAutoScrollEditorIntoView(true);
  if (!supportsKeyboardAccessibility(ace)) {
    editor.commands.addCommand({
      name: "exitCodeEditor",
      bindKey: "Esc",
      exec: () => {
        editor.container.focus();
      }
    });
  }
  editor.on("focus", () => {
    editor.textInput.getElement().setAttribute("tabindex", 0);
  });
  editor.on("blur", () => {
    editor.textInput.getElement().setAttribute("tabindex", -1);
  });
  editor.textInput.getElement().setAttribute("tabindex", -1);
  editor.commands.removeCommand("showSettingsMenu", false);
  editor.on("guttermousedown", (e3) => {
    e3.stop();
  });
  editor.setHighlightActiveLine(false);
  editor.$updateHighlightActiveLine = function() {
    const session = this.getSession();
    let highlight;
    if (this.$highlightActiveLine) {
      if (this.$selectionStyle !== "line" || !this.selection.isMultiLine()) {
        highlight = this.getCursorPosition();
      }
      if (this.renderer.$maxLines && this.session.getLength() === 1 && !(this.renderer.$minLines > 1)) {
        highlight = false;
      }
    }
    if (session.$highlightLineMarker && !highlight) {
      session.removeMarker(session.$highlightLineMarker.id);
      session.$highlightLineMarker = null;
    } else if (!session.$highlightLineMarker && highlight) {
      const range3 = new ace.Range(highlight.row, 0, highlight.row, Infinity);
      range3.id = session.addMarker(range3, "ace_active-line", "fullLine");
      session.$highlightLineMarker = range3;
    } else if (highlight) {
      session.$highlightLineMarker.start.row = highlight.row;
      session.$highlightLineMarker.end.row = highlight.row;
      session.$highlightLineMarker.start.column = 0;
      session._signal("changeBackMarker");
    }
  };
  editor.setHighlightActiveLine(true);
  editor.on("showGutterTooltip", (tooltip) => {
    tooltip.hide();
  });
}

// node_modules/@cloudscape-design/components/code-editor/status-bar.js
var import_react332 = __toESM(require_react());

// node_modules/@cloudscape-design/components/code-editor/tab-button.js
var import_react331 = __toESM(require_react());
var TabButton = import_react331.default.forwardRef(({ active, disabled, iconName, onClick, onFocus, onBlur, tabIndex, ariaHidden, ariaLabel, paneId, isRefresh, count, text, className: className2, id }, ref) => {
  return import_react331.default.createElement(
    "button",
    { className: clsx_m_default([styles_css_default111["tab-button"], className2], {
      [styles_css_default111["tab-button--active"]]: active,
      [styles_css_default111["tab-button--disabled"]]: disabled,
      [styles_css_default111["tab-button--refresh"]]: isRefresh
    }), id, type: "button", onClick, onFocus, onBlur, disabled, ref, tabIndex, role: "tab", "aria-selected": active, "aria-controls": paneId, "aria-hidden": ariaHidden, "aria-label": ariaLabel },
    import_react331.default.createElement(internal_default, { name: iconName }),
    import_react331.default.createElement("span", { className: styles_css_default111.count }, count),
    import_react331.default.createElement("span", { className: styles_css_default111.text }, text)
  );
});

// node_modules/@cloudscape-design/components/code-editor/status-bar.js
function StatusBar({ languageLabel, cursorPosition, paneStatus, onErrorPaneToggle, onWarningPaneToggle, onTabFocus, onTabBlur, errorsTabRef, warningsTabRef, isTabFocused, paneId, onPreferencesOpen, i18nStrings, errorCount, warningCount, isRefresh }) {
  const i18n = useInternalI18n("code-editor");
  const errorText = `${i18n("i18nStrings.errorsTab", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorsTab)}: ${errorCount}`;
  const warningText = `${i18n("i18nStrings.warningsTab", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningsTab)}: ${warningCount}`;
  const errorButtonId = getStatusButtonId({ paneId, paneStatus: "error" });
  const warningButtonId = getStatusButtonId({ paneId, paneStatus: "warning" });
  return import_react332.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default111["status-bar"], {
      [styles_css_default111["status-bar-with-hidden-pane"]]: paneStatus === "hidden"
    }) },
    import_react332.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default111["status-bar__left"]) },
      import_react332.default.createElement("span", { className: styles_css_default111["status-bar__language-mode"] }, languageLabel),
      import_react332.default.createElement("span", { className: styles_css_default111["status-bar__cursor-position"] }, cursorPosition),
      import_react332.default.createElement(
        "div",
        { className: styles_css_default111["tab-list"], role: "tablist" },
        import_react332.default.createElement(TabButton, { id: errorButtonId, count: errorCount, text: errorText, className: styles_css_default111["tab-button--errors"], iconName: "status-negative", disabled: errorCount === 0, active: paneStatus === "error", onClick: onErrorPaneToggle, onFocus: onTabFocus, onBlur: onTabBlur, ref: errorsTabRef, ariaLabel: errorText, paneId, isRefresh }),
        import_react332.default.createElement("span", { className: styles_css_default111["tab-button--divider"] }),
        import_react332.default.createElement(TabButton, { id: warningButtonId, count: warningCount, text: warningText, className: styles_css_default111["tab-button--warnings"], iconName: "status-warning", disabled: warningCount === 0, active: paneStatus === "warning", onClick: onWarningPaneToggle, onFocus: onTabFocus, onBlur: onTabBlur, ref: warningsTabRef, tabIndex: paneStatus === "error" && isTabFocused ? -1 : void 0, ariaHidden: paneStatus === "error" && isTabFocused ? true : void 0, ariaLabel: warningText, paneId, isRefresh })
      ),
      import_react332.default.createElement(
        internal_default2,
        { assertive: true, hidden: true, tagName: "span" },
        import_react332.default.createElement(
          "span",
          null,
          errorText,
          " "
        ),
        import_react332.default.createElement("span", null, warningText)
      )
    ),
    import_react332.default.createElement(
      "div",
      { className: styles_css_default111["status-bar__right"] },
      import_react332.default.createElement(
        "div",
        { className: styles_css_default111["status-bar__cog-button"] },
        import_react332.default.createElement(InternalButton, { formAction: "none", variant: "icon", iconName: "settings", iconAlt: "Settings", ariaLabel: i18n("i18nStrings.preferencesButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesButtonAriaLabel), onClick: onPreferencesOpen, nativeButtonAttributes: {
          tabIndex: paneStatus !== "hidden" && isTabFocused ? -1 : void 0,
          "aria-hidden": paneStatus !== "hidden" && isTabFocused ? true : void 0
        }, __skipNativeAttributesWarnings: true })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/code-editor/use-editor.js
var import_react333 = __toESM(require_react());
function useEditor(ace, themes, loading) {
  const editorRef = (0, import_react333.useRef)(null);
  const [editor, setEditor] = (0, import_react333.useState)(null);
  const [initialTheme] = (0, import_react333.useState)(getAceTheme(getDefaultTheme(useCurrentMode(editorRef), themes)));
  (0, import_react333.useEffect)(() => {
    const elem = editorRef.current;
    if (!ace || !elem) {
      return;
    }
    const config = getDefaultConfig(ace);
    setEditor(ace.edit(elem, Object.assign(Object.assign({}, config), { theme: initialTheme })));
  }, [ace, loading, initialTheme]);
  return { editorRef, editor };
}
function useSyncEditorLabels(editor, { controlId, ariaLabel, ariaLabelledby, ariaDescribedby }) {
  (0, import_react333.useEffect)(() => {
    if (!editor) {
      return;
    }
    const { textarea } = editor.renderer;
    if (!textarea) {
      return;
    }
    const updateAttribute = (attribute, value) => {
      if (value) {
        textarea.setAttribute(attribute, value);
      } else {
        textarea.removeAttribute(attribute);
      }
    };
    updateAttribute("id", controlId);
    updateAttribute("aria-labelledby", ariaLabelledby);
    updateAttribute("aria-describedby", ariaDescribedby);
    if (typeof editor.getOption("textInputAriaLabel") === "string") {
      editor.setOption("textInputAriaLabel", ariaLabel !== null && ariaLabel !== void 0 ? ariaLabel : "");
    } else {
      updateAttribute("aria-label", ariaLabel);
    }
  }, [ariaLabel, ariaDescribedby, ariaLabelledby, controlId, editor]);
}
function useSyncEditorSize(editor, { width, height }) {
  (0, import_react333.useEffect)(() => {
    editor === null || editor === void 0 ? void 0 : editor.resize();
  }, [editor, width, height]);
  const onResize = (0, import_react333.useCallback)(() => {
    editor === null || editor === void 0 ? void 0 : editor.resize();
  }, [editor]);
  return { onResize };
}
function useSyncEditorValue(editor, value) {
  (0, import_react333.useEffect)(() => {
    if (!editor) {
      return;
    }
    if (value === editor.getValue()) {
      return;
    }
    const pos = editor.session.selection.toJSON();
    editor.setValue(value, -1);
    editor.session.selection.fromJSON(pos);
  }, [editor, value]);
}
function useSyncEditorLanguage(editor, language) {
  (0, import_react333.useEffect)(() => {
    editor === null || editor === void 0 ? void 0 : editor.session.setMode(`ace/mode/${language}`);
  }, [editor, language]);
}
function useSyncEditorWrapLines(editor, wrapLines) {
  (0, import_react333.useEffect)(() => {
    editor === null || editor === void 0 ? void 0 : editor.session.setUseWrapMode(wrapLines !== null && wrapLines !== void 0 ? wrapLines : true);
  }, [editor, wrapLines]);
}
function useSyncEditorTheme(editor, theme) {
  (0, import_react333.useEffect)(() => {
    editor === null || editor === void 0 ? void 0 : editor.setTheme(getAceTheme(theme));
  }, [editor, theme]);
}

// node_modules/@cloudscape-design/components/code-editor/index.js
var CodeEditor = (0, import_react334.forwardRef)((props2, ref) => {
  var _a2, _b;
  const { ace, value, language, i18nStrings, editorContentHeight, onEditorContentResize, ariaLabel, languageLabel: customLanguageLabel, preferences, loading, themes, getModalRoot, removeModalRoot } = props2, rest = __rest(props2, ["ace", "value", "language", "i18nStrings", "editorContentHeight", "onEditorContentResize", "ariaLabel", "languageLabel", "preferences", "loading", "themes", "getModalRoot", "removeModalRoot"]);
  const { __internalRootRef } = useBaseComponent("CodeEditor", { props: { language } });
  const { controlId, ariaLabelledby, ariaDescribedby } = useFormFieldContext(props2);
  const [editorHeight = 480, setEditorHeight] = useControllable2(editorContentHeight, onEditorContentResize, 480, {
    componentName: "code-editor",
    changeHandler: "onEditorContentResize",
    controlledProp: "editorContentHeight"
  });
  const mode = useCurrentMode(__internalRootRef);
  const isRefresh = useVisualRefresh();
  const baseProps = getBaseProps(rest);
  const i18n = useInternalI18n("code-editor");
  const i18nModal = useInternalI18n("modal");
  const errorsTabRef = (0, import_react334.useRef)(null);
  const warningsTabRef = (0, import_react334.useRef)(null);
  const [codeEditorWidth, codeEditorMeasureRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  const mergedRef = useMergeRefs(codeEditorMeasureRef, __internalRootRef);
  const paneId = useUniqueId("code-editor-pane");
  const [paneStatus, setPaneStatus] = (0, import_react334.useState)("hidden");
  const [annotations, setAnnotations] = (0, import_react334.useState)([]);
  const [highlightedAnnotation, setHighlightedAnnotation] = (0, import_react334.useState)();
  const [cursorPosition, setCursorPosition] = (0, import_react334.useState)({ row: 0, column: 0 });
  const [isTabFocused, setTabFocused] = (0, import_react334.useState)(false);
  const { editorRef, editor } = useEditor(ace, themes, loading);
  useForwardFocus(ref, editorRef);
  (0, import_react334.useEffect)(() => {
    if (!ace || !editor) {
      return;
    }
    setupEditor(ace, editor, setAnnotations, setCursorPosition, setHighlightedAnnotation, setPaneStatus);
    return () => {
      editor === null || editor === void 0 ? void 0 : editor.destroy();
    };
  }, [ace, editor]);
  useSyncEditorLabels(editor, { controlId, ariaLabel, ariaLabelledby, ariaDescribedby });
  const { onResize } = useSyncEditorSize(editor, { width: codeEditorWidth, height: editorContentHeight });
  useSyncEditorValue(editor, value);
  useSyncEditorLanguage(editor, language);
  useSyncEditorWrapLines(editor, preferences === null || preferences === void 0 ? void 0 : preferences.wrapLines);
  const defaultTheme = getDefaultTheme(mode, themes);
  useSyncEditorTheme(editor, (_a2 = preferences === null || preferences === void 0 ? void 0 : preferences.theme) !== null && _a2 !== void 0 ? _a2 : defaultTheme);
  useChangeEffect(editor, props2.onChange, props2.onDelayedChange);
  (0, import_react334.useEffect)(() => {
    if (annotations.length === 0) {
      setPaneStatus("hidden");
    }
    if (props2.onValidate) {
      fireNonCancelableEvent(props2.onValidate, { annotations });
    }
  }, [annotations, props2.onValidate]);
  const languageLabel = customLanguageLabel !== null && customLanguageLabel !== void 0 ? customLanguageLabel : getLanguageLabel(language);
  const errorCount = annotations.filter((a4) => a4.type === "error").length;
  const warningCount = annotations.filter((a4) => a4.type === "warning").length;
  const currentAnnotations = (0, import_react334.useMemo)(() => annotations.filter((a4) => a4.type === paneStatus), [annotations, paneStatus]);
  const onEditorKeydown = (0, import_react334.useCallback)((e3) => {
    if (editor && e3.target === editor.container && e3.keyCode === KeyCode2.enter) {
      e3.stopPropagation();
      e3.preventDefault();
      editor.focus();
    }
  }, [editor]);
  const onTabFocus = (0, import_react334.useCallback)(() => setTabFocused(true), []);
  const onTabBlur = (0, import_react334.useCallback)(() => setTabFocused(false), []);
  const onErrorPaneToggle = (0, import_react334.useCallback)(() => {
    setPaneStatus(paneStatus !== "error" ? "error" : "hidden");
  }, [paneStatus]);
  const onWarningPaneToggle = (0, import_react334.useCallback)(() => {
    setPaneStatus(paneStatus !== "warning" ? "warning" : "hidden");
  }, [paneStatus]);
  const onPaneClose = () => {
    setPaneStatus("hidden");
  };
  const onAnnotationClick = ({ row = 0, column = 0 }) => {
    if (!editor) {
      return;
    }
    editor.focus();
    editor.gotoLine(row + 1, column, false);
    setHighlightedAnnotation(void 0);
  };
  const onAnnotationClear = (0, import_react334.useCallback)(() => {
    setHighlightedAnnotation(void 0);
  }, []);
  const [isPreferencesModalVisible, setPreferencesModalVisible] = (0, import_react334.useState)(false);
  const onPreferencesOpen = () => setPreferencesModalVisible(true);
  const onPreferencesConfirm = (p) => {
    fireNonCancelableEvent(props2.onPreferencesChange, p);
    setPreferencesModalVisible(false);
  };
  const onPreferencesDismiss = () => setPreferencesModalVisible(false);
  const isPaneVisible = paneStatus !== "hidden";
  return import_react334.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default111["code-editor"], baseProps.className, { [styles_css_default111["code-editor-refresh"]]: isRefresh }), ref: mergedRef }),
    loading && import_react334.default.createElement(
      loading_screen_default,
      null,
      import_react334.default.createElement(internal_default2, { tagName: "span" }, i18n("i18nStrings.loadingState", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.loadingState))
    ),
    !ace && !loading && import_react334.default.createElement(error_screen_default, { recoveryText: i18n("i18nStrings.errorStateRecovery", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorStateRecovery), onRecoveryClick: props2.onRecoveryClick }, i18n("i18nStrings.errorState", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorState)),
    ace && !loading && import_react334.default.createElement(
      import_react334.default.Fragment,
      null,
      import_react334.default.createElement(
        ResizableBox,
        { height: Math.max(editorHeight, 20), minHeight: 20, onResize: (height) => {
          setEditorHeight(height);
          onResize();
          fireNonCancelableEvent(onEditorContentResize, { height });
        }, handleAriaLabel: i18n("i18nStrings.resizeHandleAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.resizeHandleAriaLabel), handleTooltipText: i18n("i18nStrings.resizeHandleTooltipText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.resizeHandleTooltipText) },
        import_react334.default.createElement("div", { ref: editorRef, className: clsx_m_default(styles_css_default111.editor, styles_css_default111.ace, isRefresh && styles_css_default111["editor-refresh"]), onKeyDown: onEditorKeydown, tabIndex: 0, role: "group", "aria-label": i18n("i18nStrings.editorGroupAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.editorGroupAriaLabel) })
      ),
      import_react334.default.createElement(
        "div",
        { role: "group", "aria-label": i18n("i18nStrings.statusBarGroupAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.statusBarGroupAriaLabel) },
        import_react334.default.createElement(StatusBar, { languageLabel, cursorPosition: i18n("i18nStrings.cursorPosition", (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.cursorPosition) === null || _b === void 0 ? void 0 : _b.call(i18nStrings, cursorPosition.row + 1, cursorPosition.column + 1), (format3) => format3({ row: cursorPosition.row + 1, column: cursorPosition.column + 1 })), errorCount, warningCount, paneStatus, onErrorPaneToggle, onWarningPaneToggle, onTabFocus, onTabBlur, errorsTabRef, warningsTabRef, i18nStrings, isTabFocused, paneId: isPaneVisible ? paneId : void 0, onPreferencesOpen, isRefresh }),
        import_react334.default.createElement(Pane, { id: paneId, paneStatus, visible: isPaneVisible, annotations: currentAnnotations, highlighted: highlightedAnnotation, onAnnotationClick, onAnnotationClear, onClose: onPaneClose, cursorPositionLabel: i18n("i18nStrings.cursorPosition", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.cursorPosition, (format3) => (row, column) => format3({ row, column })), closeButtonAriaLabel: i18n("i18nStrings.paneCloseButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.paneCloseButtonAriaLabel), handleAriaLabel: i18n("i18nStrings.resizeHandleAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.resizeHandleAriaLabel), handleTooltipText: i18n("i18nStrings.resizeHandleTooltipText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.resizeHandleTooltipText) })
      ),
      isPreferencesModalVisible && import_react334.default.createElement(preferences_modal_default, { getModalRoot, removeModalRoot, onConfirm: onPreferencesConfirm, onDismiss: onPreferencesDismiss, themes: themes !== null && themes !== void 0 ? themes : DEFAULT_AVAILABLE_THEMES, preferences, defaultTheme, i18nStrings: {
        header: i18n("i18nStrings.preferencesModalHeader", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalHeader),
        cancel: i18n("i18nStrings.preferencesModalCancel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalCancel),
        confirm: i18n("i18nStrings.preferencesModalConfirm", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalConfirm),
        close: i18nModal("closeAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalCloseAriaLabel) || (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalCancel),
        wrapLines: i18n("i18nStrings.preferencesModalWrapLines", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalWrapLines),
        theme: i18n("i18nStrings.preferencesModalTheme", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalTheme),
        lightThemes: i18n("i18nStrings.preferencesModalLightThemes", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalLightThemes),
        darkThemes: i18n("i18nStrings.preferencesModalDarkThemes", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalDarkThemes),
        themeFilteringAriaLabel: i18n("i18nStrings.preferencesModalThemeFilteringAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalThemeFilteringAriaLabel),
        themeFilteringPlaceholder: i18n("i18nStrings.preferencesModalThemeFilteringPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalThemeFilteringPlaceholder),
        themeFilteringClearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesModalThemeFilteringClearAriaLabel
      } })
    )
  );
});
applyDisplayName(CodeEditor, "CodeEditor");
var code_editor_default = CodeEditor;

// node_modules/@cloudscape-design/components/collection-preferences/index.js
var import_react356 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/context/collection-preferences-metadata-context.js
var import_react335 = __toESM(require_react());
var CollectionPreferencesMetadata = (0, import_react335.createContext)({});

// node_modules/@cloudscape-design/components/collection-preferences/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/collection-preferences/analytics-metadata/styles.scoped.css";
var styles_css_default118 = {
  "trigger-button": "awsui_trigger-button_119fv_11zih_5"
};

// node_modules/@cloudscape-design/components/collection-preferences/analytics-metadata/utils.js
var getComponentAnalyticsMetadata = (disabled, preferences = {}) => {
  const metadata = {
    name: "awsui.CollectionPreferences",
    label: `.${styles_css_default118["trigger-button"]}`,
    properties: {
      disabled: `${!!disabled}`
    }
  };
  if (preferences.pageSize) {
    metadata.properties.pageSize = `${preferences.pageSize}`;
  }
  if (preferences.wrapLines !== void 0) {
    metadata.properties.wrapLines = `${!!preferences.wrapLines}`;
  }
  if (preferences.stripedRows !== void 0) {
    metadata.properties.stripedRows = `${!!preferences.stripedRows}`;
  }
  if (preferences.contentDensity !== void 0) {
    metadata.properties.contentDensity = preferences.contentDensity;
  }
  if (preferences.visibleContent) {
    metadata.properties.visibleContentCount = `${preferences.visibleContent.length}`;
  }
  if (preferences.stickyColumns) {
    if (preferences.stickyColumns.first) {
      metadata.properties.stickyColumnsFirst = `${preferences.stickyColumns.first}`;
    }
    if (preferences.stickyColumns.last) {
      metadata.properties.stickyColumnsLast = `${preferences.stickyColumns.last}`;
    }
  }
  if (preferences.contentDisplay) {
    metadata.properties.contentDisplayVisibleCount = `${preferences.contentDisplay.filter(({ visible }) => !!visible).length}`;
  }
  return metadata;
};
var getAnalyticsInnerContextAttribute = (preference) => getAnalyticsMetadataAttribute({
  component: {
    innerContext: {
      preference
    }
  }
});

// node_modules/@cloudscape-design/components/collection-preferences/content-display/index.js
var import_react351 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/sortable-area/use-live-announcements.js
var import_react336 = __toESM(require_react());
var formatDndStarted = (format3) => (position, total) => format3({ position, total });
var formatDndItemReordered = (format3) => (initialPosition, currentPosition, total) => format3({ currentPosition, total, isInitialPosition: `${initialPosition === currentPosition}` });
var formatDndItemCommitted = (format3) => (initialPosition, finalPosition, total) => format3({
  initialPosition,
  finalPosition,
  total,
  isInitialPosition: `${initialPosition === finalPosition}`
});
function useLiveAnnouncements({ items, itemDefinition, isDragging, liveAnnouncementDndStarted, liveAnnouncementDndItemReordered, liveAnnouncementDndItemCommitted, liveAnnouncementDndDiscarded }) {
  const isFirstAnnouncement = (0, import_react336.useRef)(true);
  if (!isDragging) {
    isFirstAnnouncement.current = true;
  }
  return {
    onDragStart({ active }) {
      if (active && liveAnnouncementDndStarted) {
        const index = items.findIndex((item) => itemDefinition.id(item) === active.id);
        return liveAnnouncementDndStarted(index + 1, items.length);
      }
    },
    onDragOver({ active, over }) {
      if (liveAnnouncementDndItemReordered) {
        if (isFirstAnnouncement.current) {
          isFirstAnnouncement.current = false;
          if (!over || over.id === active.id) {
            return;
          }
        }
        const initialIndex = items.findIndex((item) => itemDefinition.id(item) === active.id);
        const currentIdex = over ? items.findIndex((item) => itemDefinition.id(item) === over.id) : initialIndex;
        return liveAnnouncementDndItemReordered(initialIndex + 1, currentIdex + 1, items.length);
      }
    },
    onDragEnd({ active, over }) {
      if (liveAnnouncementDndItemCommitted) {
        const initialIndex = items.findIndex((item) => itemDefinition.id(item) === active.id);
        const finalIndex = over ? items.findIndex((item) => itemDefinition.id(item) === over.id) : initialIndex;
        return liveAnnouncementDndItemCommitted(initialIndex + 1, finalIndex + 1, items.length);
      }
    },
    onDragCancel() {
      return liveAnnouncementDndDiscarded;
    }
  };
}

// node_modules/@cloudscape-design/components/list/internal.js
var import_react344 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/sortable-area/index.js
var import_react342 = __toESM(require_react());

// node_modules/@dnd-kit/core/dist/core.esm.js
var import_react339 = __toESM(require_react());
var import_react_dom9 = __toESM(require_react_dom());

// node_modules/@dnd-kit/utilities/dist/utilities.esm.js
var import_react337 = __toESM(require_react());
function useCombinedRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }
  return (0, import_react337.useMemo)(
    () => (node) => {
      refs.forEach((ref) => ref(node));
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    refs
  );
}
var canUseDOM = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
function isWindow(element) {
  const elementString = Object.prototype.toString.call(element);
  return elementString === "[object Window]" || // In Electron context the Window object serializes to [object global]
  elementString === "[object global]";
}
function isNode3(node) {
  return "nodeType" in node;
}
function getWindow2(target) {
  var _target$ownerDocument, _target$ownerDocument2;
  if (!target) {
    return window;
  }
  if (isWindow(target)) {
    return target;
  }
  if (!isNode3(target)) {
    return window;
  }
  return (_target$ownerDocument = (_target$ownerDocument2 = target.ownerDocument) == null ? void 0 : _target$ownerDocument2.defaultView) != null ? _target$ownerDocument : window;
}
function isDocument(node) {
  const {
    Document
  } = getWindow2(node);
  return node instanceof Document;
}
function isHTMLElement3(node) {
  if (isWindow(node)) {
    return false;
  }
  return node instanceof getWindow2(node).HTMLElement;
}
function isSVGElement3(node) {
  return node instanceof getWindow2(node).SVGElement;
}
function getOwnerDocument(target) {
  if (!target) {
    return document;
  }
  if (isWindow(target)) {
    return target.document;
  }
  if (!isNode3(target)) {
    return document;
  }
  if (isDocument(target)) {
    return target;
  }
  if (isHTMLElement3(target) || isSVGElement3(target)) {
    return target.ownerDocument;
  }
  return document;
}
var useIsomorphicLayoutEffect2 = canUseDOM ? import_react337.useLayoutEffect : import_react337.useEffect;
function useEvent(handler) {
  const handlerRef = (0, import_react337.useRef)(handler);
  useIsomorphicLayoutEffect2(() => {
    handlerRef.current = handler;
  });
  return (0, import_react337.useCallback)(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return handlerRef.current == null ? void 0 : handlerRef.current(...args);
  }, []);
}
function useInterval() {
  const intervalRef = (0, import_react337.useRef)(null);
  const set2 = (0, import_react337.useCallback)((listener, duration) => {
    intervalRef.current = setInterval(listener, duration);
  }, []);
  const clear = (0, import_react337.useCallback)(() => {
    if (intervalRef.current !== null) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
  }, []);
  return [set2, clear];
}
function useLatestValue(value, dependencies) {
  if (dependencies === void 0) {
    dependencies = [value];
  }
  const valueRef = (0, import_react337.useRef)(value);
  useIsomorphicLayoutEffect2(() => {
    if (valueRef.current !== value) {
      valueRef.current = value;
    }
  }, dependencies);
  return valueRef;
}
function useLazyMemo(callback, dependencies) {
  const valueRef = (0, import_react337.useRef)();
  return (0, import_react337.useMemo)(
    () => {
      const newValue = callback(valueRef.current);
      valueRef.current = newValue;
      return newValue;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [...dependencies]
  );
}
function useNodeRef(onChange) {
  const onChangeHandler = useEvent(onChange);
  const node = (0, import_react337.useRef)(null);
  const setNodeRef = (0, import_react337.useCallback)(
    (element) => {
      if (element !== node.current) {
        onChangeHandler == null ? void 0 : onChangeHandler(element, node.current);
      }
      node.current = element;
    },
    //eslint-disable-next-line
    []
  );
  return [node, setNodeRef];
}
function usePrevious2(value) {
  const ref = (0, import_react337.useRef)();
  (0, import_react337.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}
var ids = {};
function useUniqueId2(prefix, value) {
  return (0, import_react337.useMemo)(() => {
    if (value) {
      return value;
    }
    const id = ids[prefix] == null ? 0 : ids[prefix] + 1;
    ids[prefix] = id;
    return prefix + "-" + id;
  }, [prefix, value]);
}
function createAdjustmentFn(modifier) {
  return function(object2) {
    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      adjustments[_key - 1] = arguments[_key];
    }
    return adjustments.reduce((accumulator, adjustment) => {
      const entries = Object.entries(adjustment);
      for (const [key2, valueAdjustment] of entries) {
        const value = accumulator[key2];
        if (value != null) {
          accumulator[key2] = value + modifier * valueAdjustment;
        }
      }
      return accumulator;
    }, {
      ...object2
    });
  };
}
var add2 = createAdjustmentFn(1);
var subtract = createAdjustmentFn(-1);
function hasViewportRelativeCoordinates(event) {
  return "clientX" in event && "clientY" in event;
}
function isKeyboardEvent(event) {
  if (!event) {
    return false;
  }
  const {
    KeyboardEvent
  } = getWindow2(event.target);
  return KeyboardEvent && event instanceof KeyboardEvent;
}
function isTouchEvent(event) {
  if (!event) {
    return false;
  }
  const {
    TouchEvent
  } = getWindow2(event.target);
  return TouchEvent && event instanceof TouchEvent;
}
function getEventCoordinates(event) {
  if (isTouchEvent(event)) {
    if (event.touches && event.touches.length) {
      const {
        clientX: x3,
        clientY: y4
      } = event.touches[0];
      return {
        x: x3,
        y: y4
      };
    } else if (event.changedTouches && event.changedTouches.length) {
      const {
        clientX: x3,
        clientY: y4
      } = event.changedTouches[0];
      return {
        x: x3,
        y: y4
      };
    }
  }
  if (hasViewportRelativeCoordinates(event)) {
    return {
      x: event.clientX,
      y: event.clientY
    };
  }
  return null;
}
var CSS2 = Object.freeze({
  Translate: {
    toString(transform) {
      if (!transform) {
        return;
      }
      const {
        x: x3,
        y: y4
      } = transform;
      return "translate3d(" + (x3 ? Math.round(x3) : 0) + "px, " + (y4 ? Math.round(y4) : 0) + "px, 0)";
    }
  },
  Scale: {
    toString(transform) {
      if (!transform) {
        return;
      }
      const {
        scaleX,
        scaleY
      } = transform;
      return "scaleX(" + scaleX + ") scaleY(" + scaleY + ")";
    }
  },
  Transform: {
    toString(transform) {
      if (!transform) {
        return;
      }
      return [CSS2.Translate.toString(transform), CSS2.Scale.toString(transform)].join(" ");
    }
  },
  Transition: {
    toString(_ref) {
      let {
        property,
        duration,
        easing
      } = _ref;
      return property + " " + duration + "ms " + easing;
    }
  }
});
var SELECTOR = "a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]";
function findFirstFocusableNode(element) {
  if (element.matches(SELECTOR)) {
    return element;
  }
  return element.querySelector(SELECTOR);
}

// node_modules/@dnd-kit/accessibility/dist/accessibility.esm.js
var import_react338 = __toESM(require_react());
var hiddenStyles = {
  display: "none"
};
function HiddenText(_ref) {
  let {
    id,
    value
  } = _ref;
  return import_react338.default.createElement("div", {
    id,
    style: hiddenStyles
  }, value);
}
function LiveRegion(_ref) {
  let {
    id,
    announcement,
    ariaLiveType = "assertive"
  } = _ref;
  const visuallyHidden = {
    position: "fixed",
    top: 0,
    left: 0,
    width: 1,
    height: 1,
    margin: -1,
    border: 0,
    padding: 0,
    overflow: "hidden",
    clip: "rect(0 0 0 0)",
    clipPath: "inset(100%)",
    whiteSpace: "nowrap"
  };
  return import_react338.default.createElement("div", {
    id,
    style: visuallyHidden,
    role: "status",
    "aria-live": ariaLiveType,
    "aria-atomic": true
  }, announcement);
}
function useAnnouncement2() {
  const [announcement, setAnnouncement] = (0, import_react338.useState)("");
  const announce = (0, import_react338.useCallback)((value) => {
    if (value != null) {
      setAnnouncement(value);
    }
  }, []);
  return {
    announce,
    announcement
  };
}

// node_modules/@dnd-kit/core/dist/core.esm.js
var DndMonitorContext = (0, import_react339.createContext)(null);
function useDndMonitor(listener) {
  const registerListener = (0, import_react339.useContext)(DndMonitorContext);
  (0, import_react339.useEffect)(() => {
    if (!registerListener) {
      throw new Error("useDndMonitor must be used within a children of <DndContext>");
    }
    const unsubscribe = registerListener(listener);
    return unsubscribe;
  }, [listener, registerListener]);
}
function useDndMonitorProvider() {
  const [listeners] = (0, import_react339.useState)(() => /* @__PURE__ */ new Set());
  const registerListener = (0, import_react339.useCallback)((listener) => {
    listeners.add(listener);
    return () => listeners.delete(listener);
  }, [listeners]);
  const dispatch = (0, import_react339.useCallback)((_ref) => {
    let {
      type,
      event
    } = _ref;
    listeners.forEach((listener) => {
      var _listener$type;
      return (_listener$type = listener[type]) == null ? void 0 : _listener$type.call(listener, event);
    });
  }, [listeners]);
  return [dispatch, registerListener];
}
var defaultScreenReaderInstructions = {
  draggable: "\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  "
};
var defaultAnnouncements = {
  onDragStart(_ref) {
    let {
      active
    } = _ref;
    return "Picked up draggable item " + active.id + ".";
  },
  onDragOver(_ref2) {
    let {
      active,
      over
    } = _ref2;
    if (over) {
      return "Draggable item " + active.id + " was moved over droppable area " + over.id + ".";
    }
    return "Draggable item " + active.id + " is no longer over a droppable area.";
  },
  onDragEnd(_ref3) {
    let {
      active,
      over
    } = _ref3;
    if (over) {
      return "Draggable item " + active.id + " was dropped over droppable area " + over.id;
    }
    return "Draggable item " + active.id + " was dropped.";
  },
  onDragCancel(_ref4) {
    let {
      active
    } = _ref4;
    return "Dragging was cancelled. Draggable item " + active.id + " was dropped.";
  }
};
function Accessibility(_ref) {
  let {
    announcements = defaultAnnouncements,
    container,
    hiddenTextDescribedById,
    screenReaderInstructions = defaultScreenReaderInstructions
  } = _ref;
  const {
    announce,
    announcement
  } = useAnnouncement2();
  const liveRegionId = useUniqueId2("DndLiveRegion");
  const [mounted, setMounted] = (0, import_react339.useState)(false);
  (0, import_react339.useEffect)(() => {
    setMounted(true);
  }, []);
  useDndMonitor((0, import_react339.useMemo)(() => ({
    onDragStart(_ref2) {
      let {
        active
      } = _ref2;
      announce(announcements.onDragStart({
        active
      }));
    },
    onDragMove(_ref3) {
      let {
        active,
        over
      } = _ref3;
      if (announcements.onDragMove) {
        announce(announcements.onDragMove({
          active,
          over
        }));
      }
    },
    onDragOver(_ref4) {
      let {
        active,
        over
      } = _ref4;
      announce(announcements.onDragOver({
        active,
        over
      }));
    },
    onDragEnd(_ref5) {
      let {
        active,
        over
      } = _ref5;
      announce(announcements.onDragEnd({
        active,
        over
      }));
    },
    onDragCancel(_ref6) {
      let {
        active,
        over
      } = _ref6;
      announce(announcements.onDragCancel({
        active,
        over
      }));
    }
  }), [announce, announcements]));
  if (!mounted) {
    return null;
  }
  const markup = import_react339.default.createElement(import_react339.default.Fragment, null, import_react339.default.createElement(HiddenText, {
    id: hiddenTextDescribedById,
    value: screenReaderInstructions.draggable
  }), import_react339.default.createElement(LiveRegion, {
    id: liveRegionId,
    announcement
  }));
  return container ? (0, import_react_dom9.createPortal)(markup, container) : markup;
}
var Action;
(function(Action2) {
  Action2["DragStart"] = "dragStart";
  Action2["DragMove"] = "dragMove";
  Action2["DragEnd"] = "dragEnd";
  Action2["DragCancel"] = "dragCancel";
  Action2["DragOver"] = "dragOver";
  Action2["RegisterDroppable"] = "registerDroppable";
  Action2["SetDroppableDisabled"] = "setDroppableDisabled";
  Action2["UnregisterDroppable"] = "unregisterDroppable";
})(Action || (Action = {}));
function noop2() {
}
function useSensor(sensor, options) {
  return (0, import_react339.useMemo)(
    () => ({
      sensor,
      options: options != null ? options : {}
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [sensor, options]
  );
}
function useSensors() {
  for (var _len = arguments.length, sensors = new Array(_len), _key = 0; _key < _len; _key++) {
    sensors[_key] = arguments[_key];
  }
  return (0, import_react339.useMemo)(
    () => [...sensors].filter((sensor) => sensor != null),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [...sensors]
  );
}
var defaultCoordinates = Object.freeze({
  x: 0,
  y: 0
});
function distanceBetween(p1, p2) {
  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
}
function getRelativeTransformOrigin(event, rect) {
  const eventCoordinates = getEventCoordinates(event);
  if (!eventCoordinates) {
    return "0 0";
  }
  const transformOrigin = {
    x: (eventCoordinates.x - rect.left) / rect.width * 100,
    y: (eventCoordinates.y - rect.top) / rect.height * 100
  };
  return transformOrigin.x + "% " + transformOrigin.y + "%";
}
function sortCollisionsAsc(_ref, _ref2) {
  let {
    data: {
      value: a4
    }
  } = _ref;
  let {
    data: {
      value: b2
    }
  } = _ref2;
  return a4 - b2;
}
function sortCollisionsDesc(_ref3, _ref4) {
  let {
    data: {
      value: a4
    }
  } = _ref3;
  let {
    data: {
      value: b2
    }
  } = _ref4;
  return b2 - a4;
}
function getFirstCollision(collisions, property) {
  if (!collisions || collisions.length === 0) {
    return null;
  }
  const [firstCollision] = collisions;
  return property ? firstCollision[property] : firstCollision;
}
function centerOfRectangle(rect, left, top) {
  if (left === void 0) {
    left = rect.left;
  }
  if (top === void 0) {
    top = rect.top;
  }
  return {
    x: left + rect.width * 0.5,
    y: top + rect.height * 0.5
  };
}
var closestCenter = (_ref) => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref;
  const centerRect = centerOfRectangle(collisionRect, collisionRect.left, collisionRect.top);
  const collisions = [];
  for (const droppableContainer of droppableContainers) {
    const {
      id
    } = droppableContainer;
    const rect = droppableRects.get(id);
    if (rect) {
      const distBetween = distanceBetween(centerOfRectangle(rect), centerRect);
      collisions.push({
        id,
        data: {
          droppableContainer,
          value: distBetween
        }
      });
    }
  }
  return collisions.sort(sortCollisionsAsc);
};
function getIntersectionRatio(entry, target) {
  const top = Math.max(target.top, entry.top);
  const left = Math.max(target.left, entry.left);
  const right = Math.min(target.left + target.width, entry.left + entry.width);
  const bottom = Math.min(target.top + target.height, entry.top + entry.height);
  const width = right - left;
  const height = bottom - top;
  if (left < right && top < bottom) {
    const targetArea = target.width * target.height;
    const entryArea = entry.width * entry.height;
    const intersectionArea = width * height;
    const intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);
    return Number(intersectionRatio.toFixed(4));
  }
  return 0;
}
var rectIntersection = (_ref) => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref;
  const collisions = [];
  for (const droppableContainer of droppableContainers) {
    const {
      id
    } = droppableContainer;
    const rect = droppableRects.get(id);
    if (rect) {
      const intersectionRatio = getIntersectionRatio(rect, collisionRect);
      if (intersectionRatio > 0) {
        collisions.push({
          id,
          data: {
            droppableContainer,
            value: intersectionRatio
          }
        });
      }
    }
  }
  return collisions.sort(sortCollisionsDesc);
};
function adjustScale(transform, rect1, rect2) {
  return {
    ...transform,
    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,
    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1
  };
}
function getRectDelta(rect1, rect2) {
  return rect1 && rect2 ? {
    x: rect1.left - rect2.left,
    y: rect1.top - rect2.top
  } : defaultCoordinates;
}
function createRectAdjustmentFn(modifier) {
  return function adjustClientRect(rect) {
    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      adjustments[_key - 1] = arguments[_key];
    }
    return adjustments.reduce((acc, adjustment) => ({
      ...acc,
      top: acc.top + modifier * adjustment.y,
      bottom: acc.bottom + modifier * adjustment.y,
      left: acc.left + modifier * adjustment.x,
      right: acc.right + modifier * adjustment.x
    }), {
      ...rect
    });
  };
}
var getAdjustedRect = createRectAdjustmentFn(1);
function parseTransform(transform) {
  if (transform.startsWith("matrix3d(")) {
    const transformArray = transform.slice(9, -1).split(/, /);
    return {
      x: +transformArray[12],
      y: +transformArray[13],
      scaleX: +transformArray[0],
      scaleY: +transformArray[5]
    };
  } else if (transform.startsWith("matrix(")) {
    const transformArray = transform.slice(7, -1).split(/, /);
    return {
      x: +transformArray[4],
      y: +transformArray[5],
      scaleX: +transformArray[0],
      scaleY: +transformArray[3]
    };
  }
  return null;
}
function inverseTransform(rect, transform, transformOrigin) {
  const parsedTransform = parseTransform(transform);
  if (!parsedTransform) {
    return rect;
  }
  const {
    scaleX,
    scaleY,
    x: translateX,
    y: translateY
  } = parsedTransform;
  const x3 = rect.left - translateX - (1 - scaleX) * parseFloat(transformOrigin);
  const y4 = rect.top - translateY - (1 - scaleY) * parseFloat(transformOrigin.slice(transformOrigin.indexOf(" ") + 1));
  const w2 = scaleX ? rect.width / scaleX : rect.width;
  const h3 = scaleY ? rect.height / scaleY : rect.height;
  return {
    width: w2,
    height: h3,
    top: y4,
    right: x3 + w2,
    bottom: y4 + h3,
    left: x3
  };
}
var defaultOptions2 = {
  ignoreTransform: false
};
function getClientRect(element, options) {
  if (options === void 0) {
    options = defaultOptions2;
  }
  let rect = element.getBoundingClientRect();
  if (options.ignoreTransform) {
    const {
      transform,
      transformOrigin
    } = getWindow2(element).getComputedStyle(element);
    if (transform) {
      rect = inverseTransform(rect, transform, transformOrigin);
    }
  }
  const {
    top,
    left,
    width,
    height,
    bottom,
    right
  } = rect;
  return {
    top,
    left,
    width,
    height,
    bottom,
    right
  };
}
function getTransformAgnosticClientRect(element) {
  return getClientRect(element, {
    ignoreTransform: true
  });
}
function getWindowClientRect(element) {
  const width = element.innerWidth;
  const height = element.innerHeight;
  return {
    top: 0,
    left: 0,
    right: width,
    bottom: height,
    width,
    height
  };
}
function isFixed(node, computedStyle) {
  if (computedStyle === void 0) {
    computedStyle = getWindow2(node).getComputedStyle(node);
  }
  return computedStyle.position === "fixed";
}
function isScrollable(element, computedStyle) {
  if (computedStyle === void 0) {
    computedStyle = getWindow2(element).getComputedStyle(element);
  }
  const overflowRegex = /(auto|scroll|overlay)/;
  const properties2 = ["overflow", "overflowX", "overflowY"];
  return properties2.some((property) => {
    const value = computedStyle[property];
    return typeof value === "string" ? overflowRegex.test(value) : false;
  });
}
function getScrollableAncestors(element, limit) {
  const scrollParents = [];
  function findScrollableAncestors(node) {
    if (limit != null && scrollParents.length >= limit) {
      return scrollParents;
    }
    if (!node) {
      return scrollParents;
    }
    if (isDocument(node) && node.scrollingElement != null && !scrollParents.includes(node.scrollingElement)) {
      scrollParents.push(node.scrollingElement);
      return scrollParents;
    }
    if (!isHTMLElement3(node) || isSVGElement3(node)) {
      return scrollParents;
    }
    if (scrollParents.includes(node)) {
      return scrollParents;
    }
    const computedStyle = getWindow2(element).getComputedStyle(node);
    if (node !== element) {
      if (isScrollable(node, computedStyle)) {
        scrollParents.push(node);
      }
    }
    if (isFixed(node, computedStyle)) {
      return scrollParents;
    }
    return findScrollableAncestors(node.parentNode);
  }
  if (!element) {
    return scrollParents;
  }
  return findScrollableAncestors(element);
}
function getFirstScrollableAncestor(node) {
  const [firstScrollableAncestor] = getScrollableAncestors(node, 1);
  return firstScrollableAncestor != null ? firstScrollableAncestor : null;
}
function getScrollableElement(element) {
  if (!canUseDOM || !element) {
    return null;
  }
  if (isWindow(element)) {
    return element;
  }
  if (!isNode3(element)) {
    return null;
  }
  if (isDocument(element) || element === getOwnerDocument(element).scrollingElement) {
    return window;
  }
  if (isHTMLElement3(element)) {
    return element;
  }
  return null;
}
function getScrollXCoordinate(element) {
  if (isWindow(element)) {
    return element.scrollX;
  }
  return element.scrollLeft;
}
function getScrollYCoordinate(element) {
  if (isWindow(element)) {
    return element.scrollY;
  }
  return element.scrollTop;
}
function getScrollCoordinates(element) {
  return {
    x: getScrollXCoordinate(element),
    y: getScrollYCoordinate(element)
  };
}
var Direction;
(function(Direction2) {
  Direction2[Direction2["Forward"] = 1] = "Forward";
  Direction2[Direction2["Backward"] = -1] = "Backward";
})(Direction || (Direction = {}));
function isDocumentScrollingElement(element) {
  if (!canUseDOM || !element) {
    return false;
  }
  return element === document.scrollingElement;
}
function getScrollPosition(scrollingContainer) {
  const minScroll = {
    x: 0,
    y: 0
  };
  const dimensions = isDocumentScrollingElement(scrollingContainer) ? {
    height: window.innerHeight,
    width: window.innerWidth
  } : {
    height: scrollingContainer.clientHeight,
    width: scrollingContainer.clientWidth
  };
  const maxScroll = {
    x: scrollingContainer.scrollWidth - dimensions.width,
    y: scrollingContainer.scrollHeight - dimensions.height
  };
  const isTop = scrollingContainer.scrollTop <= minScroll.y;
  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;
  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;
  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;
  return {
    isTop,
    isLeft,
    isBottom,
    isRight,
    maxScroll,
    minScroll
  };
}
var defaultThreshold = {
  x: 0.2,
  y: 0.2
};
function getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, _ref, acceleration, thresholdPercentage) {
  let {
    top,
    left,
    right,
    bottom
  } = _ref;
  if (acceleration === void 0) {
    acceleration = 10;
  }
  if (thresholdPercentage === void 0) {
    thresholdPercentage = defaultThreshold;
  }
  const {
    isTop,
    isBottom,
    isLeft,
    isRight
  } = getScrollPosition(scrollContainer);
  const direction = {
    x: 0,
    y: 0
  };
  const speed = {
    x: 0,
    y: 0
  };
  const threshold = {
    height: scrollContainerRect.height * thresholdPercentage.y,
    width: scrollContainerRect.width * thresholdPercentage.x
  };
  if (!isTop && top <= scrollContainerRect.top + threshold.height) {
    direction.y = Direction.Backward;
    speed.y = acceleration * Math.abs((scrollContainerRect.top + threshold.height - top) / threshold.height);
  } else if (!isBottom && bottom >= scrollContainerRect.bottom - threshold.height) {
    direction.y = Direction.Forward;
    speed.y = acceleration * Math.abs((scrollContainerRect.bottom - threshold.height - bottom) / threshold.height);
  }
  if (!isRight && right >= scrollContainerRect.right - threshold.width) {
    direction.x = Direction.Forward;
    speed.x = acceleration * Math.abs((scrollContainerRect.right - threshold.width - right) / threshold.width);
  } else if (!isLeft && left <= scrollContainerRect.left + threshold.width) {
    direction.x = Direction.Backward;
    speed.x = acceleration * Math.abs((scrollContainerRect.left + threshold.width - left) / threshold.width);
  }
  return {
    direction,
    speed
  };
}
function getScrollElementRect(element) {
  if (element === document.scrollingElement) {
    const {
      innerWidth,
      innerHeight
    } = window;
    return {
      top: 0,
      left: 0,
      right: innerWidth,
      bottom: innerHeight,
      width: innerWidth,
      height: innerHeight
    };
  }
  const {
    top,
    left,
    right,
    bottom
  } = element.getBoundingClientRect();
  return {
    top,
    left,
    right,
    bottom,
    width: element.clientWidth,
    height: element.clientHeight
  };
}
function getScrollOffsets(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node) => {
    return add2(acc, getScrollCoordinates(node));
  }, defaultCoordinates);
}
function getScrollXOffset(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node) => {
    return acc + getScrollXCoordinate(node);
  }, 0);
}
function getScrollYOffset(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node) => {
    return acc + getScrollYCoordinate(node);
  }, 0);
}
function scrollIntoViewIfNeeded(element, measure) {
  if (measure === void 0) {
    measure = getClientRect;
  }
  if (!element) {
    return;
  }
  const {
    top,
    left,
    bottom,
    right
  } = measure(element);
  const firstScrollableAncestor = getFirstScrollableAncestor(element);
  if (!firstScrollableAncestor) {
    return;
  }
  if (bottom <= 0 || right <= 0 || top >= window.innerHeight || left >= window.innerWidth) {
    element.scrollIntoView({
      block: "center",
      inline: "center"
    });
  }
}
var properties = [["x", ["left", "right"], getScrollXOffset], ["y", ["top", "bottom"], getScrollYOffset]];
var Rect = class {
  constructor(rect, element) {
    this.rect = void 0;
    this.width = void 0;
    this.height = void 0;
    this.top = void 0;
    this.bottom = void 0;
    this.right = void 0;
    this.left = void 0;
    const scrollableAncestors = getScrollableAncestors(element);
    const scrollOffsets = getScrollOffsets(scrollableAncestors);
    this.rect = {
      ...rect
    };
    this.width = rect.width;
    this.height = rect.height;
    for (const [axis, keys, getScrollOffset] of properties) {
      for (const key2 of keys) {
        Object.defineProperty(this, key2, {
          get: () => {
            const currentOffsets = getScrollOffset(scrollableAncestors);
            const scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;
            return this.rect[key2] + scrollOffsetsDeltla;
          },
          enumerable: true
        });
      }
    }
    Object.defineProperty(this, "rect", {
      enumerable: false
    });
  }
};
var Listeners = class {
  constructor(target) {
    this.target = void 0;
    this.listeners = [];
    this.removeAll = () => {
      this.listeners.forEach((listener) => {
        var _this$target;
        return (_this$target = this.target) == null ? void 0 : _this$target.removeEventListener(...listener);
      });
    };
    this.target = target;
  }
  add(eventName, handler, options) {
    var _this$target2;
    (_this$target2 = this.target) == null ? void 0 : _this$target2.addEventListener(eventName, handler, options);
    this.listeners.push([eventName, handler, options]);
  }
};
function getEventListenerTarget(target) {
  const {
    EventTarget
  } = getWindow2(target);
  return target instanceof EventTarget ? target : getOwnerDocument(target);
}
function hasExceededDistance(delta, measurement) {
  const dx = Math.abs(delta.x);
  const dy = Math.abs(delta.y);
  if (typeof measurement === "number") {
    return Math.sqrt(dx ** 2 + dy ** 2) > measurement;
  }
  if ("x" in measurement && "y" in measurement) {
    return dx > measurement.x && dy > measurement.y;
  }
  if ("x" in measurement) {
    return dx > measurement.x;
  }
  if ("y" in measurement) {
    return dy > measurement.y;
  }
  return false;
}
var EventName;
(function(EventName3) {
  EventName3["Click"] = "click";
  EventName3["DragStart"] = "dragstart";
  EventName3["Keydown"] = "keydown";
  EventName3["ContextMenu"] = "contextmenu";
  EventName3["Resize"] = "resize";
  EventName3["SelectionChange"] = "selectionchange";
  EventName3["VisibilityChange"] = "visibilitychange";
})(EventName || (EventName = {}));
function preventDefault(event) {
  event.preventDefault();
}
function stopPropagation(event) {
  event.stopPropagation();
}
var KeyboardCode;
(function(KeyboardCode2) {
  KeyboardCode2["Space"] = "Space";
  KeyboardCode2["Down"] = "ArrowDown";
  KeyboardCode2["Right"] = "ArrowRight";
  KeyboardCode2["Left"] = "ArrowLeft";
  KeyboardCode2["Up"] = "ArrowUp";
  KeyboardCode2["Esc"] = "Escape";
  KeyboardCode2["Enter"] = "Enter";
  KeyboardCode2["Tab"] = "Tab";
})(KeyboardCode || (KeyboardCode = {}));
var defaultKeyboardCodes = {
  start: [KeyboardCode.Space, KeyboardCode.Enter],
  cancel: [KeyboardCode.Esc],
  end: [KeyboardCode.Space, KeyboardCode.Enter, KeyboardCode.Tab]
};
var defaultKeyboardCoordinateGetter = (event, _ref) => {
  let {
    currentCoordinates
  } = _ref;
  switch (event.code) {
    case KeyboardCode.Right:
      return {
        ...currentCoordinates,
        x: currentCoordinates.x + 25
      };
    case KeyboardCode.Left:
      return {
        ...currentCoordinates,
        x: currentCoordinates.x - 25
      };
    case KeyboardCode.Down:
      return {
        ...currentCoordinates,
        y: currentCoordinates.y + 25
      };
    case KeyboardCode.Up:
      return {
        ...currentCoordinates,
        y: currentCoordinates.y - 25
      };
  }
  return void 0;
};
var KeyboardSensor = class {
  constructor(props2) {
    this.props = void 0;
    this.autoScrollEnabled = false;
    this.referenceCoordinates = void 0;
    this.listeners = void 0;
    this.windowListeners = void 0;
    this.props = props2;
    const {
      event: {
        target
      }
    } = props2;
    this.props = props2;
    this.listeners = new Listeners(getOwnerDocument(target));
    this.windowListeners = new Listeners(getWindow2(target));
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.attach();
  }
  attach() {
    this.handleStart();
    this.windowListeners.add(EventName.Resize, this.handleCancel);
    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));
  }
  handleStart() {
    const {
      activeNode,
      onStart
    } = this.props;
    const node = activeNode.node.current;
    if (node) {
      scrollIntoViewIfNeeded(node);
    }
    onStart(defaultCoordinates);
  }
  handleKeyDown(event) {
    if (isKeyboardEvent(event)) {
      const {
        active,
        context,
        options
      } = this.props;
      const {
        keyboardCodes = defaultKeyboardCodes,
        coordinateGetter = defaultKeyboardCoordinateGetter,
        scrollBehavior = "smooth"
      } = options;
      const {
        code
      } = event;
      if (keyboardCodes.end.includes(code)) {
        this.handleEnd(event);
        return;
      }
      if (keyboardCodes.cancel.includes(code)) {
        this.handleCancel(event);
        return;
      }
      const {
        collisionRect
      } = context.current;
      const currentCoordinates = collisionRect ? {
        x: collisionRect.left,
        y: collisionRect.top
      } : defaultCoordinates;
      if (!this.referenceCoordinates) {
        this.referenceCoordinates = currentCoordinates;
      }
      const newCoordinates = coordinateGetter(event, {
        active,
        context: context.current,
        currentCoordinates
      });
      if (newCoordinates) {
        const coordinatesDelta = subtract(newCoordinates, currentCoordinates);
        const scrollDelta = {
          x: 0,
          y: 0
        };
        const {
          scrollableAncestors
        } = context.current;
        for (const scrollContainer of scrollableAncestors) {
          const direction = event.code;
          const {
            isTop,
            isRight,
            isLeft,
            isBottom,
            maxScroll,
            minScroll
          } = getScrollPosition(scrollContainer);
          const scrollElementRect = getScrollElementRect(scrollContainer);
          const clampedCoordinates = {
            x: Math.min(direction === KeyboardCode.Right ? scrollElementRect.right - scrollElementRect.width / 2 : scrollElementRect.right, Math.max(direction === KeyboardCode.Right ? scrollElementRect.left : scrollElementRect.left + scrollElementRect.width / 2, newCoordinates.x)),
            y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))
          };
          const canScrollX = direction === KeyboardCode.Right && !isRight || direction === KeyboardCode.Left && !isLeft;
          const canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;
          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {
            const newScrollCoordinates = scrollContainer.scrollLeft + coordinatesDelta.x;
            const canScrollToNewCoordinates = direction === KeyboardCode.Right && newScrollCoordinates <= maxScroll.x || direction === KeyboardCode.Left && newScrollCoordinates >= minScroll.x;
            if (canScrollToNewCoordinates && !coordinatesDelta.y) {
              scrollContainer.scrollTo({
                left: newScrollCoordinates,
                behavior: scrollBehavior
              });
              return;
            }
            if (canScrollToNewCoordinates) {
              scrollDelta.x = scrollContainer.scrollLeft - newScrollCoordinates;
            } else {
              scrollDelta.x = direction === KeyboardCode.Right ? scrollContainer.scrollLeft - maxScroll.x : scrollContainer.scrollLeft - minScroll.x;
            }
            if (scrollDelta.x) {
              scrollContainer.scrollBy({
                left: -scrollDelta.x,
                behavior: scrollBehavior
              });
            }
            break;
          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {
            const newScrollCoordinates = scrollContainer.scrollTop + coordinatesDelta.y;
            const canScrollToNewCoordinates = direction === KeyboardCode.Down && newScrollCoordinates <= maxScroll.y || direction === KeyboardCode.Up && newScrollCoordinates >= minScroll.y;
            if (canScrollToNewCoordinates && !coordinatesDelta.x) {
              scrollContainer.scrollTo({
                top: newScrollCoordinates,
                behavior: scrollBehavior
              });
              return;
            }
            if (canScrollToNewCoordinates) {
              scrollDelta.y = scrollContainer.scrollTop - newScrollCoordinates;
            } else {
              scrollDelta.y = direction === KeyboardCode.Down ? scrollContainer.scrollTop - maxScroll.y : scrollContainer.scrollTop - minScroll.y;
            }
            if (scrollDelta.y) {
              scrollContainer.scrollBy({
                top: -scrollDelta.y,
                behavior: scrollBehavior
              });
            }
            break;
          }
        }
        this.handleMove(event, add2(subtract(newCoordinates, this.referenceCoordinates), scrollDelta));
      }
    }
  }
  handleMove(event, coordinates) {
    const {
      onMove
    } = this.props;
    event.preventDefault();
    onMove(coordinates);
  }
  handleEnd(event) {
    const {
      onEnd
    } = this.props;
    event.preventDefault();
    this.detach();
    onEnd();
  }
  handleCancel(event) {
    const {
      onCancel
    } = this.props;
    event.preventDefault();
    this.detach();
    onCancel();
  }
  detach() {
    this.listeners.removeAll();
    this.windowListeners.removeAll();
  }
};
KeyboardSensor.activators = [{
  eventName: "onKeyDown",
  handler: (event, _ref, _ref2) => {
    let {
      keyboardCodes = defaultKeyboardCodes,
      onActivation
    } = _ref;
    let {
      active
    } = _ref2;
    const {
      code
    } = event.nativeEvent;
    if (keyboardCodes.start.includes(code)) {
      const activator = active.activatorNode.current;
      if (activator && event.target !== activator) {
        return false;
      }
      event.preventDefault();
      onActivation == null ? void 0 : onActivation({
        event: event.nativeEvent
      });
      return true;
    }
    return false;
  }
}];
function isDistanceConstraint(constraint) {
  return Boolean(constraint && "distance" in constraint);
}
function isDelayConstraint(constraint) {
  return Boolean(constraint && "delay" in constraint);
}
var AbstractPointerSensor = class {
  constructor(props2, events2, listenerTarget) {
    var _getEventCoordinates;
    if (listenerTarget === void 0) {
      listenerTarget = getEventListenerTarget(props2.event.target);
    }
    this.props = void 0;
    this.events = void 0;
    this.autoScrollEnabled = true;
    this.document = void 0;
    this.activated = false;
    this.initialCoordinates = void 0;
    this.timeoutId = null;
    this.listeners = void 0;
    this.documentListeners = void 0;
    this.windowListeners = void 0;
    this.props = props2;
    this.events = events2;
    const {
      event
    } = props2;
    const {
      target
    } = event;
    this.props = props2;
    this.events = events2;
    this.document = getOwnerDocument(target);
    this.documentListeners = new Listeners(this.document);
    this.listeners = new Listeners(listenerTarget);
    this.windowListeners = new Listeners(getWindow2(target));
    this.initialCoordinates = (_getEventCoordinates = getEventCoordinates(event)) != null ? _getEventCoordinates : defaultCoordinates;
    this.handleStart = this.handleStart.bind(this);
    this.handleMove = this.handleMove.bind(this);
    this.handleEnd = this.handleEnd.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.handleKeydown = this.handleKeydown.bind(this);
    this.removeTextSelection = this.removeTextSelection.bind(this);
    this.attach();
  }
  attach() {
    const {
      events: events2,
      props: {
        options: {
          activationConstraint,
          bypassActivationConstraint
        }
      }
    } = this;
    this.listeners.add(events2.move.name, this.handleMove, {
      passive: false
    });
    this.listeners.add(events2.end.name, this.handleEnd);
    if (events2.cancel) {
      this.listeners.add(events2.cancel.name, this.handleCancel);
    }
    this.windowListeners.add(EventName.Resize, this.handleCancel);
    this.windowListeners.add(EventName.DragStart, preventDefault);
    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
    this.windowListeners.add(EventName.ContextMenu, preventDefault);
    this.documentListeners.add(EventName.Keydown, this.handleKeydown);
    if (activationConstraint) {
      if (bypassActivationConstraint != null && bypassActivationConstraint({
        event: this.props.event,
        activeNode: this.props.activeNode,
        options: this.props.options
      })) {
        return this.handleStart();
      }
      if (isDelayConstraint(activationConstraint)) {
        this.timeoutId = setTimeout(this.handleStart, activationConstraint.delay);
        this.handlePending(activationConstraint);
        return;
      }
      if (isDistanceConstraint(activationConstraint)) {
        this.handlePending(activationConstraint);
        return;
      }
    }
    this.handleStart();
  }
  detach() {
    this.listeners.removeAll();
    this.windowListeners.removeAll();
    setTimeout(this.documentListeners.removeAll, 50);
    if (this.timeoutId !== null) {
      clearTimeout(this.timeoutId);
      this.timeoutId = null;
    }
  }
  handlePending(constraint, offset) {
    const {
      active,
      onPending
    } = this.props;
    onPending(active, constraint, this.initialCoordinates, offset);
  }
  handleStart() {
    const {
      initialCoordinates
    } = this;
    const {
      onStart
    } = this.props;
    if (initialCoordinates) {
      this.activated = true;
      this.documentListeners.add(EventName.Click, stopPropagation, {
        capture: true
      });
      this.removeTextSelection();
      this.documentListeners.add(EventName.SelectionChange, this.removeTextSelection);
      onStart(initialCoordinates);
    }
  }
  handleMove(event) {
    var _getEventCoordinates2;
    const {
      activated: activated2,
      initialCoordinates,
      props: props2
    } = this;
    const {
      onMove,
      options: {
        activationConstraint
      }
    } = props2;
    if (!initialCoordinates) {
      return;
    }
    const coordinates = (_getEventCoordinates2 = getEventCoordinates(event)) != null ? _getEventCoordinates2 : defaultCoordinates;
    const delta = subtract(initialCoordinates, coordinates);
    if (!activated2 && activationConstraint) {
      if (isDistanceConstraint(activationConstraint)) {
        if (activationConstraint.tolerance != null && hasExceededDistance(delta, activationConstraint.tolerance)) {
          return this.handleCancel();
        }
        if (hasExceededDistance(delta, activationConstraint.distance)) {
          return this.handleStart();
        }
      }
      if (isDelayConstraint(activationConstraint)) {
        if (hasExceededDistance(delta, activationConstraint.tolerance)) {
          return this.handleCancel();
        }
      }
      this.handlePending(activationConstraint, delta);
      return;
    }
    if (event.cancelable) {
      event.preventDefault();
    }
    onMove(coordinates);
  }
  handleEnd() {
    const {
      onAbort,
      onEnd
    } = this.props;
    this.detach();
    if (!this.activated) {
      onAbort(this.props.active);
    }
    onEnd();
  }
  handleCancel() {
    const {
      onAbort,
      onCancel
    } = this.props;
    this.detach();
    if (!this.activated) {
      onAbort(this.props.active);
    }
    onCancel();
  }
  handleKeydown(event) {
    if (event.code === KeyboardCode.Esc) {
      this.handleCancel();
    }
  }
  removeTextSelection() {
    var _this$document$getSel;
    (_this$document$getSel = this.document.getSelection()) == null ? void 0 : _this$document$getSel.removeAllRanges();
  }
};
var events = {
  cancel: {
    name: "pointercancel"
  },
  move: {
    name: "pointermove"
  },
  end: {
    name: "pointerup"
  }
};
var PointerSensor = class extends AbstractPointerSensor {
  constructor(props2) {
    const {
      event
    } = props2;
    const listenerTarget = getOwnerDocument(event.target);
    super(props2, events, listenerTarget);
  }
};
PointerSensor.activators = [{
  eventName: "onPointerDown",
  handler: (_ref, _ref2) => {
    let {
      nativeEvent: event
    } = _ref;
    let {
      onActivation
    } = _ref2;
    if (!event.isPrimary || event.button !== 0) {
      return false;
    }
    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];
var events$1 = {
  move: {
    name: "mousemove"
  },
  end: {
    name: "mouseup"
  }
};
var MouseButton;
(function(MouseButton2) {
  MouseButton2[MouseButton2["RightClick"] = 2] = "RightClick";
})(MouseButton || (MouseButton = {}));
var MouseSensor = class extends AbstractPointerSensor {
  constructor(props2) {
    super(props2, events$1, getOwnerDocument(props2.event.target));
  }
};
MouseSensor.activators = [{
  eventName: "onMouseDown",
  handler: (_ref, _ref2) => {
    let {
      nativeEvent: event
    } = _ref;
    let {
      onActivation
    } = _ref2;
    if (event.button === MouseButton.RightClick) {
      return false;
    }
    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];
var events$2 = {
  cancel: {
    name: "touchcancel"
  },
  move: {
    name: "touchmove"
  },
  end: {
    name: "touchend"
  }
};
var TouchSensor = class extends AbstractPointerSensor {
  constructor(props2) {
    super(props2, events$2);
  }
  static setup() {
    window.addEventListener(events$2.move.name, noop4, {
      capture: false,
      passive: false
    });
    return function teardown() {
      window.removeEventListener(events$2.move.name, noop4);
    };
    function noop4() {
    }
  }
};
TouchSensor.activators = [{
  eventName: "onTouchStart",
  handler: (_ref, _ref2) => {
    let {
      nativeEvent: event
    } = _ref;
    let {
      onActivation
    } = _ref2;
    const {
      touches
    } = event;
    if (touches.length > 1) {
      return false;
    }
    onActivation == null ? void 0 : onActivation({
      event
    });
    return true;
  }
}];
var AutoScrollActivator;
(function(AutoScrollActivator2) {
  AutoScrollActivator2[AutoScrollActivator2["Pointer"] = 0] = "Pointer";
  AutoScrollActivator2[AutoScrollActivator2["DraggableRect"] = 1] = "DraggableRect";
})(AutoScrollActivator || (AutoScrollActivator = {}));
var TraversalOrder;
(function(TraversalOrder2) {
  TraversalOrder2[TraversalOrder2["TreeOrder"] = 0] = "TreeOrder";
  TraversalOrder2[TraversalOrder2["ReversedTreeOrder"] = 1] = "ReversedTreeOrder";
})(TraversalOrder || (TraversalOrder = {}));
function useAutoScroller(_ref) {
  let {
    acceleration,
    activator = AutoScrollActivator.Pointer,
    canScroll,
    draggingRect,
    enabled,
    interval = 5,
    order = TraversalOrder.TreeOrder,
    pointerCoordinates,
    scrollableAncestors,
    scrollableAncestorRects,
    delta,
    threshold
  } = _ref;
  const scrollIntent = useScrollIntent({
    delta,
    disabled: !enabled
  });
  const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();
  const scrollSpeed = (0, import_react339.useRef)({
    x: 0,
    y: 0
  });
  const scrollDirection = (0, import_react339.useRef)({
    x: 0,
    y: 0
  });
  const rect = (0, import_react339.useMemo)(() => {
    switch (activator) {
      case AutoScrollActivator.Pointer:
        return pointerCoordinates ? {
          top: pointerCoordinates.y,
          bottom: pointerCoordinates.y,
          left: pointerCoordinates.x,
          right: pointerCoordinates.x
        } : null;
      case AutoScrollActivator.DraggableRect:
        return draggingRect;
    }
  }, [activator, draggingRect, pointerCoordinates]);
  const scrollContainerRef = (0, import_react339.useRef)(null);
  const autoScroll = (0, import_react339.useCallback)(() => {
    const scrollContainer = scrollContainerRef.current;
    if (!scrollContainer) {
      return;
    }
    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;
    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;
    scrollContainer.scrollBy(scrollLeft, scrollTop);
  }, []);
  const sortedScrollableAncestors = (0, import_react339.useMemo)(() => order === TraversalOrder.TreeOrder ? [...scrollableAncestors].reverse() : scrollableAncestors, [order, scrollableAncestors]);
  (0, import_react339.useEffect)(
    () => {
      if (!enabled || !scrollableAncestors.length || !rect) {
        clearAutoScrollInterval();
        return;
      }
      for (const scrollContainer of sortedScrollableAncestors) {
        if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {
          continue;
        }
        const index = scrollableAncestors.indexOf(scrollContainer);
        const scrollContainerRect = scrollableAncestorRects[index];
        if (!scrollContainerRect) {
          continue;
        }
        const {
          direction,
          speed
        } = getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, rect, acceleration, threshold);
        for (const axis of ["x", "y"]) {
          if (!scrollIntent[axis][direction[axis]]) {
            speed[axis] = 0;
            direction[axis] = 0;
          }
        }
        if (speed.x > 0 || speed.y > 0) {
          clearAutoScrollInterval();
          scrollContainerRef.current = scrollContainer;
          setAutoScrollInterval(autoScroll, interval);
          scrollSpeed.current = speed;
          scrollDirection.current = direction;
          return;
        }
      }
      scrollSpeed.current = {
        x: 0,
        y: 0
      };
      scrollDirection.current = {
        x: 0,
        y: 0
      };
      clearAutoScrollInterval();
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      acceleration,
      autoScroll,
      canScroll,
      clearAutoScrollInterval,
      enabled,
      interval,
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(rect),
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(scrollIntent),
      setAutoScrollInterval,
      scrollableAncestors,
      sortedScrollableAncestors,
      scrollableAncestorRects,
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(threshold)
    ]
  );
}
var defaultScrollIntent = {
  x: {
    [Direction.Backward]: false,
    [Direction.Forward]: false
  },
  y: {
    [Direction.Backward]: false,
    [Direction.Forward]: false
  }
};
function useScrollIntent(_ref2) {
  let {
    delta,
    disabled
  } = _ref2;
  const previousDelta = usePrevious2(delta);
  return useLazyMemo((previousIntent) => {
    if (disabled || !previousDelta || !previousIntent) {
      return defaultScrollIntent;
    }
    const direction = {
      x: Math.sign(delta.x - previousDelta.x),
      y: Math.sign(delta.y - previousDelta.y)
    };
    return {
      x: {
        [Direction.Backward]: previousIntent.x[Direction.Backward] || direction.x === -1,
        [Direction.Forward]: previousIntent.x[Direction.Forward] || direction.x === 1
      },
      y: {
        [Direction.Backward]: previousIntent.y[Direction.Backward] || direction.y === -1,
        [Direction.Forward]: previousIntent.y[Direction.Forward] || direction.y === 1
      }
    };
  }, [disabled, delta, previousDelta]);
}
function useCachedNode(draggableNodes, id) {
  const draggableNode = id != null ? draggableNodes.get(id) : void 0;
  const node = draggableNode ? draggableNode.node.current : null;
  return useLazyMemo((cachedNode) => {
    var _ref;
    if (id == null) {
      return null;
    }
    return (_ref = node != null ? node : cachedNode) != null ? _ref : null;
  }, [node, id]);
}
function useCombineActivators(sensors, getSyntheticHandler) {
  return (0, import_react339.useMemo)(() => sensors.reduce((accumulator, sensor) => {
    const {
      sensor: Sensor
    } = sensor;
    const sensorActivators = Sensor.activators.map((activator) => ({
      eventName: activator.eventName,
      handler: getSyntheticHandler(activator.handler, sensor)
    }));
    return [...accumulator, ...sensorActivators];
  }, []), [sensors, getSyntheticHandler]);
}
var MeasuringStrategy;
(function(MeasuringStrategy2) {
  MeasuringStrategy2[MeasuringStrategy2["Always"] = 0] = "Always";
  MeasuringStrategy2[MeasuringStrategy2["BeforeDragging"] = 1] = "BeforeDragging";
  MeasuringStrategy2[MeasuringStrategy2["WhileDragging"] = 2] = "WhileDragging";
})(MeasuringStrategy || (MeasuringStrategy = {}));
var MeasuringFrequency;
(function(MeasuringFrequency2) {
  MeasuringFrequency2["Optimized"] = "optimized";
})(MeasuringFrequency || (MeasuringFrequency = {}));
var defaultValue3 = /* @__PURE__ */ new Map();
function useDroppableMeasuring(containers, _ref) {
  let {
    dragging,
    dependencies,
    config
  } = _ref;
  const [queue, setQueue] = (0, import_react339.useState)(null);
  const {
    frequency,
    measure,
    strategy
  } = config;
  const containersRef = (0, import_react339.useRef)(containers);
  const disabled = isDisabled();
  const disabledRef = useLatestValue(disabled);
  const measureDroppableContainers = (0, import_react339.useCallback)(function(ids2) {
    if (ids2 === void 0) {
      ids2 = [];
    }
    if (disabledRef.current) {
      return;
    }
    setQueue((value) => {
      if (value === null) {
        return ids2;
      }
      return value.concat(ids2.filter((id) => !value.includes(id)));
    });
  }, [disabledRef]);
  const timeoutId = (0, import_react339.useRef)(null);
  const droppableRects = useLazyMemo((previousValue) => {
    if (disabled && !dragging) {
      return defaultValue3;
    }
    if (!previousValue || previousValue === defaultValue3 || containersRef.current !== containers || queue != null) {
      const map3 = /* @__PURE__ */ new Map();
      for (let container of containers) {
        if (!container) {
          continue;
        }
        if (queue && queue.length > 0 && !queue.includes(container.id) && container.rect.current) {
          map3.set(container.id, container.rect.current);
          continue;
        }
        const node = container.node.current;
        const rect = node ? new Rect(measure(node), node) : null;
        container.rect.current = rect;
        if (rect) {
          map3.set(container.id, rect);
        }
      }
      return map3;
    }
    return previousValue;
  }, [containers, queue, dragging, disabled, measure]);
  (0, import_react339.useEffect)(() => {
    containersRef.current = containers;
  }, [containers]);
  (0, import_react339.useEffect)(
    () => {
      if (disabled) {
        return;
      }
      measureDroppableContainers();
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [dragging, disabled]
  );
  (0, import_react339.useEffect)(
    () => {
      if (queue && queue.length > 0) {
        setQueue(null);
      }
    },
    //eslint-disable-next-line react-hooks/exhaustive-deps
    [JSON.stringify(queue)]
  );
  (0, import_react339.useEffect)(
    () => {
      if (disabled || typeof frequency !== "number" || timeoutId.current !== null) {
        return;
      }
      timeoutId.current = setTimeout(() => {
        measureDroppableContainers();
        timeoutId.current = null;
      }, frequency);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [frequency, disabled, measureDroppableContainers, ...dependencies]
  );
  return {
    droppableRects,
    measureDroppableContainers,
    measuringScheduled: queue != null
  };
  function isDisabled() {
    switch (strategy) {
      case MeasuringStrategy.Always:
        return false;
      case MeasuringStrategy.BeforeDragging:
        return dragging;
      default:
        return !dragging;
    }
  }
}
function useInitialValue(value, computeFn) {
  return useLazyMemo((previousValue) => {
    if (!value) {
      return null;
    }
    if (previousValue) {
      return previousValue;
    }
    return typeof computeFn === "function" ? computeFn(value) : value;
  }, [computeFn, value]);
}
function useInitialRect(node, measure) {
  return useInitialValue(node, measure);
}
function useMutationObserver2(_ref) {
  let {
    callback,
    disabled
  } = _ref;
  const handleMutations = useEvent(callback);
  const mutationObserver = (0, import_react339.useMemo)(() => {
    if (disabled || typeof window === "undefined" || typeof window.MutationObserver === "undefined") {
      return void 0;
    }
    const {
      MutationObserver: MutationObserver2
    } = window;
    return new MutationObserver2(handleMutations);
  }, [handleMutations, disabled]);
  (0, import_react339.useEffect)(() => {
    return () => mutationObserver == null ? void 0 : mutationObserver.disconnect();
  }, [mutationObserver]);
  return mutationObserver;
}
function useResizeObserver2(_ref) {
  let {
    callback,
    disabled
  } = _ref;
  const handleResize = useEvent(callback);
  const resizeObserver = (0, import_react339.useMemo)(
    () => {
      if (disabled || typeof window === "undefined" || typeof window.ResizeObserver === "undefined") {
        return void 0;
      }
      const {
        ResizeObserver: ResizeObserver2
      } = window;
      return new ResizeObserver2(handleResize);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [disabled]
  );
  (0, import_react339.useEffect)(() => {
    return () => resizeObserver == null ? void 0 : resizeObserver.disconnect();
  }, [resizeObserver]);
  return resizeObserver;
}
function defaultMeasure(element) {
  return new Rect(getClientRect(element), element);
}
function useRect2(element, measure, fallbackRect) {
  if (measure === void 0) {
    measure = defaultMeasure;
  }
  const [rect, setRect] = (0, import_react339.useState)(null);
  function measureRect() {
    setRect((currentRect) => {
      if (!element) {
        return null;
      }
      if (element.isConnected === false) {
        var _ref;
        return (_ref = currentRect != null ? currentRect : fallbackRect) != null ? _ref : null;
      }
      const newRect = measure(element);
      if (JSON.stringify(currentRect) === JSON.stringify(newRect)) {
        return currentRect;
      }
      return newRect;
    });
  }
  const mutationObserver = useMutationObserver2({
    callback(records) {
      if (!element) {
        return;
      }
      for (const record of records) {
        const {
          type,
          target
        } = record;
        if (type === "childList" && target instanceof HTMLElement && target.contains(element)) {
          measureRect();
          break;
        }
      }
    }
  });
  const resizeObserver = useResizeObserver2({
    callback: measureRect
  });
  useIsomorphicLayoutEffect2(() => {
    measureRect();
    if (element) {
      resizeObserver == null ? void 0 : resizeObserver.observe(element);
      mutationObserver == null ? void 0 : mutationObserver.observe(document.body, {
        childList: true,
        subtree: true
      });
    } else {
      resizeObserver == null ? void 0 : resizeObserver.disconnect();
      mutationObserver == null ? void 0 : mutationObserver.disconnect();
    }
  }, [element]);
  return rect;
}
function useRectDelta(rect) {
  const initialRect = useInitialValue(rect);
  return getRectDelta(rect, initialRect);
}
var defaultValue$1 = [];
function useScrollableAncestors(node) {
  const previousNode = (0, import_react339.useRef)(node);
  const ancestors = useLazyMemo((previousValue) => {
    if (!node) {
      return defaultValue$1;
    }
    if (previousValue && previousValue !== defaultValue$1 && node && previousNode.current && node.parentNode === previousNode.current.parentNode) {
      return previousValue;
    }
    return getScrollableAncestors(node);
  }, [node]);
  (0, import_react339.useEffect)(() => {
    previousNode.current = node;
  }, [node]);
  return ancestors;
}
function useScrollOffsets(elements) {
  const [scrollCoordinates, setScrollCoordinates] = (0, import_react339.useState)(null);
  const prevElements = (0, import_react339.useRef)(elements);
  const handleScroll = (0, import_react339.useCallback)((event) => {
    const scrollingElement = getScrollableElement(event.target);
    if (!scrollingElement) {
      return;
    }
    setScrollCoordinates((scrollCoordinates2) => {
      if (!scrollCoordinates2) {
        return null;
      }
      scrollCoordinates2.set(scrollingElement, getScrollCoordinates(scrollingElement));
      return new Map(scrollCoordinates2);
    });
  }, []);
  (0, import_react339.useEffect)(() => {
    const previousElements = prevElements.current;
    if (elements !== previousElements) {
      cleanup(previousElements);
      const entries = elements.map((element) => {
        const scrollableElement = getScrollableElement(element);
        if (scrollableElement) {
          scrollableElement.addEventListener("scroll", handleScroll, {
            passive: true
          });
          return [scrollableElement, getScrollCoordinates(scrollableElement)];
        }
        return null;
      }).filter((entry) => entry != null);
      setScrollCoordinates(entries.length ? new Map(entries) : null);
      prevElements.current = elements;
    }
    return () => {
      cleanup(elements);
      cleanup(previousElements);
    };
    function cleanup(elements2) {
      elements2.forEach((element) => {
        const scrollableElement = getScrollableElement(element);
        scrollableElement == null ? void 0 : scrollableElement.removeEventListener("scroll", handleScroll);
      });
    }
  }, [handleScroll, elements]);
  return (0, import_react339.useMemo)(() => {
    if (elements.length) {
      return scrollCoordinates ? Array.from(scrollCoordinates.values()).reduce((acc, coordinates) => add2(acc, coordinates), defaultCoordinates) : getScrollOffsets(elements);
    }
    return defaultCoordinates;
  }, [elements, scrollCoordinates]);
}
function useScrollOffsetsDelta(scrollOffsets, dependencies) {
  if (dependencies === void 0) {
    dependencies = [];
  }
  const initialScrollOffsets = (0, import_react339.useRef)(null);
  (0, import_react339.useEffect)(
    () => {
      initialScrollOffsets.current = null;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    dependencies
  );
  (0, import_react339.useEffect)(() => {
    const hasScrollOffsets = scrollOffsets !== defaultCoordinates;
    if (hasScrollOffsets && !initialScrollOffsets.current) {
      initialScrollOffsets.current = scrollOffsets;
    }
    if (!hasScrollOffsets && initialScrollOffsets.current) {
      initialScrollOffsets.current = null;
    }
  }, [scrollOffsets]);
  return initialScrollOffsets.current ? subtract(scrollOffsets, initialScrollOffsets.current) : defaultCoordinates;
}
function useSensorSetup(sensors) {
  (0, import_react339.useEffect)(
    () => {
      if (!canUseDOM) {
        return;
      }
      const teardownFns = sensors.map((_ref) => {
        let {
          sensor
        } = _ref;
        return sensor.setup == null ? void 0 : sensor.setup();
      });
      return () => {
        for (const teardown of teardownFns) {
          teardown == null ? void 0 : teardown();
        }
      };
    },
    // TO-DO: Sensors length could theoretically change which would not be a valid dependency
    // eslint-disable-next-line react-hooks/exhaustive-deps
    sensors.map((_ref2) => {
      let {
        sensor
      } = _ref2;
      return sensor;
    })
  );
}
function useSyntheticListeners(listeners, id) {
  return (0, import_react339.useMemo)(() => {
    return listeners.reduce((acc, _ref) => {
      let {
        eventName,
        handler
      } = _ref;
      acc[eventName] = (event) => {
        handler(event, id);
      };
      return acc;
    }, {});
  }, [listeners, id]);
}
function useWindowRect(element) {
  return (0, import_react339.useMemo)(() => element ? getWindowClientRect(element) : null, [element]);
}
var defaultValue$2 = [];
function useRects(elements, measure) {
  if (measure === void 0) {
    measure = getClientRect;
  }
  const [firstElement] = elements;
  const windowRect = useWindowRect(firstElement ? getWindow2(firstElement) : null);
  const [rects, setRects] = (0, import_react339.useState)(defaultValue$2);
  function measureRects() {
    setRects(() => {
      if (!elements.length) {
        return defaultValue$2;
      }
      return elements.map((element) => isDocumentScrollingElement(element) ? windowRect : new Rect(measure(element), element));
    });
  }
  const resizeObserver = useResizeObserver2({
    callback: measureRects
  });
  useIsomorphicLayoutEffect2(() => {
    resizeObserver == null ? void 0 : resizeObserver.disconnect();
    measureRects();
    elements.forEach((element) => resizeObserver == null ? void 0 : resizeObserver.observe(element));
  }, [elements]);
  return rects;
}
function getMeasurableNode(node) {
  if (!node) {
    return null;
  }
  if (node.children.length > 1) {
    return node;
  }
  const firstChild = node.children[0];
  return isHTMLElement3(firstChild) ? firstChild : node;
}
function useDragOverlayMeasuring(_ref) {
  let {
    measure
  } = _ref;
  const [rect, setRect] = (0, import_react339.useState)(null);
  const handleResize = (0, import_react339.useCallback)((entries) => {
    for (const {
      target
    } of entries) {
      if (isHTMLElement3(target)) {
        setRect((rect2) => {
          const newRect = measure(target);
          return rect2 ? {
            ...rect2,
            width: newRect.width,
            height: newRect.height
          } : newRect;
        });
        break;
      }
    }
  }, [measure]);
  const resizeObserver = useResizeObserver2({
    callback: handleResize
  });
  const handleNodeChange = (0, import_react339.useCallback)((element) => {
    const node = getMeasurableNode(element);
    resizeObserver == null ? void 0 : resizeObserver.disconnect();
    if (node) {
      resizeObserver == null ? void 0 : resizeObserver.observe(node);
    }
    setRect(node ? measure(node) : null);
  }, [measure, resizeObserver]);
  const [nodeRef, setRef] = useNodeRef(handleNodeChange);
  return (0, import_react339.useMemo)(() => ({
    nodeRef,
    rect,
    setRef
  }), [rect, nodeRef, setRef]);
}
var defaultSensors = [{
  sensor: PointerSensor,
  options: {}
}, {
  sensor: KeyboardSensor,
  options: {}
}];
var defaultData = {
  current: {}
};
var defaultMeasuringConfiguration = {
  draggable: {
    measure: getTransformAgnosticClientRect
  },
  droppable: {
    measure: getTransformAgnosticClientRect,
    strategy: MeasuringStrategy.WhileDragging,
    frequency: MeasuringFrequency.Optimized
  },
  dragOverlay: {
    measure: getClientRect
  }
};
var DroppableContainersMap = class extends Map {
  get(id) {
    var _super$get;
    return id != null ? (_super$get = super.get(id)) != null ? _super$get : void 0 : void 0;
  }
  toArray() {
    return Array.from(this.values());
  }
  getEnabled() {
    return this.toArray().filter((_ref) => {
      let {
        disabled
      } = _ref;
      return !disabled;
    });
  }
  getNodeFor(id) {
    var _this$get$node$curren, _this$get;
    return (_this$get$node$curren = (_this$get = this.get(id)) == null ? void 0 : _this$get.node.current) != null ? _this$get$node$curren : void 0;
  }
};
var defaultPublicContext = {
  activatorEvent: null,
  active: null,
  activeNode: null,
  activeNodeRect: null,
  collisions: null,
  containerNodeRect: null,
  draggableNodes: /* @__PURE__ */ new Map(),
  droppableRects: /* @__PURE__ */ new Map(),
  droppableContainers: new DroppableContainersMap(),
  over: null,
  dragOverlay: {
    nodeRef: {
      current: null
    },
    rect: null,
    setRef: noop2
  },
  scrollableAncestors: [],
  scrollableAncestorRects: [],
  measuringConfiguration: defaultMeasuringConfiguration,
  measureDroppableContainers: noop2,
  windowRect: null,
  measuringScheduled: false
};
var defaultInternalContext = {
  activatorEvent: null,
  activators: [],
  active: null,
  activeNodeRect: null,
  ariaDescribedById: {
    draggable: ""
  },
  dispatch: noop2,
  draggableNodes: /* @__PURE__ */ new Map(),
  over: null,
  measureDroppableContainers: noop2
};
var InternalContext = (0, import_react339.createContext)(defaultInternalContext);
var PublicContext = (0, import_react339.createContext)(defaultPublicContext);
function getInitialState() {
  return {
    draggable: {
      active: null,
      initialCoordinates: {
        x: 0,
        y: 0
      },
      nodes: /* @__PURE__ */ new Map(),
      translate: {
        x: 0,
        y: 0
      }
    },
    droppable: {
      containers: new DroppableContainersMap()
    }
  };
}
function reducer(state, action) {
  switch (action.type) {
    case Action.DragStart:
      return {
        ...state,
        draggable: {
          ...state.draggable,
          initialCoordinates: action.initialCoordinates,
          active: action.active
        }
      };
    case Action.DragMove:
      if (state.draggable.active == null) {
        return state;
      }
      return {
        ...state,
        draggable: {
          ...state.draggable,
          translate: {
            x: action.coordinates.x - state.draggable.initialCoordinates.x,
            y: action.coordinates.y - state.draggable.initialCoordinates.y
          }
        }
      };
    case Action.DragEnd:
    case Action.DragCancel:
      return {
        ...state,
        draggable: {
          ...state.draggable,
          active: null,
          initialCoordinates: {
            x: 0,
            y: 0
          },
          translate: {
            x: 0,
            y: 0
          }
        }
      };
    case Action.RegisterDroppable: {
      const {
        element
      } = action;
      const {
        id
      } = element;
      const containers = new DroppableContainersMap(state.droppable.containers);
      containers.set(id, element);
      return {
        ...state,
        droppable: {
          ...state.droppable,
          containers
        }
      };
    }
    case Action.SetDroppableDisabled: {
      const {
        id,
        key: key2,
        disabled
      } = action;
      const element = state.droppable.containers.get(id);
      if (!element || key2 !== element.key) {
        return state;
      }
      const containers = new DroppableContainersMap(state.droppable.containers);
      containers.set(id, {
        ...element,
        disabled
      });
      return {
        ...state,
        droppable: {
          ...state.droppable,
          containers
        }
      };
    }
    case Action.UnregisterDroppable: {
      const {
        id,
        key: key2
      } = action;
      const element = state.droppable.containers.get(id);
      if (!element || key2 !== element.key) {
        return state;
      }
      const containers = new DroppableContainersMap(state.droppable.containers);
      containers.delete(id);
      return {
        ...state,
        droppable: {
          ...state.droppable,
          containers
        }
      };
    }
    default: {
      return state;
    }
  }
}
function RestoreFocus(_ref) {
  let {
    disabled
  } = _ref;
  const {
    active,
    activatorEvent,
    draggableNodes
  } = (0, import_react339.useContext)(InternalContext);
  const previousActivatorEvent = usePrevious2(activatorEvent);
  const previousActiveId = usePrevious2(active == null ? void 0 : active.id);
  (0, import_react339.useEffect)(() => {
    if (disabled) {
      return;
    }
    if (!activatorEvent && previousActivatorEvent && previousActiveId != null) {
      if (!isKeyboardEvent(previousActivatorEvent)) {
        return;
      }
      if (document.activeElement === previousActivatorEvent.target) {
        return;
      }
      const draggableNode = draggableNodes.get(previousActiveId);
      if (!draggableNode) {
        return;
      }
      const {
        activatorNode,
        node
      } = draggableNode;
      if (!activatorNode.current && !node.current) {
        return;
      }
      requestAnimationFrame(() => {
        for (const element of [activatorNode.current, node.current]) {
          if (!element) {
            continue;
          }
          const focusableNode = findFirstFocusableNode(element);
          if (focusableNode) {
            focusableNode.focus();
            break;
          }
        }
      });
    }
  }, [activatorEvent, disabled, draggableNodes, previousActiveId, previousActivatorEvent]);
  return null;
}
function applyModifiers(modifiers, _ref) {
  let {
    transform,
    ...args
  } = _ref;
  return modifiers != null && modifiers.length ? modifiers.reduce((accumulator, modifier) => {
    return modifier({
      transform: accumulator,
      ...args
    });
  }, transform) : transform;
}
function useMeasuringConfiguration(config) {
  return (0, import_react339.useMemo)(
    () => ({
      draggable: {
        ...defaultMeasuringConfiguration.draggable,
        ...config == null ? void 0 : config.draggable
      },
      droppable: {
        ...defaultMeasuringConfiguration.droppable,
        ...config == null ? void 0 : config.droppable
      },
      dragOverlay: {
        ...defaultMeasuringConfiguration.dragOverlay,
        ...config == null ? void 0 : config.dragOverlay
      }
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [config == null ? void 0 : config.draggable, config == null ? void 0 : config.droppable, config == null ? void 0 : config.dragOverlay]
  );
}
function useLayoutShiftScrollCompensation(_ref) {
  let {
    activeNode,
    measure,
    initialRect,
    config = true
  } = _ref;
  const initialized = (0, import_react339.useRef)(false);
  const {
    x: x3,
    y: y4
  } = typeof config === "boolean" ? {
    x: config,
    y: config
  } : config;
  useIsomorphicLayoutEffect2(() => {
    const disabled = !x3 && !y4;
    if (disabled || !activeNode) {
      initialized.current = false;
      return;
    }
    if (initialized.current || !initialRect) {
      return;
    }
    const node = activeNode == null ? void 0 : activeNode.node.current;
    if (!node || node.isConnected === false) {
      return;
    }
    const rect = measure(node);
    const rectDelta = getRectDelta(rect, initialRect);
    if (!x3) {
      rectDelta.x = 0;
    }
    if (!y4) {
      rectDelta.y = 0;
    }
    initialized.current = true;
    if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {
      const firstScrollableAncestor = getFirstScrollableAncestor(node);
      if (firstScrollableAncestor) {
        firstScrollableAncestor.scrollBy({
          top: rectDelta.y,
          left: rectDelta.x
        });
      }
    }
  }, [activeNode, x3, y4, initialRect, measure]);
}
var ActiveDraggableContext = (0, import_react339.createContext)({
  ...defaultCoordinates,
  scaleX: 1,
  scaleY: 1
});
var Status;
(function(Status2) {
  Status2[Status2["Uninitialized"] = 0] = "Uninitialized";
  Status2[Status2["Initializing"] = 1] = "Initializing";
  Status2[Status2["Initialized"] = 2] = "Initialized";
})(Status || (Status = {}));
var DndContext = (0, import_react339.memo)(function DndContext2(_ref) {
  var _sensorContext$curren, _dragOverlay$nodeRef$, _dragOverlay$rect, _over$rect;
  let {
    id,
    accessibility,
    autoScroll = true,
    children: children2,
    sensors = defaultSensors,
    collisionDetection = rectIntersection,
    measuring,
    modifiers,
    ...props2
  } = _ref;
  const store = (0, import_react339.useReducer)(reducer, void 0, getInitialState);
  const [state, dispatch] = store;
  const [dispatchMonitorEvent, registerMonitorListener] = useDndMonitorProvider();
  const [status, setStatus] = (0, import_react339.useState)(Status.Uninitialized);
  const isInitialized = status === Status.Initialized;
  const {
    draggable: {
      active: activeId,
      nodes: draggableNodes,
      translate
    },
    droppable: {
      containers: droppableContainers
    }
  } = state;
  const node = activeId != null ? draggableNodes.get(activeId) : null;
  const activeRects = (0, import_react339.useRef)({
    initial: null,
    translated: null
  });
  const active = (0, import_react339.useMemo)(() => {
    var _node$data;
    return activeId != null ? {
      id: activeId,
      // It's possible for the active node to unmount while dragging
      data: (_node$data = node == null ? void 0 : node.data) != null ? _node$data : defaultData,
      rect: activeRects
    } : null;
  }, [activeId, node]);
  const activeRef = (0, import_react339.useRef)(null);
  const [activeSensor, setActiveSensor] = (0, import_react339.useState)(null);
  const [activatorEvent, setActivatorEvent] = (0, import_react339.useState)(null);
  const latestProps = useLatestValue(props2, Object.values(props2));
  const draggableDescribedById = useUniqueId2("DndDescribedBy", id);
  const enabledDroppableContainers = (0, import_react339.useMemo)(() => droppableContainers.getEnabled(), [droppableContainers]);
  const measuringConfiguration = useMeasuringConfiguration(measuring);
  const {
    droppableRects,
    measureDroppableContainers,
    measuringScheduled
  } = useDroppableMeasuring(enabledDroppableContainers, {
    dragging: isInitialized,
    dependencies: [translate.x, translate.y],
    config: measuringConfiguration.droppable
  });
  const activeNode = useCachedNode(draggableNodes, activeId);
  const activationCoordinates = (0, import_react339.useMemo)(() => activatorEvent ? getEventCoordinates(activatorEvent) : null, [activatorEvent]);
  const autoScrollOptions = getAutoScrollerOptions();
  const initialActiveNodeRect = useInitialRect(activeNode, measuringConfiguration.draggable.measure);
  useLayoutShiftScrollCompensation({
    activeNode: activeId != null ? draggableNodes.get(activeId) : null,
    config: autoScrollOptions.layoutShiftCompensation,
    initialRect: initialActiveNodeRect,
    measure: measuringConfiguration.draggable.measure
  });
  const activeNodeRect = useRect2(activeNode, measuringConfiguration.draggable.measure, initialActiveNodeRect);
  const containerNodeRect = useRect2(activeNode ? activeNode.parentElement : null);
  const sensorContext = (0, import_react339.useRef)({
    activatorEvent: null,
    active: null,
    activeNode,
    collisionRect: null,
    collisions: null,
    droppableRects,
    draggableNodes,
    draggingNode: null,
    draggingNodeRect: null,
    droppableContainers,
    over: null,
    scrollableAncestors: [],
    scrollAdjustedTranslate: null
  });
  const overNode = droppableContainers.getNodeFor((_sensorContext$curren = sensorContext.current.over) == null ? void 0 : _sensorContext$curren.id);
  const dragOverlay = useDragOverlayMeasuring({
    measure: measuringConfiguration.dragOverlay.measure
  });
  const draggingNode = (_dragOverlay$nodeRef$ = dragOverlay.nodeRef.current) != null ? _dragOverlay$nodeRef$ : activeNode;
  const draggingNodeRect = isInitialized ? (_dragOverlay$rect = dragOverlay.rect) != null ? _dragOverlay$rect : activeNodeRect : null;
  const usesDragOverlay = Boolean(dragOverlay.nodeRef.current && dragOverlay.rect);
  const nodeRectDelta = useRectDelta(usesDragOverlay ? null : activeNodeRect);
  const windowRect = useWindowRect(draggingNode ? getWindow2(draggingNode) : null);
  const scrollableAncestors = useScrollableAncestors(isInitialized ? overNode != null ? overNode : activeNode : null);
  const scrollableAncestorRects = useRects(scrollableAncestors);
  const modifiedTranslate = applyModifiers(modifiers, {
    transform: {
      x: translate.x - nodeRectDelta.x,
      y: translate.y - nodeRectDelta.y,
      scaleX: 1,
      scaleY: 1
    },
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggingNodeRect,
    over: sensorContext.current.over,
    overlayNodeRect: dragOverlay.rect,
    scrollableAncestors,
    scrollableAncestorRects,
    windowRect
  });
  const pointerCoordinates = activationCoordinates ? add2(activationCoordinates, translate) : null;
  const scrollOffsets = useScrollOffsets(scrollableAncestors);
  const scrollAdjustment = useScrollOffsetsDelta(scrollOffsets);
  const activeNodeScrollDelta = useScrollOffsetsDelta(scrollOffsets, [activeNodeRect]);
  const scrollAdjustedTranslate = add2(modifiedTranslate, scrollAdjustment);
  const collisionRect = draggingNodeRect ? getAdjustedRect(draggingNodeRect, modifiedTranslate) : null;
  const collisions = active && collisionRect ? collisionDetection({
    active,
    collisionRect,
    droppableRects,
    droppableContainers: enabledDroppableContainers,
    pointerCoordinates
  }) : null;
  const overId = getFirstCollision(collisions, "id");
  const [over, setOver] = (0, import_react339.useState)(null);
  const appliedTranslate = usesDragOverlay ? modifiedTranslate : add2(modifiedTranslate, activeNodeScrollDelta);
  const transform = adjustScale(appliedTranslate, (_over$rect = over == null ? void 0 : over.rect) != null ? _over$rect : null, activeNodeRect);
  const activeSensorRef = (0, import_react339.useRef)(null);
  const instantiateSensor = (0, import_react339.useCallback)(
    (event, _ref2) => {
      let {
        sensor: Sensor,
        options
      } = _ref2;
      if (activeRef.current == null) {
        return;
      }
      const activeNode2 = draggableNodes.get(activeRef.current);
      if (!activeNode2) {
        return;
      }
      const activatorEvent2 = event.nativeEvent;
      const sensorInstance = new Sensor({
        active: activeRef.current,
        activeNode: activeNode2,
        event: activatorEvent2,
        options,
        // Sensors need to be instantiated with refs for arguments that change over time
        // otherwise they are frozen in time with the stale arguments
        context: sensorContext,
        onAbort(id2) {
          const draggableNode = draggableNodes.get(id2);
          if (!draggableNode) {
            return;
          }
          const {
            onDragAbort
          } = latestProps.current;
          const event2 = {
            id: id2
          };
          onDragAbort == null ? void 0 : onDragAbort(event2);
          dispatchMonitorEvent({
            type: "onDragAbort",
            event: event2
          });
        },
        onPending(id2, constraint, initialCoordinates, offset) {
          const draggableNode = draggableNodes.get(id2);
          if (!draggableNode) {
            return;
          }
          const {
            onDragPending
          } = latestProps.current;
          const event2 = {
            id: id2,
            constraint,
            initialCoordinates,
            offset
          };
          onDragPending == null ? void 0 : onDragPending(event2);
          dispatchMonitorEvent({
            type: "onDragPending",
            event: event2
          });
        },
        onStart(initialCoordinates) {
          const id2 = activeRef.current;
          if (id2 == null) {
            return;
          }
          const draggableNode = draggableNodes.get(id2);
          if (!draggableNode) {
            return;
          }
          const {
            onDragStart
          } = latestProps.current;
          const event2 = {
            activatorEvent: activatorEvent2,
            active: {
              id: id2,
              data: draggableNode.data,
              rect: activeRects
            }
          };
          (0, import_react_dom9.unstable_batchedUpdates)(() => {
            onDragStart == null ? void 0 : onDragStart(event2);
            setStatus(Status.Initializing);
            dispatch({
              type: Action.DragStart,
              initialCoordinates,
              active: id2
            });
            dispatchMonitorEvent({
              type: "onDragStart",
              event: event2
            });
            setActiveSensor(activeSensorRef.current);
            setActivatorEvent(activatorEvent2);
          });
        },
        onMove(coordinates) {
          dispatch({
            type: Action.DragMove,
            coordinates
          });
        },
        onEnd: createHandler(Action.DragEnd),
        onCancel: createHandler(Action.DragCancel)
      });
      activeSensorRef.current = sensorInstance;
      function createHandler(type) {
        return async function handler() {
          const {
            active: active2,
            collisions: collisions2,
            over: over2,
            scrollAdjustedTranslate: scrollAdjustedTranslate2
          } = sensorContext.current;
          let event2 = null;
          if (active2 && scrollAdjustedTranslate2) {
            const {
              cancelDrop
            } = latestProps.current;
            event2 = {
              activatorEvent: activatorEvent2,
              active: active2,
              collisions: collisions2,
              delta: scrollAdjustedTranslate2,
              over: over2
            };
            if (type === Action.DragEnd && typeof cancelDrop === "function") {
              const shouldCancel = await Promise.resolve(cancelDrop(event2));
              if (shouldCancel) {
                type = Action.DragCancel;
              }
            }
          }
          activeRef.current = null;
          (0, import_react_dom9.unstable_batchedUpdates)(() => {
            dispatch({
              type
            });
            setStatus(Status.Uninitialized);
            setOver(null);
            setActiveSensor(null);
            setActivatorEvent(null);
            activeSensorRef.current = null;
            const eventName = type === Action.DragEnd ? "onDragEnd" : "onDragCancel";
            if (event2) {
              const handler2 = latestProps.current[eventName];
              handler2 == null ? void 0 : handler2(event2);
              dispatchMonitorEvent({
                type: eventName,
                event: event2
              });
            }
          });
        };
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [draggableNodes]
  );
  const bindActivatorToSensorInstantiator = (0, import_react339.useCallback)((handler, sensor) => {
    return (event, active2) => {
      const nativeEvent = event.nativeEvent;
      const activeDraggableNode = draggableNodes.get(active2);
      if (
        // Another sensor is already instantiating
        activeRef.current !== null || // No active draggable
        !activeDraggableNode || // Event has already been captured
        nativeEvent.dndKit || nativeEvent.defaultPrevented
      ) {
        return;
      }
      const activationContext = {
        active: activeDraggableNode
      };
      const shouldActivate = handler(event, sensor.options, activationContext);
      if (shouldActivate === true) {
        nativeEvent.dndKit = {
          capturedBy: sensor.sensor
        };
        activeRef.current = active2;
        instantiateSensor(event, sensor);
      }
    };
  }, [draggableNodes, instantiateSensor]);
  const activators = useCombineActivators(sensors, bindActivatorToSensorInstantiator);
  useSensorSetup(sensors);
  useIsomorphicLayoutEffect2(() => {
    if (activeNodeRect && status === Status.Initializing) {
      setStatus(Status.Initialized);
    }
  }, [activeNodeRect, status]);
  (0, import_react339.useEffect)(
    () => {
      const {
        onDragMove
      } = latestProps.current;
      const {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        over: over2
      } = sensorContext.current;
      if (!active2 || !activatorEvent2) {
        return;
      }
      const event = {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        delta: {
          x: scrollAdjustedTranslate.x,
          y: scrollAdjustedTranslate.y
        },
        over: over2
      };
      (0, import_react_dom9.unstable_batchedUpdates)(() => {
        onDragMove == null ? void 0 : onDragMove(event);
        dispatchMonitorEvent({
          type: "onDragMove",
          event
        });
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]
  );
  (0, import_react339.useEffect)(
    () => {
      const {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        droppableContainers: droppableContainers2,
        scrollAdjustedTranslate: scrollAdjustedTranslate2
      } = sensorContext.current;
      if (!active2 || activeRef.current == null || !activatorEvent2 || !scrollAdjustedTranslate2) {
        return;
      }
      const {
        onDragOver
      } = latestProps.current;
      const overContainer = droppableContainers2.get(overId);
      const over2 = overContainer && overContainer.rect.current ? {
        id: overContainer.id,
        rect: overContainer.rect.current,
        data: overContainer.data,
        disabled: overContainer.disabled
      } : null;
      const event = {
        active: active2,
        activatorEvent: activatorEvent2,
        collisions: collisions2,
        delta: {
          x: scrollAdjustedTranslate2.x,
          y: scrollAdjustedTranslate2.y
        },
        over: over2
      };
      (0, import_react_dom9.unstable_batchedUpdates)(() => {
        setOver(over2);
        onDragOver == null ? void 0 : onDragOver(event);
        dispatchMonitorEvent({
          type: "onDragOver",
          event
        });
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [overId]
  );
  useIsomorphicLayoutEffect2(() => {
    sensorContext.current = {
      activatorEvent,
      active,
      activeNode,
      collisionRect,
      collisions,
      droppableRects,
      draggableNodes,
      draggingNode,
      draggingNodeRect,
      droppableContainers,
      over,
      scrollableAncestors,
      scrollAdjustedTranslate
    };
    activeRects.current = {
      initial: draggingNodeRect,
      translated: collisionRect
    };
  }, [active, activeNode, collisions, collisionRect, draggableNodes, draggingNode, draggingNodeRect, droppableRects, droppableContainers, over, scrollableAncestors, scrollAdjustedTranslate]);
  useAutoScroller({
    ...autoScrollOptions,
    delta: translate,
    draggingRect: collisionRect,
    pointerCoordinates,
    scrollableAncestors,
    scrollableAncestorRects
  });
  const publicContext = (0, import_react339.useMemo)(() => {
    const context = {
      active,
      activeNode,
      activeNodeRect,
      activatorEvent,
      collisions,
      containerNodeRect,
      dragOverlay,
      draggableNodes,
      droppableContainers,
      droppableRects,
      over,
      measureDroppableContainers,
      scrollableAncestors,
      scrollableAncestorRects,
      measuringConfiguration,
      measuringScheduled,
      windowRect
    };
    return context;
  }, [active, activeNode, activeNodeRect, activatorEvent, collisions, containerNodeRect, dragOverlay, draggableNodes, droppableContainers, droppableRects, over, measureDroppableContainers, scrollableAncestors, scrollableAncestorRects, measuringConfiguration, measuringScheduled, windowRect]);
  const internalContext = (0, import_react339.useMemo)(() => {
    const context = {
      activatorEvent,
      activators,
      active,
      activeNodeRect,
      ariaDescribedById: {
        draggable: draggableDescribedById
      },
      dispatch,
      draggableNodes,
      over,
      measureDroppableContainers
    };
    return context;
  }, [activatorEvent, activators, active, activeNodeRect, dispatch, draggableDescribedById, draggableNodes, over, measureDroppableContainers]);
  return import_react339.default.createElement(DndMonitorContext.Provider, {
    value: registerMonitorListener
  }, import_react339.default.createElement(InternalContext.Provider, {
    value: internalContext
  }, import_react339.default.createElement(PublicContext.Provider, {
    value: publicContext
  }, import_react339.default.createElement(ActiveDraggableContext.Provider, {
    value: transform
  }, children2)), import_react339.default.createElement(RestoreFocus, {
    disabled: (accessibility == null ? void 0 : accessibility.restoreFocus) === false
  })), import_react339.default.createElement(Accessibility, {
    ...accessibility,
    hiddenTextDescribedById: draggableDescribedById
  }));
  function getAutoScrollerOptions() {
    const activeSensorDisablesAutoscroll = (activeSensor == null ? void 0 : activeSensor.autoScrollEnabled) === false;
    const autoScrollGloballyDisabled = typeof autoScroll === "object" ? autoScroll.enabled === false : autoScroll === false;
    const enabled = isInitialized && !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;
    if (typeof autoScroll === "object") {
      return {
        ...autoScroll,
        enabled
      };
    }
    return {
      enabled
    };
  }
});
var NullContext = (0, import_react339.createContext)(null);
var defaultRole = "button";
var ID_PREFIX = "Draggable";
function useDraggable(_ref) {
  let {
    id,
    data,
    disabled = false,
    attributes
  } = _ref;
  const key2 = useUniqueId2(ID_PREFIX);
  const {
    activators,
    activatorEvent,
    active,
    activeNodeRect,
    ariaDescribedById,
    draggableNodes,
    over
  } = (0, import_react339.useContext)(InternalContext);
  const {
    role = defaultRole,
    roleDescription = "draggable",
    tabIndex = 0
  } = attributes != null ? attributes : {};
  const isDragging = (active == null ? void 0 : active.id) === id;
  const transform = (0, import_react339.useContext)(isDragging ? ActiveDraggableContext : NullContext);
  const [node, setNodeRef] = useNodeRef();
  const [activatorNode, setActivatorNodeRef] = useNodeRef();
  const listeners = useSyntheticListeners(activators, id);
  const dataRef = useLatestValue(data);
  useIsomorphicLayoutEffect2(
    () => {
      draggableNodes.set(id, {
        id,
        key: key2,
        node,
        activatorNode,
        data: dataRef
      });
      return () => {
        const node2 = draggableNodes.get(id);
        if (node2 && node2.key === key2) {
          draggableNodes.delete(id);
        }
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [draggableNodes, id]
  );
  const memoizedAttributes = (0, import_react339.useMemo)(() => ({
    role,
    tabIndex,
    "aria-disabled": disabled,
    "aria-pressed": isDragging && role === defaultRole ? true : void 0,
    "aria-roledescription": roleDescription,
    "aria-describedby": ariaDescribedById.draggable
  }), [disabled, role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]);
  return {
    active,
    activatorEvent,
    activeNodeRect,
    attributes: memoizedAttributes,
    isDragging,
    listeners: disabled ? void 0 : listeners,
    node,
    over,
    setNodeRef,
    setActivatorNodeRef,
    transform
  };
}
function useDndContext() {
  return (0, import_react339.useContext)(PublicContext);
}
var ID_PREFIX$1 = "Droppable";
var defaultResizeObserverConfig = {
  timeout: 25
};
function useDroppable(_ref) {
  let {
    data,
    disabled = false,
    id,
    resizeObserverConfig
  } = _ref;
  const key2 = useUniqueId2(ID_PREFIX$1);
  const {
    active,
    dispatch,
    over,
    measureDroppableContainers
  } = (0, import_react339.useContext)(InternalContext);
  const previous = (0, import_react339.useRef)({
    disabled
  });
  const resizeObserverConnected = (0, import_react339.useRef)(false);
  const rect = (0, import_react339.useRef)(null);
  const callbackId = (0, import_react339.useRef)(null);
  const {
    disabled: resizeObserverDisabled,
    updateMeasurementsFor,
    timeout: resizeObserverTimeout
  } = {
    ...defaultResizeObserverConfig,
    ...resizeObserverConfig
  };
  const ids2 = useLatestValue(updateMeasurementsFor != null ? updateMeasurementsFor : id);
  const handleResize = (0, import_react339.useCallback)(
    () => {
      if (!resizeObserverConnected.current) {
        resizeObserverConnected.current = true;
        return;
      }
      if (callbackId.current != null) {
        clearTimeout(callbackId.current);
      }
      callbackId.current = setTimeout(() => {
        measureDroppableContainers(Array.isArray(ids2.current) ? ids2.current : [ids2.current]);
        callbackId.current = null;
      }, resizeObserverTimeout);
    },
    //eslint-disable-next-line react-hooks/exhaustive-deps
    [resizeObserverTimeout]
  );
  const resizeObserver = useResizeObserver2({
    callback: handleResize,
    disabled: resizeObserverDisabled || !active
  });
  const handleNodeChange = (0, import_react339.useCallback)((newElement, previousElement) => {
    if (!resizeObserver) {
      return;
    }
    if (previousElement) {
      resizeObserver.unobserve(previousElement);
      resizeObserverConnected.current = false;
    }
    if (newElement) {
      resizeObserver.observe(newElement);
    }
  }, [resizeObserver]);
  const [nodeRef, setNodeRef] = useNodeRef(handleNodeChange);
  const dataRef = useLatestValue(data);
  (0, import_react339.useEffect)(() => {
    if (!resizeObserver || !nodeRef.current) {
      return;
    }
    resizeObserver.disconnect();
    resizeObserverConnected.current = false;
    resizeObserver.observe(nodeRef.current);
  }, [nodeRef, resizeObserver]);
  (0, import_react339.useEffect)(
    () => {
      dispatch({
        type: Action.RegisterDroppable,
        element: {
          id,
          key: key2,
          disabled,
          node: nodeRef,
          rect,
          data: dataRef
        }
      });
      return () => dispatch({
        type: Action.UnregisterDroppable,
        key: key2,
        id
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [id]
  );
  (0, import_react339.useEffect)(() => {
    if (disabled !== previous.current.disabled) {
      dispatch({
        type: Action.SetDroppableDisabled,
        id,
        key: key2,
        disabled
      });
      previous.current.disabled = disabled;
    }
  }, [id, key2, disabled, dispatch]);
  return {
    active,
    rect,
    isOver: (over == null ? void 0 : over.id) === id,
    node: nodeRef,
    over,
    setNodeRef
  };
}
function AnimationManager(_ref) {
  let {
    animation,
    children: children2
  } = _ref;
  const [clonedChildren, setClonedChildren] = (0, import_react339.useState)(null);
  const [element, setElement] = (0, import_react339.useState)(null);
  const previousChildren = usePrevious2(children2);
  if (!children2 && !clonedChildren && previousChildren) {
    setClonedChildren(previousChildren);
  }
  useIsomorphicLayoutEffect2(() => {
    if (!element) {
      return;
    }
    const key2 = clonedChildren == null ? void 0 : clonedChildren.key;
    const id = clonedChildren == null ? void 0 : clonedChildren.props.id;
    if (key2 == null || id == null) {
      setClonedChildren(null);
      return;
    }
    Promise.resolve(animation(id, element)).then(() => {
      setClonedChildren(null);
    });
  }, [animation, clonedChildren, element]);
  return import_react339.default.createElement(import_react339.default.Fragment, null, children2, clonedChildren ? (0, import_react339.cloneElement)(clonedChildren, {
    ref: setElement
  }) : null);
}
var defaultTransform = {
  x: 0,
  y: 0,
  scaleX: 1,
  scaleY: 1
};
function NullifiedContextProvider(_ref) {
  let {
    children: children2
  } = _ref;
  return import_react339.default.createElement(InternalContext.Provider, {
    value: defaultInternalContext
  }, import_react339.default.createElement(ActiveDraggableContext.Provider, {
    value: defaultTransform
  }, children2));
}
var baseStyles = {
  position: "fixed",
  touchAction: "none"
};
var defaultTransition = (activatorEvent) => {
  const isKeyboardActivator = isKeyboardEvent(activatorEvent);
  return isKeyboardActivator ? "transform 250ms ease" : void 0;
};
var PositionedOverlay = (0, import_react339.forwardRef)((_ref, ref) => {
  let {
    as,
    activatorEvent,
    adjustScale: adjustScale2,
    children: children2,
    className: className2,
    rect,
    style,
    transform,
    transition = defaultTransition
  } = _ref;
  if (!rect) {
    return null;
  }
  const scaleAdjustedTransform = adjustScale2 ? transform : {
    ...transform,
    scaleX: 1,
    scaleY: 1
  };
  const styles = {
    ...baseStyles,
    width: rect.width,
    height: rect.height,
    top: rect.top,
    left: rect.left,
    transform: CSS2.Transform.toString(scaleAdjustedTransform),
    transformOrigin: adjustScale2 && activatorEvent ? getRelativeTransformOrigin(activatorEvent, rect) : void 0,
    transition: typeof transition === "function" ? transition(activatorEvent) : transition,
    ...style
  };
  return import_react339.default.createElement(as, {
    className: className2,
    style: styles,
    ref
  }, children2);
});
var defaultDropAnimationSideEffects = (options) => (_ref) => {
  let {
    active,
    dragOverlay
  } = _ref;
  const originalStyles = {};
  const {
    styles,
    className: className2
  } = options;
  if (styles != null && styles.active) {
    for (const [key2, value] of Object.entries(styles.active)) {
      if (value === void 0) {
        continue;
      }
      originalStyles[key2] = active.node.style.getPropertyValue(key2);
      active.node.style.setProperty(key2, value);
    }
  }
  if (styles != null && styles.dragOverlay) {
    for (const [key2, value] of Object.entries(styles.dragOverlay)) {
      if (value === void 0) {
        continue;
      }
      dragOverlay.node.style.setProperty(key2, value);
    }
  }
  if (className2 != null && className2.active) {
    active.node.classList.add(className2.active);
  }
  if (className2 != null && className2.dragOverlay) {
    dragOverlay.node.classList.add(className2.dragOverlay);
  }
  return function cleanup() {
    for (const [key2, value] of Object.entries(originalStyles)) {
      active.node.style.setProperty(key2, value);
    }
    if (className2 != null && className2.active) {
      active.node.classList.remove(className2.active);
    }
  };
};
var defaultKeyframeResolver = (_ref2) => {
  let {
    transform: {
      initial,
      final
    }
  } = _ref2;
  return [{
    transform: CSS2.Transform.toString(initial)
  }, {
    transform: CSS2.Transform.toString(final)
  }];
};
var defaultDropAnimationConfiguration = {
  duration: 250,
  easing: "ease",
  keyframes: defaultKeyframeResolver,
  sideEffects: defaultDropAnimationSideEffects({
    styles: {
      active: {
        opacity: "0"
      }
    }
  })
};
function useDropAnimation(_ref3) {
  let {
    config,
    draggableNodes,
    droppableContainers,
    measuringConfiguration
  } = _ref3;
  return useEvent((id, node) => {
    if (config === null) {
      return;
    }
    const activeDraggable = draggableNodes.get(id);
    if (!activeDraggable) {
      return;
    }
    const activeNode = activeDraggable.node.current;
    if (!activeNode) {
      return;
    }
    const measurableNode = getMeasurableNode(node);
    if (!measurableNode) {
      return;
    }
    const {
      transform
    } = getWindow2(node).getComputedStyle(node);
    const parsedTransform = parseTransform(transform);
    if (!parsedTransform) {
      return;
    }
    const animation = typeof config === "function" ? config : createDefaultDropAnimation(config);
    scrollIntoViewIfNeeded(activeNode, measuringConfiguration.draggable.measure);
    return animation({
      active: {
        id,
        data: activeDraggable.data,
        node: activeNode,
        rect: measuringConfiguration.draggable.measure(activeNode)
      },
      draggableNodes,
      dragOverlay: {
        node,
        rect: measuringConfiguration.dragOverlay.measure(measurableNode)
      },
      droppableContainers,
      measuringConfiguration,
      transform: parsedTransform
    });
  });
}
function createDefaultDropAnimation(options) {
  const {
    duration,
    easing,
    sideEffects,
    keyframes
  } = {
    ...defaultDropAnimationConfiguration,
    ...options
  };
  return (_ref4) => {
    let {
      active,
      dragOverlay,
      transform,
      ...rest
    } = _ref4;
    if (!duration) {
      return;
    }
    const delta = {
      x: dragOverlay.rect.left - active.rect.left,
      y: dragOverlay.rect.top - active.rect.top
    };
    const scale = {
      scaleX: transform.scaleX !== 1 ? active.rect.width * transform.scaleX / dragOverlay.rect.width : 1,
      scaleY: transform.scaleY !== 1 ? active.rect.height * transform.scaleY / dragOverlay.rect.height : 1
    };
    const finalTransform = {
      x: transform.x - delta.x,
      y: transform.y - delta.y,
      ...scale
    };
    const animationKeyframes = keyframes({
      ...rest,
      active,
      dragOverlay,
      transform: {
        initial: transform,
        final: finalTransform
      }
    });
    const [firstKeyframe] = animationKeyframes;
    const lastKeyframe = animationKeyframes[animationKeyframes.length - 1];
    if (JSON.stringify(firstKeyframe) === JSON.stringify(lastKeyframe)) {
      return;
    }
    const cleanup = sideEffects == null ? void 0 : sideEffects({
      active,
      dragOverlay,
      ...rest
    });
    const animation = dragOverlay.node.animate(animationKeyframes, {
      duration,
      easing,
      fill: "forwards"
    });
    return new Promise((resolve) => {
      animation.onfinish = () => {
        cleanup == null ? void 0 : cleanup();
        resolve();
      };
    });
  };
}
var key = 0;
function useKey(id) {
  return (0, import_react339.useMemo)(() => {
    if (id == null) {
      return;
    }
    key++;
    return key;
  }, [id]);
}
var DragOverlay = import_react339.default.memo((_ref) => {
  let {
    adjustScale: adjustScale2 = false,
    children: children2,
    dropAnimation: dropAnimationConfig,
    style,
    transition,
    modifiers,
    wrapperElement = "div",
    className: className2,
    zIndex = 999
  } = _ref;
  const {
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggableNodes,
    droppableContainers,
    dragOverlay,
    over,
    measuringConfiguration,
    scrollableAncestors,
    scrollableAncestorRects,
    windowRect
  } = useDndContext();
  const transform = (0, import_react339.useContext)(ActiveDraggableContext);
  const key2 = useKey(active == null ? void 0 : active.id);
  const modifiedTransform = applyModifiers(modifiers, {
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggingNodeRect: dragOverlay.rect,
    over,
    overlayNodeRect: dragOverlay.rect,
    scrollableAncestors,
    scrollableAncestorRects,
    transform,
    windowRect
  });
  const initialRect = useInitialValue(activeNodeRect);
  const dropAnimation = useDropAnimation({
    config: dropAnimationConfig,
    draggableNodes,
    droppableContainers,
    measuringConfiguration
  });
  const ref = initialRect ? dragOverlay.setRef : void 0;
  return import_react339.default.createElement(NullifiedContextProvider, null, import_react339.default.createElement(AnimationManager, {
    animation: dropAnimation
  }, active && key2 ? import_react339.default.createElement(PositionedOverlay, {
    key: key2,
    id: active.id,
    ref,
    as: wrapperElement,
    activatorEvent,
    adjustScale: adjustScale2,
    className: className2,
    transition,
    rect: initialRect,
    style: {
      zIndex,
      ...style
    },
    transform: modifiedTransform
  }, children2) : null));
});

// node_modules/@dnd-kit/sortable/dist/sortable.esm.js
var import_react340 = __toESM(require_react());
function arrayMove(array, from, to) {
  const newArray = array.slice();
  newArray.splice(to < 0 ? newArray.length + to : to, 0, newArray.splice(from, 1)[0]);
  return newArray;
}
function getSortedRects(items, rects) {
  return items.reduce((accumulator, id, index) => {
    const rect = rects.get(id);
    if (rect) {
      accumulator[index] = rect;
    }
    return accumulator;
  }, Array(items.length));
}
function isValidIndex(index) {
  return index !== null && index >= 0;
}
function itemsEqual(a4, b2) {
  if (a4 === b2) {
    return true;
  }
  if (a4.length !== b2.length) {
    return false;
  }
  for (let i2 = 0; i2 < a4.length; i2++) {
    if (a4[i2] !== b2[i2]) {
      return false;
    }
  }
  return true;
}
function normalizeDisabled(disabled) {
  if (typeof disabled === "boolean") {
    return {
      draggable: disabled,
      droppable: disabled
    };
  }
  return disabled;
}
var rectSortingStrategy = (_ref) => {
  let {
    rects,
    activeIndex,
    overIndex,
    index
  } = _ref;
  const newRects = arrayMove(rects, overIndex, activeIndex);
  const oldRect = rects[index];
  const newRect = newRects[index];
  if (!newRect || !oldRect) {
    return null;
  }
  return {
    x: newRect.left - oldRect.left,
    y: newRect.top - oldRect.top,
    scaleX: newRect.width / oldRect.width,
    scaleY: newRect.height / oldRect.height
  };
};
var defaultScale$1 = {
  scaleX: 1,
  scaleY: 1
};
var verticalListSortingStrategy = (_ref) => {
  var _rects$activeIndex;
  let {
    activeIndex,
    activeNodeRect: fallbackActiveRect,
    index,
    rects,
    overIndex
  } = _ref;
  const activeNodeRect = (_rects$activeIndex = rects[activeIndex]) != null ? _rects$activeIndex : fallbackActiveRect;
  if (!activeNodeRect) {
    return null;
  }
  if (index === activeIndex) {
    const overIndexRect = rects[overIndex];
    if (!overIndexRect) {
      return null;
    }
    return {
      x: 0,
      y: activeIndex < overIndex ? overIndexRect.top + overIndexRect.height - (activeNodeRect.top + activeNodeRect.height) : overIndexRect.top - activeNodeRect.top,
      ...defaultScale$1
    };
  }
  const itemGap = getItemGap$1(rects, index, activeIndex);
  if (index > activeIndex && index <= overIndex) {
    return {
      x: 0,
      y: -activeNodeRect.height - itemGap,
      ...defaultScale$1
    };
  }
  if (index < activeIndex && index >= overIndex) {
    return {
      x: 0,
      y: activeNodeRect.height + itemGap,
      ...defaultScale$1
    };
  }
  return {
    x: 0,
    y: 0,
    ...defaultScale$1
  };
};
function getItemGap$1(clientRects, index, activeIndex) {
  const currentRect = clientRects[index];
  const previousRect = clientRects[index - 1];
  const nextRect = clientRects[index + 1];
  if (!currentRect) {
    return 0;
  }
  if (activeIndex < index) {
    return previousRect ? currentRect.top - (previousRect.top + previousRect.height) : nextRect ? nextRect.top - (currentRect.top + currentRect.height) : 0;
  }
  return nextRect ? nextRect.top - (currentRect.top + currentRect.height) : previousRect ? currentRect.top - (previousRect.top + previousRect.height) : 0;
}
var ID_PREFIX2 = "Sortable";
var Context = import_react340.default.createContext({
  activeIndex: -1,
  containerId: ID_PREFIX2,
  disableTransforms: false,
  items: [],
  overIndex: -1,
  useDragOverlay: false,
  sortedRects: [],
  strategy: rectSortingStrategy,
  disabled: {
    draggable: false,
    droppable: false
  }
});
function SortableContext(_ref) {
  let {
    children: children2,
    id,
    items: userDefinedItems,
    strategy = rectSortingStrategy,
    disabled: disabledProp = false
  } = _ref;
  const {
    active,
    dragOverlay,
    droppableRects,
    over,
    measureDroppableContainers
  } = useDndContext();
  const containerId = useUniqueId2(ID_PREFIX2, id);
  const useDragOverlay = Boolean(dragOverlay.rect !== null);
  const items = (0, import_react340.useMemo)(() => userDefinedItems.map((item) => typeof item === "object" && "id" in item ? item.id : item), [userDefinedItems]);
  const isDragging = active != null;
  const activeIndex = active ? items.indexOf(active.id) : -1;
  const overIndex = over ? items.indexOf(over.id) : -1;
  const previousItemsRef = (0, import_react340.useRef)(items);
  const itemsHaveChanged = !itemsEqual(items, previousItemsRef.current);
  const disableTransforms = overIndex !== -1 && activeIndex === -1 || itemsHaveChanged;
  const disabled = normalizeDisabled(disabledProp);
  useIsomorphicLayoutEffect2(() => {
    if (itemsHaveChanged && isDragging) {
      measureDroppableContainers(items);
    }
  }, [itemsHaveChanged, items, isDragging, measureDroppableContainers]);
  (0, import_react340.useEffect)(() => {
    previousItemsRef.current = items;
  }, [items]);
  const contextValue = (0, import_react340.useMemo)(
    () => ({
      activeIndex,
      containerId,
      disabled,
      disableTransforms,
      items,
      overIndex,
      useDragOverlay,
      sortedRects: getSortedRects(items, droppableRects),
      strategy
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [activeIndex, containerId, disabled.draggable, disabled.droppable, disableTransforms, items, overIndex, droppableRects, useDragOverlay, strategy]
  );
  return import_react340.default.createElement(Context.Provider, {
    value: contextValue
  }, children2);
}
var defaultNewIndexGetter = (_ref) => {
  let {
    id,
    items,
    activeIndex,
    overIndex
  } = _ref;
  return arrayMove(items, activeIndex, overIndex).indexOf(id);
};
var defaultAnimateLayoutChanges = (_ref2) => {
  let {
    containerId,
    isSorting,
    wasDragging,
    index,
    items,
    newIndex,
    previousItems,
    previousContainerId,
    transition
  } = _ref2;
  if (!transition || !wasDragging) {
    return false;
  }
  if (previousItems !== items && index === newIndex) {
    return false;
  }
  if (isSorting) {
    return true;
  }
  return newIndex !== index && containerId === previousContainerId;
};
var defaultTransition2 = {
  duration: 200,
  easing: "ease"
};
var transitionProperty = "transform";
var disabledTransition = CSS2.Transition.toString({
  property: transitionProperty,
  duration: 0,
  easing: "linear"
});
var defaultAttributes = {
  roleDescription: "sortable"
};
function useDerivedTransform(_ref) {
  let {
    disabled,
    index,
    node,
    rect
  } = _ref;
  const [derivedTransform, setDerivedtransform] = (0, import_react340.useState)(null);
  const previousIndex = (0, import_react340.useRef)(index);
  useIsomorphicLayoutEffect2(() => {
    if (!disabled && index !== previousIndex.current && node.current) {
      const initial = rect.current;
      if (initial) {
        const current = getClientRect(node.current, {
          ignoreTransform: true
        });
        const delta = {
          x: initial.left - current.left,
          y: initial.top - current.top,
          scaleX: initial.width / current.width,
          scaleY: initial.height / current.height
        };
        if (delta.x || delta.y) {
          setDerivedtransform(delta);
        }
      }
    }
    if (index !== previousIndex.current) {
      previousIndex.current = index;
    }
  }, [disabled, index, node, rect]);
  (0, import_react340.useEffect)(() => {
    if (derivedTransform) {
      setDerivedtransform(null);
    }
  }, [derivedTransform]);
  return derivedTransform;
}
function useSortable(_ref) {
  let {
    animateLayoutChanges = defaultAnimateLayoutChanges,
    attributes: userDefinedAttributes,
    disabled: localDisabled,
    data: customData,
    getNewIndex = defaultNewIndexGetter,
    id,
    strategy: localStrategy,
    resizeObserverConfig,
    transition = defaultTransition2
  } = _ref;
  const {
    items,
    containerId,
    activeIndex,
    disabled: globalDisabled,
    disableTransforms,
    sortedRects,
    overIndex,
    useDragOverlay,
    strategy: globalStrategy
  } = (0, import_react340.useContext)(Context);
  const disabled = normalizeLocalDisabled(localDisabled, globalDisabled);
  const index = items.indexOf(id);
  const data = (0, import_react340.useMemo)(() => ({
    sortable: {
      containerId,
      index,
      items
    },
    ...customData
  }), [containerId, customData, index, items]);
  const itemsAfterCurrentSortable = (0, import_react340.useMemo)(() => items.slice(items.indexOf(id)), [items, id]);
  const {
    rect,
    node,
    isOver,
    setNodeRef: setDroppableNodeRef
  } = useDroppable({
    id,
    data,
    disabled: disabled.droppable,
    resizeObserverConfig: {
      updateMeasurementsFor: itemsAfterCurrentSortable,
      ...resizeObserverConfig
    }
  });
  const {
    active,
    activatorEvent,
    activeNodeRect,
    attributes,
    setNodeRef: setDraggableNodeRef,
    listeners,
    isDragging,
    over,
    setActivatorNodeRef,
    transform
  } = useDraggable({
    id,
    data,
    attributes: {
      ...defaultAttributes,
      ...userDefinedAttributes
    },
    disabled: disabled.draggable
  });
  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);
  const isSorting = Boolean(active);
  const displaceItem = isSorting && !disableTransforms && isValidIndex(activeIndex) && isValidIndex(overIndex);
  const shouldDisplaceDragSource = !useDragOverlay && isDragging;
  const dragSourceDisplacement = shouldDisplaceDragSource && displaceItem ? transform : null;
  const strategy = localStrategy != null ? localStrategy : globalStrategy;
  const finalTransform = displaceItem ? dragSourceDisplacement != null ? dragSourceDisplacement : strategy({
    rects: sortedRects,
    activeNodeRect,
    activeIndex,
    overIndex,
    index
  }) : null;
  const newIndex = isValidIndex(activeIndex) && isValidIndex(overIndex) ? getNewIndex({
    id,
    items,
    activeIndex,
    overIndex
  }) : index;
  const activeId = active == null ? void 0 : active.id;
  const previous = (0, import_react340.useRef)({
    activeId,
    items,
    newIndex,
    containerId
  });
  const itemsHaveChanged = items !== previous.current.items;
  const shouldAnimateLayoutChanges = animateLayoutChanges({
    active,
    containerId,
    isDragging,
    isSorting,
    id,
    index,
    items,
    newIndex: previous.current.newIndex,
    previousItems: previous.current.items,
    previousContainerId: previous.current.containerId,
    transition,
    wasDragging: previous.current.activeId != null
  });
  const derivedTransform = useDerivedTransform({
    disabled: !shouldAnimateLayoutChanges,
    index,
    node,
    rect
  });
  (0, import_react340.useEffect)(() => {
    if (isSorting && previous.current.newIndex !== newIndex) {
      previous.current.newIndex = newIndex;
    }
    if (containerId !== previous.current.containerId) {
      previous.current.containerId = containerId;
    }
    if (items !== previous.current.items) {
      previous.current.items = items;
    }
  }, [isSorting, newIndex, containerId, items]);
  (0, import_react340.useEffect)(() => {
    if (activeId === previous.current.activeId) {
      return;
    }
    if (activeId && !previous.current.activeId) {
      previous.current.activeId = activeId;
      return;
    }
    const timeoutId = setTimeout(() => {
      previous.current.activeId = activeId;
    }, 50);
    return () => clearTimeout(timeoutId);
  }, [activeId]);
  return {
    active,
    activeIndex,
    attributes,
    data,
    rect,
    index,
    newIndex,
    items,
    isOver,
    isSorting,
    isDragging,
    listeners,
    node,
    overIndex,
    over,
    setNodeRef,
    setActivatorNodeRef,
    setDroppableNodeRef,
    setDraggableNodeRef,
    transform: derivedTransform != null ? derivedTransform : finalTransform,
    transition: getTransition()
  };
  function getTransition() {
    if (
      // Temporarily disable transitions for a single frame to set up derived transforms
      derivedTransform || // Or to prevent items jumping to back to their "new" position when items change
      itemsHaveChanged && previous.current.newIndex === index
    ) {
      return disabledTransition;
    }
    if (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent) || !transition) {
      return void 0;
    }
    if (isSorting || shouldAnimateLayoutChanges) {
      return CSS2.Transition.toString({
        ...transition,
        property: transitionProperty
      });
    }
    return void 0;
  }
}
function normalizeLocalDisabled(localDisabled, globalDisabled) {
  var _localDisabled$dragga, _localDisabled$droppa;
  if (typeof localDisabled === "boolean") {
    return {
      draggable: localDisabled,
      // Backwards compatibility
      droppable: false
    };
  }
  return {
    draggable: (_localDisabled$dragga = localDisabled == null ? void 0 : localDisabled.draggable) != null ? _localDisabled$dragga : globalDisabled.draggable,
    droppable: (_localDisabled$droppa = localDisabled == null ? void 0 : localDisabled.droppable) != null ? _localDisabled$droppa : globalDisabled.droppable
  };
}
function hasSortableData(entry) {
  if (!entry) {
    return false;
  }
  const data = entry.data.current;
  if (data && "sortable" in data && typeof data.sortable === "object" && "containerId" in data.sortable && "items" in data.sortable && "index" in data.sortable) {
    return true;
  }
  return false;
}
var directions = [KeyboardCode.Down, KeyboardCode.Right, KeyboardCode.Up, KeyboardCode.Left];

// node_modules/@cloudscape-design/components/internal/components/sortable-area/keyboard-sensor/utilities/events.js
var EventName2;
(function(EventName3) {
  EventName3["Blur"] = "blur";
  EventName3["Keydown"] = "keydown";
  EventName3["Resize"] = "resize";
  EventName3["VisibilityChange"] = "visibilitychange";
  EventName3["CustomDown"] = "custom-movedown";
  EventName3["CustomUp"] = "custom-moveup";
})(EventName2 || (EventName2 = {}));

// node_modules/@cloudscape-design/components/internal/components/sortable-area/use-drag-and-drop-reorder.js
var import_react341 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/sortable-area/keyboard-sensor/defaults.js
var defaultKeyboardCodes2 = {
  start: [KeyboardCode.Space, KeyboardCode.Enter],
  cancel: [KeyboardCode.Esc],
  end: [KeyboardCode.Space, KeyboardCode.Enter]
};

// node_modules/@cloudscape-design/components/internal/components/sortable-area/keyboard-sensor/utilities/listeners.js
var Listeners2 = class {
  constructor(target) {
    this.target = target;
    this.listeners = [];
    this.removeAll = () => {
      this.listeners.forEach((listener) => {
        var _a2;
        return (_a2 = this.target) === null || _a2 === void 0 ? void 0 : _a2.removeEventListener(...listener);
      });
    };
  }
  add(eventName, handler, options) {
    var _a2;
    (_a2 = this.target) === null || _a2 === void 0 ? void 0 : _a2.addEventListener(eventName, handler, options);
    this.listeners.push([eventName, handler, options]);
  }
};

// node_modules/@cloudscape-design/components/internal/components/sortable-area/keyboard-sensor/utilities/scroll.js
function isDocumentScrollingElement2(element) {
  if (!canUseDOM || !element) {
    return false;
  }
  return element === document.scrollingElement;
}
function getScrollPosition2(scrollingContainer) {
  const minScroll = {
    x: 0,
    y: 0
  };
  const dimensions = isDocumentScrollingElement2(scrollingContainer) ? {
    height: window.innerHeight,
    width: window.innerWidth
  } : {
    height: scrollingContainer.clientHeight,
    width: scrollingContainer.clientWidth
  };
  const maxScroll = {
    x: scrollingContainer.scrollWidth - dimensions.width,
    y: scrollingContainer.scrollHeight - dimensions.height
  };
  const isTop = scrollingContainer.scrollTop <= minScroll.y;
  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;
  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;
  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;
  return {
    isTop,
    isLeft,
    isBottom,
    isRight,
    maxScroll,
    minScroll
  };
}
function getScrollElementRect2(element) {
  if (element === document.scrollingElement) {
    const { innerWidth, innerHeight } = window;
    return {
      top: 0,
      left: 0,
      right: innerWidth,
      bottom: innerHeight,
      width: innerWidth,
      height: innerHeight
    };
  }
  const { top, left, right, bottom } = element.getBoundingClientRect();
  return {
    top,
    left,
    right,
    bottom,
    width: element.clientWidth,
    height: element.clientHeight
  };
}
function applyScroll({ currentCoordinates, direction, newCoordinates, scrollableAncestors }) {
  for (const scrollContainer of scrollableAncestors) {
    const coordinatesDelta = subtract(newCoordinates, currentCoordinates);
    const { isTop, isBottom, maxScroll, minScroll } = getScrollPosition2(scrollContainer);
    const scrollElementRect = getScrollElementRect2(scrollContainer);
    const clampedCoordinates = {
      y: Math.min(direction === "down" ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === "down" ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))
    };
    const canScrollY = direction === "down" && !isBottom || direction === "up" && !isTop;
    if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {
      const newScrollCoordinates = scrollContainer.scrollTop + coordinatesDelta.y;
      const canScrollToNewCoordinates = direction === "down" && newScrollCoordinates <= maxScroll.y || direction === "up" && newScrollCoordinates >= minScroll.y;
      if (canScrollToNewCoordinates) {
        scrollContainer.scrollTo({
          top: newScrollCoordinates,
          behavior: "smooth"
        });
        return true;
      }
      break;
    }
  }
  return false;
}

// node_modules/@cloudscape-design/components/internal/components/sortable-area/keyboard-sensor/index.js
var KeyboardAndUAPSensor = class {
  constructor(props2) {
    this.props = props2;
    this.autoScrollEnabled = false;
    const { event: { target } } = props2;
    this.props = props2;
    this.listeners = new Listeners2(getOwnerDocument(target));
    this.windowListeners = new Listeners2(getWindow2(target));
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleCustomDirectionEvent = this.handleCustomDirectionEvent.bind(this);
    this.handleEnd = this.handleEnd.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.attach();
  }
  attach() {
    var _a2;
    this.handleStart();
    this.windowListeners.add(EventName2.Resize, this.handleCancel);
    this.windowListeners.add(EventName2.VisibilityChange, this.handleCancel);
    (_a2 = this.props.event.target) === null || _a2 === void 0 ? void 0 : _a2.addEventListener(EventName2.Blur, this.handleEnd);
    setTimeout(() => {
      this.listeners.add(EventName2.Keydown, this.handleKeyDown);
      this.listeners.add(EventName2.CustomDown, this.handleCustomDirectionEvent);
      this.listeners.add(EventName2.CustomUp, this.handleCustomDirectionEvent);
    });
  }
  handleStart() {
    const { activeNode, onStart } = this.props;
    const node = activeNode.node.current;
    if (node) {
      scrollElementIntoView(node);
    }
    onStart(defaultCoordinates);
  }
  handleKeyDown(event) {
    if (isKeyboardEvent(event)) {
      const { options } = this.props;
      const { keyboardCodes = defaultKeyboardCodes2 } = options;
      const { code } = event;
      if (keyboardCodes.end.indexOf(code) !== -1) {
        this.handleEnd(event);
        return;
      }
      if (keyboardCodes.cancel.indexOf(code) !== -1) {
        this.handleCancel(event);
        return;
      }
      switch (code) {
        case KeyboardCode.Up:
          this.handleDirectionalMove(event, "up");
          break;
        case KeyboardCode.Down:
          this.handleDirectionalMove(event, "down");
          break;
      }
    }
  }
  handleCustomDirectionEvent(event) {
    switch (event.type) {
      case EventName2.CustomUp:
        this.handleDirectionalMove(event, "up");
        break;
      case EventName2.CustomDown:
        this.handleDirectionalMove(event, "down");
        break;
    }
  }
  handleDirectionalMove(event, direction) {
    const { active, context, options } = this.props;
    const { coordinateGetter } = options;
    const { collisionRect } = context.current;
    const currentCoordinates = collisionRect ? { x: collisionRect.left, y: collisionRect.top } : defaultCoordinates;
    if (!this.referenceCoordinates) {
      this.referenceCoordinates = currentCoordinates;
    }
    const newCoordinates = coordinateGetter(event, {
      active,
      context: context.current,
      currentCoordinates
    });
    if (newCoordinates) {
      const { scrollableAncestors } = context.current;
      const scrolled = applyScroll({ currentCoordinates, direction, newCoordinates, scrollableAncestors });
      if (!scrolled) {
        this.handleMove(event, subtract(newCoordinates, this.referenceCoordinates));
      }
    }
  }
  handleMove(event, coordinates) {
    const { onMove } = this.props;
    event.preventDefault();
    onMove(coordinates);
  }
  handleEnd(event) {
    const { onEnd } = this.props;
    event.preventDefault();
    this.detach();
    onEnd();
  }
  handleCancel(event) {
    const { onCancel } = this.props;
    if (event.type !== EventName2.Blur) {
      event.preventDefault();
    }
    this.detach();
    onCancel();
  }
  detach() {
    var _a2;
    (_a2 = this.props.event.target) === null || _a2 === void 0 ? void 0 : _a2.removeEventListener(EventName2.Blur, this.handleCancel);
    this.listeners.removeAll();
    this.windowListeners.removeAll();
  }
};
KeyboardAndUAPSensor.activators = [
  {
    eventName: "onKeyDown",
    handler: (event, { keyboardCodes = defaultKeyboardCodes2, onActivation }, { active }) => {
      const { code } = event.nativeEvent;
      if (keyboardCodes.start.indexOf(code) !== -1) {
        const activator = active.activatorNode.current;
        if (activator && event.target !== activator) {
          return false;
        }
        event.preventDefault();
        onActivation === null || onActivation === void 0 ? void 0 : onActivation({ event: event.nativeEvent });
        return true;
      }
      return false;
    }
  },
  {
    eventName: "onClick",
    handler: ({ nativeEvent: event }, { onActivation }) => {
      if (event.button !== 0) {
        return false;
      }
      onActivation === null || onActivation === void 0 ? void 0 : onActivation({ event });
      return true;
    }
  }
];

// node_modules/@cloudscape-design/components/internal/components/sortable-area/use-drag-and-drop-reorder.js
function useDragAndDropReorder({ items, itemDefinition }) {
  const isKeyboard = (0, import_react341.useRef)(false);
  const positionDelta = (0, import_react341.useRef)(0);
  const [activeItemId, setActiveItemId] = (0, import_react341.useState)(null);
  const setActiveItem = (id) => {
    setActiveItemId(id);
    if (!id) {
      isKeyboard.current = false;
      positionDelta.current = 0;
    }
  };
  const handleKeyDown = (event) => {
    if (isKeyboard.current && activeItemId) {
      const currentTargetIndex = items.findIndex((item) => itemDefinition.id(item) === activeItemId) + positionDelta.current;
      if ((event.key === "ArrowDown" || event.type === EventName2.CustomDown) && currentTargetIndex < items.length - 1) {
        positionDelta.current += 1;
      } else if ((event.key === "ArrowUp" || event.type === EventName2.CustomUp) && currentTargetIndex > 0) {
        positionDelta.current -= 1;
      }
    }
    if (activeItemId && isEscape2(event.key)) {
      event.stopPropagation();
    }
  };
  const getClosestId = (active) => {
    if (positionDelta.current === 0) {
      return active.id;
    }
    const currentIndex = items.findIndex((item) => itemDefinition.id(item) === active.id);
    const newIndex = Math.max(0, Math.min(items.length - 1, currentIndex + positionDelta.current));
    return itemDefinition.id(items[newIndex]);
  };
  const collisionDetection = ({ active, collisionRect, droppableContainers, droppableRects, pointerCoordinates }) => {
    if (isKeyboard.current) {
      const collidingContainer = getCollidingContainer({
        activeId: active.id,
        closestId: getClosestId(active),
        droppableContainers
      });
      return collidingContainer ? [collidingContainer] : [];
    } else {
      return closestCenter({ active, collisionRect, droppableRects, droppableContainers, pointerCoordinates });
    }
  };
  const coordinateGetter = (event, { context: { active, collisionRect, droppableRects, droppableContainers } }) => {
    event.preventDefault();
    if (!active || !collisionRect) {
      return;
    }
    const closestId = getClosestId(active);
    if (closestId !== null) {
      const activeDroppable = droppableContainers.get(active.id);
      const newDroppable = droppableContainers.get(closestId);
      const newRect = newDroppable ? droppableRects.get(newDroppable.id) : null;
      const newNode = newDroppable === null || newDroppable === void 0 ? void 0 : newDroppable.node.current;
      if (newNode && newRect && activeDroppable && newDroppable) {
        const isAfterActive = isAfter2(activeDroppable, newDroppable);
        const offset = {
          x: isAfterActive ? collisionRect.width - newRect.width : 0,
          y: isAfterActive ? collisionRect.height - newRect.height : 0
        };
        const rectCoordinates = {
          x: newRect.left,
          y: newRect.top
        };
        return {
          x: rectCoordinates.x - offset.x,
          y: rectCoordinates.y - offset.y
        };
      }
    }
  };
  const sensors = useSensors(useSensor(PointerSensor, {
    activationConstraint: {
      // allow KeyboardSensor (click to display UAP) to take priority
      // if handle is clicked without movement
      distance: 1
    }
  }), useSensor(KeyboardAndUAPSensor, {
    coordinateGetter,
    onActivation: () => {
      isKeyboard.current = true;
    }
  }));
  return {
    activeItemId,
    setActiveItemId: setActiveItem,
    collisionDetection,
    coordinateGetter,
    handleKeyDown,
    sensors,
    isKeyboard
  };
}
function isAfter2(a4, b2) {
  return hasSortableData(a4) && hasSortableData(b2) && a4.data.current.sortable.index < b2.data.current.sortable.index;
}
function getCollidingContainer({ activeId, closestId, droppableContainers }) {
  if (closestId === activeId) {
    return;
  }
  const collidingContainer = droppableContainers.find(({ id }) => id === closestId);
  if (collidingContainer) {
    return {
      id: collidingContainer.id,
      data: {
        droppableContainer: collidingContainer,
        value: 0
      }
    };
  }
}
var isEscape2 = (key2) => key2 === "Escape" || key2 === "Esc";

// node_modules/@cloudscape-design/components/internal/components/sortable-area/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/sortable-area/styles.scoped.css";
var styles_css_default119 = {
  "drag-overlay": "awsui_drag-overlay_1ksmw_1wocz_145",
  "drag-overlay-item": "awsui_drag-overlay-item_1ksmw_1wocz_149",
  "drag-overlay-container": "awsui_drag-overlay-container_1ksmw_1wocz_174",
  "active": "awsui_active_1ksmw_1wocz_200",
  "placeholder": "awsui_placeholder_1ksmw_1wocz_210",
  "placeholder-item": "awsui_placeholder-item_1ksmw_1wocz_219",
  "placeholder-container": "awsui_placeholder-container_1ksmw_1wocz_225",
  "sorting": "awsui_sorting_1ksmw_1wocz_232"
};

// node_modules/@cloudscape-design/components/internal/components/sortable-area/index.js
function SortableArea({ items, itemDefinition, renderItem, onItemsChange, disableReorder, i18nStrings }) {
  var _a2;
  const { activeItemId, setActiveItemId, collisionDetection, handleKeyDown, sensors, isKeyboard } = useDragAndDropReorder({
    items,
    itemDefinition
  });
  const activeItem = activeItemId ? items.find((item) => itemDefinition.id(item) === activeItemId) : null;
  const isDragging = activeItemId !== null;
  const announcements = useLiveAnnouncements(Object.assign({ items, itemDefinition, isDragging }, i18nStrings));
  const portalContainer = usePortalContainer();
  return import_react342.default.createElement(
    DndContext,
    { sensors, collisionDetection, accessibility: {
      announcements,
      restoreFocus: false,
      screenReaderInstructions: (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dragHandleAriaDescription) ? { draggable: i18nStrings.dragHandleAriaDescription } : void 0,
      container: portalContainer !== null && portalContainer !== void 0 ? portalContainer : void 0
    }, onDragStart: ({ active }) => setActiveItemId(active.id), onDragEnd: (event) => {
      setActiveItemId(null);
      const { active, over } = event;
      if (over && active.id !== over.id) {
        const movedItem = items.find((item) => itemDefinition.id(item) === active.id);
        const oldIndex = items.findIndex((item) => itemDefinition.id(item) === active.id);
        const newIndex = items.findIndex((item) => itemDefinition.id(item) === over.id);
        fireNonCancelableEvent(onItemsChange, { items: arrayMove([...items], oldIndex, newIndex), movedItem });
      }
    }, onDragCancel: () => setActiveItemId(null) },
    import_react342.default.createElement(SortableContext, { disabled: disableReorder, items: items.map((item) => itemDefinition.id(item)), strategy: verticalListSortingStrategy }, items.map((item) => import_react342.default.createElement(DraggableItem, { key: itemDefinition.id(item), item, itemDefinition, showDirectionButtons: item === activeItem && isKeyboard.current, renderItem, onKeyDown: handleKeyDown, dragHandleAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dragHandleAriaLabel }))),
    import_react342.default.createElement(
      Portal,
      { container: portalContainer },
      import_react342.default.createElement(DragOverlay, { className: clsx_m_default(styles_css_default119["drag-overlay"], styles_css_default119[`drag-overlay-${getBorderRadiusVariant(itemDefinition)}`]), dropAnimation: null, style: { zIndex: 5e3 }, transition: isKeyboard.current ? "transform 250ms" : "" }, activeItem && renderItem({
        item: activeItem,
        id: activeItemId.toString(),
        style: {},
        className: styles_css_default119.active,
        isDropPlaceholder: true,
        isSortingActive: false,
        isDragGhost: true,
        dragHandleProps: {
          ariaLabel: (_a2 = joinStrings(i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dragHandleAriaLabel, itemDefinition.label(activeItem))) !== null && _a2 !== void 0 ? _a2 : "",
          active: true,
          onKeyDown: handleKeyDown
        }
      }))
    )
  );
}
function usePortalContainer() {
  const portalContainerRef = (0, import_react342.useRef)(typeof document !== "undefined" ? document.createElement("div") : null);
  (0, import_react342.useEffect)(() => {
    const container = portalContainerRef.current;
    if (container && !container.isConnected) {
      document.body.appendChild(container);
    }
    return () => {
      if (container && container.isConnected) {
        document.body.removeChild(container);
      }
    };
  }, []);
  return portalContainerRef.current;
}
function DraggableItem({ item, itemDefinition, dragHandleAriaLabel, showDirectionButtons, onKeyDown, renderItem }) {
  var _a2;
  const id = itemDefinition.id(item);
  const { isDragging, isSorting, listeners, setNodeRef, transform, attributes } = useSortable({
    id
  });
  const style = { transform: CSS2.Translate.toString(transform) };
  const dragHandleListeners = attributes["aria-disabled"] ? {} : Object.assign(Object.assign({}, listeners), { onKeyDown: (event) => {
    if (onKeyDown) {
      onKeyDown(event);
    }
    if (listeners === null || listeners === void 0 ? void 0 : listeners.onKeyDown) {
      listeners.onKeyDown(event);
    }
  } });
  const className2 = clsx_m_default(isDragging && clsx_m_default(styles_css_default119.placeholder, styles_css_default119[`placeholder-${getBorderRadiusVariant(itemDefinition)}`]), isSorting && styles_css_default119.sorting);
  const dragHandleRef = (0, import_react342.useRef)(null);
  return import_react342.default.createElement(import_react342.default.Fragment, null, renderItem({
    item,
    id,
    ref: setNodeRef,
    style,
    className: className2,
    isDropPlaceholder: isDragging,
    isSortingActive: isSorting,
    isDragGhost: false,
    dragHandleProps: Object.assign(Object.assign({}, dragHandleListeners), { ariaLabel: (_a2 = joinStrings(dragHandleAriaLabel, itemDefinition.label(item))) !== null && _a2 !== void 0 ? _a2 : "", ariaDescribedby: attributes["aria-describedby"], disabled: attributes["aria-disabled"], triggerMode: "controlled", controlledShowButtons: showDirectionButtons, ref: dragHandleRef, directions: showDirectionButtons ? {
      "block-start": "active",
      "block-end": "active"
    } : void 0, onDirectionClick: (direction) => {
      var _a3;
      const event = new Event(direction === "block-start" ? EventName2.CustomUp : EventName2.CustomDown, {
        bubbles: true,
        cancelable: true
      });
      onKeyDown(event);
      (_a3 = dragHandleRef.current) === null || _a3 === void 0 ? void 0 : _a3.dispatchEvent(event);
    } })
  }));
}
function getBorderRadiusVariant(itemDefinition) {
  var _a2;
  return (_a2 = itemDefinition.borderRadius) !== null && _a2 !== void 0 ? _a2 : "item";
}

// node_modules/@cloudscape-design/components/internal/components/structured-item/index.js
var import_react343 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/structured-item/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/structured-item/styles.scoped.css";
var styles_css_default120 = {
  "root": "awsui_root_1ifko_1wryl_145",
  "disable-paddings": "awsui_disable-paddings_1ifko_1wryl_183",
  "main": "awsui_main_1ifko_1wryl_187",
  "content-wrap": "awsui_content-wrap_1ifko_1wryl_194",
  "wrap-actions": "awsui_wrap-actions_1ifko_1wryl_204",
  "content": "awsui_content_1ifko_1wryl_194",
  "actions": "awsui_actions_1ifko_1wryl_213"
};

// node_modules/@cloudscape-design/components/internal/components/structured-item/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/structured-item/test-classes/styles.scoped.css";
var styles_css_default121 = {
  "content": "awsui_content_x6dl3_7yzrg_5",
  "icon": "awsui_icon_x6dl3_7yzrg_6",
  "actions": "awsui_actions_x6dl3_7yzrg_7",
  "secondary": "awsui_secondary_x6dl3_7yzrg_8"
};

// node_modules/@cloudscape-design/components/internal/components/structured-item/index.js
function InternalStructuredItem({ content, icon, actions, secondaryContent, disablePaddings, wrapActions = true, className: className2 }) {
  return import_react343.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default120.root, styles_css_default121.root, disablePaddings && styles_css_default120["disable-paddings"], className2) },
    icon && import_react343.default.createElement("div", { className: clsx_m_default(styles_css_default120.icon, styles_css_default121.icon) }, icon),
    import_react343.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default120.main) },
      import_react343.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default120["content-wrap"], wrapActions && styles_css_default120["wrap-actions"]) },
        import_react343.default.createElement("div", { className: clsx_m_default(styles_css_default120.content, styles_css_default121.content) }, content),
        actions && import_react343.default.createElement("div", { className: clsx_m_default(styles_css_default120.actions, styles_css_default121.actions) }, actions)
      ),
      secondaryContent && import_react343.default.createElement("div", { className: clsx_m_default(styles_css_default120.secondary, styles_css_default121.secondary) }, secondaryContent)
    )
  );
}

// node_modules/@cloudscape-design/components/list/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/list/styles.scoped.css";
var styles_css_default122 = {
  "root": "awsui_root_1axkx_1swaz_145",
  "item": "awsui_item_1axkx_1swaz_183",
  "disable-item-paddings": "awsui_disable-item-paddings_1axkx_1swaz_186",
  "disable-paddings": "awsui_disable-paddings_1axkx_1swaz_189",
  "sortable-item": "awsui_sortable-item_1axkx_1swaz_196"
};

// node_modules/@cloudscape-design/components/list/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/list/test-classes/styles.scoped.css";
var styles_css_default123 = {
  "root": "awsui_root_rckk5_b9f2m_5",
  "item": "awsui_item_rckk5_b9f2m_6"
};

// node_modules/@cloudscape-design/components/list/internal.js
var extractValidStructuredItemProps = ({ content, secondaryContent, icon, actions }) => ({
  content,
  secondaryContent,
  icon,
  actions
});
function InternalList(_a2) {
  var { items, renderItem, sortable = false, sortDisabled = false, tagOverride: Tag = sortable ? "ol" : "ul", ariaLabel, ariaLabelledby, ariaDescribedby, onSortingChange, i18nStrings, disablePaddings, disableItemPaddings, __internalRootRef } = _a2, rest = __rest(_a2, ["items", "renderItem", "sortable", "sortDisabled", "tagOverride", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "onSortingChange", "i18nStrings", "disablePaddings", "disableItemPaddings", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const i18n = useInternalI18n("list");
  let contents;
  if (sortable) {
    contents = import_react344.default.createElement(SortableArea, { items, disableReorder: sortDisabled, itemDefinition: {
      id: (item) => renderItem(item).id,
      label: (item) => {
        var _a3;
        const details = renderItem(item);
        return (_a3 = details.announcementLabel) !== null && _a3 !== void 0 ? _a3 : details.content;
      }
    }, onItemsChange: (event) => fireNonCancelableEvent(onSortingChange, { items: event.detail.items }), i18nStrings: {
      liveAnnouncementDndStarted: i18n("liveAnnouncementDndStarted", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.liveAnnouncementDndStarted, formatDndStarted),
      liveAnnouncementDndItemReordered: i18n("liveAnnouncementDndItemReordered", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.liveAnnouncementDndItemReordered, formatDndItemReordered),
      liveAnnouncementDndItemCommitted: i18n("liveAnnouncementDndItemCommitted", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.liveAnnouncementDndItemCommitted, formatDndItemCommitted),
      liveAnnouncementDndDiscarded: i18n("liveAnnouncementDndDiscarded", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.liveAnnouncementDndDiscarded),
      dragHandleAriaLabel: i18n("dragHandleAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dragHandleAriaLabel),
      dragHandleAriaDescription: i18n("dragHandleAriaDescription", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dragHandleAriaDescription)
    }, renderItem: ({ ref, item, id, style, className: className2, dragHandleProps, isDragGhost }) => {
      const structuredItemProps = extractValidStructuredItemProps(renderItem(item));
      const itemClass = clsx_m_default(styles_css_default122.item, styles_css_default123.item, disableItemPaddings && styles_css_default122["disable-item-paddings"], styles_css_default122["sortable-item"], className2);
      const content = import_react344.default.createElement(
        import_react344.default.Fragment,
        null,
        import_react344.default.createElement(drag_handle_default, Object.assign({}, dragHandleProps)),
        import_react344.default.createElement(InternalStructuredItem, Object.assign({}, structuredItemProps, { disablePaddings: disableItemPaddings }))
      );
      if (isDragGhost) {
        return import_react344.default.createElement("div", { className: itemClass }, content);
      }
      return import_react344.default.createElement("li", { ref, className: itemClass, style, "data-testid": id }, content);
    } });
  } else {
    contents = items === null || items === void 0 ? void 0 : items.map((item) => {
      const _a3 = renderItem(item), { id } = _a3, structuredItemProps = __rest(_a3, ["id"]);
      return import_react344.default.createElement(
        "li",
        { key: id, "data-testid": id, className: clsx_m_default(styles_css_default122.item, styles_css_default123.item, disablePaddings && styles_css_default122["disable-paddings"], disableItemPaddings && styles_css_default122["disable-item-paddings"]) },
        import_react344.default.createElement(InternalStructuredItem, Object.assign({}, extractValidStructuredItemProps(structuredItemProps), { disablePaddings: disableItemPaddings }))
      );
    });
  }
  return import_react344.default.createElement(Tag, Object.assign({ ref: __internalRootRef }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default122.root, styles_css_default123.root), "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby }), contents);
}

// node_modules/@cloudscape-design/components/text-filter/internal.js
var import_react348 = __toESM(require_react());

// node_modules/@cloudscape-design/components/text-filter/analytics/use-table-integration.js
var import_react345 = __toESM(require_react());
var useTableIntegration2 = (filteringText, countText) => {
  const tableComponentContext = useTableComponentsContext();
  const countValue = (0, import_react345.useMemo)(() => parseCountValue(countText), [countText]);
  (0, import_react345.useEffect)(() => {
    var _a2;
    if ((_a2 = tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.filterRef) === null || _a2 === void 0 ? void 0 : _a2.current) {
      tableComponentContext.filterRef.current.filterText = filteringText;
      tableComponentContext.filterRef.current.filterCount = countValue;
      tableComponentContext.filterRef.current.filtered = !!filteringText;
      return () => {
        var _a3, _b, _c;
        (_a3 = tableComponentContext.filterRef.current) === null || _a3 === void 0 ? true : delete _a3.filterText;
        (_b = tableComponentContext.filterRef.current) === null || _b === void 0 ? true : delete _b.filterCount;
        (_c = tableComponentContext.filterRef.current) === null || _c === void 0 ? true : delete _c.filtered;
      };
    }
  }, [tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.filterRef, countValue, filteringText]);
};

// node_modules/@cloudscape-design/components/text-filter/search-results.js
var import_react346 = __toESM(require_react());

// node_modules/@cloudscape-design/components/text-filter/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/text-filter/styles.scoped.css";
var styles_css_default124 = {
  "root": "awsui_root_1sdq3_1y1he_145",
  "input": "awsui_input_1sdq3_1y1he_180",
  "results": "awsui_results_1sdq3_1y1he_184"
};

// node_modules/@cloudscape-design/components/text-filter/search-results.js
var LIVE_REGION_DELAY = 2e3;
var SearchResults = import_react346.default.forwardRef(({ id, renderLiveRegion, children: children2 }, ref) => {
  const liveRegionRef = (0, import_react346.useRef)(null);
  (0, import_react346.useImperativeHandle)(ref, () => ({
    reannounce: () => {
      var _a2;
      (_a2 = liveRegionRef.current) === null || _a2 === void 0 ? void 0 : _a2.reannounce();
    }
  }), []);
  return import_react346.default.createElement(
    import_react346.default.Fragment,
    null,
    import_react346.default.createElement("span", { className: styles_css_default124.results, id }, children2),
    renderLiveRegion && import_react346.default.createElement(internal_default2, { delay: LIVE_REGION_DELAY, tagName: "span", hidden: true, ref: liveRegionRef }, children2)
  );
});

// node_modules/@cloudscape-design/components/text-filter/use-debounce-search-result-callback.js
var import_react347 = __toESM(require_react());
var LIVE_REGION_DELAY2 = 2e3;
function useDebounceSearchResultCallback({ searchQuery, countText, loading, announceCallback }) {
  const loadingRef = (0, import_react347.useRef)(loading);
  const debounceLiveAnnouncement = useDebounceCallback(() => {
    if (!countText || loadingRef.current) {
      return;
    }
    announceCallback();
  }, LIVE_REGION_DELAY2);
  (0, import_react347.useEffect)(() => {
    loadingRef.current = loading;
    debounceLiveAnnouncement();
  }, [searchQuery, countText, loading, debounceLiveAnnouncement]);
}

// node_modules/@cloudscape-design/components/text-filter/internal.js
var InternalTextFilter = import_react348.default.forwardRef((_a2, ref) => {
  var { filteringText, filteringAriaLabel, filteringPlaceholder, filteringClearAriaLabel, controlId, ariaLabelledby, ariaDescribedby, disabled, countText, disableBrowserAutocorrect, onChange, onDelayedChange, loading = false, __internalRootRef } = _a2, rest = __rest(_a2, ["filteringText", "filteringAriaLabel", "filteringPlaceholder", "filteringClearAriaLabel", "controlId", "ariaLabelledby", "ariaDescribedby", "disabled", "countText", "disableBrowserAutocorrect", "onChange", "onDelayedChange", "loading", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const inputRef = (0, import_react348.useRef)(null);
  const searchResultsRef = (0, import_react348.useRef)(null);
  useForwardFocus(ref, inputRef);
  useTableIntegration2(filteringText, countText);
  const searchResultsId = useUniqueId("text-filter-search-results");
  const showResults = filteringText && countText && !disabled;
  useDebounceSearchResultCallback({
    searchQuery: filteringText,
    countText,
    loading,
    announceCallback: () => {
      var _a3;
      (_a3 = searchResultsRef.current) === null || _a3 === void 0 ? void 0 : _a3.reannounce();
    }
  });
  return import_react348.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default124.root), ref: __internalRootRef }),
    import_react348.default.createElement(internal_default12, { __inheritFormFieldProps: true, disableBrowserAutocorrect, ref: inputRef, className: styles_css_default124.input, type: "search", ariaLabel: filteringAriaLabel, placeholder: filteringPlaceholder, value: filteringText, disabled, controlId, ariaLabelledby, ariaDescribedby: joinStrings(showResults ? searchResultsId : void 0, ariaDescribedby), autoComplete: false, clearAriaLabel: filteringClearAriaLabel, onChange: (event) => fireNonCancelableEvent(onChange, { filteringText: event.detail.value }), __onDelayedInput: (event) => fireNonCancelableEvent(onDelayedChange, { filteringText: event.detail.value }) }),
    showResults ? import_react348.default.createElement(SearchResults, { renderLiveRegion: !loading, id: searchResultsId, ref: searchResultsRef }, countText) : null
  );
});
var internal_default18 = InternalTextFilter;

// node_modules/@cloudscape-design/components/collection-preferences/content-display/content-display-option.js
var import_react350 = __toESM(require_react());

// node_modules/@cloudscape-design/components/toggle/internal.js
var import_react349 = __toESM(require_react());

// node_modules/@cloudscape-design/components/toggle/style.js
function getAbstractSwitchStyles3(style, checked, disabled, readOnly) {
  var _a2, _b, _c, _d, _e, _f, _g, _h;
  let properties2 = {};
  if (SYSTEM === "core" && ((style === null || style === void 0 ? void 0 : style.input) || (style === null || style === void 0 ? void 0 : style.label))) {
    const computedState = getComputedAbstractSwitchState(checked, disabled, readOnly, false);
    properties2 = {
      control: {
        background: ((_a2 = style === null || style === void 0 ? void 0 : style.input) === null || _a2 === void 0 ? void 0 : _a2.background) && style.input.background[computedState]
      },
      label: {
        color: ((_b = style === null || style === void 0 ? void 0 : style.label) === null || _b === void 0 ? void 0 : _b.color) && style.label.color[computedState]
      },
      focusRing: {
        borderColor: (_d = (_c = style === null || style === void 0 ? void 0 : style.input) === null || _c === void 0 ? void 0 : _c.focusRing) === null || _d === void 0 ? void 0 : _d.borderColor,
        borderRadius: (_f = (_e = style === null || style === void 0 ? void 0 : style.input) === null || _e === void 0 ? void 0 : _e.focusRing) === null || _f === void 0 ? void 0 : _f.borderRadius,
        borderWidth: (_h = (_g = style === null || style === void 0 ? void 0 : style.input) === null || _g === void 0 ? void 0 : _g.focusRing) === null || _h === void 0 ? void 0 : _h.borderWidth
      }
    };
  }
  return properties2;
}
function getStyledControlStyle(style, checked, disabled, readOnly) {
  var _a2, _b;
  let properties2 = {};
  if (SYSTEM === "core" && ((_b = (_a2 = style === null || style === void 0 ? void 0 : style.input) === null || _a2 === void 0 ? void 0 : _a2.handle) === null || _b === void 0 ? void 0 : _b.background)) {
    const computedState = getComputedAbstractSwitchState(checked, disabled, readOnly, void 0);
    properties2 = {
      background: style.input.handle.background[computedState]
    };
  }
  return properties2;
}

// node_modules/@cloudscape-design/components/toggle/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/toggle/styles.scoped.css";
var styles_css_default125 = {
  "root": "awsui_root_4yi2u_v4w2d_145",
  "outline": "awsui_outline_4yi2u_v4w2d_178",
  "toggle-control": "awsui_toggle-control_4yi2u_v4w2d_201",
  "toggle-control-checked": "awsui_toggle-control-checked_4yi2u_v4w2d_214",
  "toggle-control-disabled": "awsui_toggle-control-disabled_4yi2u_v4w2d_217",
  "toggle-control-readonly": "awsui_toggle-control-readonly_4yi2u_v4w2d_223",
  "toggle-handle": "awsui_toggle-handle_4yi2u_v4w2d_227",
  "toggle-handle-checked": "awsui_toggle-handle-checked_4yi2u_v4w2d_252",
  "toggle-handle-disabled": "awsui_toggle-handle-disabled_4yi2u_v4w2d_259",
  "toggle-handle-readonly": "awsui_toggle-handle-readonly_4yi2u_v4w2d_263"
};

// node_modules/@cloudscape-design/components/toggle/internal.js
var InternalToggle = import_react349.default.forwardRef((_a2, ref) => {
  var { controlId, checked, name, disabled, readOnly, children: children2, description, ariaLabel, ariaControls, onFocus, onBlur, onChange, nativeInputAttributes, __internalRootRef, style, __injectAnalyticsComponentMetadata } = _a2, rest = __rest(_a2, ["controlId", "checked", "name", "disabled", "readOnly", "children", "description", "ariaLabel", "ariaControls", "onFocus", "onBlur", "onChange", "nativeInputAttributes", "__internalRootRef", "style", "__injectAnalyticsComponentMetadata"]);
  const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(rest);
  const baseProps = getBaseProps(rest);
  const checkboxRef = (0, import_react349.useRef)(null);
  const analyticsMetadata = {};
  const analyticsComponentMetadata = {
    name: "awsui.Toggle",
    label: { root: "self" },
    properties: {
      checked: `${!!checked}`
    }
  };
  if (__injectAnalyticsComponentMetadata) {
    analyticsMetadata.component = analyticsComponentMetadata;
  }
  if (!disabled && !readOnly) {
    analyticsMetadata.action = !checked ? "select" : "deselect";
  }
  useForwardFocus(ref, checkboxRef);
  return import_react349.default.createElement(AbstractSwitch, Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default125.root, baseProps.className), controlClassName: clsx_m_default(styles_css_default125["toggle-control"], {
    [styles_css_default125["toggle-control-checked"]]: checked,
    [styles_css_default125["toggle-control-disabled"]]: disabled,
    [styles_css_default125["toggle-control-readonly"]]: readOnly
  }), outlineClassName: styles_css_default125.outline, controlId, disabled, readOnly, label: children2, description, descriptionBottomPadding: true, ariaLabel, ariaLabelledby, ariaDescribedby, ariaControls, nativeControl: (nativeControlProps) => import_react349.default.createElement(with_native_attributes_default, Object.assign({}, nativeControlProps, {
    tag: "input",
    componentName: "Toggle",
    nativeAttributes: nativeInputAttributes,
    ref: checkboxRef,
    type: "checkbox",
    checked,
    name,
    "aria-disabled": readOnly && !disabled ? "true" : void 0,
    onFocus: () => fireNonCancelableEvent(onFocus),
    onBlur: () => fireNonCancelableEvent(onBlur),
    // empty handler to suppress React controllability warning
    onChange: () => {
    }
  })), onClick: () => {
    var _a3;
    (_a3 = checkboxRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
    fireNonCancelableEvent(onChange, { checked: !checked });
  }, styledControl: (
    /*Using span, not div for HTML validity*/
    import_react349.default.createElement("span", { className: clsx_m_default(styles_css_default125["toggle-handle"], {
      [styles_css_default125["toggle-handle-checked"]]: checked,
      [styles_css_default125["toggle-handle-disabled"]]: disabled,
      [styles_css_default125["toggle-handle-readonly"]]: readOnly
    }), style: getStyledControlStyle(style, checked, disabled, readOnly) })
  ), style: getAbstractSwitchStyles3(style, checked, disabled, readOnly), __internalRootRef }, getAnalyticsMetadataAttribute(analyticsMetadata)));
});
var internal_default19 = InternalToggle;

// node_modules/@cloudscape-design/components/collection-preferences/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/collection-preferences/styles.scoped.css";
var styles_css_default126 = {
  "visible-content": "awsui_visible-content_tc96w_via2y_153",
  "visible-content-toggle": "awsui_visible-content-toggle_tc96w_via2y_154",
  "visible-content-groups": "awsui_visible-content-groups_tc96w_via2y_155",
  "visible-content-group": "awsui_visible-content-group_tc96w_via2y_155",
  "visible-content-title": "awsui_visible-content-title_tc96w_via2y_160",
  "visible-content-group-label": "awsui_visible-content-group-label_tc96w_via2y_170",
  "visible-content-option": "awsui_visible-content-option_tc96w_via2y_176",
  "visible-content-option-label": "awsui_visible-content-option-label_tc96w_via2y_189",
  "content-display-option-toggle": "awsui_content-display-option-toggle_tc96w_via2y_212",
  "content-display-option-content": "awsui_content-display-option-content_tc96w_via2y_216",
  "content-display-option-label": "awsui_content-display-option-label_tc96w_via2y_256",
  "content-display": "awsui_content-display_tc96w_via2y_212",
  "content-display-text-filter": "awsui_content-display-text-filter_tc96w_via2y_264",
  "content-display-no-match": "awsui_content-display-no-match_tc96w_via2y_265",
  "content-display-title": "awsui_content-display-title_tc96w_via2y_269",
  "content-display-description": "awsui_content-display-description_tc96w_via2y_278",
  "content-display-option-list": "awsui_content-display-option-list_tc96w_via2y_286",
  "root": "awsui_root_tc96w_via2y_293",
  "modal-root": "awsui_modal-root_tc96w_via2y_294",
  "trigger-button": "awsui_trigger-button_tc96w_via2y_295",
  "cancel-button": "awsui_cancel-button_tc96w_via2y_296",
  "confirm-button": "awsui_confirm-button_tc96w_via2y_297",
  "custom": "awsui_custom_tc96w_via2y_298",
  "content-before": "awsui_content-before_tc96w_via2y_299",
  "second-column-small": "awsui_second-column-small_tc96w_via2y_303",
  "wrap-lines": "awsui_wrap-lines_tc96w_via2y_307",
  "striped-rows": "awsui_striped-rows_tc96w_via2y_308",
  "content-density": "awsui_content-density_tc96w_via2y_309",
  "page-size": "awsui_page-size_tc96w_via2y_310",
  "page-size-form-field": "awsui_page-size-form-field_tc96w_via2y_311",
  "page-size-radio-group": "awsui_page-size-radio-group_tc96w_via2y_312",
  "sticky-columns": "awsui_sticky-columns_tc96w_via2y_313",
  "sticky-columns-form-field": "awsui_sticky-columns-form-field_tc96w_via2y_314",
  "sticky-columns-radio-group": "awsui_sticky-columns-radio-group_tc96w_via2y_315",
  "sticky-columns-first": "awsui_sticky-columns-first_tc96w_via2y_316",
  "sticky-columns-last": "awsui_sticky-columns-last_tc96w_via2y_317"
};

// node_modules/@cloudscape-design/components/collection-preferences/content-display/content-display-option.js
var componentPrefix = "content-display-option";
var getClassName = (suffix) => styles_css_default126[[componentPrefix, suffix].filter(Boolean).join("-")];
var ContentDisplayOption = (0, import_react350.forwardRef)(({ onToggle, option }, ref) => {
  const idPrefix = useUniqueId(componentPrefix);
  const controlId = `${idPrefix}-control-${option.id}`;
  return import_react350.default.createElement(
    "div",
    { ref, className: getClassName("content") },
    import_react350.default.createElement("label", { className: getClassName("label"), htmlFor: controlId }, option.label),
    import_react350.default.createElement(
      "div",
      { className: getClassName("toggle") },
      import_react350.default.createElement(internal_default19, { checked: !!option.visible, onChange: () => onToggle && onToggle(option), disabled: option.alwaysVisible === true, controlId })
    )
  );
});
var content_display_option_default = ContentDisplayOption;

// node_modules/@cloudscape-design/components/collection-preferences/content-display/utils.js
function getSortedOptions({ options, contentDisplay }) {
  const optionsById = /* @__PURE__ */ new Map();
  for (const { id, visible } of contentDisplay) {
    optionsById.set(id, { id, label: id, visible });
  }
  for (const option of options) {
    const existing = optionsById.get(option.id);
    optionsById.set(option.id, Object.assign(Object.assign({}, option), { visible: !!(existing === null || existing === void 0 ? void 0 : existing.visible) }));
  }
  return Array.from(optionsById.values());
}
function getFilteredOptions(options, filterText) {
  filterText = filterText.trim().toLowerCase();
  if (!filterText) {
    return options;
  }
  return options.filter((option) => option.label.toLowerCase().trim().includes(filterText));
}

// node_modules/@cloudscape-design/components/collection-preferences/content-display/index.js
var componentPrefix2 = "content-display";
var getClassName2 = (suffix) => styles_css_default126[`${componentPrefix2}-${suffix}`];
function ContentDisplayPreference({ title, description, options, value = options.map(({ id }) => ({
  id,
  visible: true
})), onChange, liveAnnouncementDndStarted, liveAnnouncementDndItemReordered, liveAnnouncementDndItemCommitted, liveAnnouncementDndDiscarded, dragHandleAriaDescription, dragHandleAriaLabel, enableColumnFiltering = false, i18nStrings }) {
  const idPrefix = useUniqueId(componentPrefix2);
  const i18n = useInternalI18n("collection-preferences");
  const [columnFilteringText, setColumnFilteringText] = (0, import_react351.useState)("");
  const titleId = `${idPrefix}-title`;
  const descriptionId = `${idPrefix}-description`;
  const [sortedOptions, sortedAndFilteredOptions] = (0, import_react351.useMemo)(() => {
    const sorted = getSortedOptions({ options, contentDisplay: value });
    const filtered = getFilteredOptions(sorted, columnFilteringText);
    return [sorted, filtered];
  }, [columnFilteringText, options, value]);
  const onToggle = (option) => {
    onChange(sortedOptions.map(({ id, visible }) => ({ id, visible: id === option.id ? !option.visible : visible })));
  };
  return import_react351.default.createElement(
    "div",
    Object.assign({ className: styles_css_default126[componentPrefix2] }, getAnalyticsInnerContextAttribute("contentDisplay")),
    import_react351.default.createElement("h3", { className: getClassName2("title"), id: titleId }, i18n("contentDisplayPreference.title", title)),
    import_react351.default.createElement("p", { className: getClassName2("description"), id: descriptionId }, i18n("contentDisplayPreference.description", description)),
    enableColumnFiltering && import_react351.default.createElement(
      "div",
      { className: getClassName2("text-filter") },
      import_react351.default.createElement(internal_default18, { filteringText: columnFilteringText, filteringPlaceholder: i18n("contentDisplayPreference.i18nStrings.columnFilteringPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringPlaceholder), filteringAriaLabel: i18n("contentDisplayPreference.i18nStrings.columnFilteringAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringAriaLabel), filteringClearAriaLabel: i18n("contentDisplayPreference.i18nStrings.columnFilteringClearFilterText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringClearFilterText), onChange: ({ detail }) => setColumnFilteringText(detail.filteringText), countText: i18n("contentDisplayPreference.i18nStrings.columnFilteringCountText", (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringCountText) ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringCountText(sortedAndFilteredOptions.length) : void 0, (format3) => format3({ count: sortedAndFilteredOptions.length })) })
    ),
    sortedAndFilteredOptions.length === 0 && import_react351.default.createElement(
      "div",
      { className: getClassName2("no-match") },
      import_react351.default.createElement(
        internal_default5,
        { size: "s", alignItems: "center" },
        import_react351.default.createElement(InternalBox, { margin: { top: "m" } }, i18n("contentDisplayPreference.i18nStrings.columnFilteringNoMatchText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringNoMatchText)),
        import_react351.default.createElement(internal_default3, { onClick: () => setColumnFilteringText("") }, i18n("contentDisplayPreference.i18nStrings.columnFilteringClearFilterText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringClearFilterText))
      )
    ),
    import_react351.default.createElement(InternalList, { items: sortedAndFilteredOptions, renderItem: (item) => ({
      id: item.id,
      content: import_react351.default.createElement(content_display_option_default, { option: item, onToggle }),
      announcementLabel: item.label
    }), disableItemPaddings: true, sortable: true, sortDisabled: columnFilteringText.trim().length > 0, onSortingChange: ({ detail: { items } }) => {
      onChange(items);
    }, ariaDescribedby: descriptionId, ariaLabelledby: titleId, i18nStrings: {
      liveAnnouncementDndStarted: i18n("contentDisplayPreference.liveAnnouncementDndStarted", liveAnnouncementDndStarted, formatDndStarted),
      liveAnnouncementDndItemReordered: i18n("contentDisplayPreference.liveAnnouncementDndItemReordered", liveAnnouncementDndItemReordered, formatDndItemReordered),
      liveAnnouncementDndItemCommitted: i18n("contentDisplayPreference.liveAnnouncementDndItemCommitted", liveAnnouncementDndItemCommitted, formatDndItemCommitted),
      liveAnnouncementDndDiscarded: i18n("contentDisplayPreference.liveAnnouncementDndDiscarded", liveAnnouncementDndDiscarded),
      dragHandleAriaLabel: i18n("contentDisplayPreference.dragHandleAriaLabel", dragHandleAriaLabel),
      dragHandleAriaDescription: i18n("contentDisplayPreference.dragHandleAriaDescription", dragHandleAriaDescription)
    } })
  );
}

// node_modules/@cloudscape-design/components/collection-preferences/utils.js
var import_react354 = __toESM(require_react());

// node_modules/@cloudscape-design/components/radio-group/internal.js
var import_react353 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/forward-focus/radio-group.js
var import_react352 = __toESM(require_react());
function useRadioGroupForwardFocus(forwardedRef, items, value) {
  const itemRef = (0, import_react352.useRef)(null);
  const itemIndex = items && findIndex2(items, (item) => item.value === value);
  (0, import_react352.useImperativeHandle)(forwardedRef, () => ({
    focus() {
      var _a2;
      (_a2 = itemRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }));
  return [itemRef, itemIndex !== void 0 && itemIndex !== -1 ? itemIndex : 0];
}
function findIndex2(items, predicate) {
  for (let i2 = 0; i2 < items.length; i2++) {
    if (predicate(items[i2])) {
      return i2;
    }
  }
  return -1;
}

// node_modules/@cloudscape-design/components/radio-group/internal.js
var InternalRadioGroup = import_react353.default.forwardRef((_a2, ref) => {
  var { name, value, items, ariaLabel, ariaRequired, ariaControls, onChange, readOnly, __internalRootRef, style } = _a2, props2 = __rest(_a2, ["name", "value", "items", "ariaLabel", "ariaRequired", "ariaControls", "onChange", "readOnly", "__internalRootRef", "style"]);
  const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(props2);
  const baseProps = getBaseProps(props2);
  const generatedName = useUniqueId("awsui-radio-");
  const [radioButtonRef, radioButtonRefIndex] = useRadioGroupForwardFocus(ref, items, value);
  return import_react353.default.createElement("div", Object.assign({ role: "radiogroup", "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel, "aria-describedby": ariaDescribedby, "aria-required": ariaRequired, "aria-controls": ariaControls, "aria-readonly": readOnly ? "true" : void 0 }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default107.root), ref: __internalRootRef }), items && items.map((item, index) => import_react353.default.createElement(radio_button_default, Object.assign({ key: item.value, ref: index === radioButtonRefIndex ? radioButtonRef : void 0, checked: item.value === value, name: name || generatedName, value: item.value, label: item.label, description: item.description, disabled: item.disabled, onChange, controlId: item.controlId, readOnly, style }, getAnalyticsMetadataAttribute(!item.disabled && !readOnly ? {
    detail: {
      position: `${index + 1}`,
      value: item.value
    }
  } : {})))));
});
var internal_default20 = InternalRadioGroup;

// node_modules/@cloudscape-design/components/collection-preferences/utils.js
var copyPreferences = ({ pageSize, wrapLines, stripedRows, contentDensity, visibleContent, contentDisplay, stickyColumns, custom: custom8 }) => ({
  pageSize,
  wrapLines,
  stripedRows,
  contentDensity,
  visibleContent,
  contentDisplay,
  stickyColumns,
  custom: custom8
});
var mergePreferences = (newPref, oldPref) => {
  const newObj = Object.assign({}, oldPref);
  const prefNames = [
    "pageSize",
    "wrapLines",
    "stripedRows",
    "contentDensity",
    "visibleContent",
    "custom",
    "contentDisplay",
    "stickyColumns"
  ];
  for (const prefName of prefNames) {
    if (newPref[prefName] !== void 0) {
      newObj[prefName] = newPref[prefName];
    }
  }
  return newObj;
};
var ModalContentLayout = ({ left, right }) => {
  const [breakpoint, ref] = useContainerBreakpoints(["xs"]);
  const smallContainer = breakpoint === "default";
  const columns = left && right ? 2 : 1;
  return import_react354.default.createElement(
    "div",
    { ref },
    import_react354.default.createElement(
      ColumnLayout,
      { columns: smallContainer ? 1 : columns, variant: "text-grid" },
      left && import_react354.default.createElement("div", null, left),
      right && import_react354.default.createElement("div", { className: clsx_m_default(left && smallContainer && styles_css_default126["second-column-small"]) }, right)
    )
  );
};
var PageSizePreference = ({ title, options, value, onChange }) => {
  const i18n = useInternalI18n("collection-preferences");
  return import_react354.default.createElement(
    "div",
    Object.assign({ className: styles_css_default126["page-size"] }, getAnalyticsInnerContextAttribute("pageSize")),
    import_react354.default.createElement(
      InternalFormField,
      { label: i18n("pageSizePreference.title", title), stretch: true, className: styles_css_default126["page-size-form-field"] },
      import_react354.default.createElement(internal_default20, { className: styles_css_default126["page-size-radio-group"], value: `${value}`, items: options.map(({ label, value: value2 }) => ({ label, value: `${value2}` })), onChange: ({ detail }) => onChange(parseInt(detail.value, 10)) })
    )
  );
};
var WrapLinesPreference = ({ label, description, value, onChange }) => {
  const i18n = useInternalI18n("collection-preferences");
  return import_react354.default.createElement(
    "div",
    Object.assign({}, getAnalyticsInnerContextAttribute("wrapLines")),
    import_react354.default.createElement(internal_default16, { checked: !!value, description: i18n("wrapLinesPreference.description", description), onChange: ({ detail }) => onChange(detail.checked), className: styles_css_default126["wrap-lines"] }, i18n("wrapLinesPreference.label", label))
  );
};
function StripedRowsPreference({ label, description, value, onChange }) {
  const i18n = useInternalI18n("collection-preferences");
  return import_react354.default.createElement(
    "div",
    Object.assign({}, getAnalyticsInnerContextAttribute("stripedRows")),
    import_react354.default.createElement(internal_default16, { checked: !!value, description: i18n("stripedRowsPreference.description", description), onChange: ({ detail }) => onChange(detail.checked), className: styles_css_default126["striped-rows"] }, i18n("stripedRowsPreference.label", label))
  );
}
var ContentDensityPreference = ({ label, description, value, onChange }) => {
  const i18n = useInternalI18n("collection-preferences");
  return import_react354.default.createElement(
    "div",
    Object.assign({}, getAnalyticsInnerContextAttribute("contentDensity")),
    import_react354.default.createElement(internal_default16, { checked: value === "compact", description: i18n("contentDensityPreference.description", description), onChange: ({ detail }) => onChange(detail.checked ? "compact" : "comfortable"), className: styles_css_default126["content-density"] }, i18n("contentDensityPreference.label", label))
  );
};
var StickyPreference = ({ firstOrLast, preference, value, onChange }) => {
  const { title, description, options } = preference;
  return import_react354.default.createElement(
    "div",
    Object.assign({ className: styles_css_default126[`sticky-columns-${firstOrLast}`] }, getAnalyticsInnerContextAttribute("stickyColumns")),
    import_react354.default.createElement(
      InternalFormField,
      { className: styles_css_default126["sticky-columns-form-field"], label: title, description },
      import_react354.default.createElement(internal_default20, { className: styles_css_default126["sticky-columns-radio-group"], value: typeof value !== "undefined" ? `${value}` : null, items: options.map(({ label, value: value2 }) => ({ label, value: `${value2}` })), onChange: ({ detail }) => onChange(Number(detail.value)) })
    )
  );
};
var StickyColumnsPreference = ({ firstColumns, lastColumns, onChange, value }) => {
  return import_react354.default.createElement(
    internal_default5,
    { className: styles_css_default126["sticky-columns"], size: "l" },
    firstColumns && import_react354.default.createElement(StickyPreference, { firstOrLast: "first", preference: firstColumns, value: value === null || value === void 0 ? void 0 : value.first, onChange: (newValue) => onChange(Object.assign(Object.assign({}, value), { first: newValue })) }),
    lastColumns && import_react354.default.createElement(StickyPreference, { firstOrLast: "last", preference: lastColumns, value: value === null || value === void 0 ? void 0 : value.last, onChange: (newValue) => onChange(Object.assign(Object.assign({}, value), { last: newValue })) })
  );
};
var CustomPreference = ({ value, customPreference, onChange }) => {
  const [customState, setCustomState] = (0, import_react354.useState)(value);
  if (customPreference) {
    return import_react354.default.createElement("div", Object.assign({ className: styles_css_default126.custom }, getAnalyticsInnerContextAttribute("custom")), customPreference(customState, (value2) => {
      setCustomState(() => value2);
      onChange(value2);
    }));
  }
  return null;
};

// node_modules/@cloudscape-design/components/collection-preferences/visible-content.js
var import_react355 = __toESM(require_react());
var isVisible = (id, visibleIds) => visibleIds.indexOf(id) !== -1;
var className = (suffix) => ({
  className: styles_css_default126[`visible-content-${suffix}`]
});
function VisibleContentPreference({ title, options, value = [], onChange }) {
  const idPrefix = useUniqueId("visible-content");
  const flatOptionsIds = options.reduce((ids2, group) => [...ids2, ...group.options.reduce((groupIds, option) => [...groupIds, option.id], [])], []);
  const onToggle = (id) => {
    if (!isVisible(id, value)) {
      onChange([...value, id].sort((firstId, secondId) => flatOptionsIds.indexOf(firstId) - flatOptionsIds.indexOf(secondId)));
    } else {
      onChange(value.filter((currentId) => currentId !== id));
    }
  };
  const selectionOption = (option, optionGroupIndex, optionIndex) => {
    const labelId = `${idPrefix}-${optionGroupIndex}-${optionIndex}`;
    return import_react355.default.createElement(
      "div",
      Object.assign({ key: optionIndex }, className("option")),
      import_react355.default.createElement("label", Object.assign({}, className("option-label"), { htmlFor: labelId }), option.label),
      import_react355.default.createElement(
        "div",
        Object.assign({}, className("toggle")),
        import_react355.default.createElement(internal_default19, { checked: isVisible(option.id, value), onChange: () => onToggle(option.id), disabled: option.editable === false, controlId: labelId })
      )
    );
  };
  const outerGroupLabelId = `${idPrefix}-outer`;
  return import_react355.default.createElement(
    "div",
    Object.assign({ className: styles_css_default126["visible-content"] }, getAnalyticsInnerContextAttribute("visibleContent")),
    import_react355.default.createElement("h3", Object.assign({}, className("title"), { id: outerGroupLabelId }), title),
    import_react355.default.createElement(internal_default5, Object.assign({}, className("groups"), { size: "xs" }), options.map((optionGroup, optionGroupIndex) => {
      const groupLabelId = `${idPrefix}-${optionGroupIndex}`;
      return import_react355.default.createElement(
        "div",
        Object.assign({ key: optionGroupIndex }, className("group"), { role: "group", "aria-labelledby": `${outerGroupLabelId} ${groupLabelId}` }),
        import_react355.default.createElement("div", Object.assign({}, className("group-label"), { id: groupLabelId }), optionGroup.label),
        import_react355.default.createElement("div", null, optionGroup.options.map((option, optionIndex) => selectionOption(option, optionGroupIndex, optionIndex)))
      );
    }))
  );
}

// node_modules/@cloudscape-design/components/collection-preferences/index.js
var componentName2 = "CollectionPreferences";
function CollectionPreferences(_a2) {
  var _b;
  var { title, confirmLabel, cancelLabel, closeAriaLabel, disabled = false, onConfirm, onCancel, visibleContentPreference, contentDisplayPreference, pageSizePreference, wrapLinesPreference, stripedRowsPreference, contentDensityPreference, stickyColumnsPreference, preferences, customPreference, getModalRoot, removeModalRoot, contentBefore } = _a2, rest = __rest(_a2, ["title", "confirmLabel", "cancelLabel", "closeAriaLabel", "disabled", "onConfirm", "onCancel", "visibleContentPreference", "contentDisplayPreference", "pageSizePreference", "wrapLinesPreference", "stripedRowsPreference", "contentDensityPreference", "stickyColumnsPreference", "preferences", "customPreference", "getModalRoot", "removeModalRoot", "contentBefore"]);
  const parentMetadata = (0, import_react356.useContext)(CollectionPreferencesMetadata);
  const { __internalRootRef } = useBaseComponent("CollectionPreferences", {
    props: {},
    metadata: Object.assign(Object.assign({}, parentMetadata), { hasStripedRowsPreference: !!stripedRowsPreference, hasVisibleContentPreference: !!visibleContentPreference, hasContentDisplayPreference: !!contentDisplayPreference, hasContentDensityPreference: !!contentDensityPreference, hasStickyColumnsPreference: !!stickyColumnsPreference, hasContentDisplayColumnFiltering: !!(contentDisplayPreference === null || contentDisplayPreference === void 0 ? void 0 : contentDisplayPreference.enableColumnFiltering), visibleContentOptionsCount: (_b = visibleContentPreference === null || visibleContentPreference === void 0 ? void 0 : visibleContentPreference.options) === null || _b === void 0 ? void 0 : _b.length })
  });
  checkControlled("CollectionPreferences", "preferences", preferences, "onConfirm", onConfirm);
  const i18n = useInternalI18n("collection-preferences");
  const baseProps = getBaseProps(rest);
  const [modalVisible, setModalVisible] = (0, import_react356.useState)(false);
  const [temporaryPreferences, setTemporaryPreferences] = (0, import_react356.useState)(copyPreferences(preferences || {}));
  const triggerRef = (0, import_react356.useRef)(null);
  const dialogPreviouslyOpen = (0, import_react356.useRef)(false);
  (0, import_react356.useEffect)(() => {
    var _a3;
    if (!modalVisible) {
      if (dialogPreviouslyOpen.current) {
        (_a3 = triggerRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
      }
    } else {
      dialogPreviouslyOpen.current = true;
    }
  }, [modalVisible]);
  const onConfirmListener = () => {
    setModalVisible(false);
    fireNonCancelableEvent(onConfirm, temporaryPreferences);
  };
  const onCancelListener = () => {
    fireNonCancelableEvent(onCancel, {});
    setModalVisible(false);
    setTemporaryPreferences(copyPreferences(preferences || {}));
  };
  const hasContentOnTheLeft = !!(pageSizePreference || wrapLinesPreference || stripedRowsPreference || contentDensityPreference || stickyColumnsPreference || customPreference);
  const hasContentOnTheRight = !!(visibleContentPreference || contentDisplayPreference);
  const onChange = (changedPreferences) => setTemporaryPreferences(mergePreferences(changedPreferences, temporaryPreferences));
  if (visibleContentPreference && contentDisplayPreference) {
    warnOnce(componentName2, "You provided both `visibleContentPreference` and `contentDisplayPreference` props. `visibleContentPreference` will be ignored and only `contentDisplayPreference` will be rendered.");
  }
  const referrerId = useUniqueId();
  const tableComponentContext = useTableComponentsContext();
  (0, import_react356.useEffect)(() => {
    var _a3;
    if ((_a3 = tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.preferencesRef) === null || _a3 === void 0 ? void 0 : _a3.current) {
      tableComponentContext.preferencesRef.current.pageSize = preferences === null || preferences === void 0 ? void 0 : preferences.pageSize;
      if (preferences === null || preferences === void 0 ? void 0 : preferences.contentDisplay) {
        tableComponentContext.preferencesRef.current.visibleColumns = preferences === null || preferences === void 0 ? void 0 : preferences.contentDisplay.filter((column) => column.visible).map((column) => column.id);
      } else if (preferences === null || preferences === void 0 ? void 0 : preferences.visibleContent) {
        tableComponentContext.preferencesRef.current.visibleColumns = [...preferences.visibleContent];
      }
      return () => {
        var _a4, _b2;
        (_a4 = tableComponentContext.preferencesRef.current) === null || _a4 === void 0 ? true : delete _a4.pageSize;
        (_b2 = tableComponentContext.preferencesRef.current) === null || _b2 === void 0 ? true : delete _b2.visibleColumns;
      };
    }
  }, [
    tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.preferencesRef,
    preferences === null || preferences === void 0 ? void 0 : preferences.contentDisplay,
    preferences === null || preferences === void 0 ? void 0 : preferences.visibleContent,
    preferences === null || preferences === void 0 ? void 0 : preferences.pageSize
  ]);
  return import_react356.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default126.root), ref: __internalRootRef }),
    import_react356.default.createElement(
      "div",
      Object.assign({ id: referrerId }, getAnalyticsMetadataAttribute({ component: getComponentAnalyticsMetadata(disabled, preferences) })),
      import_react356.default.createElement(InternalButton, { ref: triggerRef, className: clsx_m_default(styles_css_default126["trigger-button"], styles_css_default118["trigger-button"]), disabled, ariaLabel: i18n("title", title), onClick: () => {
        setTemporaryPreferences(copyPreferences(preferences || {}));
        setModalVisible(true);
      }, variant: "icon", iconName: "settings", formAction: "none", analyticsAction: "open" }),
      !disabled && modalVisible && import_react356.default.createElement(
        InternalModal,
        { className: styles_css_default126["modal-root"], visible: true, getModalRoot, removeModalRoot, header: i18n("title", title), referrerId, footer: import_react356.default.createElement(
          InternalBox,
          { float: "right" },
          import_react356.default.createElement(
            internal_default5,
            { direction: "horizontal", size: "xs" },
            import_react356.default.createElement(InternalButton, { className: styles_css_default126["cancel-button"], variant: "link", formAction: "none", onClick: onCancelListener, analyticsAction: "cancel" }, i18n("cancelLabel", cancelLabel)),
            import_react356.default.createElement(InternalButton, { className: styles_css_default126["confirm-button"], variant: "primary", formAction: "none", onClick: onConfirmListener, analyticsAction: "confirm" }, i18n("confirmLabel", confirmLabel))
          )
        ), closeAriaLabel: closeAriaLabel || cancelLabel, size: hasContentOnTheLeft && hasContentOnTheRight ? "large" : "medium", onDismiss: onCancelListener },
        import_react356.default.createElement("div", { className: styles_css_default126["content-before"] }, contentBefore),
        import_react356.default.createElement(ModalContentLayout, { left: hasContentOnTheLeft && import_react356.default.createElement(
          internal_default5,
          { size: "l" },
          pageSizePreference && import_react356.default.createElement(PageSizePreference, Object.assign({ value: temporaryPreferences.pageSize }, pageSizePreference, { onChange: (pageSize) => onChange({ pageSize }) })),
          wrapLinesPreference && import_react356.default.createElement(WrapLinesPreference, Object.assign({ value: temporaryPreferences.wrapLines }, wrapLinesPreference, { onChange: (wrapLines) => onChange({ wrapLines }) })),
          stripedRowsPreference && import_react356.default.createElement(StripedRowsPreference, Object.assign({ value: temporaryPreferences.stripedRows }, stripedRowsPreference, { onChange: (stripedRows) => onChange({ stripedRows }) })),
          contentDensityPreference && import_react356.default.createElement(ContentDensityPreference, Object.assign({ value: temporaryPreferences.contentDensity }, contentDensityPreference, { onChange: (contentDensity) => onChange({ contentDensity }) })),
          stickyColumnsPreference && import_react356.default.createElement(StickyColumnsPreference, Object.assign({ value: temporaryPreferences.stickyColumns }, stickyColumnsPreference, { onChange: (stickyColumns) => onChange({ stickyColumns }) })),
          customPreference && import_react356.default.createElement(CustomPreference, { value: temporaryPreferences.custom, customPreference, onChange: (custom8) => onChange({ custom: custom8 }) })
        ), right: contentDisplayPreference ? import_react356.default.createElement(ContentDisplayPreference, Object.assign({}, contentDisplayPreference, { value: temporaryPreferences.contentDisplay, onChange: (contentDisplay) => onChange({ contentDisplay }) })) : visibleContentPreference && import_react356.default.createElement(VisibleContentPreference, Object.assign({ value: temporaryPreferences.visibleContent }, visibleContentPreference, { onChange: (visibleItems) => onChange({ visibleContent: visibleItems }) })) })
      )
    )
  );
}
applyDisplayName(CollectionPreferences, componentName2);

// node_modules/@cloudscape-design/components/column-layout/index.js
var import_react357 = __toESM(require_react());
function ColumnLayout2(_a2) {
  var { columns = 1, variant = "default", borders = "none", disableGutters = false } = _a2, props2 = __rest(_a2, ["columns", "variant", "borders", "disableGutters"]);
  const baseComponentProps = useBaseComponent("ColumnLayout", {
    props: { borders, columns, disableGutters, minColumnWidth: props2.minColumnWidth, variant }
  });
  const externalProps = getExternalProps(props2);
  return import_react357.default.createElement(ColumnLayout, Object.assign({ columns, variant, borders, disableGutters }, externalProps, baseComponentProps));
}
applyDisplayName(ColumnLayout2, "ColumnLayout");

// node_modules/@cloudscape-design/components/container/index.js
var import_react359 = __toESM(require_react());

// node_modules/@cloudscape-design/components/container/internal-do-not-use-core.js
var import_react358 = __toESM(require_react());
function Container(_a2) {
  var { variant = "default", disableHeaderPaddings = false, disableContentPaddings = false, fitHeight = false } = _a2, props2 = __rest(_a2, ["variant", "disableHeaderPaddings", "disableContentPaddings", "fitHeight"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props2);
  const baseComponentProps = useBaseComponent("Container", {
    props: {
      disableContentPaddings,
      disableHeaderPaddings,
      fitHeight,
      variant
    },
    metadata: {
      hasInstanceIdentifier: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier)
    }
  }, analyticsMetadata);
  const externalProps = getExternalProps(props2);
  const analyticsComponentMetadata = {
    name: "awsui.Container",
    label: { root: "self" }
  };
  return import_react358.default.createElement(
    AnalyticsFunnelSubStep,
    { subStepIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, subStepErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext },
    import_react358.default.createElement(InternalContainerAsSubstep, Object.assign({ variant, disableContentPaddings, disableHeaderPaddings, fitHeight }, props2, externalProps, baseComponentProps, getAnalyticsMetadataAttribute({ component: analyticsComponentMetadata })))
  );
}
applyDisplayName(Container, "Container");

// node_modules/@cloudscape-design/components/container/index.js
var Container2 = (props2) => {
  validateProps("Container", props2, ["disableFooterPaddings", "style"], {}, "console");
  return import_react359.default.createElement(Container, props2);
};
applyDisplayName(Container2, "Container");
var container_default = Container2;

// node_modules/@cloudscape-design/components/content-layout/index.js
var import_react363 = __toESM(require_react());

// node_modules/@cloudscape-design/components/content-layout/internal.js
var import_react362 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-dynamic-overlap/index.js
var import_react360 = __toESM(require_react());
var import_react361 = __toESM(require_react());
function useDynamicOverlap(props2) {
  var _a2;
  const disabled = (_a2 = props2 === null || props2 === void 0 ? void 0 : props2.disabled) !== null && _a2 !== void 0 ? _a2 : false;
  const setDynamicOverlapHeight = (0, import_react360.useContext)(DynamicOverlapContext);
  const overlapElementRef = (0, import_react361.useRef)(null);
  const getElement = (0, import_react361.useCallback)(() => overlapElementRef.current, [overlapElementRef]);
  const updateState = (0, import_react361.useCallback)((entry) => {
    if (!disabled) {
      setDynamicOverlapHeight(entry.contentBoxHeight);
    }
  }, [disabled, setDynamicOverlapHeight]);
  useResizeObserver(getElement, updateState);
  (0, import_react360.useLayoutEffect)(function handleDynamicOverlapHeight() {
    return () => {
      if (!disabled) {
        setDynamicOverlapHeight(0);
      }
    };
  }, [disabled, setDynamicOverlapHeight]);
  return overlapElementRef;
}

// node_modules/@cloudscape-design/components/content-layout/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/content-layout/styles.scoped.css";
var styles_css_default127 = {
  "layout": "awsui_layout_5gtk3_1x0v8_145",
  "background": "awsui_background_5gtk3_1x0v8_159",
  "is-overlap-disabled": "awsui_is-overlap-disabled_5gtk3_1x0v8_164",
  "header-background": "awsui_header-background_5gtk3_1x0v8_167",
  "notifications": "awsui_notifications_5gtk3_1x0v8_171",
  "breadcrumbs": "awsui_breadcrumbs_5gtk3_1x0v8_176",
  "default-padding": "awsui_default-padding_5gtk3_1x0v8_181",
  "header-wrapper": "awsui_header-wrapper_5gtk3_1x0v8_185",
  "with-divider": "awsui_with-divider_5gtk3_1x0v8_190",
  "content": "awsui_content_5gtk3_1x0v8_193",
  "has-header": "awsui_has-header_5gtk3_1x0v8_197",
  "is-visual-refresh": "awsui_is-visual-refresh_5gtk3_1x0v8_204",
  "has-default-background": "awsui_has-default-background_5gtk3_1x0v8_204",
  "has-notifications": "awsui_has-notifications_5gtk3_1x0v8_208"
};

// node_modules/@cloudscape-design/components/content-layout/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/content-layout/test-classes/styles.scoped.css";
var styles_css_default128 = {
  "header": "awsui_header_64tge_1scxg_5",
  "secondary-header": "awsui_secondary-header_64tge_1scxg_9",
  "notifications": "awsui_notifications_64tge_1scxg_13",
  "breadcrumbs": "awsui_breadcrumbs_64tge_1scxg_17"
};

// node_modules/@cloudscape-design/components/content-layout/internal.js
var halfGeckoMaxCssLength = ((1 << 30) - 1) / 120;
function InternalContentLayout(_a2) {
  var { children: children2, disableOverlap, header, headerVariant = "default", headerBackgroundStyle, __internalRootRef, maxContentWidth = Number.MAX_VALUE, breadcrumbs, notifications, defaultPadding: defaultPadding2, secondaryHeader } = _a2, rest = __rest(_a2, ["children", "disableOverlap", "header", "headerVariant", "headerBackgroundStyle", "__internalRootRef", "maxContentWidth", "breadcrumbs", "notifications", "defaultPadding", "secondaryHeader"]);
  const mainRef = (0, import_react362.useRef)(null);
  const mergedRef = useMergeRefs(mainRef, __internalRootRef);
  const baseProps = getBaseProps(rest);
  const isVisualRefresh = useVisualRefresh();
  const mode = useCurrentMode(mainRef);
  const overlapElement = useDynamicOverlap();
  const isOverlapDisabled = !children2 || disableOverlap;
  const contentHeaderClassName = headerVariant === "high-contrast" && isVisualRefresh ? highContrastHeaderClassName : "";
  return import_react362.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default127.layout, {
      [styles_css_default127["is-overlap-disabled"]]: isOverlapDisabled,
      [styles_css_default127["is-visual-refresh"]]: isVisualRefresh,
      [styles_css_default127["has-header"]]: !!header,
      [styles_css_default127["default-padding"]]: !!defaultPadding2,
      [styles_css_default127["has-notifications"]]: !!notifications
    }), style: {
      [custom_css_properties_default.contentLayoutMaxContentWidth]: maxContentWidth < Number.MAX_VALUE ? `${maxContentWidth}px` : `${halfGeckoMaxCssLength}px`
    }, ref: mergedRef }),
    import_react362.default.createElement("div", { className: clsx_m_default(styles_css_default127.background, { [styles_css_default127["has-default-background"]]: !headerBackgroundStyle }, contentHeaderClassName), ref: overlapElement }, headerBackgroundStyle && import_react362.default.createElement("div", { className: styles_css_default127["header-background"], style: {
      background: typeof headerBackgroundStyle === "function" ? headerBackgroundStyle(mode) : headerBackgroundStyle
    } })),
    notifications && import_react362.default.createElement("div", { className: clsx_m_default(styles_css_default127.notifications, styles_css_default128.notifications, contentHeaderClassName) }, notifications),
    breadcrumbs && import_react362.default.createElement("div", { className: clsx_m_default(styles_css_default127.breadcrumbs, styles_css_default128.breadcrumbs, contentHeaderClassName) }, breadcrumbs),
    header && !secondaryHeader && import_react362.default.createElement("div", { className: clsx_m_default(styles_css_default127["header-wrapper"], styles_css_default128.header, contentHeaderClassName, {
      [styles_css_default127["with-divider"]]: headerVariant === "divider"
    }) }, header),
    header && secondaryHeader && import_react362.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default127["header-wrapper"], {
        [styles_css_default127["with-divider"]]: headerVariant === "divider"
      }) },
      import_react362.default.createElement(
        internal_default11,
        { gridDefinition: [{ colspan: { default: 12, xs: 9 } }, { colspan: { default: 12, xs: 3 } }] },
        import_react362.default.createElement("div", { className: clsx_m_default(styles_css_default128.header, contentHeaderClassName) }, header),
        import_react362.default.createElement("div", { className: styles_css_default128["secondary-header"] }, secondaryHeader)
      )
    ),
    import_react362.default.createElement("div", { className: clsx_m_default(styles_css_default127.content, {
      [styles_css_default127["with-divider"]]: headerVariant === "divider"
    }) }, children2)
  );
}

// node_modules/@cloudscape-design/components/content-layout/index.js
function ContentLayout(props2) {
  const baseComponentProps = useBaseComponent("ContentLayout", {
    props: { disableOverlap: props2.disableOverlap }
  });
  return import_react363.default.createElement(InternalContentLayout, Object.assign({}, props2, baseComponentProps));
}
applyDisplayName(ContentLayout, "ContentLayout");

// node_modules/@cloudscape-design/components/copy-to-clipboard/index.js
var import_react367 = __toESM(require_react());

// node_modules/@cloudscape-design/components/copy-to-clipboard/internal.js
var import_react366 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/internal.js
var import_react365 = __toESM(require_react());

// node_modules/@cloudscape-design/components/popover/conditional-live-region.js
var import_react364 = __toESM(require_react());
var ConditionalLiveRegion = ({ condition, children: children2 }) => {
  if (condition) {
    return import_react364.default.createElement(internal_default2, null, children2);
  }
  return import_react364.default.createElement(import_react364.default.Fragment, null, children2);
};
var conditional_live_region_default = ConditionalLiveRegion;

// node_modules/@cloudscape-design/components/popover/internal.js
var internal_default21 = import_react365.default.forwardRef(InternalPopover);
function InternalPopover(_a2, ref) {
  var { position = "right", size = "medium", fixedWidth = false, triggerType = "text", dismissButton: dismissButton3 = true, children: children2, header, content, triggerAriaLabel, wrapTriggerText = true, isInline = false, renderWithPortal = false, __onOpen, __internalRootRef, __closeAnalyticsAction } = _a2, restProps = __rest(_a2, ["position", "size", "fixedWidth", "triggerType", "dismissButton", "children", "header", "content", "triggerAriaLabel", "wrapTriggerText", "isInline", "renderWithPortal", "__onOpen", "__internalRootRef", "__closeAnalyticsAction"]);
  const baseProps = getBaseProps(restProps);
  const triggerRef = (0, import_react365.useRef)(null);
  const popoverRef = (0, import_react365.useRef)(null);
  const clickFrameId = (0, import_react365.useRef)(null);
  const i18n = useInternalI18n("popover");
  const dismissAriaLabel = i18n("dismissAriaLabel", restProps.dismissAriaLabel);
  const [visible, setVisible] = (0, import_react365.useState)(false);
  const focusTrigger = (0, import_react365.useCallback)(() => {
    var _a3, _b;
    if (["text", "text-inline"].includes(triggerType)) {
      (_a3 = triggerRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
    } else if (triggerRef.current) {
      (_b = getFirstFocusable2(triggerRef.current)) === null || _b === void 0 ? void 0 : _b.focus();
    }
  }, [triggerType]);
  const onTriggerClick = (0, import_react365.useCallback)(() => {
    fireNonCancelableEvent(__onOpen);
    setVisible(true);
  }, [__onOpen]);
  const onDismiss = (0, import_react365.useCallback)(() => {
    setVisible(false);
    focusTrigger();
  }, [focusTrigger]);
  const onTriggerKeyDown = (0, import_react365.useCallback)((event) => {
    const isEscapeKey = event.keyCode === KeyCode2.escape;
    const isTabKey = event.keyCode === KeyCode2.tab;
    if (isEscapeKey && visible) {
      event.stopPropagation();
    }
    if (isTabKey || isEscapeKey) {
      setVisible(false);
    }
  }, [visible]);
  (0, import_react365.useImperativeHandle)(ref, () => ({
    dismiss: () => {
      setVisible(false);
    },
    focus: () => {
      setVisible(false);
      focusTrigger();
    }
  }));
  (0, import_react365.useEffect)(() => {
    if (!triggerRef.current) {
      return;
    }
    const document2 = triggerRef.current.ownerDocument;
    const onDocumentClick = () => {
      if (clickFrameId.current === null) {
        setVisible(false);
      }
    };
    document2.addEventListener("mousedown", onDocumentClick);
    return () => {
      document2.removeEventListener("mousedown", onDocumentClick);
    };
  }, []);
  const popoverClasses = usePortalModeClasses(triggerRef);
  const triggerProps = {
    // https://github.com/microsoft/TypeScript/issues/36659
    ref: triggerRef,
    onClick: onTriggerClick,
    onKeyDown: onTriggerKeyDown,
    className: clsx_m_default(styles_css_default2.trigger, styles_css_default2[`trigger-type-${triggerType}`])
  };
  const { tabIndex: triggerTabIndex } = useSingleTabStopNavigation(triggerRef);
  const referrerId = useUniqueId();
  const popoverContent = import_react365.default.createElement(
    "div",
    { className: clsx_m_default(popoverClasses, !renderWithPortal && styles_css_default2["popover-inline-content"]), "data-awsui-referrer-id": referrerId },
    import_react365.default.createElement(
      PopoverContainer,
      { size, fixedWidth, position, trackRef: triggerRef, arrow: (position2) => import_react365.default.createElement(arrow_default, { position: position2 }), renderWithPortal, zIndex: renderWithPortal ? 7e3 : void 0 },
      import_react365.default.createElement(
        LinkDefaultVariantContext.Provider,
        { value: { defaultVariant: "primary" } },
        import_react365.default.createElement(
          PopoverBody,
          { dismissButton: dismissButton3, dismissAriaLabel, header, onDismiss, overflowVisible: "both", closeAnalyticsAction: __closeAnalyticsAction },
          import_react365.default.createElement(conditional_live_region_default, { condition: !dismissButton3 }, content)
        )
      )
    )
  );
  const mergedRef = useMergeRefs(popoverRef, __internalRootRef);
  return import_react365.default.createElement(
    "span",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default2.root, baseProps.className, triggerType === "filtering-token" && styles_css_default2["root-filtering-token"], isInline && styles_css_default2["no-wrap"]), ref: mergedRef, onMouseDown: () => {
      clickFrameId.current = requestAnimationFrame(() => {
        clickFrameId.current = null;
      });
    } }),
    ["text", "text-inline"].includes(triggerType) ? import_react365.default.createElement("button", Object.assign({}, triggerProps, { className: clsx_m_default(triggerProps.className, wrapTriggerText === false && styles_css_default2["overflow-ellipsis"]), tabIndex: triggerTabIndex, type: "button", "aria-haspopup": "dialog", id: referrerId, "aria-label": triggerAriaLabel }), children2) : import_react365.default.createElement("span", Object.assign({}, triggerProps, { id: referrerId }), children2),
    visible && import_react365.default.createElement(reset_contexts_for_modal_default, null, renderWithPortal ? import_react365.default.createElement(Portal, null, popoverContent) : popoverContent)
  );
}

// node_modules/@cloudscape-design/components/copy-to-clipboard/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/copy-to-clipboard/styles.scoped.css";
var styles_css_default129 = {
  "root": "awsui_root_5a145_19zbi_9",
  "inline-container": "awsui_inline-container_5a145_19zbi_13",
  "inline-container-trigger": "awsui_inline-container-trigger_5a145_19zbi_16"
};

// node_modules/@cloudscape-design/components/copy-to-clipboard/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/copy-to-clipboard/test-classes/styles.scoped.css";
var styles_css_default130 = {
  "root": "awsui_root_ljpwc_30z5b_5",
  "text-to-copy": "awsui_text-to-copy_ljpwc_30z5b_9",
  "text-to-display": "awsui_text-to-display_ljpwc_30z5b_13"
};

// node_modules/@cloudscape-design/components/copy-to-clipboard/internal.js
function InternalCopyToClipboard(_a2) {
  var { variant = "button", copyButtonAriaLabel, copyButtonText, copySuccessText, copyErrorText, textToCopy, textToDisplay, popoverRenderWithPortal, disabled, disabledReason, __internalRootRef } = _a2, restProps = __rest(_a2, ["variant", "copyButtonAriaLabel", "copyButtonText", "copySuccessText", "copyErrorText", "textToCopy", "textToDisplay", "popoverRenderWithPortal", "disabled", "disabledReason", "__internalRootRef"]);
  const [status, setStatus] = (0, import_react366.useState)("pending");
  const [statusText, setStatusText] = (0, import_react366.useState)("");
  const baseProps = getBaseProps(restProps);
  const onClick = () => {
    if (!navigator.clipboard) {
      setStatus("error");
      setStatusText(copyErrorText);
      return;
    }
    setStatus("pending");
    setStatusText("");
    navigator.clipboard.writeText(textToCopy).then(() => {
      setStatus("success");
      setStatusText(copySuccessText);
    }).catch(() => {
      setStatus("error");
      setStatusText(copyErrorText);
    });
  };
  const triggerVariant = {
    button: "normal",
    icon: "icon",
    inline: "inline-icon"
  }[variant];
  const isInline = variant === "inline";
  const button = import_react366.default.createElement(internal_default3, { ariaLabel: copyButtonAriaLabel !== null && copyButtonAriaLabel !== void 0 ? copyButtonAriaLabel : copyButtonText, iconName: "copy", variant: triggerVariant, wrapText: false, formAction: "none", disabled, disabledReason }, copyButtonText);
  const trigger = disabled ? button : import_react366.default.createElement(internal_default21, { isInline, size: "medium", position: "top", triggerType: "custom", dismissButton: false, renderWithPortal: popoverRenderWithPortal, content: import_react366.default.createElement(StatusIndicator, { type: status }, statusText), __onOpen: onClick }, button);
  return import_react366.default.createElement("span", Object.assign({}, baseProps, { ref: __internalRootRef, className: clsx_m_default(baseProps.className, styles_css_default129.root, styles_css_default130.root) }), isInline ? import_react366.default.createElement(
    "span",
    { className: styles_css_default129["inline-container"] },
    import_react366.default.createElement("span", { className: styles_css_default129["inline-container-trigger"] }, trigger),
    import_react366.default.createElement("span", { className: clsx_m_default(styles_css_default130["text-to-display"], styles_css_default130["text-to-copy"]) }, textToDisplay !== null && textToDisplay !== void 0 ? textToDisplay : textToCopy)
  ) : trigger);
}

// node_modules/@cloudscape-design/components/copy-to-clipboard/index.js
function CopyToClipboard(_a2) {
  var { variant = "button", popoverRenderWithPortal = false } = _a2, restProps = __rest(_a2, ["variant", "popoverRenderWithPortal"]);
  const baseProps = useBaseComponent("CopyToClipboard", {
    props: { variant }
  });
  const filteredProps = getExternalProps(restProps);
  return import_react367.default.createElement(InternalCopyToClipboard, Object.assign({ variant, popoverRenderWithPortal }, baseProps, filteredProps));
}
applyDisplayName(CopyToClipboard, "CopyToClipboard");

// node_modules/@cloudscape-design/components/date-input/index.js
var import_react371 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-input/internal-do-not-use-core.js
var import_react370 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-input/internal.js
var import_react369 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/masked-input/index.js
var import_react368 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/masked-input/keyboard-handler.js
var backspaceHandler = (initialValue, format3, selectionStart, selectionEnd) => {
  const multiCharDelete = selectionStart !== selectionEnd;
  if (multiCharDelete) {
    const isCursorAtEnd = selectionEnd === initialValue.length;
    if (!isCursorAtEnd) {
      return format3.replaceDigitsWithZeroes(initialValue, selectionStart, selectionEnd);
    }
    return {
      value: initialValue.slice(0, selectionStart),
      position: selectionStart
    };
  }
  const isSeparator = format3.isSegmentStart(selectionStart);
  const atEnd = selectionStart === initialValue.length;
  if (!atEnd) {
    if (isSeparator) {
      return format3.deleteSeparator(initialValue, selectionStart);
    } else {
      return format3.deleteDigit(initialValue, selectionStart);
    }
  }
  if (isSeparator) {
    return {
      value: initialValue.slice(0, selectionStart - 2),
      position: selectionStart - 2
    };
  }
  return {
    value: initialValue.slice(0, selectionStart - 1),
    position: selectionStart - 1
  };
};
var keyHandler = (initialValue, key2, format3, selectionStart, selectionEnd) => {
  let value = initialValue;
  const position = selectionStart;
  if (selectionStart === value.length && value.length === format3.getMaxLength()) {
    return { value, position };
  }
  if (selectionStart !== value.length && selectionEnd === value.length) {
    const sliceEnd = format3.isCursorAtSeparator(selectionStart) ? selectionStart + 1 : selectionStart;
    value = initialValue.slice(0, sliceEnd);
  }
  if (format3.isCursorAtSeparator(position)) {
    return { value, position: position + 1 };
  }
  return format3.processKey(value, key2, position);
};
var enterHandler = (value, format3) => {
  if (!value) {
    return { value: "", position: 0 };
  }
  const autoCompletedValue = format3.autoComplete(value);
  const position = autoCompletedValue.length;
  return { value: autoCompletedValue, position };
};

// node_modules/@cloudscape-design/components/internal/components/masked-input/utils/keys.js
var isSpecialCommand = (keyCode) => {
  return keyCode > 7 && keyCode < 47 && keyCode !== KeyCode2.space;
};
var isClipboardCommand = (ctrlKey, metaKey) => ctrlKey || metaKey;
var isCommand = (keyCode, ctrlKey, metaKey) => isSpecialCommand(keyCode) || isClipboardCommand(ctrlKey, metaKey);
var isDigit = (char) => !isNaN(parseInt(char, 10));

// node_modules/@cloudscape-design/components/internal/components/masked-input/use-mask.js
var onAutoComplete = (value, onChange, maskFormat) => {
  if (!value) {
    return;
  }
  const autoCompletedValue = maskFormat.autoComplete(value);
  if (autoCompletedValue !== value) {
    onChange(autoCompletedValue);
  }
};
var preventDefault2 = (event, result) => result && event.preventDefault();
var useMask = ({ value = "", onBlur, onChange, onKeyDown, format: format3, inputRef, autofix = false, disableAutocompleteOnBlur = false, setPosition, showUnmaskedValue = false }) => {
  if (!format3.isValid(value) && !showUnmaskedValue) {
    warnOnce("useMask", `Invalid string "${value}" provided`);
  }
  const onMaskChange = (updatedValue) => {
    const autofixedUpdatedValue = autofix ? format3.correctMinMaxValues(updatedValue) : updatedValue;
    if (autofixedUpdatedValue === value || !format3.isValid(autofixedUpdatedValue)) {
      return;
    }
    onChange(autofixedUpdatedValue);
  };
  const initialValue = autofix ? format3.correctMinMaxValues(value) : value;
  const maskedValue = format3.getValidValue(initialValue);
  return {
    value: maskedValue,
    onKeyDown: (event) => {
      var _a2, _b;
      const selectionStart = ((_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.selectionStart) || 0;
      const selectionEnd = ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.selectionEnd) || 0;
      let result;
      const { keyCode, key: key2, ctrlKey, metaKey } = event.detail;
      if (isDigit(key2) || format3.isSeparator(key2)) {
        result = keyHandler(maskedValue, key2, format3, selectionStart, selectionEnd);
        preventDefault2(event, result);
      } else if (keyCode === KeyCode2.backspace) {
        result = backspaceHandler(maskedValue, format3, selectionStart, selectionEnd);
        preventDefault2(event, result);
      } else if (keyCode === KeyCode2.enter) {
        result = enterHandler(maskedValue, format3);
      } else if (!isCommand(keyCode, ctrlKey, metaKey)) {
        event.preventDefault();
      }
      if (result) {
        const { value: value2, position } = result;
        onMaskChange(value2);
        setPosition(position);
      }
      onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);
    },
    onChange: ({ detail }) => onMaskChange(detail.value),
    onBlur: () => {
      if (!disableAutocompleteOnBlur) {
        onAutoComplete(maskedValue, onChange, format3);
      }
      onBlur === null || onBlur === void 0 ? void 0 : onBlur();
    },
    onPaste: (event) => {
      var _a2, _b;
      if (event.clipboardData) {
        const text = event.clipboardData.getData("text");
        const selectionStart = ((_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.selectionStart) || 0;
        const selectionEnd = ((_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.selectionEnd) || 0;
        const formattedText = format3.formatPastedText(text, maskedValue, selectionStart, selectionEnd);
        onMaskChange(formattedText);
      }
    }
  };
};
var use_mask_default = useMask;

// node_modules/@cloudscape-design/components/internal/components/masked-input/utils/strings.js
var insertAt = (text, toInsert, start, end = start) => text.slice(0, start) + toInsert + text.slice(end);

// node_modules/@cloudscape-design/components/internal/components/masked-input/utils/mask-format.js
var MaskFormat = class {
  constructor({ separator, inputSeparators = [], segments }) {
    this.positionFormats = /* @__PURE__ */ new Map();
    this.segments = [];
    this.separator = separator;
    this.inputSeparators = [...inputSeparators, separator];
    this.enrichSegmentDefinitions(segments);
  }
  tryAppendSeparator(value) {
    const withSeparator = `${value}${this.separator}`;
    return this.isValid(withSeparator) ? withSeparator : value;
  }
  isSeparator(key2) {
    return this.inputSeparators.indexOf(key2) !== -1;
  }
  isValid(value) {
    const inputSegments = value.split(this.separator);
    if (inputSegments.length > this.segments.length) {
      return false;
    }
    return inputSegments.every((segmentValue, i2) => {
      const segment = this.segments[i2];
      if (segmentValue === "") {
        if (i2 === inputSegments.length - 1) {
          return true;
        } else {
          return false;
        }
      }
      if (!segmentValue.match(/^\d+$/)) {
        return false;
      }
      if (segmentValue.length < segment.length && i2 !== inputSegments.length - 1) {
        return false;
      }
      const intValue = parseInt(segmentValue, 10);
      if (segmentValue.length > segment.length) {
        return false;
      }
      if (intValue < segment.min || intValue > segment.max(value)) {
        if (i2 === inputSegments.length - 1 && segmentValue.length < segment.length) {
          return true;
        }
        return false;
      }
      return true;
    });
  }
  getValidValue(value) {
    let validValue = value;
    do {
      if (this.isValid(validValue)) {
        return this.tryAppendSeparator(validValue);
      }
      validValue = validValue.substring(0, validValue.length - 1);
    } while (validValue.length > 0);
    return "";
  }
  autoComplete(value) {
    const [lastSegmentValue, ...completeSegmentValues] = value.split(this.separator).reverse();
    const lastSegment = this.segments[completeSegmentValues.length];
    const paddedLastSegmentValue = this.padWithDefaultValue(lastSegmentValue, lastSegment);
    const partial = [...completeSegmentValues.reverse(), paddedLastSegmentValue];
    while (partial.length < this.segments.length) {
      const nextSegment = this.segments[partial.length];
      const segmentValue = this.padWithDefaultValue("", nextSegment);
      partial.push(segmentValue);
    }
    value = partial.join(this.separator);
    value = this.correctMinMaxValues(value);
    return value;
  }
  getSegmentValueWithAddition(position, value, enteredDigit) {
    const segment = this.positionFormats.get(position);
    const segmentValue = value.substr(segment.start, segment.length);
    const segmentPosition = position - segment.start;
    const newValue = insertAt(segmentValue, enteredDigit, segmentPosition, segmentPosition + 1);
    return parseInt(newValue, 10);
  }
  replaceDigitsWithZeroes(value, cursorStart, cursorEnd) {
    const position = this.isCursorAtSeparator(cursorStart) ? cursorStart + 1 : cursorStart;
    if (this.isCursorAtSeparator(cursorStart)) {
      cursorStart++;
    }
    if (!this.isSegmentStart(cursorStart)) {
      const segment = this.positionFormats.get(cursorStart);
      value = insertAt(value, padLeftZeros("", segment.end - cursorStart), cursorStart, segment.end);
      cursorStart = segment.end + 1;
    }
    let currentSegment;
    while (cursorStart < cursorEnd && (currentSegment = this.positionFormats.get(cursorStart + 1))) {
      const insertionEnd = Math.min(cursorEnd, currentSegment.end);
      value = insertAt(value, padLeftZeros("", insertionEnd - currentSegment.start), currentSegment.start, insertionEnd);
      cursorStart = insertionEnd + 1;
    }
    value = this.correctMinMaxValues(value);
    return {
      value,
      position
    };
  }
  handleSeparatorInput(value, position) {
    if (position === value.length && !this.isSegmentStart(position)) {
      const segment = this.positionFormats.get(position);
      let segmentValue = value.substr(segment.start, segment.length);
      segmentValue = this.padWithDefaultValue(segmentValue, segment);
      value = insertAt(value, segmentValue, segment.start, segment.end);
      value = this.correctMinMaxValues(value);
      return {
        value,
        position: value.length
      };
    }
  }
  isCursorAtSeparator(position) {
    return 0 < position && position < this.getMaxLength() && this.positionFormats.get(position) === void 0;
  }
  isSegmentStart(position) {
    return position === 0 || this.isCursorAtSeparator(position - 1);
  }
  getSegmentMaxValue(value, position) {
    return this.positionFormats.get(position).max(value);
  }
  getSegmentMinValue(value, position) {
    return this.positionFormats.get(position).min;
  }
  getMaxLength() {
    const last = this.segments[this.segments.length - 1];
    return last.start + last.length;
  }
  deleteSeparator(value, position) {
    value = insertAt(value, "0", position - 2, position - 1);
    return {
      value: this.correctMinMaxValues(value),
      position: position - 2
    };
  }
  deleteDigit(value, position) {
    value = insertAt(value, "0", position - 1, position);
    const length = value.length;
    if (value.slice(length - 2) === "0:") {
      value = value.slice(0, length - 2);
    }
    return {
      value: this.correctMinMaxValues(value),
      position: position - 1
    };
  }
  correctMinMaxValues(value) {
    let segment = this.positionFormats.get(0);
    while (segment && value.length >= segment.end) {
      const segmentValue = parseInt(value.substr(segment.start, segment.length), 10);
      const segmentMax = segment.max(value);
      if (segmentValue < segment.min) {
        let toInsert = segment.min.toFixed();
        toInsert = padLeftZeros(toInsert, segment.length);
        value = insertAt(value, toInsert, segment.start, segment.end);
      }
      if (segmentValue > segmentMax) {
        value = insertAt(value, segmentMax.toFixed(), segment.start, segment.end);
      }
      segment = this.positionFormats.get(segment.end + 1);
    }
    return value.substr(0, this.segments[this.segments.length - 1].end);
  }
  formatPastedText(text, value, cursorStart, cursorEnd) {
    const keyArr = text.trim().split("");
    let position = cursorStart;
    let formattedValue = value;
    if (cursorEnd > cursorStart && cursorEnd === value.length) {
      formattedValue = value.slice(0, cursorStart);
    }
    for (const key2 of keyArr) {
      if (position >= this.getMaxLength()) {
        break;
      }
      const result = this.processKey(formattedValue, key2, position);
      formattedValue = result.value;
      position = result.position;
    }
    return this.tryAppendSeparator(formattedValue);
  }
  processKey(initialValue, key2, initialPosition) {
    let value = initialValue;
    let position = initialPosition;
    if (this.isSeparator(key2)) {
      const result = this.handleSeparatorInput(value, position);
      if (result) {
        value = result.value;
        position = result.position;
      }
    } else {
      const isCursorAtEnd = position === value.length;
      const segmentValue = this.getSegmentValueWithAddition(position, value, key2);
      const segmentMaxValue = this.getSegmentMaxValue(value, position);
      const segmentMinValue = this.getSegmentMinValue(value, position);
      const firstDigitGreater = parseInt(key2, 10) > parseInt(segmentMaxValue.toFixed()[0], 10);
      const isValidPosition = isCursorAtEnd || segmentValue.toFixed().length === 1;
      const exceedsMaxAtSegmentStart = this.isSegmentStart(position) && isValidPosition && firstDigitGreater;
      if (exceedsMaxAtSegmentStart) {
        value = insertAt(value, `0${key2}`, position, position + 2);
        position += 2;
      } else if (segmentValue > segmentMaxValue && this.isSegmentStart(position)) {
        value = insertAt(value, segmentMaxValue.toFixed(), position, position + segmentMaxValue.toFixed().length);
        position += segmentMaxValue.toFixed().length;
      } else if (segmentValue > segmentMaxValue) {
        value = insertAt(value, segmentMaxValue.toFixed(), position - 1, position + 1);
        position += 1;
      } else if (segmentValue < segmentMinValue && !this.isSegmentStart(position)) {
        value = insertAt(value, segmentMinValue.toFixed(), position, position + 1);
        position += 1;
      } else {
        value = insertAt(value, key2, position, position + 1);
        position += 1;
      }
    }
    value = this.tryAppendSeparator(value);
    if (this.isCursorAtSeparator(position)) {
      position++;
    }
    return { value, position };
  }
  padWithDefaultValue(segmentValue, segment) {
    let defaultValue4 = (segment.default || segment.min).toFixed();
    defaultValue4 = padLeftZeros(defaultValue4, segment.length);
    return insertAt(defaultValue4, segmentValue, segment.length - segmentValue.length, segment.length);
  }
  enrichSegmentDefinitions(segments) {
    this.positionFormats = /* @__PURE__ */ new Map();
    this.segments = [];
    let position = 0;
    for (const segment of segments) {
      const max3 = segment.max;
      const fullSegment = Object.assign(Object.assign({}, segment), { max: typeof max3 === "number" ? () => max3 : max3, start: position, end: position + segment.length });
      this.segments.push(fullSegment);
      for (let j = 0; j < fullSegment.length; j++) {
        this.positionFormats.set(position++, fullSegment);
      }
      position++;
    }
  }
};
var mask_format_default = MaskFormat;

// node_modules/@cloudscape-design/components/internal/components/masked-input/index.js
var MaskedInput = import_react368.default.forwardRef((_a2, ref) => {
  var { value, onBlur, onChange, onKeyDown, mask, autofix = false, disableAutocompleteOnBlur = false, showUnmaskedValue = false, nativeInputAttributes } = _a2, rest = __rest(_a2, ["value", "onBlur", "onChange", "onKeyDown", "mask", "autofix", "disableAutocompleteOnBlur", "showUnmaskedValue", "nativeInputAttributes"]);
  const baseProps = getBaseProps(rest);
  const formFieldContext = useFormFieldContext(rest);
  const inputRef = import_react368.default.useRef(null);
  const [cursorPosition, setCursorPosition] = (0, import_react368.useState)(null);
  (0, import_react368.useLayoutEffect)(() => {
    var _a3;
    if (cursorPosition !== null) {
      (_a3 = inputRef.current) === null || _a3 === void 0 ? void 0 : _a3.setSelectionRange(cursorPosition, cursorPosition);
    }
  }, [cursorPosition, inputRef]);
  const _b = use_mask_default({
    format: new mask_format_default(mask),
    value,
    inputRef,
    autofix,
    disableAutocompleteOnBlur,
    onChange: (value2) => !rest.readOnly && fireNonCancelableEvent(onChange, { value: value2 }),
    onKeyDown: (event) => !rest.readOnly && onKeyDown && fireCancelableEvent(onKeyDown, event.detail, event),
    onBlur: () => fireNonCancelableEvent(onBlur),
    setPosition: setCursorPosition,
    showUnmaskedValue
  }), { onPaste } = _b, maskProps = __rest(_b, ["onPaste"]);
  const inputProps = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, rest), baseProps), formFieldContext), maskProps), { value: showUnmaskedValue ? value : maskProps.value });
  const mergedRef = useMergeRefs(ref, inputRef);
  return import_react368.default.createElement(internal_default12, Object.assign({}, inputProps, { ref: mergedRef, nativeInputAttributes: processAttributes({
    onPaste
  }, nativeInputAttributes, "MaskedInput") }));
});
var masked_input_default = MaskedInput;

// node_modules/@cloudscape-design/components/date-input/utils.js
var yearMask = { min: 0, max: 9999, default: 2e3, length: 4 };
var monthMask = { min: 1, max: 12, length: 2 };
var dayMask = { min: 1, max: getMaxDaysForDate, length: 2 };
function getMaxDaysForDate(value) {
  const baseDate = displayToIso(value).substring(0, 7);
  return getDaysInMonth(parseDate2(baseDate));
}
var generateMaskArgs = ({
  granularity = "day",
  /**
   * There are only two options, 'iso' and 'slashed' which is our current default format. If more formats are entered
   * we should take the formatting type rather than the boolean when we make an update.
   */
  isIso = false
} = {}) => {
  return {
    separator: isIso ? "-" : "/",
    inputSeparators: isIso ? ["/", ".", " "] : ["-", ".", " "],
    segments: granularity === "month" ? [yearMask, monthMask] : [yearMask, monthMask, dayMask]
  };
};
function normalizeIsoDateString(dateString, granularity) {
  if (!dateString) {
    return "";
  }
  const match2 = dateString.match(/^(\d{4})(?:-(\d{1,2})?)?(?:-(\d{1,2})?)?$/);
  if (!match2) {
    return "";
  }
  const [, year, month, day] = match2;
  if (granularity === "day" && (month === null || month === void 0 ? void 0 : month.length) === 2 && (day === null || day === void 0 ? void 0 : day.length) === 2) {
    return `${year}-${month}-${day}`;
  }
  if ((month === null || month === void 0 ? void 0 : month.length) === 2) {
    return `${year}-${month}`;
  }
  return year;
}

// node_modules/@cloudscape-design/components/date-input/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/date-input/styles.scoped.css";
var styles_css_default131 = {
  "root": "awsui_root_yodkx_im8v7_5"
};

// node_modules/@cloudscape-design/components/date-input/internal.js
var InternalDateInput = import_react369.default.forwardRef((_a2, ref) => {
  var { value, onChange, onBlur, onFocus, granularity = "day", locale: locale3, format: format3 = "slashed", inputFormat = "slashed", __internalRootRef, __injectAnalyticsComponentMetadata = false } = _a2, props2 = __rest(_a2, ["value", "onChange", "onBlur", "onFocus", "granularity", "locale", "format", "inputFormat", "__internalRootRef", "__injectAnalyticsComponentMetadata"]);
  const [isFocused, setIsFocused] = (0, import_react369.useState)(false);
  const inputRef = (0, import_react369.useRef)(null);
  const isIso = format3 === "iso" || format3 === "long-localized" && inputFormat === "iso";
  useForwardFocus(ref, inputRef);
  const onInputFocus = (event) => {
    setIsFocused(true);
    onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);
  };
  const onInputBlur = (event) => {
    setIsFocused(false);
    onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);
  };
  const onInputChange = (event) => {
    const isNonFocusedLongLocalized = format3 === "long-localized" && !(isFocused || props2.readOnly);
    if (!isNonFocusedLongLocalized) {
      fireNonCancelableEvent(onChange, { value: displayToIso(event.detail.value) });
    }
  };
  const usesLongLocalizedValue = format3 === "long-localized" && !(isFocused && !props2.readOnly);
  const displayedValue = (0, import_react369.useMemo)(() => {
    if (!value) {
      return "";
    }
    const isoValue = displayToIso(value);
    const formatProps = { hideTimeOffset: true, isDateOnly: true, isMonthOnly: granularity === "month", locale: locale3 };
    const normalizedValue = normalizeIsoDateString(isoValue, granularity);
    return usesLongLocalizedValue && normalizedValue ? formatDateLocalized(Object.assign({ date: normalizedValue }, formatProps)) : isIso ? format_date_iso_default(Object.assign({ date: isoValue }, formatProps)) : isoToDisplay(isoValue);
  }, [value, isIso, granularity, locale3, usesLongLocalizedValue]);
  const componentAnalyticsMetadata2 = {
    name: "awsui.DateInput",
    label: "input",
    properties: {
      value: value || ""
    }
  };
  return import_react369.default.createElement(masked_input_default, Object.assign({ ref: inputRef }, props2, { value: displayedValue, onChange: onInputChange, onFocus: onInputFocus, onBlur: onInputBlur, className: clsx_m_default(styles_css_default131.root, props2.className), mask: generateMaskArgs({ granularity, isIso }), autofix: !usesLongLocalizedValue, disableAutocompleteOnBlur: false, disableBrowserAutocorrect: true, showUnmaskedValue: usesLongLocalizedValue, autoComplete: false, __internalRootRef }, __injectAnalyticsComponentMetadata ? getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 }) : {}));
});
var internal_default22 = InternalDateInput;

// node_modules/@cloudscape-design/components/date-input/internal-do-not-use-core.js
var DateInput = import_react370.default.forwardRef((props2, ref) => {
  const baseComponentProps = useBaseComponent("DateInput", {
    props: { autoFocus: props2.autoFocus, readOnly: props2.readOnly }
  });
  return import_react370.default.createElement(internal_default22, Object.assign({}, props2, baseComponentProps, { __injectAnalyticsComponentMetadata: true, ref }));
});
applyDisplayName(DateInput, "DateInput");
var internal_do_not_use_core_default7 = DateInput;

// node_modules/@cloudscape-design/components/date-input/index.js
var DateInput2 = import_react371.default.forwardRef((props2, ref) => {
  validateProps("DateInput", props2, ["nativeInputAttributes"], {}, "console");
  return import_react371.default.createElement(internal_do_not_use_core_default7, { ref, ...props2 });
});
applyDisplayName(DateInput2, "DateInput");
var date_input_default = DateInput2;

// node_modules/@cloudscape-design/components/date-picker/index.js
var import_react373 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-focus-tracker.js
var import_react372 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/focus-tracker.js
var FocusTracker = class {
  constructor(node, { onFocusEnter, onFocusLeave }) {
    this.node = node;
    this.currentlyFocused = false;
    this.focusInListener = (event) => {
      const focusIsInside = nodeBelongs2(this.node, event.target);
      if (!this.currentlyFocused && focusIsInside) {
        this.triggerFocus();
      }
    };
    this.focusOutListener = (event) => {
      const nextFocused = event.relatedTarget;
      const isNextFocusedInParent = !nodeBelongs2(this.node, nextFocused);
      if (this.currentlyFocused && (nextFocused === null || isNextFocusedInParent)) {
        this.triggerBlur();
      }
    };
    this.onFocusEnter = onFocusEnter;
    this.onFocusLeave = onFocusLeave;
    this.controller = new AbortController();
  }
  initialize() {
    this.currentlyFocused = nodeBelongs2(this.node, document.activeElement);
    document.addEventListener("focusin", this.focusInListener, { signal: this.controller.signal });
    document.addEventListener("focusout", this.focusOutListener, { signal: this.controller.signal });
  }
  destroy() {
    this.controller.abort();
  }
  triggerBlur() {
    this.currentlyFocused = false;
    this.onFocusLeave();
  }
  triggerFocus() {
    this.currentlyFocused = true;
    this.onFocusEnter();
  }
};

// node_modules/@cloudscape-design/components/internal/hooks/use-focus-tracker.js
var useFocusTracker = ({ rootRef, onBlur, onFocus }) => {
  const focusTracker = (0, import_react372.useRef)(null);
  (0, import_react372.useEffect)(() => {
    if (!rootRef.current) {
      return;
    }
    focusTracker.current = new FocusTracker(rootRef.current, {
      onFocusLeave: () => {
        fireNonCancelableEvent(onBlur);
      },
      onFocusEnter: () => {
        fireNonCancelableEvent(onFocus);
      }
    });
    focusTracker.current.initialize();
    return () => {
      var _a2;
      (_a2 = focusTracker.current) === null || _a2 === void 0 ? void 0 : _a2.destroy();
    };
  }, [rootRef, onBlur, onFocus]);
};

// node_modules/@cloudscape-design/components/date-picker/utils.js
function isValidFullDate({ date: date2, granularity }) {
  const regex = granularity === "month" ? /^\d{4}-\d{2}(-\d{2})?$/ : /^\d{4}-\d{2}-\d{2}$/;
  return !!date2.match(regex);
}
function getSelectedDateLabel({ date: date2, granularity, locale: locale3 }) {
  return granularity === "month" ? renderMonthAndYear(locale3, date2) : getDateLabel(locale3, date2);
}
function getBaseDateLabel({ date: date2, granularity, locale: locale3 }) {
  return granularity === "month" ? renderYear(locale3, date2) : renderMonthAndYear(locale3, date2);
}

// node_modules/@cloudscape-design/components/date-picker/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/date-picker/styles.scoped.css";
var styles_css_default132 = {
  "root": "awsui_root_145pa_1qi9j_145",
  "focus-lock": "awsui_focus-lock_145pa_1qi9j_177",
  "calendar": "awsui_calendar_145pa_1qi9j_181",
  "date-picker-container": "awsui_date-picker-container_145pa_1qi9j_197",
  "date-picker-trigger": "awsui_date-picker-trigger_145pa_1qi9j_202",
  "date-picker-input": "awsui_date-picker-input_145pa_1qi9j_206",
  "open-calendar-button": "awsui_open-calendar-button_145pa_1qi9j_211"
};

// node_modules/@cloudscape-design/components/date-picker/index.js
var DatePicker = import_react373.default.forwardRef((_a2, ref) => {
  var _b, _c, _d;
  var { locale: locale3, startOfWeek: startOfWeek2, isDateEnabled, dateDisabledReason, nextMonthAriaLabel, previousMonthAriaLabel, todayAriaLabel, i18nStrings, placeholder = "", value = "", readOnly = false, disabled = false, onBlur, autoFocus = false, onChange, onFocus, name, ariaLabel, ariaRequired, controlId, invalid, warning, openCalendarAriaLabel, expandToViewport, granularity = "day", format: format3 = "slashed", inputFormat = "slashed" } = _a2, restProps = __rest(_a2, ["locale", "startOfWeek", "isDateEnabled", "dateDisabledReason", "nextMonthAriaLabel", "previousMonthAriaLabel", "todayAriaLabel", "i18nStrings", "placeholder", "value", "readOnly", "disabled", "onBlur", "autoFocus", "onChange", "onFocus", "name", "ariaLabel", "ariaRequired", "controlId", "invalid", "warning", "openCalendarAriaLabel", "expandToViewport", "granularity", "format", "inputFormat"]);
  const { __internalRootRef } = useBaseComponent("DatePicker", {
    props: { autoFocus, expandToViewport, granularity, readOnly },
    metadata: { hasDisabledReasons: Boolean(dateDisabledReason) }
  });
  checkControlled("DatePicker", "value", value, "onChange", onChange);
  const contextLocale = useLocale();
  const normalizedLocale = normalizeLocale("DatePicker", locale3 || contextLocale);
  const baseProps = getBaseProps(restProps);
  const [isDropDownOpen, setIsDropDownOpen] = (0, import_react373.useState)(false);
  const { ariaLabelledby, ariaDescribedby } = useFormFieldContext(restProps);
  const internalInputRef = (0, import_react373.useRef)(null);
  const buttonRef = (0, import_react373.useRef)(null);
  useForwardFocus(ref, internalInputRef);
  const rootRef = (0, import_react373.useRef)(null);
  const dropdownId = useUniqueId("calender");
  const calendarDescriptionId = useUniqueId("calendar-description-");
  const mergedRef = useMergeRefs(rootRef, __internalRootRef);
  useFocusTracker({ rootRef, onBlur, onFocus });
  const onDropdownCloseHandler = (0, import_react373.useCallback)(() => setIsDropDownOpen(false), [setIsDropDownOpen]);
  const onButtonClickHandler = () => {
    if (!isDropDownOpen) {
      setIsDropDownOpen(true);
    }
  };
  const onWrapperKeyDownHandler = (event) => {
    var _a3;
    if (event.keyCode === KeyCode2.escape && isDropDownOpen) {
      event.stopPropagation();
      (_a3 = buttonRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
      setIsDropDownOpen(false);
    }
  };
  const onInputChangeHandler = (event) => {
    fireNonCancelableEvent(onChange, { value: event.detail.value });
  };
  const onInputBlurHandler = () => {
    if (!isDropDownOpen) {
      setIsDropDownOpen(false);
    }
  };
  const parsedValue = value && value.length >= 4 ? parseDate2(value) : null;
  const baseDate = parsedValue || /* @__PURE__ */ new Date();
  const hasFullValue = isValidFullDate({ date: value, granularity });
  const buttonAriaLabel = openCalendarAriaLabel && openCalendarAriaLabel(hasFullValue && parsedValue ? getSelectedDateLabel({ date: parsedValue, granularity, locale: normalizedLocale }) : null);
  const trigger = import_react373.default.createElement(
    "div",
    { className: styles_css_default132["date-picker-trigger"] },
    import_react373.default.createElement(
      "div",
      { className: styles_css_default132["date-picker-input"] },
      import_react373.default.createElement(internal_default22, { name, invalid, warning, controlId, ariaLabelledby, ariaDescribedby, ariaLabel, ariaRequired, value, disabled, readOnly, onChange: onInputChangeHandler, onBlur: onInputBlurHandler, placeholder, ref: internalInputRef, autoFocus, onFocus: onDropdownCloseHandler, granularity, locale: locale3, format: format3, inputFormat })
    ),
    import_react373.default.createElement(
      "div",
      null,
      import_react373.default.createElement(InternalButton, { iconName: "calendar", className: styles_css_default132["open-calendar-button"], onClick: onButtonClickHandler, ref: buttonRef, ariaLabel: buttonAriaLabel, disabled: disabled || readOnly, formAction: "none" })
    )
  );
  baseProps.className = clsx_m_default(baseProps.className, styles_css_default132.root, styles_css_default132["date-picker-container"]);
  return import_react373.default.createElement("div", Object.assign({}, baseProps, { ref: mergedRef, onKeyDown: !disabled && !readOnly ? onWrapperKeyDownHandler : void 0 }), disabled || readOnly ? trigger : import_react373.default.createElement(dropdown_default, { stretchWidth: true, stretchHeight: true, open: isDropDownOpen, onDropdownClose: onDropdownCloseHandler, trigger, expandToViewport, scrollable: false, dropdownId }, isDropDownOpen && import_react373.default.createElement(
    focus_lock_default,
    { className: styles_css_default132["focus-lock"], autoFocus: true },
    import_react373.default.createElement(
      "div",
      { tabIndex: 0, className: styles_css_default132.calendar, role: "dialog" },
      import_react373.default.createElement(Calendar, { value, onChange: (e3) => {
        var _a3;
        fireNonCancelableEvent(onChange, e3.detail);
        (_a3 = buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
        setIsDropDownOpen(false);
      }, locale: normalizedLocale, startOfWeek: startOfWeek2, ariaDescribedby: calendarDescriptionId, ariaLabel, ariaLabelledby, granularity, isDateEnabled, dateDisabledReason, i18nStrings: Object.assign(Object.assign({}, i18nStrings), { todayAriaLabel: (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.todayAriaLabel) !== null && _b !== void 0 ? _b : todayAriaLabel, nextMonthAriaLabel: (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextMonthAriaLabel) !== null && _c !== void 0 ? _c : nextMonthAriaLabel, previousMonthAriaLabel: (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousMonthAriaLabel) !== null && _d !== void 0 ? _d : previousMonthAriaLabel }) }),
      import_react373.default.createElement(internal_default2, { id: calendarDescriptionId, hidden: true, tagName: "span" }, getBaseDateLabel({ date: baseDate, granularity, locale: normalizedLocale }))
    )
  )));
});
applyDisplayName(DatePicker, "DatePicker");
var date_picker_default = DatePicker;

// node_modules/@cloudscape-design/components/date-range-picker/index.js
var import_react388 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/dropdown.js
var import_react387 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/calendar/index.js
var import_react381 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/index.js
var import_react376 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/utils/has-value.js
function hasValue(value) {
  return value !== null && value !== void 0;
}

// node_modules/@cloudscape-design/components/date-range-picker/calendar/utils.js
function findDateToFocus(selected, baseDate, isDateEnabled) {
  if (selected && isDateEnabled(selected) && isSameMonth(selected, baseDate)) {
    return selected;
  }
  const today = /* @__PURE__ */ new Date();
  if (isDateEnabled(today) && isSameMonth(today, baseDate)) {
    return today;
  }
  if (isDateEnabled(baseDate)) {
    return baseDate;
  }
  return null;
}
function findMonthToFocus(selected, baseDate, isMonthEnabled) {
  if (selected && isMonthEnabled(selected) && isSameYear(selected, baseDate)) {
    return selected;
  }
  const today = /* @__PURE__ */ new Date();
  if (isMonthEnabled(today) && isSameYear(today, baseDate)) {
    return today;
  }
  if (isMonthEnabled(baseDate)) {
    return baseDate;
  }
  return null;
}
function findMonthToDisplay(value, isSingleGrid) {
  if (value.start.date) {
    const startDate = parseDate2(value.start.date);
    if (isSingleGrid) {
      return startOfMonth(startDate);
    }
    return startOfMonth(addMonths(startDate, 1));
  }
  if (value.end.date) {
    return startOfMonth(parseDate2(value.end.date));
  }
  return startOfMonth(Date.now());
}
function findYearToDisplay(value, isSingleGrid) {
  if (value.start.date) {
    const startDate = parseDate2(value.start.date);
    if (isSingleGrid) {
      return startOfYear(startDate);
    }
    return startOfYear(addYears(startDate, 1));
  }
  if (value.end.date) {
    return startOfYear(parseDate2(value.end.date));
  }
  return startOfYear(Date.now());
}
var generateI18NFallbackKey = (isMonthPicker, isDateOnly) => {
  if (isMonthPicker) {
    return "i18nStrings.monthConstraintText";
  }
  if (isDateOnly) {
    return "i18nStrings.dateConstraintText";
  }
  return "i18nStrings.dateTimeConstraintText";
};
var generateI18NKey = (isMonthPicker, isDateOnly, isIso) => {
  if (isMonthPicker) {
    return isIso ? "i18nStrings.isoMonthConstraintText" : "i18nStrings.slashedMonthConstraintText";
  }
  if (isDateOnly) {
    return isIso ? "i18nStrings.isoDateConstraintText" : "i18nStrings.slashedDateConstraintText";
  }
  return isIso ? "i18nStrings.isoDateTimeConstraintText" : "i18nStrings.slashedDateTimeConstraintText";
};
var provideI18N = (i18nStrings, isMonthPicker, isDateOnly, isIso) => {
  let result;
  if (isMonthPicker) {
    result = isIso ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.isoMonthConstraintText : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.slashedMonthConstraintText;
    if (!result) {
      result = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.monthConstraintText;
    }
  } else if (isDateOnly) {
    result = isIso ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.isoDateConstraintText : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.slashedDateConstraintText;
    if (!result) {
      result = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dateConstraintText;
    }
  }
  if (!result) {
    result = isIso ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.isoDateTimeConstraintText : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.slashedDateTimeConstraintText;
    if (!result) {
      result = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dateTimeConstraintText;
    }
  }
  return result;
};

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/grid.js
var import_react375 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/grid-cell.js
var import_react374 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/date-range-picker/test-classes/styles.scoped.css";
var styles_css_default133 = {
  "root": "awsui_root_1afkv_i99li_5",
  "dropdown": "awsui_dropdown_1afkv_i99li_6",
  "label": "awsui_label_1afkv_i99li_7",
  "relative-range-radio-group": "awsui_relative-range-radio-group_1afkv_i99li_8",
  "custom-range-duration-input": "awsui_custom-range-duration-input_1afkv_i99li_9",
  "custom-range-unit-select": "awsui_custom-range-unit-select_1afkv_i99li_10",
  "mode-switch": "awsui_mode-switch_1afkv_i99li_11",
  "first-grid": "awsui_first-grid_1afkv_i99li_12",
  "second-grid": "awsui_second-grid_1afkv_i99li_13",
  "calendar-header": "awsui_calendar-header_1afkv_i99li_14",
  "calendar-next-page-btn": "awsui_calendar-next-page-btn_1afkv_i99li_15",
  "calendar-prev-page-btn": "awsui_calendar-prev-page-btn_1afkv_i99li_16",
  "calendar-next-month-btn": "awsui_calendar-next-month-btn_1afkv_i99li_17",
  "calendar-prev-month-btn": "awsui_calendar-prev-month-btn_1afkv_i99li_18",
  "calendar-aria-live": "awsui_calendar-aria-live_1afkv_i99li_19",
  "calendar-date": "awsui_calendar-date_1afkv_i99li_20",
  "calendar-week": "awsui_calendar-week_1afkv_i99li_21",
  "calendar-month": "awsui_calendar-month_1afkv_i99li_22",
  "calendar-quarter": "awsui_calendar-quarter_1afkv_i99li_23",
  "today": "awsui_today_1afkv_i99li_24",
  "this-month": "awsui_this-month_1afkv_i99li_25",
  "day-header": "awsui_day-header_1afkv_i99li_26",
  "start-date": "awsui_start-date_1afkv_i99li_27",
  "end-date": "awsui_end-date_1afkv_i99li_28",
  "start-time-input": "awsui_start-time-input_1afkv_i99li_29",
  "end-time-input": "awsui_end-time-input_1afkv_i99li_30",
  "start-date-input": "awsui_start-date-input_1afkv_i99li_31",
  "end-date-input": "awsui_end-date-input_1afkv_i99li_32",
  "start-month-input": "awsui_start-month-input_1afkv_i99li_33",
  "end-month-input": "awsui_end-month-input_1afkv_i99li_34",
  "disabled-reason-tooltip": "awsui_disabled-reason-tooltip_1afkv_i99li_35",
  "validation-section": "awsui_validation-section_1afkv_i99li_36",
  "validation-error": "awsui_validation-error_1afkv_i99li_37",
  "clear-button": "awsui_clear-button_1afkv_i99li_38",
  "apply-button": "awsui_apply-button_1afkv_i99li_39",
  "cancel-button": "awsui_cancel-button_1afkv_i99li_40"
};

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/grid-cell.js
var GridCell2 = (0, import_react374.forwardRef)((props2, focusedDateRef) => {
  const { disabledReason } = props2, rest = __rest(props2, ["disabledReason"]);
  const isDisabledWithReason = !!disabledReason;
  const { targetProps, descriptionEl } = useHiddenDescription(disabledReason);
  const ref = (0, import_react374.useRef)(null);
  const [showTooltip, setShowTooltip] = (0, import_react374.useState)(false);
  return import_react374.default.createElement(
    "td",
    Object.assign({ ref: useMergeRefs(focusedDateRef, ref) }, rest, isDisabledWithReason ? targetProps : {}, { onFocus: (event) => {
      if (rest.onFocus) {
        rest.onFocus(event);
      }
      if (isDisabledWithReason) {
        setShowTooltip(true);
      }
    }, onBlur: (event) => {
      if (rest.onBlur) {
        rest.onBlur(event);
      }
      if (isDisabledWithReason) {
        setShowTooltip(false);
      }
    }, onMouseEnter: (event) => {
      if (rest.onMouseEnter) {
        rest.onMouseEnter(event);
      }
      if (isDisabledWithReason) {
        setShowTooltip(true);
      }
    }, onMouseLeave: (event) => {
      if (rest.onMouseLeave) {
        rest.onMouseLeave(event);
      }
      if (isDisabledWithReason) {
        setShowTooltip(false);
      }
    } }),
    props2.children,
    isDisabledWithReason && import_react374.default.createElement(
      import_react374.default.Fragment,
      null,
      descriptionEl,
      showTooltip && import_react374.default.createElement(Tooltip, { className: styles_css_default133["disabled-reason-tooltip"], trackRef: ref, value: disabledReason, onDismiss: () => setShowTooltip(false) })
    )
  );
});
applyDisplayName(GridCell2, "GridCell");

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/intl.js
function setDayIndex2(date2, dayIndex) {
  const diff = dayIndex - date2.getDay();
  date2.setDate(date2.getDate() + diff);
}
function renderDayName2(locale3, dayIndex, mode) {
  const tempDate = /* @__PURE__ */ new Date();
  setDayIndex2(tempDate, dayIndex);
  return tempDate.toLocaleDateString(locale3, { weekday: mode });
}
function renderMonthAndYear2(locale3, baseDate) {
  const result = baseDate.toLocaleDateString(locale3, {
    year: "numeric",
    month: "long"
  });
  return result;
}
var dayLabelCache2 = /* @__PURE__ */ new Map();
function getDateLabel2(locale3, date2, mode = "full") {
  const cacheKey = locale3 + date2.getTime() + mode;
  const cachedValue = dayLabelCache2.get(cacheKey);
  if (cachedValue) {
    return cachedValue;
  }
  const value = date2.toLocaleDateString(locale3, {
    weekday: mode === "full" ? "long" : void 0,
    month: "long",
    day: "numeric",
    year: "numeric"
  });
  dayLabelCache2.set(cacheKey, value);
  return value;
}
function renderDateAnnouncement({ date: date2, isCurrent, locale: locale3, granularity = "day", currentLabel }) {
  const formattedDate = granularity === "month" ? renderMonthAndYear2(locale3, date2) : getDateLabel2(locale3, date2, "short");
  if (isCurrent && currentLabel) {
    return `${formattedDate}. ${currentLabel}`;
  }
  return formattedDate;
}

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/styles.scoped.css";
var styles_css_default134 = {
  "grid": "awsui_grid_1mfbn_96osr_149",
  "grid-cell": "awsui_grid-cell_1mfbn_96osr_154",
  "day-header": "awsui_day-header_1mfbn_96osr_161",
  "day": "awsui_day_1mfbn_96osr_161",
  "month": "awsui_month_1mfbn_96osr_172",
  "day-inner": "awsui_day-inner_1mfbn_96osr_220",
  "month-inner": "awsui_month-inner_1mfbn_96osr_221",
  "in-first-row": "awsui_in-first-row_1mfbn_96osr_228",
  "in-previous-month": "awsui_in-previous-month_1mfbn_96osr_228",
  "in-previous-year": "awsui_in-previous-year_1mfbn_96osr_229",
  "last-day-of-month": "awsui_last-day-of-month_1mfbn_96osr_233",
  "last-month-of-year": "awsui_last-month-of-year_1mfbn_96osr_234",
  "in-next-month": "awsui_in-next-month_1mfbn_96osr_238",
  "in-next-year": "awsui_in-next-year_1mfbn_96osr_239",
  "in-first-column": "awsui_in-first-column_1mfbn_96osr_243",
  "in-visible-calendar": "awsui_in-visible-calendar_1mfbn_96osr_246",
  "in-current-month": "awsui_in-current-month_1mfbn_96osr_246",
  "in-current-year": "awsui_in-current-year_1mfbn_96osr_246",
  "enabled": "awsui_enabled_1mfbn_96osr_250",
  "in-range": "awsui_in-range_1mfbn_96osr_256",
  "end-date": "awsui_end-date_1mfbn_96osr_256",
  "start-date": "awsui_start-date_1mfbn_96osr_256",
  "no-range": "awsui_no-range_1mfbn_96osr_256",
  "selected": "awsui_selected_1mfbn_96osr_266",
  "today": "awsui_today_1mfbn_96osr_271",
  "this-month": "awsui_this-month_1mfbn_96osr_272",
  "in-range-border-block-start": "awsui_in-range-border-block-start_1mfbn_96osr_328",
  "in-range-border-inline-end": "awsui_in-range-border-inline-end_1mfbn_96osr_331",
  "in-range-border-block-end": "awsui_in-range-border-block-end_1mfbn_96osr_334",
  "in-range-border-inline-start": "awsui_in-range-border-inline-start_1mfbn_96osr_337"
};

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/grid.js
var dayUtils = {
  getItemKey: (rowIndex, rowItemIndex) => `${rowIndex}:${rowItemIndex}`,
  isSameItem: (date1, date2) => isSameDay(date1, date2),
  isSamePage: (date1, date2) => isSameMonth(date1, date2),
  checkIfCurrentDay: (date2) => isToday(date2),
  checkIfCurrentMonth: () => false,
  checkIfCurrent: (date2) => isToday(date2),
  getPageName: () => "month"
};
var monthUtils = {
  getItemKey: (rowIndex, rowItemIndex) => `Month ${rowIndex * 3 + rowItemIndex + 1}`,
  isSameItem: (date1, date2) => isSameMonth(date1, date2),
  isSamePage: (date1, date2) => isSameYear(date1, date2),
  checkIfCurrentDay: () => false,
  checkIfCurrentMonth: (date2) => isThisMonth(date2),
  checkIfCurrent: (date2) => isThisMonth(date2),
  getPageName: () => "year"
};
function Grid2({ padDates, baseDate, selectedStartDate, selectedEndDate, rangeStartDate, rangeEndDate, focusedDate, focusedDateRef, onSelectDate, onGridKeyDownHandler, onFocusedDateChange, isDateEnabled, dateDisabledReason, locale: locale3, todayAriaLabel, currentMonthAriaLabel, ariaLabelledby, className: className2, startOfWeek: rawStartOfWeek = 0, granularity = "day" }) {
  const baseDateTime = baseDate === null || baseDate === void 0 ? void 0 : baseDate.getTime();
  const i18n = useInternalI18n("date-range-picker");
  const isMonthPicker = granularity === "month";
  const startOfWeek2 = normalizeStartOfWeek(rawStartOfWeek, locale3);
  const calendar2 = (0, import_react375.useMemo)(
    () => {
      const startDate = rangeStartDate !== null && rangeStartDate !== void 0 ? rangeStartDate : rangeEndDate;
      const endDate = rangeEndDate !== null && rangeEndDate !== void 0 ? rangeEndDate : rangeStartDate;
      const selection = startDate && endDate ? [startDate, endDate] : null;
      if (isMonthPicker) {
        const calendarData2 = new YearCalendar({ baseDate, selection });
        return {
          header: [],
          rows: calendarData2.quarters,
          range: calendarData2.range
        };
      }
      const calendarData = new MonthCalendar({ padDates, startOfWeek: startOfWeek2, baseDate, selection });
      return {
        header: calendarData.weekdays,
        rows: calendarData.weeks,
        range: calendarData.range
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [padDates, startOfWeek2, baseDateTime, rangeStartDate, rangeEndDate]
  );
  const currentAnnouncement = i18n(isMonthPicker ? "i18nStrings.currentMonthAriaLabel" : "i18nStrings.todayAriaLabel", isMonthPicker ? currentMonthAriaLabel : todayAriaLabel);
  return import_react375.default.createElement(
    "table",
    { role: "grid", "aria-labelledby": ariaLabelledby, className: clsx_m_default(styles_css_default134.grid, className2) },
    !isMonthPicker && import_react375.default.createElement(
      "thead",
      null,
      import_react375.default.createElement("tr", null, calendar2.header.map((dayIndex) => import_react375.default.createElement(
        "th",
        { key: dayIndex, scope: "col", className: clsx_m_default(styles_css_default134["grid-cell"], styles_css_default134["day-header"], styles_css_default133["day-header"]) },
        import_react375.default.createElement("span", { "aria-hidden": "true" }, renderDayName2(locale3, dayIndex, "short")),
        import_react375.default.createElement(ScreenreaderOnly, null, renderDayName2(locale3, dayIndex, "long"))
      )))
    ),
    import_react375.default.createElement("tbody", { onKeyDown: onGridKeyDownHandler }, calendar2.rows.map((row, rowIndex) => {
      const rowItems = isMonthPicker ? row.months : row.days;
      const weekTestIndex = !isMonthPicker ? row.testIndex : void 0;
      return import_react375.default.createElement("tr", Object.assign({ key: rowIndex, className: clsx_m_default({
        [styles_css_default133["calendar-quarter"]]: isMonthPicker,
        [styles_css_default133["calendar-week"]]: !isMonthPicker
      }) }, !isMonthPicker && weekTestIndex ? {
        ["data-awsui-weekindex"]: weekTestIndex
      } : {}), rowItems.map(({ date: date2, isVisible: isVisible3, isInRange, isSelectionTop, isSelectionBottom, isSelectionLeft, isSelectionRight }, rowItemIndex) => {
        const { getItemKey: getItemKey2, isSameItem, isSamePage, checkIfCurrent, checkIfCurrentDay, checkIfCurrentMonth, getPageName } = isMonthPicker ? monthUtils : dayUtils;
        const itemKey = getItemKey2(rowIndex, rowItemIndex);
        const pageName = getPageName();
        const isCurrentDay = checkIfCurrentDay(date2);
        const isCurrentMonth = checkIfCurrentMonth(date2);
        const isCurrent = checkIfCurrent(date2);
        const isStartDate = !!selectedStartDate && isSameItem(date2, selectedStartDate);
        const isEndDate = !!selectedEndDate && isSameItem(date2, selectedEndDate);
        const isSelected = isStartDate || isEndDate;
        const isFocused = !!focusedDate && isSameItem(date2, focusedDate) && isSamePage(date2, baseDate);
        const onlyOneSelected = !!rangeStartDate && !!rangeEndDate ? isSameItem(rangeStartDate, rangeEndDate) : !selectedStartDate || !selectedEndDate;
        const isEnabled = (!isDateEnabled || isDateEnabled(date2)) && isSamePage(date2, baseDate);
        const disabledReason = dateDisabledReason(date2);
        const isDisabledWithReason = !isEnabled && !!disabledReason;
        const isFocusable3 = isFocused && (isEnabled || isDisabledWithReason);
        const baseClasses = {
          [styles_css_default133["calendar-date"]]: !isMonthPicker && isSameMonth(date2, baseDate),
          [styles_css_default133["calendar-month"]]: isMonthPicker && isSameYear(date2, baseDate),
          [styles_css_default134.day]: !isMonthPicker,
          [styles_css_default134.month]: isMonthPicker,
          [styles_css_default134["grid-cell"]]: true,
          [styles_css_default134["in-first-row"]]: rowIndex === 0,
          [styles_css_default134["in-first-column"]]: rowItemIndex === 0
        };
        if (!isVisible3) {
          return import_react375.default.createElement("td", { key: itemKey, ref: isFocused ? focusedDateRef : void 0, className: clsx_m_default(baseClasses, {
            [styles_css_default134[`last-day-of-month`]]: !isMonthPicker && isLastDayOfMonth(date2),
            [styles_css_default134[`last-month-of-year`]]: isMonthPicker && date2.getMonth() === 11
          }) });
        }
        const handlers = {};
        if (isEnabled) {
          handlers.onClick = () => onSelectDate(date2);
          handlers.onFocus = () => onFocusedDateChange(date2);
        }
        let announcement = renderDateAnnouncement({
          date: date2,
          isCurrent,
          locale: locale3,
          granularity
        });
        if (currentAnnouncement) {
          if (isMonthPicker && isThisMonth(date2)) {
            announcement += `. ${currentAnnouncement}`;
          } else if (!isMonthPicker && isToday(date2)) {
            announcement += `. ${currentAnnouncement}`;
          }
        }
        let tabIndex = void 0;
        if (isEnabled || isDisabledWithReason) {
          tabIndex = isFocusable3 ? 0 : -1;
        }
        return import_react375.default.createElement(
          GridCell2,
          Object.assign({ ref: isFocused ? focusedDateRef : void 0, key: itemKey, className: clsx_m_default(baseClasses, {
            [styles_css_default134["in-visible-calendar"]]: true,
            [styles_css_default134[`in-current-${pageName}`]]: isSamePage(date2, baseDate),
            [styles_css_default134.enabled]: isEnabled,
            [styles_css_default134.selected]: isSelected,
            [styles_css_default134["start-date"]]: isStartDate,
            [styles_css_default134["end-date"]]: isEndDate,
            [styles_css_default133["start-date"]]: isStartDate,
            [styles_css_default133["end-date"]]: isEndDate,
            [styles_css_default134["no-range"]]: isSelected && onlyOneSelected,
            [styles_css_default134["in-range"]]: isInRange,
            [styles_css_default134["in-range-border-block-start"]]: isSelectionTop,
            [styles_css_default134["in-range-border-block-end"]]: isSelectionBottom,
            [styles_css_default134["in-range-border-inline-start"]]: isSelectionLeft,
            [styles_css_default134["in-range-border-inline-end"]]: isSelectionRight,
            [styles_css_default134.today]: isCurrentDay,
            [styles_css_default133.today]: isCurrentDay,
            [styles_css_default134["this-month"]]: isCurrentMonth,
            [styles_css_default133["this-month"]]: isCurrentMonth
          }), "aria-selected": isEnabled ? isSelected || isInRange : void 0, "aria-current": isCurrent ? "date" : void 0, "data-date": formatDate(date2, granularity), "aria-disabled": !isEnabled, tabIndex, disabledReason: isDisabledWithReason ? disabledReason : void 0 }, handlers),
          import_react375.default.createElement("span", { className: styles_css_default134[`${granularity}-inner`], "aria-hidden": "true" }, isMonthPicker ? date2.toLocaleString(locale3, { month: "short" }) : date2.getDate()),
          import_react375.default.createElement(ScreenreaderOnly, null, announcement)
        );
      }));
    }))
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/calendar/grids/index.js
function isVisible2(date2, baseDate, isSingleGrid, granularity) {
  const isSame = granularity === "day" ? isSameMonth : isSameYear;
  const add3 = granularity === "day" ? addMonths : addYears;
  if (isSingleGrid) {
    return isSame(date2, baseDate);
  }
  const previous = add3(baseDate, -1);
  return isSame(date2, previous) || isSame(date2, baseDate);
}
var Grids = ({ baseDate, selectedStartDate, selectedEndDate, focusedDate, onFocusedDateChange, isDateEnabled, dateDisabledReason, isSingleGrid, onSelectDate, onPageChange, locale: locale3, todayAriaLabel, currentMonthAriaLabel, headingIdPrefix, startOfWeek: startOfWeek2 = 0, granularity = "day" }) => {
  const containerRef = (0, import_react376.useRef)(null);
  const [gridHasFocus, setGridHasFocus] = (0, import_react376.useState)(false);
  const isMonthPicker = granularity === "month";
  const focusedDateRef = (0, import_react376.useRef)(null);
  const addPages = !isMonthPicker ? addMonths : addYears;
  const getBase = !isMonthPicker ? getBaseDay : getBaseMonth;
  const moveDown = isMonthPicker ? moveMonthDown : moveNextWeek;
  const moveLeft = isMonthPicker ? movePrevMonth : movePrevDay;
  const moveRight = isMonthPicker ? moveNextMonth : moveNextDay;
  const moveUp = isMonthPicker ? moveMonthUp : movePrevWeek;
  const dateCache = useDateCache();
  baseDate = dateCache(baseDate);
  focusedDate = focusedDate ? dateCache(focusedDate) : null;
  const isDateFocusable = (0, import_react376.useCallback)((date2) => {
    return isDateEnabled(date2) || !isDateEnabled(date2) && !!dateDisabledReason(date2);
  }, [isDateEnabled, dateDisabledReason]);
  (0, import_react376.useEffect)(() => {
    if (focusedDate && !isVisible2(focusedDate, baseDate, isSingleGrid, granularity)) {
      const direction = isAfter(focusedDate, baseDate) ? -1 : 1;
      const newPage = !isSingleGrid && direction === -1 ? addPages(baseDate, -1) : baseDate;
      const nearestBaseDate = getBase(newPage, isDateFocusable);
      const newFocusedDate = findDateToFocus(focusedDate, nearestBaseDate, isDateFocusable);
      onFocusedDateChange(newFocusedDate);
    }
  }, [baseDate, focusedDate, isSingleGrid, granularity, addPages, isDateFocusable, onFocusedDateChange, getBase]);
  const onGridKeyDownHandler = (event) => {
    let updatedFocusDate = null;
    const keys = [KeyCode2.up, KeyCode2.down, KeyCode2.left, KeyCode2.right, KeyCode2.space, KeyCode2.enter];
    if (focusedDate === null || keys.indexOf(event.keyCode) === -1) {
      return;
    }
    event.preventDefault();
    handleKey2(event, {
      onActivate: () => {
        if (!focusedDate || !isDateEnabled(focusedDate)) {
          return;
        }
        onSelectDate(focusedDate);
      },
      onBlockEnd: () => focusedDate && (updatedFocusDate = moveDown(focusedDate, isDateFocusable)),
      onBlockStart: () => focusedDate && (updatedFocusDate = moveUp(focusedDate, isDateFocusable)),
      onInlineStart: () => focusedDate && (updatedFocusDate = moveLeft(focusedDate, isDateFocusable)),
      onInlineEnd: () => focusedDate && (updatedFocusDate = moveRight(focusedDate, isDateFocusable))
    });
    if (!updatedFocusDate) {
      return;
    }
    const updatedDateIsVisible = isVisible2(updatedFocusDate, baseDate, isSingleGrid, granularity);
    if (!updatedDateIsVisible) {
      const newPageIsOnLeftSide = !isSingleGrid && isBefore(updatedFocusDate, baseDate);
      onPageChange(newPageIsOnLeftSide ? addPages(updatedFocusDate, 1) : updatedFocusDate);
    }
    onFocusedDateChange(updatedFocusDate);
  };
  (0, import_react376.useEffect)(() => {
    if (focusedDate !== null && gridHasFocus) {
      if (focusedDateRef.current && focusedDateRef.current !== document.activeElement) {
        focusedDateRef.current.focus();
      }
    }
  }, [focusedDate, gridHasFocus]);
  const onGridBlur = (event) => {
    var _a2;
    const newFocusTarget = event.relatedTarget || document.activeElement;
    const newFocusTargetIsInGrid = (_a2 = containerRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(newFocusTarget);
    if (newFocusTarget && !newFocusTargetIsInGrid && gridHasFocus) {
      setGridHasFocus(false);
    }
  };
  const onGridFocus = () => {
    if (!gridHasFocus) {
      setGridHasFocus(true);
    }
  };
  const isRangeVisible = selectedStartDate && selectedEndDate || gridHasFocus;
  const rangeEnds = [selectedStartDate !== null && selectedStartDate !== void 0 ? selectedStartDate : focusedDate, selectedEndDate !== null && selectedEndDate !== void 0 ? selectedEndDate : focusedDate].filter(hasValue);
  const rangeStartDate = min2(rangeEnds);
  const rangeEndDate = max2(rangeEnds);
  const pageUnit = isMonthPicker ? "year" : "month";
  const sharedGridProps = {
    selectedEndDate,
    selectedStartDate,
    focusedDate,
    focusedDateRef,
    rangeStartDate: isRangeVisible ? rangeStartDate : null,
    rangeEndDate: isRangeVisible ? rangeEndDate : null,
    isDateEnabled,
    dateDisabledReason,
    onSelectDate,
    onGridKeyDownHandler,
    onFocusedDateChange,
    locale: locale3,
    granularity,
    currentMonthAriaLabel,
    startOfWeek: startOfWeek2,
    todayAriaLabel
  };
  return import_react376.default.createElement(
    "div",
    { ref: containerRef, onFocus: onGridFocus, onBlur: onGridBlur },
    import_react376.default.createElement(
      internal_default5,
      { size: "xs", direction: "horizontal" },
      !isSingleGrid && import_react376.default.createElement(Grid2, Object.assign({}, sharedGridProps, { padDates: "before", className: styles_css_default133["first-grid"], baseDate: addPages(baseDate, -1), ariaLabelledby: `${headingIdPrefix}-prev${pageUnit}` })),
      import_react376.default.createElement(Grid2, Object.assign({}, sharedGridProps, { padDates: "after", className: styles_css_default133["second-grid"], baseDate, ariaLabelledby: `${headingIdPrefix}-current${pageUnit}` }))
    )
  );
};

// node_modules/@cloudscape-design/components/date-range-picker/calendar/header/index.js
var import_react378 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/calendar/header/header-button.js
var import_react377 = __toESM(require_react());
function PrevPageButton({ ariaLabel, onChangePage }) {
  return import_react377.default.createElement(InternalButton, { iconName: "angle-left", ariaLabel, variant: "icon", onClick: () => onChangePage(-1), formAction: "none", className: clsx_m_default(styles_css_default133[`calendar-prev-page-btn`], styles_css_default133[`calendar-prev-month-btn`]) });
}
function NextPageButton({ ariaLabel, onChangePage }) {
  return import_react377.default.createElement(InternalButton, { iconName: "angle-right", ariaLabel, variant: "icon", onClick: () => onChangePage(1), formAction: "none", className: clsx_m_default(styles_css_default133[`calendar-next-page-btn`], styles_css_default133[`calendar-next-month-btn`]) });
}

// node_modules/@cloudscape-design/components/date-range-picker/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/date-range-picker/styles.scoped.css";
var styles_css_default135 = {
  "calendar": "awsui_calendar_mgja0_1ueys_153",
  "awsui-motion-fade-in-0": "awsui_awsui-motion-fade-in-0_mgja0_1ueys_1",
  "root": "awsui_root_mgja0_1ueys_176",
  "wide": "awsui_wide_mgja0_1ueys_207",
  "focus-lock": "awsui_focus-lock_mgja0_1ueys_214",
  "trigger-flexbox": "awsui_trigger-flexbox_mgja0_1ueys_218",
  "calendar-container": "awsui_calendar-container_mgja0_1ueys_222",
  "one-grid": "awsui_one-grid_mgja0_1ueys_225",
  "calendar-header": "awsui_calendar-header_mgja0_1ueys_229",
  "calendar-header-pages-wrapper": "awsui_calendar-header-pages-wrapper_mgja0_1ueys_235",
  "calendar-header-page": "awsui_calendar-header-page_mgja0_1ueys_235",
  "date-and-time-container": "awsui_date-and-time-container_mgja0_1ueys_255",
  "date-and-time-wrapper": "awsui_date-and-time-wrapper_mgja0_1ueys_261",
  "footer": "awsui_footer_mgja0_1ueys_268",
  "has-clear-button": "awsui_has-clear-button_mgja0_1ueys_277",
  "footer-button-wrapper": "awsui_footer-button-wrapper_mgja0_1ueys_286",
  "icon-wrapper": "awsui_icon-wrapper_mgja0_1ueys_293",
  "label": "awsui_label_mgja0_1ueys_298",
  "label-enabled": "awsui_label-enabled_mgja0_1ueys_302",
  "label-text": "awsui_label-text_mgja0_1ueys_306",
  "label-token-nowrap": "awsui_label-token-nowrap_mgja0_1ueys_311",
  "dropdown": "awsui_dropdown_mgja0_1ueys_315",
  "dropdown-content": "awsui_dropdown-content_mgja0_1ueys_337"
};

// node_modules/@cloudscape-design/components/date-range-picker/calendar/header/index.js
function CalendarHeader2({ baseDate, locale: locale3, onChangePage, previousPageLabel, nextPageLabel, isSingleGrid, headingIdPrefix, granularity = "day" }) {
  const i18n = useInternalI18n("date-range-picker");
  const isMonthPicker = granularity === "month";
  const renderLabel = isMonthPicker ? renderYear : renderMonthAndYear;
  const prevPageHeaderLabel = renderLabel(locale3, add(baseDate, granularity === "month" ? { years: -1 } : { months: -1 }));
  const currentPageHeaderLabel = renderLabel(locale3, baseDate);
  const pageUnit = isMonthPicker ? "year" : "month";
  return import_react378.default.createElement(
    import_react378.default.Fragment,
    null,
    import_react378.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default133["calendar-header"], styles_css_default135["calendar-header"]) },
      import_react378.default.createElement(PrevPageButton, { ariaLabel: i18n(isMonthPicker ? "i18nStrings.previousYearAriaLabel" : "i18nStrings.previousMonthAriaLabel", previousPageLabel), onChangePage }),
      import_react378.default.createElement(
        "h2",
        { className: styles_css_default135["calendar-header-pages-wrapper"] },
        !isSingleGrid && import_react378.default.createElement("span", { className: styles_css_default135["calendar-header-page"], id: `${headingIdPrefix}-prev${pageUnit}` }, prevPageHeaderLabel),
        import_react378.default.createElement("span", { className: styles_css_default135["calendar-header-page"], id: `${headingIdPrefix}-current${pageUnit}` }, currentPageHeaderLabel)
      ),
      import_react378.default.createElement(NextPageButton, { ariaLabel: i18n(isMonthPicker ? "i18nStrings.nextYearAriaLabel" : "i18nStrings.nextMonthAriaLabel", nextPageLabel), onChangePage })
    ),
    import_react378.default.createElement(internal_default2, { hidden: true }, isSingleGrid ? currentPageHeaderLabel : `${prevPageHeaderLabel}, ${currentPageHeaderLabel}`)
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/calendar/range-inputs.js
var import_react380 = __toESM(require_react());

// node_modules/@cloudscape-design/components/time-input/internal.js
var import_react379 = __toESM(require_react());

// node_modules/@cloudscape-design/components/time-input/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/time-input/styles.scoped.css";
var styles_css_default136 = {
  "root": "awsui_root_l809c_im8v7_5"
};

// node_modules/@cloudscape-design/components/time-input/internal.js
var getMaskArgs = (format3, use24Hour) => {
  const segments = [
    use24Hour ? { min: 0, max: 23, length: 2 } : { min: 1, max: 12, length: 2 },
    { min: 0, max: 59, length: 2 },
    { min: 0, max: 59, length: 2 }
  ];
  return {
    separator: ":",
    segments: segments.slice(0, format3.split(":").length)
  };
};
var InternalTimeInput = import_react379.default.forwardRef((_a2, ref) => {
  var { format: format3 = "hh:mm:ss", use24Hour = true, autoComplete = true, __internalRootRef } = _a2, props2 = __rest(_a2, ["format", "use24Hour", "autoComplete", "__internalRootRef"]);
  const inputRef = (0, import_react379.useRef)(null);
  useForwardFocus(ref, inputRef);
  const maskArgs = getMaskArgs(format3, use24Hour);
  return import_react379.default.createElement(masked_input_default, Object.assign({}, props2, { __internalRootRef, ref: inputRef, className: clsx_m_default(styles_css_default136.root, props2.className), autoComplete, disableBrowserAutocorrect: true, mask: maskArgs }));
});
var internal_default23 = InternalTimeInput;

// node_modules/@cloudscape-design/components/date-range-picker/calendar/range-inputs.js
function RangeInputs({ startDate, onChangeStartDate, startTime, onChangeStartTime, endDate, onChangeEndDate, endTime, onChangeEndTime, i18nStrings, dateOnly, timeInputFormat, dateInputFormat, granularity }) {
  const i18n = useInternalI18n("date-range-picker");
  const isMonthPicker = granularity === "month";
  const showTimeInput = !dateOnly && !isMonthPicker;
  const isIso = dateInputFormat === "iso";
  const separator = isIso ? "-" : "/";
  const dateInputPlaceholder = `YYYY${separator}MM${isMonthPicker ? "" : `${separator}DD`}`;
  const i18nProvided = provideI18N(i18nStrings, isMonthPicker, dateOnly, isIso);
  const i18nKey = generateI18NKey(isMonthPicker, dateOnly, isIso);
  const i18nFallbackKey = generateI18NFallbackKey(isMonthPicker, dateOnly);
  return import_react380.default.createElement(
    InternalFormField,
    { constraintText: i18n(i18nKey, i18nProvided) || i18n(i18nFallbackKey, i18nProvided) },
    import_react380.default.createElement(
      "div",
      { className: styles_css_default135["date-and-time-container"] },
      import_react380.default.createElement(
        "div",
        { className: styles_css_default135["date-and-time-wrapper"] },
        import_react380.default.createElement(
          InternalFormField,
          { stretch: true, label: i18n(isMonthPicker ? "i18nStrings.startMonthLabel" : "i18nStrings.startDateLabel", isMonthPicker ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startMonthLabel : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startDateLabel) },
          import_react380.default.createElement(internal_default22, { value: startDate, className: clsx_m_default(styles_css_default133["start-date-input"], isMonthPicker && styles_css_default133["start-month-input"]), onChange: (event) => onChangeStartDate(event.detail.value), format: dateInputFormat, placeholder: dateInputPlaceholder, granularity })
        ),
        showTimeInput && import_react380.default.createElement(
          InternalFormField,
          { stretch: true, label: i18n("i18nStrings.startTimeLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startTimeLabel) },
          import_react380.default.createElement(internal_default23, { value: startTime, onChange: (event) => onChangeStartTime(event.detail.value), format: timeInputFormat, placeholder: timeInputFormat, className: styles_css_default133["start-time-input"] })
        )
      ),
      import_react380.default.createElement(
        "div",
        { className: styles_css_default135["date-and-time-wrapper"] },
        import_react380.default.createElement(
          InternalFormField,
          { stretch: true, label: i18n(isMonthPicker ? "i18nStrings.endMonthLabel" : "i18nStrings.endDateLabel", isMonthPicker ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endMonthLabel : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endDateLabel) },
          import_react380.default.createElement(internal_default22, { value: endDate, className: clsx_m_default(styles_css_default133["end-date-input"], isMonthPicker && styles_css_default133["end-month-picker"]), onChange: (event) => onChangeEndDate(event.detail.value), format: dateInputFormat, placeholder: dateInputPlaceholder, granularity })
        ),
        showTimeInput && import_react380.default.createElement(
          InternalFormField,
          { label: i18n("i18nStrings.endTimeLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endTimeLabel), stretch: true },
          import_react380.default.createElement(internal_default23, { value: endTime, onChange: (event) => onChangeEndTime(event.detail.value), format: timeInputFormat, placeholder: timeInputFormat, className: styles_css_default133["end-time-input"] })
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/calendar/index.js
function DateRangePickerCalendar({ value, setValue, locale: locale3 = "", startOfWeek: startOfWeek2, isDateEnabled = () => true, dateDisabledReason = () => "", i18nStrings, dateOnly = false, timeInputFormat, dateInputFormat, customAbsoluteRangeControl, granularity = "day" }) {
  var _a2, _b;
  const isSingleGrid = useMobile();
  const isMonthPicker = granularity === "month";
  const hideTime = isMonthPicker || dateOnly;
  const normalizedLocale = normalizeLocale("DateRangePicker", locale3);
  const normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek2, normalizedLocale);
  const i18n = useInternalI18n("date-range-picker");
  const [announcement, setAnnouncement] = (0, import_react381.useState)("");
  const findPageToDisplay = isMonthPicker ? findYearToDisplay : findMonthToDisplay;
  const isSamePage = isMonthPicker ? isSameYear : isSameMonth;
  const addPage = isMonthPicker ? addYears : addMonths;
  const startOfPage = isMonthPicker ? startOfYear : startOfMonth;
  const findItemToFocus = isMonthPicker ? findMonthToFocus : findDateToFocus;
  const [currentPage, setCurrentPage] = (0, import_react381.useState)(() => findPageToDisplay(value, isSingleGrid));
  const [focusedDate, setFocusedDate] = (0, import_react381.useState)(() => {
    if (value.start.date) {
      const startDate = parseDate2(value.start.date);
      if (isSamePage(startDate, currentPage)) {
        return startDate;
      }
      if (!isSingleGrid && isSamePage(startDate, addPage(currentPage, -1))) {
        return startDate;
      }
    }
    return findItemToFocus(parseDate2(value.start.date), currentPage, isDateEnabled);
  });
  const updateCurrentPage = (startDate) => {
    if (isMonthPicker && startDate.length >= 4 || startDate.length >= 8) {
      const newCurrentPage = startOfPage(parseDate2(startDate));
      setCurrentPage(isSingleGrid ? newCurrentPage : addPage(newCurrentPage, 1));
    }
  };
  const announceStart = (startDate) => {
    return `${i18n("i18nStrings.startDateLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startDateLabel)}, ${getDateLabel(normalizedLocale, startDate)}${hideTime ? "" : `, ${i18n("i18nStrings.startTimeLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startTimeLabel)}, ${renderTimeLabel(normalizedLocale, startDate, timeInputFormat)}`}. `;
  };
  const announceEnd = (endDate) => {
    return `${i18n("i18nStrings.endDateLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endDateLabel)}, ${getDateLabel(normalizedLocale, endDate)}${hideTime ? "" : `, ${i18n("i18nStrings.endTimeLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endTimeLabel)}, ${renderTimeLabel(normalizedLocale, endDate, timeInputFormat)}`}. `;
  };
  const renderSelectedAbsoluteRangeAriaLive = i18n("i18nStrings.renderSelectedAbsoluteRangeAriaLive", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.renderSelectedAbsoluteRangeAriaLive, (format3) => (startDate, endDate) => format3({ startDate, endDate }));
  const announceRange = (startDate, endDate) => {
    if (!renderSelectedAbsoluteRangeAriaLive) {
      return `${getDateLabel(normalizedLocale, startDate)} – ${getDateLabel(normalizedLocale, endDate)}`;
    }
    return renderSelectedAbsoluteRangeAriaLive(getDateLabel(normalizedLocale, startDate), getDateLabel(normalizedLocale, endDate));
  };
  const onSelectDateHandler = (selectedDate) => {
    const { start, end } = value;
    let newStart = void 0;
    let newEnd = void 0;
    let announcement2 = "";
    if (!start.date && !end.date) {
      newStart = startOfDay(selectedDate);
      announcement2 = announceStart(newStart);
    } else if (start.date && end.date) {
      newStart = startOfDay(selectedDate);
      newEnd = null;
      announcement2 = announceStart(newStart);
    } else if (start.date && !end.date) {
      const parsedStartDate = parseDate2(start.date);
      if (isBefore(selectedDate, parsedStartDate)) {
        newStart = startOfDay(selectedDate);
        newEnd = endOfDay(parsedStartDate);
        announcement2 = announceStart(newStart) + announceRange(newStart, newEnd);
      } else {
        newEnd = endOfDay(selectedDate);
        announcement2 = announceEnd(newEnd) + announceRange(parsedStartDate, newEnd);
      }
    } else if (!start.date && end.date) {
      const existingEndDate = parseDate2(end.date);
      if (isAfter(selectedDate, existingEndDate)) {
        newStart = startOfDay(existingEndDate);
        newEnd = endOfDay(selectedDate);
        announcement2 = announceEnd(newEnd) + announceRange(newStart, newEnd);
      } else {
        newStart = startOfDay(selectedDate);
        announcement2 = announceStart(newStart) + announceRange(newStart, existingEndDate);
      }
    }
    const formatValue2 = (date2, previous, includeTime) => {
      if (date2 === null) {
        return { date: "", time: "" };
      } else if (date2 === void 0) {
        return previous;
      }
      if (!includeTime) {
        return {
          date: formatDate(date2),
          time: ""
        };
      }
      return splitDateTime(formatDateTime(date2));
    };
    setValue({
      start: formatValue2(newStart, value.start, !hideTime),
      end: formatValue2(newEnd, value.end, !hideTime)
    });
    setAnnouncement(announcement2);
  };
  const onHeaderChangePageHandler = (amount) => {
    const addPageFn = isMonthPicker ? addYears : addMonths;
    const getBaseFn = isMonthPicker ? getBaseMonth : getBaseDay;
    const newBasePage = addPageFn(currentPage, amount);
    setCurrentPage(newBasePage);
    const newBaseDate = getBaseFn(newBasePage, isDateEnabled);
    setFocusedDate(newBaseDate);
  };
  const onChangeStartDate = (value2) => {
    setValue((oldValue) => Object.assign(Object.assign({}, oldValue), { start: Object.assign(Object.assign({}, oldValue.start), { date: value2 }) }));
    updateCurrentPage(value2);
  };
  const interceptedSetValue = (newValue) => {
    setValue((oldValue) => {
      const updated = typeof newValue === "function" ? newValue(oldValue) : newValue;
      updateCurrentPage(updated.start.date);
      return updated;
    });
  };
  const headingIdPrefix = useUniqueId("date-range-picker-calendar-heading");
  return import_react381.default.createElement(
    import_react381.default.Fragment,
    null,
    import_react381.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default135["calendar-container"], {
        [styles_css_default135["one-grid"]]: isSingleGrid
      }) },
      import_react381.default.createElement(
        internal_default5,
        { size: "s" },
        import_react381.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default135.calendar, {
            [styles_css_default135["one-grid"]]: isSingleGrid
          }) },
          import_react381.default.createElement(CalendarHeader2, { granularity, baseDate: currentPage, locale: normalizedLocale, onChangePage: onHeaderChangePageHandler, previousPageLabel: isMonthPicker ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousYearAriaLabel : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousMonthAriaLabel, nextPageLabel: isMonthPicker ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextYearAriaLabel : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextMonthAriaLabel, isSingleGrid, headingIdPrefix }),
          import_react381.default.createElement(Grids, { granularity, isSingleGrid, locale: normalizedLocale, baseDate: currentPage, focusedDate, onFocusedDateChange: setFocusedDate, isDateEnabled, dateDisabledReason, onSelectDate: onSelectDateHandler, onPageChange: setCurrentPage, startOfWeek: normalizedStartOfWeek, todayAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.todayAriaLabel, currentMonthAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.currentMonthAriaLabel, selectedStartDate: ((_a2 = value === null || value === void 0 ? void 0 : value.start) === null || _a2 === void 0 ? void 0 : _a2.date) ? parseDate2(value.start.date, !isMonthPicker) : null, selectedEndDate: ((_b = value === null || value === void 0 ? void 0 : value.end) === null || _b === void 0 ? void 0 : _b.date) ? parseDate2(value.end.date, !isMonthPicker) : null, headingIdPrefix })
        ),
        import_react381.default.createElement(RangeInputs, { startDate: value.start.date, onChangeStartDate, startTime: value.start.time, onChangeStartTime: (value2) => setValue((oldValue) => Object.assign(Object.assign({}, oldValue), { start: Object.assign(Object.assign({}, oldValue.start), { time: value2 }) })), endDate: value.end.date, onChangeEndDate: (value2) => setValue((oldValue) => Object.assign(Object.assign({}, oldValue), { end: Object.assign(Object.assign({}, oldValue.end), { date: value2 }) })), endTime: value.end.time, onChangeEndTime: (value2) => setValue((oldValue) => Object.assign(Object.assign({}, oldValue), { end: Object.assign(Object.assign({}, oldValue.end), { time: value2 }) })), i18nStrings, dateOnly, timeInputFormat, dateInputFormat, granularity }),
        customAbsoluteRangeControl && import_react381.default.createElement("div", null, customAbsoluteRangeControl(value, interceptedSetValue))
      )
    ),
    import_react381.default.createElement(internal_default2, { className: styles_css_default133["calendar-aria-live"], hidden: true, tagName: "span" }, announcement)
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/mode-switcher.js
var import_react385 = __toESM(require_react());

// node_modules/@cloudscape-design/components/segmented-control/internal.js
var import_react384 = __toESM(require_react());

// node_modules/@cloudscape-design/components/segmented-control/internal-segmented-control.js
var import_react383 = __toESM(require_react());

// node_modules/@cloudscape-design/components/segmented-control/segment.js
var import_react382 = __toESM(require_react());

// node_modules/@cloudscape-design/components/segmented-control/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/segmented-control/styles.scoped.css";
var styles_css_default137 = {
  "segment": "awsui_segment_8cbea_8fha8_161",
  "refresh": "awsui_refresh_8cbea_8fha8_187",
  "disabled": "awsui_disabled_8cbea_8fha8_193",
  "selected": "awsui_selected_8cbea_8fha8_250",
  "icon": "awsui_icon_8cbea_8fha8_273",
  "with-text": "awsui_with-text_8cbea_8fha8_277",
  "with-no-text": "awsui_with-no-text_8cbea_8fha8_283",
  "root": "awsui_root_8cbea_8fha8_288",
  "segment-part": "awsui_segment-part_8cbea_8fha8_320",
  "select": "awsui_select_8cbea_8fha8_250",
  "segment-count-2": "awsui_segment-count-2_8cbea_8fha8_355",
  "segment-count-3": "awsui_segment-count-3_8cbea_8fha8_359",
  "segment-count-4": "awsui_segment-count-4_8cbea_8fha8_363",
  "segment-count-5": "awsui_segment-count-5_8cbea_8fha8_367",
  "segment-count-6": "awsui_segment-count-6_8cbea_8fha8_371",
  "disabled-reason-tooltip": "awsui_disabled-reason-tooltip_8cbea_8fha8_375"
};

// node_modules/@cloudscape-design/components/segmented-control/segment.js
var Segment = import_react382.default.forwardRef(({ disabled, disabledReason, text, iconName, iconAlt, iconUrl, iconSvg, isActive, onClick, onKeyDown, tabIndex, id }, ref) => {
  const buttonRef = (0, import_react382.useRef)(null);
  const [showTooltip, setShowTooltip] = (0, import_react382.useState)(false);
  const isDisabledWithReason = disabled && !!disabledReason;
  const { targetProps, descriptionEl } = useHiddenDescription(disabledReason);
  const isVisualRefresh = useVisualRefresh();
  return import_react382.default.createElement(
    "button",
    Object.assign({ className: clsx_m_default(styles_css_default137.segment, { [styles_css_default137.disabled]: !!disabled }, { [styles_css_default137.selected]: isActive }, { [styles_css_default137.refresh]: isVisualRefresh }), ref: useMergeRefs(ref, buttonRef), onClick, onKeyDown, disabled: disabled && !disabledReason, "aria-disabled": isDisabledWithReason ? "true" : void 0, type: "button", tabIndex, "aria-pressed": isActive ? "true" : "false", "aria-label": !text ? iconAlt : void 0, onFocus: isDisabledWithReason ? () => setShowTooltip(true) : void 0, onBlur: isDisabledWithReason ? () => setShowTooltip(false) : void 0, onMouseEnter: isDisabledWithReason ? () => setShowTooltip(true) : void 0, onMouseLeave: isDisabledWithReason ? () => setShowTooltip(false) : void 0 }, isDisabledWithReason ? targetProps : {}, { "data-testid": id }),
    (iconName || iconUrl || iconSvg) && import_react382.default.createElement(internal_default, { className: clsx_m_default(styles_css_default137.icon, text ? styles_css_default137["with-text"] : styles_css_default137["with-no-text"]), name: iconName, url: iconUrl, svg: iconSvg, alt: iconAlt, variant: disabled ? "disabled" : "normal" }),
    import_react382.default.createElement("span", null, text),
    isDisabledWithReason && import_react382.default.createElement(
      import_react382.default.Fragment,
      null,
      descriptionEl,
      showTooltip && import_react382.default.createElement(Tooltip, { className: styles_css_default137["disabled-reason-tooltip"], trackRef: buttonRef, value: disabledReason, onDismiss: () => setShowTooltip(false) })
    )
  );
});

// node_modules/@cloudscape-design/components/segmented-control/internal-segmented-control.js
function InternalSegmentedControl({ selectedId, options, label, ariaLabelledby, onChange }) {
  const segmentByIdRef = (0, import_react383.useRef)({});
  const selectedOptions = (options || []).filter((option) => {
    return option.id === selectedId;
  });
  const currentSelectedOption = selectedOptions.length ? selectedOptions[0] : null;
  const focusableSegments = (options || []).filter((option) => !option.disabled || option.disabled && !!option.disabledReason);
  const moveHighlight2 = (event, activeIndex) => {
    var _a2;
    if (event.keyCode !== KeyCode2.right && event.keyCode !== KeyCode2.left) {
      return;
    }
    let nextIndex = activeIndex;
    handleKey2(event, {
      onInlineStart: () => nextIndex = activeIndex === 0 ? focusableSegments.length - 1 : activeIndex - 1,
      onInlineEnd: () => nextIndex = activeIndex + 1 === focusableSegments.length ? 0 : activeIndex + 1
    });
    const nextSegmentId = focusableSegments[nextIndex].id;
    (_a2 = segmentByIdRef.current[nextSegmentId]) === null || _a2 === void 0 ? void 0 : _a2.focus();
  };
  const isVisualRefresh = useVisualRefresh();
  return import_react383.default.createElement("div", { className: clsx_m_default(styles_css_default137["segment-part"], styles_css_default137[`segment-count-${options === null || options === void 0 ? void 0 : options.length}`], {
    [styles_css_default137.refresh]: isVisualRefresh
  }), "aria-label": label, "aria-labelledby": ariaLabelledby, role: "toolbar" }, options && options.map((option, index) => {
    const isActive = selectedId === option.id;
    const focusableSegmentIndex = focusableSegments.indexOf(option);
    let tabIndex = isActive ? 0 : -1;
    if (currentSelectedOption === null && focusableSegmentIndex === 0) {
      tabIndex = 0;
    }
    return import_react383.default.createElement(Segment, { key: index, id: option.id, disabled: !!option.disabled, disabledReason: option.disabledReason, iconName: option.iconName, iconAlt: option.iconAlt, iconUrl: option.iconUrl, iconSvg: option.iconSvg, text: option.text, isActive, tabIndex, ref: (node) => {
      if (node) {
        segmentByIdRef.current[option.id] = node;
      } else {
        delete segmentByIdRef.current[option.id];
      }
    }, onClick: () => {
      if (option.disabled) {
        return;
      }
      if (selectedId !== option.id) {
        fireNonCancelableEvent(onChange, { selectedId: option.id });
      }
    }, onKeyDown: (event) => moveHighlight2(event, focusableSegmentIndex) });
  }));
}

// node_modules/@cloudscape-design/components/segmented-control/internal.js
function InternalSegmentedControl2(_a2) {
  var { selectedId, options, label, ariaLabelledby, onChange, __internalRootRef } = _a2, props2 = __rest(_a2, ["selectedId", "options", "label", "ariaLabelledby", "onChange", "__internalRootRef"]);
  const baseProps = getBaseProps(props2);
  const selectOptions = (options || []).map((option) => {
    const label2 = option.text || option.iconAlt;
    return Object.assign(Object.assign({}, option), { label: label2, value: option.id });
  });
  const selectedOptions = selectOptions.filter((option) => {
    return option.value === selectedId;
  });
  const currentSelectedOption = selectedOptions.length ? selectedOptions[0] : null;
  const selectProps = {
    options: selectOptions,
    selectedOption: currentSelectedOption,
    triggerVariant: "option",
    onChange: (event) => fireNonCancelableEvent(onChange, { selectedId: event.detail.selectedOption.value })
  };
  return import_react384.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default137.root), ref: __internalRootRef }),
    import_react384.default.createElement(InternalSegmentedControl, { selectedId, options, label, ariaLabelledby, onChange }),
    import_react384.default.createElement(
      "div",
      { className: styles_css_default137.select },
      ariaLabelledby && import_react384.default.createElement(internal_default17, Object.assign({}, selectProps, { ariaLabelledby })),
      !ariaLabelledby && label && import_react384.default.createElement(
        InternalFormField,
        { label, stretch: true },
        import_react384.default.createElement(internal_default17, Object.assign({}, selectProps))
      ),
      !ariaLabelledby && !label && import_react384.default.createElement(internal_default17, Object.assign({}, selectProps))
    )
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/mode-switcher.js
function ModeSwitcher({ i18nStrings, mode, onChange }) {
  const i18n = useInternalI18n("date-range-picker");
  return import_react385.default.createElement(InternalSegmentedControl2, { className: styles_css_default133["mode-switch"], selectedId: mode, label: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modeSelectionLabel, options: [
    { id: "relative", text: i18n("i18nStrings.relativeModeTitle", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.relativeModeTitle) },
    { id: "absolute", text: i18n("i18nStrings.absoluteModeTitle", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.absoluteModeTitle) }
  ], onChange: (e3) => onChange(e3.detail.selectedId) });
}

// node_modules/@cloudscape-design/components/date-range-picker/relative-range/index.js
var import_react386 = __toESM(require_react());

// node_modules/@cloudscape-design/components/date-range-picker/relative-range/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/date-range-picker/relative-range/styles.scoped.css";
var styles_css_default138 = {
  "custom-range": "awsui_custom-range_16zmw_25w4q_145",
  "custom-range--no-padding": "awsui_custom-range--no-padding_16zmw_25w4q_151",
  "custom-range-form-controls": "awsui_custom-range-form-controls_16zmw_25w4q_155",
  "custom-range-duration": "awsui_custom-range-duration_16zmw_25w4q_159",
  "custom-range-unit": "awsui_custom-range-unit_16zmw_25w4q_160",
  "vertical": "awsui_vertical_16zmw_25w4q_166"
};

// node_modules/@cloudscape-design/components/date-range-picker/relative-range/index.js
var monthUnits = ["month", "year"];
var dayUnits = ["day", "week", ...monthUnits];
var units = ["second", "minute", "hour", ...dayUnits];
var CUSTOM_OPTION_SELECT_KEY = "awsui-internal-custom-duration-key";
function RelativeRangePicker({ dateOnly, options: clientOptions = [], initialSelection: initialRange, onChange: onChangeRangeSize, i18nStrings, isSingleGrid, customUnits, granularity = "day" }) {
  var _a2;
  const i18n = useInternalI18n("date-range-picker");
  const formatRelativeRange = i18n("i18nStrings.formatRelativeRange", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatRelativeRange, (format3) => ({ amount, unit: unit2 }) => format3({ amount, unit: unit2 }));
  const formatUnit = i18n("i18nStrings.formatUnit", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatUnit, (format3) => (unit2, amount) => format3({ amount, unit: unit2 }));
  const radioOptions = clientOptions.map((option) => ({
    value: option.key,
    label: formatRelativeRange === null || formatRelativeRange === void 0 ? void 0 : formatRelativeRange(option)
  }));
  radioOptions.push({
    value: CUSTOM_OPTION_SELECT_KEY,
    label: i18n("i18nStrings.customRelativeRangeOptionLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeOptionLabel),
    description: i18n("i18nStrings.customRelativeRangeOptionDescription", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeOptionDescription)
  });
  const [selectedRadio, setSelectedRadio] = (0, import_react386.useState)(() => {
    var _a3;
    if (initialRange && !initialRange.key) {
      return CUSTOM_OPTION_SELECT_KEY;
    }
    return (_a3 = initialRange === null || initialRange === void 0 ? void 0 : initialRange.key) !== null && _a3 !== void 0 ? _a3 : null;
  });
  const [customDuration, setCustomDuration] = (0, import_react386.useState)(() => {
    if (initialRange) {
      return initialRange.amount;
    }
    return NaN;
  });
  let finalUnits = granularity === "month" ? monthUnits : dateOnly ? dayUnits : units;
  if (customUnits) {
    finalUnits = customUnits.filter((unit2) => {
      if (units.includes(unit2)) {
        return true;
      }
      warnOnce("DateRangePicker", `Invalid unit found in customRelativeRangeUnits: ${unit2}. This entry will be ignored.`);
      return false;
    });
  }
  let initialCustomTimeUnit = granularity === "month" ? "month" : dateOnly ? "day" : "minute";
  if (!finalUnits.includes(initialCustomTimeUnit)) {
    initialCustomTimeUnit = finalUnits[0];
  }
  const [customUnitOfTime, setCustomUnitOfTime] = (0, import_react386.useState)((_a2 = initialRange === null || initialRange === void 0 ? void 0 : initialRange.unit) !== null && _a2 !== void 0 ? _a2 : initialCustomTimeUnit);
  const showRadioControl = clientOptions.length > 0;
  const showCustomControls = clientOptions.length === 0 || selectedRadio === CUSTOM_OPTION_SELECT_KEY;
  return import_react386.default.createElement(
    "div",
    null,
    import_react386.default.createElement(
      internal_default5,
      { size: "xs", direction: "vertical" },
      showRadioControl && import_react386.default.createElement(
        InternalFormField,
        Object.assign({}, {
          label: i18n("i18nStrings.relativeRangeSelectionHeading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.relativeRangeSelectionHeading),
          description: granularity === "month" && i18n("i18nStrings.relativeRangeSelectionMonthlyDescription", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.relativeRangeSelectionMonthlyDescription)
        }),
        import_react386.default.createElement(internal_default20, { className: styles_css_default133["relative-range-radio-group"], onChange: ({ detail }) => {
          setSelectedRadio(detail.value);
          if (detail.value === CUSTOM_OPTION_SELECT_KEY) {
            setCustomDuration(NaN);
            setCustomUnitOfTime(initialCustomTimeUnit);
            onChangeRangeSize({
              amount: NaN,
              unit: initialCustomTimeUnit,
              type: "relative"
            });
          } else {
            const option = clientOptions.filter((o) => o.key === detail.value)[0];
            onChangeRangeSize(option);
          }
        }, value: selectedRadio, items: radioOptions })
      ),
      showCustomControls && import_react386.default.createElement(
        internal_default5,
        { direction: "vertical", size: "xs" },
        !showRadioControl && import_react386.default.createElement(InternalBox, { fontSize: "body-m", color: "text-body-secondary" }, i18n("i18nStrings.customRelativeRangeOptionDescription", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeOptionDescription)),
        import_react386.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default138["custom-range"], {
            [styles_css_default138["custom-range--no-padding"]]: !showRadioControl
          }) },
          import_react386.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default138["custom-range-form-controls"], {
              [styles_css_default138.vertical]: isSingleGrid
            }) },
            import_react386.default.createElement(
              "div",
              { className: styles_css_default138["custom-range-duration"] },
              import_react386.default.createElement(
                InternalFormField,
                { label: i18n("i18nStrings.customRelativeRangeDurationLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeDurationLabel) },
                import_react386.default.createElement(internal_default12, { type: "number", className: styles_css_default133["custom-range-duration-input"], value: isNaN(customDuration) || customDuration === 0 ? "" : customDuration === null || customDuration === void 0 ? void 0 : customDuration.toString(), onChange: (e3) => {
                  const amount = Number(e3.detail.value);
                  setCustomDuration(amount);
                  onChangeRangeSize({ amount, unit: customUnitOfTime, type: "relative" });
                }, placeholder: i18n("i18nStrings.customRelativeRangeDurationPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeDurationPlaceholder), __inheritFormFieldProps: true })
              )
            ),
            import_react386.default.createElement(
              "div",
              { className: styles_css_default138["custom-range-unit"] },
              import_react386.default.createElement(
                InternalFormField,
                { label: i18n("i18nStrings.customRelativeRangeUnitLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.customRelativeRangeUnitLabel) },
                import_react386.default.createElement(internal_default17, { className: styles_css_default133["custom-range-unit-select"], selectedOption: {
                  value: customUnitOfTime,
                  label: formatUnit === null || formatUnit === void 0 ? void 0 : formatUnit(customUnitOfTime, customDuration)
                }, onChange: (e3) => {
                  const { value: unit2 } = e3.detail.selectedOption;
                  setCustomUnitOfTime(unit2);
                  onChangeRangeSize({ amount: customDuration, unit: unit2, type: "relative" });
                }, options: finalUnits.map((unit2) => ({
                  value: unit2,
                  label: formatUnit === null || formatUnit === void 0 ? void 0 : formatUnit(unit2, customDuration)
                })), renderHighlightedAriaLive: (option) => option.label || option.value || "" })
              )
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/time-offset.js
function setTimeOffset(value, timeOffset) {
  if (!((value === null || value === void 0 ? void 0 : value.type) === "absolute")) {
    return value;
  }
  const stripTimezone = (dateString) => {
    return dateString.replace(/[Z]$|[+-]\d{2}:?\d{2}$/, "");
  };
  return {
    type: "absolute",
    startDate: stripTimezone(value.startDate) + formatTimeOffsetISOInternal(value.startDate, timeOffset.startDate),
    endDate: stripTimezone(value.endDate) + formatTimeOffsetISOInternal(value.endDate, timeOffset.endDate)
  };
}
function shiftTimeOffset(value, timeOffset) {
  if (!value || value.type !== "absolute") {
    return value;
  }
  const dateTimeRegex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}(:\d{2})?(\.\d{1,3})?(((\+|-)\d{2}(:\d{2})?)|Z)?$/;
  if (!dateTimeRegex.test(value.startDate) || !dateTimeRegex.test(value.endDate)) {
    warnOnce("DateRangePicker", "You have provided a misformatted start or end date. The component will fall back to an empty value. Dates have to be ISO8601-formatted with an optional time zone offset.");
    return null;
  }
  return {
    type: "absolute",
    startDate: shiftTimezoneOffset(value.startDate, timeOffset.startDate),
    endDate: shiftTimezoneOffset(value.endDate, timeOffset.endDate)
  };
}
function normalizeTimeOffset(value, getTimeOffset, timeOffset) {
  if (value && value.type === "absolute") {
    if (getTimeOffset) {
      return {
        startDate: getTimeOffset(parseDateUTC(value.startDate)),
        endDate: getTimeOffset(parseDateUTC(value.endDate))
      };
    } else if (timeOffset !== void 0) {
      return { startDate: timeOffset, endDate: timeOffset };
    }
  }
  return { startDate: void 0, endDate: void 0 };
}
function parseDateUTC(isoDateString) {
  const date2 = new Date(isoDateString);
  return addMinutes(date2, parseTimezoneOffset(isoDateString));
}

// node_modules/@cloudscape-design/components/date-range-picker/utils.js
function isAbsoluteValue(value) {
  return value !== null && (value === null || value === void 0 ? void 0 : value.type) === "absolute";
}
function isEmptyAbsoluteValue(value) {
  return value.type === "absolute" && value.startDate === "" && value.endDate === "";
}
function isDateOrMonthOnly(value, checkFn) {
  return checkFn(value.startDate) && checkFn(value.endDate);
}
function formatValue(value, { timeOffset, monthOnly, dateOnly }) {
  if (!isAbsoluteValue(value) || isEmptyAbsoluteValue(value)) {
    return value;
  }
  if (monthOnly || dateOnly) {
    const [startPart, endPart] = [value.startDate, value.endDate].map((date2) => (
      //strip out time or day+time text from dates
      monthOnly ? date2.split("T")[0].split("-").slice(0, 2).join("-") : date2.split("T")[0]
    ));
    return { type: "absolute", startDate: startPart, endDate: endPart };
  }
  return setTimeOffset(value, timeOffset === null ? {
    startDate: void 0,
    endDate: void 0
  } : timeOffset);
}
function getDefaultMode(value, relativeOptions, rangeSelectorMode) {
  if (value === null || value === void 0 ? void 0 : value.type) {
    return value.type;
  }
  if (rangeSelectorMode === "relative-only") {
    return "relative";
  }
  if (rangeSelectorMode === "absolute-only") {
    return "absolute";
  }
  return relativeOptions.length > 0 ? "relative" : "absolute";
}
function splitAbsoluteValue(value, hideTime = false) {
  if (!value) {
    return { start: { date: "", time: "" }, end: { date: "", time: "" } };
  }
  return {
    start: Object.assign(Object.assign({}, splitDateTime(value.startDate)), hideTime ? { time: "" } : {}),
    end: Object.assign(Object.assign({}, splitDateTime(value.endDate)), hideTime ? { time: "" } : {})
  };
}
function joinAbsoluteValue(value, hideTime = false) {
  const [startTime, endTime] = [value.start.time || "00:00:00", value.end.time || "23:59:59"].map(normalizeTimeString);
  return {
    type: "absolute",
    startDate: hideTime ? value.start.date : joinDateTime(value.start.date, startTime),
    endDate: hideTime ? value.end.date : joinDateTime(value.end.date, endTime)
  };
}
function formatInitialValue(value, dateOnly, monthOnly, normalizedTimeOffset) {
  if (!isAbsoluteValue(value)) {
    return shiftTimeOffset(value, normalizedTimeOffset);
  }
  if (isEmptyAbsoluteValue(value)) {
    return value;
  }
  if (dateOnly || monthOnly) {
    return formatValue(value, { dateOnly, monthOnly, timeOffset: normalizedTimeOffset });
  }
  if (isDateOrMonthOnly(value, isIsoDateOnly) || isDateOrMonthOnly(value, isIsoMonthOnly)) {
    return value;
  }
  return shiftTimeOffset(value, normalizedTimeOffset);
}

// node_modules/@cloudscape-design/components/date-range-picker/dropdown.js
var VALID_RANGE = { valid: true };
function DateRangePickerDropdown({ locale: locale3 = "", startOfWeek: startOfWeek2, isDateEnabled, dateDisabledReason = () => "", isValidRange, value, onClear: clearValue, onApply: applyValue, getTimeOffset, timeOffset, onDropdownClose, relativeOptions, showClearButton, isSingleGrid, i18nStrings, dateOnly, absoluteFormat, timeInputFormat, dateInputFormat, rangeSelectorMode, ariaLabelledby, ariaDescribedby, customAbsoluteRangeControl, customRelativeRangeUnits, granularity = "day" }) {
  const i18n = useInternalI18n("date-range-picker");
  const isMonthPicker = granularity === "month";
  const hideTime = dateOnly || isMonthPicker;
  const liveRegionRef = (0, import_react387.useRef)(null);
  const [rangeSelectionMode, setRangeSelectionMode] = (0, import_react387.useState)(getDefaultMode(value, relativeOptions, rangeSelectorMode));
  const [selectedAbsoluteRange, setSelectedAbsoluteRange] = (0, import_react387.useState)(() => splitAbsoluteValue((value === null || value === void 0 ? void 0 : value.type) === "absolute" ? value : null, hideTime));
  const [selectedRelativeRange, setSelectedRelativeRange] = (0, import_react387.useState)((value === null || value === void 0 ? void 0 : value.type) === "relative" ? value : null);
  const scrollableContainerRef = (0, import_react387.useRef)(null);
  const applyButtonRef = (0, import_react387.useRef)(null);
  const [applyClicked, setApplyClicked] = (0, import_react387.useState)(false);
  const [validationResult, setValidationResult] = (0, import_react387.useState)(VALID_RANGE);
  const closeDropdown = () => {
    setApplyClicked(false);
    onDropdownClose();
  };
  const onClear = () => {
    closeDropdown();
    clearValue();
  };
  const onApply = () => {
    var _a2;
    const newValue = rangeSelectionMode === "relative" ? selectedRelativeRange : joinAbsoluteValue(selectedAbsoluteRange, hideTime);
    const newValidationResult = applyValue(newValue);
    if (newValidationResult.valid === false) {
      setApplyClicked(true);
      setValidationResult(newValidationResult);
      (_a2 = liveRegionRef.current) === null || _a2 === void 0 ? void 0 : _a2.reannounce();
    } else {
      setApplyClicked(false);
      closeDropdown();
    }
  };
  (0, import_react387.useEffect)(() => {
    if (applyClicked) {
      const visibleRange = rangeSelectionMode === "relative" ? selectedRelativeRange : joinAbsoluteValue(selectedAbsoluteRange);
      const formattedRange = formatValue(visibleRange, {
        dateOnly,
        monthOnly: isMonthPicker,
        timeOffset: dateOnly || isMonthPicker ? null : normalizeTimeOffset(visibleRange, getTimeOffset, timeOffset)
      });
      const newValidationResult = isValidRange(formattedRange);
      setValidationResult(newValidationResult || VALID_RANGE);
    }
  }, [
    applyClicked,
    isValidRange,
    rangeSelectionMode,
    selectedRelativeRange,
    selectedAbsoluteRange,
    setValidationResult,
    dateOnly,
    isMonthPicker,
    getTimeOffset,
    timeOffset
  ]);
  (0, import_react387.useEffect)(() => {
    var _a2;
    return (_a2 = scrollableContainerRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  }, [scrollableContainerRef]);
  return import_react387.default.createElement(
    import_react387.default.Fragment,
    null,
    import_react387.default.createElement(
      focus_lock_default,
      { className: styles_css_default135["focus-lock"], autoFocus: true },
      import_react387.default.createElement(
        "div",
        { ref: scrollableContainerRef, className: clsx_m_default(styles_css_default135.dropdown, styles_css_default133.dropdown), tabIndex: 0, role: "dialog", "aria-label": i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabel, "aria-labelledby": ariaLabelledby !== null && ariaLabelledby !== void 0 ? ariaLabelledby : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabelledby, "aria-describedby": ariaDescribedby !== null && ariaDescribedby !== void 0 ? ariaDescribedby : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaDescribedby },
        import_react387.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default135["dropdown-content"], {
            [styles_css_default135["one-grid"]]: isSingleGrid
          }) },
          import_react387.default.createElement(
            internal_default5,
            { size: "l" },
            import_react387.default.createElement(
              InternalBox,
              { padding: { top: "m", horizontal: "l" } },
              import_react387.default.createElement(
                internal_default5,
                { direction: "vertical", size: "s" },
                rangeSelectorMode === "default" && import_react387.default.createElement(ModeSwitcher, { mode: rangeSelectionMode, onChange: (mode) => {
                  setRangeSelectionMode(mode);
                  setApplyClicked(false);
                  setValidationResult(VALID_RANGE);
                }, i18nStrings }),
                rangeSelectionMode === "absolute" && import_react387.default.createElement(DateRangePickerCalendar, { value: selectedAbsoluteRange, setValue: setSelectedAbsoluteRange, locale: locale3, startOfWeek: startOfWeek2, isDateEnabled, dateDisabledReason, i18nStrings, dateOnly, absoluteFormat, timeInputFormat, dateInputFormat, customAbsoluteRangeControl, granularity }),
                rangeSelectionMode === "relative" && import_react387.default.createElement(RelativeRangePicker, { isSingleGrid, options: relativeOptions, dateOnly, initialSelection: selectedRelativeRange, onChange: (range3) => setSelectedRelativeRange(range3), i18nStrings, customUnits: customRelativeRangeUnits, granularity })
              ),
              import_react387.default.createElement(InternalBox, { className: styles_css_default133["validation-section"], margin: !validationResult.valid ? { top: "s" } : void 0 }, !validationResult.valid && import_react387.default.createElement(
                import_react387.default.Fragment,
                null,
                import_react387.default.createElement(
                  internal_default4,
                  { type: "error", statusIconAriaLabel: i18n("i18nStrings.errorIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel) },
                  import_react387.default.createElement("span", { className: styles_css_default133["validation-error"] }, validationResult.errorMessage)
                ),
                import_react387.default.createElement(internal_default2, { hidden: true, tagName: "span", ref: liveRegionRef }, validationResult.errorMessage)
              ))
            ),
            import_react387.default.createElement(
              "div",
              { className: clsx_m_default(styles_css_default135.footer, {
                [styles_css_default135["one-grid"]]: isSingleGrid,
                [styles_css_default135["has-clear-button"]]: showClearButton
              }) },
              showClearButton && import_react387.default.createElement(
                "div",
                { className: styles_css_default135["footer-button-wrapper"] },
                import_react387.default.createElement(InternalButton, { onClick: onClear, className: styles_css_default133["clear-button"], variant: "link", formAction: "none" }, i18n("i18nStrings.clearButtonLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.clearButtonLabel))
              ),
              import_react387.default.createElement(
                "div",
                { className: styles_css_default135["footer-button-wrapper"] },
                import_react387.default.createElement(
                  internal_default5,
                  { size: "xs", direction: "horizontal" },
                  import_react387.default.createElement(InternalButton, { onClick: closeDropdown, className: styles_css_default133["cancel-button"], variant: "link", formAction: "none" }, i18n("i18nStrings.cancelButtonLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.cancelButtonLabel)),
                  import_react387.default.createElement(InternalButton, { onClick: onApply, className: styles_css_default133["apply-button"], ref: applyButtonRef, formAction: "none" }, i18n("i18nStrings.applyButtonLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.applyButtonLabel))
                )
              )
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/date-range-picker/index.js
function renderDateRange({ locale: locale3, range: range3, placeholder = "", formatRelativeRange, absoluteFormat, hideTimeOffset, timeOffset }) {
  var _a2;
  const firstPart = range3 ? range3.type === "relative" ? (_a2 = formatRelativeRange === null || formatRelativeRange === void 0 ? void 0 : formatRelativeRange(range3)) !== null && _a2 !== void 0 ? _a2 : "" : formatDateTimeWithOffset({
    date: range3.startDate,
    timeOffset: timeOffset.startDate,
    hideTimeOffset,
    format: absoluteFormat,
    locale: locale3
  }) : placeholder;
  const secondPart = (range3 === null || range3 === void 0 ? void 0 : range3.type) === "absolute" ? formatDateTimeWithOffset({
    date: range3.endDate,
    timeOffset: timeOffset.endDate,
    hideTimeOffset,
    format: absoluteFormat,
    locale: locale3
  }) : "";
  return import_react388.default.createElement(
    "span",
    { className: !range3 && styles_css_default135["label-text"] || void 0, "aria-disabled": !range3 },
    import_react388.default.createElement("span", { className: (range3 === null || range3 === void 0 ? void 0 : range3.type) === "absolute" ? styles_css_default135["label-token-nowrap"] : void 0 }, firstPart),
    import_react388.default.createElement("span", null, secondPart && " — "),
    import_react388.default.createElement("span", { className: styles_css_default135["label-token-nowrap"] }, secondPart)
  );
}
var DateRangePicker = import_react388.default.forwardRef((_a2, ref) => {
  var _b, _c;
  var { locale: locale3 = "", startOfWeek: startOfWeek2, isDateEnabled = () => true, dateDisabledReason, value, placeholder, readOnly = false, disabled = false, onChange, onBlur, onFocus, relativeOptions = [], i18nStrings, isValidRange = () => ({ valid: true }), showClearButton = true, dateOnly = false, timeOffset, getTimeOffset, timeInputFormat = "hh:mm:ss", dateInputFormat = "slashed", expandToViewport = false, rangeSelectorMode = "default", customAbsoluteRangeControl, absoluteFormat = "iso", hideTimeOffset, customRelativeRangeUnits, granularity = "day" } = _a2, rest = __rest(_a2, ["locale", "startOfWeek", "isDateEnabled", "dateDisabledReason", "value", "placeholder", "readOnly", "disabled", "onChange", "onBlur", "onFocus", "relativeOptions", "i18nStrings", "isValidRange", "showClearButton", "dateOnly", "timeOffset", "getTimeOffset", "timeInputFormat", "dateInputFormat", "expandToViewport", "rangeSelectorMode", "customAbsoluteRangeControl", "absoluteFormat", "hideTimeOffset", "customRelativeRangeUnits", "granularity"]);
  const { __internalRootRef } = useBaseComponent("DateRangePicker", {
    props: {
      absoluteFormat,
      dateOnly,
      expandToViewport,
      rangeSelectorMode,
      readOnly,
      showClearButton,
      timeInputFormat,
      dateInputFormat,
      hideTimeOffset,
      granularity
    },
    metadata: { hasDisabledReasons: Boolean(dateDisabledReason) }
  });
  const isMonthOnly = granularity === "month";
  const hideTime = dateOnly || isMonthOnly;
  checkControlled("DateRangePicker", "value", value, "onChange", onChange);
  const normalizedTimeOffset = hideTime ? { startDate: void 0, endDate: void 0 } : normalizeTimeOffset(value, getTimeOffset, timeOffset);
  value = formatInitialValue(value, dateOnly, isMonthOnly, normalizedTimeOffset);
  const baseProps = getBaseProps(rest);
  const { invalid, warning, controlId, ariaDescribedby, ariaLabelledby } = useFormFieldContext(Object.assign({ ariaLabelledby: (_b = rest.ariaLabelledby) !== null && _b !== void 0 ? _b : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabelledby, ariaDescribedby: (_c = rest.ariaDescribedby) !== null && _c !== void 0 ? _c : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaDescribedby }, rest));
  const isSingleGrid = useMobile();
  const triggerRef = (0, import_react388.useRef)(null);
  useForwardFocus(ref, triggerRef);
  const rootRef = (0, import_react388.useRef)(null);
  const dropdownId = useUniqueId("date-range-picker-dropdown");
  const triggerContentId = useUniqueId("date-range-picker-trigger");
  useFocusTracker({ rootRef, onBlur, onFocus });
  const [isDropDownOpen, setIsDropDownOpen] = (0, import_react388.useState)(false);
  const normalizedLocale = normalizeLocale("DateRangePicker", locale3);
  const closeDropdown = (focusTrigger = false) => {
    var _a3;
    setIsDropDownOpen(false);
    if (focusTrigger) {
      (_a3 = triggerRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
    }
  };
  const onWrapperKeyDownHandler = (event) => {
    if (event.keyCode === KeyCode2.escape) {
      if (isDropDownOpen) {
        event.stopPropagation();
      }
      closeDropdown(true);
    }
  };
  const onClear = () => {
    fireNonCancelableEvent(onChange, { value: null });
  };
  const onApply = (newValue) => {
    const formattedValue = formatValue(newValue, {
      dateOnly,
      monthOnly: isMonthOnly,
      timeOffset: hideTime ? { startDate: void 0, endDate: void 0 } : normalizeTimeOffset(newValue, getTimeOffset, timeOffset)
    });
    const validationResult = isValidRange(formattedValue);
    if ((validationResult === null || validationResult === void 0 ? void 0 : validationResult.valid) === false) {
      return validationResult;
    }
    if (isDevelopment2) {
      if ((newValue === null || newValue === void 0 ? void 0 : newValue.type) === "absolute") {
        const [startDateWithoutTime] = newValue.startDate.split("T");
        const [endDateWithoutTime] = newValue.endDate.split("T");
        if (!startDateWithoutTime || !endDateWithoutTime) {
          warnOnce("DateRangePicker", "You have provided an `isValidRange` prop that did not catch a missing start or end date.");
        }
      }
    }
    fireNonCancelableEvent(onChange, { value: formattedValue });
    return validationResult || { valid: true };
  };
  const prevDateOnly = usePrevious(dateOnly);
  (0, import_react388.useEffect)(() => {
    if (prevDateOnly !== void 0 && prevDateOnly !== dateOnly) {
      warnOnce("DateRangePicker", `The provided \`dateOnly\` flag has been changed from "${prevDateOnly}" to "${dateOnly}" which can lead to unexpected value format. Consider using separate components.`);
    }
  }, [prevDateOnly, dateOnly]);
  if (value && value.type !== "absolute" && value.type !== "relative") {
    warnOnce("DateRangePicker", "You provided an invalid value. Reverting back to default.");
    value = null;
  }
  if ((value === null || value === void 0 ? void 0 : value.type) === "absolute" && rangeSelectorMode === "relative-only" || (value === null || value === void 0 ? void 0 : value.type) === "relative" && rangeSelectorMode === "absolute-only") {
    warnOnce("DateRangePicker", "The provided value does not correspond to the current range selector mode. Reverting back to default.");
    value = null;
  }
  const i18n = useInternalI18n("date-range-picker");
  const formatRelativeRange = i18n("i18nStrings.formatRelativeRange", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatRelativeRange, (format3) => ({ amount, unit: unit2 }) => format3({ amount, unit: unit2 }));
  if (isDevelopment2) {
    if (!formatRelativeRange && rangeSelectorMode !== "absolute-only") {
      warnOnce("DateRangePicker", "A function for i18nStrings.formatRelativeRange was not provided. Relative ranges will not be correctly rendered.");
    }
  }
  const formattedDate = renderDateRange({
    locale: normalizedLocale,
    range: value,
    placeholder,
    formatRelativeRange,
    absoluteFormat,
    hideTimeOffset: hideTime || hideTimeOffset,
    timeOffset: normalizedTimeOffset
  });
  const trigger = import_react388.default.createElement(
    button_trigger_default,
    { ref: triggerRef, id: controlId, invalid, warning, ariaLabelledby: joinStrings(ariaLabelledby, triggerContentId), ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabel, ariaDescribedby, className: clsx_m_default(styles_css_default133.label, styles_css_default135.label, {
      [styles_css_default135["label-enabled"]]: !readOnly && !disabled
    }), hideCaret: true, onClick: () => {
      setIsDropDownOpen(true);
    }, disabled, readOnly, ariaHasPopup: "dialog" },
    import_react388.default.createElement(
      "span",
      { className: styles_css_default135["trigger-flexbox"] },
      import_react388.default.createElement(
        "span",
        { className: styles_css_default135["icon-wrapper"] },
        import_react388.default.createElement(internal_default, { name: "calendar", variant: disabled || readOnly ? "disabled" : "normal" })
      ),
      import_react388.default.createElement("span", { id: triggerContentId }, formattedDate)
    )
  );
  const mergedRef = useMergeRefs(rootRef, __internalRootRef);
  return import_react388.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: mergedRef, className: clsx_m_default(baseProps.className, styles_css_default135.root, styles_css_default133.root, absoluteFormat === "long-localized" && !dateOnly && !isMonthOnly && styles_css_default135.wide), onKeyDown: onWrapperKeyDownHandler }),
    import_react388.default.createElement(
      dropdown_default,
      { stretchWidth: true, stretchHeight: true, open: isDropDownOpen, onDropdownClose: () => closeDropdown(), trigger, stretchToTriggerWidth: false, expandToViewport, dropdownId },
      import_react388.default.createElement(reset_contexts_for_modal_default, null, isDropDownOpen && import_react388.default.createElement(DateRangePickerDropdown, { startOfWeek: startOfWeek2, locale: normalizedLocale, isSingleGrid, onDropdownClose: () => closeDropdown(true), value, showClearButton, isDateEnabled, dateDisabledReason, i18nStrings, onClear, onApply, getTimeOffset, timeOffset, relativeOptions, isValidRange, dateOnly, absoluteFormat, timeInputFormat, dateInputFormat, rangeSelectorMode, ariaLabelledby, ariaDescribedby, customAbsoluteRangeControl, customRelativeRangeUnits, granularity }))
    )
  );
});
applyDisplayName(DateRangePicker, "DateRangePicker");
var date_range_picker_default = DateRangePicker;

// node_modules/@cloudscape-design/components/drawer/index.js
var import_react391 = __toESM(require_react());

// node_modules/@cloudscape-design/components/drawer/implementation.js
var import_react390 = __toESM(require_react());

// node_modules/@cloudscape-design/components/app-layout/runtime-drawer/use-runtime-drawer-context.js
var import_react389 = __toESM(require_react());
var useRuntimeDrawerContext = ({ rootRef }) => {
  const [drawerContext, setDrawerContext] = (0, import_react389.useState)(null);
  (0, import_react389.useEffect)(() => {
    var _a2, _b;
    if (!(rootRef === null || rootRef === void 0 ? void 0 : rootRef.current)) {
      return;
    }
    const runtimeDrawerWrapper = findUpUntil(rootRef === null || rootRef === void 0 ? void 0 : rootRef.current, (node) => {
      var _a3;
      return !!((_a3 = node === null || node === void 0 ? void 0 : node.dataset) === null || _a3 === void 0 ? void 0 : _a3.awsuiRuntimeDrawerRootId);
    });
    const drawerId = (_a2 = runtimeDrawerWrapper === null || runtimeDrawerWrapper === void 0 ? void 0 : runtimeDrawerWrapper.dataset) === null || _a2 === void 0 ? void 0 : _a2.awsuiRuntimeDrawerRootId;
    if (!drawerId) {
      return;
    }
    const drawers = awsuiPluginsInternal.appLayout.getDrawersState();
    setDrawerContext((_b = drawers === null || drawers === void 0 ? void 0 : drawers.find((drawer) => drawer.id === drawerId)) !== null && _b !== void 0 ? _b : null);
    return awsuiPluginsInternal.appLayout.onDrawersUpdated((drawers2) => {
      var _a3;
      setDrawerContext((_a3 = drawers2 === null || drawers2 === void 0 ? void 0 : drawers2.find((drawer) => drawer.id === drawerId)) !== null && _a3 !== void 0 ? _a3 : null);
    });
  }, [rootRef]);
  return drawerContext;
};

// node_modules/@cloudscape-design/components/drawer/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/drawer/styles.scoped.css";
var styles_css_default139 = {
  "drawer": "awsui_drawer_1sxt8_6lztv_189",
  "header": "awsui_header_1sxt8_6lztv_222",
  "with-additional-action": "awsui_with-additional-action_1sxt8_6lztv_239",
  "with-runtime-context": "awsui_with-runtime-context_1sxt8_6lztv_247",
  "with-toolbar": "awsui_with-toolbar_1sxt8_6lztv_250",
  "header-actions": "awsui_header-actions_1sxt8_6lztv_269",
  "content-with-paddings": "awsui_content-with-paddings_1sxt8_6lztv_275",
  "test-utils-drawer-content": "awsui_test-utils-drawer-content_1sxt8_6lztv_282"
};

// node_modules/@cloudscape-design/components/drawer/implementation.js
function DrawerImplementation(_a2) {
  var { header, children: children2, loading, i18nStrings, disableContentPaddings, __internalRootRef, headerActions } = _a2, restProps = __rest(_a2, ["header", "children", "loading", "i18nStrings", "disableContentPaddings", "__internalRootRef", "headerActions"]);
  const baseProps = getBaseProps(restProps);
  const isToolbar = useAppLayoutToolbarDesignEnabled();
  const i18n = useInternalI18n("drawer");
  const containerProps = Object.assign(Object.assign({}, baseProps), { className: clsx_m_default(baseProps.className, styles_css_default139.drawer, isToolbar && styles_css_default139["with-toolbar"]) });
  const runtimeDrawerContext = useRuntimeDrawerContext({ rootRef: __internalRootRef });
  const hasAdditioalDrawerAction = !!(runtimeDrawerContext === null || runtimeDrawerContext === void 0 ? void 0 : runtimeDrawerContext.isExpandable);
  return loading ? import_react390.default.createElement(
    "div",
    Object.assign({}, containerProps, { className: clsx_m_default(containerProps.className, styles_css_default139["content-with-paddings"]), ref: __internalRootRef }),
    import_react390.default.createElement(
      StatusIndicator,
      { type: "loading" },
      import_react390.default.createElement(internal_default2, { tagName: "span" }, i18n("i18nStrings.loadingText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.loadingText))
    )
  ) : import_react390.default.createElement(
    "div",
    Object.assign({}, containerProps, { ref: __internalRootRef }),
    header && import_react390.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default139.header, runtimeDrawerContext && styles_css_default139["with-runtime-context"], hasAdditioalDrawerAction && styles_css_default139["with-additional-action"]) },
      header,
      headerActions && import_react390.default.createElement("div", { className: styles_css_default139["header-actions"] }, headerActions)
    ),
    import_react390.default.createElement("div", { className: clsx_m_default(styles_css_default139["test-utils-drawer-content"], !disableContentPaddings && styles_css_default139["content-with-paddings"]) }, children2)
  );
}
var createWidgetizedDrawer = createWidgetizedComponent(DrawerImplementation);

// node_modules/@cloudscape-design/components/drawer/internal.js
var InternalDrawer = createWidgetizedDrawer();

// node_modules/@cloudscape-design/components/drawer/index.js
function Drawer2(props2) {
  const internalProps = useBaseComponent("Drawer");
  return import_react391.default.createElement(InternalDrawer, Object.assign({}, internalProps, props2));
}
applyDisplayName(Drawer2, "Drawer");

// node_modules/@cloudscape-design/components/expandable-section/index.js
var import_react392 = __toESM(require_react());
function ExpandableSection(_a2) {
  var { variant = "default" } = _a2, props2 = __rest(_a2, ["variant"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props2);
  const baseComponentProps = useBaseComponent("ExpandableSection", {
    props: {
      disableContentPaddings: props2.disableContentPaddings,
      headingTagOverride: props2.headingTagOverride,
      variant
    },
    metadata: {
      hasInstanceIdentifier: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier),
      hasHeaderActions: Boolean(props2.headerActions)
    }
  }, analyticsMetadata);
  return import_react392.default.createElement(InternalExpandableSection, Object.assign({ variant }, props2, baseComponentProps, { __injectAnalyticsComponentMetadata: true }));
}
applyDisplayName(ExpandableSection, "ExpandableSection");

// node_modules/@cloudscape-design/components/file-dropzone/index.js
var import_react395 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-dropzone/internal.js
var import_react393 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-dropzone/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/file-dropzone/styles.scoped.css";
var styles_css_default140 = {
  "root": "awsui_root_ptw8i_wv87u_181",
  "hovered": "awsui_hovered_ptw8i_wv87u_194",
  "content": "awsui_content_ptw8i_wv87u_201"
};

// node_modules/@cloudscape-design/components/file-dropzone/internal.js
function InternalFileDropzone(_a2) {
  var { onChange, children: children2, __internalRootRef } = _a2, restProps = __rest(_a2, ["onChange", "children", "__internalRootRef"]);
  const [isDropzoneHovered, setDropzoneHovered] = (0, import_react393.useState)(false);
  const baseProps = getBaseProps(restProps);
  const onDragOver = (event) => {
    event.preventDefault();
    if (event.dataTransfer) {
      setDropzoneHovered(true);
      event.dataTransfer.dropEffect = "copy";
    }
  };
  const onDragLeave = (event) => {
    event.preventDefault();
    setDropzoneHovered(false);
    if (event.dataTransfer) {
      event.dataTransfer.dropEffect = "none";
    }
  };
  const onDrop = (event) => {
    event.preventDefault();
    setDropzoneHovered(false);
    fireNonCancelableEvent(onChange, { value: Array.from(event.dataTransfer.files) });
  };
  return import_react393.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef, className: clsx_m_default(baseProps.className, styles_css_default140.root, {
      [styles_css_default140.hovered]: isDropzoneHovered
    }), onDragOver, onDragLeave, onDrop }),
    import_react393.default.createElement("div", { className: styles_css_default140.content }, children2)
  );
}

// node_modules/@cloudscape-design/components/file-dropzone/use-files-dragging.js
var import_react394 = __toESM(require_react());
function useFilesDragging() {
  const [areFilesDragging, setFilesDragging] = (0, import_react394.useState)(false);
  (0, import_react394.useEffect)(() => {
    let dragTimer = null;
    const onDocumentDragOver = (event) => {
      var _a2, _b;
      event.preventDefault();
      let files = 0;
      for (let item = 0; item < (((_a2 = event.dataTransfer) === null || _a2 === void 0 ? void 0 : _a2.types.length) || 0); item++) {
        if (((_b = event.dataTransfer) === null || _b === void 0 ? void 0 : _b.types[item]) === "Files") {
          files++;
        }
      }
      if (files > 0) {
        setFilesDragging(true);
        if (dragTimer) {
          clearTimeout(dragTimer);
        }
      }
    };
    const onDocumentDragLeave = (event) => {
      event.preventDefault();
      dragTimer = setTimeout(() => setFilesDragging(false), 25);
    };
    const onDocumentDrop = (event) => {
      event.preventDefault();
      dragTimer = setTimeout(() => setFilesDragging(false), 25);
    };
    const controller = new AbortController();
    document.addEventListener("dragover", onDocumentDragOver, { signal: controller.signal });
    document.addEventListener("dragleave", onDocumentDragLeave, { signal: controller.signal });
    document.addEventListener("drop", onDocumentDrop, { signal: controller.signal });
    return () => {
      if (dragTimer) {
        clearTimeout(dragTimer);
      }
      controller.abort();
    };
  }, []);
  return { areFilesDragging };
}

// node_modules/@cloudscape-design/components/file-dropzone/index.js
function FileDropzone(props2) {
  const baseComponentProps = useBaseComponent("FileDropzone");
  return import_react395.default.createElement(InternalFileDropzone, Object.assign({}, baseComponentProps, props2));
}
applyDisplayName(FileDropzone, "FileDropzone");

// node_modules/@cloudscape-design/components/file-input/index.js
var import_react396 = __toESM(require_react());
var FileInput = import_react396.default.forwardRef((_a2, ref) => {
  var { multiple, variant } = _a2, props2 = __rest(_a2, ["multiple", "variant"]);
  const baseComponentProps = useBaseComponent("FileInput", {
    props: {
      multiple,
      variant
    }
  });
  return import_react396.default.createElement(internal_default8, Object.assign({ multiple, variant }, props2, baseComponentProps, { ref, __injectAnalyticsComponentMetadata: true }));
});
applyDisplayName(FileInput, "FileInput");
var file_input_default = FileInput;

// node_modules/@cloudscape-design/components/file-token-group/index.js
var import_react400 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-token-group/internal.js
var import_react399 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-token-group/file-token.js
var import_react398 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-token-group/default-formatters.js
var KB = 1e3;
var MB = Math.pow(1e3, 2);
var GB = Math.pow(1e3, 3);
var TB = Math.pow(1e3, 4);
function formatFileSize(size) {
  if (size < MB) {
    return `${(size / KB).toFixed(2)} KB`;
  }
  if (size < GB) {
    return `${(size / MB).toFixed(2)} MB`;
  }
  if (size < TB) {
    return `${(size / GB).toFixed(2)} GB`;
  }
  return `${(size / TB).toFixed(2)} TB`;
}
function formatFileLastModified(date2) {
  return formatDateTime(date2);
}

// node_modules/@cloudscape-design/components/file-token-group/thumbnail.js
var import_react397 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-token-group/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/file-token-group/styles.scoped.css";
var styles_css_default141 = {
  "root": "awsui_root_39ths_1hg4x_209",
  "file-loading-overlay": "awsui_file-loading-overlay_39ths_1hg4x_241",
  "file-loading-overlay-single-row": "awsui_file-loading-overlay-single-row_39ths_1hg4x_246",
  "file-option-name": "awsui_file-option-name_39ths_1hg4x_250",
  "file-option-size": "awsui_file-option-size_39ths_1hg4x_251",
  "file-option-last-modified": "awsui_file-option-last-modified_39ths_1hg4x_252",
  "file-option": "awsui_file-option_39ths_1hg4x_250",
  "file-option-thumbnail": "awsui_file-option-thumbnail_39ths_1hg4x_265",
  "file-option-thumbnail-image": "awsui_file-option-thumbnail-image_39ths_1hg4x_269",
  "file-option-metadata": "awsui_file-option-metadata_39ths_1hg4x_282",
  "with-image": "awsui_with-image_39ths_1hg4x_285",
  "single-row-loading": "awsui_single-row-loading_39ths_1hg4x_288",
  "token": "awsui_token_39ths_1hg4x_292",
  "token-grid": "awsui_token-grid_39ths_1hg4x_299",
  "token-contains-image": "awsui_token-contains-image_39ths_1hg4x_308",
  "token-box": "awsui_token-box_39ths_1hg4x_312",
  "horizontal": "awsui_horizontal_39ths_1hg4x_331",
  "error": "awsui_error_39ths_1hg4x_339",
  "dismiss-button": "awsui_dismiss-button_39ths_1hg4x_343",
  "warning": "awsui_warning_39ths_1hg4x_349",
  "read-only": "awsui_read-only_39ths_1hg4x_359",
  "loading": "awsui_loading_39ths_1hg4x_372"
};

// node_modules/@cloudscape-design/components/file-token-group/thumbnail.js
function FileOptionThumbnail({ file }) {
  const [imageSrc, setImageSrc] = (0, import_react397.useState)("");
  (0, import_react397.useEffect)(() => {
    if (URL.createObjectURL) {
      const src = URL.createObjectURL(file);
      setImageSrc(src);
      return () => {
        URL.revokeObjectURL(src);
      };
    }
  }, [file]);
  return import_react397.default.createElement(
    "div",
    { className: styles_css_default141["file-option-thumbnail"], "aria-hidden": true },
    import_react397.default.createElement("img", { className: styles_css_default141["file-option-thumbnail-image"], alt: file.name, src: imageSrc })
  );
}

// node_modules/@cloudscape-design/components/file-token-group/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/file-token-group/test-classes/styles.scoped.css";
var styles_css_default142 = {
  "root": "awsui_root_polq8_6ggi7_5",
  "file-option-thumbnail": "awsui_file-option-thumbnail_polq8_6ggi7_6",
  "file-option-name": "awsui_file-option-name_polq8_6ggi7_7",
  "file-option-size": "awsui_file-option-size_polq8_6ggi7_8",
  "file-option-last-modified": "awsui_file-option-last-modified_polq8_6ggi7_9",
  "ellipsis-active": "awsui_ellipsis-active_polq8_6ggi7_10"
};

// node_modules/@cloudscape-design/components/file-token-group/file-token.js
function InternalFileToken({ file, showFileLastModified, showFileSize, showFileThumbnail, i18nStrings, onDismiss, errorText, warningText, readOnly, loading, alignment, groupContainsImage, isImage, index }) {
  var _a2, _b;
  const formatFileSize2 = (_a2 = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatFileSize) !== null && _a2 !== void 0 ? _a2 : formatFileSize;
  const formatFileLastModified2 = (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatFileLastModified) !== null && _b !== void 0 ? _b : formatFileLastModified;
  const errorId = useUniqueId("error");
  const warningId = useUniqueId("warning");
  const showWarning = warningText && !errorText;
  const containerRef = (0, import_react398.useRef)(null);
  const fileNameRef = (0, import_react398.useRef)(null);
  const fileNameContainerRef = (0, import_react398.useRef)(null);
  const [showTooltip, setShowTooltip] = (0, import_react398.useState)(false);
  const getDismissLabel = (fileIndex) => {
    var _a3;
    return (_a3 = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.removeFileAriaLabel) === null || _a3 === void 0 ? void 0 : _a3.call(i18nStrings, fileIndex);
  };
  function isEllipsisActive() {
    const span = fileNameRef.current;
    const container = fileNameContainerRef.current;
    if (span && container) {
      return span.offsetWidth >= container.offsetWidth;
    }
    return false;
  }
  const fileIsSingleRow = !showFileLastModified && !showFileSize && (!groupContainsImage || groupContainsImage && !showFileThumbnail);
  return import_react398.default.createElement(
    "div",
    { ref: containerRef, className: clsx_m_default(styles_css_default141.token, {
      [styles_css_default141["token-grid"]]: alignment === "horizontal",
      [styles_css_default141["token-contains-image"]]: groupContainsImage && showFileThumbnail
    }), role: "group", "aria-label": file.name, "aria-describedby": errorText ? errorId : warningText ? warningId : void 0, "aria-disabled": loading, "data-index": index },
    import_react398.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default141["token-box"], {
        [styles_css_default141.loading]: loading,
        [styles_css_default141.error]: errorText,
        [styles_css_default141.warning]: showWarning,
        [styles_css_default141.horizontal]: alignment === "horizontal",
        [styles_css_default141["read-only"]]: readOnly
      }) },
      loading && import_react398.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default141["file-loading-overlay"], {
          [styles_css_default141["file-loading-overlay-single-row"]]: loading && fileIsSingleRow
        }) },
        import_react398.default.createElement(InternalSpinner, { variant: "disabled", size: "normal" })
      ),
      import_react398.default.createElement(
        InternalBox,
        { className: styles_css_default141["file-option"] },
        showFileThumbnail && isImage && import_react398.default.createElement(FileOptionThumbnail, { file }),
        import_react398.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default141["file-option-metadata"], {
            [styles_css_default141["with-image"]]: showFileThumbnail && isImage,
            [styles_css_default141["single-row-loading"]]: loading && fileIsSingleRow
          }) },
          import_react398.default.createElement(
            internal_default5,
            { direction: "vertical", size: "xxxs" },
            import_react398.default.createElement(
              "div",
              { onMouseOver: () => setShowTooltip(true), onMouseOut: () => setShowTooltip(false), ref: fileNameContainerRef },
              import_react398.default.createElement(
                InternalBox,
                { fontWeight: "normal", className: clsx_m_default(styles_css_default141["file-option-name"], styles_css_default142["file-option-name"], {
                  [styles_css_default142["ellipsis-active"]]: isEllipsisActive()
                }) },
                import_react398.default.createElement("span", { ref: fileNameRef }, file.name)
              )
            ),
            showFileSize && file.size ? import_react398.default.createElement(InternalBox, { fontSize: "body-s", color: "text-body-secondary", className: clsx_m_default(styles_css_default141["file-option-size"], styles_css_default142["file-option-size"]) }, formatFileSize2(file.size)) : null,
            showFileLastModified && file.lastModified ? import_react398.default.createElement(InternalBox, { fontSize: "body-s", color: "text-body-secondary", className: clsx_m_default(styles_css_default141["file-option-last-modified"], styles_css_default142["file-option-last-modified"]) }, formatFileLastModified2(new Date(file.lastModified))) : null
          )
        )
      ),
      onDismiss && !readOnly && import_react398.default.createElement(dismiss_button_default, { dismissLabel: getDismissLabel(index), onDismiss })
    ),
    errorText && import_react398.default.createElement(FormFieldError, { id: errorId, errorIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel }, errorText),
    showWarning && import_react398.default.createElement(FormFieldWarning, { id: warningId, warningIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel }, warningText),
    showTooltip && isEllipsisActive() && import_react398.default.createElement(Tooltip, { trackRef: containerRef, trackKey: file.name, value: import_react398.default.createElement(InternalBox, { fontWeight: "normal" }, file.name), onDismiss: () => setShowTooltip(false) })
  );
}
var file_token_default = InternalFileToken;

// node_modules/@cloudscape-design/components/file-token-group/internal.js
function InternalFileTokenGroup(_a2) {
  var { items, showFileLastModified, showFileSize, showFileThumbnail, i18nStrings, onDismiss, limit, readOnly, alignment = "vertical", __internalRootRef } = _a2, restProps = __rest(_a2, ["items", "showFileLastModified", "showFileSize", "showFileThumbnail", "i18nStrings", "onDismiss", "limit", "readOnly", "alignment", "__internalRootRef"]);
  const baseProps = getBaseProps(restProps);
  const [nextFocusIndex, setNextFocusIndex] = (0, import_react399.useState)(null);
  const tokenListRef = useListFocusController({
    nextFocusIndex,
    onFocusMoved: (target) => {
      target.focus();
      setNextFocusIndex(null);
    },
    listItemSelector: `.${styles_css_default92["list-item"]}`,
    showMoreSelector: `.${styles_css_default92.toggle}`
  });
  const mergedRef = useMergeRefs(__internalRootRef, tokenListRef);
  const isImage = (file) => file.type.startsWith("image/");
  const groupContainsImage = items.filter((item) => isImage(item.file)).length > 0;
  const i18n = useInternalI18n("file-token-group");
  return import_react399.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: mergedRef, className: clsx_m_default(baseProps.className, styles_css_default141.root, styles_css_default142.root) }),
    import_react399.default.createElement(TokenList, { alignment: alignment === "horizontal" ? "horizontal-grid" : alignment, items, renderItem: (file, fileIndex) => import_react399.default.createElement(file_token_default, { file: file.file, showFileLastModified, showFileSize, showFileThumbnail, onDismiss: () => {
      fireNonCancelableEvent(onDismiss, { fileIndex });
      setNextFocusIndex(fileIndex);
    }, errorText: file.errorText, warningText: file.warningText, i18nStrings: {
      removeFileAriaLabel: i18n("i18nStrings.removeFileAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.removeFileAriaLabel, (format3) => (fileIndex2) => format3({ fileIndex: fileIndex2 + 1 })),
      errorIconAriaLabel: i18n("i18nStrings.errorIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel),
      warningIconAriaLabel: i18n("i18nStrings.warningIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel),
      formatFileSize: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatFileSize,
      formatFileLastModified: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatFileLastModified
    }, loading: file.loading, readOnly, alignment, groupContainsImage, isImage: isImage(file.file), index: fileIndex }), limit, i18nStrings: {
      limitShowFewer: i18n("i18nStrings.limitShowFewer", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.limitShowFewer),
      limitShowMore: i18n("i18nStrings.limitShowMore", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.limitShowMore)
    } })
  );
}
var internal_default24 = InternalFileTokenGroup;

// node_modules/@cloudscape-design/components/file-token-group/index.js
var FileTokenGroup = (_a2) => {
  var { showFileLastModified, showFileSize, showFileThumbnail, alignment, limit } = _a2, props2 = __rest(_a2, ["showFileLastModified", "showFileSize", "showFileThumbnail", "alignment", "limit"]);
  const baseComponentProps = useBaseComponent("FileTokenGroup", {
    props: {
      showFileLastModified,
      showFileSize,
      showFileThumbnail,
      alignment,
      limit
    }
  });
  return import_react400.default.createElement(internal_default24, Object.assign({ showFileLastModified, showFileSize, showFileThumbnail, alignment, limit }, props2, baseComponentProps));
};
applyDisplayName(FileTokenGroup, "FileTokenGroup");
var file_token_group_default = FileTokenGroup;

// node_modules/@cloudscape-design/components/file-upload/index.js
var import_react402 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-upload/internal.js
var import_react401 = __toESM(require_react());

// node_modules/@cloudscape-design/components/file-upload/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/file-upload/styles.scoped.css";
var styles_css_default143 = {
  "root": "awsui_root_1ubbm_139m0_9",
  "hints": "awsui_hints_1ubbm_139m0_10"
};

// node_modules/@cloudscape-design/components/file-upload/internal.js
var internal_default25 = import_react401.default.forwardRef(InternalFileUpload);
function InternalFileUpload(_a2, externalRef) {
  var _b, _c, _d;
  var { accept, ariaRequired, multiple = false, onChange, value, tokenLimit, showFileSize, showFileLastModified, showFileThumbnail, i18nStrings, __internalRootRef, constraintText, errorText, warningText, fileErrors, fileWarnings, fileTokenAlignment = "vertical" } = _a2, restProps = __rest(_a2, ["accept", "ariaRequired", "multiple", "onChange", "value", "tokenLimit", "showFileSize", "showFileLastModified", "showFileThumbnail", "i18nStrings", "__internalRootRef", "constraintText", "errorText", "warningText", "fileErrors", "fileWarnings", "fileTokenAlignment"]);
  const [nextFocusIndex, setNextFocusIndex] = (0, import_react401.useState)(null);
  const tokenListRef = useListFocusController({
    nextFocusIndex,
    onFocusMoved: (target) => {
      target.focus();
      setNextFocusIndex(null);
    },
    listItemSelector: `.${styles_css_default92["list-item"]}`,
    showMoreSelector: `.${styles_css_default92.toggle}`,
    fallbackSelector: `.${styles_css_default48["file-input"]}`
  });
  const i18n = useInternalI18n("file-upload");
  const baseProps = getBaseProps(restProps);
  const metadata = { showFileSize, showFileLastModified, showFileThumbnail };
  const errorId = useUniqueId("error-");
  const warningId = useUniqueId("warning-");
  const constraintTextId = useUniqueId("constraint-text-");
  const fileInputRef = (0, import_react401.useRef)(null);
  const ref = useMergeRefs(fileInputRef, externalRef);
  checkControlled("FileUpload", "value", value, "onChange", onChange);
  if (!multiple && value.length > 1) {
    warnOnce("FileUpload", "Value must be an array of size 0 or 1 when `multiple=false`.");
  }
  const handleFilesChange = (newFiles) => {
    const newValue = multiple ? [...value, ...newFiles] : newFiles[0] ? newFiles.slice(0, 1) : [...value];
    fireNonCancelableEvent(onChange, { value: newValue });
  };
  const onFileRemove = (removeFileIndex) => {
    const newValue = value.filter((_, fileIndex) => fileIndex !== removeFileIndex);
    fireNonCancelableEvent(onChange, { value: newValue });
    setNextFocusIndex(removeFileIndex);
  };
  const { areFilesDragging } = useFilesDragging();
  const showWarning = warningText && !errorText;
  if (warningText && errorText) {
    warnOnce("FileUpload", "Both `errorText` and `warningText` exist. `warningText` will not be shown.");
  }
  const formFieldContext = useFormFieldContext(restProps);
  const ariaDescribedBy = joinStrings((_b = restProps.ariaDescribedby) !== null && _b !== void 0 ? _b : formFieldContext.ariaDescribedby, errorText ? errorId : void 0, showWarning ? warningId : void 0, constraintText ? constraintTextId : void 0);
  const hasError = Boolean(errorText || (fileErrors === null || fileErrors === void 0 ? void 0 : fileErrors.filter(Boolean).length));
  const invalid = restProps.invalid || formFieldContext.invalid || hasError;
  return import_react401.default.createElement(
    internal_default5,
    Object.assign({}, baseProps, { size: "xs", className: clsx_m_default(baseProps.className, styles_css_default143.root), __internalRootRef, ref: tokenListRef }),
    import_react401.default.createElement(
      InternalBox,
      null,
      areFilesDragging ? import_react401.default.createElement(InternalFileDropzone, { onChange: (event) => handleFilesChange(event.detail.value) }, i18n("i18nStrings.dropzoneText", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.dropzoneText) === null || _c === void 0 ? void 0 : _c.call(i18nStrings, multiple), (format3) => format3({ multiple: `${multiple}` }))) : import_react401.default.createElement(internal_default8, { ref, accept, ariaRequired, multiple, onChange: (event) => handleFilesChange(event.detail.value), value, ariaLabelledby: restProps.ariaLabelledby, controlId: restProps.controlId, ariaDescribedby: ariaDescribedBy, invalid }, i18n("i18nStrings.uploadButtonText", (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.uploadButtonText) === null || _d === void 0 ? void 0 : _d.call(i18nStrings, multiple), (format3) => format3({ multiple: `${multiple}` }))),
      (constraintText || errorText || warningText) && import_react401.default.createElement(
        "div",
        { className: styles_css_default143.hints },
        errorText && import_react401.default.createElement(FormFieldError, { id: errorId, errorIconAriaLabel: i18n("i18nStrings.errorIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel) }, errorText),
        showWarning && import_react401.default.createElement(FormFieldWarning, { id: warningId, warningIconAriaLabel: i18n("i18nStrings.warningIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel) }, warningText),
        constraintText && import_react401.default.createElement(ConstraintText, { id: constraintTextId, hasValidationText: !!errorText || !!warningText }, constraintText)
      )
    ),
    value.length > 0 ? import_react401.default.createElement(internal_default24, { limit: tokenLimit, alignment: fileTokenAlignment, items: value.map((file, fileIndex) => ({
      file,
      errorText: fileErrors === null || fileErrors === void 0 ? void 0 : fileErrors[fileIndex],
      warningText: fileWarnings === null || fileWarnings === void 0 ? void 0 : fileWarnings[fileIndex]
    })), showFileLastModified: metadata.showFileLastModified, showFileSize: metadata.showFileSize, showFileThumbnail: metadata.showFileThumbnail, i18nStrings: {
      removeFileAriaLabel: i18n("i18nStrings.removeFileAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.removeFileAriaLabel, (format3) => (fileIndex) => format3({ fileIndex: fileIndex + 1 })),
      limitShowFewer: i18n("i18nStrings.limitShowFewer", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.limitShowFewer),
      limitShowMore: i18n("i18nStrings.limitShowMore", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.limitShowMore),
      formatFileSize: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatFileSize,
      formatFileLastModified: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.formatFileLastModified,
      errorIconAriaLabel: i18n("i18nStrings.errorIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel),
      warningIconAriaLabel: i18n("i18nStrings.warningIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel)
    }, onDismiss: (event) => onFileRemove(event.detail.fileIndex) }) : null
  );
}

// node_modules/@cloudscape-design/components/file-upload/index.js
var FileUpload = import_react402.default.forwardRef((_a2, ref) => {
  var { multiple, showFileSize, showFileLastModified, showFileThumbnail } = _a2, restProps = __rest(_a2, ["multiple", "showFileSize", "showFileLastModified", "showFileThumbnail"]);
  const baseComponentProps = useBaseComponent("FileUpload", {
    props: { multiple, showFileLastModified, showFileSize, showFileThumbnail, tokenLimit: restProps.tokenLimit }
  });
  const externalProps = getExternalProps(restProps);
  return import_react402.default.createElement(internal_default25, Object.assign({ ref, multiple, showFileSize, showFileLastModified, showFileThumbnail }, externalProps, baseComponentProps));
});
applyDisplayName(FileUpload, "FileUpload");
var file_upload_default = FileUpload;

// node_modules/@cloudscape-design/components/flashbar/index.js
var import_react409 = __toESM(require_react());

// node_modules/@cloudscape-design/components/flashbar/internal-do-not-use-core.js
var import_react408 = __toESM(require_react());

// node_modules/@cloudscape-design/components/flashbar/implementation.js
var import_react407 = __toESM(require_react());

// node_modules/@cloudscape-design/components/flashbar/collapsible-flashbar.js
var import_react405 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/animate.js
function getDOMRects(elements) {
  const rects = {};
  for (const id in elements) {
    const element = elements[id];
    if (element) {
      rects[id] = element.getBoundingClientRect();
    }
  }
  return rects;
}
function animate({ oldState, elements, onTransitionsEnd, newElementInitialState }) {
  for (const id in elements) {
    const element = elements[id];
    const oldRect = oldState[id];
    if (element) {
      const newRect = element.getBoundingClientRect();
      const noOpTransform = { scale: 1, x: 0, y: 0 };
      const calculatedInverseTransform = oldRect ? {
        scale: oldRect.width / newRect.width,
        x: (oldRect.left + oldRect.right) / 2 - (newRect.left + newRect.right) / 2,
        y: (oldRect.top + oldRect.bottom) / 2 - (newRect.top + newRect.bottom) / 2
      } : newElementInitialState ? newElementInitialState(newRect) : {};
      const inverseTransform2 = Object.assign(Object.assign({}, noOpTransform), calculatedInverseTransform);
      element.style.transitionProperty = "none";
      element.style.transform = `scale(${inverseTransform2.scale}) translate(${inverseTransform2.x}px, ${inverseTransform2.y}px)`;
      if (!oldRect) {
        element.style.opacity = "0";
      }
    }
  }
  requestAnimationFrame(() => {
    const ongoingAnimations = /* @__PURE__ */ new Set();
    for (const id in elements) {
      const element = elements[id];
      if (element) {
        const oldRect = oldState[id];
        if (oldRect) {
          element.style.transitionProperty = `transform`;
          element.style.transform = "";
        } else {
          element.style.transitionProperty = `transform, opacity`;
          element.style.transform = "";
          element.style.opacity = "";
        }
        const onTransitionStart = (event) => {
          if (event.target === element) {
            ongoingAnimations.add(id);
            element.removeEventListener("transitionstart", onTransitionStart);
          }
        };
        const onTransitionEnd = (event) => {
          if (event.target === element) {
            element.style.transitionProperty = "";
            element.removeEventListener("transitionend", onTransitionEnd);
            if (onTransitionsEnd) {
              ongoingAnimations.delete(id);
              if (ongoingAnimations.size === 0) {
                onTransitionsEnd();
              }
            }
          }
        };
        element.addEventListener("transitionstart", onTransitionStart);
        element.addEventListener("transitionend", onTransitionEnd);
      }
    }
  });
}

// node_modules/@cloudscape-design/components/flashbar/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/flashbar/analytics-metadata/styles.scoped.css";
var styles_css_default144 = {
  "flash-header": "awsui_flash-header_4c95g_vov7p_5"
};

// node_modules/@cloudscape-design/components/flashbar/analytics-metadata/utils.js
var getComponentsAnalyticsMetadata = (itemsCount, stackItems, expanded) => {
  const metadata = {
    component: {
      name: "awsui.Flashbar",
      label: stackItems ? { root: "self", selector: "ul" } : { root: "self" },
      properties: {
        itemsCount: `${itemsCount}`,
        stackItems: `${stackItems}`
      }
    }
  };
  if (expanded !== void 0) {
    metadata.component.properties.expanded = `${expanded}`;
  }
  return metadata;
};
var getItemAnalyticsMetadata = (position, type, id) => {
  const baseMetadata = {
    itemLabel: `.${styles_css_default144["flash-header"]}`,
    itemPosition: `${position}`,
    itemType: type
  };
  if (id) {
    baseMetadata.itemId = id;
  }
  return {
    component: { innerContext: baseMetadata }
  };
};

// node_modules/@cloudscape-design/components/flashbar/common.js
var import_react404 = __toESM(require_react());

// node_modules/@cloudscape-design/components/flashbar/flash.js
var import_react403 = __toESM(require_react());

// node_modules/@cloudscape-design/components/flashbar/utils.js
var FOCUS_DEBOUNCE_DELAY = 500;
var typesToColors = {
  error: "red",
  info: "blue",
  "in-progress": "blue",
  success: "green",
  warning: "yellow"
};
function getColorFromType(type) {
  const defaultColor = "blue";
  return type ? typesToColors[type] || defaultColor : defaultColor;
}
function getItemType(item) {
  if (item.loading) {
    return "in-progress";
  } else {
    return item.type || "info";
  }
}
function getItemColor(item) {
  return getColorFromType(getItemType(item));
}
function getVisibleCollapsedItems(items, desiredLength) {
  const itemsOnTop = [];
  const itemsToPromote = [];
  const addedColors = /* @__PURE__ */ new Set();
  const allPossibleColors = Object.keys(typesToColors).length;
  const finalLength = Math.min(items.length, desiredLength);
  for (let i2 = 0; i2 < items.length; i2++) {
    const item = items[i2];
    const color2 = getItemColor(item);
    const isColorRepeated = addedColors.has(color2);
    if (i2 < finalLength) {
      itemsOnTop.push({ item: Object.assign(Object.assign({}, item), { expandedIndex: i2 }), isColorRepeated });
    } else {
      if (addedColors.size === allPossibleColors) {
        break;
      } else if (!isColorRepeated) {
        itemsToPromote.push(Object.assign(Object.assign({}, item), { expandedIndex: i2 }));
      }
    }
    addedColors.add(color2);
  }
  const reversedInitialSelection = [];
  let slotsReservedForPromotions = 0;
  for (let j = itemsOnTop.length - 1; j >= 0; j--) {
    const item = itemsOnTop[j];
    if (item.isColorRepeated && slotsReservedForPromotions < itemsToPromote.length) {
      slotsReservedForPromotions += 1;
    } else {
      reversedInitialSelection.push(item.item);
    }
  }
  const selectedItems = reversedInitialSelection.reverse();
  for (let k3 = 0; selectedItems.length < desiredLength; k3++) {
    selectedItems.push(itemsToPromote[k3]);
  }
  return selectedItems;
}
function getFlashTypeCount(items) {
  const count = { error: 0, info: 0, "in-progress": 0, success: 0, warning: 0 };
  for (const item of items) {
    const type = getItemType(item);
    count[type] += 1;
  }
  return count;
}
function getStylePropertyKey(type) {
  return type === "in-progress" ? "inProgress" : type;
}
var counterTypes = [
  { type: "error", labelName: "errorIconAriaLabel", iconName: "status-negative" },
  { type: "warning", labelName: "warningIconAriaLabel", iconName: "status-warning" },
  { type: "success", labelName: "successIconAriaLabel", iconName: "status-positive" },
  { type: "info", labelName: "infoIconAriaLabel", iconName: "status-info" },
  { type: "in-progress", labelName: "inProgressIconAriaLabel", iconName: "status-in-progress" }
];

// node_modules/@cloudscape-design/components/flashbar/style.js
function getCollapsibleFlashStyles(style, type = "info") {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
  if (SYSTEM !== "core" || !style) {
    return void 0;
  }
  const styleKey = getStylePropertyKey(type);
  const background = ((_b = (_a2 = style === null || style === void 0 ? void 0 : style.item) === null || _a2 === void 0 ? void 0 : _a2.root) === null || _b === void 0 ? void 0 : _b.background) && ((_d = (_c = style === null || style === void 0 ? void 0 : style.item) === null || _c === void 0 ? void 0 : _c.root) === null || _d === void 0 ? void 0 : _d.background[styleKey]);
  const borderColor = ((_f = (_e = style === null || style === void 0 ? void 0 : style.item) === null || _e === void 0 ? void 0 : _e.root) === null || _f === void 0 ? void 0 : _f.borderColor) && ((_h = (_g = style === null || style === void 0 ? void 0 : style.item) === null || _g === void 0 ? void 0 : _g.root) === null || _h === void 0 ? void 0 : _h.borderColor[styleKey]);
  const borderRadius = (_k = (_j = style === null || style === void 0 ? void 0 : style.item) === null || _j === void 0 ? void 0 : _j.root) === null || _k === void 0 ? void 0 : _k.borderRadius;
  const borderWidth = (_m = (_l = style === null || style === void 0 ? void 0 : style.item) === null || _l === void 0 ? void 0 : _l.root) === null || _m === void 0 ? void 0 : _m.borderWidth;
  const borderStyle = ((_p = (_o = style === null || style === void 0 ? void 0 : style.item) === null || _o === void 0 ? void 0 : _o.root) === null || _p === void 0 ? void 0 : _p.borderWidth) && "solid";
  const color2 = ((_r = (_q = style === null || style === void 0 ? void 0 : style.item) === null || _q === void 0 ? void 0 : _q.root) === null || _r === void 0 ? void 0 : _r.color) && ((_t = (_s = style === null || style === void 0 ? void 0 : style.item) === null || _s === void 0 ? void 0 : _s.root) === null || _t === void 0 ? void 0 : _t.color[styleKey]);
  return {
    background,
    borderColor,
    borderRadius,
    borderStyle,
    borderWidth,
    color: color2
  };
}
function getFlashStyles(style, type = "info") {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k;
  if (SYSTEM !== "core" || !style) {
    return void 0;
  }
  const focusRingBorderColor = ((_c = (_b = (_a2 = style === null || style === void 0 ? void 0 : style.item) === null || _a2 === void 0 ? void 0 : _a2.root) === null || _b === void 0 ? void 0 : _b.focusRing) === null || _c === void 0 ? void 0 : _c.borderColor) && style.item.root.focusRing.borderColor[getStylePropertyKey(type)];
  return Object.assign(Object.assign(Object.assign({}, getCollapsibleFlashStyles(style, type)), ((_e = (_d = style === null || style === void 0 ? void 0 : style.item) === null || _d === void 0 ? void 0 : _d.root) === null || _e === void 0 ? void 0 : _e.focusRing) && {
    [custom_css_properties_default.styleFocusRingBorderColor]: focusRingBorderColor,
    [custom_css_properties_default.styleFocusRingBorderRadius]: (_f = style.item.root.focusRing) === null || _f === void 0 ? void 0 : _f.borderRadius,
    [custom_css_properties_default.styleFocusRingBorderWidth]: (_g = style.item.root.focusRing) === null || _g === void 0 ? void 0 : _g.borderWidth
  }), ((_k = (_j = (_h = style === null || style === void 0 ? void 0 : style.item) === null || _h === void 0 ? void 0 : _h.root) === null || _j === void 0 ? void 0 : _j.focusRing) === null || _k === void 0 ? void 0 : _k.borderRadius) && {
    [custom_css_properties_default.styleFocusRingBorderRadius]: style.item.root.focusRing.borderRadius
  });
}
function getDismissButtonStyles2(style, type = "info") {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
  if (SYSTEM !== "core" || !style) {
    return void 0;
  }
  const styleKey = getStylePropertyKey(type);
  const activeColor = ((_c = (_b = (_a2 = style === null || style === void 0 ? void 0 : style.item) === null || _a2 === void 0 ? void 0 : _a2.dismissButton) === null || _b === void 0 ? void 0 : _b.color) === null || _c === void 0 ? void 0 : _c.active) && style.item.dismissButton.color.active[styleKey];
  const defaultColor = ((_f = (_e = (_d = style === null || style === void 0 ? void 0 : style.item) === null || _d === void 0 ? void 0 : _d.dismissButton) === null || _e === void 0 ? void 0 : _e.color) === null || _f === void 0 ? void 0 : _f.default) && style.item.dismissButton.color.default[styleKey];
  const hoverColor = ((_j = (_h = (_g = style === null || style === void 0 ? void 0 : style.item) === null || _g === void 0 ? void 0 : _g.dismissButton) === null || _h === void 0 ? void 0 : _h.color) === null || _j === void 0 ? void 0 : _j.hover) && style.item.dismissButton.color.hover[styleKey];
  const focusRingBorderColor = ((_m = (_l = (_k = style === null || style === void 0 ? void 0 : style.item) === null || _k === void 0 ? void 0 : _k.dismissButton) === null || _l === void 0 ? void 0 : _l.focusRing) === null || _m === void 0 ? void 0 : _m.borderColor) && style.item.dismissButton.focusRing.borderColor[styleKey];
  return {
    root: {
      color: {
        active: activeColor,
        default: defaultColor,
        hover: hoverColor
      },
      focusRing: {
        borderColor: focusRingBorderColor,
        borderRadius: (_q = (_p = (_o = style === null || style === void 0 ? void 0 : style.item) === null || _o === void 0 ? void 0 : _o.dismissButton) === null || _p === void 0 ? void 0 : _p.focusRing) === null || _q === void 0 ? void 0 : _q.borderRadius,
        borderWidth: (_t = (_s = (_r = style === null || style === void 0 ? void 0 : style.item) === null || _r === void 0 ? void 0 : _r.dismissButton) === null || _s === void 0 ? void 0 : _s.focusRing) === null || _t === void 0 ? void 0 : _t.borderWidth
      }
    }
  };
}
function getNotificationBarStyles(style) {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20;
  if (SYSTEM !== "core" || !style) {
    return void 0;
  }
  return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ borderRadius: (_b = (_a2 = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _a2 === void 0 ? void 0 : _a2.root) === null || _b === void 0 ? void 0 : _b.borderRadius, borderWidth: (_d = (_c = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _c === void 0 ? void 0 : _c.root) === null || _d === void 0 ? void 0 : _d.borderWidth }, ((_g = (_f = (_e = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _e === void 0 ? void 0 : _e.root) === null || _f === void 0 ? void 0 : _f.background) === null || _g === void 0 ? void 0 : _g.active) && {
    [custom_css_properties_default.styleBackgroundActive]: style.notificationBar.root.background.active
  }), ((_k = (_j = (_h = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _h === void 0 ? void 0 : _h.root) === null || _j === void 0 ? void 0 : _j.background) === null || _k === void 0 ? void 0 : _k.default) && {
    [custom_css_properties_default.styleBackgroundDefault]: style.notificationBar.root.background.default
  }), ((_o = (_m = (_l = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _l === void 0 ? void 0 : _l.root) === null || _m === void 0 ? void 0 : _m.background) === null || _o === void 0 ? void 0 : _o.hover) && {
    [custom_css_properties_default.styleBackgroundHover]: style.notificationBar.root.background.hover
  }), ((_r = (_q = (_p = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _p === void 0 ? void 0 : _p.root) === null || _q === void 0 ? void 0 : _q.borderColor) === null || _r === void 0 ? void 0 : _r.active) && {
    [custom_css_properties_default.styleBorderColorActive]: style.notificationBar.root.borderColor.active
  }), ((_u = (_t = (_s = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _s === void 0 ? void 0 : _s.root) === null || _t === void 0 ? void 0 : _t.borderColor) === null || _u === void 0 ? void 0 : _u.default) && {
    [custom_css_properties_default.styleBorderColorDefault]: style.notificationBar.root.borderColor.default
  }), ((_x = (_w = (_v = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _v === void 0 ? void 0 : _v.root) === null || _w === void 0 ? void 0 : _w.borderColor) === null || _x === void 0 ? void 0 : _x.hover) && {
    [custom_css_properties_default.styleBorderColorHover]: style.notificationBar.root.borderColor.hover
  }), ((_0 = (_z = (_y = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _y === void 0 ? void 0 : _y.root) === null || _z === void 0 ? void 0 : _z.color) === null || _0 === void 0 ? void 0 : _0.active) && {
    [custom_css_properties_default.styleColorActive]: style.notificationBar.root.color.active
  }), ((_3 = (_2 = (_1 = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _1 === void 0 ? void 0 : _1.root) === null || _2 === void 0 ? void 0 : _2.color) === null || _3 === void 0 ? void 0 : _3.default) && {
    [custom_css_properties_default.styleColorDefault]: style.notificationBar.root.color.default
  }), ((_6 = (_5 = (_4 = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _4 === void 0 ? void 0 : _4.root) === null || _5 === void 0 ? void 0 : _5.color) === null || _6 === void 0 ? void 0 : _6.hover) && {
    [custom_css_properties_default.styleColorHover]: style.notificationBar.root.color.hover
  }), ((_8 = (_7 = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _7 === void 0 ? void 0 : _7.expandButton) === null || _8 === void 0 ? void 0 : _8.focusRing) && {
    [custom_css_properties_default.styleFocusRingBorderColor]: (_11 = (_10 = (_9 = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _9 === void 0 ? void 0 : _9.expandButton) === null || _10 === void 0 ? void 0 : _10.focusRing) === null || _11 === void 0 ? void 0 : _11.borderColor,
    [custom_css_properties_default.styleFocusRingBorderRadius]: (_14 = (_13 = (_12 = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _12 === void 0 ? void 0 : _12.expandButton) === null || _13 === void 0 ? void 0 : _13.focusRing) === null || _14 === void 0 ? void 0 : _14.borderRadius,
    [custom_css_properties_default.styleFocusRingBorderWidth]: (_17 = (_16 = (_15 = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _15 === void 0 ? void 0 : _15.expandButton) === null || _16 === void 0 ? void 0 : _16.focusRing) === null || _17 === void 0 ? void 0 : _17.borderWidth
  }), ((_20 = (_19 = (_18 = style === null || style === void 0 ? void 0 : style.notificationBar) === null || _18 === void 0 ? void 0 : _18.expandButton) === null || _19 === void 0 ? void 0 : _19.focusRing) === null || _20 === void 0 ? void 0 : _20.borderRadius) && {
    [custom_css_properties_default.styleFocusRingBorderRadius]: style.notificationBar.expandButton.focusRing.borderRadius
  });
}

// node_modules/@cloudscape-design/components/flashbar/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/flashbar/styles.scoped.css";
var styles_css_default145 = {
  "flash-with-motion": "awsui_flash-with-motion_1q84n_7xdb3_157",
  "enter": "awsui_enter_1q84n_7xdb3_157",
  "flash-body": "awsui_flash-body_1q84n_7xdb3_171",
  "flash-message": "awsui_flash-message_1q84n_7xdb3_171",
  "flash-header": "awsui_flash-header_1q84n_7xdb3_171",
  "flash-content": "awsui_flash-content_1q84n_7xdb3_172",
  "action-button-wrapper": "awsui_action-button-wrapper_1q84n_7xdb3_173",
  "dismiss-button-wrapper": "awsui_dismiss-button-wrapper_1q84n_7xdb3_174",
  "flash-icon": "awsui_flash-icon_1q84n_7xdb3_197",
  "entering": "awsui_entering_1q84n_7xdb3_210",
  "entered": "awsui_entered_1q84n_7xdb3_231",
  "exiting": "awsui_exiting_1q84n_7xdb3_336",
  "stack": "awsui_stack_1q84n_7xdb3_370",
  "animation-running": "awsui_animation-running_1q84n_7xdb3_370",
  "item": "awsui_item_1q84n_7xdb3_370",
  "flash-list-item": "awsui_flash-list-item_1q84n_7xdb3_371",
  "notification-bar": "awsui_notification-bar_1q84n_7xdb3_372",
  "collapsed": "awsui_collapsed_1q84n_7xdb3_392",
  "animation-ready": "awsui_animation-ready_1q84n_7xdb3_392",
  "expanded-only": "awsui_expanded-only_1q84n_7xdb3_392",
  "expanded": "awsui_expanded_1q84n_7xdb3_392",
  "flash": "awsui_flash_1q84n_7xdb3_157",
  "collapsible": "awsui_collapsible_1q84n_7xdb3_448",
  "short-list": "awsui_short-list_1q84n_7xdb3_454",
  "visual-refresh": "awsui_visual-refresh_1q84n_7xdb3_454",
  "status": "awsui_status_1q84n_7xdb3_601",
  "header": "awsui_header_1q84n_7xdb3_601",
  "item-count": "awsui_item-count_1q84n_7xdb3_602",
  "button": "awsui_button_1q84n_7xdb3_603",
  "type-count": "awsui_type-count_1q84n_7xdb3_636",
  "count-number": "awsui_count-number_1q84n_7xdb3_636",
  "icon": "awsui_icon_1q84n_7xdb3_674",
  "floating": "awsui_floating_1q84n_7xdb3_715",
  "flashbar": "awsui_flashbar_1q84n_7xdb3_719",
  "initial-hidden": "awsui_initial-hidden_1q84n_7xdb3_778",
  "flash-list": "awsui_flash-list_1q84n_7xdb3_371",
  "flash-focus-container": "awsui_flash-focus-container_1q84n_7xdb3_802",
  "flash-text": "awsui_flash-text_1q84n_7xdb3_832",
  "hidden": "awsui_hidden_1q84n_7xdb3_851",
  "header-replacement": "awsui_header-replacement_1q84n_7xdb3_856",
  "content-replacement": "awsui_content-replacement_1q84n_7xdb3_861",
  "dismiss-button": "awsui_dismiss-button_1q84n_7xdb3_174",
  "action-wrapped": "awsui_action-wrapped_1q84n_7xdb3_879",
  "action-button": "awsui_action-button_1q84n_7xdb3_173",
  "action-slot": "awsui_action-slot_1q84n_7xdb3_886",
  "flash-type-success": "awsui_flash-type-success_1q84n_7xdb3_890",
  "flash-type-error": "awsui_flash-type-error_1q84n_7xdb3_894",
  "flash-type-info": "awsui_flash-type-info_1q84n_7xdb3_898",
  "flash-type-in-progress": "awsui_flash-type-in-progress_1q84n_7xdb3_899",
  "flash-type-warning": "awsui_flash-type-warning_1q84n_7xdb3_903"
};

// node_modules/@cloudscape-design/components/flashbar/flash.js
var ICON_TYPES = {
  success: "status-positive",
  warning: "status-warning",
  info: "status-info",
  error: "status-negative",
  "in-progress": "status-in-progress"
};
var useDiscoveredAction2 = createUseDiscoveredAction(awsuiPluginsInternal.flashbar.onActionRegistered);
var useDiscoveredContent2 = createUseDiscoveredContent("flash", awsuiPluginsInternal.flashContent);
function dismissButton(dismissLabel, onDismiss, style, type, ref, id, onDismissed) {
  return import_react403.default.createElement(
    "div",
    Object.assign({ className: styles_css_default145["dismiss-button-wrapper"] }, getAnalyticsMetadataAttribute({ action: "dismiss" })),
    import_react403.default.createElement(InternalButton, { ref, onClick: (event) => {
      if (onDismiss) {
        onDismiss(event);
      }
      if (onDismissed) {
        onDismissed(id);
      }
    }, className: styles_css_default145["dismiss-button"], variant: "flashbar-icon", iconName: "close", formAction: "none", ariaLabel: dismissLabel, style: getDismissButtonStyles2(style, type) })
  );
}
var focusFlashFocusableArea = (flash) => {
  if (!flash) {
    return;
  }
  const dismissButton3 = flash.querySelector(`.${styles_css_default145["dismiss-button"]}`);
  const focusContainer = flash.querySelector(`.${styles_css_default145["flash-focus-container"]}`);
  if (dismissButton3) {
    dismissButton3.focus();
  } else if (focusContainer) {
    focusContainer.focus();
  }
};
function focusFlashById(element, itemId) {
  if (!element) {
    return;
  }
  const flashElement = element.querySelector(`[data-itemid="${CSS.escape(itemId)}"]`);
  if (!flashElement) {
    return;
  }
  const focusContainer = flashElement.querySelector(`.${styles_css_default145["flash-focus-container"]}`);
  focusContainer === null || focusContainer === void 0 ? void 0 : focusContainer.focus();
}
var Flash = import_react403.default.forwardRef((_a2, ref) => {
  var { id, header, content, dismissible, dismissLabel, loading, action, buttonText, onButtonClick, onDismiss, className: className2, transitionState, ariaRole, i18nStrings, type = "info", analyticsMetadata, style, rootRef, onDismissed } = _a2, props2 = __rest(_a2, ["id", "header", "content", "dismissible", "dismissLabel", "loading", "action", "buttonText", "onButtonClick", "onDismiss", "className", "transitionState", "ariaRole", "i18nStrings", "type", "analyticsMetadata", "style", "rootRef", "onDismissed"]);
  if (isDevelopment2) {
    if (buttonText && !onButtonClick) {
      warnOnce("Flashbar", `You provided a \`buttonText\` prop without an \`onButtonClick\` handler. This will render a non-interactive action button.`);
    }
    if (dismissible && !onDismiss) {
      warnOnce("Flashbar", `You have set the \`dismissible\` prop without an \`onDismiss\` handler. This will render a non-interactive dismiss button.`);
    }
  }
  const [containerWidth, containerMeasureRef] = useContainerWidth();
  const elementRef = useComponentMetadata("Flash", PACKAGE_VERSION, analyticsMetadata);
  const mergedRef = useMergeRefs(ref, rootRef, elementRef, containerMeasureRef);
  const flashIconId = useUniqueId("flash-icon");
  const flashMessageId = useUniqueId("flash-message");
  const headerRefObject = (0, import_react403.useRef)(null);
  const contentRefObject = (0, import_react403.useRef)(null);
  const dismissButtonRefObject = (0, import_react403.useRef)(null);
  const { discoveredActions, headerRef: headerRefAction, contentRef: contentRefAction } = useDiscoveredAction2(type);
  const { initialHidden, headerReplacementType, contentReplacementType, headerRef: headerRefContent, contentRef: contentRefContent, replacementHeaderRef, replacementContentRef } = useDiscoveredContent2({ type, header, children: content });
  const headerRef = useMergeRefs(headerRefAction, headerRefContent, headerRefObject);
  const contentRef = useMergeRefs(contentRefAction, contentRefContent, contentRefObject);
  const statusIconAriaLabel = props2.statusIconAriaLabel || (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings[`${loading || type === "in-progress" ? "inProgress" : type}IconAriaLabel`]);
  const iconType = ICON_TYPES[type];
  const icon = loading ? import_react403.default.createElement(
    "span",
    { role: "img", "aria-label": statusIconAriaLabel },
    import_react403.default.createElement(InternalSpinner, null)
  ) : import_react403.default.createElement(internal_default, { name: iconType, ariaLabel: statusIconAriaLabel });
  const effectiveType = loading ? "info" : type;
  const analyticsAttributes = { [DATA_ATTR_ANALYTICS_FLASHBAR]: effectiveType };
  if (analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.suppressFlowMetricEvents) {
    analyticsAttributes[DATA_ATTR_ANALYTICS_SUPPRESS_FLOW_EVENTS] = "true";
  }
  return (
    // We're not using "polite" or "assertive" here, just turning default behavior off.
    // eslint-disable-next-line @cloudscape-design/components/prefer-live-region
    import_react403.default.createElement(
      "div",
      Object.assign({ ref: mergedRef, role: ariaRole, "aria-live": ariaRole ? "off" : void 0, "data-itemid": id, className: clsx_m_default(styles_css_default145.flash, styles_css_default145[`flash-type-${effectiveType}`], className2, transitionState && {
        [styles_css_default145.enter]: transitionState === "enter",
        [styles_css_default145.entering]: transitionState === "entering",
        [styles_css_default145.entered]: transitionState === "entered",
        [styles_css_default145.exit]: transitionState === "exit",
        [styles_css_default145.exiting]: transitionState === "exiting",
        [styles_css_default145.exited]: transitionState === "exited"
      }, getVisualContextClassname(type === "warning" && !loading ? "flashbar-warning" : "flashbar"), initialHidden && styles_css_default145["initial-hidden"]), style: getFlashStyles(style, effectiveType) }, analyticsAttributes),
      import_react403.default.createElement(
        "div",
        { className: styles_css_default145["flash-body"] },
        import_react403.default.createElement(
          "div",
          { className: styles_css_default145["flash-focus-container"], tabIndex: -1, role: "group", "aria-labelledby": `${flashIconId} ${flashMessageId}` },
          import_react403.default.createElement("div", { className: clsx_m_default(styles_css_default145["flash-icon"], styles_css_default145["flash-text"]), id: flashIconId }, icon),
          import_react403.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default145["flash-message"], styles_css_default145["flash-text"]), id: flashMessageId },
            import_react403.default.createElement("div", { className: clsx_m_default(styles_css_default145["flash-header"], headerReplacementType !== "original" ? styles_css_default145.hidden : styles_css_default144["flash-header"]), ref: headerRef }, header),
            import_react403.default.createElement("div", { className: clsx_m_default(styles_css_default145["header-replacement"], headerReplacementType !== "replaced" && styles_css_default145.hidden), ref: replacementHeaderRef }),
            import_react403.default.createElement("div", { className: clsx_m_default(styles_css_default145["flash-content"], contentReplacementType !== "original" ? styles_css_default145.hidden : styles_css_default144["flash-header"]), ref: contentRef }, content),
            import_react403.default.createElement("div", { className: clsx_m_default(styles_css_default145["content-replacement"], contentReplacementType !== "replaced" && styles_css_default145.hidden), ref: replacementContentRef })
          )
        ),
        import_react403.default.createElement(ActionsWrapper, { className: styles_css_default145["action-button-wrapper"], testUtilClasses: { actionSlot: styles_css_default145["action-slot"], actionButton: styles_css_default145["action-button"] }, action, discoveredActions, buttonText, onButtonClick, containerWidth, wrappedClass: styles_css_default145["action-wrapped"] })
      ),
      dismissible && dismissButton(dismissLabel, onDismiss, style, effectiveType, dismissButtonRefObject, id, onDismissed),
      ariaRole === "status" && import_react403.default.createElement(internal_default2, { sources: [statusIconAriaLabel, headerRefObject, contentRefObject] })
    )
  );
});

// node_modules/@cloudscape-design/components/flashbar/common.js
var handleFlashDismissedInternal = (dismissedId, items, refCurrent, flashRefsCurrent) => {
  var _a2;
  if (!items || !dismissedId || !refCurrent) {
    return;
  }
  const dismissedIndex = items.findIndex((item) => {
    var _a3;
    return ((_a3 = item.id) !== null && _a3 !== void 0 ? _a3 : "") === dismissedId;
  });
  if (dismissedIndex === -1) {
    return;
  }
  let nextItemIndex = dismissedIndex + 1;
  if (nextItemIndex >= items.length) {
    nextItemIndex = dismissedIndex - 1;
  }
  if (nextItemIndex < 0 || nextItemIndex >= items.length) {
    const h1Element = document.querySelector("h1");
    h1Element === null || h1Element === void 0 ? void 0 : h1Element.focus();
    return;
  }
  const nextItemId = (_a2 = items[nextItemIndex].id) !== null && _a2 !== void 0 ? _a2 : nextItemIndex;
  const attemptFocus = () => {
    const nextFlashElement = flashRefsCurrent[nextItemId];
    if (!nextFlashElement) {
      const notificationBarButton = refCurrent === null || refCurrent === void 0 ? void 0 : refCurrent.querySelector(`.${styles_css_default145.button}`);
      if (notificationBarButton) {
        notificationBarButton.focus();
        return;
      }
      const h1Element = document.querySelector("h1");
      h1Element === null || h1Element === void 0 ? void 0 : h1Element.focus();
      return;
    }
    focusFlashFocusableArea(nextFlashElement);
  };
  setTimeout(attemptFocus, 0);
};
function useFlashbar(_a2) {
  var { items, onItemsAdded, onItemsChanged, onItemsRemoved, __internalRootRef } = _a2, restProps = __rest(_a2, ["items", "onItemsAdded", "onItemsChanged", "onItemsRemoved", "__internalRootRef"]);
  const allItemsHaveId = (0, import_react404.useMemo)(() => items.every((item) => "id" in item), [items]);
  const baseProps = getBaseProps(restProps);
  const ref = (0, import_react404.useRef)(null);
  const flashRefs = (0, import_react404.useRef)({});
  const mergedRef = useMergeRefs(ref, __internalRootRef);
  const isReducedMotion = useReducedMotion(ref);
  const isVisualRefresh = useVisualRefresh();
  const [previousItems, setPreviousItems] = (0, import_react404.useState)(items);
  const [nextFocusId, setNextFocusId] = (0, import_react404.useState)(null);
  if (isDevelopment2) {
    if (items === null || items === void 0 ? void 0 : items.some((item) => item.ariaRole === "alert" && !item.id)) {
      warnOnce("Flashbar", `You provided \`ariaRole="alert"\` for a flashbar item without providing an \`id\`. Focus will not be moved to the newly added flash message.`);
    }
  }
  if (items) {
    const newItems = items.filter(({ id }) => id && !previousItems.some((item) => item.id === id));
    const removedItems = previousItems.filter(({ id }) => id && !items.some((item) => item.id === id));
    if (newItems.length > 0 || removedItems.length > 0) {
      setPreviousItems(items);
      onItemsAdded === null || onItemsAdded === void 0 ? void 0 : onItemsAdded(newItems);
      onItemsRemoved === null || onItemsRemoved === void 0 ? void 0 : onItemsRemoved(removedItems);
      onItemsChanged === null || onItemsChanged === void 0 ? void 0 : onItemsChanged({ allItemsHaveId, isReducedMotion });
      const newFocusItems = newItems.filter(({ ariaRole }) => ariaRole === "alert");
      if (newFocusItems.length > 0) {
        setNextFocusId(newFocusItems[0].id);
      }
    }
  }
  const debouncedFocus = useDebounceCallback(focusFlashById, FOCUS_DEBOUNCE_DELAY);
  (0, import_react404.useEffect)(() => {
    if (nextFocusId) {
      debouncedFocus(ref.current, nextFocusId);
    }
  }, [debouncedFocus, nextFocusId, ref]);
  const handleFlashDismissed = (dismissedId) => {
    handleFlashDismissedInternal(dismissedId, items, ref.current, flashRefs.current);
  };
  return {
    allItemsHaveId,
    baseProps,
    isReducedMotion,
    isVisualRefresh,
    mergedRef,
    ref,
    flashRefs,
    handleFlashDismissed
  };
}

// node_modules/@cloudscape-design/components/flashbar/collapsible-flashbar.js
var maxNonCollapsibleItems = 1;
var resizeListenerThrottleDelay = 100;
function CollapsibleFlashbar(_a2) {
  var { items, style } = _a2, restProps = __rest(_a2, ["items", "style"]);
  const [enteringItems, setEnteringItems] = (0, import_react405.useState)([]);
  const [exitingItems, setExitingItems] = (0, import_react405.useState)([]);
  const [isFlashbarStackExpanded, setIsFlashbarStackExpanded] = (0, import_react405.useState)(false);
  const getElementsToAnimate = (0, import_react405.useCallback)(() => {
    const flashElements = isFlashbarStackExpanded ? expandedItemRefs.current : collapsedItemRefs.current;
    return Object.assign(Object.assign({}, flashElements), { notificationBar: notificationBarRef.current });
  }, [isFlashbarStackExpanded]);
  const prepareAnimations = (0, import_react405.useCallback)(() => {
    const rects = getDOMRects(getElementsToAnimate());
    setInitialAnimationState(rects);
  }, [getElementsToAnimate]);
  const collapsedItemRefs = (0, import_react405.useRef)({});
  const expandedItemRefs = (0, import_react405.useRef)({});
  const [initialAnimationState, setInitialAnimationState] = (0, import_react405.useState)(null);
  const listElementRef = (0, import_react405.useRef)(null);
  const notificationBarRef = (0, import_react405.useRef)(null);
  const [transitioning, setTransitioning] = (0, import_react405.useState)(false);
  const flashbarElementId = useUniqueId("flashbar");
  const itemCountElementId = useUniqueId("item-count");
  const { baseProps, isReducedMotion, isVisualRefresh, mergedRef, ref, flashRefs, handleFlashDismissed } = useFlashbar(Object.assign(Object.assign({ items }, restProps), { onItemsAdded: (newItems) => {
    setEnteringItems([...enteringItems, ...newItems]);
  }, onItemsChanged: (options) => {
    if ((options === null || options === void 0 ? void 0 : options.allItemsHaveId) && !(options === null || options === void 0 ? void 0 : options.isReducedMotion)) {
      prepareAnimations();
    }
  }, onItemsRemoved: (removedItems) => {
    setExitingItems([...exitingItems, ...removedItems]);
  } }));
  if (items.length <= maxNonCollapsibleItems && isFlashbarStackExpanded) {
    setIsFlashbarStackExpanded(false);
  }
  const animateFlash = !isReducedMotion;
  function toggleCollapseExpand() {
    if (!isReducedMotion) {
      prepareAnimations();
    }
    setIsFlashbarStackExpanded((prev) => !prev);
  }
  const debouncedFocus = useDebounceCallback(focusFlashById, FOCUS_DEBOUNCE_DELAY);
  (0, import_react405.useLayoutEffect)(() => {
    if (isFlashbarStackExpanded && (items === null || items === void 0 ? void 0 : items.length)) {
      const mostRecentItem = items[0];
      if (mostRecentItem.id !== void 0) {
        debouncedFocus(ref.current, mostRecentItem.id);
      }
    }
  }, [debouncedFocus, isFlashbarStackExpanded]);
  useEffectOnUpdate2(() => {
    if (!isFlashbarStackExpanded && notificationBarRef.current) {
      scrollElementIntoView(notificationBarRef.current);
    }
  }, [isFlashbarStackExpanded]);
  const updateBottomSpacing = (0, import_react405.useMemo)(() => throttle(() => {
    const listElement = listElementRef === null || listElementRef === void 0 ? void 0 : listElementRef.current;
    const flashbar = listElement === null || listElement === void 0 ? void 0 : listElement.parentElement;
    if (listElement && flashbar) {
      flashbar.classList.remove(styles_css_default145.floating);
      const windowHeight = window.innerHeight;
      const outerElement = findUpUntil(flashbar, (element) => element.getAttribute("role") === "region") || flashbar;
      const applySpacing = isFlashbarStackExpanded && Math.ceil(outerElement.getBoundingClientRect().bottom) >= windowHeight;
      if (!applySpacing) {
        flashbar.classList.add(styles_css_default145.floating);
      }
    }
  }, resizeListenerThrottleDelay), [isFlashbarStackExpanded]);
  (0, import_react405.useLayoutEffect)(() => {
    window.addEventListener("resize", updateBottomSpacing);
    return () => {
      window.removeEventListener("resize", updateBottomSpacing);
      updateBottomSpacing.cancel();
    };
  }, [updateBottomSpacing]);
  const { i18nStrings } = restProps;
  const i18n = useInternalI18n("flashbar");
  const ariaLabel = i18n("i18nStrings.ariaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabel);
  const notificationBarText = i18n("i18nStrings.notificationBarText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.notificationBarText);
  const notificationBarAriaLabel = i18n("i18nStrings.notificationBarAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.notificationBarAriaLabel);
  const iconAriaLabels = {
    errorIconAriaLabel: i18n("i18nStrings.errorIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel),
    inProgressIconAriaLabel: i18n("i18nStrings.inProgressIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inProgressIconAriaLabel),
    infoIconAriaLabel: i18n("i18nStrings.infoIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.infoIconAriaLabel),
    successIconAriaLabel: i18n("i18nStrings.successIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.successIconAriaLabel),
    warningIconAriaLabel: i18n("i18nStrings.warningIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel)
  };
  (0, import_react405.useLayoutEffect)(() => {
    if (initialAnimationState) {
      updateBottomSpacing();
      animate({
        elements: getElementsToAnimate(),
        oldState: initialAnimationState,
        newElementInitialState: ({ top }) => ({ scale: 0.9, y: -0.2 * top }),
        onTransitionsEnd: () => setTransitioning(false)
      });
      setTransitioning(true);
      setInitialAnimationState(null);
    }
  }, [updateBottomSpacing, getElementsToAnimate, initialAnimationState, isFlashbarStackExpanded]);
  const isCollapsible = items.length > maxNonCollapsibleItems;
  const countByType = getFlashTypeCount(items);
  const numberOfColorsInStack = new Set(items.map(getItemColor)).size;
  const maxSlots = Math.max(numberOfColorsInStack, 3);
  const stackDepth = Math.min(maxSlots, items.length);
  const itemsToShow = isFlashbarStackExpanded ? items.map((item, index) => Object.assign(Object.assign({}, item), { expandedIndex: index })) : getVisibleCollapsedItems(items, stackDepth).map((item, index) => Object.assign(Object.assign({}, item), { collapsedIndex: index }));
  const getItemId = (item) => {
    var _a3, _b;
    return (_b = (_a3 = item.id) !== null && _a3 !== void 0 ? _a3 : item.expandedIndex) !== null && _b !== void 0 ? _b : 0;
  };
  const hasEntered = (item) => enteringItems.some((_item) => _item.id && _item.id === item.id);
  const hasLeft = (item) => !("expandedIndex" in item);
  const hasEnteredOrLeft = (item) => hasEntered(item) || hasLeft(item);
  const showInnerContent = (item) => isFlashbarStackExpanded || hasLeft(item) || "expandedIndex" in item && item.expandedIndex === 0;
  const shouldUseStandardAnimation = (item, index) => index === 0 && hasEnteredOrLeft(item);
  const getAnimationElementId = (item) => `flash-${getItemId(item)}`;
  const renderList = () => import_react405.default.createElement(
    "ul",
    { ref: listElementRef, className: clsx_m_default(styles_css_default145["flash-list"], isFlashbarStackExpanded ? styles_css_default145.expanded : styles_css_default145.collapsed, transitioning && styles_css_default145["animation-running"], initialAnimationState && styles_css_default145["animation-ready"], isVisualRefresh && styles_css_default145["visual-refresh"]), id: flashbarElementId, "aria-label": ariaLabel, "aria-describedby": isCollapsible ? itemCountElementId : void 0, style: !isFlashbarStackExpanded || transitioning ? {
      [custom_css_properties_default.flashbarStackDepth]: stackDepth
    } : void 0 },
    import_react405.default.createElement(ListWrapper, { withMotion: !isReducedMotion }, itemsToShow.map((item, index) => import_react405.default.createElement(Transition2, { key: getItemId(item), in: !hasLeft(item), onStatusChange: (status) => {
      if (status === "entered") {
        setEnteringItems([]);
      } else if (status === "exited") {
        setExitingItems([]);
      }
    } }, (state, transitionRootElement) => {
      var _a3, _b, _c;
      return import_react405.default.createElement("li", Object.assign({ "aria-hidden": !showInnerContent(item), className: showInnerContent(item) ? clsx_m_default(styles_css_default145["flash-list-item"], !isFlashbarStackExpanded && styles_css_default145.item, !collapsedItemRefs.current[getAnimationElementId(item)] && styles_css_default145["expanded-only"]) : clsx_m_default(styles_css_default145.flash, styles_css_default145[`flash-type-${(_a3 = item.type) !== null && _a3 !== void 0 ? _a3 : "info"}`], styles_css_default145.item), ref: (element) => {
        if (isFlashbarStackExpanded) {
          expandedItemRefs.current[getAnimationElementId(item)] = element;
        } else {
          collapsedItemRefs.current[getAnimationElementId(item)] = element;
        }
      }, style: Object.assign(Object.assign({}, index > 0 && !isFlashbarStackExpanded && getCollapsibleFlashStyles(style, item.type)), (!isFlashbarStackExpanded || transitioning) && {
        [custom_css_properties_default.flashbarStackIndex]: (_c = (_b = item.collapsedIndex) !== null && _b !== void 0 ? _b : item.expandedIndex) !== null && _c !== void 0 ? _c : index
      }), key: getItemId(item) }, getAnalyticsMetadataAttribute(getItemAnalyticsMetadata(index + 1, item.type || "info", item.id))), showInnerContent(item) && import_react405.default.createElement(Flash, Object.assign({ className: clsx_m_default(animateFlash && styles_css_default145["flash-with-motion"], isVisualRefresh && styles_css_default145["flash-refresh"]), key: getItemId(item), ref: (el) => {
        flashRefs.current[getItemId(item)] = el;
        if (shouldUseStandardAnimation(item, index) && transitionRootElement) {
          if (typeof transitionRootElement === "function") {
            transitionRootElement(el);
          } else if (transitionRootElement && typeof transitionRootElement === "object" && "current" in transitionRootElement) {
            transitionRootElement.current = el;
          }
        }
      }, transitionState: shouldUseStandardAnimation(item, index) ? state : void 0, i18nStrings: iconAriaLabels, style, onDismissed: handleFlashDismissed }, item)));
    })))
  );
  return import_react405.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default145.flashbar, styles_css_default145.stack, isCollapsible && styles_css_default145.collapsible, items.length === 2 && styles_css_default145["short-list"], isFlashbarStackExpanded && styles_css_default145.expanded, isVisualRefresh && styles_css_default145["visual-refresh"]), ref: mergedRef }, getAnalyticsMetadataAttribute(getComponentsAnalyticsMetadata(items.length, true, isFlashbarStackExpanded))),
    isFlashbarStackExpanded && renderList(),
    isCollapsible && import_react405.default.createElement(
      "div",
      Object.assign({ className: clsx_m_default(
        styles_css_default145["notification-bar"],
        isVisualRefresh && styles_css_default145["visual-refresh"],
        isFlashbarStackExpanded ? styles_css_default145.expanded : styles_css_default145.collapsed,
        transitioning && styles_css_default145["animation-running"],
        items.length === 2 && styles_css_default145["short-list"],
        getVisualContextClassname("flashbar")
        // Visual context is needed for focus ring to be white
      ), onClick: toggleCollapseExpand, ref: notificationBarRef, style: getNotificationBarStyles(style) }, getAnalyticsMetadataAttribute({
        action: !isFlashbarStackExpanded ? "expand" : "collapse",
        detail: {
          label: "h2"
        }
      })),
      import_react405.default.createElement(
        "span",
        { "aria-live": "polite", className: styles_css_default145.status, role: "status", id: itemCountElementId },
        notificationBarText && import_react405.default.createElement("h2", { className: styles_css_default145.header }, notificationBarText),
        import_react405.default.createElement("span", { className: styles_css_default145["item-count"] }, counterTypes.map(({ type, labelName, iconName }) => import_react405.default.createElement(NotificationTypeCount, { key: type, iconName, label: iconAriaLabels[labelName], count: countByType[type] })))
      ),
      import_react405.default.createElement(
        "button",
        { "aria-controls": flashbarElementId, "aria-describedby": itemCountElementId, "aria-expanded": isFlashbarStackExpanded, "aria-label": notificationBarAriaLabel, className: clsx_m_default(styles_css_default145.button, isFlashbarStackExpanded && styles_css_default145.expanded) },
        import_react405.default.createElement(internal_default, { className: styles_css_default145.icon, size: "normal", name: "angle-down" })
      )
    ),
    !isFlashbarStackExpanded && renderList()
  );
}
var NotificationTypeCount = ({ iconName, label, count }) => {
  return import_react405.default.createElement(
    "span",
    { className: styles_css_default145["type-count"] },
    import_react405.default.createElement(
      "span",
      { title: label },
      import_react405.default.createElement(internal_default, { name: iconName, ariaLabel: label })
    ),
    import_react405.default.createElement("span", { className: styles_css_default145["count-number"] }, count)
  );
};
var ListWrapper = ({ children: children2, withMotion }) => withMotion ? import_react405.default.createElement(TransitionGroup_default, { component: null }, children2) : import_react405.default.createElement(import_react405.default.Fragment, null, children2);

// node_modules/@cloudscape-design/components/flashbar/non-collapsible-flashbar.js
var import_react406 = __toESM(require_react());

// node_modules/@cloudscape-design/components/flashbar/constant.js
var TIMEOUT_FOR_ENTERING_ANIMATION = 115;

// node_modules/@cloudscape-design/components/flashbar/non-collapsible-flashbar.js
function NonCollapsibleFlashbar(_a2) {
  var { items, i18nStrings, style } = _a2, restProps = __rest(_a2, ["items", "i18nStrings", "style"]);
  const { allItemsHaveId, baseProps, isReducedMotion, isVisualRefresh, mergedRef, flashRefs, handleFlashDismissed } = useFlashbar(Object.assign({ items }, restProps));
  const i18n = useInternalI18n("flashbar");
  const ariaLabel = i18n("i18nStrings.ariaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.ariaLabel);
  const iconAriaLabels = {
    errorIconAriaLabel: i18n("i18nStrings.errorIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel),
    inProgressIconAriaLabel: i18n("i18nStrings.inProgressIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inProgressIconAriaLabel),
    infoIconAriaLabel: i18n("i18nStrings.infoIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.infoIconAriaLabel),
    successIconAriaLabel: i18n("i18nStrings.successIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.successIconAriaLabel),
    warningIconAriaLabel: i18n("i18nStrings.warningIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.warningIconAriaLabel)
  };
  const motionDisabled = isReducedMotion || !isVisualRefresh || !allItemsHaveId;
  const animateFlash = !isReducedMotion && isVisualRefresh;
  function renderFlatItemsWithTransitions() {
    if (motionDisabled || !items) {
      return;
    }
    return (
      // This is a proxy for <ul>, so we're not applying a class to another actual component.
      import_react406.default.createElement(TransitionGroup_default, { component: "ul", className: styles_css_default145["flash-list"], "aria-label": ariaLabel }, items.map((item, index) => {
        var _a3;
        return import_react406.default.createElement(Transition2, { transitionChangeDelay: { entering: TIMEOUT_FOR_ENTERING_ANIMATION }, key: (_a3 = item.id) !== null && _a3 !== void 0 ? _a3 : index, in: true }, (state, transitionRootElement) => {
          var _a4;
          return import_react406.default.createElement("li", { className: styles_css_default145["flash-list-item"] }, renderItem(item, (_a4 = item.id) !== null && _a4 !== void 0 ? _a4 : index, transitionRootElement, state));
        });
      }))
    );
  }
  function renderFlatItemsWithoutTransitions() {
    if (!motionDisabled || !items) {
      return;
    }
    return import_react406.default.createElement("ul", Object.assign({ className: styles_css_default145["flash-list"], "aria-label": ariaLabel }, getAnalyticsMetadataAttribute(getComponentsAnalyticsMetadata(items.length, false))), items.map((item, index) => {
      var _a3, _b;
      return import_react406.default.createElement("li", Object.assign({ key: (_a3 = item.id) !== null && _a3 !== void 0 ? _a3 : index, className: styles_css_default145["flash-list-item"] }, getAnalyticsMetadataAttribute(getItemAnalyticsMetadata(index + 1, item.type || "info", item.id))), renderItem(item, (_b = item.id) !== null && _b !== void 0 ? _b : index));
    }));
  }
  function renderItem(item, key2, transitionRootElement, transitionState) {
    return import_react406.default.createElement(Flash, Object.assign({ className: clsx_m_default(animateFlash && styles_css_default145["flash-with-motion"], isVisualRefresh && styles_css_default145["flash-refresh"]), key: key2, ref: (el) => {
      flashRefs.current[key2] = el;
      if (transitionRootElement && typeof transitionRootElement === "function") {
        transitionRootElement(el);
      } else if (transitionRootElement && typeof transitionRootElement === "object" && "current" in transitionRootElement) {
        transitionRootElement.current = el;
      }
    }, transitionState, i18nStrings: iconAriaLabels, style, onDismissed: handleFlashDismissed }, item));
  }
  return import_react406.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default145.flashbar), ref: mergedRef }),
    renderFlatItemsWithTransitions(),
    renderFlatItemsWithoutTransitions()
  );
}

// node_modules/@cloudscape-design/components/flashbar/implementation.js
function FlashbarImplementation(props2) {
  if (props2.stackItems) {
    return import_react407.default.createElement(CollapsibleFlashbar, Object.assign({}, props2));
  } else {
    return import_react407.default.createElement(NonCollapsibleFlashbar, Object.assign({}, props2));
  }
}
var createWidgetizedFlashbar = createWidgetizedComponent(FlashbarImplementation);

// node_modules/@cloudscape-design/components/flashbar/internal.js
var InternalFlashbar = createWidgetizedFlashbar();

// node_modules/@cloudscape-design/components/flashbar/internal-do-not-use-core.js
function Flashbar(props2) {
  const { __internalRootRef } = useBaseComponent("Flashbar", {
    props: { stackItems: props2.stackItems }
  });
  return import_react408.default.createElement(InternalFlashbar, Object.assign({ __internalRootRef }, props2));
}
applyDisplayName(Flashbar, "Flashbar");

// node_modules/@cloudscape-design/components/flashbar/index.js
var Flashbar2 = (props2) => {
  validateProps("Flashbar", props2, ["style"], {}, "console");
  return import_react409.default.createElement(Flashbar, props2);
};
applyDisplayName(Flashbar2, "Flashbar");
var flashbar_default = Flashbar2;

// node_modules/@cloudscape-design/components/form/index.js
var import_react411 = __toESM(require_react());

// node_modules/@cloudscape-design/components/form/internal.js
var import_react410 = __toESM(require_react());

// node_modules/@cloudscape-design/components/form/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/form/analytics-metadata/styles.scoped.css";
var styles_css_default146 = {
  "header": "awsui_header_6xiez_1ns0c_5"
};

// node_modules/@cloudscape-design/components/form/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/form/styles.scoped.css";
var styles_css_default147 = {
  "root": "awsui_root_1i0s3_sdppn_145",
  "header": "awsui_header_1i0s3_sdppn_177",
  "content": "awsui_content_1i0s3_sdppn_181",
  "error": "awsui_error_1i0s3_sdppn_185",
  "footer": "awsui_footer_1i0s3_sdppn_189",
  "actions-section": "awsui_actions-section_1i0s3_sdppn_193",
  "secondary-actions": "awsui_secondary-actions_1i0s3_sdppn_202",
  "actions": "awsui_actions_1i0s3_sdppn_193"
};

// node_modules/@cloudscape-design/components/form/internal.js
function InternalForm(_a2) {
  var { children: children2, header, errorText, errorIconAriaLabel: errorIconAriaLabelOverride, actions, secondaryActions, __internalRootRef, __injectAnalyticsComponentMetadata, __errorSlotId } = _a2, props2 = __rest(_a2, ["children", "header", "errorText", "errorIconAriaLabel", "actions", "secondaryActions", "__internalRootRef", "__injectAnalyticsComponentMetadata", "__errorSlotId"]);
  const baseProps = getBaseProps(props2);
  const i18n = useInternalI18n("form");
  const errorIconAriaLabel = i18n("errorIconAriaLabel", errorIconAriaLabelOverride);
  const analyticsComponentMetadata = {
    component: {
      name: "awsui.Form",
      label: {
        selector: ["h1", "h2", "h3"].map((heading) => `.${styles_css_default146.header} ${heading}`)
      }
    }
  };
  return import_react410.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef, className: clsx_m_default(styles_css_default147.root, baseProps.className) }, __injectAnalyticsComponentMetadata ? getAnalyticsMetadataAttribute(analyticsComponentMetadata) : {}),
    header && import_react410.default.createElement("div", { className: clsx_m_default(styles_css_default147.header, styles_css_default146.header) }, header),
    children2 && import_react410.default.createElement("div", { className: styles_css_default147.content }, children2),
    errorText && import_react410.default.createElement(
      InternalBox,
      { margin: { top: "l" } },
      import_react410.default.createElement(
        internal_default4,
        { type: "error", statusIconAriaLabel: errorIconAriaLabel },
        import_react410.default.createElement("div", { className: styles_css_default147.error, id: __errorSlotId }, errorText)
      )
    ),
    (actions || secondaryActions) && import_react410.default.createElement(
      "div",
      { className: styles_css_default147.footer },
      import_react410.default.createElement(
        "div",
        { className: styles_css_default147["actions-section"] },
        actions && import_react410.default.createElement("div", { className: styles_css_default147.actions }, actions),
        secondaryActions && import_react410.default.createElement("div", { className: styles_css_default147["secondary-actions"] }, secondaryActions)
      )
    ),
    errorText && import_react410.default.createElement(
      internal_default2,
      { hidden: true, tagName: "span", assertive: true },
      errorIconAriaLabel,
      ", ",
      errorText
    )
  );
}

// node_modules/@cloudscape-design/components/form/index.js
var FormWithAnalytics = (_a2) => {
  var { variant = "full-page", actions, errorText, __internalRootRef } = _a2, props2 = __rest(_a2, ["variant", "actions", "errorText", "__internalRootRef"]);
  const rootRef = (0, import_react411.useRef)(null);
  const ref = useMergeRefs(rootRef, __internalRootRef);
  const { funnelIdentifier, funnelInteractionId, funnelProps, funnelSubmit, funnelNextOrSubmitAttempt, errorCount, submissionAttempt, funnelErrorContext } = useFunnel();
  const funnelStepInfo = useFunnelStepRef();
  const handleActionButtonClick = ({ variant: variant2 }) => {
    if (variant2 === "primary") {
      funnelNextOrSubmitAttempt();
      funnelSubmit();
    }
  };
  const errorSlotId = useUniqueId("form-error-");
  (0, import_react411.useEffect)(() => {
    var _a3, _b;
    if (funnelInteractionId && errorText) {
      errorCount.current++;
      const stepName = getTextFromSelector(funnelStepInfo.current.stepNameSelector);
      FunnelMetrics.funnelStepError({
        funnelInteractionId,
        stepNumber: funnelStepInfo.current.stepNumber,
        stepNameSelector: funnelStepInfo.current.stepNameSelector,
        stepName,
        stepIdentifier: funnelStepInfo.current.stepIdentifier,
        currentDocument: (_a3 = rootRef.current) === null || _a3 === void 0 ? void 0 : _a3.ownerDocument,
        totalSubSteps: funnelStepInfo.current.subStepCount.current,
        funnelIdentifier,
        subStepAllSelector: getSubStepAllSelector(),
        errorContext: funnelStepInfo.current.stepErrorContext,
        subStepConfiguration: (_b = funnelStepInfo.current.subStepConfiguration.current) === null || _b === void 0 ? void 0 : _b.get(funnelStepInfo.current.stepNumber),
        stepErrorSelector: "#" + errorSlotId
      });
      return () => {
        errorCount.current--;
      };
    }
  }, [
    funnelInteractionId,
    funnelIdentifier,
    errorText,
    submissionAttempt,
    errorCount,
    funnelErrorContext,
    errorSlotId,
    funnelStepInfo
  ]);
  return import_react411.default.createElement(
    ButtonContext.Provider,
    { value: { onClick: handleActionButtonClick } },
    import_react411.default.createElement(InternalForm, Object.assign({ variant, actions, errorText, __errorSlotId: errorSlotId }, props2, funnelProps, funnelStepInfo.current.funnelStepProps, { __internalRootRef: ref, __injectAnalyticsComponentMetadata: true }))
  );
};
function Form(_a2) {
  var { variant = "full-page" } = _a2, props2 = __rest(_a2, ["variant"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props2);
  const baseComponentProps = useBaseComponent("Form", {
    props: {
      variant,
      flowType: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.flowType
    },
    metadata: {
      hasResourceType: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.resourceType),
      hasInstanceIdentifier: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier)
    }
  }, analyticsMetadata);
  const inheritedFunnelNameSelector = useFunnelNameSelector();
  const funnelNameSelector = inheritedFunnelNameSelector || `.${styles_css_default146.header} .${styles_css_default73["heading-text"]}`;
  return import_react411.default.createElement(
    AnalyticsFunnel,
    { funnelIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, funnelFlowType: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.flowType, funnelErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext, funnelResourceType: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.resourceType, funnelType: "single-page", optionalStepNumbers: [], totalFunnelSteps: 1, funnelNameSelectors: () => [funnelNameSelector, `.${styles_css_default146.header}`] },
    import_react411.default.createElement(
      AnalyticsFunnelStep,
      { stepIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, stepErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext, stepNumber: 1 },
      import_react411.default.createElement(FormWithAnalytics, Object.assign({ variant }, props2, baseComponentProps))
    )
  );
}
applyDisplayName(Form, "Form");

// node_modules/@cloudscape-design/components/form-field/index.js
var import_react412 = __toESM(require_react());
function FormField(_a2) {
  var { stretch = false } = _a2, props2 = __rest(_a2, ["stretch"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props2);
  const baseComponentProps = useBaseComponent("FormField", {
    props: {
      stretch
    },
    metadata: {
      hasInstanceIdentifier: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier),
      hasErrorContext: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext)
    }
  }, analyticsMetadata);
  return import_react412.default.createElement(InternalFormField, Object.assign({ stretch }, props2, { __hideLabel: false, __analyticsMetadata: analyticsMetadata }, baseComponentProps, getAnalyticsMetadataAttribute({
    component: {
      name: "awsui.FormField",
      label: `.${styles_css_default79.label}`
    }
  })));
}
applyDisplayName(FormField, "FormField");

// node_modules/@cloudscape-design/components/grid/index.js
var import_react413 = __toESM(require_react());
function Grid3(_a2) {
  var { gridDefinition = [], disableGutters = false, children: children2 } = _a2, restProps = __rest(_a2, ["gridDefinition", "disableGutters", "children"]);
  const baseComponentProps = useBaseComponent("Grid", {
    props: { disableGutters }
  });
  const baseProps = getBaseProps(restProps);
  const [breakpoint, ref] = useContainerBreakpoints(void 0);
  return import_react413.default.createElement(internal_default11, Object.assign({}, baseProps, baseComponentProps, { ref, __breakpoint: breakpoint, gridDefinition, disableGutters }), children2);
}
applyDisplayName(Grid3, "Grid");

// node_modules/@cloudscape-design/components/header/index.js
var import_react414 = __toESM(require_react());
function Header2(_a2) {
  var { variant = "h2" } = _a2, props2 = __rest(_a2, ["variant"]);
  const baseComponentProps = useBaseComponent("Header", {
    props: { headingTagOverride: props2.headingTagOverride, variant }
  });
  const tabIndex = variant === "h1" ? -1 : void 0;
  return import_react414.default.createElement(InternalHeader, Object.assign({ __headingTagTabIndex: tabIndex, variant }, props2, baseComponentProps));
}
applyDisplayName(Header2, "Header");

// node_modules/@cloudscape-design/components/help-panel/index.js
var import_react416 = __toESM(require_react());

// node_modules/@cloudscape-design/components/help-panel/implementation.js
var import_react415 = __toESM(require_react());

// node_modules/@cloudscape-design/components/help-panel/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/help-panel/styles.scoped.css";
var styles_css_default148 = {
  "help-panel": "awsui_help-panel_1d237_1vyub_181",
  "loading": "awsui_loading_1d237_1vyub_348",
  "header": "awsui_header_1d237_1vyub_353",
  "with-toolbar": "awsui_with-toolbar_1d237_1vyub_371",
  "content": "awsui_content_1d237_1vyub_390",
  "footer": "awsui_footer_1d237_1vyub_441"
};

// node_modules/@cloudscape-design/components/help-panel/implementation.js
function HelpPanelImplementation(_a2) {
  var { header, footer, children: children2, loading, loadingText, __internalRootRef } = _a2, restProps = __rest(_a2, ["header", "footer", "children", "loading", "loadingText", "__internalRootRef"]);
  const baseProps = getBaseProps(restProps);
  const isToolbar = useAppLayoutToolbarDesignEnabled();
  const i18n = useInternalI18n("help-panel");
  const containerProps = Object.assign(Object.assign({}, baseProps), { className: clsx_m_default(baseProps.className, styles_css_default148["help-panel"], isToolbar && styles_css_default148["with-toolbar"], loading && styles_css_default148.loading) });
  return loading ? import_react415.default.createElement(
    "div",
    Object.assign({}, containerProps, { ref: __internalRootRef }),
    import_react415.default.createElement(
      StatusIndicator,
      { type: "loading" },
      import_react415.default.createElement(internal_default2, { tagName: "span" }, i18n("loadingText", loadingText))
    )
  ) : import_react415.default.createElement(
    "div",
    Object.assign({}, containerProps, { ref: __internalRootRef }),
    header && import_react415.default.createElement("div", { className: clsx_m_default(styles_css_default148.header) }, header),
    import_react415.default.createElement(
      LinkDefaultVariantContext.Provider,
      { value: { defaultVariant: "primary" } },
      import_react415.default.createElement("div", { className: styles_css_default148.content }, children2)
    ),
    footer && import_react415.default.createElement(
      "div",
      { className: styles_css_default148.footer },
      import_react415.default.createElement("hr", { role: "presentation" }),
      footer
    )
  );
}
var createWidgetizedHelpPanel = createWidgetizedComponent(HelpPanelImplementation);

// node_modules/@cloudscape-design/components/help-panel/internal.js
var InternalHelpPanel = createWidgetizedHelpPanel();

// node_modules/@cloudscape-design/components/help-panel/index.js
function HelpPanel(props2) {
  const internalProps = useBaseComponent("HelpPanel");
  return import_react416.default.createElement(InternalHelpPanel, Object.assign({}, props2, internalProps));
}
applyDisplayName(HelpPanel, "HelpPanel");

// node_modules/@cloudscape-design/components/hotspot/index.js
var import_react417 = __toESM(require_react());

// node_modules/@cloudscape-design/components/hotspot/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/hotspot/styles.scoped.css";
var styles_css_default149 = {
  "root": "awsui_root_cqcqk_1oy1w_181",
  "wrapper": "awsui_wrapper_cqcqk_1oy1w_185",
  "elementWrapper": "awsui_elementWrapper_cqcqk_1oy1w_189",
  "markerWrapper": "awsui_markerWrapper_cqcqk_1oy1w_193",
  "placement-right": "awsui_placement-right_cqcqk_1oy1w_198",
  "placement-left": "awsui_placement-left_cqcqk_1oy1w_203",
  "inlineWrapper": "awsui_inlineWrapper_cqcqk_1oy1w_208"
};

// node_modules/@cloudscape-design/components/hotspot/index.js
function Hotspot(_a2) {
  var { children: children2, hotspotId, side = "right", direction = "top" } = _a2, restProps = __rest(_a2, ["children", "hotspotId", "side", "direction"]);
  const { __internalRootRef } = useBaseComponent("Hotspot", { props: { direction, side } });
  const baseProps = getBaseProps(restProps);
  const hotspotContext2 = (0, import_react417.useContext)(hotspotContext);
  const content = hotspotContext2.getContentForId(hotspotId, direction);
  const { unregisterHotspot, registerHotspot } = hotspotContext2;
  (0, import_react417.useEffect)(() => {
    registerHotspot(hotspotId);
    return () => unregisterHotspot(hotspotId);
  }, [hotspotId, unregisterHotspot, registerHotspot]);
  if (children2) {
    return import_react417.default.createElement(
      "div",
      Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default149.root, styles_css_default149.wrapper), ref: __internalRootRef }),
      import_react417.default.createElement("div", { className: styles_css_default149.elementWrapper }, children2),
      import_react417.default.createElement("div", { className: clsx_m_default(styles_css_default149.markerWrapper, styles_css_default149[`placement-${side}`]), onClick: (e3) => e3.stopPropagation() }, content)
    );
  }
  return import_react417.default.createElement("span", Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default149.root, styles_css_default149.inlineWrapper), ref: __internalRootRef, onClick: (e3) => e3.stopPropagation() }), content);
}
applyDisplayName(Hotspot, "Hotspot");

// node_modules/@cloudscape-design/components/icon/index.js
var import_react419 = __toESM(require_react());

// node_modules/@cloudscape-design/components/icon/internal-do-not-use-core.js
var import_react418 = __toESM(require_react());
function Icon(_a2) {
  var { size = "normal", variant = "normal" } = _a2, props2 = __rest(_a2, ["size", "variant"]);
  const baseComponentProps = useBaseComponent("Icon", { props: { name: props2.name, size, variant } });
  return import_react418.default.createElement(internal_default, Object.assign({ size, variant }, props2, baseComponentProps));
}
applyDisplayName(Icon, "Icon");

// node_modules/@cloudscape-design/components/icon/index.js
var Icon2 = (props2) => {
  validateProps("Icon", props2, ["nativeAttributes"], {}, "console");
  return import_react419.default.createElement(Icon, props2);
};
applyDisplayName(Icon2, "Icon");
var icon_default = Icon2;

// node_modules/@cloudscape-design/components/input/index.js
var import_react421 = __toESM(require_react());

// node_modules/@cloudscape-design/components/input/internal-do-not-use-core.js
var import_react420 = __toESM(require_react());
var Input = import_react420.default.forwardRef((_a2, ref) => {
  var { value, type = "text", step: step2, inputMode, autoComplete = true, spellcheck, disabled, readOnly, disableBrowserAutocorrect, onKeyDown, onKeyUp, onChange, onBlur, onFocus, ariaRequired, name, placeholder, autoFocus, ariaLabel, ariaLabelledby, ariaDescribedby, invalid, warning, controlId, clearAriaLabel, nativeInputAttributes } = _a2, rest = __rest(_a2, ["value", "type", "step", "inputMode", "autoComplete", "spellcheck", "disabled", "readOnly", "disableBrowserAutocorrect", "onKeyDown", "onKeyUp", "onChange", "onBlur", "onFocus", "ariaRequired", "name", "placeholder", "autoFocus", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "invalid", "warning", "controlId", "clearAriaLabel", "nativeInputAttributes"]);
  const baseComponentProps = useBaseComponent("Input", {
    props: { autoComplete, autoFocus, disableBrowserAutocorrect, inputMode, readOnly, spellcheck, type }
  });
  const baseProps = getBaseProps(rest);
  const inputRef = (0, import_react420.useRef)(null);
  (0, import_react420.useImperativeHandle)(ref, () => ({
    focus(...args) {
      var _a3;
      (_a3 = inputRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus(...args);
    },
    select() {
      var _a3;
      (_a3 = inputRef.current) === null || _a3 === void 0 ? void 0 : _a3.select();
    }
  }), [inputRef]);
  return import_react420.default.createElement(internal_default12, Object.assign({ ref: inputRef }, Object.assign(Object.assign(Object.assign({}, baseProps), baseComponentProps), {
    autoComplete,
    ariaLabel,
    ariaRequired,
    autoFocus,
    disabled,
    disableBrowserAutocorrect,
    name,
    onKeyDown,
    onKeyUp,
    onChange,
    onBlur,
    onFocus,
    placeholder,
    readOnly,
    type,
    step: step2,
    inputMode,
    spellcheck,
    value,
    ariaDescribedby,
    ariaLabelledby,
    invalid,
    warning,
    controlId,
    clearAriaLabel,
    nativeInputAttributes
  }), { className: clsx_m_default(styles_css_default83.root, baseProps.className), __inheritFormFieldProps: true, __injectAnalyticsComponentMetadata: true }));
});
applyDisplayName(Input, "Input");
var internal_do_not_use_core_default8 = Input;

// node_modules/@cloudscape-design/components/input/index.js
var Input2 = import_react421.default.forwardRef((props2, ref) => {
  validateProps("Input", props2, ["nativeInputAttributes"], {}, "console");
  return import_react421.default.createElement(internal_do_not_use_core_default8, { ref, ...props2 });
});
applyDisplayName(Input2, "Input");
var input_default = Input2;

// node_modules/@cloudscape-design/components/key-value-pairs/index.js
var import_react423 = __toESM(require_react());

// node_modules/@cloudscape-design/components/key-value-pairs/internal.js
var import_react422 = __toESM(require_react());

// node_modules/@cloudscape-design/components/key-value-pairs/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/key-value-pairs/styles.scoped.css";
var styles_css_default150 = {
  "key-value-pairs": "awsui_key-value-pairs_1y9fy_iaqvg_145",
  "group-title": "awsui_group-title_1y9fy_iaqvg_177",
  "group-list": "awsui_group-list_1y9fy_iaqvg_181",
  "group-list-item": "awsui_group-list-item_1y9fy_iaqvg_191",
  "term": "awsui_term_1y9fy_iaqvg_195",
  "key-label": "awsui_key-label_1y9fy_iaqvg_203",
  "detail": "awsui_detail_1y9fy_iaqvg_212",
  "info": "awsui_info_1y9fy_iaqvg_247"
};

// node_modules/@cloudscape-design/components/key-value-pairs/internal.js
var InternalKeyValuePair = ({ label, info, value, id }) => {
  const kvPairId = useUniqueId("kv-pair-");
  return import_react422.default.createElement(
    import_react422.default.Fragment,
    null,
    import_react422.default.createElement(
      "dt",
      { className: styles_css_default150.term },
      import_react422.default.createElement("div", { className: styles_css_default150["key-label"], id: id || kvPairId }, label),
      import_react422.default.createElement(InfoLinkLabelContext.Provider, { value: id || kvPairId }, info && import_react422.default.createElement("span", { className: styles_css_default150.info }, info))
    ),
    import_react422.default.createElement("dd", { className: styles_css_default150.detail }, value)
  );
};
var InternalKeyValuePairGroup = ({ label, value }) => import_react422.default.createElement(
  import_react422.default.Fragment,
  null,
  label && import_react422.default.createElement("dt", { className: styles_css_default150["group-title"] }, label),
  import_react422.default.createElement("dd", { className: styles_css_default150.detail }, value)
);
var InternalKeyValuePairs = import_react422.default.forwardRef((_a2, ref) => {
  var { columns, items, className: className2, ariaLabel, ariaLabelledby, minColumnWidth } = _a2, rest = __rest(_a2, ["columns", "items", "className", "ariaLabel", "ariaLabelledby", "minColumnWidth"]);
  const MAX_COLUMNS = 4;
  if (columns > MAX_COLUMNS) {
    warnOnce("Key-value pairs", `\`columns\` (${columns}) must be <= ${MAX_COLUMNS}. Using ${MAX_COLUMNS} as default.`);
  }
  return import_react422.default.createElement(
    LinkDefaultVariantContext.Provider,
    { value: { defaultVariant: "primary" } },
    import_react422.default.createElement(
      "div",
      Object.assign({}, rest, { className: clsx_m_default(styles_css_default150["key-value-pairs"], className2), "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, ref }),
      import_react422.default.createElement(ColumnLayout, { __tagOverride: "dl", columns: Math.min(columns, MAX_COLUMNS), variant: "text-grid", minColumnWidth }, items.map((pair, index) => {
        if (pair.type === "group") {
          return (
            /* InternalKeyValuePairGroup tells react to treat the dt-dd pair as an individual layout item.
             * Otherwise, without this component, they will be rendered as a list, which ruins the html structure.
             * InternalKeyValuePairGroup is not wrapped by div tag, because it ruins a11y compatibility for dl -> dt/dd
             *  */
            import_react422.default.createElement(InternalKeyValuePairGroup, { key: index, label: pair.title && import_react422.default.createElement(InternalBox, { variant: "h3", padding: "n" }, pair.title), value: import_react422.default.createElement("dl", { className: styles_css_default150["group-list"] }, pair.items.map((item, itemIndex) => import_react422.default.createElement(
              "div",
              { key: itemIndex, className: styles_css_default150["group-list-item"] },
              import_react422.default.createElement(InternalKeyValuePair, Object.assign({}, item))
            ))) })
          );
        }
        return import_react422.default.createElement(InternalKeyValuePair, Object.assign({ key: index }, pair));
      }))
    )
  );
});
var internal_default26 = InternalKeyValuePairs;

// node_modules/@cloudscape-design/components/key-value-pairs/index.js
function KeyValuePairs(_a2) {
  var { columns = 1, items, ariaLabel, ariaLabelledby, minColumnWidth = 150 } = _a2, rest = __rest(_a2, ["columns", "items", "ariaLabel", "ariaLabelledby", "minColumnWidth"]);
  const { __internalRootRef } = useBaseComponent("KeyValuePairs", {
    props: { columns }
  });
  const baseProps = getBaseProps(rest);
  return import_react423.default.createElement(internal_default26, Object.assign({ columns, items, ariaLabel, ariaLabelledby, minColumnWidth }, baseProps, { ref: __internalRootRef }));
}
applyDisplayName(KeyValuePairs, "KeyValuePairs");

// node_modules/@cloudscape-design/components/line-chart/index.js
var import_react424 = __toESM(require_react());

// node_modules/@cloudscape-design/components/line-chart/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/line-chart/styles.scoped.css";
var styles_css_default151 = {
  "root": "awsui_root_g9v3m_im8v7_5"
};

// node_modules/@cloudscape-design/components/line-chart/index.js
function LineChart(_a2) {
  var { series = [], height = 500, xScaleType = "linear", yScaleType = "linear", detailPopoverSize = "medium", statusType = "finished", emphasizeBaselineAxis = true } = _a2, props2 = __rest(_a2, ["series", "height", "xScaleType", "yScaleType", "detailPopoverSize", "statusType", "emphasizeBaselineAxis"]);
  const baseComponentProps = useBaseComponent("LineChart", {
    props: {
      detailPopoverSize,
      emphasizeBaselineAxis,
      fitHeight: props2.fitHeight,
      hideFilter: props2.hideFilter,
      hideLegend: props2.hideLegend,
      xScaleType,
      yScaleType
    }
  });
  const baseProps = getBaseProps(props2);
  const className2 = clsx_m_default(baseProps.className, styles_css_default151.root);
  return import_react424.default.createElement(InternalMixedLineBarChart, Object.assign({}, props2, baseComponentProps, { className: className2, height, xScaleType, yScaleType, stackedBars: false, horizontalBars: false, series, detailPopoverSize, statusType, emphasizeBaselineAxis }));
}
applyDisplayName(LineChart, "LineChart");
var line_chart_default = LineChart;

// node_modules/@cloudscape-design/components/link/index.js
var import_react426 = __toESM(require_react());

// node_modules/@cloudscape-design/components/link/internal-do-not-use-core.js
var import_react425 = __toESM(require_react());
var Link = import_react425.default.forwardRef((_a2, ref) => {
  var { fontSize = "body-m", color: color2 = "normal", external = false, style } = _a2, props2 = __rest(_a2, ["fontSize", "color", "external", "style"]);
  const baseComponentProps = useBaseComponent("Link", {
    props: { color: color2, external, fontSize, rel: props2.rel, target: props2.target, variant: props2.variant }
  });
  const analyticsMetadata = {
    action: "click",
    detail: {
      label: { root: "self" },
      external: `${external}`
    },
    component: {
      name: "awsui.Link",
      label: { root: "self" },
      properties: { variant: props2.variant || "secondary" }
    }
  };
  if (props2.href) {
    analyticsMetadata.detail.href = props2.href;
  }
  return import_react425.default.createElement(internal_default10, Object.assign({ fontSize, color: color2, external }, props2, baseComponentProps, { ref }, getAnalyticsMetadataAttribute(analyticsMetadata), { style }));
});
applyDisplayName(Link, "Link");
var internal_do_not_use_core_default9 = Link;

// node_modules/@cloudscape-design/components/link/index.js
var Link2 = import_react426.default.forwardRef((props2, ref) => {
  validateProps("Link", props2, ["nativeAttributes", "style"], {}, "console");
  return import_react426.default.createElement(internal_do_not_use_core_default9, { ref, ...props2 });
});
applyDisplayName(Link2, "Link");
var link_default = Link2;

// node_modules/@cloudscape-design/components/list/index.js
var import_react427 = __toESM(require_react());
function List(props2) {
  const baseComponentProps = useBaseComponent("List");
  return import_react427.default.createElement(InternalList, Object.assign({}, baseComponentProps, props2));
}
applyDisplayName(List, "List");

// node_modules/@cloudscape-design/components/live-region/index.js
var import_react428 = __toESM(require_react());
function LiveRegion2(_a2) {
  var { assertive = false, hidden = false, tagName = "div" } = _a2, restProps = __rest(_a2, ["assertive", "hidden", "tagName"]);
  const baseComponentProps = useBaseComponent("LiveRegion", { props: { assertive, hidden } });
  return import_react428.default.createElement(internal_default2, Object.assign({ assertive, hidden, tagName }, baseComponentProps, restProps));
}
applyDisplayName(LiveRegion2, "LiveRegion");
var live_region_default = LiveRegion2;

// node_modules/@cloudscape-design/components/mixed-line-bar-chart/index.js
var import_react429 = __toESM(require_react());
function MixedLineBarChart(_a2) {
  var { series = [], height = 500, xScaleType = "linear", yScaleType = "linear", stackedBars = false, horizontalBars = false, statusType = "finished", detailPopoverSize = "medium", emphasizeBaselineAxis = true } = _a2, props2 = __rest(_a2, ["series", "height", "xScaleType", "yScaleType", "stackedBars", "horizontalBars", "statusType", "detailPopoverSize", "emphasizeBaselineAxis"]);
  const baseComponentProps = useBaseComponent("MixedLineBarChart", {
    props: {
      detailPopoverSize,
      emphasizeBaselineAxis,
      fitHeight: props2.fitHeight,
      hideFilter: props2.hideFilter,
      hideLegend: props2.hideLegend,
      horizontalBars,
      stackedBars,
      xScaleType,
      yScaleType
    }
  });
  return import_react429.default.createElement(InternalMixedLineBarChart, Object.assign({ series, height, xScaleType, yScaleType, stackedBars, horizontalBars, statusType, detailPopoverSize, emphasizeBaselineAxis }, props2, baseComponentProps));
}
applyDisplayName(MixedLineBarChart, "MixedLineBarChart");
var mixed_line_bar_chart_default = MixedLineBarChart;

// node_modules/@cloudscape-design/components/modal/index.js
var import_react430 = __toESM(require_react());
function ModalWithAnalyticsFunnel(_a2) {
  var { analyticsMetadata, baseComponentProps, size = "medium" } = _a2, props2 = __rest(_a2, ["analyticsMetadata", "baseComponentProps", "size"]);
  const modalId = useUniqueId();
  const dataAttributes = {
    [DATA_ATTR_MODAL_ID]: modalId
  };
  return import_react430.default.createElement(
    AnalyticsFunnel,
    { mounted: props2.visible, funnelIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, funnelFlowType: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.flowType, funnelErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext, funnelResourceType: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.resourceType, funnelType: "modal", optionalStepNumbers: [], totalFunnelSteps: 1, funnelNameSelectors: () => {
      var _a3;
      return [
        `[${DATA_ATTR_MODAL_ID}="${(_a3 = window === null || window === void 0 ? void 0 : window.CSS) === null || _a3 === void 0 ? void 0 : _a3.escape(modalId)}"] .${styles_css_default115["header--text"]}`
      ];
    } },
    import_react430.default.createElement(
      AnalyticsFunnelStep,
      { mounted: props2.visible, stepIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, stepErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext, stepNumber: 1 },
      import_react430.default.createElement(
        AnalyticsFunnelSubStep,
        { subStepIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, subStepErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext },
        import_react430.default.createElement(InternalModalAsFunnel, Object.assign({ size }, props2, baseComponentProps, dataAttributes, { __injectAnalyticsComponentMetadata: true }))
      )
    )
  );
}
function Modal(_a2) {
  var { size = "medium" } = _a2, props2 = __rest(_a2, ["size"]);
  const { isInFunnel } = useFunnel();
  const analyticsMetadata = getAnalyticsMetadataProps(props2);
  const baseComponentProps = useBaseComponent("Modal", {
    props: {
      size,
      disableContentPaddings: props2.disableContentPaddings,
      flowType: analyticsMetadata.flowType
    },
    metadata: {
      hasResourceType: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.resourceType),
      hasInstanceIdentifier: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier)
    }
  }, analyticsMetadata);
  if (!isInFunnel) {
    return import_react430.default.createElement(ModalWithAnalyticsFunnel, Object.assign({ analyticsMetadata, baseComponentProps, size }, props2));
  }
  return import_react430.default.createElement(InternalModal, Object.assign({ size }, props2, baseComponentProps, { __injectAnalyticsComponentMetadata: true }));
}
applyDisplayName(Modal, "Modal");

// node_modules/@cloudscape-design/components/multiselect/index.js
var import_react431 = __toESM(require_react());
var Multiselect = import_react431.default.forwardRef((_a2, ref) => {
  var { options = [], filteringType = "none", statusType = "finished", selectedOptions = [], keepOpen = true, hideTokens = false } = _a2, restProps = __rest(_a2, ["options", "filteringType", "statusType", "selectedOptions", "keepOpen", "hideTokens"]);
  const baseComponentProps = useBaseComponent("Multiselect", {
    props: {
      inlineTokens: restProps.inlineTokens,
      autoFocus: restProps.autoFocus,
      expandToViewport: restProps.expandToViewport,
      filteringType,
      hideTokens,
      keepOpen,
      tokenLimit: restProps.tokenLimit,
      virtualScroll: restProps.virtualScroll,
      readOnly: restProps.readOnly,
      enableSelectAll: restProps.enableSelectAll
    },
    metadata: {
      hasInlineLabel: Boolean(restProps.inlineLabelText),
      hasDisabledReasons: options.some((option) => Boolean(option.disabledReason))
    }
  });
  const componentAnalyticsMetadata2 = {
    name: "awsui.Multiselect",
    label: `.${styles_css_default90["button-trigger"]}`,
    properties: {
      disabled: `${!!restProps.disabled}`,
      selectedOptionsCount: `${selectedOptions.length}`,
      selectedOptionsValues: selectedOptions.filter((option) => option.value !== void 0).map((option) => `${option.value}`)
    }
  };
  return import_react431.default.createElement(internal_default13, Object.assign({ options, filteringType, statusType, selectedOptions, keepOpen, hideTokens }, restProps, baseComponentProps, { ref }, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 })));
});
applyDisplayName(Multiselect, "Multiselect");
var multiselect_default = Multiselect;

// node_modules/@cloudscape-design/components/navigable-group/index.js
var import_react432 = __toESM(require_react());
var NavigableGroup = import_react432.default.forwardRef((_a2, ref) => {
  var rest = __rest(_a2, []);
  const baseProps = getBaseProps(rest);
  const baseComponentProps = useBaseComponent("NavigableGroup");
  const externalProps = getExternalProps(rest);
  return import_react432.default.createElement(internal_default7, Object.assign({}, baseProps, baseComponentProps, externalProps, { ref }));
});
applyDisplayName(NavigableGroup, "NavigableGroup");
var navigable_group_default = NavigableGroup;

// node_modules/@cloudscape-design/components/pagination/index.js
var import_react434 = __toESM(require_react());

// node_modules/@cloudscape-design/components/pagination/internal.js
var import_react433 = __toESM(require_react());

// node_modules/@cloudscape-design/components/pagination/utils.js
function range2(from, to) {
  const result = [];
  for (let i2 = from; i2 <= to; i2++) {
    result.push(i2);
  }
  return result;
}
function getPaginationState(currentPageIndex, totalPagesCount, isOpenEnd) {
  const numberOfControls = 7;
  const leftDelta = Math.floor(numberOfControls / 2);
  let rightDelta = leftDelta;
  const lowerLimit = 2;
  let upperLimit = totalPagesCount - 1;
  if (isOpenEnd) {
    rightDelta++;
    upperLimit = totalPagesCount + 1;
  }
  let leftIndex = currentPageIndex - leftDelta;
  let rightIndex = currentPageIndex + rightDelta;
  if (leftIndex < lowerLimit) {
    rightIndex += lowerLimit - leftIndex;
    leftIndex = lowerLimit;
  }
  if (rightIndex > upperLimit) {
    leftIndex -= rightIndex - upperLimit;
    rightIndex = upperLimit;
  }
  leftIndex = Math.max(leftIndex, 2);
  rightIndex = Math.min(rightIndex, upperLimit);
  const leftDots = leftIndex > 2;
  const rightDots = isOpenEnd || rightIndex < upperLimit;
  if (leftDots) {
    leftIndex++;
  }
  if (rightDots) {
    rightIndex--;
  }
  return { leftDots, rightDots, leftIndex, rightIndex };
}

// node_modules/@cloudscape-design/components/pagination/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/pagination/styles.scoped.css";
var styles_css_default152 = {
  "root": "awsui_root_fvjdu_1toqn_145",
  "button": "awsui_button_fvjdu_1toqn_185",
  "dots": "awsui_dots_fvjdu_1toqn_186",
  "button-disabled": "awsui_button-disabled_fvjdu_1toqn_214",
  "arrow": "awsui_arrow_fvjdu_1toqn_219",
  "page-number": "awsui_page-number_fvjdu_1toqn_229",
  "button-current": "awsui_button-current_fvjdu_1toqn_235",
  "page-item": "awsui_page-item_fvjdu_1toqn_252",
  "root-disabled": "awsui_root-disabled_fvjdu_1toqn_270"
};

// node_modules/@cloudscape-design/components/pagination/internal.js
var defaultAriaLabels = {
  nextPageLabel: "",
  paginationLabel: "",
  previousPageLabel: "",
  pageLabel: (pageNumber) => `${pageNumber}`
};
function PageButton(_a2) {
  var { className: className2, ariaLabel, disabled, pageIndex, isCurrent = false, children: children2, onClick } = _a2, rest = __rest(_a2, ["className", "ariaLabel", "disabled", "pageIndex", "isCurrent", "children", "onClick"]);
  function handleClick(event) {
    event.preventDefault();
    onClick(pageIndex);
  }
  return import_react433.default.createElement(
    "li",
    Object.assign({ className: styles_css_default152["page-item"] }, copyAnalyticsMetadataAttribute(rest)),
    import_react433.default.createElement("button", Object.assign({ className: clsx_m_default(className2, styles_css_default152.button, disabled && styles_css_default152["button-disabled"], isCurrent && styles_css_default152["button-current"]), type: "button", "aria-label": ariaLabel, disabled, onClick: handleClick, "aria-current": isCurrent }, disabled ? {} : getAnalyticsMetadataAttribute({
      action: "click",
      detail: {
        label: { root: "self" }
      }
    })), children2)
  );
}
function PageNumber(_a2) {
  var { pageIndex } = _a2, rest = __rest(_a2, ["pageIndex"]);
  return import_react433.default.createElement(PageButton, Object.assign({ className: styles_css_default152["page-number"], pageIndex }, rest, rest.disabled ? {} : getAnalyticsMetadataAttribute({
    detail: {
      position: `${pageIndex}`
    }
  })), pageIndex);
}
function InternalPagination(_a2) {
  var _b, _c, _d, _e;
  var { openEnd, currentPageIndex, ariaLabels, pagesCount, disabled, onChange, onNextPageClick, onPreviousPageClick, __internalRootRef } = _a2, rest = __rest(_a2, ["openEnd", "currentPageIndex", "ariaLabels", "pagesCount", "disabled", "onChange", "onNextPageClick", "onPreviousPageClick", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const { leftDots, leftIndex, rightIndex, rightDots } = getPaginationState(currentPageIndex, pagesCount, openEnd);
  const i18n = useInternalI18n("pagination");
  const paginationLabel = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.paginationLabel;
  const nextPageLabel = (_b = i18n("ariaLabels.nextPageLabel", ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.nextPageLabel)) !== null && _b !== void 0 ? _b : defaultAriaLabels.nextPageLabel;
  const previousPageLabel = (_c = i18n("ariaLabels.previousPageLabel", ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.previousPageLabel)) !== null && _c !== void 0 ? _c : defaultAriaLabels.previousPageLabel;
  const pageNumberLabelFn = (_d = i18n("ariaLabels.pageLabel", ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.pageLabel, (format3) => (pageNumber) => format3({ pageNumber }))) !== null && _d !== void 0 ? _d : defaultAriaLabels.pageLabel;
  function handlePrevPageClick(requestedPageIndex) {
    handlePageClick(requestedPageIndex);
    fireNonCancelableEvent(onPreviousPageClick, {
      requestedPageAvailable: true,
      requestedPageIndex
    });
  }
  function handleNextPageClick(requestedPageIndex) {
    handlePageClick(requestedPageIndex);
    fireNonCancelableEvent(onNextPageClick, {
      requestedPageAvailable: currentPageIndex < pagesCount,
      requestedPageIndex
    });
  }
  function handlePageClick(requestedPageIndex) {
    fireNonCancelableEvent(onChange, { currentPageIndex: requestedPageIndex });
  }
  const previousButtonDisabled = disabled || currentPageIndex === 1;
  const nextButtonDisabled = disabled || !openEnd && (pagesCount === 0 || currentPageIndex === pagesCount);
  const tableComponentContext = useTableComponentsContext();
  if ((_e = tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.paginationRef) === null || _e === void 0 ? void 0 : _e.current) {
    tableComponentContext.paginationRef.current.currentPageIndex = currentPageIndex;
    tableComponentContext.paginationRef.current.totalPageCount = pagesCount;
    tableComponentContext.paginationRef.current.openEnd = openEnd;
  }
  return import_react433.default.createElement(
    "ul",
    Object.assign({ "aria-label": paginationLabel }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default152.root, disabled && styles_css_default152["root-disabled"]), ref: __internalRootRef }),
    import_react433.default.createElement(
      PageButton,
      Object.assign({ className: styles_css_default152.arrow, pageIndex: currentPageIndex - 1, ariaLabel: previousPageLabel !== null && previousPageLabel !== void 0 ? previousPageLabel : defaultAriaLabels.nextPageLabel, disabled: previousButtonDisabled, onClick: handlePrevPageClick }, previousButtonDisabled ? {} : getAnalyticsMetadataAttribute({
        detail: {
          position: "prev"
        }
      })),
      import_react433.default.createElement(internal_default, { name: "angle-left", variant: disabled ? "disabled" : "normal" })
    ),
    import_react433.default.createElement(PageNumber, { pageIndex: 1, isCurrent: currentPageIndex === 1, disabled, ariaLabel: pageNumberLabelFn(1), onClick: handlePageClick }),
    leftDots && import_react433.default.createElement("li", { className: styles_css_default152.dots }, "..."),
    range2(leftIndex, rightIndex).map((pageIndex) => import_react433.default.createElement(PageNumber, { key: pageIndex, isCurrent: currentPageIndex === pageIndex, pageIndex, disabled, ariaLabel: pageNumberLabelFn(pageIndex), onClick: handlePageClick })),
    rightDots && import_react433.default.createElement("li", { className: styles_css_default152.dots }, "..."),
    !openEnd && pagesCount > 1 && import_react433.default.createElement(PageNumber, { isCurrent: currentPageIndex === pagesCount, pageIndex: pagesCount, disabled, ariaLabel: pageNumberLabelFn(pagesCount), onClick: handlePageClick }),
    import_react433.default.createElement(
      PageButton,
      Object.assign({ className: styles_css_default152.arrow, pageIndex: currentPageIndex + 1, ariaLabel: nextPageLabel !== null && nextPageLabel !== void 0 ? nextPageLabel : defaultAriaLabels.nextPageLabel, disabled: nextButtonDisabled, onClick: handleNextPageClick }, nextButtonDisabled ? {} : getAnalyticsMetadataAttribute({
        detail: {
          position: "next"
        }
      })),
      import_react433.default.createElement(internal_default, { name: "angle-right", variant: disabled ? "disabled" : "normal" })
    )
  );
}

// node_modules/@cloudscape-design/components/pagination/index.js
function Pagination(props2) {
  const baseComponentProps = useBaseComponent("Pagination", { props: { openEnd: props2.openEnd } });
  return import_react434.default.createElement(InternalPagination, Object.assign({}, props2, baseComponentProps, getAnalyticsMetadataAttribute({
    component: {
      name: "awsui.Pagination",
      label: { root: "self" },
      properties: {
        openEnd: `${!!props2.openEnd}`,
        pagesCount: `${props2.pagesCount || ""}`,
        currentPageIndex: `${props2.currentPageIndex}`
      }
    }
  })));
}
applyDisplayName(Pagination, "Pagination");

// node_modules/@cloudscape-design/components/pie-chart/index.js
var import_react439 = __toESM(require_react());

// node_modules/@cloudscape-design/components/pie-chart/pie-chart.js
var import_react438 = __toESM(require_react());

// node_modules/@cloudscape-design/components/pie-chart/labels.js
var import_react436 = __toESM(require_react());

// node_modules/@cloudscape-design/components/pie-chart/responsive-text.js
var import_react435 = __toESM(require_react());
var responsive_text_default2 = (0, import_react435.memo)(ResponsiveText2);
function ResponsiveText2({ x: x3, y: y4, rightSide, className: className2, children: children2, containerBoundaries }) {
  const actualRef = (0, import_react435.useRef)(null);
  const virtualRef = (0, import_react435.useRef)(null);
  const isRtl = actualRef.current ? getIsRtl(actualRef.current) : false;
  rightSide = !isRtl ? rightSide : !rightSide;
  (0, import_react435.useEffect)(() => {
    const timeoutId = setTimeout(() => {
      const isRtl2 = getIsRtl(virtualRef.current);
      const groupRect = virtualRef.current.getBoundingClientRect();
      const visibleWidth = containerBoundaries ? getVisibleWidth(groupRect, containerBoundaries) : 0;
      renderTextContent(actualRef.current, children2, visibleWidth, isRtl2);
    }, 25);
    return () => clearTimeout(timeoutId);
  });
  return import_react435.default.createElement(
    import_react435.default.Fragment,
    null,
    import_react435.default.createElement("text", { ref: virtualRef, x: x3, y: y4, style: { textAnchor: rightSide ? "start" : "end", visibility: "hidden" }, "aria-hidden": "true", className: className2 }, children2),
    import_react435.default.createElement("text", { ref: actualRef, x: x3, y: y4, style: { textAnchor: rightSide ? "start" : "end" }, className: className2 }, children2)
  );
}
function getVisibleWidth(element, container) {
  if (element.left < container.left) {
    return element.right - container.left;
  } else if (element.right > container.right) {
    return container.right - element.left;
  } else {
    return container.right - container.left;
  }
}

// node_modules/@cloudscape-design/components/pie-chart/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/pie-chart/styles.scoped.css";
var styles_css_default153 = {
  "segment__path": "awsui_segment__path_1edmh_e6tkd_161",
  "segment": "awsui_segment_1edmh_e6tkd_161",
  "segment__hover": "awsui_segment__hover_1edmh_e6tkd_188",
  "label": "awsui_label_1edmh_e6tkd_202",
  "root": "awsui_root_1edmh_e6tkd_216",
  "content": "awsui_content_1edmh_e6tkd_220",
  "content--small": "awsui_content--small_1edmh_e6tkd_220",
  "content--fit-height": "awsui_content--fit-height_1edmh_e6tkd_223",
  "content--without-labels": "awsui_content--without-labels_1edmh_e6tkd_226",
  "content--medium": "awsui_content--medium_1edmh_e6tkd_232",
  "content--large": "awsui_content--large_1edmh_e6tkd_244",
  "status-container": "awsui_status-container_1edmh_e6tkd_261",
  "chart-container": "awsui_chart-container_1edmh_e6tkd_265",
  "chart-container--fit-height": "awsui_chart-container--fit-height_1edmh_e6tkd_269",
  "chart-container-chart-plot": "awsui_chart-container-chart-plot_1edmh_e6tkd_274",
  "chart-container-chart-plot--fit-height": "awsui_chart-container-chart-plot--fit-height_1edmh_e6tkd_277",
  "inner-content": "awsui_inner-content_1edmh_e6tkd_283",
  "segment__highlight": "awsui_segment__highlight_1edmh_e6tkd_294",
  "segment--dimmed": "awsui_segment--dimmed_1edmh_e6tkd_309",
  "segment--highlighted": "awsui_segment--highlighted_1edmh_e6tkd_312",
  "label--dimmed": "awsui_label--dimmed_1edmh_e6tkd_329",
  "label--align-right": "awsui_label--align-right_1edmh_e6tkd_332",
  "label-text": "awsui_label-text_1edmh_e6tkd_340",
  "label__description": "awsui_label__description_1edmh_e6tkd_348",
  "label-line": "awsui_label-line_1edmh_e6tkd_355",
  "label--highlighted": "awsui_label--highlighted_1edmh_e6tkd_359",
  "popover-header": "awsui_popover-header_1edmh_e6tkd_363"
};

// node_modules/@cloudscape-design/components/pie-chart/utils.js
var minRadius = 30;
var paddingLabels = 44;
var defaultPadding = 12;
var smallPadding = 8;
var minLabelLineAngularPadding = Math.PI / 20;
var dimensionsBySize = {
  small: {
    innerRadius: 33,
    outerRadius: 50,
    innerLabelPadding: smallPadding,
    padding: smallPadding,
    paddingLabels
  },
  medium: {
    innerRadius: 66,
    outerRadius: 100,
    innerLabelPadding: defaultPadding,
    padding: defaultPadding,
    paddingLabels
  },
  large: {
    innerRadius: 93,
    outerRadius: 140,
    innerLabelPadding: defaultPadding,
    padding: defaultPadding,
    paddingLabels
  }
};
var refreshDimensionsBySize = {
  small: Object.assign(Object.assign({}, dimensionsBySize.small), { innerRadius: 38, cornerRadius: 3 }),
  medium: Object.assign(Object.assign({}, dimensionsBySize.medium), { innerRadius: 75, cornerRadius: 4 }),
  large: Object.assign(Object.assign({}, dimensionsBySize.large), { innerRadius: 105, cornerRadius: 5 })
};
function getDimensionsBySize({ size, hasLabels, visualRefresh }) {
  if (typeof size === "string") {
    const dimensions = visualRefresh ? refreshDimensionsBySize[size] : dimensionsBySize[size];
    return Object.assign(Object.assign({}, dimensions), { size });
  }
  const sizeSpec = visualRefresh ? refreshDimensionsBySize : dimensionsBySize;
  const getPixelSize = (d3) => d3.outerRadius * 2 + d3.padding * 2 + (hasLabels ? d3.paddingLabels : 0) * 2;
  let matchedSize = "small";
  if (size > getPixelSize(sizeSpec.medium)) {
    matchedSize = "medium";
  }
  if (size > getPixelSize(sizeSpec.large)) {
    matchedSize = "large";
  }
  const padding = sizeSpec[matchedSize].padding;
  const paddingLabels2 = hasLabels ? sizeSpec[matchedSize].paddingLabels : 0;
  const radiiRatio = sizeSpec[matchedSize].outerRadius / sizeSpec[matchedSize].innerRadius;
  const outerRadius = Math.max(minRadius, (size - 2 * paddingLabels2 - 2 * padding) / 2);
  const innerRadius = outerRadius / radiiRatio;
  return Object.assign(Object.assign({}, sizeSpec[matchedSize]), { outerRadius, innerRadius, size: matchedSize });
}
var defaultDetails = (i18n, i18nStrings) => (datum, dataSum) => [
  { key: i18n("i18nStrings.detailsValue", i18nStrings.detailsValue) || "", value: datum.value },
  {
    key: i18n("i18nStrings.detailsPercentage", i18nStrings.detailsPercentage) || "",
    value: `${(datum.value * 100 / dataSum).toFixed(0)}%`
  }
];
var balanceLabelNodes = (nodes, markers, leftSide, radius) => {
  var _a2;
  const MARGIN = 10;
  let previousBBox = null;
  let i2 = leftSide ? nodes.length - 1 : 0;
  while (leftSide && i2 >= 0 || !leftSide && i2 < nodes.length) {
    const node = nodes[i2];
    const x3 = parseFloat(node.getAttribute("data-x") || "0");
    const y4 = parseFloat(node.getAttribute("data-y") || "0");
    const box = {
      x: x3,
      y: y4,
      height: node.getBoundingClientRect().height
    };
    const marker = markers[i2];
    if (leftSide) {
      i2--;
    } else {
      i2++;
    }
    if (!previousBBox) {
      previousBBox = box;
      node.setAttribute("transform", "");
      continue;
    }
    if (!leftSide && box.x < 0 || leftSide && box.x >= 0) {
      break;
    }
    node.setAttribute("transform", "");
    const yOffset = previousBBox.y + previousBBox.height + MARGIN - box.y;
    if (yOffset > 0) {
      const xOffset = computeXOffset(box, yOffset, radius) * (leftSide ? -1 : 1);
      node.setAttribute("transform", `translate(${xOffset} ${yOffset})`);
      const lineNode = (_a2 = node.parentNode) === null || _a2 === void 0 ? void 0 : _a2.querySelector(`.${styles_css_default153["label-line"]}`);
      if (lineNode) {
        const { endY, endX } = marker;
        lineNode.setAttribute("y2", "" + (endY + yOffset));
        lineNode.setAttribute("x2", "" + (endX + xOffset));
      }
      box.y += yOffset;
      box.x += xOffset;
    }
    previousBBox = box;
  }
};
var squareDistance = (edge) => Math.pow(edge[0], 2) + Math.pow(edge[1], 2);
var computeXOffset = (box, yOffset, radius) => {
  const upperEdge = [box.x, box.y + yOffset];
  const lowerEdge = [box.x, box.y + box.height + yOffset];
  const closestEdge = squareDistance(upperEdge) < squareDistance(lowerEdge) ? upperEdge : lowerEdge;
  if (squareDistance(closestEdge) < Math.pow(radius, 2)) {
    return Math.sqrt(Math.pow(radius, 2) - Math.pow(closestEdge[1], 2)) - Math.abs(closestEdge[0]);
  }
  return 0;
};
var computeSmartAngle = (startAngle, endAngle, optimize = false) => {
  if (!optimize || endAngle - startAngle < 2 * minLabelLineAngularPadding) {
    return (endAngle + startAngle) / 2;
  }
  const paddedStartAngle = startAngle + minLabelLineAngularPadding;
  const paddedEndAngle = endAngle - minLabelLineAngularPadding;
  if (paddedStartAngle < 0 && paddedEndAngle > 0) {
    return 0;
  }
  if (paddedStartAngle < Math.PI && paddedEndAngle > Math.PI) {
    return Math.PI;
  }
  const endAngleMinDistance = Math.min(paddedEndAngle, Math.abs(Math.PI - paddedEndAngle), 2 * Math.PI - paddedEndAngle);
  const startAngleMinDistance = Math.min(paddedStartAngle, Math.abs(Math.PI - paddedStartAngle), 2 * Math.PI - paddedStartAngle);
  if (endAngleMinDistance < startAngleMinDistance) {
    return paddedEndAngle;
  }
  return paddedStartAngle;
};

// node_modules/@cloudscape-design/components/pie-chart/labels.js
function LabelElement({ x: x3, y: y4, hideTitles, hideDescriptions, rightSide, title, description, containerBoundaries }) {
  return import_react436.default.createElement(
    "g",
    { className: styles_css_default153["label-text"], transform: "", "data-x": x3, "data-y": y4 },
    !hideTitles && import_react436.default.createElement(responsive_text_default2, { x: x3, y: y4, rightSide, containerBoundaries }, title),
    !hideDescriptions && description && import_react436.default.createElement(responsive_text_default2, { x: x3, y: y4 + (hideTitles ? 0 : 18), rightSide, className: styles_css_default153.label__description, containerBoundaries }, description)
  );
}
var labels_default = ({ pieData, dimensions, highlightedSegment, segmentDescription, visibleDataSum, hideTitles, hideDescriptions, containerRef }) => {
  const containerBoundaries = useElementBoundaries(containerRef);
  const shouldOptimizeLabels = containerBoundaries.right - containerBoundaries.left - (dimensions.outerRadius + dimensions.innerLabelPadding) * 2 < 300;
  const markers = (0, import_react436.useMemo)(() => {
    const { outerRadius: radius, innerLabelPadding } = dimensions;
    const arcMarkerStart = arc_default().innerRadius(radius - 1).outerRadius(radius - 1);
    const arcMarkerBreak = arc_default().innerRadius(radius + innerLabelPadding).outerRadius(radius + innerLabelPadding);
    return pieData.map((datum, i2) => {
      const labelDatum = pieData[i2];
      const smartAngle = computeSmartAngle(labelDatum.startAngle, labelDatum.endAngle, shouldOptimizeLabels);
      const lineExtension = 0.5 * Math.cos(2 * smartAngle) + 0.5;
      arcMarkerBreak.outerRadius(radius + 20 * lineExtension);
      arcMarkerBreak.innerRadius(radius + 20 * lineExtension);
      const [startX, startY] = arcMarkerStart.centroid(Object.assign(Object.assign({}, datum), { startAngle: smartAngle, endAngle: smartAngle }));
      const [breakX, breakY] = arcMarkerBreak.centroid(Object.assign(Object.assign({}, datum), { startAngle: smartAngle, endAngle: smartAngle }));
      const rightSide = smartAngle < Math.PI;
      const endX = shouldOptimizeLabels ? breakX + 20 * (rightSide ? 1 : -1) : (radius + 20) * (rightSide ? 1 : -1);
      const textX = endX + 5 * (rightSide ? 1 : -1);
      return {
        startX,
        startY,
        breakX,
        breakY,
        endX,
        endY: breakY,
        textX,
        textY: breakY,
        rightSide,
        datum
      };
    });
  }, [pieData, dimensions, shouldOptimizeLabels]);
  const rootRef = (0, import_react436.useRef)(null);
  (0, import_react436.useLayoutEffect)(() => {
    if (!rootRef.current) {
      return;
    }
    const labelNodes = rootRef.current.querySelectorAll(`.${styles_css_default153["label-text"]}`);
    balanceLabelNodes(labelNodes, markers, false, dimensions.outerRadius + dimensions.innerLabelPadding);
    balanceLabelNodes(labelNodes, markers, true, dimensions.outerRadius + dimensions.innerLabelPadding);
  }, [markers, pieData, dimensions]);
  return import_react436.default.createElement("g", { className: styles_css_default153.markers, "aria-hidden": "true", ref: rootRef }, markers.map(({ startX, startY, breakX, breakY, endX, endY, textX, textY, rightSide, datum }) => {
    const segment = datum.data.datum;
    const description = segmentDescription === null || segmentDescription === void 0 ? void 0 : segmentDescription(segment, visibleDataSum);
    if (hideTitles && !description || hideDescriptions && !segment.title) {
      return null;
    }
    return import_react436.default.createElement(
      "g",
      { key: datum.data.index, className: clsx_m_default(styles_css_default153.label, {
        [styles_css_default153["label--highlighted"]]: highlightedSegment === segment,
        [styles_css_default153["label--dimmed"]]: highlightedSegment !== null && highlightedSegment !== segment,
        [styles_css_default153["label--align-right"]]: !rightSide
      }) },
      import_react436.default.createElement("line", { x1: startX, y1: startY, x2: breakX, y2: breakY }),
      import_react436.default.createElement("line", { x1: breakX, y1: breakY, x2: endX, y2: endY, className: styles_css_default153["label-line"] }),
      import_react436.default.createElement(LabelElement, { x: textX, y: textY, rightSide, title: segment.title, description, hideTitles, hideDescriptions, containerBoundaries })
    );
  }));
};
function useElementBoundaries(ref) {
  const [state, setState] = (0, import_react436.useState)({ left: 0, right: 0 });
  useResizeObserver(ref, (entry) => {
    const elementRect = entry.target.getBoundingClientRect();
    setState({ left: elementRect.left, right: elementRect.right });
  });
  return state;
}

// node_modules/@cloudscape-design/components/pie-chart/segments.js
var import_react437 = __toESM(require_react());
function Segments({ pieData, highlightedSegment, dimensions, variant, focusedSegmentRef, popoverTrackRef, segmentAriaRoleDescription, onMouseDown, onMouseOver, onTouchStart }) {
  const i18n = useInternalI18n("pie-chart");
  const { arcFactory, highlightedArcFactory } = (0, import_react437.useMemo)(() => {
    const radius = dimensions.outerRadius;
    const innerRadius = variant === "pie" ? 0 : dimensions.innerRadius;
    const cornerRadius = dimensions.cornerRadius || 0;
    const arcFactory2 = arc_default().innerRadius(innerRadius).outerRadius(radius).cornerRadius(cornerRadius);
    const highlightedArcFactory2 = arc_default().innerRadius(radius + 4).outerRadius(radius + 6);
    return {
      arcFactory: arcFactory2,
      highlightedArcFactory: highlightedArcFactory2
    };
  }, [dimensions, variant]);
  const centroid = (0, import_react437.useMemo)(() => {
    for (const datum of pieData) {
      if (datum.data.datum === highlightedSegment) {
        const [centroidLeft, centroidTop] = arcFactory.centroid(datum);
        return { cx: centroidLeft, cy: centroidTop };
      }
    }
    return null;
  }, [highlightedSegment, pieData, arcFactory]);
  return import_react437.default.createElement(
    "g",
    null,
    pieData.map((datum) => {
      const isHighlighted = highlightedSegment === datum.data.datum;
      const isDimmed = highlightedSegment !== null && !isHighlighted;
      const arcPath = arcFactory(datum) || void 0;
      const highlightedPath = highlightedArcFactory(datum) || void 0;
      return import_react437.default.createElement(
        "g",
        { key: datum.data.index, onTouchStart: () => onTouchStart(), onMouseDown: (e3) => {
          onMouseDown(datum.data);
          e3.preventDefault();
        }, onMouseOver: () => onMouseOver(datum.data), className: clsx_m_default(styles_css_default153.segment, {
          [styles_css_default153["segment--highlighted"]]: isHighlighted,
          [styles_css_default153["segment--dimmed"]]: isDimmed
        }), ref: isHighlighted ? focusedSegmentRef : void 0, "aria-label": `${datum.data.datum.title} (${datum.data.datum.value})`, role: "button", "aria-roledescription": i18n("i18nStrings.segmentAriaRoleDescription", segmentAriaRoleDescription) },
        import_react437.default.createElement("path", { d: arcPath, fill: datum.data.color, className: styles_css_default153.segment__path, "aria-hidden": "true" }),
        import_react437.default.createElement("path", { d: highlightedPath, fill: datum.data.color, className: clsx_m_default(styles_css_default153.segment__path, styles_css_default153.segment__highlight), "aria-hidden": "true" })
      );
    }),
    import_react437.default.createElement("circle", Object.assign({}, centroid, { ref: popoverTrackRef, r: "1", opacity: "0", "aria-hidden": "true" }))
  );
}

// node_modules/@cloudscape-design/components/pie-chart/pie-chart.js
var pie_chart_default = ({ fitHeight, height: explicitHeight, variant, size, width, i18nStrings, ariaLabel, ariaLabelledby, ariaDescription, innerMetricValue, innerMetricDescription, hideTitles, hideDescriptions, detailPopoverContent, detailPopoverSize, detailPopoverFooter, segmentDescription, highlightedSegment, onHighlightChange, legendSegment, pieData, dataSum }) => {
  var _a2, _b;
  const [pinnedSegment, setPinnedSegment] = (0, import_react438.useState)(null);
  const plotRef = (0, import_react438.useRef)(null);
  const containerRef = (0, import_react438.useRef)(null);
  const focusedSegmentRef = (0, import_react438.useRef)(null);
  const popoverTrackRef = (0, import_react438.useRef)(null);
  const popoverRef = (0, import_react438.useRef)(null);
  const hasLabels = !(hideTitles && hideDescriptions);
  const isRefresh = useVisualRefresh();
  const height = (_a2 = useHeightMeasure(() => {
    var _a3, _b2;
    return (_b2 = (_a3 = plotRef.current) === null || _a3 === void 0 ? void 0 : _a3.svg) !== null && _b2 !== void 0 ? _b2 : null;
  }, !fitHeight)) !== null && _a2 !== void 0 ? _a2 : explicitHeight;
  const dimensions = (0, import_react438.useMemo)(() => getDimensionsBySize({ size: fitHeight ? Math.min(height, width) : size, hasLabels, visualRefresh: isRefresh }), [fitHeight, height, width, size, hasLabels, isRefresh]);
  const hasInnerContent = variant === "donut" && (innerMetricValue || innerMetricDescription && dimensions.size !== "small");
  const innerMetricId = useUniqueId("awsui-pie-chart__inner");
  const [isPopoverOpen, setPopoverOpen] = (0, import_react438.useState)(false);
  const [popoverData, setPopoverData] = (0, import_react438.useState)();
  const highlightedSegmentIndex = (0, import_react438.useMemo)(() => {
    for (let index = 0; index < pieData.length; index++) {
      if (pieData[index].data.datum === highlightedSegment) {
        return index;
      }
    }
    return null;
  }, [pieData, highlightedSegment]);
  const detailPopoverFooterContent = (0, import_react438.useMemo)(() => detailPopoverFooter && highlightedSegment ? detailPopoverFooter(highlightedSegment) : null, [detailPopoverFooter, highlightedSegment]);
  const i18n = useInternalI18n("pie-chart");
  const detailFunction = detailPopoverContent || defaultDetails(i18n, i18nStrings);
  const details = popoverData ? detailFunction(popoverData.datum, dataSum) : [];
  const popoverContentRef = (0, import_react438.useRef)(null);
  const popoverContent = popoverData && import_react438.default.createElement(chart_series_details_default, { details, compactList: true, ref: popoverContentRef });
  const popoverDismissedRecently = (0, import_react438.useRef)(false);
  const escapePressed = (0, import_react438.useRef)(false);
  const duringTouch = (0, import_react438.useRef)(false);
  const highlightSegment = (0, import_react438.useCallback)((internalDatum) => {
    const segment = internalDatum.datum;
    if (segment !== highlightedSegment) {
      onHighlightChange(segment);
    }
    if (popoverTrackRef.current) {
      setPopoverData({
        datum: internalDatum.datum,
        series: {
          color: internalDatum.color,
          index: internalDatum.index,
          label: internalDatum.datum.title,
          markerType: "rectangle"
        },
        trackRef: popoverTrackRef
      });
      setPopoverOpen(true);
    }
  }, [highlightedSegment, setPopoverOpen, onHighlightChange]);
  const clearHighlightedSegment = (0, import_react438.useCallback)(() => {
    setPopoverOpen(false);
    onHighlightChange(null);
  }, [onHighlightChange, setPopoverOpen]);
  const checkMouseLeave = (event) => {
    if (pinnedSegment !== null) {
      return;
    }
    if (nodeContains(popoverRef.current, event.relatedTarget) || nodeContains(focusedSegmentRef.current, event.relatedTarget)) {
      return;
    }
    clearHighlightedSegment();
  };
  (0, import_react438.useEffect)(() => {
    const onKeyDown2 = (event) => {
      if (event.key === "Escape") {
        clearHighlightedSegment();
        escapePressed.current = true;
      }
    };
    document.addEventListener("keydown", onKeyDown2);
    return () => document.removeEventListener("keydown", onKeyDown2);
  }, [clearHighlightedSegment]);
  const onMouseDown = (0, import_react438.useCallback)((internalDatum) => {
    if (pinnedSegment === internalDatum.datum) {
      setPinnedSegment(null);
      clearHighlightedSegment();
    } else {
      setPinnedSegment(internalDatum.datum);
      highlightSegment(internalDatum);
    }
  }, [pinnedSegment, clearHighlightedSegment, setPinnedSegment, highlightSegment]);
  const onMouseOver = (0, import_react438.useCallback)((internalDatum) => {
    if (escapePressed.current) {
      escapePressed.current = false;
      return;
    }
    if (duringTouch.current) {
      duringTouch.current = false;
      return;
    }
    if (pinnedSegment !== null) {
      return;
    }
    highlightSegment(internalDatum);
  }, [pinnedSegment, highlightSegment]);
  const onTouchStart = (0, import_react438.useCallback)(() => {
    duringTouch.current = true;
  }, []);
  const onKeyDown = (0, import_react438.useCallback)((event) => {
    const keyCode = event.keyCode;
    if (keyCode !== KeyCode2.right && keyCode !== KeyCode2.left && keyCode !== KeyCode2.enter && keyCode !== KeyCode2.space) {
      return;
    }
    event.preventDefault();
    let nextIndex = highlightedSegmentIndex || 0;
    const MAX = pieData.length - 1;
    if (keyCode === KeyCode2.right) {
      nextIndex++;
      if (nextIndex > MAX) {
        nextIndex = 0;
      }
    } else if (keyCode === KeyCode2.left) {
      nextIndex--;
      if (nextIndex < 0) {
        nextIndex = MAX;
      }
    }
    if (keyCode === KeyCode2.enter || keyCode === KeyCode2.space) {
      setPinnedSegment(pieData[nextIndex].data.datum);
    }
    highlightSegment(pieData[nextIndex].data);
  }, [setPinnedSegment, highlightSegment, pieData, highlightedSegmentIndex]);
  const onApplicationFocus = (0, import_react438.useCallback)((_event, target) => {
    if (pinnedSegment !== null || popoverDismissedRecently.current || target === "mouse") {
      return;
    }
    const segment = highlightedSegment || legendSegment || pieData[0].data.datum;
    const matched = pieData.filter((d3) => d3.data.datum === segment);
    highlightSegment(matched[0].data);
  }, [pinnedSegment, pieData, highlightSegment, highlightedSegment, legendSegment]);
  const onApplicationBlur = (0, import_react438.useCallback)((event) => {
    const blurTarget = event.relatedTarget || event.target;
    if (blurTarget === null || !(blurTarget instanceof Element) || !nodeBelongs2(containerRef.current, blurTarget)) {
      setPopoverOpen(false);
      setPinnedSegment(null);
    }
  }, [setPinnedSegment]);
  const onPopoverDismiss = (outsideClick) => {
    setPopoverOpen(false);
    setPinnedSegment(null);
    if (!outsideClick) {
      setTimeout(() => {
        popoverDismissedRecently.current = true;
        plotRef.current.focusApplication();
        popoverDismissedRecently.current = false;
      }, 0);
    } else {
      onHighlightChange(null);
    }
  };
  return import_react438.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default153["chart-container"], fitHeight && styles_css_default153["chart-container--fit-height"]), ref: containerRef },
    import_react438.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default153["chart-container-chart-plot"], fitHeight && styles_css_default153["chart-container-chart-plot--fit-height"]) },
      import_react438.default.createElement(
        chart_plot_default,
        { ref: plotRef, width: "100%", height: fitHeight ? "100%" : height, transform: `translate(${width / 2} ${height / 2})`, isPrecise: true, isClickable: !isPopoverOpen, ariaLabel, ariaLabelledby, ariaDescription, ariaDescribedby: hasInnerContent ? innerMetricId : void 0, ariaRoleDescription: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.chartAriaRoleDescription, activeElementRef: focusedSegmentRef, activeElementKey: highlightedSegmentIndex === null || highlightedSegmentIndex === void 0 ? void 0 : highlightedSegmentIndex.toString(), onApplicationFocus, onApplicationBlur, onKeyDown, onMouseOut: checkMouseLeave },
        import_react438.default.createElement(Segments, { pieData, dimensions, variant, focusedSegmentRef, popoverTrackRef, highlightedSegment, segmentAriaRoleDescription: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.segmentAriaRoleDescription, onMouseDown, onMouseOver, onTouchStart }),
        hasLabels && import_react438.default.createElement(labels_default, { pieData, dimensions, segmentDescription, visibleDataSum: dataSum, hideTitles, hideDescriptions, highlightedSegment, containerRef })
      )
    ),
    hasInnerContent && import_react438.default.createElement(
      "div",
      { className: styles_css_default153["inner-content"], id: innerMetricId },
      innerMetricValue && import_react438.default.createElement(InternalBox, { variant: dimensions.size === "small" ? "h3" : "h1", tagOverride: "div", color: "inherit", padding: "n" }, innerMetricValue),
      innerMetricDescription && dimensions.size !== "small" && import_react438.default.createElement(InternalBox, { variant: "h3", color: "text-body-secondary", tagOverride: "div", padding: "n" }, innerMetricDescription)
    ),
    isPopoverOpen && popoverData && import_react438.default.createElement(chart_popover_default, { ref: popoverRef, title: popoverData.series && import_react438.default.createElement(
      InternalBox,
      { className: styles_css_default153["popover-header"], variant: "strong" },
      import_react438.default.createElement(chart_series_marker_default, { color: popoverData.series.color, type: popoverData.series.markerType }),
      " ",
      popoverData.series.label
    ), trackRef: popoverData.trackRef, trackKey: popoverData.series.index, dismissButton: pinnedSegment !== null, dismissAriaLabel: i18nStrings.detailPopoverDismissAriaLabel, onDismiss: onPopoverDismiss, container: ((_b = plotRef.current) === null || _b === void 0 ? void 0 : _b.svg) || null, size: detailPopoverSize, onMouseLeave: checkMouseLeave, onBlur: onApplicationBlur, footer: detailPopoverFooterContent }, popoverContent),
    import_react438.default.createElement(internal_default2, { sources: [popoverContentRef] })
  );
};

// node_modules/@cloudscape-design/components/pie-chart/index.js
var PieChart = function PieChart2(_a2) {
  var { fitHeight, variant = "pie", size = "medium", hideTitles = false, hideDescriptions = false, hideLegend = false, hideFilter = false, statusType = "finished", data: externalData = [], i18nStrings = {}, highlightedSegment: controlledHighlightedSegment, visibleSegments: controlledVisibleSegments, onHighlightChange: controlledOnHighlightChange, onFilterChange, additionalFilters, legendTitle, detailPopoverSize = "medium" } = _a2, props2 = __rest(_a2, ["fitHeight", "variant", "size", "hideTitles", "hideDescriptions", "hideLegend", "hideFilter", "statusType", "data", "i18nStrings", "highlightedSegment", "visibleSegments", "onHighlightChange", "onFilterChange", "additionalFilters", "legendTitle", "detailPopoverSize"]);
  const { __internalRootRef = null } = useBaseComponent("PieChart", {
    props: {
      fitHeight,
      variant,
      size,
      hideTitles,
      hideDescriptions,
      hideLegend,
      hideFilter,
      detailPopoverSize
    }
  });
  const baseProps = getBaseProps(props2);
  const containerRef = (0, import_react439.useRef)(null);
  const [containerWidth, measureRef] = useContainerWidth();
  const data = (0, import_react439.useMemo)(() => {
    const colors = createCategoryColorScale(externalData, void 0, (it) => it.color || null);
    return externalData.map((datum, i2) => ({
      index: i2,
      color: colors[i2],
      datum
    }));
  }, [externalData]);
  const [highlightedSegment = null, setHighlightedSegment] = useControllable2(controlledHighlightedSegment, controlledOnHighlightChange, null, {
    componentName: "PieChart",
    controlledProp: "highlightedSegment",
    changeHandler: "onHighlightChange"
  });
  const [legendSegment, setLegendSegment] = (0, import_react439.useState)(highlightedSegment);
  (0, import_react439.useEffect)(() => {
    setLegendSegment(controlledHighlightedSegment || null);
  }, [controlledHighlightedSegment]);
  const [visibleSegments, setVisibleSegments] = useControllable2(controlledVisibleSegments, onFilterChange, externalData, {
    componentName: "PieChart",
    controlledProp: "visibleSegments",
    changeHandler: "onFilterChange"
  });
  const visibleData = (0, import_react439.useMemo)(() => data.filter((d3) => (visibleSegments === null || visibleSegments === void 0 ? void 0 : visibleSegments.indexOf(d3.datum)) !== -1), [data, visibleSegments]);
  const filterItems = data === null || data === void 0 ? void 0 : data.map((data2) => ({
    label: data2.datum.title,
    marker: import_react439.default.createElement(chart_series_marker_default, { color: data2.color, type: "rectangle" }),
    datum: data2.datum
  }));
  const legendItems = filterItems.filter((d3) => (visibleSegments === null || visibleSegments === void 0 ? void 0 : visibleSegments.indexOf(d3.datum)) !== -1);
  const filterChange = (0, import_react439.useCallback)((selectedSeries) => {
    setVisibleSegments(selectedSeries);
    fireNonCancelableEvent(onFilterChange, {
      visibleSegments: selectedSeries
    });
  }, [setVisibleSegments, onFilterChange]);
  const onHighlightChange = (0, import_react439.useCallback)((segment) => {
    setLegendSegment(segment);
    setHighlightedSegment(segment);
    fireNonCancelableEvent(controlledOnHighlightChange, { highlightedSegment: segment });
  }, [controlledOnHighlightChange, setHighlightedSegment]);
  const onBlur = (event) => {
    if (event.relatedTarget && !nodeBelongs2(containerRef.current, event.relatedTarget)) {
      if (highlightedSegment) {
        onHighlightChange(null);
      }
      setLegendSegment(null);
    }
  };
  const mergedRef = useMergeRefs(containerRef, measureRef, __internalRootRef);
  const { pieData, dataSum } = (0, import_react439.useMemo)(() => {
    const dataSum2 = visibleData.reduce((sum2, d3) => sum2 + d3.datum.value, 0);
    const pieFactory = pie_default().value((d3) => d3.datum.value < dataSum2 / 100 ? dataSum2 / 100 : d3.datum.value).sort(null);
    const pieData2 = pieFactory(visibleData.filter((d3) => d3.datum.value > 0));
    return { pieData: pieData2, dataSum: dataSum2 };
  }, [visibleData]);
  const hasNoData = !externalData || externalData.length === 0;
  const { isEmpty, showChart } = getChartStatus({ externalData: data, visibleData: pieData, statusType });
  const isNoMatch = isEmpty && visibleData.length !== data.length;
  const showFilters = statusType === "finished" && !hasNoData && (additionalFilters || !hideFilter);
  const reserveLegendSpace = !showChart && !hideLegend;
  const reserveFilterSpace = statusType !== "finished" && !isNoMatch && (!hideFilter || additionalFilters);
  const hasLabels = !(hideTitles && hideDescriptions);
  const isRefresh = useVisualRefresh();
  const defaultDimensions = getDimensionsBySize({ size, hasLabels, visualRefresh: isRefresh });
  const radius = defaultDimensions.outerRadius;
  const height = 2 * (radius + defaultDimensions.padding + (hasLabels ? defaultDimensions.paddingLabels : 0));
  return import_react439.default.createElement(ChartWrapper, Object.assign({ ref: mergedRef, fitHeight: !!fitHeight }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default153.root), contentClassName: clsx_m_default(styles_css_default153.content, styles_css_default153[`content--${defaultDimensions.size}`], {
    [styles_css_default153["content--without-labels"]]: !hasLabels,
    [styles_css_default153["content--fit-height"]]: fitHeight
  }), defaultFilter: showFilters && !hideFilter ? import_react439.default.createElement(chart_filter_default, { series: filterItems, onChange: filterChange, selectedSeries: visibleSegments, i18nStrings }) : null, additionalFilters: showFilters ? additionalFilters : null, reserveFilterSpace: !!reserveFilterSpace, reserveLegendSpace: !!reserveLegendSpace, chartStatus: import_react439.default.createElement(ChartStatusContainer, { isEmpty, isNoMatch, showChart, statusType, empty: props2.empty, noMatch: props2.noMatch, loadingText: props2.loadingText, errorText: props2.errorText, recoveryText: props2.recoveryText, onRecoveryClick: props2.onRecoveryClick }), chart: showChart ? import_react439.default.createElement(pie_chart_default, Object.assign({}, props2, { variant, size, height, fitHeight, data: externalData, width: containerWidth, hideTitles, hideDescriptions, i18nStrings, onHighlightChange, highlightedSegment, legendSegment, detailPopoverSize, pieData, dataSum })) : null, legend: !hideLegend && !hasNoData && statusType === "finished" && import_react439.default.createElement(chart_legend_default, { series: legendItems, highlightedSeries: legendSegment, legendTitle, ariaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.legendAriaLabel, onHighlightChange, plotContainerRef: containerRef }), onBlur }));
};
applyDisplayName(PieChart, "PieChart");
var pie_chart_default2 = PieChart;

// node_modules/@cloudscape-design/components/popover/index.js
var import_react440 = __toESM(require_react());
var Popover = import_react440.default.forwardRef((_a2, ref) => {
  var { position = "right", size = "medium", fixedWidth = false, triggerType = "text", dismissButton: dismissButton3 = true, renderWithPortal = false, wrapTriggerText = true, header } = _a2, rest = __rest(_a2, ["position", "size", "fixedWidth", "triggerType", "dismissButton", "renderWithPortal", "wrapTriggerText", "header"]);
  if (isDevelopment2) {
    if (dismissButton3 && !header) {
      warnOnce("Popover", `You should provide a \`header\` when \`dismissButton\` is true.`);
    }
  }
  const baseComponentProps = useBaseComponent("Popover", {
    props: { dismissButton: dismissButton3, fixedWidth, position, renderWithPortal, size, triggerType }
  });
  const externalProps = getExternalProps(rest);
  return import_react440.default.createElement(internal_default21, Object.assign({ ref, header, position, size, fixedWidth, triggerType, dismissButton: dismissButton3, renderWithPortal, wrapTriggerText }, externalProps, baseComponentProps));
});
applyDisplayName(Popover, "Popover");
var popover_default = Popover;

// node_modules/@cloudscape-design/components/progress-bar/index.js
var import_react442 = __toESM(require_react());

// node_modules/@cloudscape-design/components/progress-bar/internal.js
var import_react441 = __toESM(require_react());

// node_modules/@cloudscape-design/components/progress-bar/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/progress-bar/styles.scoped.css";
var styles_css_default154 = {
  "progress": "awsui_progress_11huc_19vty_189",
  "result-state": "awsui_result-state_11huc_19vty_203",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_11huc_19vty_1",
  "root": "awsui_root_11huc_19vty_225",
  "with-result-button": "awsui_with-result-button_11huc_19vty_257",
  "result-text": "awsui_result-text_11huc_19vty_261",
  "result-container-error": "awsui_result-container-error_11huc_19vty_265",
  "result-container-success": "awsui_result-container-success_11huc_19vty_265",
  "result-button": "awsui_result-button_11huc_19vty_269",
  "word-wrap": "awsui_word-wrap_11huc_19vty_275",
  "label-flash": "awsui_label-flash_11huc_19vty_280",
  "label-key-value": "awsui_label-key-value_11huc_19vty_284",
  "flash": "awsui_flash_11huc_19vty_292",
  "progress-container": "awsui_progress-container_11huc_19vty_296",
  "percentage-container": "awsui_percentage-container_11huc_19vty_303",
  "percentage": "awsui_percentage_11huc_19vty_303",
  "complete": "awsui_complete_11huc_19vty_349",
  "progress-in-flash": "awsui_progress-in-flash_11huc_19vty_362",
  "additional-info": "awsui_additional-info_11huc_19vty_375"
};

// node_modules/@cloudscape-design/components/progress-bar/internal.js
var MAX_VALUE = 100;
var clamp2 = (value, lowerLimit, upperLimit) => {
  return Math.max(Math.min(value, upperLimit), lowerLimit);
};
var Progress = ({ value, isInFlash, ariaLabel, ariaLabelledby, ariaDescribedby }) => {
  const roundedValue = Math.round(value);
  const progressValue = clamp2(roundedValue, 0, MAX_VALUE);
  return import_react441.default.createElement(
    "div",
    { className: styles_css_default154["progress-container"] },
    import_react441.default.createElement("progress", { className: clsx_m_default(styles_css_default154.progress, progressValue >= MAX_VALUE && styles_css_default154.complete, isInFlash && styles_css_default154["progress-in-flash"]), max: MAX_VALUE, value: progressValue, "aria-label": ariaLabel, "aria-labelledby": !ariaLabel ? ariaLabelledby : void 0, "aria-describedby": ariaDescribedby }),
    import_react441.default.createElement(
      "span",
      { "aria-hidden": "true", className: styles_css_default154["percentage-container"] },
      import_react441.default.createElement(InternalBox, { className: styles_css_default154.percentage, variant: "small", color: isInFlash ? "inherit" : void 0 }, `${progressValue}%`)
    )
  );
};
var SmallText = ({ color: color2, children: children2, className: className2, id }) => {
  return import_react441.default.createElement(InternalBox, { className: clsx_m_default(styles_css_default154["word-wrap"], className2), variant: "small", display: "block", color: color2, id }, children2);
};
var ResultButton = ({ onClick, children: children2 }) => {
  return import_react441.default.createElement(
    "div",
    { className: styles_css_default154["result-button"] },
    import_react441.default.createElement(InternalButton, { formAction: "none", onClick }, children2)
  );
};
var ResultState = ({ isInFlash, resultText, resultButtonText, status, onClick }) => {
  const hasResultButton = !!resultButtonText;
  if (isInFlash) {
    return import_react441.default.createElement(
      "div",
      { className: styles_css_default154[`result-container-${status}`] },
      import_react441.default.createElement("span", { className: styles_css_default154["result-text"] }, resultText)
    );
  }
  return import_react441.default.createElement(
    "div",
    { className: styles_css_default154[`result-container-${status}`] },
    import_react441.default.createElement(
      "span",
      { className: clsx_m_default(hasResultButton && styles_css_default154["with-result-button"]) },
      import_react441.default.createElement(
        StatusIndicator,
        { type: status === "success" ? "success" : "error" },
        import_react441.default.createElement("span", { className: styles_css_default154["result-text"] }, resultText)
      )
    ),
    hasResultButton && import_react441.default.createElement(ResultButton, { onClick }, resultButtonText)
  );
};

// node_modules/@cloudscape-design/components/progress-bar/index.js
var ASSERTION_FREQUENCY = 5e3;
function ProgressBar(_a2) {
  var { value = 0, status = "in-progress", variant = "standalone", resultButtonText, label, ariaLabel, ariaLabelledby, ariaDescribedby, description, additionalInfo, resultText, onResultButtonClick } = _a2, rest = __rest(_a2, ["value", "status", "variant", "resultButtonText", "label", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "description", "additionalInfo", "resultText", "onResultButtonClick"]);
  const { __internalRootRef } = useBaseComponent("ProgressBar", {
    props: { variant }
  });
  const baseProps = getBaseProps(rest);
  const generatedName = useUniqueId("awsui-progress-bar-");
  const labelId = `${generatedName}-label`;
  const isInFlash = variant === "flash";
  const isInProgressState = status === "in-progress";
  const descriptionId = useUniqueId("progressbar-description-");
  const additionalInfoId = useUniqueId("progressbar-additional-info-");
  const [announcedValue, setAnnouncedValue] = (0, import_react442.useState)("");
  const throttledAssertion = (0, import_react442.useMemo)(() => {
    return throttle((value2) => {
      setAnnouncedValue(`${value2}%`);
    }, ASSERTION_FREQUENCY);
  }, []);
  (0, import_react442.useEffect)(() => {
    throttledAssertion(value);
  }, [throttledAssertion, value]);
  if (isInFlash && resultButtonText) {
    warnOnce("ProgressBar", 'The `resultButtonText` is ignored if you set `variant="flash"`, and the result button is not displayed. Use the `buttonText` property and the `onButtonClick` event listener of the flashbar item in which the progress bar component is embedded.');
  }
  return import_react442.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default154.root, variant && styles_css_default154[variant]), ref: __internalRootRef }),
    import_react442.default.createElement(
      "div",
      { className: isInFlash ? styles_css_default154["flash-container"] : void 0 },
      import_react442.default.createElement("div", { className: clsx_m_default(styles_css_default154["word-wrap"], styles_css_default154[`label-${variant}`]), id: labelId }, label),
      description && import_react442.default.createElement(SmallText, { color: isInFlash ? "inherit" : void 0, id: descriptionId }, description),
      import_react442.default.createElement("div", null, isInProgressState ? import_react442.default.createElement(
        import_react442.default.Fragment,
        null,
        import_react442.default.createElement(Progress, { value, ariaLabel, ariaLabelledby: joinStrings(labelId, ariaLabelledby), ariaDescribedby: joinStrings(description ? descriptionId : void 0, additionalInfo ? additionalInfoId : void 0, ariaDescribedby), isInFlash }),
        import_react442.default.createElement(
          internal_default2,
          { hidden: true, tagName: "span", delay: 0 },
          label,
          label ? ": " : null,
          announcedValue
        )
      ) : import_react442.default.createElement(
        internal_default2,
        { hidden: false, tagName: "span", delay: 0 },
        import_react442.default.createElement(ResultState, { resultText, isInFlash, resultButtonText, status, onClick: () => {
          fireNonCancelableEvent(onResultButtonClick);
        } })
      ))
    ),
    additionalInfo && import_react442.default.createElement(SmallText, { className: styles_css_default154["additional-info"], color: isInFlash ? "inherit" : void 0, id: additionalInfoId }, additionalInfo)
  );
}
applyDisplayName(ProgressBar, "ProgressBar");

// node_modules/@cloudscape-design/components/prompt-input/index.js
var import_react445 = __toESM(require_react());

// node_modules/@cloudscape-design/components/prompt-input/internal-do-not-use-core.js
var import_react444 = __toESM(require_react());

// node_modules/@cloudscape-design/components/prompt-input/internal.js
var import_react443 = __toESM(require_react());

// node_modules/@cloudscape-design/components/prompt-input/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/prompt-input/styles.scoped.css";
var styles_css_default155 = {
  "root": "awsui_root_55fkh_4xns4_146",
  "textarea-readonly": "awsui_textarea-readonly_55fkh_4xns4_185",
  "disabled": "awsui_disabled_55fkh_4xns4_190",
  "textarea-invalid": "awsui_textarea-invalid_55fkh_4xns4_198",
  "textarea-warning": "awsui_textarea-warning_55fkh_4xns4_223",
  "textarea": "awsui_textarea_55fkh_4xns4_185",
  "invalid": "awsui_invalid_55fkh_4xns4_319",
  "warning": "awsui_warning_55fkh_4xns4_319",
  "textarea-wrapper": "awsui_textarea-wrapper_55fkh_4xns4_335",
  "primary-action": "awsui_primary-action_55fkh_4xns4_339",
  "action-button": "awsui_action-button_55fkh_4xns4_347",
  "secondary-content": "awsui_secondary-content_55fkh_4xns4_352",
  "with-paddings": "awsui_with-paddings_55fkh_4xns4_387",
  "action-stripe": "awsui_action-stripe_55fkh_4xns4_397",
  "secondary-actions": "awsui_secondary-actions_55fkh_4xns4_436",
  "with-paddings-and-actions": "awsui_with-paddings-and-actions_55fkh_4xns4_453",
  "buffer": "awsui_buffer_55fkh_4xns4_457"
};

// node_modules/@cloudscape-design/components/prompt-input/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/prompt-input/test-classes/styles.scoped.css";
var styles_css_default156 = {
  "root": "awsui_root_nr3gs_151v0_5",
  "textarea": "awsui_textarea_nr3gs_151v0_9",
  "action-button": "awsui_action-button_nr3gs_151v0_13",
  "primary-action": "awsui_primary-action_nr3gs_151v0_17",
  "secondary-actions": "awsui_secondary-actions_nr3gs_151v0_21",
  "secondary-content": "awsui_secondary-content_nr3gs_151v0_25"
};

// node_modules/@cloudscape-design/components/prompt-input/internal.js
var InternalPromptInput = import_react443.default.forwardRef((_a2, ref) => {
  var { value, actionButtonAriaLabel, actionButtonIconName, actionButtonIconUrl, actionButtonIconSvg, actionButtonIconAlt, ariaLabel, autoComplete, autoFocus, disableActionButton, disableBrowserAutocorrect, disabled, maxRows, minRows, name, onAction, onBlur, onChange, onFocus, onKeyDown, onKeyUp, placeholder, readOnly, spellcheck, customPrimaryAction, secondaryActions, secondaryContent, disableSecondaryActionsPaddings, disableSecondaryContentPaddings, nativeTextareaAttributes, __internalRootRef } = _a2, rest = __rest(_a2, ["value", "actionButtonAriaLabel", "actionButtonIconName", "actionButtonIconUrl", "actionButtonIconSvg", "actionButtonIconAlt", "ariaLabel", "autoComplete", "autoFocus", "disableActionButton", "disableBrowserAutocorrect", "disabled", "maxRows", "minRows", "name", "onAction", "onBlur", "onChange", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "spellcheck", "customPrimaryAction", "secondaryActions", "secondaryContent", "disableSecondaryActionsPaddings", "disableSecondaryContentPaddings", "nativeTextareaAttributes", "__internalRootRef"]);
  const { ariaLabelledby, ariaDescribedby, controlId, invalid, warning } = useFormFieldContext(rest);
  const baseProps = getBaseProps(rest);
  const textareaRef = (0, import_react443.useRef)(null);
  const isRefresh = useVisualRefresh();
  const isCompactMode = useDensityMode(textareaRef) === "compact";
  const PADDING = isRefresh ? spaceXxs : spaceXxxs;
  const LINE_HEIGHT = lineHeightBodyM;
  const DEFAULT_MAX_ROWS = 3;
  (0, import_react443.useImperativeHandle)(ref, () => ({
    focus(...args) {
      var _a3;
      (_a3 = textareaRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus(...args);
    },
    select() {
      var _a3;
      (_a3 = textareaRef.current) === null || _a3 === void 0 ? void 0 : _a3.select();
    },
    setSelectionRange(...args) {
      var _a3;
      (_a3 = textareaRef.current) === null || _a3 === void 0 ? void 0 : _a3.setSelectionRange(...args);
    }
  }), [textareaRef]);
  const handleKeyDown = (event) => {
    fireKeyboardEvent(onKeyDown, event);
    if (event.key === "Enter" && !event.shiftKey && !event.nativeEvent.isComposing) {
      if (event.currentTarget.form && !event.isDefaultPrevented()) {
        event.currentTarget.form.requestSubmit();
      }
      event.preventDefault();
      fireNonCancelableEvent(onAction, { value });
    }
  };
  const handleChange = (event) => {
    fireNonCancelableEvent(onChange, { value: event.target.value });
    adjustTextareaHeight();
  };
  const hasActionButton = actionButtonIconName || actionButtonIconSvg || actionButtonIconUrl || customPrimaryAction;
  const adjustTextareaHeight = (0, import_react443.useCallback)(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      const minTextareaHeight = `calc(${LINE_HEIGHT} +  ${spaceScaledXxs} * 2)`;
      if (maxRows === -1) {
        const scrollHeight = `calc(${textareaRef.current.scrollHeight}px)`;
        textareaRef.current.style.height = `max(${scrollHeight}, ${minTextareaHeight})`;
      } else {
        const maxRowsHeight = `calc(${maxRows <= 0 ? DEFAULT_MAX_ROWS : maxRows} * (${LINE_HEIGHT} + ${PADDING} / 2) + ${PADDING})`;
        const scrollHeight = `calc(${textareaRef.current.scrollHeight}px)`;
        textareaRef.current.style.height = `min(max(${scrollHeight}, ${minTextareaHeight}), ${maxRowsHeight})`;
      }
    }
  }, [maxRows, LINE_HEIGHT, PADDING]);
  (0, import_react443.useEffect)(() => {
    const handleResize = () => {
      adjustTextareaHeight();
    };
    window.addEventListener("resize", handleResize);
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, [adjustTextareaHeight]);
  (0, import_react443.useEffect)(() => {
    adjustTextareaHeight();
  }, [value, adjustTextareaHeight, maxRows, isCompactMode]);
  const attributes = {
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    "aria-describedby": ariaDescribedby,
    "aria-invalid": invalid ? "true" : void 0,
    name,
    placeholder,
    autoFocus,
    className: clsx_m_default(styles_css_default155.textarea, styles_css_default156.textarea, {
      [styles_css_default155.invalid]: invalid,
      [styles_css_default155.warning]: warning
    }),
    autoComplete: convertAutoComplete(autoComplete),
    spellCheck: spellcheck,
    disabled,
    readOnly: readOnly ? true : void 0,
    rows: minRows,
    onKeyDown: handleKeyDown,
    onKeyUp: onKeyUp && ((event) => fireKeyboardEvent(onKeyUp, event)),
    // We set a default value on the component in order to force it into the controlled mode.
    value: value || "",
    onChange: handleChange,
    onBlur: onBlur && (() => fireNonCancelableEvent(onBlur)),
    onFocus: onFocus && (() => fireNonCancelableEvent(onFocus))
  };
  if (disableBrowserAutocorrect) {
    attributes.autoCorrect = "off";
    attributes.autoCapitalize = "off";
  }
  const action = import_react443.default.createElement("div", { className: clsx_m_default(styles_css_default155["primary-action"], styles_css_default156["primary-action"]) }, customPrimaryAction !== null && customPrimaryAction !== void 0 ? customPrimaryAction : import_react443.default.createElement(internal_default3, { className: clsx_m_default(styles_css_default155["action-button"], styles_css_default156["action-button"]), ariaLabel: actionButtonAriaLabel, disabled: disabled || readOnly || disableActionButton, __focusable: readOnly, iconName: actionButtonIconName, iconUrl: actionButtonIconUrl, iconSvg: actionButtonIconSvg, iconAlt: actionButtonIconAlt, onClick: () => fireNonCancelableEvent(onAction, { value }), variant: "icon" }));
  return import_react443.default.createElement(
    "div",
    Object.assign({}, baseProps, { "aria-label": ariaLabel, className: clsx_m_default(styles_css_default155.root, styles_css_default156.root, baseProps.className, {
      [styles_css_default155["textarea-readonly"]]: readOnly,
      [styles_css_default155["textarea-invalid"]]: invalid,
      [styles_css_default155["textarea-warning"]]: warning && !invalid,
      [styles_css_default155.disabled]: disabled
    }), ref: __internalRootRef, role: "region" }),
    secondaryContent && import_react443.default.createElement("div", { className: clsx_m_default(styles_css_default155["secondary-content"], styles_css_default156["secondary-content"], {
      [styles_css_default155["with-paddings"]]: !disableSecondaryContentPaddings,
      [styles_css_default155.invalid]: invalid,
      [styles_css_default155.warning]: warning
    }) }, secondaryContent),
    import_react443.default.createElement(
      "div",
      { className: styles_css_default155["textarea-wrapper"] },
      import_react443.default.createElement(with_native_attributes_default, Object.assign({}, attributes, { tag: "textarea", componentName: "PromptInput", nativeAttributes: nativeTextareaAttributes, ref: textareaRef, id: controlId })),
      hasActionButton && !secondaryActions && action
    ),
    secondaryActions && import_react443.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default155["action-stripe"], {
        [styles_css_default155.invalid]: invalid,
        [styles_css_default155.warning]: warning
      }) },
      import_react443.default.createElement("div", { className: clsx_m_default(styles_css_default155["secondary-actions"], styles_css_default156["secondary-actions"], {
        [styles_css_default155["with-paddings"]]: !disableSecondaryActionsPaddings,
        [styles_css_default155["with-paddings-and-actions"]]: !disableSecondaryActionsPaddings && hasActionButton,
        [styles_css_default155.invalid]: invalid,
        [styles_css_default155.warning]: warning
      }) }, secondaryActions),
      import_react443.default.createElement("div", { className: styles_css_default155.buffer, onClick: () => {
        var _a3;
        return (_a3 = textareaRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
      } }),
      hasActionButton && action
    )
  );
});
var internal_default27 = InternalPromptInput;

// node_modules/@cloudscape-design/components/prompt-input/internal-do-not-use-core.js
var PromptInput = import_react444.default.forwardRef((_a2, ref) => {
  var { autoComplete, autoFocus, disableBrowserAutocorrect, disableActionButton, spellcheck, readOnly, actionButtonIconName, minRows = 1, maxRows = 3 } = _a2, props2 = __rest(_a2, ["autoComplete", "autoFocus", "disableBrowserAutocorrect", "disableActionButton", "spellcheck", "readOnly", "actionButtonIconName", "minRows", "maxRows"]);
  const baseComponentProps = useBaseComponent("PromptInput", {
    props: {
      readOnly,
      autoComplete,
      autoFocus,
      disableBrowserAutocorrect,
      disableActionButton,
      spellcheck,
      actionButtonIconName,
      minRows,
      maxRows
    }
  });
  return import_react444.default.createElement(internal_default27, Object.assign({ readOnly, autoComplete, autoFocus, disableBrowserAutocorrect, disableActionButton, spellcheck, actionButtonIconName, minRows, maxRows }, props2, baseComponentProps, { ref }));
});
applyDisplayName(PromptInput, "PromptInput");
var internal_do_not_use_core_default10 = PromptInput;

// node_modules/@cloudscape-design/components/prompt-input/index.js
var PromptInput2 = import_react445.default.forwardRef((props2, ref) => {
  validateProps("PromptInput", props2, ["nativeTextareaAttributes", "customPrimaryAction"], {}, "console");
  return import_react445.default.createElement(internal_do_not_use_core_default10, { ref, ...props2 });
});
applyDisplayName(PromptInput2, "PromptInput");
var prompt_input_default = PromptInput2;

// node_modules/@cloudscape-design/components/property-filter/index.js
var import_react455 = __toESM(require_react());

// node_modules/@cloudscape-design/components/property-filter/internal.js
var import_react454 = __toESM(require_react());

// node_modules/@cloudscape-design/components/property-filter/utils.js
function matchFilteringProperty(filteringProperties, filteringText) {
  let maxLength = 0;
  let matchedProperty = null;
  for (const property of filteringProperties) {
    if (property.propertyLabel.length >= maxLength && startsWith(filteringText, property.propertyLabel) || property.propertyLabel.length > maxLength && startsWith(filteringText.toLowerCase(), property.propertyLabel.toLowerCase())) {
      maxLength = property.propertyLabel.length;
      matchedProperty = property;
    }
  }
  return matchedProperty;
}
function matchOperator(allowedOperators, filteringText) {
  filteringText = filteringText.toLowerCase();
  let maxLength = 0;
  let matchedOperator = null;
  for (const operator of allowedOperators) {
    if (operator.length > maxLength && startsWith(filteringText, operator.toLowerCase())) {
      maxLength = operator.length;
      matchedOperator = operator;
    }
  }
  return matchedOperator;
}
function matchOperatorPrefix(allowedOperators, filteringText) {
  if (filteringText.trim().length === 0) {
    return "";
  }
  for (const operator of allowedOperators) {
    if (startsWith(operator.toLowerCase(), filteringText.toLowerCase())) {
      return filteringText;
    }
  }
  return null;
}
function matchTokenValue({ property, operator, value }, filteringOptions) {
  var _a2, _b;
  const tokenType = property === null || property === void 0 ? void 0 : property.getTokenType(operator);
  const propertyOptions = filteringOptions.filter((option) => option.property === property);
  const castValue = (value2) => {
    if (value2 === null) {
      return tokenType === "enum" ? [] : null;
    }
    return tokenType === "enum" && !Array.isArray(value2) ? [value2] : value2;
  };
  const bestMatch = { propertyKey: property === null || property === void 0 ? void 0 : property.propertyKey, operator, value: castValue(value) };
  for (const option of propertyOptions) {
    if (option.label && option.label === value || !option.label && option.value === value) {
      return { propertyKey: property === null || property === void 0 ? void 0 : property.propertyKey, operator, value: castValue(option.value) };
    }
    if (typeof value === "string" && value.toLowerCase() === ((_b = (_a2 = option.label) !== null && _a2 !== void 0 ? _a2 : option.value) !== null && _b !== void 0 ? _b : "").toLowerCase()) {
      bestMatch.value = castValue(option.value);
    }
  }
  return bestMatch;
}
function trimStart(source) {
  let spacesLength = 0;
  for (let i2 = 0; i2 < source.length; i2++) {
    if (source[i2] === " ") {
      spacesLength++;
    } else {
      break;
    }
  }
  return source.slice(spacesLength);
}
function trimFirstSpace(source) {
  return source[0] === " " ? source.slice(1) : source;
}
function removeOperator(source, operator) {
  const operatorLastIndex = source.indexOf(operator) + operator.length;
  const textWithoutOperator = source.slice(operatorLastIndex);
  return trimFirstSpace(textWithoutOperator);
}
function startsWith(source, target) {
  return source.indexOf(target) === 0;
}
function tokenGroupToTokens(tokenGroups) {
  const tokens = [];
  for (const tokenOrGroup of tokenGroups) {
    if ("operator" in tokenOrGroup) {
      tokens.push(tokenOrGroup);
    } else {
      for (const nestedTokenOrGroup of tokenOrGroup.tokens) {
        if ("operator" in nestedTokenOrGroup) {
          tokens.push(nestedTokenOrGroup);
        } else {
        }
      }
    }
  }
  return tokens;
}

// node_modules/@cloudscape-design/components/property-filter/i18n-utils.js
function usePropertyFilterI18n(def = {}) {
  var _a2;
  const i18n = useInternalI18n("property-filter");
  const allPropertiesLabel = i18n("i18nStrings.allPropertiesLabel", def === null || def === void 0 ? void 0 : def.allPropertiesLabel);
  const operationAndText = i18n("i18nStrings.operationAndText", def === null || def === void 0 ? void 0 : def.operationAndText);
  const operationOrText = i18n("i18nStrings.operationOrText", def === null || def === void 0 ? void 0 : def.operationOrText);
  const formatToken = (_a2 = i18n("i18nStrings.formatToken", def.formatToken, (format3) => (token) => format3({
    token__propertyLabel: token.propertyLabel,
    token__operator: getOperatorI18nString(token.operator),
    token__value: token.value
  }))) !== null && _a2 !== void 0 ? _a2 : ((token) => `${token.propertyLabel} ${token.operator} ${token.value}`);
  function toFormatted(token) {
    var _a3, _b, _c;
    let valueFormatter = (_a3 = token.property) === null || _a3 === void 0 ? void 0 : _a3.getValueFormatter(token.operator);
    if (!valueFormatter && ((_b = token.property) === null || _b === void 0 ? void 0 : _b.getTokenType(token.operator)) === "enum") {
      valueFormatter = (value) => Array.isArray(value) ? value.join(", ") : value;
    }
    const propertyLabel = token.property ? token.property.propertyLabel : allPropertiesLabel !== null && allPropertiesLabel !== void 0 ? allPropertiesLabel : "";
    const tokenValue = valueFormatter ? valueFormatter(token.value) : token.value;
    return { propertyKey: (_c = token.property) === null || _c === void 0 ? void 0 : _c.propertyKey, propertyLabel, operator: token.operator, value: tokenValue };
  }
  return Object.assign(Object.assign({}, def), {
    allPropertiesLabel,
    operationAndText,
    operationOrText,
    applyActionText: i18n("i18nStrings.applyActionText", def === null || def === void 0 ? void 0 : def.applyActionText),
    cancelActionText: i18n("i18nStrings.cancelActionText", def === null || def === void 0 ? void 0 : def.cancelActionText),
    clearFiltersText: i18n("i18nStrings.clearFiltersText", def === null || def === void 0 ? void 0 : def.clearFiltersText),
    editTokenHeader: i18n("i18nStrings.editTokenHeader", def === null || def === void 0 ? void 0 : def.editTokenHeader),
    groupPropertiesText: i18n("i18nStrings.groupPropertiesText", def === null || def === void 0 ? void 0 : def.groupPropertiesText),
    groupValuesText: i18n("i18nStrings.groupValuesText", def === null || def === void 0 ? void 0 : def.groupValuesText),
    operatorContainsText: i18n("i18nStrings.operatorContainsText", def === null || def === void 0 ? void 0 : def.operatorContainsText),
    operatorDoesNotContainText: i18n("i18nStrings.operatorDoesNotContainText", def === null || def === void 0 ? void 0 : def.operatorDoesNotContainText),
    operatorDoesNotEqualText: i18n("i18nStrings.operatorDoesNotEqualText", def === null || def === void 0 ? void 0 : def.operatorDoesNotEqualText),
    operatorEqualsText: i18n("i18nStrings.operatorEqualsText", def === null || def === void 0 ? void 0 : def.operatorEqualsText),
    operatorGreaterOrEqualText: i18n("i18nStrings.operatorGreaterOrEqualText", def === null || def === void 0 ? void 0 : def.operatorGreaterOrEqualText),
    operatorGreaterText: i18n("i18nStrings.operatorGreaterText", def === null || def === void 0 ? void 0 : def.operatorGreaterText),
    operatorLessOrEqualText: i18n("i18nStrings.operatorLessOrEqualText", def === null || def === void 0 ? void 0 : def.operatorLessOrEqualText),
    operatorLessText: i18n("i18nStrings.operatorLessText", def === null || def === void 0 ? void 0 : def.operatorLessText),
    operatorStartsWithText: i18n("i18nStrings.operatorStartsWithText", def === null || def === void 0 ? void 0 : def.operatorStartsWithText),
    operatorDoesNotStartWithText: i18n("i18nStrings.operatorDoesNotStartWithText", def === null || def === void 0 ? void 0 : def.operatorDoesNotStartWithText),
    operatorText: i18n("i18nStrings.operatorText", def === null || def === void 0 ? void 0 : def.operatorText),
    operatorsText: i18n("i18nStrings.operatorsText", def === null || def === void 0 ? void 0 : def.operatorsText),
    propertyText: i18n("i18nStrings.propertyText", def === null || def === void 0 ? void 0 : def.propertyText),
    tokenLimitShowFewer: i18n("i18nStrings.tokenLimitShowFewer", def === null || def === void 0 ? void 0 : def.tokenLimitShowFewer),
    tokenLimitShowMore: i18n("i18nStrings.tokenLimitShowMore", def === null || def === void 0 ? void 0 : def.tokenLimitShowMore),
    valueText: i18n("i18nStrings.valueText", def === null || def === void 0 ? void 0 : def.valueText),
    tokenEditorTokenRemoveLabel: i18n("i18nStrings.tokenEditorTokenRemoveLabel", def === null || def === void 0 ? void 0 : def.tokenEditorTokenRemoveLabel),
    tokenEditorTokenRemoveFromGroupLabel: i18n("i18nStrings.tokenEditorTokenRemoveFromGroupLabel", def === null || def === void 0 ? void 0 : def.tokenEditorTokenRemoveFromGroupLabel),
    tokenEditorAddNewTokenLabel: i18n("i18nStrings.tokenEditorAddNewTokenLabel", def === null || def === void 0 ? void 0 : def.tokenEditorAddNewTokenLabel),
    tokenEditorAddTokenActionsAriaLabel: i18n("i18nStrings.tokenEditorAddTokenActionsAriaLabel", def === null || def === void 0 ? void 0 : def.tokenEditorAddTokenActionsAriaLabel),
    formatToken: (token) => {
      const formattedToken = toFormatted(token);
      return Object.assign(Object.assign({}, formattedToken), { formattedText: formatToken(toFormatted(token)) });
    },
    groupAriaLabel: (group) => {
      var _a3;
      const tokens = tokenGroupToTokens(group.tokens).map(toFormatted);
      const groupOperationLabel = (_a3 = group.operation === "and" ? operationAndText : operationOrText) !== null && _a3 !== void 0 ? _a3 : "";
      return tokens.map((token) => formatToken(token)).join(` ${groupOperationLabel} `);
    },
    groupEditAriaLabel: (group) => {
      var _a3, _b;
      const tokens = tokenGroupToTokens(group.tokens).map((token) => toFormatted(token));
      const operation = group.operation;
      const operationLabel = (_a3 = operation === "and" ? operationAndText : operationOrText) !== null && _a3 !== void 0 ? _a3 : "";
      const formatter = i18n("i18nStrings.groupEditAriaLabel", def.groupEditAriaLabel, (format3) => () => format3({
        group__operationLabel: operationLabel,
        group__formattedTokens__length: tokens.length.toString(),
        group__formattedTokens0__formattedText: tokens[0] ? formatToken(tokens[0]) : "",
        group__formattedTokens1__formattedText: tokens[1] ? formatToken(tokens[1]) : "",
        group__formattedTokens2__formattedText: tokens[2] ? formatToken(tokens[2]) : "",
        group__formattedTokens3__formattedText: tokens[3] ? formatToken(tokens[3]) : ""
      }));
      return (_b = formatter === null || formatter === void 0 ? void 0 : formatter({ operation, operationLabel, tokens })) !== null && _b !== void 0 ? _b : "";
    },
    removeTokenButtonAriaLabel: (token) => {
      var _a3;
      const formatter = i18n("i18nStrings.removeTokenButtonAriaLabel", def.removeTokenButtonAriaLabel, (format3) => () => format3({ token__formattedText: formatToken(toFormatted(token)) }));
      return (_a3 = formatter === null || formatter === void 0 ? void 0 : formatter(toFormatted(token))) !== null && _a3 !== void 0 ? _a3 : "";
    },
    tokenEditorTokenActionsAriaLabel: (token) => {
      var _a3;
      const formatter = i18n("i18nStrings.tokenEditorTokenActionsAriaLabel", def.tokenEditorTokenActionsAriaLabel, (format3) => () => format3({ token__formattedText: formatToken(toFormatted(token)) }));
      return (_a3 = formatter === null || formatter === void 0 ? void 0 : formatter(toFormatted(token))) !== null && _a3 !== void 0 ? _a3 : "";
    },
    tokenEditorTokenRemoveAriaLabel: (token) => {
      var _a3;
      const formatter = i18n("i18nStrings.tokenEditorTokenRemoveAriaLabel", def.tokenEditorTokenRemoveAriaLabel, (format3) => () => format3({ token__formattedText: formatToken(toFormatted(token)) }));
      return (_a3 = formatter === null || formatter === void 0 ? void 0 : formatter(toFormatted(token))) !== null && _a3 !== void 0 ? _a3 : "";
    },
    tokenEditorAddExistingTokenAriaLabel: (token) => {
      var _a3;
      const formatter = i18n("i18nStrings.tokenEditorAddExistingTokenAriaLabel", def.tokenEditorAddExistingTokenAriaLabel, (format3) => () => format3({ token__formattedText: formatToken(toFormatted(token)) }));
      return (_a3 = formatter === null || formatter === void 0 ? void 0 : formatter(toFormatted(token))) !== null && _a3 !== void 0 ? _a3 : "";
    },
    tokenEditorAddExistingTokenLabel: (token) => {
      var _a3;
      const formattedToken = toFormatted(token);
      const formatter = i18n("i18nStrings.tokenEditorAddExistingTokenLabel", def.tokenEditorAddExistingTokenLabel, (format3) => () => format3({
        token__propertyLabel: formattedToken.propertyLabel,
        token__operator: formattedToken.operator,
        token__value: formattedToken.value
      }));
      return (_a3 = formatter === null || formatter === void 0 ? void 0 : formatter(toFormatted(token))) !== null && _a3 !== void 0 ? _a3 : "";
    }
  });
}
function operatorToDescription(operator, i18nStrings) {
  switch (operator) {
    case "<":
      return i18nStrings.operatorLessText;
    case "<=":
      return i18nStrings.operatorLessOrEqualText;
    case ">":
      return i18nStrings.operatorGreaterText;
    case ">=":
      return i18nStrings.operatorGreaterOrEqualText;
    case ":":
      return i18nStrings.operatorContainsText;
    case "!:":
      return i18nStrings.operatorDoesNotContainText;
    case "=":
      return i18nStrings.operatorEqualsText;
    case "!=":
      return i18nStrings.operatorDoesNotEqualText;
    case "^":
      return i18nStrings.operatorStartsWithText;
    case "!^":
      return i18nStrings.operatorDoesNotStartWithText;
    // The line is ignored from coverage because it is not reachable.
    // The purpose of it is to prevent TS errors if ComparisonOperator type gets extended.
    /* istanbul ignore next */
    default:
      return "";
  }
}
function getOperatorI18nString(operator) {
  switch (operator) {
    case "=":
      return "equals";
    case "!=":
      return "not_equals";
    case ">":
      return "greater_than";
    case ">=":
      return "greater_than_equal";
    case "<":
      return "less_than";
    case "<=":
      return "less_than_equal";
    case ":":
      return "contains";
    case "!:":
      return "not_contains";
    case "^":
      return "starts_with";
    case "!^":
      return "not_starts_with";
    // The line is ignored from coverage because it is not reachable.
    // The purpose of it is to prevent TS errors if ComparisonOperator type gets extended.
    /* istanbul ignore next */
    default:
      return operator;
  }
}

// node_modules/@cloudscape-design/components/property-filter/controller.js
var getQueryActions = ({ query, onChange, filteringOptions, enableTokenGroups }) => {
  const setQuery = (query2) => {
    function transformToken(token) {
      if ("operator" in token) {
        return matchTokenValue(token, filteringOptions);
      }
      return Object.assign(Object.assign({}, token), { tokens: token.tokens.map(transformToken) });
    }
    const tokens = query2.tokens.map(transformToken);
    if (enableTokenGroups) {
      fireNonCancelableEvent(onChange, { tokens: [], operation: query2.operation, tokenGroups: tokens });
    } else {
      fireNonCancelableEvent(onChange, { tokens: tokenGroupToTokens(tokens), operation: query2.operation });
    }
  };
  const addToken = (token) => {
    setQuery(Object.assign(Object.assign({}, query), { tokens: [...query.tokens, token] }));
  };
  const updateToken = (updateIndex, updatedToken, releasedTokens) => {
    const nestedTokens = tokenGroupToTokens([updatedToken]);
    const capturedTokenIndices = nestedTokens.map((token) => token.standaloneIndex).filter((index) => index !== void 0);
    const tokens = query.tokens.map((token, index) => index === updateIndex ? updatedToken : token).filter((_, index) => index === updateIndex || !capturedTokenIndices.includes(index));
    tokens.push(...releasedTokens);
    setQuery(Object.assign(Object.assign({}, query), { tokens }));
  };
  const removeToken = (removeIndex) => {
    setQuery(Object.assign(Object.assign({}, query), { tokens: query.tokens.filter((_, index) => index !== removeIndex) }));
  };
  const removeAllTokens = () => {
    setQuery(Object.assign(Object.assign({}, query), { tokens: [] }));
  };
  const updateOperation = (operation) => {
    setQuery(Object.assign(Object.assign({}, query), { operation }));
  };
  return { addToken, updateToken, updateOperation, removeToken, removeAllTokens };
};
var getAllowedOperators = (property) => {
  const { operators = [], defaultOperator } = property;
  const operatorOrder = ["=", "!=", ":", "!:", "^", "!^", ">=", "<=", "<", ">"];
  const operatorSet = /* @__PURE__ */ new Set([defaultOperator, ...operators]);
  return operatorOrder.filter((op) => operatorSet.has(op));
};
var parseText = (filteringText, filteringProperties, freeTextFiltering) => {
  const property = matchFilteringProperty(filteringProperties, filteringText);
  if (!property) {
    if (!freeTextFiltering.disabled) {
      const freeTextOperators = freeTextFiltering.operators.indexOf("!:") >= 0 ? ["!", ...freeTextFiltering.operators] : freeTextFiltering.operators;
      const operator2 = matchOperator(freeTextOperators, filteringText);
      if (operator2) {
        return {
          step: "free-text",
          operator: operator2 === "!" ? "!:" : operator2,
          value: removeOperator(filteringText, operator2)
        };
      }
    }
    return {
      step: "free-text",
      value: filteringText
    };
  }
  const allowedOps = getAllowedOperators(property);
  const textWithoutProperty = filteringText.substring(property.propertyLabel.length);
  const operator = matchOperator(allowedOps, trimStart(textWithoutProperty));
  if (operator) {
    return {
      step: "property",
      property,
      operator,
      value: removeOperator(textWithoutProperty, operator)
    };
  }
  const operatorPrefix = matchOperatorPrefix(allowedOps, trimStart(textWithoutProperty));
  if (operatorPrefix !== null) {
    return { step: "operator", property, operatorPrefix };
  }
  return {
    step: "free-text",
    value: filteringText
  };
};
var getAllValueSuggestions = (filteringOptions, operator = "=", i18nStrings, customGroupsText) => {
  var _a2;
  const defaultGroup = {
    label: (_a2 = i18nStrings.groupValuesText) !== null && _a2 !== void 0 ? _a2 : "",
    options: []
  };
  const customGroups = {};
  filteringOptions.forEach((filteringOption) => {
    const property = filteringOption.property;
    if (!property) {
      return;
    }
    if (getAllowedOperators(property).indexOf(operator) === -1) {
      return;
    }
    if (property.propertyGroup && !customGroups[property.propertyGroup]) {
      const label = customGroupsText.reduce((acc, customGroup) => customGroup.group === property.propertyGroup ? customGroup.values : acc, "");
      customGroups[property.propertyGroup] = {
        label,
        options: []
      };
    }
    const propertyGroup = property.propertyGroup ? customGroups[property.propertyGroup] : defaultGroup;
    propertyGroup.options.push({
      value: property.propertyLabel + " " + (operator || "=") + " " + filteringOption.value,
      label: filteringOption.label,
      __labelPrefix: property.propertyLabel + " " + (operator || "="),
      tags: filteringOption.tags,
      filteringTags: filteringOption.filteringTags
    });
  });
  return [defaultGroup, ...Object.keys(customGroups).map((group) => customGroups[group])];
};
var filteringPropertyToAutosuggestOption = (filteringProperty) => ({
  value: filteringProperty.propertyLabel,
  label: filteringProperty.propertyLabel,
  keepOpenOnSelect: true
});
function getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, filteringPropertyToOption) {
  var _a2;
  const defaultGroup = {
    label: (_a2 = i18nStrings.groupPropertiesText) !== null && _a2 !== void 0 ? _a2 : "",
    options: []
  };
  const customGroups = {};
  filteringProperties.forEach((filteringProperty) => {
    const { propertyGroup } = filteringProperty;
    let optionsGroup = defaultGroup;
    if (propertyGroup) {
      if (!customGroups[propertyGroup]) {
        const label = customGroupsText.reduce((acc, customGroup) => customGroup.group === propertyGroup ? customGroup.properties : acc, "");
        customGroups[propertyGroup] = { options: [], label };
      }
      optionsGroup = customGroups[propertyGroup];
    }
    optionsGroup.options.push(filteringPropertyToOption(filteringProperty));
  });
  const defaultGroupArray = defaultGroup.options.length ? [defaultGroup] : [];
  const customGroupsArray = Object.keys(customGroups).map((groupKey) => customGroups[groupKey]);
  return [...defaultGroupArray, ...customGroupsArray];
}
var getAutosuggestOptions = (parsedText, filteringProperties, filteringOptions, customGroupsText, i18nStrings) => {
  switch (parsedText.step) {
    case "property": {
      const { propertyLabel, groupValuesLabel } = parsedText.property;
      const options = filteringOptions.filter((o) => o.property === parsedText.property);
      return {
        filterText: parsedText.value,
        options: [
          {
            options: options.map(({ label, value, tags, filteringTags }) => ({
              value: propertyLabel + " " + parsedText.operator + " " + value,
              label,
              __labelPrefix: propertyLabel + " " + parsedText.operator,
              tags,
              filteringTags
            })),
            label: groupValuesLabel
          }
        ]
      };
    }
    case "operator": {
      return {
        filterText: parsedText.property.propertyLabel + " " + parsedText.operatorPrefix,
        options: [
          ...getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, filteringPropertyToAutosuggestOption),
          {
            options: getAllowedOperators(parsedText.property).map((value) => ({
              value: parsedText.property.propertyLabel + " " + value + " ",
              label: parsedText.property.propertyLabel + " " + value,
              description: operatorToDescription(value, i18nStrings),
              keepOpenOnSelect: true
            })),
            label: i18nStrings.operatorsText
          }
        ]
      };
    }
    case "free-text": {
      const needsValueSuggestions = !!parsedText.value;
      const needsPropertySuggestions = !(parsedText.step === "free-text" && parsedText.operator === "!:");
      return {
        filterText: parsedText.value,
        options: [
          ...needsPropertySuggestions ? getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, filteringPropertyToAutosuggestOption) : [],
          ...needsValueSuggestions ? getAllValueSuggestions(filteringOptions, parsedText.operator, i18nStrings, customGroupsText) : []
        ]
      };
    }
  }
};

// node_modules/@cloudscape-design/components/property-filter/property-editor.js
var import_react448 = __toESM(require_react());

// node_modules/@cloudscape-design/components/multiselect/embedded.js
var import_react446 = __toESM(require_react());
var EmbeddedMultiselect = import_react446.default.forwardRef((_a2, externalRef) => {
  var { options, filteringType, ariaLabel, selectedOptions, deselectAriaLabel, virtualScroll, filteringText = "" } = _a2, restProps = __rest(_a2, ["options", "filteringType", "ariaLabel", "selectedOptions", "deselectAriaLabel", "virtualScroll", "filteringText"]);
  const formFieldContext = useFormFieldContext(restProps);
  const ariaLabelId = useUniqueId("multiselect-ariaLabel-");
  const footerId = useUniqueId("multiselect-footer-");
  const multiselectProps = useMultiselect(Object.assign({
    options,
    selectedOptions,
    filteringType,
    disabled: false,
    deselectAriaLabel,
    controlId: formFieldContext.controlId,
    ariaLabelId,
    footerId,
    filteringValue: filteringText,
    externalRef,
    keepOpen: true,
    embedded: true
  }, restProps));
  const ListComponent = virtualScroll ? virtual_list_default : plain_list_default;
  const status = multiselectProps.dropdownStatus;
  return import_react446.default.createElement(
    "div",
    { className: styles_css_default94.embedded },
    import_react446.default.createElement(ListComponent, { menuProps: multiselectProps.getMenuProps(), getOptionProps: multiselectProps.getOptionProps, filteredOptions: multiselectProps.filteredOptions, filteringValue: filteringText, ref: multiselectProps.scrollToIndex, hasDropdownStatus: status.content !== null, checkboxes: true, useInteractiveGroups: true, screenReaderContent: multiselectProps.announcement, highlightType: multiselectProps.highlightType }),
    status.content && import_react446.default.createElement(dropdown_footer_default, { content: status.content, id: footerId }),
    import_react446.default.createElement(ScreenreaderOnly, { id: ariaLabelId }, ariaLabel)
  );
});
var embedded_default = EmbeddedMultiselect;

// node_modules/@cloudscape-design/components/property-filter/filter-options.js
function filterOptions3(options, searchText = "") {
  if (!searchText) {
    return options;
  }
  const filtered = [];
  for (const option of options) {
    if (isGroup4(option)) {
      const childOptions = filterOptions3(option.options, searchText);
      if (childOptions.length > 0) {
        filtered.push(Object.assign(Object.assign({}, option), { options: childOptions }));
      }
    } else if (matchSingleOption2(option, searchText)) {
      filtered.push(option);
    }
  }
  return filtered;
}
function isGroup4(optionOrGroup) {
  return "options" in optionOrGroup;
}
function matchSingleOption2(option, searchText) {
  var _a2, _b, _c, _d, _e, _f;
  searchText = searchText.toLowerCase();
  const label = ((_a2 = option.label) !== null && _a2 !== void 0 ? _a2 : "").toLowerCase();
  const labelPrefix = (_b = option.__labelPrefix) !== null && _b !== void 0 ? _b : "";
  const value = (option.value ? option.value.slice(labelPrefix.length) : "").toLowerCase();
  const matchesLabelOrValue = label.indexOf(searchText) !== -1 || value.indexOf(searchText) !== -1;
  const matchesTags = (_d = (_c = option.tags) === null || _c === void 0 ? void 0 : _c.some((tag) => tag.toLowerCase().indexOf(searchText) !== -1)) !== null && _d !== void 0 ? _d : false;
  const matchesFilteringTags = (_f = (_e = option.filteringTags) === null || _e === void 0 ? void 0 : _e.some((tag) => tag.toLowerCase().indexOf(searchText) !== -1)) !== null && _f !== void 0 ? _f : false;
  return matchesLabelOrValue || matchesTags || matchesFilteringTags;
}

// node_modules/@cloudscape-design/components/property-filter/use-load-items.js
var import_react447 = __toESM(require_react());
var useLoadItems2 = (onLoadItems, focusFilteringText, currentFilteringProperty, currentFilteringText, currentFilteringOperator) => {
  const focusIn = (0, import_react447.useRef)(false);
  const handleBlur = () => {
    focusIn.current = true;
  };
  const fireLoadItems = (detail) => {
    var _a2;
    fireNonCancelableEvent(onLoadItems, Object.assign(Object.assign({}, detail), { filteringText: (_a2 = currentFilteringText !== null && currentFilteringText !== void 0 ? currentFilteringText : detail.filteringText) !== null && _a2 !== void 0 ? _a2 : "", filteringProperty: currentFilteringProperty, filteringOperator: currentFilteringOperator }));
    focusIn.current = false;
  };
  const handleFocus = () => {
    if (focusIn.current) {
      fireLoadItems({ firstPage: true, samePage: false, filteringText: focusFilteringText });
    }
  };
  const handleLoadItems = ({ detail }) => fireLoadItems(detail);
  return {
    onBlur: handleBlur,
    onFocus: handleFocus,
    onLoadItems: handleLoadItems
  };
};

// node_modules/@cloudscape-design/components/property-filter/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/property-filter/styles.scoped.css";
var styles_css_default157 = {
  "root": "awsui_root_1wzqe_1jgzn_145",
  "search-field": "awsui_search-field_1wzqe_1jgzn_177",
  "input-wrapper": "awsui_input-wrapper_1wzqe_1jgzn_184",
  "add-token": "awsui_add-token_1wzqe_1jgzn_191",
  "tokens": "awsui_tokens_1wzqe_1jgzn_198",
  "token-operator": "awsui_token-operator_1wzqe_1jgzn_203",
  "property-editor": "awsui_property-editor_1wzqe_1jgzn_207",
  "property-editor-header": "awsui_property-editor-header_1wzqe_1jgzn_210",
  "property-editor-header-enum": "awsui_property-editor-header-enum_1wzqe_1jgzn_223",
  "property-editor-form": "awsui_property-editor-form_1wzqe_1jgzn_238",
  "property-editor-cancel": "awsui_property-editor-cancel_1wzqe_1jgzn_243",
  "property-editor-actions": "awsui_property-editor-actions_1wzqe_1jgzn_246",
  "property-editor-enum": "awsui_property-editor-enum_1wzqe_1jgzn_254",
  "token-editor": "awsui_token-editor_1wzqe_1jgzn_259",
  "token-editor-form": "awsui_token-editor-form_1wzqe_1jgzn_266",
  "token-editor-field-property": "awsui_token-editor-field-property_1wzqe_1jgzn_269",
  "token-editor-field-operator": "awsui_token-editor-field-operator_1wzqe_1jgzn_272",
  "token-editor-field-value": "awsui_token-editor-field-value_1wzqe_1jgzn_275",
  "token-editor-multiselect-wrapper": "awsui_token-editor-multiselect-wrapper_1wzqe_1jgzn_278",
  "token-editor-multiselect-wrapper-inner": "awsui_token-editor-multiselect-wrapper-inner_1wzqe_1jgzn_283",
  "token-editor-cancel": "awsui_token-editor-cancel_1wzqe_1jgzn_287",
  "token-editor-submit": "awsui_token-editor-submit_1wzqe_1jgzn_290",
  "token-editor-actions": "awsui_token-editor-actions_1wzqe_1jgzn_293",
  "token-editor-grid": "awsui_token-editor-grid_1wzqe_1jgzn_302",
  "token-editor-grid-group": "awsui_token-editor-grid-group_1wzqe_1jgzn_336",
  "token-editor-narrow": "awsui_token-editor-narrow_1wzqe_1jgzn_339",
  "token-editor-supports-groups": "awsui_token-editor-supports-groups_1wzqe_1jgzn_348",
  "token-editor-grid-header": "awsui_token-editor-grid-header_1wzqe_1jgzn_352",
  "token-editor-grid-cell": "awsui_token-editor-grid-cell_1wzqe_1jgzn_358",
  "token-editor-add-token": "awsui_token-editor-add-token_1wzqe_1jgzn_367",
  "custom-content-wrapper": "awsui_custom-content-wrapper_1wzqe_1jgzn_371",
  "custom-control": "awsui_custom-control_1wzqe_1jgzn_375",
  "input": "awsui_input_1wzqe_1jgzn_184",
  "results": "awsui_results_1wzqe_1jgzn_383",
  "token-trigger": "awsui_token-trigger_1wzqe_1jgzn_388",
  "remove-all": "awsui_remove-all_1wzqe_1jgzn_393",
  "join-operation": "awsui_join-operation_1wzqe_1jgzn_394",
  "custom-filter-actions": "awsui_custom-filter-actions_1wzqe_1jgzn_395",
  "constraint": "awsui_constraint_1wzqe_1jgzn_399"
};

// node_modules/@cloudscape-design/components/property-filter/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/property-filter/test-classes/styles.scoped.css";
var styles_css_default158 = {
  "filtering-token": "awsui_filtering-token_1heb1_1ayd6_5",
  "filtering-token-dismiss-button": "awsui_filtering-token-dismiss-button_1heb1_1ayd6_9",
  "filtering-token-select": "awsui_filtering-token-select_1heb1_1ayd6_13",
  "filtering-token-content": "awsui_filtering-token-content_1heb1_1ayd6_17",
  "filtering-token-inner": "awsui_filtering-token-inner_1heb1_1ayd6_21",
  "filtering-token-inner-dismiss-button": "awsui_filtering-token-inner-dismiss-button_1heb1_1ayd6_25",
  "filtering-token-inner-select": "awsui_filtering-token-inner-select_1heb1_1ayd6_29",
  "filtering-token-inner-content": "awsui_filtering-token-inner-content_1heb1_1ayd6_33",
  "filtering-token-edit-button": "awsui_filtering-token-edit-button_1heb1_1ayd6_37",
  "token-editor-field-property": "awsui_token-editor-field-property_1heb1_1ayd6_41",
  "token-editor-field-operator": "awsui_token-editor-field-operator_1heb1_1ayd6_45",
  "token-editor-field-value": "awsui_token-editor-field-value_1heb1_1ayd6_49",
  "token-editor-token-remove-actions": "awsui_token-editor-token-remove-actions_1heb1_1ayd6_53",
  "token-editor-token-add-actions": "awsui_token-editor-token-add-actions_1heb1_1ayd6_57",
  "token-editor-cancel": "awsui_token-editor-cancel_1heb1_1ayd6_61",
  "token-editor-submit": "awsui_token-editor-submit_1heb1_1ayd6_65",
  "property-editor-cancel": "awsui_property-editor-cancel_1heb1_1ayd6_69",
  "property-editor-submit": "awsui_property-editor-submit_1heb1_1ayd6_73"
};

// node_modules/@cloudscape-design/components/property-filter/property-editor.js
function PropertyEditorContentCustom({ property, operator, filter, value, onChange, operatorForm }) {
  const labelId = useUniqueId();
  return import_react448.default.createElement(
    "div",
    { className: styles_css_default157["property-editor"] },
    import_react448.default.createElement("div", { className: styles_css_default157["property-editor-header"], id: labelId }, property.groupValuesLabel),
    import_react448.default.createElement(
      "div",
      { className: styles_css_default157["property-editor-form"] },
      import_react448.default.createElement(FormFieldContext.Provider, { value: { ariaLabelledby: labelId } }, operatorForm({ value, onChange, operator, filter }))
    )
  );
}
function PropertyEditorContentEnum({ property, filter, value: unknownValue, onChange, asyncProps, filteringOptions, onLoadItems }) {
  const valueOptions = filteringOptions.filter((option) => {
    var _a2;
    return ((_a2 = option.property) === null || _a2 === void 0 ? void 0 : _a2.propertyKey) === property.propertyKey;
  }).map(({ label, value: value2, tags, filteringTags }) => ({ label, value: value2, tags, filteringTags }));
  const valueHandlers = useLoadItems2(onLoadItems, "", property.externalProperty);
  const value = !unknownValue ? [] : Array.isArray(unknownValue) ? unknownValue : [unknownValue];
  const selectedOptions = valueOptions.filter((option) => value.includes(option.value));
  const filteredOptions = filterOptions3(valueOptions, filter);
  return import_react448.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default157["property-editor"], styles_css_default157["property-editor-enum"]) },
    filteredOptions.length === 0 && import_react448.default.createElement(
      "div",
      { className: styles_css_default157["property-editor-header-enum"] },
      import_react448.default.createElement(internal_default16, { checked: false, readOnly: true }),
      property.groupValuesLabel
    ),
    import_react448.default.createElement(embedded_default, Object.assign({ filteringType: "manual", selectedOptions, onChange: (e3) => onChange(e3.detail.selectedOptions.map((o) => o.value)), options: filteredOptions.length > 0 ? [{ options: filteredOptions, label: property.groupValuesLabel }] : [], filteringText: filter, ariaLabel: property.groupValuesLabel, statusType: "finished", noMatch: asyncProps.empty }, valueHandlers, asyncProps))
  );
}
function PropertyEditorFooter({ property, operator, value, onCancel, onSubmit, i18nStrings }) {
  const submitToken = () => onSubmit({ property, operator, value });
  return import_react448.default.createElement(
    "div",
    { className: styles_css_default157["property-editor-actions"] },
    import_react448.default.createElement(internal_default3, { variant: "link", className: clsx_m_default(styles_css_default157["property-editor-cancel"], styles_css_default158["property-editor-cancel"]), onClick: onCancel }, i18nStrings.cancelActionText),
    import_react448.default.createElement(internal_default3, { className: styles_css_default158["property-editor-submit"], onClick: submitToken }, i18nStrings.applyActionText)
  );
}

// node_modules/@cloudscape-design/components/property-filter/property-filter-autosuggest.js
var import_react449 = __toESM(require_react());
var DROPDOWN_WIDTH_OPTIONS_LIST = 300;
var DROPDOWN_WIDTH_CUSTOM_FORM = 200;
var PropertyFilterAutosuggest = import_react449.default.forwardRef((props2, ref) => {
  var _a2;
  const { value, onChange, onFocus, onBlur, onLoadItems, options, statusType = "finished", placeholder, disabled, ariaLabel, enteredTextLabel, onKeyDown, virtualScroll, expandToViewport, customForm, filterText, onOptionClick, hideEnteredTextOption, searchResultsId, onCloseDropdown } = props2, rest = __rest(props2, ["value", "onChange", "onFocus", "onBlur", "onLoadItems", "options", "statusType", "placeholder", "disabled", "ariaLabel", "enteredTextLabel", "onKeyDown", "virtualScroll", "expandToViewport", "customForm", "filterText", "onOptionClick", "hideEnteredTextOption", "searchResultsId", "onCloseDropdown"]);
  const highlightText = filterText === void 0 ? value : filterText;
  const customFormRef = (0, import_react449.useRef)(null);
  const autosuggestInputRef = (0, import_react449.useRef)(null);
  const mergedRef = useMergeRefs(autosuggestInputRef, ref);
  const filteredOptions = (0, import_react449.useMemo)(() => filterOptions3(options || [], highlightText), [options, highlightText]);
  const [autosuggestItemsState, autosuggestItemsHandlers] = useAutosuggestItems({
    options: filteredOptions,
    filterValue: value,
    filterText: highlightText,
    filteringType: "manual",
    enteredTextLabel,
    hideEnteredTextLabel: hideEnteredTextOption,
    onSelectItem: (option) => {
      var _a3;
      const value2 = option.value || "";
      fireNonCancelableEvent(onChange, { value: value2 });
      const selectedCancelled = fireCancelableEvent(onOptionClick, option);
      if (!selectedCancelled) {
        (_a3 = autosuggestInputRef.current) === null || _a3 === void 0 ? void 0 : _a3.close();
      } else {
        autosuggestItemsHandlers.resetHighlightWithKeyboard();
      }
    }
  });
  const autosuggestLoadMoreHandlers = useAutosuggestLoadMore({
    options,
    statusType,
    onLoadItems: (detail) => fireNonCancelableEvent(onLoadItems, detail)
  });
  const handleChange = (event) => {
    autosuggestItemsHandlers.resetHighlightWithKeyboard();
    fireNonCancelableEvent(onChange, event.detail);
  };
  const handleDelayedInput = (event) => {
    autosuggestLoadMoreHandlers.fireLoadMoreOnInputChange(event.detail.value);
  };
  const handleFocus = () => {
    autosuggestLoadMoreHandlers.fireLoadMoreOnInputFocus();
    fireCancelableEvent(onFocus, null);
  };
  const handleBlur = () => {
    fireCancelableEvent(onBlur, null);
  };
  const handleKeyDown = (e3) => {
    fireCancelableEvent(onKeyDown, e3.detail);
  };
  const handlePressArrowDown = () => {
    var _a3;
    autosuggestItemsHandlers.moveHighlightWithKeyboard(1);
    if (customFormRef.current) {
      (_a3 = getFirstFocusable2(customFormRef.current)) === null || _a3 === void 0 ? void 0 : _a3.focus();
    }
  };
  const handlePressArrowUp = () => {
    autosuggestItemsHandlers.moveHighlightWithKeyboard(-1);
  };
  const handlePressEnter = () => {
    return autosuggestItemsHandlers.selectHighlightedOptionWithKeyboard();
  };
  const handleCloseDropdown = () => {
    autosuggestItemsHandlers.resetHighlightWithKeyboard();
    onCloseDropdown === null || onCloseDropdown === void 0 ? void 0 : onCloseDropdown();
  };
  const handleRecoveryClick = () => {
    var _a3;
    autosuggestLoadMoreHandlers.fireLoadMoreOnRecoveryClick();
    (_a3 = autosuggestInputRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
  };
  const selfControlId = useUniqueId("input");
  const controlId = (_a2 = rest.controlId) !== null && _a2 !== void 0 ? _a2 : selfControlId;
  const listId = useUniqueId("list");
  const footerId = useUniqueId("footer");
  const highlightedOptionIdSource = useUniqueId();
  const highlightedOptionId = autosuggestItemsState.highlightedOption ? highlightedOptionIdSource : void 0;
  const isEmpty = !autosuggestItemsState.items.length;
  const dropdownStatus = useDropdownStatus(Object.assign(Object.assign({}, props2), { isEmpty, onRecoveryClick: handleRecoveryClick, hasRecoveryCallback: !!onLoadItems }));
  let content = null;
  if (customForm) {
    content = import_react449.default.createElement("div", { ref: customFormRef, className: styles_css_default157["custom-content-wrapper"] }, customForm.content);
  } else {
    content = import_react449.default.createElement(AutosuggestOptionsList, { statusType, autosuggestItemsState, autosuggestItemsHandlers, highlightedOptionId, highlightText, listId, controlId, handleLoadMore: autosuggestLoadMoreHandlers.fireLoadMoreOnScroll, hasDropdownStatus: dropdownStatus.content !== null, virtualScroll, listBottom: !dropdownStatus.isSticky ? import_react449.default.createElement(dropdown_footer_default, { content: dropdownStatus.content, id: footerId }) : null, ariaDescribedby: dropdownStatus.content ? footerId : void 0 });
  }
  return import_react449.default.createElement(autosuggest_input_default, Object.assign({ ref: mergedRef }, rest, { className: clsx_m_default(styles_css_default99.root, styles_css_default157.input), value, onChange: handleChange, onFocus: handleFocus, onBlur: handleBlur, onKeyDown: handleKeyDown, controlId, placeholder, disabled, ariaLabel, expandToViewport, ariaControls: listId, ariaActivedescendant: highlightedOptionId, ariaDescribedby: joinStrings(searchResultsId, rest.ariaDescribedby), dropdownExpanded: autosuggestItemsState.items.length > 1 || dropdownStatus.content !== null || !!customForm, dropdownContentKey: customForm ? "custom" : "options", dropdownContent: content, dropdownFooter: dropdownStatus.isSticky && dropdownStatus.content && !customForm ? import_react449.default.createElement(dropdown_footer_default, { content: dropdownStatus.content, hasItems: autosuggestItemsState.items.length >= 1, id: footerId }) : customForm ? customForm.footer : null, dropdownWidth: customForm ? DROPDOWN_WIDTH_CUSTOM_FORM : DROPDOWN_WIDTH_OPTIONS_LIST, dropdownContentFocusable: !!customForm, onCloseDropdown: handleCloseDropdown, onDelayedInput: handleDelayedInput, onPressArrowDown: handlePressArrowDown, onPressArrowUp: handlePressArrowUp, onPressEnter: handlePressEnter, loopFocus: !!customForm || dropdownStatus.hasRecoveryButton }));
});
var property_filter_autosuggest_default = PropertyFilterAutosuggest;

// node_modules/@cloudscape-design/components/property-filter/token.js
var import_react453 = __toESM(require_react());

// node_modules/@cloudscape-design/components/property-filter/filtering-token/index.js
var import_react450 = __toESM(require_react());

// node_modules/@cloudscape-design/components/property-filter/filtering-token/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/property-filter/filtering-token/styles.scoped.css";
var styles_css_default159 = {
  "root": "awsui_root_19bso_1ex8z_153",
  "inner-root": "awsui_inner-root_19bso_1ex8z_154",
  "has-groups": "awsui_has-groups_19bso_1ex8z_187",
  "compact-mode": "awsui_compact-mode_19bso_1ex8z_191",
  "token": "awsui_token_19bso_1ex8z_200",
  "inner-token": "awsui_inner-token_19bso_1ex8z_201",
  "grouped": "awsui_grouped_19bso_1ex8z_214",
  "list": "awsui_list_19bso_1ex8z_226",
  "show-operation": "awsui_show-operation_19bso_1ex8z_237",
  "select": "awsui_select_19bso_1ex8z_243",
  "inner-select": "awsui_inner-select_19bso_1ex8z_244",
  "token-content": "awsui_token-content_19bso_1ex8z_248",
  "token-content-grouped": "awsui_token-content-grouped_19bso_1ex8z_254",
  "inner-token-content": "awsui_inner-token-content_19bso_1ex8z_259",
  "edit-button": "awsui_edit-button_19bso_1ex8z_264",
  "dismiss-button": "awsui_dismiss-button_19bso_1ex8z_265",
  "inner-dismiss-button": "awsui_inner-dismiss-button_19bso_1ex8z_266",
  "token-disabled": "awsui_token-disabled_19bso_1ex8z_324"
};

// node_modules/@cloudscape-design/components/property-filter/filtering-token/index.js
var FilteringToken = (0, import_react450.forwardRef)((_a2, ref) => {
  var { tokens, showOperation, readOnlyOperations, operation, groupOperation, andText, orText, groupAriaLabel, operationAriaLabel, groupEditAriaLabel, disabled = false, onChangeOperation, onChangeGroupOperation, onDismissToken, editorContent, editorHeader, editorDismissAriaLabel, editorExpandToViewport, onEditorOpen, hasGroups, popoverSize } = _a2, rest = __rest(_a2, ["tokens", "showOperation", "readOnlyOperations", "operation", "groupOperation", "andText", "orText", "groupAriaLabel", "operationAriaLabel", "groupEditAriaLabel", "disabled", "onChangeOperation", "onChangeGroupOperation", "onDismissToken", "editorContent", "editorHeader", "editorDismissAriaLabel", "editorExpandToViewport", "onEditorOpen", "hasGroups", "popoverSize"]);
  const [nextFocusIndex, setNextFocusIndex] = (0, import_react450.useState)(null);
  const tokenListRef = useListFocusController({
    nextFocusIndex,
    onFocusMoved: (target) => {
      target.focus();
      setNextFocusIndex(null);
    },
    listItemSelector: `.${styles_css_default159["inner-root"]}`,
    fallbackSelector: `.${styles_css_default159.root}`
  });
  const popoverRef = (0, import_react450.useRef)(null);
  const popoverProps = {
    content: editorContent,
    triggerType: "text",
    header: editorHeader,
    size: popoverSize,
    position: "bottom",
    dismissAriaLabel: editorDismissAriaLabel,
    renderWithPortal: editorExpandToViewport,
    __onOpen: onEditorOpen,
    __closeAnalyticsAction: "editClose"
  };
  (0, import_react450.useImperativeHandle)(ref, () => ({ closeEditor: () => {
    var _a3;
    return (_a3 = popoverRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
  } }));
  return import_react450.default.createElement(TokenGroup, Object.assign({ ref: tokenListRef, ariaLabel: tokens.length === 1 ? tokens[0].ariaLabel : groupAriaLabel, operation: showOperation && import_react450.default.createElement(OperationSelector, { operation, onChange: onChangeOperation, ariaLabel: operationAriaLabel, andText, orText, parent: true, readOnlyOperations, disabled }), tokenAction: tokens.length === 1 ? import_react450.default.createElement(TokenDismissButton, { ariaLabel: tokens[0].dismissAriaLabel, onClick: () => onDismissToken(0), parent: true, disabled }) : import_react450.default.createElement(
    internal_default21,
    Object.assign({ ref: popoverRef }, popoverProps, { triggerType: "filtering-token" }),
    import_react450.default.createElement(TokenEditButton, { ariaLabel: groupEditAriaLabel, disabled })
  ), parent: true, grouped: tokens.length > 1, disabled, hasGroups }, copyAnalyticsMetadataAttribute(rest)), tokens.length === 1 ? import_react450.default.createElement(
    internal_default21,
    Object.assign({ ref: popoverRef }, popoverProps),
    import_react450.default.createElement("span", Object.assign({}, getAnalyticsMetadataAttribute({
      action: "editStart"
    })), tokens[0].content)
  ) : import_react450.default.createElement("ul", { className: styles_css_default159.list }, tokens.map((token, index) => import_react450.default.createElement(
    "li",
    { key: index },
    import_react450.default.createElement(TokenGroup, { ariaLabel: token.ariaLabel, operation: index !== 0 && import_react450.default.createElement(OperationSelector, { operation: groupOperation, onChange: onChangeGroupOperation, ariaLabel: operationAriaLabel, andText, orText, parent: false, readOnlyOperations, disabled }), tokenAction: import_react450.default.createElement(TokenDismissButton, { ariaLabel: token.dismissAriaLabel, onClick: () => {
      onDismissToken(index);
      setNextFocusIndex(index);
    }, parent: false, disabled }), parent: false, grouped: false, disabled, hasGroups: false }, token.content)
  ))));
});
var filtering_token_default = FilteringToken;
var TokenGroup = (0, import_react450.forwardRef)((_a2, ref) => {
  var { ariaLabel, children: children2, operation, tokenAction, parent, grouped, disabled, hasGroups } = _a2, rest = __rest(_a2, ["ariaLabel", "children", "operation", "tokenAction", "parent", "grouped", "disabled", "hasGroups"]);
  const groupRef = (0, import_react450.useRef)(null);
  const mergedRef = useMergeRefs(ref, groupRef);
  const isCompactMode = useDensityMode(groupRef) === "compact";
  return import_react450.default.createElement(
    "div",
    Object.assign({ ref: mergedRef, className: clsx_m_default(parent ? clsx_m_default(styles_css_default159.root, styles_css_default158["filtering-token"]) : clsx_m_default(styles_css_default159["inner-root"], styles_css_default158["filtering-token-inner"]), hasGroups && styles_css_default159["has-groups"], isCompactMode && styles_css_default159["compact-mode"]), role: "group", "aria-label": ariaLabel }, copyAnalyticsMetadataAttribute(rest)),
    operation,
    import_react450.default.createElement(
      "div",
      { className: clsx_m_default(parent ? styles_css_default159.token : styles_css_default159["inner-token"], !!operation && styles_css_default159["show-operation"], grouped && styles_css_default159.grouped, disabled && styles_css_default159["token-disabled"]), "aria-disabled": disabled },
      import_react450.default.createElement("div", { className: clsx_m_default(parent ? clsx_m_default(styles_css_default159["token-content"], styles_css_default158["filtering-token-content"]) : clsx_m_default(styles_css_default159["inner-token-content"], styles_css_default158["filtering-token-inner-content"]), grouped && styles_css_default159["token-content-grouped"]) }, children2),
      tokenAction
    )
  );
});
function OperationSelector({ operation, onChange, ariaLabel, andText, orText, parent, readOnlyOperations, disabled }) {
  return import_react450.default.createElement(internal_default17, { __inFilteringToken: parent ? "root" : "nested", className: clsx_m_default(parent ? clsx_m_default(styles_css_default159.select, styles_css_default158["filtering-token-select"]) : clsx_m_default(styles_css_default159["inner-select"], styles_css_default158["filtering-token-inner-select"])), options: [
    { value: "and", label: andText },
    { value: "or", label: orText }
  ], selectedOption: { value: operation, label: operation === "and" ? andText : orText }, onChange: (e3) => onChange(e3.detail.selectedOption.value), disabled, readOnly: readOnlyOperations, ariaLabel });
}
function TokenDismissButton({ ariaLabel, onClick, parent, disabled }) {
  return import_react450.default.createElement(
    "button",
    Object.assign({ type: "button", className: clsx_m_default(parent ? clsx_m_default(styles_css_default159["dismiss-button"], styles_css_default158["filtering-token-dismiss-button"]) : clsx_m_default(styles_css_default159["inner-dismiss-button"], styles_css_default158["filtering-token-inner-dismiss-button"])), "aria-label": ariaLabel, onClick, disabled }, getAnalyticsMetadataAttribute({ action: "dismiss" })),
    import_react450.default.createElement(internal_default, { name: "close" })
  );
}
function TokenEditButton({ ariaLabel, disabled }) {
  return import_react450.default.createElement(
    "button",
    { type: "button", className: clsx_m_default(styles_css_default159["edit-button"], styles_css_default158["filtering-token-edit-button"]), "aria-label": ariaLabel, disabled },
    import_react450.default.createElement(internal_default, { name: "edit" })
  );
}

// node_modules/@cloudscape-design/components/property-filter/token-editor.js
var import_react452 = __toESM(require_react());

// node_modules/@cloudscape-design/components/property-filter/token-editor-inputs.js
var import_react451 = __toESM(require_react());
function PropertyInput({ property, onChangePropertyKey, asyncProps, filteringProperties, onLoadItems, customGroupsText, i18nStrings, freeTextFiltering }) {
  var _a2;
  const propertySelectHandlers = useLoadItems2(onLoadItems);
  const asyncPropertySelectProps = asyncProps ? Object.assign(Object.assign({}, asyncProps), propertySelectHandlers) : {};
  const propertyOptions = getPropertySuggestions(filteringProperties, customGroupsText, i18nStrings, ({ propertyKey, propertyLabel }) => ({
    value: propertyKey,
    label: propertyLabel,
    dontCloseOnSelect: true
  }));
  const allPropertiesOption = {
    label: i18nStrings.allPropertiesLabel,
    value: void 0
  };
  if (!freeTextFiltering.disabled) {
    propertyOptions.unshift(allPropertiesOption);
  }
  return import_react451.default.createElement(internal_default17, Object.assign({ options: propertyOptions, selectedOption: property ? {
    value: (_a2 = property.propertyKey) !== null && _a2 !== void 0 ? _a2 : void 0,
    label: property.propertyLabel
  } : allPropertiesOption, onChange: (e3) => onChangePropertyKey(e3.detail.selectedOption.value) }, asyncPropertySelectProps));
}
function OperatorInput({ property, operator, onChangeOperator, i18nStrings, freeTextFiltering, triggerVariant }) {
  const operatorOptions = (property ? getAllowedOperators(property) : freeTextFiltering.operators).map((operator2) => ({
    value: operator2,
    label: operator2,
    description: operatorToDescription(operator2, i18nStrings)
  }));
  return import_react451.default.createElement(internal_default17, { options: operatorOptions, triggerVariant, selectedOption: operator ? {
    value: operator,
    label: operator,
    description: operatorToDescription(operator, i18nStrings)
  } : null, onChange: (e3) => onChangeOperator(e3.detail.selectedOption.value) });
}
function ValueInput(props2) {
  const { property, operator, value, onChangeValue } = props2;
  const OperatorForm = (property === null || property === void 0 ? void 0 : property.propertyKey) && operator && (property === null || property === void 0 ? void 0 : property.getValueFormRenderer(operator));
  if (OperatorForm) {
    return import_react451.default.createElement(OperatorForm, { value, onChange: onChangeValue, operator });
  }
  if (property && operator && property.getTokenType(operator) === "enum") {
    return import_react451.default.createElement(ValueInputEnum, Object.assign({}, props2, { property, operator }));
  }
  return import_react451.default.createElement(ValueInputAuto, Object.assign({}, props2));
}
function ValueInputAuto({ property, operator, value: unknownValue, onChangeValue, asyncProps, filteringOptions, onLoadItems, i18nStrings }) {
  var _a2;
  const value = (unknownValue !== null && unknownValue !== void 0 ? unknownValue : "") + "";
  const valueOptions = property ? filteringOptions.filter((option) => {
    var _a3;
    return ((_a3 = option.property) === null || _a3 === void 0 ? void 0 : _a3.propertyKey) === property.propertyKey;
  }).map(({ label, value: value2, tags, filteringTags }) => ({ label, value: value2, tags, filteringTags })) : [];
  const valueAutosuggestHandlers = useLoadItems2(onLoadItems, "", property === null || property === void 0 ? void 0 : property.externalProperty, value, operator);
  const asyncValueAutosuggestProps = (property === null || property === void 0 ? void 0 : property.propertyKey) ? Object.assign(Object.assign({}, valueAutosuggestHandlers), asyncProps) : { empty: asyncProps.empty };
  const [matchedOption] = valueOptions.filter((option) => option.value === value);
  return import_react451.default.createElement(internal_default15, Object.assign({ enteredTextLabel: i18nStrings.enteredTextLabel, value: (_a2 = matchedOption === null || matchedOption === void 0 ? void 0 : matchedOption.label) !== null && _a2 !== void 0 ? _a2 : value, clearAriaLabel: i18nStrings.clearAriaLabel, onChange: (e3) => onChangeValue(e3.detail.value), disabled: !operator, options: valueOptions }, asyncValueAutosuggestProps, { virtualScroll: true }));
}
function ValueInputEnum({ property, operator, value: unknownValue, onChangeValue, asyncProps, filteringOptions, onLoadItems }) {
  const valueOptions = filteringOptions.filter((option) => {
    var _a2;
    return ((_a2 = option.property) === null || _a2 === void 0 ? void 0 : _a2.propertyKey) === property.propertyKey;
  }).map(({ label, value: value2, tags, filteringTags }) => ({ label, value: value2, tags, filteringTags }));
  const valueAutosuggestHandlers = useLoadItems2(onLoadItems, "", property.externalProperty, void 0, operator);
  const asyncValueAutosuggestProps = Object.assign(Object.assign({ statusType: "finished" }, valueAutosuggestHandlers), asyncProps);
  const value = !unknownValue ? [] : Array.isArray(unknownValue) ? unknownValue : [unknownValue];
  const selectedOptions = valueOptions.filter((option) => value.includes(option.value));
  return import_react451.default.createElement(
    "div",
    { className: styles_css_default157["token-editor-multiselect-wrapper"] },
    import_react451.default.createElement(
      "div",
      { className: styles_css_default157["token-editor-multiselect-wrapper-inner"] },
      import_react451.default.createElement(internal_default13, Object.assign({ filteringType: "auto", selectedOptions, onChange: (e3) => onChangeValue(e3.detail.selectedOptions.map((o) => o.value)), options: valueOptions.length > 0 ? [{ options: valueOptions, label: property.groupValuesLabel }] : [] }, asyncValueAutosuggestProps, { inlineTokens: true, hideTokens: true, keepOpen: true }))
    )
  );
}

// node_modules/@cloudscape-design/components/property-filter/token-editor.js
function TokenEditor({ supportsGroups, asyncProperties, asyncProps, customGroupsText, freeTextFiltering, filteringProperties, filteringOptions, i18nStrings, onLoadItems, onSubmit, onDismiss, tokensToCapture, onTokenCapture, onTokenRelease, tempGroup, onChangeTempGroup }) {
  var _a2;
  const [nextFocusIndex, setNextFocusIndex] = (0, import_react452.useState)(null);
  const tokenListRef = useListFocusController({
    nextFocusIndex,
    onFocusMoved: (target) => {
      target.focus();
      setNextFocusIndex(null);
    },
    listItemSelector: `.${styles_css_default157["token-editor-field-property"]}`,
    fallbackSelector: `.${styles_css_default157["token-editor-add-token"]}`
  });
  const groups = tempGroup.map((temporaryToken, index) => {
    const setTemporaryToken = (newToken) => {
      var _a3;
      const copy2 = [...tempGroup];
      copy2[index] = newToken;
      if (((_a3 = newToken.property) === null || _a3 === void 0 ? void 0 : _a3.getTokenType(newToken.operator)) === "enum" && newToken.value === null) {
        newToken.value = [];
      }
      onChangeTempGroup(copy2);
    };
    const property = temporaryToken.property;
    const onChangePropertyKey = (newPropertyKey) => {
      var _a3;
      const filteringProperty = filteringProperties.reduce((acc, property2) => property2.propertyKey === newPropertyKey ? property2 : acc, void 0);
      const allowedOperators = filteringProperty ? getAllowedOperators(filteringProperty) : freeTextFiltering.operators;
      const operator2 = temporaryToken.operator && allowedOperators.indexOf(temporaryToken.operator) !== -1 ? temporaryToken.operator : allowedOperators[0];
      const matchedProperty = (_a3 = filteringProperties.find((property2) => property2.propertyKey === newPropertyKey)) !== null && _a3 !== void 0 ? _a3 : null;
      setTemporaryToken(Object.assign(Object.assign({}, temporaryToken), { property: matchedProperty, operator: operator2, value: null }));
    };
    const operator = temporaryToken.operator;
    const onChangeOperator = (newOperator) => {
      const currentOperatorTokenType = property === null || property === void 0 ? void 0 : property.getTokenType(operator);
      const newOperatorTokenType = property === null || property === void 0 ? void 0 : property.getTokenType(newOperator);
      const shouldClearValue = currentOperatorTokenType !== newOperatorTokenType;
      const value2 = shouldClearValue ? null : temporaryToken.value;
      setTemporaryToken(Object.assign(Object.assign({}, temporaryToken), { operator: newOperator, value: value2 }));
    };
    const value = temporaryToken.value;
    const onChangeValue = (newValue) => {
      setTemporaryToken(Object.assign(Object.assign({}, temporaryToken), { value: newValue }));
    };
    return { token: temporaryToken, property, onChangePropertyKey, operator, onChangeOperator, value, onChangeValue };
  });
  return import_react452.default.createElement(
    "div",
    { className: styles_css_default157["token-editor"], ref: tokenListRef },
    import_react452.default.createElement(TokenEditorFields, { supportsGroups, tokens: groups.map((group) => group.token), onRemove: (index) => {
      const updated = tempGroup.filter((_, existingIndex) => existingIndex !== index);
      onChangeTempGroup(updated);
      setNextFocusIndex(index);
    }, onRemoveFromGroup: (index) => {
      const releasedToken = tempGroup[index];
      const updated = tempGroup.filter((_, existingIndex) => existingIndex !== index);
      onChangeTempGroup(updated);
      onTokenRelease(releasedToken);
      setNextFocusIndex(index);
    }, onSubmit, renderProperty: (index) => import_react452.default.createElement(PropertyInput, { property: groups[index].property, onChangePropertyKey: groups[index].onChangePropertyKey, asyncProps: asyncProperties ? asyncProps : null, filteringProperties, onLoadItems, customGroupsText, i18nStrings, freeTextFiltering }), renderOperator: (index) => import_react452.default.createElement(OperatorInput, { property: groups[index].property, operator: groups[index].operator, onChangeOperator: groups[index].onChangeOperator, i18nStrings, freeTextFiltering, triggerVariant: supportsGroups ? "label" : "option" }), renderValue: (index) => import_react452.default.createElement(ValueInput, { property: groups[index].property, operator: groups[index].operator, value: groups[index].value, onChangeValue: groups[index].onChangeValue, asyncProps, filteringOptions, onLoadItems, i18nStrings }), i18nStrings }),
    supportsGroups && import_react452.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default157["token-editor-add-token"], styles_css_default158["token-editor-token-add-actions"]) },
      import_react452.default.createElement(internal_default6, { variant: "normal", ariaLabel: i18nStrings.tokenEditorAddTokenActionsAriaLabel, items: tokensToCapture.map((token, index) => {
        var _a3, _b, _c, _d;
        return {
          id: index.toString(),
          text: (_b = (_a3 = i18nStrings.tokenEditorAddExistingTokenLabel) === null || _a3 === void 0 ? void 0 : _a3.call(i18nStrings, token)) !== null && _b !== void 0 ? _b : "",
          ariaLabel: (_d = (_c = i18nStrings.tokenEditorAddExistingTokenAriaLabel) === null || _c === void 0 ? void 0 : _c.call(i18nStrings, token)) !== null && _d !== void 0 ? _d : ""
        };
      }), onItemClick: ({ detail }) => {
        const index = parseInt(detail.id);
        if (!isNaN(index) && tokensToCapture[index]) {
          onChangeTempGroup([...tempGroup, Object.assign({}, tokensToCapture[index])]);
          setNextFocusIndex(groups.length);
          onTokenCapture(tokensToCapture[index]);
        }
      }, disabled: tokensToCapture.length === 0, showMainActionOnly: tokensToCapture.length === 0, mainAction: {
        text: (_a2 = i18nStrings.tokenEditorAddNewTokenLabel) !== null && _a2 !== void 0 ? _a2 : "",
        onClick: () => {
          var _a3;
          const lastTokenInGroup = tempGroup[tempGroup.length - 1];
          const property = lastTokenInGroup ? lastTokenInGroup.property : null;
          const operator = (_a3 = property === null || property === void 0 ? void 0 : property.defaultOperator) !== null && _a3 !== void 0 ? _a3 : ":";
          onChangeTempGroup([...tempGroup, { property, operator, value: null }]);
          setNextFocusIndex(groups.length);
        }
      } })
    ),
    import_react452.default.createElement(
      "div",
      { className: styles_css_default157["token-editor-actions"] },
      import_react452.default.createElement(
        "span",
        Object.assign({}, getAnalyticsMetadataAttribute({
          action: "editCancel"
        })),
        import_react452.default.createElement(internal_default3, { formAction: "none", variant: "link", className: clsx_m_default(styles_css_default157["token-editor-cancel"], styles_css_default158["token-editor-cancel"]), onClick: onDismiss }, i18nStrings.cancelActionText)
      ),
      import_react452.default.createElement(
        "span",
        Object.assign({}, getAnalyticsMetadataAttribute({
          action: "editConfirm"
        })),
        import_react452.default.createElement(internal_default3, { className: clsx_m_default(styles_css_default157["token-editor-submit"], styles_css_default158["token-editor-submit"]), formAction: "none", onClick: onSubmit }, i18nStrings.applyActionText)
      )
    )
  );
}
function TokenEditorFields({ tokens, supportsGroups, onRemove, onRemoveFromGroup, onSubmit, renderProperty, renderOperator, renderValue, i18nStrings }) {
  const isMobile = useMobile();
  const isNarrow = isMobile || !supportsGroups;
  const propertyLabelId = useUniqueId();
  const operatorLabelId = useUniqueId();
  const valueLabelId = useUniqueId();
  const headers = import_react452.default.createElement(
    "div",
    { className: styles_css_default157["token-editor-grid-group"] },
    import_react452.default.createElement("div", { id: propertyLabelId, className: styles_css_default157["token-editor-grid-header"] }, i18nStrings.propertyText),
    import_react452.default.createElement("div", { id: operatorLabelId, className: styles_css_default157["token-editor-grid-header"] }, i18nStrings.operatorText),
    import_react452.default.createElement("div", { id: valueLabelId, className: styles_css_default157["token-editor-grid-header"] }, i18nStrings.valueText),
    import_react452.default.createElement("div", { className: styles_css_default157["token-editor-grid-header"] })
  );
  return import_react452.default.createElement(
    "form",
    { className: clsx_m_default(styles_css_default157["token-editor-grid"], isNarrow && styles_css_default157["token-editor-narrow"], styles_css_default157["token-editor-form"]), onSubmit: (event) => {
      event.preventDefault();
      onSubmit();
    } },
    !isNarrow && headers,
    tokens.map((token, index) => {
      var _a2, _b, _c, _d, _e, _f;
      return import_react452.default.createElement(
        "div",
        { key: index, role: "group", "aria-label": i18nStrings.formatToken(token).formattedText, className: clsx_m_default(styles_css_default157["token-editor-grid-group"], supportsGroups && styles_css_default157["token-editor-supports-groups"]) },
        import_react452.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default157["token-editor-grid-cell"], isNarrow && styles_css_default157["token-editor-narrow"]) },
          import_react452.default.createElement(TokenEditorField, { isNarrow, label: i18nStrings.propertyText, labelId: propertyLabelId, className: clsx_m_default(styles_css_default157["token-editor-field-property"], styles_css_default158["token-editor-field-property"]), index }, renderProperty(index))
        ),
        import_react452.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default157["token-editor-grid-cell"], isNarrow && styles_css_default157["token-editor-narrow"]) },
          import_react452.default.createElement(TokenEditorField, { isNarrow, label: i18nStrings.operatorText, labelId: operatorLabelId, className: clsx_m_default(styles_css_default157["token-editor-field-operator"], styles_css_default158["token-editor-field-operator"]), index }, renderOperator(index))
        ),
        import_react452.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default157["token-editor-grid-cell"], isNarrow && styles_css_default157["token-editor-narrow"]) },
          import_react452.default.createElement(TokenEditorField, { isNarrow, label: i18nStrings.valueText, labelId: valueLabelId, className: clsx_m_default(styles_css_default157["token-editor-field-value"], styles_css_default158["token-editor-field-value"]), index }, renderValue(index))
        ),
        supportsGroups && import_react452.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default157["token-editor-grid-cell"], isNarrow && styles_css_default157["token-editor-narrow"]) },
          import_react452.default.createElement(
            "div",
            { className: styles_css_default157["token-editor-remove-token"] },
            import_react452.default.createElement(TokenEditorRemoveActions, { isNarrow, ariaLabel: (_b = (_a2 = i18nStrings.tokenEditorTokenActionsAriaLabel) === null || _a2 === void 0 ? void 0 : _a2.call(i18nStrings, token)) !== null && _b !== void 0 ? _b : "", mainActionAriaLabel: (_d = (_c = i18nStrings.tokenEditorTokenRemoveAriaLabel) === null || _c === void 0 ? void 0 : _c.call(i18nStrings, token)) !== null && _d !== void 0 ? _d : "", disabled: tokens.length === 1, items: [
              {
                id: "remove",
                text: (_e = i18nStrings.tokenEditorTokenRemoveLabel) !== null && _e !== void 0 ? _e : "",
                disabled: token.standaloneIndex !== void 0
              },
              { id: "remove-from-group", text: (_f = i18nStrings.tokenEditorTokenRemoveFromGroupLabel) !== null && _f !== void 0 ? _f : "" }
            ], onItemClick: (itemId) => {
              switch (itemId) {
                case "remove":
                  return onRemove(index);
                case "remove-from-group":
                  return onRemoveFromGroup(index);
              }
            }, index })
          )
        )
      );
    })
  );
}
function TokenEditorField({ isNarrow, label, labelId, children: children2, className: className2, index }) {
  return isNarrow ? import_react452.default.createElement(InternalFormField, { label, className: className2, stretch: true, "data-testindex": index }, children2) : import_react452.default.createElement(
    FormFieldContext.Provider,
    { value: { ariaLabelledby: labelId } },
    import_react452.default.createElement(InternalFormField, { className: className2, "data-testindex": index }, children2)
  );
}
function TokenEditorRemoveActions({ isNarrow, ariaLabel, mainActionAriaLabel, disabled, items, onItemClick, index }) {
  return isNarrow ? import_react452.default.createElement(internal_default6, { variant: "normal", ariaLabel, items: items.slice(1), onItemClick: ({ detail }) => onItemClick(detail.id), disabled, mainAction: {
    text: items[0].text,
    onClick: () => onItemClick(items[0].id),
    disabled,
    ariaLabel: mainActionAriaLabel
  }, className: styles_css_default158["token-editor-token-remove-actions"], "data-testindex": index }) : import_react452.default.createElement(internal_default6, { variant: "icon", ariaLabel, items, onItemClick: ({ detail }) => onItemClick(detail.id), disabled, className: styles_css_default158["token-editor-token-remove-actions"], "data-testindex": index });
}

// node_modules/@cloudscape-design/components/property-filter/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/property-filter/analytics-metadata/styles.scoped.css";
var styles_css_default160 = {
  "token-trigger": "awsui_token-trigger_1b6uy_xiape_5",
  "search-field": "awsui_search-field_1b6uy_xiape_6"
};

// node_modules/@cloudscape-design/components/property-filter/token.js
var TokenButton = ({ query, onUpdateToken, onUpdateOperation, onRemoveToken, tokenIndex, filteringProperties, filteringOptions, asyncProps, onLoadItems, i18nStrings, asyncProperties, hideOperations, readOnlyOperations, customGroupsText, disabled, freeTextFiltering, expandToViewport, enableTokenGroups }) => {
  var _a2, _b, _c, _d;
  const tokenRef = (0, import_react453.useRef)(null);
  const hasGroups = query.tokens.some((tokenOrGroup2) => "operation" in tokenOrGroup2);
  const first = tokenIndex === 0;
  const tokenOrGroup = query.tokens[tokenIndex];
  const tokens = tokenGroupToTokens([tokenOrGroup]).map((t2) => Object.assign(Object.assign({}, t2), { standaloneIndex: void 0 }));
  const operation = query.operation;
  const groupOperation = "operation" in tokenOrGroup ? tokenOrGroup.operation : operation === "and" ? "or" : "and";
  const [tempTokens, setTempTokens] = (0, import_react453.useState)(tokens);
  const capturedTokenIndices = tempTokens.map((token) => token.standaloneIndex).filter((index) => index !== void 0);
  const tokensToCapture = [];
  for (let index = 0; index < query.tokens.length; index++) {
    const token = query.tokens[index];
    if ("operator" in token && token !== tokenOrGroup && !capturedTokenIndices.includes(index)) {
      tokensToCapture.push(token);
    }
  }
  const [tempReleasedTokens, setTempReleasedTokens] = (0, import_react453.useState)([]);
  tokensToCapture.push(...tempReleasedTokens);
  return import_react453.default.createElement(filtering_token_default, Object.assign({ ref: tokenRef, tokens: tokens.map((token) => {
    const formattedToken = i18nStrings.formatToken(token);
    return {
      content: import_react453.default.createElement(
        "span",
        { className: clsx_m_default(styles_css_default157["token-trigger"], styles_css_default160["token-trigger"]) },
        import_react453.default.createElement(TokenTrigger, { token: formattedToken, allProperties: token.property === null })
      ),
      ariaLabel: formattedToken.formattedText,
      dismissAriaLabel: i18nStrings.removeTokenButtonAriaLabel(token)
    };
  }), showOperation: !first && !hideOperations, readOnlyOperations: !!readOnlyOperations, operation, andText: (_a2 = i18nStrings.operationAndText) !== null && _a2 !== void 0 ? _a2 : "", orText: (_b = i18nStrings.operationOrText) !== null && _b !== void 0 ? _b : "", operationAriaLabel: (_c = i18nStrings.tokenOperatorAriaLabel) !== null && _c !== void 0 ? _c : "", onChangeOperation: onUpdateOperation, onDismissToken: (removeIndex) => {
    if (tokens.length === 1) {
      onRemoveToken();
    } else {
      const newTokens = tokens.filter((_, index) => index !== removeIndex);
      const updatedToken = newTokens.length === 1 ? newTokens[0] : { operation: groupOperation, tokens: newTokens };
      onUpdateToken(updatedToken, []);
    }
  }, disabled, editorContent: import_react453.default.createElement(TokenEditor, { supportsGroups: enableTokenGroups, filteringProperties, filteringOptions, tempGroup: tempTokens, onChangeTempGroup: setTempTokens, tokensToCapture, onTokenCapture: (capturedToken) => setTempReleasedTokens((prev) => prev.filter((token) => token !== capturedToken)), onTokenRelease: (releasedToken) => {
    if (releasedToken.standaloneIndex === void 0) {
      setTempReleasedTokens((prev) => [...prev, releasedToken]);
    }
  }, asyncProps, onLoadItems, i18nStrings, asyncProperties, customGroupsText, freeTextFiltering, onDismiss: () => {
    var _a3;
    (_a3 = tokenRef.current) === null || _a3 === void 0 ? void 0 : _a3.closeEditor();
  }, onSubmit: () => {
    var _a3;
    const updatedToken = tempTokens.length === 1 ? tempTokens[0] : { operation: groupOperation, tokens: tempTokens };
    onUpdateToken(updatedToken, tempReleasedTokens);
    (_a3 = tokenRef.current) === null || _a3 === void 0 ? void 0 : _a3.closeEditor();
  } }), editorHeader: (_d = i18nStrings.editTokenHeader) !== null && _d !== void 0 ? _d : "", editorDismissAriaLabel: i18nStrings.dismissAriaLabel, editorExpandToViewport: !!expandToViewport, onEditorOpen: () => {
    setTempTokens(tokens);
    setTempReleasedTokens([]);
  }, groupOperation, onChangeGroupOperation: (operation2) => onUpdateToken({ operation: operation2, tokens }, []), groupAriaLabel: i18nStrings.groupAriaLabel({ operation: groupOperation, tokens }), groupEditAriaLabel: i18nStrings.groupEditAriaLabel({ operation: groupOperation, tokens }), hasGroups, popoverSize: enableTokenGroups ? "content" : "large" }, getAnalyticsMetadataAttribute({
    detail: {
      tokenPosition: `${tokenIndex + 1}`,
      tokenLabel: `.${styles_css_default160["token-trigger"]}`
    }
  })));
};
var TokenTrigger = ({ token: { propertyLabel, operator, value }, allProperties }) => {
  if (propertyLabel) {
    propertyLabel += " ";
  }
  const freeTextContainsToken = operator === ":" && allProperties;
  const operatorText = freeTextContainsToken ? "" : operator + " ";
  return import_react453.default.createElement(
    import_react453.default.Fragment,
    null,
    allProperties ? "" : propertyLabel,
    import_react453.default.createElement("span", { className: styles_css_default157["token-operator"] }, operatorText),
    value
  );
};

// node_modules/@cloudscape-design/components/property-filter/internal.js
var PropertyFilterInternal = import_react454.default.forwardRef((_a2, ref) => {
  var _b;
  var { disabled, countText, query, hideOperations, readOnlyOperations, onChange, filteringProperties, filteringOptions, customGroupsText, disableFreeTextFiltering, freeTextFiltering, onLoadItems, virtualScroll, customControl, customFilterActions, filteringPlaceholder, filteringAriaLabel, filteringEmpty, filteringLoadingText, filteringFinishedText, filteringErrorText, filteringRecoveryText, filteringConstraintText, filteringStatusType, asyncProperties, tokenLimit, expandToViewport, tokenLimitShowFewerAriaLabel, tokenLimitShowMoreAriaLabel, enableTokenGroups, loading = false, __internalRootRef } = _a2, rest = __rest(_a2, ["disabled", "countText", "query", "hideOperations", "readOnlyOperations", "onChange", "filteringProperties", "filteringOptions", "customGroupsText", "disableFreeTextFiltering", "freeTextFiltering", "onLoadItems", "virtualScroll", "customControl", "customFilterActions", "filteringPlaceholder", "filteringAriaLabel", "filteringEmpty", "filteringLoadingText", "filteringFinishedText", "filteringErrorText", "filteringRecoveryText", "filteringConstraintText", "filteringStatusType", "asyncProperties", "tokenLimit", "expandToViewport", "tokenLimitShowFewerAriaLabel", "tokenLimitShowMoreAriaLabel", "enableTokenGroups", "loading", "__internalRootRef"]);
  const [nextFocusIndex, setNextFocusIndex] = (0, import_react454.useState)(null);
  const tokenListRef = useListFocusController({
    nextFocusIndex,
    onFocusMoved: (target, targetType) => {
      var _a3;
      if (targetType === "fallback") {
        (_a3 = inputRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus({ preventDropdown: true });
      } else {
        target.focus();
      }
      setNextFocusIndex(null);
    },
    listItemSelector: `.${styles_css_default92["list-item"]}`,
    showMoreSelector: `.${styles_css_default92.toggle}`,
    fallbackSelector: `.${styles_css_default157.input}`
  });
  const mergedRef = useMergeRefs(tokenListRef, __internalRootRef);
  const inputRef = (0, import_react454.useRef)(null);
  const searchResultsRef = (0, import_react454.useRef)(null);
  const baseProps = getBaseProps(rest);
  const i18nStrings = usePropertyFilterI18n(rest.i18nStrings);
  (0, import_react454.useImperativeHandle)(ref, () => ({ focus: () => {
    var _a3;
    return (_a3 = inputRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
  } }), []);
  const [filteringText, setFilteringText] = (0, import_react454.useState)("");
  const { internalProperties, internalOptions, internalQuery, internalFreeText } = (() => {
    var _a3, _b2;
    const propertyByKey = filteringProperties.reduce((acc, property) => {
      var _a4, _b3, _c, _d, _e;
      const extendedOperators = ((_a4 = property === null || property === void 0 ? void 0 : property.operators) !== null && _a4 !== void 0 ? _a4 : []).reduce((acc2, operator) => typeof operator === "object" ? acc2.set(operator.operator, operator) : acc2, /* @__PURE__ */ new Map());
      acc.set(property.key, {
        propertyKey: property.key,
        propertyLabel: (_b3 = property === null || property === void 0 ? void 0 : property.propertyLabel) !== null && _b3 !== void 0 ? _b3 : "",
        groupValuesLabel: (_c = property === null || property === void 0 ? void 0 : property.groupValuesLabel) !== null && _c !== void 0 ? _c : "",
        propertyGroup: property === null || property === void 0 ? void 0 : property.group,
        operators: ((_d = property === null || property === void 0 ? void 0 : property.operators) !== null && _d !== void 0 ? _d : []).map((op) => typeof op === "string" ? op : op.operator),
        defaultOperator: (_e = property === null || property === void 0 ? void 0 : property.defaultOperator) !== null && _e !== void 0 ? _e : "=",
        getTokenType: (operator) => {
          var _a5, _b4;
          return operator ? (_b4 = (_a5 = extendedOperators.get(operator)) === null || _a5 === void 0 ? void 0 : _a5.tokenType) !== null && _b4 !== void 0 ? _b4 : "value" : "value";
        },
        getValueFormatter: (operator) => {
          var _a5, _b4;
          return operator ? (_b4 = (_a5 = extendedOperators.get(operator)) === null || _a5 === void 0 ? void 0 : _a5.format) !== null && _b4 !== void 0 ? _b4 : null : null;
        },
        getValueFormRenderer: (operator) => {
          var _a5, _b4;
          return operator ? (_b4 = (_a5 = extendedOperators.get(operator)) === null || _a5 === void 0 ? void 0 : _a5.form) !== null && _b4 !== void 0 ? _b4 : null : null;
        },
        externalProperty: property
      });
      return acc;
    }, /* @__PURE__ */ new Map());
    const getProperty = (propertyKey) => {
      var _a4;
      return (_a4 = propertyByKey.get(propertyKey)) !== null && _a4 !== void 0 ? _a4 : null;
    };
    const internalOptions2 = filteringOptions.map((option) => {
      var _a4, _b3, _c, _d;
      return {
        property: getProperty(option.propertyKey),
        value: option.value,
        label: (_b3 = (_a4 = option.label) !== null && _a4 !== void 0 ? _a4 : option.value) !== null && _b3 !== void 0 ? _b3 : "",
        tags: (_c = option.tags) !== null && _c !== void 0 ? _c : [],
        filteringTags: (_d = option.filteringTags) !== null && _d !== void 0 ? _d : []
      };
    });
    function transformToken(tokenOrGroup, standaloneIndex) {
      return "operation" in tokenOrGroup ? {
        operation: tokenOrGroup.operation,
        tokens: tokenOrGroup.tokens.map((token) => transformToken(token))
      } : {
        standaloneIndex,
        property: tokenOrGroup.propertyKey ? getProperty(tokenOrGroup.propertyKey) : null,
        operator: tokenOrGroup.operator,
        value: tokenOrGroup.value
      };
    }
    const internalQuery2 = {
      operation: query.operation,
      tokens: (enableTokenGroups && query.tokenGroups ? query.tokenGroups : query.tokens).map(transformToken)
    };
    const internalFreeText2 = {
      disabled: disableFreeTextFiltering,
      operators: (_a3 = freeTextFiltering === null || freeTextFiltering === void 0 ? void 0 : freeTextFiltering.operators) !== null && _a3 !== void 0 ? _a3 : [":", "!:"],
      defaultOperator: (_b2 = freeTextFiltering === null || freeTextFiltering === void 0 ? void 0 : freeTextFiltering.defaultOperator) !== null && _b2 !== void 0 ? _b2 : ":"
    };
    return { internalProperties: [...propertyByKey.values()], internalOptions: internalOptions2, internalQuery: internalQuery2, internalFreeText: internalFreeText2 };
  })();
  const countValue = (0, import_react454.useMemo)(() => {
    if (!countText || typeof countText !== "string") {
      return void 0;
    }
    const m3 = countText.match(/\d+/);
    return m3 ? parseInt(m3[0]) : void 0;
  }, [countText]);
  const tableComponentContext = useTableComponentsContext();
  (0, import_react454.useEffect)(() => {
    var _a3;
    if ((_a3 = tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.filterRef) === null || _a3 === void 0 ? void 0 : _a3.current) {
      const groupedTokens = tokenGroupToTokens(internalQuery.tokens);
      const filteredBy = groupedTokens.map((token) => {
        var _a4;
        return (_a4 = token.property) === null || _a4 === void 0 ? void 0 : _a4.propertyKey;
      }).filter((propertyKey) => typeof propertyKey === "string");
      tableComponentContext.filterRef.current.filterCount = countValue;
      tableComponentContext.filterRef.current.filteredBy = filteredBy;
      tableComponentContext.filterRef.current.filtered = groupedTokens.length > 0;
      return () => {
        var _a4, _b2, _c;
        (_a4 = tableComponentContext.filterRef.current) === null || _a4 === void 0 ? true : delete _a4.filterCount;
        (_b2 = tableComponentContext.filterRef.current) === null || _b2 === void 0 ? true : delete _b2.filteredBy;
        (_c = tableComponentContext.filterRef.current) === null || _c === void 0 ? true : delete _c.filtered;
      };
    }
  }, [tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.filterRef, countValue, internalQuery.tokens]);
  const { addToken, updateToken, updateOperation, removeToken, removeAllTokens } = getQueryActions({
    query: internalQuery,
    filteringOptions: internalOptions,
    onChange,
    enableTokenGroups
  });
  const parsedText = parseText(filteringText, internalProperties, internalFreeText);
  const autosuggestOptions = getAutosuggestOptions(parsedText, internalProperties, internalOptions, customGroupsText, i18nStrings);
  const createToken = (currentText) => {
    const parsedText2 = parseText(currentText, internalProperties, internalFreeText);
    let newToken;
    switch (parsedText2.step) {
      case "property": {
        newToken = {
          property: parsedText2.property,
          operator: parsedText2.operator,
          value: parsedText2.value
        };
        break;
      }
      case "free-text": {
        newToken = {
          property: null,
          operator: parsedText2.operator || internalFreeText.defaultOperator,
          value: parsedText2.value
        };
        break;
      }
      case "operator": {
        newToken = {
          property: null,
          operator: internalFreeText.defaultOperator,
          value: currentText
        };
        break;
      }
    }
    if (internalFreeText.disabled && !newToken.property) {
      return;
    }
    addToken(newToken);
    setFilteringText("");
  };
  const getLoadMoreDetail = (parsedText2, filteringText2) => {
    const loadMoreDetail2 = {
      filteringProperty: void 0,
      filteringText: filteringText2,
      filteringOperator: void 0
    };
    if (parsedText2.step === "property") {
      loadMoreDetail2.filteringProperty = parsedText2.property.externalProperty;
      loadMoreDetail2.filteringText = parsedText2.value;
      loadMoreDetail2.filteringOperator = parsedText2.operator;
    }
    return loadMoreDetail2;
  };
  const loadMoreDetail = getLoadMoreDetail(parsedText, filteringText);
  const inputLoadItemsHandlers = useLoadItems2(onLoadItems, loadMoreDetail.filteringText, loadMoreDetail.filteringProperty, loadMoreDetail.filteringText, loadMoreDetail.filteringOperator);
  const asyncProps = {
    empty: filteringEmpty,
    loadingText: filteringLoadingText,
    finishedText: filteringFinishedText,
    errorText: filteringErrorText,
    recoveryText: filteringRecoveryText,
    statusType: filteringStatusType
  };
  const asyncAutosuggestProps = !!filteringText.length || asyncProperties ? Object.assign(Object.assign({}, inputLoadItemsHandlers), asyncProps) : {};
  const handleSelected = (event) => {
    var _a3;
    const { detail: option } = event;
    const value = option.value || "";
    if (!value) {
      return;
    }
    if (!("keepOpenOnSelect" in option)) {
      createToken(value);
      return;
    }
    event.preventDefault();
    const parsedText2 = parseText(value, internalProperties, internalFreeText);
    const loadMoreDetail2 = getLoadMoreDetail(parsedText2, value);
    if (parsedText2.step === "operator") {
      const operators = getAllowedOperators(parsedText2.property);
      if (value.trim() === parsedText2.property.propertyLabel && operators.length === 1) {
        loadMoreDetail2.filteringProperty = (_a3 = parsedText2.property.externalProperty) !== null && _a3 !== void 0 ? _a3 : void 0;
        loadMoreDetail2.filteringOperator = operators[0];
        loadMoreDetail2.filteringText = "";
        setFilteringText(parsedText2.property.propertyLabel + " " + operators[0] + " ");
      }
    }
    fireNonCancelableEvent(onLoadItems, Object.assign(Object.assign({}, loadMoreDetail2), { firstPage: true, samePage: false }));
  };
  useDebounceSearchResultCallback({
    searchQuery: query,
    countText,
    loading,
    announceCallback: () => {
      var _a3;
      (_a3 = searchResultsRef.current) === null || _a3 === void 0 ? void 0 : _a3.reannounce();
    }
  });
  const propertyStep = parsedText.step === "property" ? parsedText : null;
  const customValueKey = propertyStep ? propertyStep.property.propertyKey + ":" + propertyStep.operator : "";
  const [customFormValueRecord, setCustomFormValueRecord] = (0, import_react454.useState)({});
  const customFormValue = customValueKey in customFormValueRecord ? customFormValueRecord[customValueKey] : null;
  const setCustomFormValue = (value) => setCustomFormValueRecord({ [customValueKey]: value });
  const operatorForm = propertyStep && propertyStep.property.getValueFormRenderer(propertyStep.operator);
  const isEnumValue = (propertyStep === null || propertyStep === void 0 ? void 0 : propertyStep.property.getTokenType(propertyStep.operator)) === "enum";
  const searchResultsId = useUniqueId("property-filter-search-results");
  const constraintTextId = useUniqueId("property-filter-constraint");
  const textboxAriaDescribedBy = filteringConstraintText ? joinStrings(rest.ariaDescribedby, constraintTextId) : rest.ariaDescribedby;
  const showResults = !!((_b = internalQuery.tokens) === null || _b === void 0 ? void 0 : _b.length) && !disabled && !!countText;
  return import_react454.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default157.root), ref: mergedRef }),
    import_react454.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default157["search-field"], styles_css_default160["search-field"]) },
      customControl && import_react454.default.createElement("div", { className: styles_css_default157["custom-control"] }, customControl),
      import_react454.default.createElement(
        "div",
        { className: styles_css_default157["input-wrapper"] },
        import_react454.default.createElement(property_filter_autosuggest_default, Object.assign({ ref: inputRef, virtualScroll, enteredTextLabel: i18nStrings.enteredTextLabel, ariaLabel: filteringAriaLabel !== null && filteringAriaLabel !== void 0 ? filteringAriaLabel : i18nStrings.filteringAriaLabel, placeholder: filteringPlaceholder !== null && filteringPlaceholder !== void 0 ? filteringPlaceholder : i18nStrings.filteringPlaceholder, ariaLabelledby: rest.ariaLabelledby, ariaDescribedby: textboxAriaDescribedBy, controlId: rest.controlId, value: filteringText, disabled }, autosuggestOptions, { onChange: (event) => setFilteringText(event.detail.value), empty: filteringEmpty }, asyncAutosuggestProps, { expandToViewport, onOptionClick: handleSelected, customForm: operatorForm || isEnumValue ? {
          content: operatorForm ? import_react454.default.createElement(PropertyEditorContentCustom, { key: customValueKey, property: propertyStep.property, operator: propertyStep.operator, filter: propertyStep.value, operatorForm, value: customFormValue, onChange: setCustomFormValue }) : import_react454.default.createElement(PropertyEditorContentEnum, { key: customValueKey, property: propertyStep.property, filter: propertyStep.value, value: customFormValue, onChange: setCustomFormValue, asyncProps, filteringOptions: internalOptions, onLoadItems: inputLoadItemsHandlers.onLoadItems }),
          footer: import_react454.default.createElement(PropertyEditorFooter, { key: customValueKey, property: propertyStep.property, operator: propertyStep.operator, value: customFormValue, i18nStrings, onCancel: () => {
            var _a3, _b2;
            setFilteringText("");
            (_a3 = inputRef.current) === null || _a3 === void 0 ? void 0 : _a3.close();
            (_b2 = inputRef.current) === null || _b2 === void 0 ? void 0 : _b2.focus({ preventDropdown: true });
          }, onSubmit: (token) => {
            var _a3, _b2;
            addToken(token);
            setFilteringText("");
            (_a3 = inputRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus({ preventDropdown: true });
            (_b2 = inputRef.current) === null || _b2 === void 0 ? void 0 : _b2.close();
          } })
        } : void 0, onCloseDropdown: () => setCustomFormValueRecord({}), hideEnteredTextOption: internalFreeText.disabled && parsedText.step !== "property", clearAriaLabel: i18nStrings.clearAriaLabel, searchResultsId: showResults ? searchResultsId : void 0 })),
        showResults ? import_react454.default.createElement(
          "div",
          { className: styles_css_default157.results },
          import_react454.default.createElement(SearchResults, { id: searchResultsId, renderLiveRegion: !loading, ref: searchResultsRef }, countText)
        ) : null
      )
    ),
    filteringConstraintText && import_react454.default.createElement("div", { id: constraintTextId, className: styles_css_default157.constraint }, filteringConstraintText),
    internalQuery.tokens && internalQuery.tokens.length > 0 && import_react454.default.createElement(
      "div",
      { className: styles_css_default157.tokens },
      import_react454.default.createElement(
        internal_default5,
        { size: "xs", direction: "horizontal" },
        import_react454.default.createElement(TokenList, { alignment: "inline", limit: tokenLimit, items: internalQuery.tokens, limitShowFewerAriaLabel: tokenLimitShowFewerAriaLabel, limitShowMoreAriaLabel: tokenLimitShowMoreAriaLabel, renderItem: (_, tokenIndex) => import_react454.default.createElement(TokenButton, { query: internalQuery, tokenIndex, onUpdateToken: (token, releasedTokens) => {
          updateToken(tokenIndex, token, releasedTokens);
        }, onUpdateOperation: updateOperation, onRemoveToken: () => {
          removeToken(tokenIndex);
          setNextFocusIndex(tokenIndex);
        }, filteringProperties: internalProperties, filteringOptions: internalOptions, asyncProps, onLoadItems, i18nStrings, asyncProperties, hideOperations, readOnlyOperations, customGroupsText, freeTextFiltering: internalFreeText, disabled, expandToViewport, enableTokenGroups }), i18nStrings: {
          limitShowFewer: i18nStrings.tokenLimitShowFewer,
          limitShowMore: i18nStrings.tokenLimitShowMore
        }, after: customFilterActions ? import_react454.default.createElement("div", { className: styles_css_default157["custom-filter-actions"] }, customFilterActions) : import_react454.default.createElement(
          "span",
          Object.assign({}, getAnalyticsMetadataAttribute({
            action: "clearFilters"
          })),
          import_react454.default.createElement(InternalButton, { formAction: "none", onClick: () => {
            var _a3;
            removeAllTokens();
            (_a3 = inputRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus({ preventDropdown: true });
          }, className: styles_css_default157["remove-all"], disabled }, i18nStrings.clearFiltersText)
        ) })
      )
    )
  );
});
var internal_default28 = PropertyFilterInternal;

// node_modules/@cloudscape-design/components/property-filter/index.js
var PropertyFilter = import_react455.default.forwardRef((_a2, ref) => {
  var _b;
  var { filteringProperties, filteringOptions = [], customGroupsText = [], enableTokenGroups = false, disableFreeTextFiltering = false, asyncProperties, expandToViewport, hideOperations = false, readOnlyOperations = false, tokenLimit, virtualScroll } = _a2, rest = __rest(_a2, ["filteringProperties", "filteringOptions", "customGroupsText", "enableTokenGroups", "disableFreeTextFiltering", "asyncProperties", "expandToViewport", "hideOperations", "readOnlyOperations", "tokenLimit", "virtualScroll"]);
  let hasCustomForms = false;
  let hasEnumTokens = false;
  let hasCustomFormatters = false;
  for (const property of filteringProperties) {
    for (const operator of (_b = property.operators) !== null && _b !== void 0 ? _b : []) {
      if (typeof operator === "object") {
        hasCustomForms = hasCustomForms || !!operator.form;
        hasEnumTokens = hasEnumTokens || operator.tokenType === "enum";
        hasCustomFormatters = hasCustomFormatters || !!operator.format;
      }
    }
  }
  const baseComponentProps = useBaseComponent("PropertyFilter", {
    props: {
      asyncProperties,
      disableFreeTextFiltering,
      enableTokenGroups,
      expandToViewport,
      hideOperations,
      readOnlyOperations,
      tokenLimit,
      virtualScroll
    },
    metadata: {
      hasCustomForms,
      hasEnumTokens,
      hasCustomFormatters
    }
  });
  const componentAnalyticsMetadata2 = {
    name: "awsui.PropertyFilter",
    label: `.${styles_css_default160["search-field"]} input`,
    properties: {
      disabled: `${!!rest.disabled}`,
      queryTokensCount: `${rest.query && rest.query.tokens ? rest.query.tokens.length : 0}`
    }
  };
  if (hideOperations && enableTokenGroups) {
    warnOnce("PropertyFilter", "Operations cannot be hidden when token groups are enabled.");
    hideOperations = false;
  }
  return import_react455.default.createElement(internal_default28, Object.assign({ ref }, baseComponentProps, { filteringProperties, filteringOptions, customGroupsText, enableTokenGroups, disableFreeTextFiltering, asyncProperties, expandToViewport, hideOperations, readOnlyOperations, tokenLimit, virtualScroll }, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 }), rest));
});
applyDisplayName(PropertyFilter, "PropertyFilter");
var property_filter_default = PropertyFilter;

// node_modules/@cloudscape-design/components/radio-group/index.js
var import_react457 = __toESM(require_react());

// node_modules/@cloudscape-design/components/radio-group/internal-do-not-use-core.js
var import_react456 = __toESM(require_react());
var RadioGroup = import_react456.default.forwardRef((props2, ref) => {
  const baseComponentProps = useBaseComponent("RadioGroup", { props: { readOnly: props2.readOnly } });
  return import_react456.default.createElement(internal_default20, Object.assign({ ref }, props2, baseComponentProps, getAnalyticsMetadataAttribute({
    component: {
      name: "awsui.RadioGroup",
      label: { root: "self" },
      properties: {
        value: `${props2.value}`
      }
    }
  })));
});
applyDisplayName(RadioGroup, "RadioGroup");
var internal_do_not_use_core_default11 = RadioGroup;

// node_modules/@cloudscape-design/components/radio-group/index.js
var RadioGroup2 = import_react457.default.forwardRef((props2, ref) => {
  validateProps("RadioGroup", props2, ["style"], {}, "console");
  return import_react457.default.createElement(internal_do_not_use_core_default11, { ref, ...props2 });
});
applyDisplayName(RadioGroup2, "RadioGroup");
var radio_group_default = RadioGroup2;

// node_modules/@cloudscape-design/components/s3-resource-selector/index.js
var import_react497 = __toESM(require_react());

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/index.js
var import_react460 = __toESM(require_react());

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/search-input.js
var import_react458 = __toESM(require_react());
var SearchInput = import_react458.default.forwardRef((props2, ref) => {
  const formFieldContext = useFormFieldContext(props2);
  return import_react458.default.createElement(internal_default12, Object.assign({ type: "search" }, props2, formFieldContext, { ref }));
});

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/use-versions-fetch.js
var import_react459 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/utils/promises.js
var PromiseCancelledSignal = class {
};
function makeCancellable(promise) {
  let cancelled = false;
  const wrapped = promise.then((value) => {
    if (cancelled) {
      throw new PromiseCancelledSignal();
    }
    return value;
  }, (err) => {
    if (cancelled) {
      throw new PromiseCancelledSignal();
    }
    throw err;
  });
  return {
    promise: wrapped,
    cancel: () => {
      cancelled = true;
    },
    isCancelled: () => cancelled
  };
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/validation.js
var SCHEME = "s3://";
var BUCKET_FIRST_CHAR = /^[a-z0-9]{1}/;
var CAPITAL_LETTER = /[A-Z]/;
var DNS_NAME = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/;
function checkBucketNameLength(bucketName) {
  return 3 <= bucketName.length && bucketName.length <= 63;
}
function extractBucketName(uri) {
  const [bucketName, ...rest] = uri.replace(SCHEME, "").split("/");
  return [bucketName, rest.join("/")];
}
function validate(uri) {
  if (uri === "") {
    return void 0;
  }
  if (uri.slice(0, SCHEME.length) !== SCHEME) {
    return "validationPathMustBegin";
  }
  const [bucketName] = extractBucketName(uri);
  if (!BUCKET_FIRST_CHAR.test(bucketName)) {
    return "validationBucketLowerCase";
  }
  if (CAPITAL_LETTER.test(bucketName)) {
    return "validationBucketMustNotContain";
  }
  if (!checkBucketNameLength(bucketName)) {
    return "validationBucketLength";
  }
  if (!DNS_NAME.test(bucketName)) {
    return "validationBucketMustComplyDns";
  }
  return void 0;
}
function getErrorText(i18n, i18nStrings, errorCode) {
  return errorCode ? i18n(`i18nStrings.${errorCode}`, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings[errorCode]) : void 0;
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/use-versions-fetch.js
function useVersionsFetch(fetchVersions) {
  const [loading, setLoading] = (0, import_react459.useState)(false);
  const [lastFetchedValue, setLastFetched] = (0, import_react459.useState)("");
  const [versions, setVersions] = (0, import_react459.useState)([]);
  const loadVersions = (uri) => {
    if (uri === lastFetchedValue) {
      return;
    }
    setLastFetched(uri);
    const errorCode = validate(uri);
    const [bucketName, prefix] = extractBucketName(uri);
    if (errorCode || !bucketName || !prefix || prefix.slice(-1) === "/") {
      return;
    }
    setLoading(true);
    const result = makeCancellable(fetchVersions(bucketName, prefix));
    result.promise.then((versions2) => {
      setLoading(false);
      setVersions(versions2.map((version) => ({
        value: version.VersionId,
        label: version.LastModified
      })));
    }, (err) => {
      if (!(err instanceof PromiseCancelledSignal)) {
        setLoading(false);
      }
    });
    return result;
  };
  return {
    loading,
    versions,
    resetVersions: () => setVersions([]),
    // this function is a dependency of useEffect
    loadVersions: useStableCallback(loadVersions)
  };
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/styles.scoped.css";
var styles_css_default161 = {
  "root": "awsui_root_1vtzr_1qv0p_9",
  "view-button": "awsui_view-button_1vtzr_1qv0p_13",
  "browse-button": "awsui_browse-button_1vtzr_1qv0p_17",
  "layout": "awsui_layout_1vtzr_1qv0p_21",
  "layout-uri": "awsui_layout-uri_1vtzr_1qv0p_33",
  "layout-version": "awsui_layout-version_1vtzr_1qv0p_37",
  "layout-divider": "awsui_layout-divider_1vtzr_1qv0p_42"
};

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-in-context/index.js
var S3InContext = import_react460.default.forwardRef(({ i18nStrings, inputPlaceholder, resource, viewHref, invalid, inputAriaDescribedby, selectableItemsTypes, fetchVersions, onChange, onBrowse }, ref) => {
  const i18n = useInternalI18n("s3-resource-selector");
  const isInputBlurredRef = (0, import_react460.useRef)(true);
  const [isInputTouched, setInputTouched] = (0, import_react460.useState)(false);
  const { versions, loading, loadVersions, resetVersions } = useVersionsFetch(fetchVersions);
  const inputRef = (0, import_react460.useRef)(null);
  useForwardFocus(ref, inputRef);
  const uri = resource.uri;
  const supportsVersions = selectableItemsTypes && selectableItemsTypes.indexOf("versions") > -1;
  const selectedVersion = versions.filter((version) => version.value === resource.versionId)[0] || null;
  function handleUriChange(event) {
    const uri2 = event.detail.value;
    const errorCode = isInputTouched ? validate(uri2) : void 0;
    resetVersions();
    onChange({ uri: uri2 }, getErrorText(i18n, i18nStrings, errorCode));
  }
  function handleUriBlur() {
    isInputBlurredRef.current = true;
    setInputTouched(true);
    const errorCode = validate(resource.uri);
    onChange(resource, getErrorText(i18n, i18nStrings, errorCode));
    if (supportsVersions) {
      loadVersions(resource.uri);
    }
  }
  (0, import_react460.useEffect)(() => {
    var _a2;
    if (!isInputBlurredRef.current || !supportsVersions) {
      return;
    }
    const { cancel } = (_a2 = loadVersions(uri)) !== null && _a2 !== void 0 ? _a2 : {};
    return cancel;
  }, [uri, supportsVersions, loadVersions]);
  return import_react460.default.createElement(
    "div",
    { className: styles_css_default161.root },
    import_react460.default.createElement(
      "div",
      { className: styles_css_default161.layout },
      import_react460.default.createElement(
        InternalFormField,
        { className: styles_css_default161["layout-uri"], label: i18n("i18nStrings.inContextUriLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextUriLabel), stretch: true },
        import_react460.default.createElement(SearchInput, { ref: inputRef, value: uri, ariaDescribedby: inputAriaDescribedby, clearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextInputClearAriaLabel, placeholder: inputPlaceholder !== null && inputPlaceholder !== void 0 ? inputPlaceholder : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextInputPlaceholder, onChange: handleUriChange, invalid, onFocus: () => isInputBlurredRef.current = false, onBlur: handleUriBlur })
      ),
      supportsVersions && import_react460.default.createElement(
        InternalFormField,
        { className: styles_css_default161["layout-version"], label: i18n("i18nStrings.inContextVersionSelectLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextVersionSelectLabel), stretch: true },
        import_react460.default.createElement(internal_default17, { selectedOption: selectedVersion, placeholder: i18n("i18nStrings.inContextSelectPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextSelectPlaceholder), disabled: versions.length === 0, options: versions, onChange: (event) => onChange(Object.assign(Object.assign({}, resource), { versionId: event.detail.selectedOption.value }), void 0), invalid: false })
      ),
      import_react460.default.createElement(
        "div",
        null,
        import_react460.default.createElement(InternalButton, { className: styles_css_default161["view-button"], disabled: !viewHref, href: viewHref, target: "_blank", iconName: "external", iconAlign: "right", formAction: "none", ariaLabel: i18n("i18nStrings.inContextViewButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextViewButtonAriaLabel) }, i18n("i18nStrings.inContextViewButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextViewButton))
      ),
      import_react460.default.createElement("div", { className: styles_css_default161["layout-divider"] }),
      import_react460.default.createElement(
        "div",
        null,
        import_react460.default.createElement(InternalButton, { className: styles_css_default161["browse-button"], disabled: loading, formAction: "none", onClick: onBrowse }, i18n("i18nStrings.inContextBrowseButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextBrowseButton))
      )
    ),
    import_react460.default.createElement(internal_default2, { assertive: true }, loading && import_react460.default.createElement(
      InternalBox,
      { margin: { top: "s" } },
      import_react460.default.createElement(StatusIndicator, { type: "loading" }, i18n("i18nStrings.inContextLoadingText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.inContextLoadingText))
    ))
  );
});

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/index.js
var import_react496 = __toESM(require_react());

// node_modules/@cloudscape-design/components/s3-resource-selector/utils.js
function joinObjectPath(segments) {
  return segments.reduce((prev, next) => {
    if (prev && prev[prev.length - 1] !== "/") {
      prev = prev + "/";
    }
    return prev + next;
  }, "");
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/buckets-table.js
var import_react493 = __toESM(require_react());

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/basic-table.js
var import_react492 = __toESM(require_react());

// node_modules/@cloudscape-design/collection-hooks/mjs/use-collection.js
var import_react462 = __toESM(require_react(), 1);

// node_modules/@cloudscape-design/collection-hooks/mjs/operations/filter.js
function defaultFilteringFunction(item, filteringText, filteringFields) {
  if (filteringText.length === 0) {
    return true;
  }
  filteringFields = filteringFields || Object.keys(item);
  const lowFilteringText = filteringText.toLowerCase();
  return filteringFields.some((key2) => {
    const value = item[key2];
    if (value && typeof value === "object") {
      return false;
    }
    return String(value).toLowerCase().indexOf(lowFilteringText) > -1;
  });
}
function createFilterPredicate(filtering, filteringText = "") {
  var _a2;
  if (!filtering) {
    return null;
  }
  const filteringFunction = (_a2 = filtering.filteringFunction) !== null && _a2 !== void 0 ? _a2 : defaultFilteringFunction;
  return (item) => filteringFunction(item, filteringText, filtering.fields);
}

// node_modules/@cloudscape-design/collection-hooks/mjs/date-utils/parse-iso-date.js
function parseIsoDate(isoDate) {
  if (typeof isoDate === "string") {
    if (isoDate.includes("T")) {
      return new Date(isoDate);
    } else {
      return /* @__PURE__ */ new Date(isoDate + "T00:00:00");
    }
  }
  return /* @__PURE__ */ new Date(NaN);
}

// node_modules/@cloudscape-design/collection-hooks/mjs/date-utils/compare-dates.js
function compareDates(date2, dateToCompare) {
  if (date2 instanceof Date && typeof dateToCompare === "string") {
    return startOfDay2(date2).getTime() - startOfDay2(parseIsoDate(dateToCompare)).getTime();
  }
  return NaN;
}
function compareTimestamps(date2, dateToCompare) {
  if (date2 instanceof Date && typeof dateToCompare === "string") {
    return date2.getTime() - parseIsoDate(dateToCompare).getTime();
  }
  return NaN;
}
function startOfDay2(date2) {
  const copy2 = new Date(date2.getTime());
  copy2.setHours(0, 0, 0, 0);
  return copy2;
}

// node_modules/@cloudscape-design/collection-hooks/mjs/logging.js
var isDevelopment3 = true;
var messageCache2 = /* @__PURE__ */ new Set();
function warnOnce2(message) {
  if (isDevelopment3) {
    const warning = `[AwsUi] collection-hooks ${message}`;
    if (!messageCache2.has(warning)) {
      messageCache2.add(warning);
      console.warn(warning);
    }
  }
}

// node_modules/@cloudscape-design/collection-hooks/mjs/operations/property-filter.js
var filterUsingOperator = (itemValue, { tokenValue, operator: { operator, match: match2, tokenType } }) => {
  if (match2 === "date" || match2 === "datetime") {
    return matchDateValue({ tokenValue, itemValue, operator, match: match2 });
  } else if (typeof match2 === "function") {
    return match2(itemValue, tokenValue);
  } else if (match2) {
    throw new Error("Unsupported `operator.match` type given.");
  }
  return matchPrimitiveValue({ tokenValue, itemValue, operator, tokenType });
};
function matchDateValue({ tokenValue, itemValue, operator, match: match2 }) {
  const comparator = match2 === "date" ? compareDates : compareTimestamps;
  const comparisonResult = comparator(itemValue, tokenValue);
  switch (operator) {
    case "<":
      return comparisonResult < 0;
    case "<=":
      return comparisonResult <= 0;
    case ">":
      return comparisonResult > 0;
    case ">=":
      return comparisonResult >= 0;
    case "=":
      return comparisonResult === 0;
    case "!=":
      return comparisonResult !== 0;
    default:
      warnOnce2(`Unsupported operator "${operator}" given for match="${match2}".`);
      return false;
  }
}
function matchPrimitiveValue({ tokenValue, itemValue, operator, tokenType }) {
  if (tokenType === "enum") {
    if (!tokenValue || !Array.isArray(tokenValue)) {
      warnOnce2('The token value must be an array when tokenType=="enum".');
      return false;
    }
    switch (operator) {
      case "=":
        return tokenValue && tokenValue.includes(itemValue);
      case "!=":
        return !tokenValue || !tokenValue.includes(itemValue);
      default:
        warnOnce2(`Unsupported operator "${operator}" given for tokenType=="enum".`);
        return false;
    }
  }
  switch (operator) {
    case "<":
      return itemValue < tokenValue;
    case "<=":
      return itemValue <= tokenValue;
    case ">":
      return itemValue > tokenValue;
    case ">=":
      return itemValue >= tokenValue;
    case "=":
      return itemValue == tokenValue;
    case "!=":
      return itemValue != tokenValue;
    case ":":
      return (itemValue + "").toLowerCase().indexOf((tokenValue + "").toLowerCase()) > -1;
    case "!:":
      return (itemValue + "").toLowerCase().indexOf((tokenValue + "").toLowerCase()) === -1;
    case "^":
      return (itemValue + "").toLowerCase().startsWith((tokenValue + "").toLowerCase());
    case "!^":
      return !(itemValue + "").toLowerCase().startsWith((tokenValue + "").toLowerCase());
    // The unsupported operators result in an exception being thrown.
    // The exception can be avoided if using the match function.
    default:
      throw new Error("Unsupported operator given.");
  }
}
function freeTextFilter(tokenValue, item, operator, filteringPropertiesMap) {
  const isNegation = operator.startsWith("!");
  return Object.keys(filteringPropertiesMap)[isNegation ? "every" : "some"]((propertyKey) => {
    const { operators } = filteringPropertiesMap[propertyKey];
    const propertyOperator = operators[operator];
    if (!propertyOperator) {
      return isNegation;
    }
    return filterUsingOperator(item[propertyKey], { tokenValue, operator: propertyOperator });
  });
}
function filterByToken(token, item, filteringPropertiesMap) {
  if (token.propertyKey) {
    if (!(token.propertyKey in filteringPropertiesMap) || !(token.operator in filteringPropertiesMap[token.propertyKey].operators)) {
      return false;
    }
    const property = filteringPropertiesMap[token.propertyKey];
    const operator = property.operators[token.operator];
    const itemValue = (operator === null || operator === void 0 ? void 0 : operator.match) ? item[token.propertyKey] : fixupFalsyValues(item[token.propertyKey]);
    return filterUsingOperator(itemValue, {
      tokenValue: token.value,
      operator: operator !== null && operator !== void 0 ? operator : { operator: token.operator }
    });
  }
  return freeTextFilter(token.value, item, token.operator, filteringPropertiesMap);
}
function defaultFilteringFunction2(filteringPropertiesMap) {
  return (item, query) => {
    var _a2;
    function evaluate(tokenOrGroup) {
      if ("operation" in tokenOrGroup) {
        let result = tokenOrGroup.operation === "and" ? true : !tokenOrGroup.tokens.length;
        for (const group of tokenOrGroup.tokens) {
          result = tokenOrGroup.operation === "and" ? result && evaluate(group) : result || evaluate(group);
        }
        return result;
      } else {
        return filterByToken(tokenOrGroup, item, filteringPropertiesMap);
      }
    }
    return evaluate({
      operation: query.operation,
      tokens: (_a2 = query.tokenGroups) !== null && _a2 !== void 0 ? _a2 : query.tokens
    });
  };
}
function createPropertyFilterPredicate(propertyFiltering, query = { tokens: [], operation: "and" }) {
  if (!propertyFiltering) {
    return null;
  }
  const filteringPropertiesMap = propertyFiltering.filteringProperties.reduce((acc, { key: key2, operators, defaultOperator }) => {
    const operatorMap = { [defaultOperator !== null && defaultOperator !== void 0 ? defaultOperator : "="]: { operator: defaultOperator !== null && defaultOperator !== void 0 ? defaultOperator : "=" } };
    operators === null || operators === void 0 ? void 0 : operators.forEach((op) => {
      if (typeof op === "string") {
        operatorMap[op] = { operator: op };
      } else {
        operatorMap[op.operator] = { operator: op.operator, match: op.match, tokenType: op.tokenType };
      }
    });
    acc[key2] = { operators: operatorMap };
    return acc;
  }, {});
  const filteringFunction = propertyFiltering.filteringFunction || defaultFilteringFunction2(filteringPropertiesMap);
  return (item) => filteringFunction(item, query);
}
var fixupFalsyValues = (value) => {
  if (typeof value === "boolean") {
    return value + "";
  }
  if (value || value === 0) {
    return value;
  }
  return "";
};

// node_modules/@cloudscape-design/collection-hooks/mjs/operations/sort.js
function getSorter(sortingField) {
  if (!sortingField) {
    return null;
  }
  return (row1, row2) => {
    var _a2, _b;
    const value1 = (_a2 = row1[sortingField]) !== null && _a2 !== void 0 ? _a2 : "";
    const value2 = (_b = row2[sortingField]) !== null && _b !== void 0 ? _b : "";
    if (typeof value1 === "string" && typeof value2 === "string") {
      return value1.localeCompare(value2);
    }
    return value1 < value2 ? -1 : value1 == value2 ? 0 : 1;
  };
}
function createComparator(sorting, state) {
  var _a2;
  if (!sorting || !state) {
    return null;
  }
  const direction = state.isDescending ? -1 : 1;
  const comparator = (_a2 = state.sortingColumn.sortingComparator) !== null && _a2 !== void 0 ? _a2 : getSorter(state.sortingColumn.sortingField);
  return comparator ? (a4, b2) => comparator(a4, b2) * direction : null;
}

// node_modules/@cloudscape-design/collection-hooks/mjs/operations/pagination.js
var DEFAULT_PAGE_SIZE = 10;
function createPageProps(pagination, currentPageIndex, items) {
  var _a2;
  if (!pagination) {
    return null;
  }
  const pageSize = (_a2 = pagination.pageSize) !== null && _a2 !== void 0 ? _a2 : DEFAULT_PAGE_SIZE;
  const pagesCount = Math.ceil(items.length / pageSize);
  let pageIndex = currentPageIndex !== null && currentPageIndex !== void 0 ? currentPageIndex : 1;
  if (pageIndex < 1 || pageIndex > pagesCount && !pagination.allowPageOutOfRange || Number.isNaN(pageIndex)) {
    pageIndex = 1;
  }
  return { pageSize, pagesCount, pageIndex };
}

// node_modules/@cloudscape-design/collection-hooks/mjs/operations/items-tree.js
var ItemsTree = class {
  constructor(items, treeProps) {
    var _a2;
    this.size = 0;
    this.hasNesting = false;
    this.roots = new Array();
    this.idToChildren = /* @__PURE__ */ new Map();
    this.filter = (predicate) => {
      if (!this.hasNesting) {
        this.items = this.items.filter(predicate);
        this.size = this.items.length;
      } else {
        this.filterTree(predicate);
      }
      return this;
    };
    this.sort = (comparator) => {
      if (!this.hasNesting) {
        this.items = this.items.slice().sort(comparator);
      } else {
        this.sortTree(comparator);
      }
      return this;
    };
    this.getChildren = (item) => {
      var _a3;
      return (_a3 = this.treeProps && this.idToChildren.get(this.treeProps.getId(item))) !== null && _a3 !== void 0 ? _a3 : [];
    };
    this.getItems = () => {
      if (this.hasNesting) {
        return this.roots;
      }
      return this.items;
    };
    this.getSize = () => {
      return this.size;
    };
    this.filterTree = (predicate) => {
      const filterNode = (item) => {
        const children2 = this.getChildren(item);
        const filteredChildren = children2.filter(filterNode);
        this.size -= children2.length - filteredChildren.length;
        this.setChildren(item, filteredChildren);
        return predicate(item) || filteredChildren.length > 0;
      };
      const roots = this.roots;
      this.roots = this.roots.filter(filterNode);
      this.size -= roots.length - this.roots.length;
    };
    this.sortTree = (comparator) => {
      const sortLevel = (items2) => {
        items2.sort(comparator);
        for (const item of items2) {
          sortLevel(this.getChildren(item));
        }
      };
      sortLevel(this.roots);
    };
    this.size = items.length;
    this.items = items;
    this.treeProps = treeProps;
    if (!treeProps) {
      return;
    }
    for (const item of items) {
      const parentId = treeProps.getParentId(item);
      if (parentId === null) {
        this.roots.push(item);
      } else {
        const children2 = (_a2 = this.idToChildren.get(parentId)) !== null && _a2 !== void 0 ? _a2 : [];
        children2.push(item);
        this.idToChildren.set(parentId, children2);
        this.hasNesting = true;
      }
    }
    const traverse = (item, level = 1) => {
      var _a3;
      for (const child of (_a3 = this.idToChildren.get(treeProps.getId(item))) !== null && _a3 !== void 0 ? _a3 : []) {
        traverse(child, level + 1);
      }
    };
    this.roots.forEach((root) => traverse(root));
  }
  setChildren(item, children2) {
    if (this.treeProps) {
      this.idToChildren.set(this.treeProps.getId(item), children2);
    }
  }
};

// node_modules/@cloudscape-design/collection-hooks/mjs/operations/compose-filters.js
function composeFilters(...predicates) {
  return predicates.some(Boolean) ? (item) => {
    for (const predicate of predicates) {
      if (predicate && !predicate(item)) {
        return false;
      }
    }
    return true;
  } : null;
}

// node_modules/@cloudscape-design/collection-hooks/mjs/operations/index.js
function processItems(items, { filteringText, sortingState, currentPageIndex, propertyFilteringQuery }, { filtering, sorting, pagination, propertyFiltering, expandableRows }) {
  const itemsTree = new ItemsTree(items, expandableRows);
  const filterPredicate = composeFilters(createPropertyFilterPredicate(propertyFiltering, propertyFilteringQuery), createFilterPredicate(filtering, filteringText));
  if (filterPredicate) {
    itemsTree.filter(filterPredicate);
  }
  const comparator = createComparator(sorting, sortingState);
  if (comparator) {
    itemsTree.sort(comparator);
  }
  const allPageItems = itemsTree.getItems();
  const filteredItemsCount = filterPredicate ? itemsTree.getSize() : void 0;
  const pageProps = createPageProps(pagination, currentPageIndex, allPageItems);
  if (pageProps) {
    return {
      items: allPageItems.slice((pageProps.pageIndex - 1) * pageProps.pageSize, pageProps.pageIndex * pageProps.pageSize),
      allPageItems,
      filteredItemsCount,
      pagesCount: pageProps === null || pageProps === void 0 ? void 0 : pageProps.pagesCount,
      actualPageIndex: pageProps === null || pageProps === void 0 ? void 0 : pageProps.pageIndex,
      itemsTree
    };
  }
  return {
    items: allPageItems,
    allPageItems,
    filteredItemsCount,
    pagesCount: void 0,
    actualPageIndex: void 0,
    itemsTree
  };
}
var getTrackableValue2 = (trackBy, item) => {
  if (!trackBy) {
    return item;
  }
  if (typeof trackBy === "function") {
    return trackBy(item);
  }
  return item[trackBy];
};
var processSelectedItems = (items, selectedItems, trackBy) => {
  const selectedSet = /* @__PURE__ */ new Set();
  selectedItems.forEach((item) => selectedSet.add(getTrackableValue2(trackBy, item)));
  return items.filter((item) => selectedSet.has(getTrackableValue2(trackBy, item)));
};
var itemsAreEqual = (items1, items2, trackBy) => {
  if (items1.length !== items2.length) {
    return false;
  }
  const set1 = /* @__PURE__ */ new Set();
  items1.forEach((item) => set1.add(getTrackableValue2(trackBy, item)));
  return items2.every((item) => set1.has(getTrackableValue2(trackBy, item)));
};

// node_modules/@cloudscape-design/collection-hooks/mjs/utils.js
function collectionReducer(state, action) {
  const newState = Object.assign({}, state);
  switch (action.type) {
    case "selection":
      newState.selectedItems = action.selectedItems;
      break;
    case "expansion":
      newState.expandedItems = action.expandedItems;
      break;
    case "filtering":
      newState.currentPageIndex = 1;
      newState.filteringText = action.filteringText;
      break;
    case "sorting":
      newState.currentPageIndex = 1;
      newState.sortingState = action.sortingState;
      break;
    case "pagination":
      newState.currentPageIndex = action.pageIndex;
      break;
    case "property-filtering":
      newState.currentPageIndex = 1;
      newState.propertyFilteringQuery = action.query;
      break;
  }
  return newState;
}
function createActions({ dispatch, collectionRef }) {
  return {
    setFiltering(filteringText) {
      var _a2;
      dispatch({ type: "filtering", filteringText });
      (_a2 = collectionRef.current) === null || _a2 === void 0 ? void 0 : _a2.scrollToTop();
    },
    setSorting(state) {
      var _a2;
      dispatch({ type: "sorting", sortingState: state });
      (_a2 = collectionRef.current) === null || _a2 === void 0 ? void 0 : _a2.scrollToTop();
    },
    setCurrentPage(pageIndex) {
      var _a2;
      dispatch({ type: "pagination", pageIndex });
      (_a2 = collectionRef.current) === null || _a2 === void 0 ? void 0 : _a2.scrollToTop();
    },
    setSelectedItems(selectedItems) {
      dispatch({ type: "selection", selectedItems });
    },
    setPropertyFiltering(query) {
      var _a2;
      dispatch({ type: "property-filtering", query });
      (_a2 = collectionRef.current) === null || _a2 === void 0 ? void 0 : _a2.scrollToTop();
    },
    setExpandedItems(expandedItems) {
      dispatch({ type: "expansion", expandedItems });
    }
  };
}
function createSyncProps(options, { filteringText, sortingState, selectedItems, expandedItems, currentPageIndex, propertyFilteringQuery }, actions, collectionRef, { pagesCount, actualPageIndex, allItems, allPageItems, itemsTree }) {
  var _a2, _b, _c, _d, _e;
  let empty = options.filtering ? allItems.length ? options.filtering.noMatch : options.filtering.empty : null;
  empty = options.propertyFiltering ? allItems.length ? options.propertyFiltering.noMatch : options.propertyFiltering.empty : empty;
  const filteringOptions = options.propertyFiltering ? options.propertyFiltering.filteringProperties.reduce((acc, property) => {
    Object.keys(allItems.reduce((acc2, item) => {
      acc2["" + fixupFalsyValues(item[property.key])] = true;
      return acc2;
    }, {})).forEach((value) => {
      if (value !== "") {
        acc.push({
          propertyKey: property.key,
          value
        });
      }
    });
    return acc;
  }, []) : [];
  return {
    collectionProps: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ empty }, options.sorting ? {
      onSortingChange: ({ detail }) => {
        actions.setSorting(detail);
      },
      sortingColumn: sortingState === null || sortingState === void 0 ? void 0 : sortingState.sortingColumn,
      sortingDescending: sortingState === null || sortingState === void 0 ? void 0 : sortingState.isDescending
    } : {}), options.expandableRows ? {
      expandableRows: {
        getItemChildren(item) {
          return itemsTree.getChildren(item);
        },
        isItemExpandable(item) {
          return itemsTree.getChildren(item).length > 0;
        },
        expandedItems,
        onExpandableItemToggle: ({ detail: { item, expanded } }) => {
          const getId = options.expandableRows.getId;
          if (expanded) {
            for (const stateItem of expandedItems) {
              if (getId(stateItem) === getId(item)) {
                return;
              }
            }
            actions.setExpandedItems([...expandedItems, item]);
          } else {
            actions.setExpandedItems(expandedItems.filter((stateItem) => getId(stateItem) !== getId(item)));
          }
        }
      },
      // The trackBy property is used to match expanded items by ID and not by object reference.
      // The property can be overridden by the explicitly provided selection.trackBy.
      // If that is the case, we assume both selection.trackBy and expandableRows.getId have the same result.
      // If not, the expandable state won't be matched correctly by the table.
      trackBy: options.expandableRows.getId
    } : {}), options.selection ? {
      onSelectionChange: ({ detail: { selectedItems: selectedItems2 } }) => {
        actions.setSelectedItems(selectedItems2);
      },
      selectedItems,
      trackBy: (_a2 = options.selection.trackBy) !== null && _a2 !== void 0 ? _a2 : (_b = options.expandableRows) === null || _b === void 0 ? void 0 : _b.getId
    } : {}), { ref: collectionRef, firstIndex: 1, totalItemsCount: allPageItems.length }), ((_c = options.pagination) === null || _c === void 0 ? void 0 : _c.pageSize) ? {
      firstIndex: ((actualPageIndex !== null && actualPageIndex !== void 0 ? actualPageIndex : currentPageIndex) - 1) * options.pagination.pageSize + 1
    } : {}),
    filterProps: {
      filteringText,
      onChange: ({ detail: { filteringText: filteringText2 } }) => {
        actions.setFiltering(filteringText2);
      }
    },
    propertyFilterProps: {
      query: propertyFilteringQuery,
      onChange: ({ detail: query }) => {
        actions.setPropertyFiltering(query);
      },
      filteringProperties: ((_d = options.propertyFiltering) === null || _d === void 0 ? void 0 : _d.filteringProperties) || [],
      filteringOptions,
      freeTextFiltering: (_e = options.propertyFiltering) === null || _e === void 0 ? void 0 : _e.freeTextFiltering
    },
    paginationProps: {
      currentPageIndex: actualPageIndex !== null && actualPageIndex !== void 0 ? actualPageIndex : currentPageIndex,
      // pagesCount is always calculated when options.pagination is present
      pagesCount,
      onChange: ({ detail: { currentPageIndex: currentPageIndex2 } }) => {
        actions.setCurrentPage(currentPageIndex2);
      }
    }
  };
}

// node_modules/@cloudscape-design/collection-hooks/mjs/use-collection-state.js
var import_react461 = __toESM(require_react(), 1);
function useCollectionState(options, collectionRef) {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
  const [state, dispatch] = (0, import_react461.useReducer)(collectionReducer, {
    selectedItems: (_b = (_a2 = options.selection) === null || _a2 === void 0 ? void 0 : _a2.defaultSelectedItems) !== null && _b !== void 0 ? _b : [],
    expandedItems: (_d = (_c = options.expandableRows) === null || _c === void 0 ? void 0 : _c.defaultExpandedItems) !== null && _d !== void 0 ? _d : [],
    sortingState: (_e = options.sorting) === null || _e === void 0 ? void 0 : _e.defaultState,
    currentPageIndex: (_g = (_f = options.pagination) === null || _f === void 0 ? void 0 : _f.defaultPage) !== null && _g !== void 0 ? _g : 1,
    filteringText: (_j = (_h = options.filtering) === null || _h === void 0 ? void 0 : _h.defaultFilteringText) !== null && _j !== void 0 ? _j : "",
    propertyFilteringQuery: (_l = (_k = options.propertyFiltering) === null || _k === void 0 ? void 0 : _k.defaultQuery) !== null && _l !== void 0 ? _l : { tokens: [], operation: "and" }
  });
  const actions = (0, import_react461.useMemo)(() => createActions({ dispatch, collectionRef }), [dispatch, collectionRef]);
  return [state, actions];
}

// node_modules/@cloudscape-design/collection-hooks/mjs/use-collection.js
function useCollection(allItems, options) {
  const collectionRef = (0, import_react462.useRef)(null);
  const [state, actions] = useCollectionState(options, collectionRef);
  const { items, allPageItems, pagesCount, filteredItemsCount, actualPageIndex, itemsTree } = processItems(allItems, state, options);
  const expandedItemsSet = /* @__PURE__ */ new Set();
  if (options.expandableRows) {
    for (const item of state.expandedItems) {
      expandedItemsSet.add(options.expandableRows.getId(item));
    }
  }
  let visibleItems = items;
  if (options.expandableRows) {
    const flatItems = new Array();
    const getId = options.expandableRows.getId;
    const traverse = (items2) => {
      for (const item of items2) {
        flatItems.push(item);
        if (expandedItemsSet.has(getId(item))) {
          traverse(itemsTree.getChildren(item));
        }
      }
    };
    traverse(items);
    visibleItems = flatItems;
  }
  if (options.selection && !options.selection.keepSelection) {
    const newSelectedItems = processSelectedItems(visibleItems, state.selectedItems, options.selection.trackBy);
    if (!itemsAreEqual(newSelectedItems, state.selectedItems, options.selection.trackBy)) {
      actions.setSelectedItems(newSelectedItems);
    }
  }
  if (options.expandableRows) {
    const newExpandedItems = visibleItems.filter((item) => expandedItemsSet.has(options.expandableRows.getId(item)));
    if (!itemsAreEqual(newExpandedItems, state.expandedItems, options.expandableRows.getId)) {
      actions.setExpandedItems(newExpandedItems);
    }
  }
  return Object.assign({
    items,
    allPageItems,
    filteredItemsCount,
    actions
  }, createSyncProps(options, state, actions, collectionRef, {
    actualPageIndex,
    pagesCount,
    allItems,
    allPageItems,
    itemsTree
  }));
}

// node_modules/@cloudscape-design/components/table/internal.js
var import_react490 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/hooks/use-scroll-sync/index.js
var import_react463 = __toESM(require_react());
function useScrollSync(refs) {
  const activeElement = (0, import_react463.useRef)(null);
  return (event) => {
    const targetElement = event.currentTarget;
    if (targetElement && (activeElement.current === null || activeElement.current === targetElement)) {
      requestAnimationFrame(() => {
        activeElement.current = targetElement;
        refs.forEach((ref) => {
          const element = ref.current;
          if (element && element !== targetElement) {
            element.scrollLeft = targetElement.scrollLeft;
          }
        });
        requestAnimationFrame(() => {
          activeElement.current = null;
        });
      });
    }
  };
}

// node_modules/@cloudscape-design/components/internal/hooks/use-table-interaction-metrics/index.js
var import_react464 = __toESM(require_react());
var USER_ACTION_TIME_LIMIT = 1e3;
function useTableInteractionMetrics({ elementRef, items, itemCount, instanceIdentifier, getComponentIdentifier, getComponentConfiguration, loading = false, interactionMetadata }) {
  const taskInteractionId = useRandomId();
  const tableInteractionAttributes = useDOMAttribute(elementRef, "data-analytics-task-interaction-id", taskInteractionId);
  const { isInFunnel } = useFunnel();
  const lastUserAction = (0, import_react464.useRef)(null);
  const capturedUserAction = (0, import_react464.useRef)(null);
  const loadingStartTime = (0, import_react464.useRef)(null);
  const metadata = (0, import_react464.useRef)({ itemCount, getComponentIdentifier, getComponentConfiguration, interactionMetadata });
  metadata.current = { itemCount, getComponentIdentifier, getComponentConfiguration, interactionMetadata };
  (0, import_react464.useEffect)(() => {
    if (isInFunnel) {
      return;
    }
    ComponentMetrics.componentMounted({
      taskInteractionId,
      componentName: "table",
      componentConfiguration: metadata.current.getComponentConfiguration()
    });
  }, [taskInteractionId, isInFunnel]);
  (0, import_react464.useEffect)(() => {
    if (loading) {
      loadingStartTime.current = performance.now();
      if (lastUserAction.current && lastUserAction.current.time > performance.now() - USER_ACTION_TIME_LIMIT) {
        capturedUserAction.current = lastUserAction.current.name;
      } else {
        capturedUserAction.current = null;
      }
    }
  }, [loading]);
  useEffectOnUpdate2(() => {
    var _a2;
    if (!loading && loadingStartTime.current !== null) {
      const loadingDuration = performance.now() - loadingStartTime.current;
      loadingStartTime.current = null;
      PerformanceMetrics.tableInteraction({
        userAction: (_a2 = capturedUserAction.current) !== null && _a2 !== void 0 ? _a2 : "",
        interactionTime: Math.round(loadingDuration),
        interactionMetadata: metadata.current.interactionMetadata(),
        componentIdentifier: metadata.current.getComponentIdentifier(),
        instanceIdentifier,
        noOfResourcesInTable: metadata.current.itemCount
      });
    }
  }, [instanceIdentifier, loading, taskInteractionId, isInFunnel]);
  const debouncedUpdated = useDebounceCallback(() => {
    var _a2, _b;
    ComponentMetrics.componentUpdated({
      taskInteractionId,
      componentName: "table",
      actionType: (_b = (_a2 = lastUserAction.current) === null || _a2 === void 0 ? void 0 : _a2.name) !== null && _b !== void 0 ? _b : "",
      componentConfiguration: metadata.current.getComponentConfiguration()
    });
  });
  useEffectOnUpdate2(() => {
    if (isInFunnel || loading) {
      return;
    }
    debouncedUpdated();
  }, [taskInteractionId, isInFunnel, loading, items, debouncedUpdated]);
  return {
    tableInteractionAttributes,
    setLastUserAction: (name) => void (lastUserAction.current = { name, time: performance.now() })
  };
}

// node_modules/@cloudscape-design/components/table/body-cell/index.js
var import_react473 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/body-cell/disabled-inline-editor.js
var import_react471 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/body-cell/click-away.js
var import_react465 = __toESM(require_react());
function useClickAway(onClick) {
  const awayRef = (0, import_react465.useRef)(null);
  const onClickStable = useStableCallback(onClick);
  (0, import_react465.useEffect)(() => {
    function handleClick(event) {
      if (!nodeBelongs2(awayRef.current, event.target)) {
        onClickStable();
      }
    }
    document.addEventListener("click", handleClick, { capture: true });
    return () => document.removeEventListener("click", handleClick, { capture: true });
  }, [onClickStable]);
  return awayRef;
}

// node_modules/@cloudscape-design/components/table/body-cell/td-element.js
var import_react470 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/expand-toggle-button/index.js
var import_react466 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/expand-toggle-button/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/expand-toggle-button/styles.scoped.css";
var styles_css_default162 = {
  "expand-toggle-icon": "awsui_expand-toggle-icon_1xe88_1hyl4_153",
  "expand-toggle-icon-expanded": "awsui_expand-toggle-icon-expanded_1xe88_1hyl4_174",
  "expand-toggle": "awsui_expand-toggle_1xe88_1hyl4_153",
  "disable-focus-highlight": "awsui_disable-focus-highlight_1xe88_1hyl4_225"
};

// node_modules/@cloudscape-design/components/internal/components/expand-toggle-button/index.js
function ExpandToggleButton({ isExpanded, onExpandableItemToggle, expandButtonLabel, collapseButtonLabel, customIcon, className: className2, disableFocusHighlight }) {
  const buttonRef = (0, import_react466.useRef)(null);
  const { tabIndex } = useSingleTabStopNavigation(buttonRef);
  return import_react466.default.createElement("button", { type: "button", ref: buttonRef, tabIndex, "aria-label": isExpanded ? collapseButtonLabel : expandButtonLabel, "aria-expanded": isExpanded, className: clsx_m_default(styles_css_default162["expand-toggle"], disableFocusHighlight && styles_css_default162["disable-focus-highlight"], className2), onClick: onExpandableItemToggle }, customIcon !== null && customIcon !== void 0 ? customIcon : import_react466.default.createElement(internal_default, { size: "small", name: "caret-down-filled", className: clsx_m_default(styles_css_default162["expand-toggle-icon"], isExpanded && styles_css_default162["expand-toggle-icon-expanded"]) }));
}

// node_modules/@cloudscape-design/components/table/sticky-columns/use-sticky-columns.js
var import_react467 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/sticky-columns/utils.js
function isCellStatesEqual(s1, s22) {
  if (s1 && s22) {
    return s1.padInlineStart === s22.padInlineStart && s1.lastInsetInlineStart === s22.lastInsetInlineStart && s1.lastInsetInlineEnd === s22.lastInsetInlineEnd && s1.offset.insetInlineStart === s22.offset.insetInlineStart && s1.offset.insetInlineEnd === s22.offset.insetInlineEnd;
  }
  return s1 === s22;
}
function isWrapperStatesEqual(s1, s22) {
  return s1.scrollPaddingInlineStart === s22.scrollPaddingInlineStart && s1.scrollPaddingInlineEnd === s22.scrollPaddingInlineEnd;
}
function updateCellOffsets(cells, props2) {
  var _a2, _b, _c, _d;
  const totalColumns = props2.visibleColumns.length;
  const firstColumnsWidths = [];
  for (let i2 = 0; i2 < Math.min(totalColumns, props2.stickyColumnsFirst); i2++) {
    const element = cells.get(props2.visibleColumns[i2]);
    const cellWidth = element ? getLogicalBoundingClientRect(element).inlineSize : 0;
    firstColumnsWidths[i2] = ((_a2 = firstColumnsWidths[i2 - 1]) !== null && _a2 !== void 0 ? _a2 : 0) + cellWidth;
  }
  const lastColumnsWidths = [];
  for (let i2 = 0; i2 < Math.min(totalColumns, props2.stickyColumnsLast); i2++) {
    const element = cells.get(props2.visibleColumns[totalColumns - 1 - i2]);
    const cellWidth = element ? getLogicalBoundingClientRect(element).inlineSize : 0;
    lastColumnsWidths[i2] = ((_b = lastColumnsWidths[i2 - 1]) !== null && _b !== void 0 ? _b : 0) + cellWidth;
  }
  const stickyWidthInlineStart = (_c = firstColumnsWidths[props2.stickyColumnsFirst - 1]) !== null && _c !== void 0 ? _c : 0;
  const stickyWidthInlineEnd = (_d = lastColumnsWidths[props2.stickyColumnsLast - 1]) !== null && _d !== void 0 ? _d : 0;
  const offsets = props2.visibleColumns.reduce((map3, columnId, columnIndex) => {
    var _a3, _b2;
    return map3.set(columnId, {
      first: (_a3 = firstColumnsWidths[columnIndex - 1]) !== null && _a3 !== void 0 ? _a3 : 0,
      last: (_b2 = lastColumnsWidths[totalColumns - 1 - columnIndex - 1]) !== null && _b2 !== void 0 ? _b2 : 0
    });
  }, /* @__PURE__ */ new Map());
  return { offsets, stickyWidthInlineStart, stickyWidthInlineEnd };
}

// node_modules/@cloudscape-design/components/table/sticky-columns/use-sticky-columns.js
var MINIMUM_SCROLLABLE_SPACE = 148;
function useStickyColumns({ visibleColumns, stickyColumnsFirst, stickyColumnsLast }) {
  const store = (0, import_react467.useMemo)(() => new StickyColumnsStore(), []);
  const wrapperRef = (0, import_react467.useRef)(null);
  const tableRef = (0, import_react467.useRef)(null);
  const cellsRef = (0, import_react467.useRef)(/* @__PURE__ */ new Map());
  const hasStickyColumns = stickyColumnsFirst + stickyColumnsLast > 0;
  const updateStickyStyles = useStableCallback(() => {
    if (wrapperRef.current && tableRef.current) {
      store.updateCellStyles({
        wrapper: wrapperRef.current,
        table: tableRef.current,
        cells: cellsRef.current,
        visibleColumns,
        stickyColumnsFirst,
        stickyColumnsLast
      });
    }
  });
  useResizeObserver(wrapperRef, updateStickyStyles);
  useResizeObserver(tableRef, updateStickyStyles);
  (0, import_react467.useEffect)(() => {
    if (wrapperRef.current && tableRef.current) {
      store.updateCellStyles({
        wrapper: wrapperRef.current,
        table: tableRef.current,
        cells: cellsRef.current,
        visibleColumns,
        stickyColumnsFirst,
        stickyColumnsLast
      });
    }
  }, [store, stickyColumnsFirst, stickyColumnsLast, visibleColumns]);
  (0, import_react467.useEffect)(() => {
    if (!hasStickyColumns) {
      return;
    }
    const selector = (state) => state.wrapperState;
    const updateWrapperStyles = (state, prev) => {
      if (isWrapperStatesEqual(state, prev)) {
        return;
      }
      if (wrapperRef.current) {
        wrapperRef.current.style.scrollPaddingInlineStart = state.scrollPaddingInlineStart + "px";
        wrapperRef.current.style.scrollPaddingInlineEnd = state.scrollPaddingInlineEnd + "px";
      }
    };
    const unsubscribe = store.subscribe(selector, (newState, prevState) => updateWrapperStyles(selector(newState), selector(prevState)));
    return unsubscribe;
  }, [store, hasStickyColumns]);
  const setWrapper = (0, import_react467.useCallback)((node) => {
    if (wrapperRef.current) {
      wrapperRef.current.removeEventListener("scroll", updateStickyStyles);
    }
    if (node && hasStickyColumns) {
      node.addEventListener("scroll", updateStickyStyles);
    }
    wrapperRef.current = node;
  }, [hasStickyColumns, updateStickyStyles]);
  const setTable = (0, import_react467.useCallback)((node) => {
    tableRef.current = node;
  }, []);
  const setCell = (0, import_react467.useCallback)((columnId, node) => {
    if (node) {
      cellsRef.current.set(columnId, node);
    } else {
      cellsRef.current.delete(columnId);
    }
  }, []);
  return {
    store,
    style: {
      // Provide wrapper styles as props so that a re-render won't cause invalidation.
      wrapper: hasStickyColumns ? Object.assign({}, store.get().wrapperState) : void 0
    },
    refs: { wrapper: setWrapper, table: setTable, cell: setCell }
  };
}
function useStickyCellStyles({ stickyColumns, columnId, getClassName: getClassName4 }) {
  var _a2;
  const setCell = stickyColumns.refs.cell;
  const unsubscribeRef = (0, import_react467.useRef)(null);
  const refCallback = (0, import_react467.useCallback)(
    (cellElement) => {
      if (unsubscribeRef.current) {
        unsubscribeRef.current();
      }
      setCell(columnId, cellElement);
      const selector = (state) => {
        var _a3;
        return (_a3 = state.cellState.get(columnId)) !== null && _a3 !== void 0 ? _a3 : null;
      };
      const updateCellStyles = (state, prev) => {
        if (isCellStatesEqual(state, prev)) {
          return;
        }
        const className2 = getClassName4(state);
        if (cellElement) {
          Object.keys(className2).forEach((key2) => {
            if (className2[key2]) {
              cellElement.classList.add(key2);
            } else {
              cellElement.classList.remove(key2);
            }
          });
          cellElement.style.insetInlineStart = (state === null || state === void 0 ? void 0 : state.offset.insetInlineStart) !== void 0 ? `${state.offset.insetInlineStart}px` : "";
          cellElement.style.insetInlineEnd = (state === null || state === void 0 ? void 0 : state.offset.insetInlineEnd) !== void 0 ? `${state.offset.insetInlineEnd}px` : "";
        }
      };
      if (cellElement) {
        unsubscribeRef.current = stickyColumns.store.subscribe(selector, (newState, prevState) => {
          updateCellStyles(selector(newState), selector(prevState));
        });
      }
    },
    // getClassName is expected to be pure
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [columnId, setCell, stickyColumns.store]
  );
  const cellStyles = stickyColumns.store.get().cellState.get(columnId);
  return {
    ref: refCallback,
    className: cellStyles ? clsx_m_default(getClassName4(cellStyles)) : void 0,
    style: (_a2 = cellStyles === null || cellStyles === void 0 ? void 0 : cellStyles.offset) !== null && _a2 !== void 0 ? _a2 : void 0
  };
}
var StickyColumnsStore = class extends AsyncStore {
  constructor() {
    super({ cellState: /* @__PURE__ */ new Map(), wrapperState: { scrollPaddingInlineStart: 0, scrollPaddingInlineEnd: 0 } });
    this.cellOffsets = {
      offsets: /* @__PURE__ */ new Map(),
      stickyWidthInlineStart: 0,
      stickyWidthInlineEnd: 0
    };
    this.isStuckToTheInlineStart = false;
    this.isStuckToTheInlineEnd = false;
    this.padInlineStart = false;
    this.generateCellStyles = (props2) => {
      const isEnabled = this.isEnabled(props2);
      const lastLeftStickyColumnIndex = props2.stickyColumnsFirst - 1;
      const lastRightStickyColumnIndex = props2.visibleColumns.length - props2.stickyColumnsLast;
      return props2.visibleColumns.reduce((acc, columnId, index) => {
        var _a2, _b, _c, _d;
        let stickySide = "non-sticky";
        if (index < props2.stickyColumnsFirst) {
          stickySide = "inline-start";
        } else if (index >= props2.visibleColumns.length - props2.stickyColumnsLast) {
          stickySide = "inline-end";
        }
        if (!isEnabled || stickySide === "non-sticky") {
          return acc;
        }
        const isFirstColumn = index === 0;
        const stickyColumnOffsetLeft = (_b = (_a2 = this.cellOffsets.offsets.get(columnId)) === null || _a2 === void 0 ? void 0 : _a2.first) !== null && _b !== void 0 ? _b : 0;
        const stickyColumnOffsetRight = (_d = (_c = this.cellOffsets.offsets.get(columnId)) === null || _c === void 0 ? void 0 : _c.last) !== null && _d !== void 0 ? _d : 0;
        acc.set(columnId, {
          padInlineStart: isFirstColumn && this.padInlineStart,
          lastInsetInlineStart: this.isStuckToTheInlineStart && lastLeftStickyColumnIndex === index,
          lastInsetInlineEnd: this.isStuckToTheInlineEnd && lastRightStickyColumnIndex === index,
          offset: {
            insetInlineStart: stickySide === "inline-start" ? stickyColumnOffsetLeft : void 0,
            insetInlineEnd: stickySide === "inline-end" ? stickyColumnOffsetRight : void 0
          }
        });
        return acc;
      }, /* @__PURE__ */ new Map());
    };
    this.updateCellOffsets = (props2) => {
      this.cellOffsets = updateCellOffsets(props2.cells, props2);
    };
    this.isEnabled = (props2) => {
      const noStickyColumns = props2.stickyColumnsFirst + props2.stickyColumnsLast === 0;
      if (noStickyColumns) {
        return false;
      }
      const wrapperWidth = getLogicalBoundingClientRect(props2.wrapper).inlineSize;
      const tableWidth = getLogicalBoundingClientRect(props2.table).inlineSize;
      const isWrapperScrollable = tableWidth > wrapperWidth;
      if (!isWrapperScrollable) {
        return false;
      }
      const totalStickySpace = this.cellOffsets.stickyWidthInlineStart + this.cellOffsets.stickyWidthInlineEnd;
      const tablePaddingLeft = parseFloat(getComputedStyle(props2.table).paddingLeft) || 0;
      const tablePaddingRight = parseFloat(getComputedStyle(props2.table).paddingRight) || 0;
      const hasEnoughScrollableSpace = totalStickySpace + MINIMUM_SCROLLABLE_SPACE + tablePaddingLeft + tablePaddingRight < wrapperWidth;
      if (!hasEnoughScrollableSpace) {
        return false;
      }
      return true;
    };
  }
  updateCellStyles(props2) {
    const hasStickyColumns = props2.stickyColumnsFirst + props2.stickyColumnsLast > 0;
    const hadStickyColumns = this.cellOffsets.offsets.size > 0;
    if (hasStickyColumns || hadStickyColumns) {
      this.updateScroll(props2);
      this.updateCellOffsets(props2);
      this.set(() => ({
        cellState: this.generateCellStyles(props2),
        wrapperState: {
          scrollPaddingInlineStart: this.cellOffsets.stickyWidthInlineStart,
          scrollPaddingInlineEnd: this.cellOffsets.stickyWidthInlineEnd
        }
      }));
    }
  }
  updateScroll(props2) {
    const wrapperScrollInlineStart = getScrollInlineStart(props2.wrapper);
    const wrapperScrollWidth = props2.wrapper.scrollWidth;
    const wrapperClientWidth = props2.wrapper.clientWidth;
    const tablePaddingInlineStart = parseFloat(getComputedStyle(props2.table).paddingInlineStart) || 0;
    const tablePaddingInlineEnd = parseFloat(getComputedStyle(props2.table).paddingInlineEnd) || 0;
    this.isStuckToTheInlineStart = wrapperScrollInlineStart > tablePaddingInlineStart;
    this.isStuckToTheInlineEnd = Math.ceil(wrapperScrollInlineStart) < wrapperScrollWidth - wrapperClientWidth - tablePaddingInlineEnd;
    this.padInlineStart = tablePaddingInlineStart !== 0 && this.isStuckToTheInlineStart;
  }
};

// node_modules/@cloudscape-design/components/table/table-role/table-role-helper.js
var stateToAriaSort = {
  sortable: "none",
  ascending: "ascending",
  descending: "descending"
};
var getAriaSort = (sortingState) => stateToAriaSort[sortingState];
function getTableRoleProps(options) {
  const nativeProps = {};
  nativeProps.role = options.tableRole === "grid-default" ? "grid" : options.tableRole;
  nativeProps["aria-label"] = options.ariaLabel;
  nativeProps["aria-labelledby"] = options.ariaLabelledby;
  nativeProps["aria-rowcount"] = typeof options.totalItemsCount === "number" ? options.totalItemsCount + 1 : -1;
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps["aria-colcount"] = options.totalColumnsCount;
  }
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps.tabIndex = -1;
  }
  return nativeProps;
}
function getTableWrapperRoleProps(options) {
  const nativeProps = {};
  if (options.isScrollable) {
    nativeProps.role = "region";
    nativeProps.tabIndex = 0;
    nativeProps["aria-label"] = options.ariaLabel;
    nativeProps["aria-labelledby"] = options.ariaLabelledby;
  }
  return nativeProps;
}
function getTableHeaderRowRoleProps(options) {
  const nativeProps = {};
  if (options.tableRole === "grid" || options.tableRole === "grid-default" || options.tableRole === "treegrid") {
    nativeProps["aria-rowindex"] = 1;
  }
  return nativeProps;
}
function getTableRowRoleProps(options) {
  const nativeProps = {};
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps["aria-rowindex"] = (options.firstIndex || 1) + options.rowIndex + 1;
  } else if (options.firstIndex !== void 0) {
    nativeProps["aria-rowindex"] = options.firstIndex + options.rowIndex + 1;
  }
  if (options.tableRole === "treegrid" && options.level && options.level !== 0) {
    nativeProps["aria-level"] = options.level;
  }
  if (options.tableRole === "treegrid" && options.setSize) {
    nativeProps["aria-setsize"] = options.setSize;
  }
  if (options.tableRole === "treegrid" && options.posInSet) {
    nativeProps["aria-posinset"] = options.posInSet;
  }
  return nativeProps;
}
function getTableColHeaderRoleProps(options) {
  const nativeProps = {};
  nativeProps.scope = "col";
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps["aria-colindex"] = options.colIndex + 1;
  }
  if (options.sortingStatus) {
    nativeProps["aria-sort"] = getAriaSort(options.sortingStatus);
  }
  return nativeProps;
}
function getTableCellRoleProps(options) {
  const nativeProps = {};
  if (options.tableRole === "grid" || options.tableRole === "treegrid") {
    nativeProps["aria-colindex"] = options.colIndex + 1;
  }
  if (options.isRowHeader) {
    nativeProps.scope = "row";
  }
  return nativeProps;
}

// node_modules/@cloudscape-design/components/table/table-role/grid-navigation.js
var import_react468 = __toESM(require_react());
var import_react469 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/table-role/utils.js
function getClosestCell(element) {
  return element.closest("td,th");
}
function isElementDisabled(element) {
  if (element instanceof HTMLInputElement || element instanceof HTMLButtonElement) {
    return element.disabled;
  }
  return false;
}
function defaultIsSuppressed(target) {
  let current = target;
  while (current) {
    if (isTableCell(current)) {
      return false;
    }
    if (current.getAttribute("role") === "dialog" || current.getAttribute("data-awsui-table-suppress-navigation") === "true") {
      return true;
    }
    current = current.parentElement;
  }
  return false;
}
function findTableRowByAriaRowIndex(table, targetAriaRowIndex, delta) {
  var _a2, _b;
  let targetRow = null;
  const rowElements = Array.from((_a2 = table === null || table === void 0 ? void 0 : table.querySelectorAll("tr[aria-rowindex]")) !== null && _a2 !== void 0 ? _a2 : []);
  if (delta < 0) {
    rowElements.reverse();
  }
  for (const element of rowElements) {
    const rowIndex = parseInt((_b = element.getAttribute("aria-rowindex")) !== null && _b !== void 0 ? _b : "");
    targetRow = element;
    if (rowIndex === targetAriaRowIndex) {
      break;
    }
    if (delta >= 0 && rowIndex > targetAriaRowIndex) {
      break;
    }
    if (delta < 0 && rowIndex < targetAriaRowIndex) {
      break;
    }
  }
  return targetRow;
}
function findTableRowCellByAriaColIndex(tableRow, targetAriaColIndex, delta) {
  var _a2;
  let targetCell = null;
  const cellElements = Array.from(tableRow.querySelectorAll("td[aria-colindex],th[aria-colindex]"));
  if (delta < 0) {
    cellElements.reverse();
  }
  for (const element of cellElements) {
    const columnIndex = parseInt((_a2 = element.getAttribute("aria-colindex")) !== null && _a2 !== void 0 ? _a2 : "");
    targetCell = element;
    if (columnIndex === targetAriaColIndex) {
      break;
    }
    if (delta >= 0 && columnIndex > targetAriaColIndex) {
      break;
    }
    if (delta < 0 && columnIndex < targetAriaColIndex) {
      break;
    }
  }
  return targetCell;
}
function isTableCell(element) {
  return element.tagName === "TD" || element.tagName === "TH";
}
function focusNextElement(element) {
  if (element) {
    if (isTableCell(element) && element.tabIndex !== 0) {
      element.tabIndex = -1;
    }
    element.focus();
  }
}

// node_modules/@cloudscape-design/components/table/table-role/grid-navigation.js
function GridNavigationProvider({ keyboardNavigation, pageSize, getTable, children: children2 }) {
  const navigationAPI = (0, import_react468.useRef)(null);
  const gridNavigation = (0, import_react469.useMemo)(() => new GridNavigationProcessor(navigationAPI), []);
  const getTableStable = useStableCallback(getTable);
  (0, import_react469.useEffect)(() => {
    if (keyboardNavigation) {
      const table = getTableStable();
      if (table) {
        gridNavigation.init(table);
        return gridNavigation.cleanup;
      }
    }
  }, [keyboardNavigation, gridNavigation, getTableStable]);
  (0, import_react469.useEffect)(() => {
    gridNavigation.update({ pageSize });
  }, [gridNavigation, pageSize]);
  (0, import_react469.useEffect)(() => {
    if (keyboardNavigation) {
      gridNavigation.refresh();
    }
  });
  return import_react468.default.createElement(SingleTabStopNavigationProvider, { ref: navigationAPI, navigationActive: keyboardNavigation, getNextFocusTarget: gridNavigation.getNextFocusTarget, isElementSuppressed: gridNavigation.isElementSuppressed, onRegisterFocusable: gridNavigation.onRegisterFocusable, onUnregisterActive: gridNavigation.onUnregisterActive }, children2);
}
var GridNavigationProcessor = class {
  constructor(navigationAPI) {
    this._pageSize = 0;
    this._table = null;
    this.focusedCell = null;
    this.focusInside = false;
    this.keepUserIndex = false;
    this.cleanup = () => {
    };
    this.onRegisterFocusable = (focusableElement) => {
      var _a2;
      if (!this.focusInside) {
        return;
      }
      const focusedElement = (_a2 = this.focusedCell) === null || _a2 === void 0 ? void 0 : _a2.element;
      if (focusedElement && isTableCell(focusedElement) && focusedElement.contains(focusableElement)) {
        focusableElement.focus({ preventScroll: true });
      }
    };
    this.onUnregisterActive = () => {
      if (this.focusedCell && !nodeBelongs2(this.table, this.focusedCell.element)) {
        this.moveFocusBy(this.focusedCell, { x: 0, y: 0 });
      }
    };
    this.getNextFocusTarget = () => {
      var _a2;
      if (!this.table) {
        return null;
      }
      const cell = this.focusedCell;
      const firstTableCell = this.table.querySelector("td,th");
      let focusTarget = (_a2 = firstTableCell && this.getFocusablesFrom(firstTableCell)[0]) !== null && _a2 !== void 0 ? _a2 : firstTableCell;
      if (cell) {
        focusTarget = this.getNextFocusable(cell, { x: 0, y: 0 });
      }
      return focusTarget;
    };
    this.isElementSuppressed = (element) => {
      if (!this.focusedCell) {
        return false;
      }
      return !element || defaultIsSuppressed(element);
    };
    this.onFocusin = (event) => {
      var _a2;
      this.focusInside = true;
      if (!(event.target instanceof HTMLElement)) {
        return;
      }
      this.updateFocusedCell(event.target);
      if (!this.focusedCell) {
        return;
      }
      (_a2 = this._navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.updateFocusTarget();
      const focusedElement = this.focusedCell.element;
      const nextTarget = isTableCell(focusedElement) ? this.getFocusablesFrom(focusedElement)[0] : null;
      if (nextTarget) {
        nextTarget.focus({ preventScroll: true });
      } else {
        this.keepUserIndex = false;
      }
    };
    this.onFocusout = () => {
      this.focusInside = false;
    };
    this.onKeydown = (event) => {
      if (!this.focusedCell) {
        return;
      }
      const keys = [
        KeyCode2.up,
        KeyCode2.down,
        KeyCode2.left,
        KeyCode2.right,
        KeyCode2.pageUp,
        KeyCode2.pageDown,
        KeyCode2.home,
        KeyCode2.end
      ];
      const ctrlKey = event.ctrlKey ? 1 : 0;
      const altKey = event.altKey ? 1 : 0;
      const shiftKey = event.shiftKey ? 1 : 0;
      const metaKey = event.metaKey ? 1 : 0;
      const modifiersPressed = ctrlKey + altKey + shiftKey + metaKey;
      const invalidModifierCombination = modifiersPressed && !event.ctrlKey || event.ctrlKey && event.keyCode !== KeyCode2.home && event.keyCode !== KeyCode2.end;
      if (invalidModifierCombination || this.isElementSuppressed(document.activeElement) || !this.isRegistered(document.activeElement) || keys.indexOf(event.keyCode) === -1) {
        return;
      }
      const from = this.focusedCell;
      event.preventDefault();
      if (isEventLike(event)) {
        handleKey2(event, {
          onBlockStart: () => this.moveFocusBy(from, { y: -1, x: 0 }),
          onBlockEnd: () => this.moveFocusBy(from, { y: 1, x: 0 }),
          onInlineStart: () => this.moveFocusBy(from, { y: 0, x: -1 }),
          onInlineEnd: () => this.moveFocusBy(from, { y: 0, x: 1 }),
          onPageUp: () => this.moveFocusBy(from, { y: -this.pageSize, x: 0 }),
          onPageDown: () => this.moveFocusBy(from, { y: this.pageSize, x: 0 }),
          onHome: () => event.ctrlKey ? this.moveFocusBy(from, { y: -Infinity, x: -Infinity }) : this.moveFocusBy(from, { y: 0, x: -Infinity }),
          onEnd: () => event.ctrlKey ? this.moveFocusBy(from, { y: Infinity, x: Infinity }) : this.moveFocusBy(from, { y: 0, x: Infinity })
        });
      }
    };
    this._navigationAPI = navigationAPI;
  }
  init(table) {
    this._table = table;
    const controller = new AbortController();
    table.addEventListener("focusin", this.onFocusin, { signal: controller.signal });
    table.addEventListener("focusout", this.onFocusout, { signal: controller.signal });
    table.addEventListener("keydown", this.onKeydown, { signal: controller.signal });
    this.cleanup = () => {
      controller.abort();
    };
  }
  update({ pageSize }) {
    this._pageSize = pageSize;
  }
  refresh() {
    setTimeout(() => {
      var _a2, _b;
      if (this._table) {
        this.updateFocusedCell((_a2 = this.focusedCell) === null || _a2 === void 0 ? void 0 : _a2.element);
        (_b = this._navigationAPI.current) === null || _b === void 0 ? void 0 : _b.updateFocusTarget();
      }
    }, 0);
  }
  get pageSize() {
    return this._pageSize;
  }
  get table() {
    return this._table;
  }
  moveFocusBy(cell, delta) {
    if (delta.y !== 0 && delta.x === 0) {
      this.keepUserIndex = true;
    }
    focusNextElement(this.getNextFocusable(cell, delta));
  }
  isRegistered(element) {
    var _a2, _b;
    return !element || ((_b = (_a2 = this._navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.isRegistered(element)) !== null && _b !== void 0 ? _b : false);
  }
  updateFocusedCell(focusedElement) {
    var _a2, _b, _c, _d, _e, _f;
    if (!focusedElement) {
      return;
    }
    const cellElement = getClosestCell(focusedElement);
    const rowElement = cellElement === null || cellElement === void 0 ? void 0 : cellElement.closest("tr");
    if (!cellElement || !rowElement) {
      return;
    }
    const colIndex = parseInt((_a2 = cellElement.getAttribute("aria-colindex")) !== null && _a2 !== void 0 ? _a2 : "");
    const rowIndex = parseInt((_b = rowElement.getAttribute("aria-rowindex")) !== null && _b !== void 0 ? _b : "");
    if (isNaN(colIndex) || isNaN(rowIndex)) {
      return;
    }
    const cellFocusables = this.getFocusablesFrom(cellElement);
    const elementIndex = cellFocusables.indexOf(focusedElement);
    const prevColIndex = (_d = (_c = this.focusedCell) === null || _c === void 0 ? void 0 : _c.colIndex) !== null && _d !== void 0 ? _d : -1;
    const prevElementIndex = (_f = (_e = this.focusedCell) === null || _e === void 0 ? void 0 : _e.elementIndex) !== null && _f !== void 0 ? _f : -1;
    this.focusedCell = {
      rowIndex,
      colIndex: this.keepUserIndex && prevColIndex !== -1 ? prevColIndex : colIndex,
      elementIndex: this.keepUserIndex && prevElementIndex !== -1 ? prevElementIndex : elementIndex,
      element: focusedElement
    };
  }
  getNextFocusable(from, delta) {
    var _a2;
    const targetAriaRowIndex = from.rowIndex + delta.y;
    const targetRow = findTableRowByAriaRowIndex(this.table, targetAriaRowIndex, delta.y);
    if (!targetRow) {
      return null;
    }
    const cellElement = getClosestCell(from.element);
    const cellFocusables = cellElement ? this.getFocusablesFrom(cellElement) : [];
    const nextElementIndex = from.elementIndex + delta.x;
    const isValidDirection = !!delta.x;
    const isValidIndex2 = from.elementIndex !== -1 && 0 <= nextElementIndex && nextElementIndex < cellFocusables.length;
    const isTargetDifferent = from.element !== cellFocusables[nextElementIndex];
    if (isValidDirection && isValidIndex2 && isTargetDifferent) {
      return cellFocusables[nextElementIndex];
    }
    const targetAriaColIndex = from.colIndex + delta.x;
    const targetCell = findTableRowCellByAriaColIndex(targetRow, targetAriaColIndex, delta.x);
    if (!targetCell) {
      return null;
    }
    if (targetCell === cellElement && delta.x !== 0) {
      return null;
    }
    const targetCellFocusables = this.getFocusablesFrom(targetCell);
    let focusIndex = from.elementIndex;
    if (isFinite(delta.x) && delta.x > 0 || delta.x === -Infinity) {
      focusIndex = 0;
    }
    if (isFinite(delta.x) && delta.x < 0 || delta.x === Infinity) {
      focusIndex = targetCellFocusables.length - 1;
    }
    return (_a2 = targetCellFocusables[focusIndex]) !== null && _a2 !== void 0 ? _a2 : targetCell;
  }
  getFocusablesFrom(target) {
    const isElementRegistered = (element) => {
      var _a2;
      return (_a2 = this._navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.isRegistered(element);
    };
    return getAllFocusables2(target).filter((el) => isElementRegistered(el) && !isElementDisabled(el));
  }
};

// node_modules/@cloudscape-design/components/table/body-cell/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/table/body-cell/styles.scoped.css";
var styles_css_default163 = {
  "expandable-toggle-wrapper": "awsui_expandable-toggle-wrapper_c6tup_1blv8_145",
  "body-cell": "awsui_body-cell_c6tup_1blv8_152",
  "body-cell-content": "awsui_body-cell-content_c6tup_1blv8_160",
  "expandable-level-0": "awsui_expandable-level-0_c6tup_1blv8_166",
  "expandable-level-1": "awsui_expandable-level-1_c6tup_1blv8_173",
  "expandable-level-2": "awsui_expandable-level-2_c6tup_1blv8_180",
  "expandable-level-3": "awsui_expandable-level-3_c6tup_1blv8_187",
  "expandable-level-4": "awsui_expandable-level-4_c6tup_1blv8_194",
  "expandable-level-5": "awsui_expandable-level-5_c6tup_1blv8_201",
  "expandable-level-6": "awsui_expandable-level-6_c6tup_1blv8_208",
  "expandable-level-7": "awsui_expandable-level-7_c6tup_1blv8_215",
  "expandable-level-8": "awsui_expandable-level-8_c6tup_1blv8_222",
  "expandable-level-9": "awsui_expandable-level-9_c6tup_1blv8_229",
  "expandable-level-next": "awsui_expandable-level-next_c6tup_1blv8_236",
  "body-cell-align-top": "awsui_body-cell-align-top_c6tup_1blv8_254",
  "body-cell-wrap": "awsui_body-cell-wrap_c6tup_1blv8_260",
  "is-visual-refresh": "awsui_is-visual-refresh_c6tup_1blv8_357",
  "body-cell-edit-active": "awsui_body-cell-edit-active_c6tup_1blv8_447",
  "body-cell-expandable": "awsui_body-cell-expandable_c6tup_1blv8_447",
  "body-cell-editable": "awsui_body-cell-editable_c6tup_1blv8_447",
  "has-striped-rows": "awsui_has-striped-rows_c6tup_1blv8_530",
  "sticky-cell-pad-inline-start": "awsui_sticky-cell-pad-inline-start_c6tup_1blv8_696",
  "has-selection": "awsui_has-selection_c6tup_1blv8_862",
  "body-cell-first-row": "awsui_body-cell-first-row_c6tup_1blv8_1031",
  "body-cell-last-row": "awsui_body-cell-last-row_c6tup_1blv8_1034",
  "body-cell-selected": "awsui_body-cell-selected_c6tup_1blv8_1034",
  "has-footer": "awsui_has-footer_c6tup_1blv8_1034",
  "body-cell-shaded": "awsui_body-cell-shaded_c6tup_1blv8_1044",
  "sticky-cell": "awsui_sticky-cell_c6tup_1blv8_696",
  "table-variant-full-page": "awsui_table-variant-full-page_c6tup_1blv8_1095",
  "sticky-cell-last-inline-end": "awsui_sticky-cell-last-inline-end_c6tup_1blv8_1112",
  "sticky-cell-last-inline-start": "awsui_sticky-cell-last-inline-start_c6tup_1blv8_1121",
  "body-cell-next-selected": "awsui_body-cell-next-selected_c6tup_1blv8_1143",
  "body-cell-prev-selected": "awsui_body-cell-prev-selected_c6tup_1blv8_1150",
  "body-cell-editor-wrapper": "awsui_body-cell-editor-wrapper_c6tup_1blv8_1176",
  "body-cell-success": "awsui_body-cell-success_c6tup_1blv8_1181",
  "body-cell-editor": "awsui_body-cell-editor_c6tup_1blv8_1176",
  "body-cell-editor-disabled": "awsui_body-cell-editor-disabled_c6tup_1blv8_1206",
  "body-cell-editor-row": "awsui_body-cell-editor-row_c6tup_1blv8_1215",
  "body-cell-editor-controls": "awsui_body-cell-editor-controls_c6tup_1blv8_1225",
  "body-cell-editor-row-editor": "awsui_body-cell-editor-row-editor_c6tup_1blv8_1228",
  "body-cell-editor-focusable": "awsui_body-cell-editor-focusable_c6tup_1blv8_1231",
  "body-cell-editor-icon": "awsui_body-cell-editor-icon_c6tup_1blv8_1255",
  "resizable-columns": "awsui_resizable-columns_c6tup_1blv8_1367",
  "expandable-cell-content": "awsui_expandable-cell-content_c6tup_1blv8_1370",
  "body-cell-edit-disabled-popover": "awsui_body-cell-edit-disabled-popover_c6tup_1blv8_1421",
  "body-cell-has-success": "awsui_body-cell-has-success_c6tup_1blv8_1424"
};

// node_modules/@cloudscape-design/components/table/body-cell/td-element.js
var TableTdElement = import_react470.default.forwardRef((_a2, ref) => {
  var { children: children2, wrapLines, isRowHeader, isFirstRow, isLastRow, isSelected, isNextSelected, isPrevSelected, nativeAttributes, onClick, onFocus, onBlur, isEvenRow, stripedRows, isSelection, hasSelection, hasFooter, columnId, colIndex, stickyState, tableRole, level, isExpandable, isExpanded, onExpandableItemToggle, expandButtonLabel, collapseButtonLabel, verticalAlign, resizableColumns, resizableStyle, isEditable, isEditing, isEditingDisabled, hasSuccessIcon, tableVariant } = _a2, rest = __rest(_a2, ["children", "wrapLines", "isRowHeader", "isFirstRow", "isLastRow", "isSelected", "isNextSelected", "isPrevSelected", "nativeAttributes", "onClick", "onFocus", "onBlur", "isEvenRow", "stripedRows", "isSelection", "hasSelection", "hasFooter", "columnId", "colIndex", "stickyState", "tableRole", "level", "isExpandable", "isExpanded", "onExpandableItemToggle", "expandButtonLabel", "collapseButtonLabel", "verticalAlign", "resizableColumns", "resizableStyle", "isEditable", "isEditing", "isEditingDisabled", "hasSuccessIcon", "tableVariant"]);
  const Element2 = isRowHeader ? "th" : "td";
  const isVisualRefresh = useVisualRefresh();
  resizableStyle = resizableColumns ? {} : resizableStyle;
  nativeAttributes = Object.assign(Object.assign({}, nativeAttributes), getTableCellRoleProps({ tableRole, isRowHeader, colIndex }));
  const stickyStyles = useStickyCellStyles({
    stickyColumns: stickyState,
    columnId,
    getClassName: (props2) => getStickyClassNames(styles_css_default163, props2)
  });
  const cellRefObject = (0, import_react470.useRef)(null);
  const mergedRef = useMergeRefs(stickyStyles.ref, ref, cellRefObject);
  const { tabIndex: cellTabIndex } = useSingleTabStopNavigation(cellRefObject);
  const isEditingActive = isEditing && !isEditingDisabled;
  return import_react470.default.createElement(
    Element2,
    Object.assign({ style: Object.assign(Object.assign({}, resizableStyle), stickyStyles.style), className: clsx_m_default(styles_css_default163["body-cell"], isFirstRow && styles_css_default163["body-cell-first-row"], isLastRow && styles_css_default163["body-cell-last-row"], isSelected && styles_css_default163["body-cell-selected"], isNextSelected && styles_css_default163["body-cell-next-selected"], isPrevSelected && styles_css_default163["body-cell-prev-selected"], !isEvenRow && stripedRows && styles_css_default163["body-cell-shaded"], stripedRows && styles_css_default163["has-striped-rows"], isVisualRefresh && styles_css_default163["is-visual-refresh"], isSelection && styles_css_default109["selection-control"], hasSelection && styles_css_default163["has-selection"], hasFooter && styles_css_default163["has-footer"], resizableColumns && styles_css_default163["resizable-columns"], verticalAlign === "top" && styles_css_default163["body-cell-align-top"], isEditable && styles_css_default163["body-cell-editable"], isEditing && !isEditingDisabled && styles_css_default163["body-cell-edit-active"], isEditing && isEditingDisabled && styles_css_default163["body-cell-edit-disabled-popover"], hasSuccessIcon && styles_css_default163["body-cell-has-success"], level !== void 0 && !isEditingActive && styles_css_default163["body-cell-expandable"], level !== void 0 && !isEditingActive && styles_css_default163[`expandable-level-${getLevelClassSuffix(level)}`], tableVariant && styles_css_default163[`table-variant-${tableVariant}`], stickyStyles.className), onClick, onFocus, onBlur, ref: mergedRef }, nativeAttributes, { tabIndex: cellTabIndex === -1 ? void 0 : cellTabIndex }, copyAnalyticsMetadataAttribute(rest)),
    level !== void 0 && isExpandable && !isEditingActive && import_react470.default.createElement(
      "div",
      { className: styles_css_default163["expandable-toggle-wrapper"] },
      import_react470.default.createElement(ExpandToggleButton, { isExpanded, onExpandableItemToggle, expandButtonLabel, collapseButtonLabel })
    ),
    import_react470.default.createElement("div", { className: clsx_m_default(styles_css_default163["body-cell-content"], wrapLines && styles_css_default163["body-cell-wrap"]) }, children2)
  );
});
function getLevelClassSuffix(level) {
  return 0 <= level && level <= 9 ? level : "next";
}

// node_modules/@cloudscape-design/components/table/body-cell/disabled-inline-editor.js
function DisabledInlineEditor(_a2) {
  var _b;
  var { item, column, ariaLabels, isEditing, onEditStart, onEditEnd, editDisabledReason } = _a2, rest = __rest(_a2, ["item", "column", "ariaLabels", "isEditing", "onEditStart", "onEditEnd", "editDisabledReason"]);
  const isExpandableColumn = rest.level !== void 0;
  const clickAwayRef = useClickAway(() => {
    if (isEditing) {
      onEditEnd(true);
    }
  });
  const iconRef = (0, import_react471.useRef)(null);
  const buttonRef = (0, import_react471.useRef)(null);
  const portalRef = (0, import_react471.useRef)(null);
  function handleEscape(event) {
    if (event.key === "Escape") {
      onEditEnd(true);
    }
  }
  const onClick = () => {
    var _a3;
    onEditStart();
    (_a3 = buttonRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
  };
  const { targetProps, descriptionEl } = useHiddenDescription(editDisabledReason);
  const portalClasses = usePortalModeClasses(portalRef);
  const { tabIndex } = useSingleTabStopNavigation(buttonRef);
  return import_react471.default.createElement(
    TableTdElement,
    Object.assign({}, rest, { nativeAttributes: { "data-inline-editing-active": isEditing.toString() }, isEditing, isEditingDisabled: true, onClick: !isEditing && !isExpandableColumn ? onClick : void 0, ref: !isExpandableColumn ? clickAwayRef : void 0 }),
    column.cell(item),
    import_react471.default.createElement(
      "div",
      { className: styles_css_default163["body-cell-editor-wrapper"] },
      import_react471.default.createElement(
        "div",
        { ref: isExpandableColumn ? clickAwayRef : void 0 },
        import_react471.default.createElement(
          "button",
          Object.assign({ ref: buttonRef, tabIndex, className: clsx_m_default(styles_css_default163["body-cell-editor"], styles_css_default163["body-cell-editor-disabled"], isExpandableColumn && styles_css_default163["body-cell-editor-focusable"]), onClick: !isEditing && isExpandableColumn ? onClick : void 0, "aria-label": (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column, item), "aria-haspopup": "dialog", "aria-disabled": "true", onKeyDown: handleEscape }, targetProps),
          import_react471.default.createElement(
            "span",
            { className: styles_css_default163["body-cell-editor-icon"] },
            import_react471.default.createElement(internal_default, { name: "lock-private", variant: "normal", __internalRootRef: iconRef })
          ),
          descriptionEl
        )
      )
    ),
    isEditing && import_react471.default.createElement(
      "span",
      { ref: portalRef },
      import_react471.default.createElement(
        Portal,
        null,
        import_react471.default.createElement(
          "span",
          { className: portalClasses },
          import_react471.default.createElement(
            PopoverContainer,
            { size: "medium", fixedWidth: false, position: "top", trackRef: iconRef, arrow: (position) => import_react471.default.createElement(arrow_default, { position }), renderWithPortal: true, zIndex: 7e3 },
            import_react471.default.createElement(
              PopoverBody,
              { dismissButton: false, dismissAriaLabel: void 0, header: null, onDismiss: () => {
              }, overflowVisible: "both" },
              import_react471.default.createElement(internal_default2, { tagName: "span" }, editDisabledReason)
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/table/body-cell/inline-editor.js
var import_react472 = __toESM(require_react());
var noop3 = () => void 0;
function InlineEditor({ ariaLabels, item, column, onEditEnd, submitEdit, __onRender }) {
  var _a2, _b, _c, _d;
  const [currentEditLoading, setCurrentEditLoading] = (0, import_react472.useState)(false);
  const [currentEditValue, setCurrentEditValue] = (0, import_react472.useState)();
  const i18n = useInternalI18n("table");
  const focusLockRef = (0, import_react472.useRef)(null);
  function finishEdit({ cancelled = false, refocusCell = true } = {}) {
    if (!cancelled) {
      setCurrentEditValue(void 0);
    }
    onEditEnd({ cancelled, refocusCell });
  }
  function handleSubmit() {
    var _a3;
    return __awaiter(this, void 0, void 0, function* () {
      if (currentEditValue === void 0) {
        finishEdit();
        return;
      }
      setCurrentEditLoading(true);
      try {
        yield submitEdit(item, column, currentEditValue);
        setCurrentEditLoading(false);
        finishEdit();
      } catch (e3) {
        setCurrentEditLoading(false);
        (_a3 = focusLockRef.current) === null || _a3 === void 0 ? void 0 : _a3.focusFirst();
      }
    });
  }
  function onFormSubmit(evt) {
    evt.preventDefault();
    evt.stopPropagation();
    handleSubmit();
  }
  function onCancel({ reFocusEditedCell = true } = {}) {
    if (currentEditLoading) {
      return;
    }
    finishEdit({ cancelled: true, refocusCell: reFocusEditedCell });
  }
  function handleEscape(event) {
    if (event.key === "Escape") {
      onCancel();
    }
  }
  const clickAwayRef = useClickAway(() => onCancel({ reFocusEditedCell: false }));
  (0, import_react472.useEffect)(() => {
    if (__onRender) {
      const timer = setTimeout(__onRender, 1);
      return () => clearTimeout(timer);
    }
  }, [__onRender]);
  const { ariaLabel = void 0, validation = noop3, errorIconAriaLabel, constraintText, editingCell, disableNativeForm } = column.editConfig;
  const cellContext = {
    currentValue: currentEditValue,
    setValue: setCurrentEditValue,
    submitValue: handleSubmit
  };
  const FormElement = disableNativeForm ? "div" : "form";
  return import_react472.default.createElement(
    focus_lock_default,
    { restoreFocus: true, ref: focusLockRef },
    import_react472.default.createElement(
      "div",
      { role: "dialog", ref: clickAwayRef, "aria-label": (_a2 = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _a2 === void 0 ? void 0 : _a2.call(ariaLabels, column, item), onKeyDown: handleEscape },
      import_react472.default.createElement(
        FormElement,
        { onSubmit: disableNativeForm ? void 0 : onFormSubmit },
        import_react472.default.createElement(
          InternalFormField,
          { stretch: true, label: ariaLabel, constraintText, __hideLabel: true, __disableGutters: true, i18nStrings: { errorIconAriaLabel }, errorText: validation(item, currentEditValue) },
          import_react472.default.createElement(
            "div",
            { className: styles_css_default163["body-cell-editor-row"] },
            import_react472.default.createElement("div", { className: styles_css_default163["body-cell-editor-row-editor"] }, editingCell(item, cellContext)),
            import_react472.default.createElement(
              "span",
              { className: styles_css_default163["body-cell-editor-controls"] },
              import_react472.default.createElement(
                internal_default5,
                { direction: "horizontal", size: "xxs" },
                !currentEditLoading ? import_react472.default.createElement(internal_default3, { ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.cancelEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column), formAction: "none", iconName: "close", variant: "inline-icon", onClick: () => onCancel() }) : null,
                import_react472.default.createElement(internal_default3, { ariaLabel: (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.submitEditLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, column), formAction: disableNativeForm ? "none" : "submit", onClick: disableNativeForm ? handleSubmit : void 0, iconName: "check", variant: "inline-icon", loading: currentEditLoading })
              ),
              import_react472.default.createElement(internal_default2, { tagName: "span", hidden: true }, currentEditLoading ? i18n("ariaLabels.submittingEditText", (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.submittingEditText) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, column)) : "")
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/table/body-cell/index.js
var submitHandlerFallback = () => {
  throw new Error("The function `handleSubmit` is required for editable columns");
};
function TableCellEditable(_a2) {
  var _b, _c, _d;
  var { item, column, isEditing, onEditStart, onEditEnd, submitEdit, ariaLabels, successfulEdit = false } = _a2, rest = __rest(_a2, ["item", "column", "isEditing", "onEditStart", "onEditEnd", "submitEdit", "ariaLabels", "successfulEdit"]);
  const i18n = useInternalI18n("table");
  const editActivateRef = (0, import_react473.useRef)(null);
  const tdNativeAttributes = {
    "data-inline-editing-active": isEditing.toString()
  };
  const isFocusMoveNeededRef = (0, import_react473.useRef)(false);
  const isExpandableColumn = rest.level !== void 0;
  (0, import_react473.useEffect)(() => {
    if (!isEditing && editActivateRef.current && isFocusMoveNeededRef.current) {
      isFocusMoveNeededRef.current = false;
      editActivateRef.current.focus();
    }
  }, [isEditing]);
  const [hasFocus, setHasFocus] = (0, import_react473.useState)(false);
  const prevSuccessfulEdit = usePrevious(successfulEdit);
  const prevHasFocus = usePrevious(hasFocus);
  const [showSuccessIcon, setShowSuccessIcon] = (0, import_react473.useState)(false);
  (0, import_react473.useEffect)(() => {
    if (successfulEdit && prevSuccessfulEdit && !hasFocus && prevHasFocus) {
      setShowSuccessIcon(false);
    }
    if (successfulEdit && !prevSuccessfulEdit) {
      setShowSuccessIcon(true);
    }
  }, [hasFocus, successfulEdit, prevHasFocus, prevSuccessfulEdit]);
  const { tabIndex: editActivateTabIndex } = useSingleTabStopNavigation(editActivateRef);
  return import_react473.default.createElement(TableTdElement, Object.assign({}, rest, { nativeAttributes: tdNativeAttributes, isEditing, hasSuccessIcon: showSuccessIcon && hasFocus, onClick: !isEditing && !isExpandableColumn ? onEditStart : void 0, onFocus: () => setHasFocus(true), onBlur: () => setHasFocus(false) }), isEditing && column.editConfig ? import_react473.default.createElement(InlineEditor, { ariaLabels, column, item, onEditEnd: (options) => {
    setShowSuccessIcon(false);
    isFocusMoveNeededRef.current = options.refocusCell;
    onEditEnd(options.cancelled);
  }, submitEdit: submitEdit !== null && submitEdit !== void 0 ? submitEdit : submitHandlerFallback }) : import_react473.default.createElement(
    import_react473.default.Fragment,
    null,
    column.cell(item),
    showSuccessIcon && hasFocus && import_react473.default.createElement(
      import_react473.default.Fragment,
      null,
      import_react473.default.createElement(
        "span",
        { className: styles_css_default163["body-cell-success"], onMouseDown: (e3) => {
          e3.preventDefault();
        } },
        import_react473.default.createElement(internal_default, { name: "status-positive", variant: "success", ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column) })
      ),
      import_react473.default.createElement(internal_default2, { tagName: "span", hidden: true }, i18n("ariaLabels.successfulEditLabel", (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, column)))
    ),
    import_react473.default.createElement(
      "div",
      { className: styles_css_default163["body-cell-editor-wrapper"] },
      import_react473.default.createElement(
        "button",
        { className: clsx_m_default(styles_css_default163["body-cell-editor"], isExpandableColumn && styles_css_default163["body-cell-editor-focusable"]), "aria-label": (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, column, item), ref: editActivateRef, onClick: !isEditing && isExpandableColumn ? onEditStart : void 0, tabIndex: editActivateTabIndex },
        import_react473.default.createElement(
          "span",
          { className: styles_css_default163["body-cell-editor-icon"] },
          import_react473.default.createElement(internal_default, { name: "edit" })
        )
      )
    )
  ));
}
function TableBodyCell(props2) {
  var _a2, _b;
  const editDisabledReason = (_b = (_a2 = props2.column.editConfig) === null || _a2 === void 0 ? void 0 : _a2.disabledReason) === null || _b === void 0 ? void 0 : _b.call(_a2, props2.item);
  if (editDisabledReason) {
    return import_react473.default.createElement(DisabledInlineEditor, Object.assign({ editDisabledReason }, props2));
  }
  if (props2.isEditable || props2.isEditing) {
    return import_react473.default.createElement(TableCellEditable, Object.assign({}, props2));
  }
  const { column, item } = props2;
  return import_react473.default.createElement(TableTdElement, Object.assign({}, props2, { isEditable: false }), column.cell(item));
}

// node_modules/@cloudscape-design/components/table/column-widths-utils.js
function checkColumnWidths(columnDefinitions) {
  for (const column of columnDefinitions) {
    checkProperty(column, "minWidth");
    checkProperty(column, "width");
  }
}
function setElementWidths(element, styles) {
  function setProperty(property) {
    const value = styles[property];
    let widthCssValue = "";
    if (typeof value === "number") {
      widthCssValue = value + "px";
    }
    if (typeof value === "string") {
      widthCssValue = value;
    }
    if (element.style[property] !== widthCssValue) {
      element.style[property] = widthCssValue;
    }
  }
  setProperty("width");
  setProperty("minWidth");
  setProperty("maxWidth");
}
function checkProperty(column, name) {
  const value = column[name];
  if (typeof value !== "number" && typeof value !== "undefined") {
    warnOnce("Table", `resizableColumns feature requires ${name} property to be a number, got ${value}. The component may work incorrectly.`);
  }
}

// node_modules/@cloudscape-design/components/table/expandable-rows/expandable-rows-utils.js
function useExpandableTableProps({ items, expandableRows, trackBy, ariaLabels }) {
  var _a2;
  const i18n = useInternalI18n("table");
  const isExpandable = !!expandableRows;
  const expandedSet = new ItemSet(trackBy, (_a2 = expandableRows === null || expandableRows === void 0 ? void 0 : expandableRows.expandedItems) !== null && _a2 !== void 0 ? _a2 : []);
  let allItems = items;
  const itemToDetail = /* @__PURE__ */ new Map();
  const getItemLevel = (item) => {
    var _a3, _b;
    return (_b = (_a3 = itemToDetail.get(item)) === null || _a3 === void 0 ? void 0 : _a3.level) !== null && _b !== void 0 ? _b : 0;
  };
  if (isExpandable) {
    const visibleItems = new Array();
    const traverse = (item, detail) => {
      const children2 = expandableRows.getItemChildren(item);
      itemToDetail.set(item, Object.assign(Object.assign({}, detail), { children: children2 }));
      visibleItems.push(item);
      if (expandedSet.has(item)) {
        children2.forEach((child, index) => traverse(child, { level: detail.level + 1, setSize: children2.length, posInSet: index + 1, parent: item }));
      }
    };
    items.forEach((item, index) => traverse(item, { level: 1, setSize: items.length, posInSet: index + 1, parent: null }));
    for (let index = 0; index < visibleItems.length; index++) {
      const item = visibleItems[index];
      if (expandedSet.has(item)) {
        let insertionIndex = index + 1;
        for (insertionIndex; insertionIndex < visibleItems.length; insertionIndex++) {
          const insertionItem = visibleItems[insertionIndex];
          if (getItemLevel(item) >= getItemLevel(insertionItem)) {
            break;
          }
        }
        insertionIndex--;
      }
    }
    allItems = visibleItems;
  }
  const getExpandableItemProps = (item) => {
    var _a3, _b, _c, _d;
    const { level = 1, setSize = 1, posInSet = 1, parent = null, children: children2 = [] } = (_a3 = itemToDetail.get(item)) !== null && _a3 !== void 0 ? _a3 : {};
    return {
      level,
      setSize,
      posInSet,
      isExpandable: (_b = expandableRows === null || expandableRows === void 0 ? void 0 : expandableRows.isItemExpandable(item)) !== null && _b !== void 0 ? _b : true,
      isExpanded: expandedSet.has(item),
      onExpandableItemToggle: () => fireNonCancelableEvent(expandableRows === null || expandableRows === void 0 ? void 0 : expandableRows.onExpandableItemToggle, { item, expanded: !expandedSet.has(item) }),
      expandButtonLabel: i18n("ariaLabels.expandButtonLabel", (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.expandButtonLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, item)),
      collapseButtonLabel: i18n("ariaLabels.collapseButtonLabel", (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.collapseButtonLabel) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, item)),
      parent,
      children: children2
    };
  };
  return { isExpandable, allItems, getExpandableItemProps };
}

// node_modules/@cloudscape-design/components/table/no-data-cell.js
var import_react474 = __toESM(require_react());
function NoDataCell({ totalColumnsCount, hasFooter, loading, loadingText, empty, tableRef, containerRef }) {
  const cellContentRef = (0, import_react474.useRef)(null);
  useResizeObserver(containerRef, ({ contentBoxWidth: containerInlineSize }) => {
    if (tableRef.current && cellContentRef.current) {
      const tablePaddingInlineStart = parseFloat(getComputedStyle(tableRef.current).paddingInlineStart) || 0;
      const tablePaddingInlineEnd = parseFloat(getComputedStyle(tableRef.current).paddingInlineEnd) || 0;
      const inlineSize = containerInlineSize + tablePaddingInlineStart + tablePaddingInlineEnd;
      cellContentRef.current.style.inlineSize = Math.floor(inlineSize) + "px";
    }
  });
  return import_react474.default.createElement(
    "td",
    { colSpan: totalColumnsCount, className: clsx_m_default(styles_css_default109["cell-merged"], hasFooter && styles_css_default109["has-footer"]) },
    import_react474.default.createElement("div", { ref: cellContentRef, className: styles_css_default109["cell-merged-content"], "data-awsui-table-suppress-navigation": true }, loading ? import_react474.default.createElement(
      StatusIndicator,
      { type: "loading", className: styles_css_default109.loading, wrapText: true },
      import_react474.default.createElement(internal_default2, { tagName: "span" }, loadingText)
    ) : import_react474.default.createElement("div", { className: styles_css_default109.empty }, empty))
  );
}

// node_modules/@cloudscape-design/components/table/progressive-loading/items-loader.js
var import_react475 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/progressive-loading/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/table/progressive-loading/styles.scoped.css";
var styles_css_default164 = {
  "items-loader": "awsui_items-loader_115pt_16l07_5"
};

// node_modules/@cloudscape-design/components/table/progressive-loading/items-loader.js
function ItemsLoader({ item, trackBy, children: children2 }) {
  let parentTrackId = item && trackBy ? applyTrackBy(trackBy, item) : void 0;
  parentTrackId = typeof parentTrackId === "string" ? parentTrackId : void 0;
  return import_react475.default.createElement("div", { "data-root": item ? "false" : "true", "data-parentrow": parentTrackId, className: styles_css_default164["items-loader"] }, children2);
}
function getLoaderContent({ item, loadingStatus, renderLoaderPending, renderLoaderLoading, renderLoaderError, renderLoaderEmpty }) {
  let content = null;
  if (loadingStatus === "pending" && renderLoaderPending) {
    content = renderLoaderPending({ item });
  } else if (loadingStatus === "loading" && renderLoaderLoading) {
    content = import_react475.default.createElement(internal_default2, { tagName: "span" }, renderLoaderLoading({ item }));
  } else if (loadingStatus === "error" && renderLoaderError) {
    content = import_react475.default.createElement(internal_default2, { tagName: "span" }, renderLoaderError({ item }));
  } else if (loadingStatus === "finished" && renderLoaderEmpty && item) {
    content = import_react475.default.createElement(internal_default2, { tagName: "span" }, renderLoaderEmpty({ item }));
  } else {
    warnOnce("Table", "Must define `renderLoaderPending`, `renderLoaderLoading`, `renderLoaderError`, or `renderLoaderEmpty` when using corresponding loading status.");
  }
  return content;
}

// node_modules/@cloudscape-design/components/table/progressive-loading/loader-cell.js
var import_react476 = __toESM(require_react());
function TableLoaderCell(_a2) {
  var { item, trackBy, children: children2 } = _a2, props2 = __rest(_a2, ["item", "trackBy", "children"]);
  return import_react476.default.createElement(TableTdElement, Object.assign({}, props2, { isEditable: false, isEditing: false }), props2.isRowHeader ? import_react476.default.createElement(ItemsLoader, { item, trackBy }, children2) : null);
}

// node_modules/@cloudscape-design/components/table/progressive-loading/progressive-loading-utils.js
function useProgressiveLoadingProps({ items, getLoadingStatus, getExpandableItemProps }) {
  const allRows = new Array();
  const getItemParent = (item) => getExpandableItemProps(item).parent;
  const getItemChildren = (item) => getExpandableItemProps(item).children;
  const getItemLevel = (item) => item ? getExpandableItemProps(item).level : 0;
  const isItemExpanded = (item) => getExpandableItemProps(item).isExpanded;
  for (let i2 = 0; i2 < items.length; i2++) {
    allRows.push({ type: "data", item: items[i2] });
    if (isItemExpanded(items[i2]) && getItemChildren(items[i2]).length === 0) {
      const status = getLoadingStatus === null || getLoadingStatus === void 0 ? void 0 : getLoadingStatus(items[i2]);
      if (status === "loading" || status === "finished" || status === "error") {
        allRows.push({ type: "loader", item: items[i2], level: getItemLevel(items[i2]), status, from: 0 });
      } else {
        warnOnce("Table", 'Expanded items without children must have "loading", "finished", or "error" loading status.');
      }
    }
    let currentParent = getItemParent(items[i2]);
    let levelsDiff = getItemLevel(items[i2]) - getItemLevel(items[i2 + 1]);
    while (currentParent && levelsDiff > 0) {
      const status = getLoadingStatus === null || getLoadingStatus === void 0 ? void 0 : getLoadingStatus(currentParent);
      if (status && status !== "finished") {
        const level = currentParent ? getItemLevel(currentParent) : 0;
        const children2 = currentParent ? getItemChildren(currentParent) : [];
        allRows.push({ type: "loader", item: currentParent, level, status, from: children2.length });
      }
      currentParent = currentParent && getItemParent(currentParent);
      levelsDiff--;
    }
    const rootLoadingStatus = getLoadingStatus === null || getLoadingStatus === void 0 ? void 0 : getLoadingStatus(null);
    if (i2 === items.length - 1 && rootLoadingStatus && rootLoadingStatus !== "finished") {
      allRows.push({ type: "loader", item: null, level: 0, status: rootLoadingStatus, from: items.length });
    }
  }
  return { allRows };
}

// node_modules/@cloudscape-design/components/table/resizer/index.js
var import_react478 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/use-column-widths.js
var import_react477 = __toESM(require_react());
var DEFAULT_COLUMN_WIDTH = 120;
function readWidths(getCell, visibleColumns) {
  const result = /* @__PURE__ */ new Map();
  for (let index = 0; index < visibleColumns.length; index++) {
    const column = visibleColumns[index];
    let width = column.width || 0;
    const minWidth = column.minWidth || width || DEFAULT_COLUMN_WIDTH;
    if (!width && // read width from the DOM if it is missing in the config
    index !== visibleColumns.length - 1) {
      const colEl = getCell(column.id);
      width = colEl ? getLogicalBoundingClientRect(colEl).inlineSize : DEFAULT_COLUMN_WIDTH;
    }
    result.set(column.id, Math.max(width, minWidth));
  }
  return result;
}
function updateWidths(visibleColumns, oldWidths, newWidth, columnId) {
  const column = visibleColumns.find((column2) => column2.id === columnId);
  let minWidth = DEFAULT_COLUMN_WIDTH;
  if (typeof (column === null || column === void 0 ? void 0 : column.width) === "number" && column.width < DEFAULT_COLUMN_WIDTH) {
    minWidth = column === null || column === void 0 ? void 0 : column.width;
  }
  if (typeof (column === null || column === void 0 ? void 0 : column.minWidth) === "number") {
    minWidth = column === null || column === void 0 ? void 0 : column.minWidth;
  }
  newWidth = Math.max(newWidth, minWidth);
  if (oldWidths.get(columnId) === newWidth) {
    return oldWidths;
  }
  const newWidths = new Map(oldWidths);
  newWidths.set(columnId, newWidth);
  return newWidths;
}
var WidthsContext = (0, import_react477.createContext)({
  getColumnStyles: () => ({}),
  columnWidths: /* @__PURE__ */ new Map(),
  updateColumn: () => {
  },
  setCell: () => {
  }
});
function ColumnWidthsProvider({ visibleColumns, resizableColumns, containerRef, children: children2 }) {
  const visibleColumnsRef = (0, import_react477.useRef)(null);
  const containerWidthRef = (0, import_react477.useRef)(0);
  const [columnWidths, setColumnWidths] = (0, import_react477.useState)(null);
  const cellsRef = (0, import_react477.useRef)(/* @__PURE__ */ new Map());
  const stickyCellsRef = (0, import_react477.useRef)(/* @__PURE__ */ new Map());
  const getCell = (columnId) => {
    var _a2;
    return (_a2 = cellsRef.current.get(columnId)) !== null && _a2 !== void 0 ? _a2 : null;
  };
  const setCell = (sticky, columnId, node) => {
    const ref = sticky ? stickyCellsRef : cellsRef;
    if (node) {
      ref.current.set(columnId, node);
    } else {
      ref.current.delete(columnId);
    }
  };
  const getColumnStyles = (sticky, columnId) => {
    var _a2, _b, _c;
    const column = visibleColumns.find((column2) => column2.id === columnId);
    if (!column) {
      return {};
    }
    if (sticky) {
      return {
        width: ((_a2 = cellsRef.current.get(column.id)) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect().width) || ((_b = columnWidths === null || columnWidths === void 0 ? void 0 : columnWidths.get(column.id)) !== null && _b !== void 0 ? _b : column.width)
      };
    }
    if (resizableColumns && columnWidths) {
      const isLastColumn = column.id === ((_c = visibleColumns[visibleColumns.length - 1]) === null || _c === void 0 ? void 0 : _c.id);
      const totalWidth = visibleColumns.reduce((sum2, { id }) => sum2 + (columnWidths.get(id) || DEFAULT_COLUMN_WIDTH), 0);
      if (isLastColumn && containerWidthRef.current > totalWidth) {
        return { width: "auto", minWidth: column === null || column === void 0 ? void 0 : column.minWidth };
      } else {
        return { width: columnWidths.get(column.id), minWidth: column === null || column === void 0 ? void 0 : column.minWidth };
      }
    }
    return {
      width: column.width,
      minWidth: column.minWidth,
      maxWidth: !resizableColumns ? column.maxWidth : void 0
    };
  };
  const updateColumnWidths = useStableCallback(() => {
    for (const { id } of visibleColumns) {
      const element = cellsRef.current.get(id);
      if (element) {
        setElementWidths(element, getColumnStyles(false, id));
      }
    }
    for (const { id } of visibleColumns) {
      const element = stickyCellsRef.current.get(id);
      if (element) {
        setElementWidths(element, getColumnStyles(true, id));
      }
    }
  });
  useResizeObserver(containerRef, ({ contentBoxWidth: containerWidth }) => {
    containerWidthRef.current = containerWidth;
    requestAnimationFrame(() => updateColumnWidths());
  });
  (0, import_react477.useEffect)(() => {
    updateColumnWidths();
    if (!resizableColumns) {
      return;
    }
    let updated = false;
    const newColumnWidths = new Map(columnWidths);
    const lastVisible = visibleColumnsRef.current;
    if (lastVisible) {
      for (let index = 0; index < visibleColumns.length; index++) {
        const column = visibleColumns[index];
        if (!(columnWidths === null || columnWidths === void 0 ? void 0 : columnWidths.get(column.id)) && lastVisible.indexOf(column.id) === -1) {
          updated = true;
          newColumnWidths.set(column.id, column.width || DEFAULT_COLUMN_WIDTH);
        }
      }
      if (updated) {
        setColumnWidths(newColumnWidths);
      }
    }
    visibleColumnsRef.current = visibleColumns.map((column) => column.id);
  }, [columnWidths, resizableColumns, visibleColumns, updateColumnWidths]);
  (0, import_react477.useEffect)(() => {
    if (!resizableColumns) {
      return;
    }
    setColumnWidths(() => readWidths(getCell, visibleColumns));
  }, []);
  function updateColumn(columnId, newWidth) {
    setColumnWidths((columnWidths2) => updateWidths(visibleColumns, columnWidths2 !== null && columnWidths2 !== void 0 ? columnWidths2 : /* @__PURE__ */ new Map(), newWidth, columnId));
  }
  return import_react477.default.createElement(WidthsContext.Provider, { value: { getColumnStyles, columnWidths: columnWidths !== null && columnWidths !== void 0 ? columnWidths : /* @__PURE__ */ new Map(), updateColumn, setCell } }, children2);
}
function useColumnWidths() {
  return (0, import_react477.useContext)(WidthsContext);
}

// node_modules/@cloudscape-design/components/table/resizer/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/table/resizer/styles.scoped.css";
var styles_css_default165 = {
  "resize-active": "awsui_resize-active_x7peu_m370p_145",
  "resize-active-with-focus": "awsui_resize-active-with-focus_x7peu_m370p_145",
  "divider": "awsui_divider_x7peu_m370p_150",
  "divider-interactive": "awsui_divider-interactive_x7peu_m370p_151",
  "divider-disabled": "awsui_divider-disabled_x7peu_m370p_165",
  "divider-interactive-disabled": "awsui_divider-interactive-disabled_x7peu_m370p_166",
  "divider-active": "awsui_divider-active_x7peu_m370p_169",
  "divider-interactive-active": "awsui_divider-interactive-active_x7peu_m370p_170",
  "is-visual-refresh": "awsui_is-visual-refresh_x7peu_m370p_174",
  "resizer": "awsui_resizer_x7peu_m370p_178",
  "has-focus": "awsui_has-focus_x7peu_m370p_228",
  "tracker": "awsui_tracker_x7peu_m370p_257"
};

// node_modules/@cloudscape-design/components/table/resizer/resizer-lookup.js
function getResizerElements(resizerElement) {
  if (!resizerElement) {
    return null;
  }
  const header = findUpUntil(resizerElement, (element) => element.tagName.toLowerCase() === "th");
  if (!header) {
    return null;
  }
  const tableRoot = findUpUntil(header, (element) => element.className.indexOf(styles_css_default109.root) > -1);
  if (!tableRoot) {
    return null;
  }
  const table = tableRoot.querySelector(`table`);
  if (!table) {
    return null;
  }
  const tracker = tableRoot.querySelector(`.${styles_css_default165.tracker}`);
  if (!tracker) {
    return null;
  }
  const scrollParent = getOverflowParents(header)[0];
  if (!scrollParent) {
    return null;
  }
  return { header, table, tracker, scrollParent };
}
function getHeaderWidth(resizerElement) {
  const header = resizerElement && findUpUntil(resizerElement, (element) => element.tagName.toLowerCase() === "th");
  return header ? getLogicalBoundingClientRect(header).inlineSize : 0;
}

// node_modules/@cloudscape-design/components/table/resizer/index.js
var AUTO_GROW_START_TIME = 10;
var AUTO_GROW_INTERVAL = 10;
var AUTO_GROW_INCREMENT = 5;
function Divider({ className: className2 }) {
  return import_react478.default.createElement("span", { className: clsx_m_default(styles_css_default165.divider, styles_css_default165["divider-disabled"], className2) });
}
function Resizer({ onWidthUpdate, onWidthUpdateCommit, ariaLabelledby, minWidth = DEFAULT_COLUMN_WIDTH, tabIndex, showFocusRing, focusId, roleDescription }) {
  onWidthUpdate = useStableCallback(onWidthUpdate);
  onWidthUpdateCommit = useStableCallback(onWidthUpdateCommit);
  const isVisualRefresh = useVisualRefresh();
  const separatorId = useUniqueId();
  const resizerToggleRef = (0, import_react478.useRef)(null);
  const resizerSeparatorRef = (0, import_react478.useRef)(null);
  const [isDragging, setIsDragging] = (0, import_react478.useState)(false);
  const [isKeyboardDragging, setIsKeyboardDragging] = (0, import_react478.useState)(false);
  const autoGrowTimeout = (0, import_react478.useRef)();
  const [resizerHasFocus, setResizerHasFocus] = (0, import_react478.useState)(false);
  const [headerCellWidth, setHeaderCellWidth] = (0, import_react478.useState)(0);
  (0, import_react478.useEffect)(() => {
    setHeaderCellWidth(getHeaderWidth(resizerToggleRef.current));
  }, []);
  (0, import_react478.useEffect)(() => {
    var _a2, _b;
    const elements = getResizerElements(resizerToggleRef.current);
    const document2 = (_b = (_a2 = resizerToggleRef.current) === null || _a2 === void 0 ? void 0 : _a2.ownerDocument) !== null && _b !== void 0 ? _b : window.document;
    if (!isDragging && !resizerHasFocus || !elements) {
      return;
    }
    const { insetInlineStart: inlineStartEdge, insetInlineEnd: inlineEndEdge } = getLogicalBoundingClientRect(elements.scrollParent);
    const updateTrackerPosition = (newOffset) => {
      const { insetInlineStart: scrollParentInsetInlineStart } = getLogicalBoundingClientRect(elements.table);
      elements.tracker.style.insetBlockStart = getLogicalBoundingClientRect(elements.header).blockSize + "px";
      elements.tracker.style.insetInlineStart = newOffset - scrollParentInsetInlineStart - 1 + "px";
    };
    const updateColumnWidth = (newWidth) => {
      const { insetInlineEnd, inlineSize } = getLogicalBoundingClientRect(elements.header);
      const updatedWidth = newWidth < minWidth ? minWidth : newWidth;
      updateTrackerPosition(insetInlineEnd + updatedWidth - inlineSize);
      if (newWidth >= minWidth) {
        setHeaderCellWidth(newWidth);
      }
      onWidthUpdate(newWidth);
    };
    const resizeColumn = (offset) => {
      if (offset > inlineStartEdge) {
        const cellLeft = getLogicalBoundingClientRect(elements.header).insetInlineStart;
        const newWidth = offset - cellLeft;
        updateColumnWidth(newWidth);
      }
    };
    const onAutoGrow = () => {
      const inlineSize = getLogicalBoundingClientRect(elements.header).inlineSize;
      autoGrowTimeout.current = setTimeout(onAutoGrow, AUTO_GROW_INTERVAL);
      updateColumnWidth(inlineSize + AUTO_GROW_INCREMENT);
      elements.scrollParent.scrollLeft += AUTO_GROW_INCREMENT * (getIsRtl(elements.scrollParent) ? -1 : 1);
    };
    const onMouseMove = (event) => {
      clearTimeout(autoGrowTimeout.current);
      const offset = getLogicalPageX(event);
      if (offset > inlineEndEdge) {
        autoGrowTimeout.current = setTimeout(onAutoGrow, AUTO_GROW_START_TIME);
      } else {
        resizeColumn(offset);
      }
    };
    const onMouseUp = (event) => {
      resizeColumn(getLogicalPageX(event));
      setIsDragging(false);
      onWidthUpdateCommit();
      clearTimeout(autoGrowTimeout.current);
    };
    const onKeyDown = (event) => {
      if (isKeyboardDragging) {
        const keys = [KeyCode2.left, KeyCode2.right, KeyCode2.enter, KeyCode2.right, KeyCode2.space, KeyCode2.escape];
        if (keys.indexOf(event.keyCode) !== -1) {
          event.preventDefault();
          if (isEventLike(event)) {
            handleKey2(event, {
              onActivate: () => {
                var _a3;
                setIsKeyboardDragging(false);
                (_a3 = resizerToggleRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
              },
              onEscape: () => {
                var _a3;
                setIsKeyboardDragging(false);
                (_a3 = resizerToggleRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
              },
              onInlineStart: () => updateColumnWidth(getLogicalBoundingClientRect(elements.header).inlineSize - 10),
              onInlineEnd: () => updateColumnWidth(getLogicalBoundingClientRect(elements.header).inlineSize + 10)
            });
          }
        }
      } else if (event.keyCode === KeyCode2.enter || event.keyCode === KeyCode2.space) {
        event.preventDefault();
        if (isEventLike(event)) {
          handleKey2(event, {
            onActivate: () => {
              var _a3;
              setIsKeyboardDragging(true);
              (_a3 = resizerSeparatorRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
            }
          });
        }
      }
    };
    updateTrackerPosition(getLogicalBoundingClientRect(elements.header).insetInlineEnd);
    const controller = new AbortController();
    if (isDragging) {
      document2.body.classList.add(styles_css_default165["resize-active"]);
      document2.addEventListener("mousemove", onMouseMove, { signal: controller.signal });
      document2.addEventListener("mouseup", onMouseUp, { signal: controller.signal });
    }
    if (resizerHasFocus) {
      document2.body.classList.add(styles_css_default165["resize-active-with-focus"]);
      elements.header.addEventListener("keydown", onKeyDown, { signal: controller.signal });
    }
    if (isKeyboardDragging) {
      document2.body.classList.add(styles_css_default165["resize-active"]);
    }
    return () => {
      clearTimeout(autoGrowTimeout.current);
      document2.body.classList.remove(styles_css_default165["resize-active"]);
      document2.body.classList.remove(styles_css_default165["resize-active-with-focus"]);
      controller.abort();
    };
  }, [minWidth, isDragging, isKeyboardDragging, resizerHasFocus, onWidthUpdate, onWidthUpdateCommit]);
  const { tabIndex: resizerTabIndex } = useSingleTabStopNavigation(resizerToggleRef, { tabIndex });
  return import_react478.default.createElement(
    import_react478.default.Fragment,
    null,
    import_react478.default.createElement("button", { ref: resizerToggleRef, className: clsx_m_default(styles_css_default165.resizer, (resizerHasFocus || showFocusRing || isKeyboardDragging) && styles_css_default165["has-focus"], isVisualRefresh && styles_css_default165["is-visual-refresh"]), onMouseDown: (event) => {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      setIsDragging(true);
    }, onClick: () => {
      var _a2;
      setIsDragging(false);
      setResizerHasFocus(true);
      setIsKeyboardDragging(true);
      (_a2 = resizerSeparatorRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }, onFocus: () => {
      setHeaderCellWidth(getHeaderWidth(resizerToggleRef.current));
      setResizerHasFocus(true);
    }, onBlur: (event) => {
      if (event.relatedTarget !== resizerSeparatorRef.current) {
        setResizerHasFocus(false);
      }
    }, "aria-roledescription": roleDescription, "aria-labelledby": ariaLabelledby, tabIndex: resizerTabIndex, "data-focus-id": focusId }),
    import_react478.default.createElement("span", { className: clsx_m_default(styles_css_default165["divider-interactive"], isDragging && styles_css_default165["divider-active"], isVisualRefresh && styles_css_default165["is-visual-refresh"]), "data-awsui-table-suppress-navigation": true, ref: resizerSeparatorRef, id: separatorId, role: "slider", tabIndex: -1, "aria-labelledby": ariaLabelledby, "aria-hidden": !isKeyboardDragging, "aria-valuemin": minWidth, "aria-valuemax": Number.MAX_SAFE_INTEGER, "aria-valuenow": headerCellWidth, "data-focus-id": focusId, onBlur: () => {
      setResizerHasFocus(false);
      if (isKeyboardDragging) {
        setIsKeyboardDragging(false);
      }
      onWidthUpdateCommit();
    } })
  );
}
function ResizeTracker() {
  return import_react478.default.createElement("span", { className: styles_css_default165.tracker });
}

// node_modules/@cloudscape-design/components/table/selection/selection-cell.js
var import_react480 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/header-cell/th-element.js
var import_react479 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/header-cell/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/table/header-cell/styles.scoped.css";
var styles_css_default166 = {
  "header-cell": "awsui_header-cell_1spae_wii4_149",
  "header-cell-fake-focus": "awsui_header-cell-fake-focus_1spae_wii4_183",
  "header-cell-sticky": "awsui_header-cell-sticky_1spae_wii4_204",
  "header-cell-stuck": "awsui_header-cell-stuck_1spae_wii4_207",
  "header-cell-variant-full-page": "awsui_header-cell-variant-full-page_1spae_wii4_207",
  "header-cell-hidden": "awsui_header-cell-hidden_1spae_wii4_213",
  "header-cell-variant-embedded": "awsui_header-cell-variant-embedded_1spae_wii4_216",
  "is-visual-refresh": "awsui_is-visual-refresh_1spae_wii4_216",
  "sticky-cell": "awsui_sticky-cell_1spae_wii4_216",
  "header-cell-variant-borderless": "awsui_header-cell-variant-borderless_1spae_wii4_216",
  "header-cell-sortable": "awsui_header-cell-sortable_1spae_wii4_219",
  "table-variant-full-page": "awsui_table-variant-full-page_1spae_wii4_240",
  "sticky-cell-pad-left": "awsui_sticky-cell-pad-left_1spae_wii4_243",
  "has-selection": "awsui_has-selection_1spae_wii4_243",
  "sticky-cell-last-inline-start": "awsui_sticky-cell-last-inline-start_1spae_wii4_246",
  "resize-divider": "awsui_resize-divider_1spae_wii4_251",
  "sticky-cell-last-inline-end": "awsui_sticky-cell-last-inline-end_1spae_wii4_258",
  "sorting-icon": "awsui_sorting-icon_1spae_wii4_268",
  "edit-icon": "awsui_edit-icon_1spae_wii4_276",
  "header-cell-content": "awsui_header-cell-content_1spae_wii4_282",
  "header-cell-content-expandable": "awsui_header-cell-content-expandable_1spae_wii4_288",
  "header-cell-disabled": "awsui_header-cell-disabled_1spae_wii4_340",
  "header-cell-sorted": "awsui_header-cell-sorted_1spae_wii4_340",
  "header-cell-text": "awsui_header-cell-text_1spae_wii4_354",
  "header-cell-text-wrap": "awsui_header-cell-text-wrap_1spae_wii4_358",
  "header-cell-ascending": "awsui_header-cell-ascending_1spae_wii4_364",
  "header-cell-descending": "awsui_header-cell-descending_1spae_wii4_365",
  "has-striped-rows": "awsui_has-striped-rows_1spae_wii4_479",
  "sticky-cell-pad-inline-start": "awsui_sticky-cell-pad-inline-start_1spae_wii4_479",
  "header-cell-resizable": "awsui_header-cell-resizable_1spae_wii4_491"
};

// node_modules/@cloudscape-design/components/table/header-cell/th-element.js
function TableThElement(_a2) {
  var { resizableStyle, sortingStatus, sortingDisabled, focusedComponent, stuck, sticky, resizable, hidden, stripedRows, isSelection, colIndex, columnId, stickyState, cellRef, tableRole, children: children2, variant, ariaLabel, tableVariant } = _a2, props2 = __rest(_a2, ["resizableStyle", "sortingStatus", "sortingDisabled", "focusedComponent", "stuck", "sticky", "resizable", "hidden", "stripedRows", "isSelection", "colIndex", "columnId", "stickyState", "cellRef", "tableRole", "children", "variant", "ariaLabel", "tableVariant"]);
  const isVisualRefresh = useVisualRefresh();
  const stickyStyles = useStickyCellStyles({
    stickyColumns: stickyState,
    columnId,
    getClassName: (props3) => getStickyClassNames(styles_css_default166, props3)
  });
  const cellRefObject = (0, import_react479.useRef)(null);
  const mergedRef = useMergeRefs(stickyStyles.ref, cellRef, cellRefObject);
  const { tabIndex: cellTabIndex } = useSingleTabStopNavigation(cellRefObject);
  return import_react479.default.createElement("th", Object.assign({ "data-focus-id": `header-${String(columnId)}`, className: clsx_m_default(styles_css_default166["header-cell"], styles_css_default166[`header-cell-variant-${variant}`], sticky && styles_css_default166["header-cell-sticky"], resizable && styles_css_default166["header-cell-resizable"], stuck && styles_css_default166["header-cell-stuck"], stripedRows && styles_css_default166["has-striped-rows"], isVisualRefresh && styles_css_default166["is-visual-refresh"], isSelection && clsx_m_default(styles_css_default109["selection-control"], styles_css_default109["selection-control-header"]), tableVariant && styles_css_default166[`table-variant-${tableVariant}`], {
    [styles_css_default166["header-cell-fake-focus"]]: focusedComponent === `header-${String(columnId)}`,
    [styles_css_default166["header-cell-sortable"]]: sortingStatus,
    [styles_css_default166["header-cell-sorted"]]: sortingStatus === "ascending" || sortingStatus === "descending",
    [styles_css_default166["header-cell-disabled"]]: sortingDisabled,
    [styles_css_default166["header-cell-ascending"]]: sortingStatus === "ascending",
    [styles_css_default166["header-cell-descending"]]: sortingStatus === "descending",
    [styles_css_default166["header-cell-hidden"]]: hidden
  }, stickyStyles.className), style: Object.assign(Object.assign({}, resizableStyle), stickyStyles.style), ref: mergedRef }, getTableColHeaderRoleProps({ tableRole, sortingStatus, colIndex }), { tabIndex: cellTabIndex === -1 ? void 0 : cellTabIndex }, copyAnalyticsMetadataAttribute(props2), ariaLabel ? { "aria-label": ariaLabel } : {}), children2);
}

// node_modules/@cloudscape-design/components/table/selection/selection-cell.js
function TableHeaderSelectionCell(_a2) {
  var { focusedComponent, singleSelectionHeaderAriaLabel, getSelectAllProps, onFocusMove } = _a2, props2 = __rest(_a2, ["focusedComponent", "singleSelectionHeaderAriaLabel", "getSelectAllProps", "onFocusMove"]);
  const selectAllProps = getSelectAllProps ? getSelectAllProps() : void 0;
  return import_react480.default.createElement(
    TableThElement,
    Object.assign({}, props2, { isSelection: true, colIndex: 0, focusedComponent, ariaLabel: selectAllProps === null || selectAllProps === void 0 ? void 0 : selectAllProps.selectionGroupLabel }, getAnalyticsMetadataAttribute({
      action: (selectAllProps === null || selectAllProps === void 0 ? void 0 : selectAllProps.checked) ? "deselectAll" : "selectAll"
    })),
    selectAllProps ? import_react480.default.createElement(SelectionControl, Object.assign({ onFocusDown: (event) => {
      onFocusMove(event.target, -1, 1);
    }, focusedComponent }, selectAllProps, props2.sticky ? { tabIndex: -1 } : {})) : import_react480.default.createElement(ScreenreaderOnly, null, singleSelectionHeaderAriaLabel),
    import_react480.default.createElement(Divider, { className: styles_css_default109["resize-divider"] })
  );
}
function TableBodySelectionCell(_a2) {
  var { selectionControlProps } = _a2, props2 = __rest(_a2, ["selectionControlProps"]);
  return import_react480.default.createElement(TableTdElement, Object.assign({}, props2, { isSelection: true, wrapLines: false, isEditable: false, isEditing: false, colIndex: 0 }), selectionControlProps ? import_react480.default.createElement(SelectionControl, Object.assign({}, selectionControlProps, { verticalAlign: props2.verticalAlign })) : null);
}

// node_modules/@cloudscape-design/components/table/sticky-header.js
var import_react484 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/thead.js
var import_react482 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/header-cell/index.js
var import_react481 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/header-cell/utils.js
var stateToIcon = {
  sortable: "caret-down",
  ascending: "caret-up-filled",
  descending: "caret-down-filled"
};
var getSortingStatus = (sortable, sorted, descending2, disabled) => {
  if (sorted) {
    if (descending2) {
      return "descending";
    }
    return "ascending";
  }
  if (sortable && !disabled) {
    return "sortable";
  }
  return void 0;
};
var getSortingIconName = (sortingState) => stateToIcon[sortingState];
var isSorted = (column, sortingColumn) => column === sortingColumn || column.sortingField !== void 0 && column.sortingField === sortingColumn.sortingField || column.sortingComparator !== void 0 && column.sortingComparator === sortingColumn.sortingComparator;
var getSortingColumnId = (columnDefinitions = [], sortingColumn) => {
  if (!sortingColumn) {
    return null;
  }
  for (let i2 = 0; i2 < columnDefinitions.length; i2++) {
    if (isSorted(columnDefinitions[i2], sortingColumn)) {
      return columnDefinitions[i2].id || null;
    }
  }
  return null;
};

// node_modules/@cloudscape-design/components/table/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/table/analytics-metadata/styles.scoped.css";
var styles_css_default167 = {
  "header-cell-text": "awsui_header-cell-text_dpuyq_1id1o_5"
};

// node_modules/@cloudscape-design/components/table/header-cell/index.js
function TableHeaderCell({ tabIndex, column, activeSortingColumn, sortingDescending, sortingDisabled, wrapLines, focusedComponent, stuck, sticky, hidden, stripedRows, onClick, colIndex, updateColumn, resizableColumns, resizableStyle, onResizeFinish, isEditable, columnId, stickyState, cellRef, tableRole, resizerRoleDescription, isExpandable, hasDynamicContent, variant, tableVariant }) {
  var _a2;
  const i18n = useInternalI18n("table");
  const sortable = !!column.sortingComparator || !!column.sortingField;
  const sorted = !!activeSortingColumn && isSorted(column, activeSortingColumn);
  const sortingStatus = getSortingStatus(sortable, sorted, !!sortingDescending, !!sortingDisabled);
  const handleClick = () => onClick({
    sortingColumn: column,
    isDescending: sorted ? !sortingDescending : false
  });
  const handleKeyPress = ({ nativeEvent: e3 }) => {
    if (e3.keyCode === KeyCode2.enter || e3.keyCode === KeyCode2.space) {
      e3.preventDefault();
      handleClick();
    }
  };
  const headerId = useUniqueId("table-header-");
  const clickableHeaderRef = (0, import_react481.useRef)(null);
  const { tabIndex: clickableHeaderTabIndex } = useSingleTabStopNavigation(clickableHeaderRef, { tabIndex });
  const cellRefObject = (0, import_react481.useRef)(null);
  const cellRefCombined = useMergeRefs(cellRef, cellRefObject);
  useResizeObserver(hasDynamicContent ? cellRefObject : () => null, (entry) => {
    updateColumn(columnId, entry.borderBoxWidth);
  });
  return import_react481.default.createElement(
    TableThElement,
    Object.assign({ resizableStyle, cellRef: cellRefCombined, sortingStatus, sortingDisabled, focusedComponent, stuck, sticky, resizable: resizableColumns, hidden, stripedRows, colIndex, columnId, stickyState, tableRole, variant, tableVariant }, sortingDisabled ? {} : getAnalyticsMetadataAttribute({
      action: "sort",
      detail: {
        position: `${colIndex + 1}`,
        columnId: column.id ? `${column.id}` : "",
        label: `.${styles_css_default167["header-cell-text"]}`,
        sortingDescending: `${!sortingDescending}`
      }
    })),
    import_react481.default.createElement(
      "div",
      Object.assign({ ref: clickableHeaderRef, "data-focus-id": `sorting-control-${String(columnId)}`, className: clsx_m_default(styles_css_default166["header-cell-content"], {
        [styles_css_default166["header-cell-fake-focus"]]: focusedComponent === `sorting-control-${String(columnId)}`,
        [styles_css_default166["header-cell-content-expandable"]]: isExpandable
      }), "aria-label": column.ariaLabel ? column.ariaLabel({
        sorted,
        descending: sorted && !!sortingDescending,
        disabled: !!sortingDisabled
      }) : void 0 }, sortingStatus && !sortingDisabled ? {
        onKeyPress: handleKeyPress,
        tabIndex: clickableHeaderTabIndex,
        role: "button",
        onClick: handleClick
      } : {}),
      import_react481.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default166["header-cell-text"], styles_css_default167["header-cell-text"], wrapLines && styles_css_default166["header-cell-text-wrap"]), id: headerId },
        column.header,
        isEditable ? import_react481.default.createElement(
          "span",
          { className: styles_css_default166["edit-icon"] },
          import_react481.default.createElement(internal_default, { name: "edit", ariaLabel: i18n("columnDefinitions.editConfig.editIconAriaLabel", (_a2 = column.editConfig) === null || _a2 === void 0 ? void 0 : _a2.editIconAriaLabel) })
        ) : null
      ),
      sortingStatus && import_react481.default.createElement(
        "span",
        { className: styles_css_default166["sorting-icon"] },
        import_react481.default.createElement(internal_default, { name: getSortingIconName(sortingStatus) })
      )
    ),
    resizableColumns ? import_react481.default.createElement(Resizer, { tabIndex, focusId: `resize-control-${String(columnId)}`, showFocusRing: focusedComponent === `resize-control-${String(columnId)}`, onWidthUpdate: (newWidth) => updateColumn(columnId, newWidth), onWidthUpdateCommit: onResizeFinish, ariaLabelledby: headerId, minWidth: typeof column.minWidth === "string" ? parseInt(column.minWidth) : column.minWidth, roleDescription: i18n("ariaLabels.resizerRoleDescription", resizerRoleDescription) }) : import_react481.default.createElement(Divider, { className: styles_css_default166["resize-divider"] })
  );
}

// node_modules/@cloudscape-design/components/table/thead.js
var Thead = import_react482.default.forwardRef(({ selectionType, getSelectAllProps, columnDefinitions, sortingColumn, sortingDisabled, sortingDescending, resizableColumns, variant, tableVariant, wrapLines, onFocusMove, onSortingChange, onResizeFinish, singleSelectionHeaderAriaLabel, stripedRows, sticky = false, hidden = false, stuck = false, stickyState, selectionColumnId: selectionColumnId2, focusedComponent, onFocusedComponentChange, tableRole, resizerRoleDescription, isExpandable, setLastUserAction }, outerRef) => {
  const { getColumnStyles, columnWidths, updateColumn, setCell } = useColumnWidths();
  const commonCellProps = {
    stuck,
    sticky,
    hidden,
    stripedRows,
    tableRole,
    variant,
    tableVariant,
    stickyState
  };
  return import_react482.default.createElement(
    "thead",
    { className: clsx_m_default(!hidden && styles_css_default109["thead-active"]) },
    import_react482.default.createElement(
      "tr",
      Object.assign({}, focusMarkers.all, { ref: outerRef, "aria-rowindex": 1 }, getTableHeaderRowRoleProps({ tableRole }), { onFocus: (event) => {
        var _a2;
        const focusControlElement = findUpUntil(event.target, (element) => !!element.getAttribute("data-focus-id"));
        const focusId = (_a2 = focusControlElement === null || focusControlElement === void 0 ? void 0 : focusControlElement.getAttribute("data-focus-id")) !== null && _a2 !== void 0 ? _a2 : null;
        onFocusedComponentChange === null || onFocusedComponentChange === void 0 ? void 0 : onFocusedComponentChange(focusId);
      }, onBlur: () => onFocusedComponentChange === null || onFocusedComponentChange === void 0 ? void 0 : onFocusedComponentChange(null) }),
      selectionType ? import_react482.default.createElement(TableHeaderSelectionCell, Object.assign({}, commonCellProps, { focusedComponent, columnId: selectionColumnId2, getSelectAllProps, onFocusMove, singleSelectionHeaderAriaLabel })) : null,
      columnDefinitions.map((column, colIndex) => {
        const columnId = getColumnKey(column, colIndex);
        return import_react482.default.createElement(TableHeaderCell, Object.assign({}, commonCellProps, {
          key: columnId,
          tabIndex: sticky ? -1 : 0,
          focusedComponent,
          column,
          activeSortingColumn: sortingColumn,
          sortingDescending,
          sortingDisabled,
          wrapLines,
          colIndex: selectionType ? colIndex + 1 : colIndex,
          columnId,
          updateColumn,
          onResizeFinish: () => onResizeFinish(columnWidths),
          resizableColumns,
          resizableStyle: getColumnStyles(sticky, columnId),
          onClick: (detail) => {
            setLastUserAction("sorting");
            fireNonCancelableEvent(onSortingChange, detail);
          },
          isEditable: !!column.editConfig,
          cellRef: (node) => setCell(sticky, columnId, node),
          tableRole,
          resizerRoleDescription,
          // Expandable option is only applicable to the first data column of the table.
          // When present, the header content receives extra padding to match the first offset in the data cells.
          isExpandable: colIndex === 0 && isExpandable,
          hasDynamicContent: hidden && !resizableColumns && column.hasDynamicContent
        }));
      })
    )
  );
});
var thead_default = Thead;

// node_modules/@cloudscape-design/components/table/use-sticky-header.js
var import_react483 = __toESM(require_react());
var useStickyHeader2 = (tableRef, theadRef, secondaryTheadRef, secondaryTableRef, tableWrapperRef) => {
  const isMobile = useMobile();
  const syncColumnHeaderWidths = (0, import_react483.useCallback)(() => {
    if (tableRef.current && theadRef.current && secondaryTheadRef.current && secondaryTableRef.current && tableWrapperRef.current) {
      secondaryTableRef.current.style.inlineSize = `${tableRef.current.getBoundingClientRect().width}px`;
      tableWrapperRef.current.style.marginBlockStart = `-${theadRef.current.getBoundingClientRect().height}px`;
    }
  }, [theadRef, secondaryTheadRef, secondaryTableRef, tableWrapperRef, tableRef]);
  (0, import_react483.useLayoutEffect)(() => {
    syncColumnHeaderWidths();
  });
  useResizeObserver(theadRef, syncColumnHeaderWidths);
  const scrollToTop = () => {
    if (!isMobile && theadRef.current && secondaryTheadRef.current && tableWrapperRef.current) {
      const scrollDist = calculateScrollingOffset(theadRef.current, secondaryTheadRef.current);
      if (scrollDist > 0) {
        scrollUpBy(scrollDist, tableWrapperRef.current);
      }
    }
  };
  const { scrollToItem } = stickyScrolling(tableWrapperRef, secondaryTheadRef);
  const scrollToRow = (itemNode) => {
    if (!isMobile) {
      scrollToItem(itemNode);
    }
  };
  return { scrollToRow, scrollToTop };
};

// node_modules/@cloudscape-design/components/table/sticky-header.js
var sticky_header_default = (0, import_react484.forwardRef)(StickyHeader);
function StickyHeader({ variant, theadProps, wrapperRef, theadRef, secondaryWrapperRef, onScroll, tableRef, tableHasHeader, contentDensity, tableRole }, ref) {
  const secondaryTheadRef = (0, import_react484.useRef)(null);
  const secondaryTableRef = (0, import_react484.useRef)(null);
  const { isStuck } = (0, import_react484.useContext)(StickyHeaderContext);
  const [focusedComponent, setFocusedComponent] = (0, import_react484.useState)(null);
  const { scrollToRow, scrollToTop } = useStickyHeader2(tableRef, theadRef, secondaryTheadRef, secondaryTableRef, wrapperRef);
  (0, import_react484.useImperativeHandle)(ref, () => ({
    scrollToTop,
    scrollToRow,
    setFocus: setFocusedComponent
  }));
  return import_react484.default.createElement(
    "div",
    {
      className: clsx_m_default(styles_css_default109["header-secondary"], styles_css_default109[`variant-${variant}`], {
        [styles_css_default109["table-has-header"]]: tableHasHeader
      }),
      "aria-hidden": true,
      // Prevents receiving focus in Firefox. Focus on the overflowing table is sufficient
      // to scroll the table horizontally
      tabIndex: -1,
      ref: secondaryWrapperRef,
      onScroll
    },
    import_react484.default.createElement(
      "table",
      Object.assign({ className: clsx_m_default(styles_css_default109.table, styles_css_default109["table-layout-fixed"], contentDensity === "compact" && getVisualContextClassname("compact-table")), ref: secondaryTableRef }, getTableRoleProps({ tableRole })),
      import_react484.default.createElement(thead_default, Object.assign({ ref: secondaryTheadRef, sticky: true, stuck: isStuck, focusedComponent }, theadProps))
    )
  );
}

// node_modules/@cloudscape-design/components/table/sticky-scrollbar/sticky-scrollbar.js
var import_react486 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/sticky-scrollbar/use-sticky-scrollbar.js
var import_react485 = __toESM(require_react());

// node_modules/@cloudscape-design/components/table/sticky-scrollbar/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/table/sticky-scrollbar/styles.scoped.css";
var styles_css_default168 = {
  "sticky-scrollbar": "awsui_sticky-scrollbar_faqt8_105xs_181",
  "sticky-scrollbar-content": "awsui_sticky-scrollbar-content_faqt8_105xs_193",
  "sticky-scrollbar-visible": "awsui_sticky-scrollbar-visible_faqt8_105xs_196",
  "sticky-scrollbar-native-invisible": "awsui_sticky-scrollbar-native-invisible_faqt8_105xs_199",
  "sticky-scrollbar-offset": "awsui_sticky-scrollbar-offset_faqt8_105xs_202",
  "is-visual-refresh": "awsui_is-visual-refresh_faqt8_105xs_205"
};

// node_modules/@cloudscape-design/components/table/sticky-scrollbar/use-sticky-scrollbar.js
var updatePosition = (tableEl, wrapperEl, scrollbarEl, scrollbarContentEl, inScrollableContainer) => {
  if (!tableEl || !scrollbarEl || !wrapperEl) {
    return;
  }
  const { inlineSize: tableInlineSize } = getLogicalBoundingClientRect(tableEl);
  const { inlineSize: wrapperInlineSize } = getLogicalBoundingClientRect(wrapperEl);
  const scrollbarHeight = browserScrollbarSize().height;
  const areaIsScrollable = tableInlineSize > wrapperInlineSize;
  if (!areaIsScrollable) {
    scrollbarEl.classList.remove(styles_css_default168["sticky-scrollbar-visible"]);
  } else {
    if (!scrollbarEl.classList.contains(styles_css_default168["sticky-scrollbar-visible"])) {
      requestAnimationFrame(() => {
        scrollbarEl.scrollLeft = wrapperEl.scrollLeft;
      });
    }
    scrollbarEl.classList.add(styles_css_default168["sticky-scrollbar-visible"]);
    if (!scrollbarHeight) {
      scrollbarEl.classList.add(styles_css_default168["sticky-scrollbar-native-invisible"]);
    }
  }
  if (scrollbarHeight && scrollbarEl && scrollbarContentEl) {
    scrollbarEl.style.blockSize = `${scrollbarHeight}px`;
    scrollbarContentEl.style.blockSize = `${scrollbarHeight}px`;
  }
  if (tableEl && wrapperEl && scrollbarContentEl && scrollbarEl) {
    const wrapperElRect = getLogicalBoundingClientRect(wrapperEl);
    const tableElRect = getLogicalBoundingClientRect(tableEl);
    scrollbarEl.style.inlineSize = `${wrapperElRect.inlineSize}px`;
    scrollbarContentEl.style.inlineSize = `${tableElRect.inlineSize}px`;
    scrollbarEl.style.insetBlockEnd = inScrollableContainer ? "0px" : `var(${global_vars_default.stickyVerticalBottomOffset}, 0px)`;
  }
};
function useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, offsetScrollbar) {
  const [inScrollableContainer, setInScrollableContainer] = (0, import_react485.useState)(false);
  const wrapperEl = wrapperRef.current;
  (0, import_react485.useEffect)(() => {
    if (wrapperEl) {
      setInScrollableContainer(!!getContainingBlock(wrapperEl) || !!getOverflowParents(wrapperEl)[0]);
    }
  }, [wrapperEl]);
  (0, import_react485.useEffect)(() => {
    if (wrapperRef.current && tableRef.current && typeof ResizeObserver !== "undefined") {
      const observer2 = new ResizeObserver(() => {
        if (scrollbarContentRef.current) {
          updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, inScrollableContainer);
        }
      });
      observer2.observe(wrapperRef.current);
      observer2.observe(tableRef.current);
      return () => {
        observer2.disconnect();
      };
    }
  }, [scrollbarContentRef, scrollbarRef, tableRef, wrapperRef, inScrollableContainer, offsetScrollbar]);
  (0, import_react485.useEffect)(() => {
    const resizeHandler = () => {
      updatePosition(tableRef.current, wrapperRef.current, scrollbarRef.current, scrollbarContentRef.current, inScrollableContainer);
    };
    resizeHandler();
    window.addEventListener("resize", resizeHandler);
    return () => {
      window.removeEventListener("resize", resizeHandler);
    };
  }, [tableRef, wrapperRef, scrollbarRef, scrollbarContentRef, inScrollableContainer]);
}

// node_modules/@cloudscape-design/components/table/sticky-scrollbar/sticky-scrollbar.js
var sticky_scrollbar_default = (0, import_react486.forwardRef)(StickyScrollbar);
function StickyScrollbar({ wrapperRef, tableRef, onScroll, hasStickyColumns }, ref) {
  const isVisualRefresh = useVisualRefresh();
  const scrollbarRef = import_react486.default.useRef(null);
  const scrollbarContentRef = import_react486.default.useRef(null);
  const mergedRef = useMergeRefs(ref, scrollbarRef);
  const offsetScrollbar = hasStickyColumns || browserScrollbarSize().height === 0;
  useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, offsetScrollbar);
  const { ref: stickyDetectionRef, isIntersecting: isStickyDetectionVisible } = useIntersectionObserver();
  return import_react486.default.createElement(
    import_react486.default.Fragment,
    null,
    import_react486.default.createElement(
      "div",
      { ref: mergedRef, className: clsx_m_default(styles_css_default168["sticky-scrollbar"], offsetScrollbar && styles_css_default168["sticky-scrollbar-offset"], isVisualRefresh && styles_css_default168["is-visual-refresh"]), onScroll, "data-stuck": !isStickyDetectionVisible },
      import_react486.default.createElement("div", { ref: scrollbarContentRef, className: styles_css_default168["sticky-scrollbar-content"] })
    ),
    import_react486.default.createElement("div", { ref: stickyDetectionRef, style: { position: "absolute", right: 0, bottom: 0, left: 0, height: 1 } })
  );
}

// node_modules/@cloudscape-design/components/table/use-cell-editing.js
var import_react487 = __toESM(require_react());
function useCellEditing({ onCancel, onSubmit }) {
  const [currentEditCell, setCurrentEditCell] = (0, import_react487.useState)(null);
  const [lastSuccessfulEditCell, setLastSuccessfulEditCell] = (0, import_react487.useState)(null);
  const [currentEditLoading, setCurrentEditLoading] = (0, import_react487.useState)(false);
  const startEdit = (cellId) => {
    setLastSuccessfulEditCell(null);
    setCurrentEditCell(cellId);
  };
  const cancelEdit = (0, import_react487.useCallback)(() => setCurrentEditCell(null), []);
  const completeEdit = (cellId, editCancelled) => {
    const eventCancelled = fireCancelableEvent(onCancel, {});
    if (!eventCancelled) {
      setCurrentEditCell(null);
      if (!editCancelled) {
        setLastSuccessfulEditCell(cellId);
      }
    }
  };
  const checkEditing = ({ row, col }) => row === (currentEditCell === null || currentEditCell === void 0 ? void 0 : currentEditCell.row) && col === currentEditCell.col;
  const checkLastSuccessfulEdit = ({ row, col }) => row === (lastSuccessfulEditCell === null || lastSuccessfulEditCell === void 0 ? void 0 : lastSuccessfulEditCell.row) && col === lastSuccessfulEditCell.col;
  const submitEdit = onSubmit ? (...args) => __awaiter(this, void 0, void 0, function* () {
    setCurrentEditLoading(true);
    try {
      yield onSubmit(...args);
    } finally {
      setCurrentEditLoading(false);
    }
  }) : void 0;
  return {
    isLoading: currentEditLoading,
    startEdit,
    cancelEdit,
    checkEditing,
    checkLastSuccessfulEdit,
    completeEdit,
    submitEdit
  };
}

// node_modules/@cloudscape-design/components/table/use-prevent-sticky-click-scroll.js
var import_react488 = __toESM(require_react());
var _ScrollLock_timeoutId;
var _ScrollLock_scrollLeft;
var _ScrollLock_active;
var stickyCellSelector = `.${styles_css_default163["sticky-cell"]}`;
var scrollLockTimeout = 50;
function usePreventStickyClickScroll(wrapperRefObject) {
  (0, import_react488.useEffect)(() => {
    if (wrapperRefObject.current) {
      const wrapperEl = wrapperRefObject.current;
      const scrollLock = new ScrollLock();
      const onClick = (event) => {
        if (event.target && event.target instanceof HTMLElement && (event.target.matches(stickyCellSelector) || event.target.closest(stickyCellSelector))) {
          scrollLock.set(wrapperEl.scrollLeft);
        }
      };
      wrapperEl.addEventListener("click", onClick);
      const onScroll = () => {
        if (scrollLock.active) {
          wrapperEl.scrollLeft = scrollLock.scrollLeft;
          scrollLock.clear();
        }
      };
      wrapperEl.addEventListener("scroll", onScroll);
      return () => {
        wrapperEl.removeEventListener("click", onClick);
        wrapperEl.removeEventListener("scroll", onScroll);
      };
    }
  }, [wrapperRefObject]);
}
var ScrollLock = class {
  constructor() {
    _ScrollLock_timeoutId.set(this, setTimeout(() => {
    }, 0));
    _ScrollLock_scrollLeft.set(this, 0);
    _ScrollLock_active.set(this, false);
  }
  set(scrollLeft) {
    if (!__classPrivateFieldGet(this, _ScrollLock_active, "f")) {
      __classPrivateFieldSet(this, _ScrollLock_active, true, "f");
      __classPrivateFieldSet(this, _ScrollLock_scrollLeft, scrollLeft, "f");
      __classPrivateFieldSet(this, _ScrollLock_timeoutId, setTimeout(() => __classPrivateFieldSet(this, _ScrollLock_active, false, "f"), scrollLockTimeout), "f");
    }
  }
  clear() {
    __classPrivateFieldSet(this, _ScrollLock_active, false, "f");
    clearTimeout(__classPrivateFieldGet(this, _ScrollLock_timeoutId, "f"));
  }
  get active() {
    return __classPrivateFieldGet(this, _ScrollLock_active, "f");
  }
  get scrollLeft() {
    return __classPrivateFieldGet(this, _ScrollLock_scrollLeft, "f");
  }
};
_ScrollLock_timeoutId = /* @__PURE__ */ new WeakMap(), _ScrollLock_scrollLeft = /* @__PURE__ */ new WeakMap(), _ScrollLock_active = /* @__PURE__ */ new WeakMap();

// node_modules/@cloudscape-design/components/table/use-row-events.js
function useRowEvents({ onRowClick, onRowContextMenu }) {
  const onRowClickHandler = (rowIndex, item, event) => {
    const tableCell = findUpUntil(event.target, (element) => element.tagName.toLowerCase() === "td");
    if (!tableCell || !tableCell.classList.contains(styles_css_default109["selection-control"])) {
      const details = { rowIndex, item };
      fireNonCancelableEvent(onRowClick, details);
    }
  };
  const onRowContextMenuHandler = (rowIndex, item, event) => {
    const details = {
      rowIndex,
      item,
      clientX: event.clientX,
      clientY: event.clientY
    };
    fireCancelableEvent(onRowContextMenu, details, event);
  };
  return {
    onRowClickHandler: onRowClick && onRowClickHandler,
    onRowContextMenuHandler: onRowContextMenu && onRowContextMenuHandler
  };
}

// node_modules/@cloudscape-design/components/table/use-table-focus-navigation.js
var import_react489 = __toESM(require_react());
function iterateTableCells(table, func) {
  table.querySelectorAll("tr").forEach((row, rowIndex) => {
    row.querySelectorAll("td").forEach((cell, cellIndex) => {
      func(cell, rowIndex, cellIndex);
    });
  });
}
function useTableFocusNavigation({ enableKeyboardNavigation, selectionType, tableRoot, columnDefinitions, numRows }) {
  const focusableColumns = (0, import_react489.useMemo)(() => {
    const cols = columnDefinitions.map((column) => !!column.editConfig);
    if (selectionType) {
      cols.unshift(false);
    }
    return cols;
  }, [columnDefinitions, selectionType]);
  const maxColumnIndex = focusableColumns.length - 1;
  const minColumnIndex = selectionType ? 1 : 0;
  const focusCell = (0, import_react489.useCallback)((rowIndex, columnIndex) => {
    if (tableRoot === null || tableRoot === void 0 ? void 0 : tableRoot.current) {
      iterateTableCells(tableRoot.current, (cell, rIndex, cIndex) => {
        var _a2;
        if (rIndex === rowIndex && cIndex === columnIndex) {
          const editButton = cell.querySelector("button:last-child");
          if (editButton) {
            (_a2 = editButton.focus) === null || _a2 === void 0 ? void 0 : _a2.call(editButton);
            scrollElementIntoView(editButton);
          }
        }
      });
    }
  }, [tableRoot]);
  const shiftFocus = (0, import_react489.useCallback)((vertical, horizontal) => {
    var _a2;
    const focusedCell = (_a2 = tableRoot.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector("td:focus-within");
    if (!focusedCell) {
      return;
    }
    const columnIndex = focusedCell.cellIndex;
    const rowIndex = focusedCell.parentElement.rowIndex;
    let newRowIndex = rowIndex;
    let newColumnIndex = columnIndex;
    if (vertical !== 0) {
      newRowIndex = Math.min(numRows, Math.max(rowIndex + vertical, 0));
    }
    if (horizontal !== 0) {
      while (newColumnIndex <= maxColumnIndex && newColumnIndex >= minColumnIndex) {
        newColumnIndex += horizontal;
        if (focusableColumns[newColumnIndex]) {
          break;
        }
      }
    }
    if ((rowIndex !== newRowIndex || columnIndex !== newColumnIndex) && tableRoot.current) {
      focusCell(newRowIndex, newColumnIndex);
    }
  }, [focusCell, focusableColumns, maxColumnIndex, minColumnIndex, numRows, tableRoot]);
  const handleArrowKeyEvents = (0, import_react489.useCallback)((event) => {
    var _a2, _b;
    const abort = !!((_a2 = tableRoot.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector('[data-inline-editing-active = "true"]')) || !((_b = document.activeElement) === null || _b === void 0 ? void 0 : _b.closest("[data-inline-editing-active]"));
    if (abort) {
      return;
    }
    switch (event.key) {
      case "ArrowUp":
        event.preventDefault();
        shiftFocus(-1, 0);
        break;
      case "ArrowDown":
        event.preventDefault();
        shiftFocus(1, 0);
        break;
      case "ArrowLeft":
        event.preventDefault();
        shiftFocus(0, -1);
        break;
      case "ArrowRight":
        event.preventDefault();
        shiftFocus(0, 1);
        break;
      // istanbul ignore next (default case = do nothing, not testable)
      default:
        return;
    }
  }, [shiftFocus, tableRoot]);
  (0, import_react489.useEffect)(() => {
    if (!tableRoot.current || enableKeyboardNavigation) {
      return;
    }
    const tableElement = tableRoot.current;
    tableRoot.current.addEventListener("keydown", handleArrowKeyEvents);
    return () => tableElement && tableElement.removeEventListener("keydown", handleArrowKeyEvents);
  }, [enableKeyboardNavigation, focusableColumns, handleArrowKeyEvents, tableRoot]);
}
var use_table_focus_navigation_default = useTableFocusNavigation;

// node_modules/@cloudscape-design/components/table/internal.js
var GRID_NAVIGATION_PAGE_SIZE = 10;
var SELECTION_COLUMN_WIDTH = 54;
var selectionColumnId = Symbol("selection-column-id");
var InternalTableAsSubstep = import_react490.default.forwardRef((props2, ref) => {
  const { funnelSubStepProps } = useFunnelSubStep();
  const tableProps = Object.assign(Object.assign({}, props2), { __funnelSubStepProps: funnelSubStepProps });
  return import_react490.default.createElement(InternalTable, Object.assign({}, tableProps, { ref }));
});
var InternalTable = import_react490.default.forwardRef((_a2, ref) => {
  var _b, _c, _d;
  var { header, footer, empty, filter, pagination, preferences, items, columnDefinitions, trackBy, loading, loadingText, selectionType, selectedItems, isItemDisabled, ariaLabels, onSelectionChange, onSortingChange, sortingColumn, sortingDescending, sortingDisabled, visibleColumns, stickyHeader, stickyHeaderVerticalOffset, onRowClick, onRowContextMenu, wrapLines, stripedRows, contentDensity, submitEdit, onEditCancel, resizableColumns, onColumnWidthsChange, variant, __internalRootRef, totalItemsCount, firstIndex, renderAriaLive, stickyColumns, columnDisplay, enableKeyboardNavigation, expandableRows, getLoadingStatus, renderLoaderPending, renderLoaderLoading, renderLoaderError, renderLoaderEmpty, cellVerticalAlign, __funnelSubStepProps } = _a2, rest = __rest(_a2, ["header", "footer", "empty", "filter", "pagination", "preferences", "items", "columnDefinitions", "trackBy", "loading", "loadingText", "selectionType", "selectedItems", "isItemDisabled", "ariaLabels", "onSelectionChange", "onSortingChange", "sortingColumn", "sortingDescending", "sortingDisabled", "visibleColumns", "stickyHeader", "stickyHeaderVerticalOffset", "onRowClick", "onRowContextMenu", "wrapLines", "stripedRows", "contentDensity", "submitEdit", "onEditCancel", "resizableColumns", "onColumnWidthsChange", "variant", "__internalRootRef", "totalItemsCount", "firstIndex", "renderAriaLive", "stickyColumns", "columnDisplay", "enableKeyboardNavigation", "expandableRows", "getLoadingStatus", "renderLoaderPending", "renderLoaderLoading", "renderLoaderError", "renderLoaderEmpty", "cellVerticalAlign", "__funnelSubStepProps"]);
  if (expandableRows && enableKeyboardNavigation === void 0) {
    enableKeyboardNavigation = true;
  }
  const baseProps = getBaseProps(rest);
  const prevStickyHeader = usePrevious(stickyHeader);
  if (prevStickyHeader !== void 0 && !!stickyHeader !== !!prevStickyHeader) {
    warnOnce("Table", `\`stickyHeader\` has changed from "${prevStickyHeader}" to "${stickyHeader}". It is not recommended to change the value of this property during the component lifecycle. Please set it to either "true" or "false" unconditionally.`);
  }
  const isMobile = useMobile();
  const { isExpandable, allItems, getExpandableItemProps } = useExpandableTableProps({
    items,
    expandableRows,
    trackBy,
    ariaLabels
  });
  const { allRows } = useProgressiveLoadingProps({
    items: allItems,
    getLoadingStatus,
    getExpandableItemProps
  });
  const [containerWidth, wrapperMeasureRef] = useContainerQuery((rect) => rect.borderBoxWidth);
  const wrapperMeasureRefObject = (0, import_react490.useRef)(null);
  const wrapperMeasureMergedRef = useMergeRefs(wrapperMeasureRef, wrapperMeasureRefObject);
  const [tableWidth, tableMeasureRef] = useContainerQuery((rect) => rect.borderBoxWidth);
  const tableRefObject = (0, import_react490.useRef)(null);
  const secondaryWrapperRef = import_react490.default.useRef(null);
  const theadRef = (0, import_react490.useRef)(null);
  const stickyHeaderRef = import_react490.default.useRef(null);
  const scrollbarRef = import_react490.default.useRef(null);
  const _e = useCellEditing({ onCancel: onEditCancel, onSubmit: submitEdit }), { cancelEdit } = _e, cellEditing = __rest(_e, ["cancelEdit"]);
  const paginationRef = (0, import_react490.useRef)({});
  const filterRef = (0, import_react490.useRef)({});
  const preferencesRef = (0, import_react490.useRef)({});
  const headerRef = (0, import_react490.useRef)({});
  const getHeaderText = () => {
    var _a3, _b2, _c2, _d2;
    return (_c2 = (_b2 = (_a3 = toolsHeaderPerformanceMarkRef.current) === null || _a3 === void 0 ? void 0 : _a3.querySelector(`.${styles_css_default73["heading-text"]}`)) === null || _b2 === void 0 ? void 0 : _b2.innerText) !== null && _c2 !== void 0 ? _c2 : (_d2 = toolsHeaderPerformanceMarkRef.current) === null || _d2 === void 0 ? void 0 : _d2.innerText;
  };
  const getPatternIdentifier = () => {
    var _a3;
    const hasActions = !!((_a3 = toolsHeaderPerformanceMarkRef.current) === null || _a3 === void 0 ? void 0 : _a3.querySelector(`.${styles_css_default73.actions} .${styles_css_default8.button}`));
    if (hasActions) {
      return "table-with-actions";
    }
    return "";
  };
  const performanceMarkAttributes = usePerformanceMarks("table", () => !loading, tableRefObject, () => ({
    loading: loading !== null && loading !== void 0 ? loading : false,
    header: getHeaderText()
  }), [loading]);
  const analyticsMetadata = getAnalyticsMetadataProps(rest);
  const interactionMetadata = () => {
    const filterData = filterRef.current;
    const paginationData = paginationRef.current;
    return JSON.stringify({
      filterData,
      paginationData,
      sortingColumn: sortingColumn === null || sortingColumn === void 0 ? void 0 : sortingColumn.sortingField,
      sortingOrder: sortingColumn ? sortingDescending ? "Descending" : "Ascending" : void 0
    });
  };
  const getComponentConfiguration = () => {
    var _a3, _b2, _c2, _d2, _e2, _f, _g, _h, _j, _k, _l;
    const headerData = headerRef.current;
    const filterData = filterRef.current;
    const paginationData = paginationRef.current;
    const preferencesData = preferencesRef.current;
    return {
      variant,
      flowType: (_a3 = rest.analyticsMetadata) === null || _a3 === void 0 ? void 0 : _a3.flowType,
      resourceType: (_b2 = rest.analyticsMetadata) === null || _b2 === void 0 ? void 0 : _b2.resourceType,
      instanceIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier,
      taskName: (_c2 = analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier) !== null && _c2 !== void 0 ? _c2 : getHeaderText(),
      uxTaskName: getHeaderText(),
      patternIdentifier: getPatternIdentifier(),
      sortedBy: {
        columnId: sortingColumn === null || sortingColumn === void 0 ? void 0 : sortingColumn.sortingField,
        sortingOrder: sortingColumn ? sortingDescending ? "desc" : "asc" : void 0
      },
      filtered: (_d2 = filterData === null || filterData === void 0 ? void 0 : filterData.filtered) !== null && _d2 !== void 0 ? _d2 : null,
      filteredBy: (_e2 = filterData === null || filterData === void 0 ? void 0 : filterData.filteredBy) !== null && _e2 !== void 0 ? _e2 : [],
      filteredCount: (_f = filterData === null || filterData === void 0 ? void 0 : filterData.filterCount) !== null && _f !== void 0 ? _f : null,
      totalNumberOfResources: (_g = headerData === null || headerData === void 0 ? void 0 : headerData.totalCount) !== null && _g !== void 0 ? _g : null,
      tablePreferences: {
        visibleColumns: (_h = preferencesData === null || preferencesData === void 0 ? void 0 : preferencesData.visibleColumns) !== null && _h !== void 0 ? _h : [],
        resourcesPerPage: (_j = preferencesData === null || preferencesData === void 0 ? void 0 : preferencesData.pageSize) !== null && _j !== void 0 ? _j : null
      },
      pagination: {
        currentPageIndex: (_k = paginationData === null || paginationData === void 0 ? void 0 : paginationData.currentPageIndex) !== null && _k !== void 0 ? _k : 0,
        totalNumberOfPages: (paginationData === null || paginationData === void 0 ? void 0 : paginationData.openEnd) ? null : (_l = paginationData === null || paginationData === void 0 ? void 0 : paginationData.totalPageCount) !== null && _l !== void 0 ? _l : null,
        openEnd: Boolean(paginationData === null || paginationData === void 0 ? void 0 : paginationData.openEnd)
      },
      resourcesSelected: (selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.length) > 0
    };
  };
  const { setLastUserAction, tableInteractionAttributes } = useTableInteractionMetrics({
    elementRef: tableRefObject,
    loading,
    items,
    instanceIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier,
    itemCount: items.length,
    getComponentIdentifier: getHeaderText,
    getComponentConfiguration,
    interactionMetadata
  });
  (0, import_react490.useImperativeHandle)(ref, () => {
    var _a3;
    return {
      scrollToTop: ((_a3 = stickyHeaderRef.current) === null || _a3 === void 0 ? void 0 : _a3.scrollToTop) || (() => void 0),
      cancelEdit
    };
  }, [cancelEdit]);
  const wrapperRefObject = (0, import_react490.useRef)(null);
  const handleScroll = useScrollSync([wrapperRefObject, scrollbarRef, secondaryWrapperRef]);
  const { moveFocusDown, moveFocusUp, moveFocus } = useSelectionFocusMove(selectionType, allItems.length);
  const { onRowClickHandler, onRowContextMenuHandler } = useRowEvents({ onRowClick, onRowContextMenu });
  const visibleColumnDefinitions = getVisibleColumnDefinitions({
    columnDefinitions,
    columnDisplay,
    visibleColumns
  });
  const { isItemSelected, getSelectAllProps, getItemSelectionProps } = useSelection({
    items: allItems,
    trackBy,
    selectedItems,
    selectionType,
    isItemDisabled,
    onSelectionChange,
    ariaLabels: Object.assign(Object.assign({}, ariaLabels), {
      // `selectionGroupLabel` should not be part of the selection control, it is already part of the selection column header.
      selectionGroupLabel: void 0
    }),
    loading,
    setLastUserAction
  });
  const isRowSelected = (row) => row.type === "data" && isItemSelected(row.item);
  if (isDevelopment2) {
    if (resizableColumns) {
      checkColumnWidths(columnDefinitions);
    }
    if (sortingColumn === null || sortingColumn === void 0 ? void 0 : sortingColumn.sortingComparator) {
      checkSortingState(columnDefinitions, sortingColumn.sortingComparator);
    }
  }
  const isVisualRefresh = useVisualRefresh();
  const computedVariant = isVisualRefresh ? variant : ["embedded", "full-page"].indexOf(variant) > -1 ? "container" : variant;
  const hasHeader = !!(header || filter || pagination || preferences);
  const hasSelection = !!selectionType;
  const hasFooterPagination = isMobile && variant === "full-page" && !!pagination;
  const hasFooter = !!footer || hasFooterPagination;
  const headerIdRef = (0, import_react490.useRef)(void 0);
  const isLabelledByHeader = !(ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tableLabel) && !!header;
  const ariaLabelledby = isLabelledByHeader && headerIdRef.current ? headerIdRef.current : void 0;
  const setHeaderRef = (0, import_react490.useCallback)((id) => {
    headerIdRef.current = id;
  }, []);
  const visibleColumnWidthsWithSelection = [];
  const visibleColumnIdsWithSelection = [];
  if (hasSelection) {
    visibleColumnWidthsWithSelection.push({ id: selectionColumnId, width: SELECTION_COLUMN_WIDTH });
    visibleColumnIdsWithSelection.push(selectionColumnId);
  }
  for (let columnIndex = 0; columnIndex < visibleColumnDefinitions.length; columnIndex++) {
    const columnId = getColumnKey(visibleColumnDefinitions[columnIndex], columnIndex);
    visibleColumnWidthsWithSelection.push(Object.assign(Object.assign({}, visibleColumnDefinitions[columnIndex]), { id: columnId }));
    visibleColumnIdsWithSelection.push(columnId);
  }
  const stickyState = useStickyColumns({
    visibleColumns: visibleColumnIdsWithSelection,
    stickyColumnsFirst: ((_b = stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.first) !== null && _b !== void 0 ? _b : 0) + ((stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.first) && hasSelection ? 1 : 0),
    stickyColumnsLast: (stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.last) || 0
  });
  const hasStickyColumns = !!(((_c = stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.first) !== null && _c !== void 0 ? _c : 0) + ((_d = stickyColumns === null || stickyColumns === void 0 ? void 0 : stickyColumns.last) !== null && _d !== void 0 ? _d : 0) > 0);
  const hasEditableCells = !!columnDefinitions.find((col) => col.editConfig);
  let tableRole = "table";
  if (isExpandable) {
    tableRole = "treegrid";
  } else if (enableKeyboardNavigation) {
    tableRole = "grid";
  } else if (hasEditableCells) {
    tableRole = "grid-default";
  }
  const theadProps = {
    selectionType,
    getSelectAllProps,
    columnDefinitions: visibleColumnDefinitions,
    variant: computedVariant,
    tableVariant: computedVariant,
    wrapLines,
    resizableColumns,
    sortingColumn,
    sortingDisabled,
    sortingDescending,
    onSortingChange,
    onFocusMove: moveFocus,
    onResizeFinish(newWidth) {
      const widthsDetail = columnDefinitions.map((column, index) => newWidth.get(getColumnKey(column, index)) || column.width || DEFAULT_COLUMN_WIDTH);
      const widthsChanged = widthsDetail.some((width, index) => columnDefinitions[index].width !== width);
      if (widthsChanged) {
        fireNonCancelableEvent(onColumnWidthsChange, { widths: widthsDetail });
      }
    },
    singleSelectionHeaderAriaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.selectionGroupLabel,
    resizerRoleDescription: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.resizerRoleDescription,
    stripedRows,
    stickyState,
    selectionColumnId,
    tableRole,
    isExpandable,
    setLastUserAction
  };
  usePreventStickyClickScroll(wrapperRefObject);
  const wrapperRef = useMergeRefs(wrapperRefObject, stickyState.refs.wrapper);
  const tableRef = useMergeRefs(tableMeasureRef, tableRefObject, stickyState.refs.table);
  const wrapperProps = getTableWrapperRoleProps({
    tableRole,
    isScrollable: !!(tableWidth && containerWidth && tableWidth > containerWidth),
    ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tableLabel,
    ariaLabelledby
  });
  const getMouseDownTarget = useMouseDownTarget();
  use_table_focus_navigation_default({
    enableKeyboardNavigation,
    selectionType,
    tableRoot: tableRefObject,
    columnDefinitions: visibleColumnDefinitions,
    numRows: allRows === null || allRows === void 0 ? void 0 : allRows.length
  });
  const toolsHeaderPerformanceMarkRef = (0, import_react490.useRef)(null);
  const [toolsHeaderHeight, toolsHeaderWrapperMeasureRef] = useContainerQuery((rect) => rect.borderBoxHeight);
  const toolsHeaderWrapper = useMergeRefs(toolsHeaderPerformanceMarkRef, toolsHeaderWrapperMeasureRef);
  const colIndexOffset = selectionType ? 1 : 0;
  const totalColumnsCount = visibleColumnDefinitions.length + colIndexOffset;
  return import_react490.default.createElement(
    LinkDefaultVariantContext.Provider,
    { value: { defaultVariant: "primary" } },
    import_react490.default.createElement(
      TableComponentsContextProvider,
      { value: { paginationRef, filterRef, preferencesRef, headerRef } },
      import_react490.default.createElement(
        ColumnWidthsProvider,
        { visibleColumns: visibleColumnWidthsWithSelection, resizableColumns, containerRef: wrapperMeasureRefObject },
        import_react490.default.createElement(
          InternalContainer,
          Object.assign({}, baseProps, tableInteractionAttributes, { __internalRootRef, className: clsx_m_default(baseProps.className, styles_css_default109.root), __funnelSubStepProps, __fullPage: variant === "full-page", header: import_react490.default.createElement(
            import_react490.default.Fragment,
            null,
            hasHeader && import_react490.default.createElement(
              "div",
              null,
              import_react490.default.createElement(
                "div",
                { ref: toolsHeaderWrapper, className: clsx_m_default(styles_css_default109["header-controls"], styles_css_default109[`variant-${computedVariant}`]) },
                import_react490.default.createElement(
                  CollectionLabelContext.Provider,
                  { value: { assignId: setHeaderRef } },
                  import_react490.default.createElement(ToolsHeader, { header, filter, pagination, preferences, setLastUserAction })
                )
              )
            ),
            stickyHeader && import_react490.default.createElement(sticky_header_default, { ref: stickyHeaderRef, variant: computedVariant, theadProps, wrapperRef: wrapperRefObject, theadRef, secondaryWrapperRef, tableRef: tableRefObject, onScroll: handleScroll, tableHasHeader: hasHeader, contentDensity, tableRole })
          ), disableHeaderPaddings: true, disableContentPaddings: true, disableFooterPaddings: true, variant: toContainerVariant(computedVariant), __disableFooterDivider: true, __disableStickyMobile: false, footer: hasFooter ? import_react490.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default109["footer-wrapper"], styles_css_default109[`variant-${computedVariant}`]) },
            import_react490.default.createElement(
              "div",
              { className: clsx_m_default(styles_css_default109.footer, hasFooterPagination && styles_css_default109["footer-with-pagination"]) },
              footer && import_react490.default.createElement("span", null, footer),
              hasFooterPagination && import_react490.default.createElement("div", { className: styles_css_default109["footer-pagination"] }, pagination)
            )
          ) : null, __stickyHeader: stickyHeader, __mobileStickyOffset: toolsHeaderHeight !== null && toolsHeaderHeight !== void 0 ? toolsHeaderHeight : 0, __stickyOffset: stickyHeaderVerticalOffset }, focusMarkers.root),
          import_react490.default.createElement(
            "div",
            Object.assign({ ref: wrapperRef, className: clsx_m_default(styles_css_default109.wrapper, styles_css_default109[`variant-${computedVariant}`], {
              [styles_css_default109["has-footer"]]: hasFooter,
              [styles_css_default109["has-header"]]: hasHeader
            }), style: stickyState.style.wrapper, onScroll: handleScroll }, wrapperProps),
            import_react490.default.createElement("div", { className: styles_css_default109["wrapper-content-measure"], ref: wrapperMeasureMergedRef }),
            !!renderAriaLive && !!firstIndex && import_react490.default.createElement(
              internal_default2,
              { hidden: true, tagName: "span" },
              import_react490.default.createElement("span", null, renderAriaLive({
                firstIndex,
                lastIndex: firstIndex + items.length - 1,
                visibleItemsCount: allItems.length,
                totalItemsCount
              }))
            ),
            import_react490.default.createElement(
              GridNavigationProvider,
              { keyboardNavigation: !!enableKeyboardNavigation, pageSize: GRID_NAVIGATION_PAGE_SIZE, getTable: () => tableRefObject.current },
              import_react490.default.createElement(
                "table",
                Object.assign({}, performanceMarkAttributes, { ref: tableRef, className: clsx_m_default(styles_css_default109.table, resizableColumns && styles_css_default109["table-layout-fixed"], contentDensity === "compact" && getVisualContextClassname("compact-table")) }, getTableRoleProps({
                  tableRole,
                  totalItemsCount,
                  totalColumnsCount,
                  ariaLabel: ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tableLabel,
                  ariaLabelledby
                })),
                import_react490.default.createElement(thead_default, Object.assign({ ref: theadRef, hidden: stickyHeader, onFocusedComponentChange: (focusId) => {
                  var _a3;
                  return (_a3 = stickyHeaderRef.current) === null || _a3 === void 0 ? void 0 : _a3.setFocus(focusId);
                } }, theadProps)),
                import_react490.default.createElement("tbody", null, loading || allItems.length === 0 ? import_react490.default.createElement(
                  "tr",
                  null,
                  import_react490.default.createElement(NoDataCell, { totalColumnsCount, hasFooter, loading, loadingText, empty, tableRef: tableRefObject, containerRef: wrapperMeasureRefObject })
                ) : allRows.map((row, rowIndex) => {
                  const isFirstRow = rowIndex === 0;
                  const isLastRow = rowIndex === allRows.length - 1;
                  const expandableProps = row.type === "data" ? getExpandableItemProps(row.item) : void 0;
                  const rowRoleProps = getTableRowRoleProps(Object.assign({
                    tableRole,
                    firstIndex,
                    rowIndex,
                    level: row.type === "loader" ? row.level : void 0
                  }, expandableProps));
                  const getTableItemKey = (item) => getItemKey(trackBy, item, rowIndex);
                  const sharedCellProps = {
                    isFirstRow,
                    isLastRow,
                    isSelected: hasSelection && isRowSelected(row),
                    isPrevSelected: hasSelection && !isFirstRow && isRowSelected(allRows[rowIndex - 1]),
                    isNextSelected: hasSelection && !isLastRow && isRowSelected(allRows[rowIndex + 1]),
                    isEvenRow: rowIndex % 2 === 0,
                    stripedRows,
                    hasSelection,
                    hasFooter,
                    stickyState,
                    tableRole
                  };
                  if (row.type === "data") {
                    const rowId = `${getTableItemKey(row.item)}`;
                    return import_react490.default.createElement(
                      "tr",
                      Object.assign({ key: rowId, className: clsx_m_default(styles_css_default109.row, sharedCellProps.isSelected && styles_css_default109["row-selected"]), onFocus: ({ currentTarget }) => {
                        var _a3;
                        if (!currentTarget.contains(getMouseDownTarget())) {
                          (_a3 = stickyHeaderRef.current) === null || _a3 === void 0 ? void 0 : _a3.scrollToRow(currentTarget);
                        }
                      } }, focusMarkers.item, { onClick: onRowClickHandler && onRowClickHandler.bind(null, rowIndex, row.item), onContextMenu: onRowContextMenuHandler && onRowContextMenuHandler.bind(null, rowIndex, row.item) }, rowRoleProps),
                      getItemSelectionProps && import_react490.default.createElement(TableBodySelectionCell, Object.assign({}, sharedCellProps, { columnId: selectionColumnId, selectionControlProps: Object.assign(Object.assign({}, getItemSelectionProps(row.item)), { onFocusDown: moveFocusDown, onFocusUp: moveFocusUp, rowIndex, itemKey: rowId }), verticalAlign: cellVerticalAlign, tableVariant: computedVariant })),
                      visibleColumnDefinitions.map((column, colIndex) => {
                        var _a3, _b2;
                        const colId = `${getColumnKey(column, colIndex)}`;
                        const cellId = { row: rowId, col: colId };
                        const isEditing = cellEditing.checkEditing(cellId);
                        const successfulEdit = cellEditing.checkLastSuccessfulEdit(cellId);
                        const isEditable = !!column.editConfig && !cellEditing.isLoading;
                        const cellExpandableProps = isExpandable && colIndex === 0 ? expandableProps : void 0;
                        const analyticsMetadata2 = {
                          component: {
                            innerContext: {
                              position: `${rowIndex + 1},${colIndex + 1}`,
                              columnId: column.id ? `${column.id}` : "",
                              columnLabel: {
                                selector: `table thead tr th:nth-child(${colIndex + (selectionType ? 2 : 1)})`,
                                root: "component"
                              },
                              item: rowId
                            }
                          }
                        };
                        return import_react490.default.createElement(TableBodyCell, Object.assign({ key: colId }, sharedCellProps, { resizableStyle: {
                          width: column.width,
                          minWidth: column.minWidth,
                          maxWidth: column.maxWidth
                        }, ariaLabels, column, item: row.item, wrapLines, isEditable, isEditing, isRowHeader: column.isRowHeader, successfulEdit, resizableColumns, onEditStart: () => cellEditing.startEdit(cellId), onEditEnd: (editCancelled) => cellEditing.completeEdit(cellId, editCancelled), submitEdit: cellEditing.submitEdit, columnId: (_a3 = column.id) !== null && _a3 !== void 0 ? _a3 : colIndex, colIndex: colIndex + colIndexOffset, verticalAlign: (_b2 = column.verticalAlign) !== null && _b2 !== void 0 ? _b2 : cellVerticalAlign, tableVariant: computedVariant }, cellExpandableProps, getAnalyticsMetadataAttribute(analyticsMetadata2)));
                      })
                    );
                  }
                  const loaderContent = getLoaderContent({
                    item: row.item,
                    loadingStatus: row.status,
                    renderLoaderPending,
                    renderLoaderLoading,
                    renderLoaderError,
                    renderLoaderEmpty
                  });
                  return loaderContent && import_react490.default.createElement(
                    "tr",
                    Object.assign({ key: (row.item ? getTableItemKey(row.item) : "root-" + rowIndex) + "-" + row.from, className: styles_css_default109.row }, rowRoleProps),
                    getItemSelectionProps && import_react490.default.createElement(TableBodySelectionCell, Object.assign({}, sharedCellProps, { columnId: selectionColumnId, verticalAlign: cellVerticalAlign, tableVariant: computedVariant })),
                    visibleColumnDefinitions.map((column, colIndex) => {
                      var _a3;
                      return import_react490.default.createElement(TableLoaderCell, Object.assign({ key: getColumnKey(column, colIndex) }, sharedCellProps, { wrapLines: false, columnId: (_a3 = column.id) !== null && _a3 !== void 0 ? _a3 : colIndex, colIndex: colIndex + colIndexOffset, isRowHeader: colIndex === 0, level: row.level, item: row.item, trackBy }), loaderContent);
                    })
                  );
                }))
              )
            ),
            resizableColumns && import_react490.default.createElement(ResizeTracker, null)
          ),
          import_react490.default.createElement(sticky_scrollbar_default, { ref: scrollbarRef, wrapperRef: wrapperRefObject, tableRef: tableRefObject, onScroll: handleScroll, hasStickyColumns })
        )
      )
    )
  );
});
var internal_default29 = InternalTable;

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/empty-state.js
var import_react491 = __toESM(require_react());
function EmptyState({ title, subtitle, action }) {
  return import_react491.default.createElement(
    InternalBox,
    { textAlign: "center", color: "inherit" },
    import_react491.default.createElement(InternalBox, { variant: "strong", textAlign: "center", color: "inherit" }, title),
    import_react491.default.createElement(InternalBox, { variant: "p", padding: { bottom: "s" }, color: "inherit" }, subtitle),
    action
  );
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/styles.scoped.css";
var styles_css_default169 = {
  "modal-actions": "awsui_modal-actions_12hyz_163me_181",
  "submit-button": "awsui_submit-button_12hyz_163me_185",
  "last-updated-caption": "awsui_last-updated-caption_12hyz_163me_189"
};

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/basic-table.js
function getSharedI18Strings(i18n, i18nStrings) {
  return {
    filteringCounterText: i18n("i18nStrings.filteringCounterText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filteringCounterText, (format3) => (count) => format3({ count })),
    labelRefresh: i18n("i18nStrings.labelRefresh", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelRefresh),
    labelsPagination: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsPagination,
    noMatchTitle: i18n("i18nStrings.filteringNoMatches", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filteringNoMatches),
    noMatchSubtitle: i18n("i18nStrings.filteringCantFindMatch", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.filteringCantFindMatch),
    clearFilterButtonText: i18n("i18nStrings.clearFilterButtonText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.clearFilterButtonText),
    filteringClearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelClearFilter,
    lastUpdatedText: i18n("i18nStrings.modalLastUpdatedText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalLastUpdatedText)
  };
}
function BasicS3Table({ forwardFocusRef, columnDefinitions, fetchData, trackBy, i18nStrings = {}, isVisualRefresh, visibleColumns, isItemDisabled, onSelect }) {
  var _a2;
  const [loading, setLoading] = (0, import_react492.useState)(false);
  const [allItems, setAllItems] = (0, import_react492.useState)([]);
  const [lastUpdated, setLastUpdated] = (0, import_react492.useState)();
  const textFilterRef = (0, import_react492.useRef)(null);
  const onSelectLatest = useStableCallback(onSelect);
  function loadData() {
    setLoading(true);
    return fetchData().then((items2) => {
      setAllItems(items2);
      setLoading(false);
    }).catch(() => {
      setLoading(false);
    });
  }
  function reloadData() {
    return __awaiter(this, void 0, void 0, function* () {
      yield loadData();
      setLastUpdated(/* @__PURE__ */ new Date());
    });
  }
  (0, import_react492.useEffect)(() => {
    loadData();
  }, []);
  useForwardFocus(forwardFocusRef, textFilterRef);
  const { items, filteredItemsCount, collectionProps, filterProps, paginationProps, actions } = useCollection(allItems, {
    selection: { trackBy },
    filtering: {
      empty: i18nStrings.emptyText,
      noMatch: import_react492.default.createElement(EmptyState, { title: i18nStrings.noMatchTitle, subtitle: i18nStrings.noMatchSubtitle, action: import_react492.default.createElement(InternalButton, { onClick: () => actions.setFiltering("") }, i18nStrings.clearFilterButtonText) })
    },
    pagination: {},
    sorting: {}
  });
  const selectedItem = (_a2 = collectionProps.selectedItems) === null || _a2 === void 0 ? void 0 : _a2[0];
  (0, import_react492.useEffect)(() => {
    onSelectLatest(selectedItem);
  }, [selectedItem, onSelectLatest]);
  return import_react492.default.createElement(internal_default29, Object.assign({ variant: isVisualRefresh ? "borderless" : "container" }, collectionProps, { header: import_react492.default.createElement(InternalHeader, { variant: isVisualRefresh ? "h3" : "h2", headingTagOverride: "h3", actions: import_react492.default.createElement(InternalHeaderActions, { reloadData, i18nStrings, lastUpdated }), counter: selectedItem ? `(1/${allItems.length})` : `(${allItems.length})` }, i18nStrings.header), trackBy, filter: import_react492.default.createElement(internal_default18, Object.assign({}, filterProps, { ref: textFilterRef, filteringAriaLabel: i18nStrings.filteringAriaLabel, filteringClearAriaLabel: i18nStrings.filteringClearAriaLabel, filteringPlaceholder: i18nStrings.filteringPlaceholder, countText: i18nStrings.filteringCounterText ? i18nStrings.filteringCounterText(filteredItemsCount) : "" })), pagination: import_react492.default.createElement(InternalPagination, Object.assign({}, paginationProps, { ariaLabels: i18nStrings.labelsPagination })), selectionType: "single", ariaLabels: i18nStrings.selectionLabels, loading, loadingText: i18nStrings.loadingText, items, visibleColumns, isItemDisabled, columnDefinitions, enableKeyboardNavigation: true }));
}
function InternalHeaderActions({ i18nStrings, reloadData, lastUpdated }) {
  function getLastUpdated() {
    if (!lastUpdated || !i18nStrings.lastUpdatedText) {
      return null;
    }
    const formattedDate = formatDateLocalized({
      date: lastUpdated.toString(),
      isDateOnly: false,
      isMonthOnly: false
    });
    return import_react492.default.createElement(
      "div",
      { className: styles_css_default169["last-updated-caption"] },
      i18nStrings.lastUpdatedText,
      import_react492.default.createElement("br", null),
      formattedDate,
      import_react492.default.createElement(internal_default2, { tagName: "span", sources: [i18nStrings.lastUpdatedText, formattedDate] })
    );
  }
  return import_react492.default.createElement(
    internal_default5,
    { size: "s", direction: "horizontal", alignItems: "center" },
    getLastUpdated(),
    import_react492.default.createElement(InternalButton, { iconName: "refresh", ariaLabel: i18nStrings.labelRefresh, onClick: reloadData })
  );
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/column-formats.js
var BYTES_BASE = 1024;
var BYTES_DECIMALS = 2;
var BYTES_SIZES = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
function formatDefault(value) {
  return value ? value : "-";
}
function formatSize(bytes) {
  if (bytes === void 0) {
    return "-";
  }
  if (bytes === 0) {
    return `0 ${BYTES_SIZES[0]}`;
  }
  const i2 = Math.floor(Math.log(bytes) / Math.log(BYTES_BASE));
  return parseFloat((bytes / Math.pow(BYTES_BASE, i2)).toFixed(BYTES_DECIMALS)) + " " + BYTES_SIZES[i2];
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/table-utils.js
function includes(array, item) {
  return !!array && array.indexOf(item) > -1;
}
var compareDates2 = (itemA, itemB) => {
  const timeA = itemA ? new Date(itemA).getTime() : 0;
  const timeB = itemB ? new Date(itemB).getTime() : 0;
  return timeA - timeB;
};
function getColumnAriaLabel(i18n, i18nStrings, columnName = "") {
  return ({ sorted, descending: descending2 }) => {
    var _a2, _b, _c, _d, _e, _f;
    if (!sorted) {
      return (_b = i18n("i18nStrings.labelNotSorted", (_a2 = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelNotSorted) === null || _a2 === void 0 ? void 0 : _a2.call(i18nStrings, columnName), (format3) => format3({ columnName }))) !== null && _b !== void 0 ? _b : "";
    }
    if (descending2) {
      return (_d = i18n("i18nStrings.labelSortedDescending", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelSortedDescending) === null || _c === void 0 ? void 0 : _c.call(i18nStrings, columnName), (format3) => format3({ columnName }))) !== null && _d !== void 0 ? _d : "";
    }
    return (_f = i18n("i18nStrings.labelSortedAscending", (_e = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelSortedAscending) === null || _e === void 0 ? void 0 : _e.call(i18nStrings, columnName), (format3) => format3({ columnName }))) !== null && _f !== void 0 ? _f : "";
  };
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/buckets-table.js
function BucketsTable({ forwardFocusRef, i18nStrings, isVisualRefresh, isItemDisabled, selectableItemsTypes, fetchData, visibleColumns, onDrilldown, onSelect }) {
  var _a2, _b, _c, _d;
  const i18n = useInternalI18n("s3-resource-selector");
  return import_react493.default.createElement(BasicS3Table, { forwardFocusRef, trackBy: "Name", fetchData, visibleColumns, isItemDisabled: isItemDisabled || (() => !includes(selectableItemsTypes, "buckets")), i18nStrings: Object.assign(Object.assign({}, getSharedI18Strings(i18n, i18nStrings)), { header: i18n("i18nStrings.selectionBuckets", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBuckets), loadingText: i18n("i18nStrings.selectionBucketsLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBucketsLoading), filteringAriaLabel: (_a2 = i18n("i18nStrings.labelFiltering", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelFiltering, (format3) => (itemsType) => format3({ itemsType }))) === null || _a2 === void 0 ? void 0 : _a2((_b = i18n("i18nStrings.selectionBuckets", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBuckets)) !== null && _b !== void 0 ? _b : ""), filteringPlaceholder: i18n("i18nStrings.selectionBucketsSearchPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBucketsSearchPlaceholder), emptyText: i18n("i18nStrings.selectionBucketsNoItems", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionBucketsNoItems), selectionLabels: Object.assign(Object.assign({}, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsBucketsSelection), { selectionGroupLabel: i18n("i18nStrings.labelsBucketsSelection.selectionGroupLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsBucketsSelection) === null || _c === void 0 ? void 0 : _c.selectionGroupLabel), itemSelectionLabel: i18n("i18nStrings.labelsBucketsSelection.itemSelectionLabel", (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsBucketsSelection) === null || _d === void 0 ? void 0 : _d.itemSelectionLabel, (format3) => (data, item) => {
    var _a3;
    return format3({ item__Name: (_a3 = item.Name) !== null && _a3 !== void 0 ? _a3 : "" });
  }) }) }), isVisualRefresh, columnDefinitions: [
    {
      id: "Name",
      header: i18n("i18nStrings.columnBucketName", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketName),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnBucketName", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketName)),
      sortingField: "Name",
      cell: (item) => {
        const isClickable = includes(selectableItemsTypes, "objects") || includes(selectableItemsTypes, "versions");
        return isClickable ? import_react493.default.createElement(internal_default10, { onFollow: () => item.Name && onDrilldown(item.Name), variant: "link" }, item.Name) : item.Name;
      },
      minWidth: "250px"
    },
    {
      id: "Region",
      header: i18n("i18nStrings.columnBucketRegion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketRegion),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnBucketRegion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketRegion)),
      sortingField: "Region",
      cell: (item) => formatDefault(item.Region),
      minWidth: "150px"
    },
    {
      id: "CreationDate",
      header: i18n("i18nStrings.columnBucketCreationDate", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketCreationDate),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnBucketCreationDate", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnBucketCreationDate)),
      sortingComparator: (a4, b2) => compareDates2(a4.CreationDate, b2.CreationDate),
      cell: (item) => formatDefault(item.CreationDate)
    }
  ], onSelect: (item) => {
    var _a3;
    return onSelect((_a3 = item === null || item === void 0 ? void 0 : item.Name) !== null && _a3 !== void 0 ? _a3 : "");
  } });
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/objects-table.js
var import_react494 = __toESM(require_react());
function ObjectsTable({ forwardFocusRef, pathSegments, i18nStrings, isVisualRefresh, isItemDisabled, selectableItemsTypes, fetchData, visibleColumns, onDrilldown, onSelect }) {
  var _a2, _b, _c, _d;
  const i18n = useInternalI18n("s3-resource-selector");
  return import_react494.default.createElement(BasicS3Table, {
    // remount fresh component every we change the path to reset the inner state (e.g. selection/filtering)
    key: pathSegments.join("/"),
    forwardFocusRef,
    trackBy: "Key",
    fetchData: () => {
      const [bucketName, ...rest] = pathSegments;
      return fetchData(bucketName, joinObjectPath(rest));
    },
    i18nStrings: Object.assign(Object.assign({}, getSharedI18Strings(i18n, i18nStrings)), { header: i18n("i18nStrings.selectionObjects", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjects), loadingText: i18n("i18nStrings.selectionObjectsLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjectsLoading), filteringAriaLabel: (_a2 = i18n("i18nStrings.labelFiltering", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelFiltering, (format3) => (itemsType) => format3({ itemsType }))) === null || _a2 === void 0 ? void 0 : _a2((_b = i18n("i18nStrings.selectionObjects", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjects)) !== null && _b !== void 0 ? _b : ""), filteringPlaceholder: i18n("i18nStrings.selectionObjectsSearchPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjectsSearchPlaceholder), emptyText: i18n("i18nStrings.selectionObjectsNoItems", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionObjectsNoItems), selectionLabels: Object.assign(Object.assign({}, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsObjectsSelection), { selectionGroupLabel: i18n("i18nStrings.labelsObjectsSelection.selectionGroupLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsObjectsSelection) === null || _c === void 0 ? void 0 : _c.selectionGroupLabel), itemSelectionLabel: i18n("i18nStrings.labelsObjectsSelection.itemSelectionLabel", (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsObjectsSelection) === null || _d === void 0 ? void 0 : _d.itemSelectionLabel, (format3) => (data, item) => {
      var _a3;
      return format3({ item__Key: (_a3 = item.Key) !== null && _a3 !== void 0 ? _a3 : "" });
    }) }) }),
    isVisualRefresh,
    visibleColumns,
    isItemDisabled: isItemDisabled || (() => !includes(selectableItemsTypes, "objects")),
    columnDefinitions: [
      {
        id: "Key",
        header: i18n("i18nStrings.columnObjectKey", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectKey),
        ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnObjectKey", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectKey)),
        sortingField: "Key",
        cell: (item) => {
          const isClickable = item.IsFolder || includes(selectableItemsTypes, "versions");
          const iconProps = item.IsFolder ? { name: "folder", ariaLabel: i18n("i18nStrings.labelIconFolder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelIconFolder) } : { name: "file", ariaLabel: i18n("i18nStrings.labelIconObject", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelIconObject) };
          return import_react494.default.createElement(
            import_react494.default.Fragment,
            null,
            import_react494.default.createElement(internal_default, Object.assign({}, iconProps)),
            " ",
            isClickable ? import_react494.default.createElement(internal_default10, { onFollow: () => item.Key && onDrilldown(item), variant: "link" }, item.Key) : item.Key
          );
        },
        minWidth: "250px"
      },
      {
        id: "LastModified",
        header: i18n("i18nStrings.columnObjectLastModified", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectLastModified),
        ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnObjectLastModified", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectLastModified)),
        sortingComparator: (a4, b2) => compareDates2(a4.LastModified, b2.LastModified),
        cell: (item) => formatDefault(item.LastModified)
      },
      {
        id: "Size",
        header: i18n("i18nStrings.columnObjectSize", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectSize),
        ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnObjectSize", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnObjectSize)),
        sortingField: "Size",
        cell: (item) => formatSize(item.Size)
      }
    ],
    onSelect: (item) => {
      var _a3;
      return onSelect((_a3 = item === null || item === void 0 ? void 0 : item.Key) !== null && _a3 !== void 0 ? _a3 : "");
    }
  });
}

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/versions-table.js
var import_react495 = __toESM(require_react());
function VersionsTable({ forwardFocusRef, pathSegments, i18nStrings, isVisualRefresh, isItemDisabled, fetchData, visibleColumns, onSelect }) {
  var _a2, _b, _c, _d;
  const i18n = useInternalI18n("s3-resource-selector");
  return import_react495.default.createElement(BasicS3Table, { forwardFocusRef, trackBy: "VersionId", fetchData: () => {
    const [bucketName, ...rest] = pathSegments;
    return fetchData(bucketName, joinObjectPath(rest));
  }, i18nStrings: Object.assign(Object.assign({}, getSharedI18Strings(i18n, i18nStrings)), { header: i18n("i18nStrings.selectionVersions", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersions), loadingText: i18n("i18nStrings.selectionVersionsLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersionsLoading), filteringAriaLabel: (_a2 = i18n("i18nStrings.labelFiltering", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelFiltering, (format3) => (itemsType) => format3({ itemsType }))) === null || _a2 === void 0 ? void 0 : _a2((_b = i18n("i18nStrings.selectionVersions", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersions)) !== null && _b !== void 0 ? _b : ""), filteringPlaceholder: i18n("i18nStrings.selectionVersionsSearchPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersionsSearchPlaceholder), emptyText: i18n("i18nStrings.selectionVersionsNoItems", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectionVersionsNoItems), selectionLabels: Object.assign(Object.assign({}, i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsVersionsSelection), { selectionGroupLabel: i18n("i18nStrings.labelsVersionsSelection.selectionGroupLabel", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsVersionsSelection) === null || _c === void 0 ? void 0 : _c.selectionGroupLabel), itemSelectionLabel: i18n("i18nStrings.labelsVersionsSelection.itemSelectionLabel", (_d = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelsVersionsSelection) === null || _d === void 0 ? void 0 : _d.itemSelectionLabel, (format3) => (data, item) => {
    var _a3;
    return format3({ item__VersionId: (_a3 = item.VersionId) !== null && _a3 !== void 0 ? _a3 : "" });
  }) }) }), isVisualRefresh, visibleColumns, isItemDisabled, columnDefinitions: [
    {
      id: "ID",
      header: i18n("i18nStrings.columnVersionID", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionID),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnVersionID", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionID)),
      sortingField: "VersionId",
      cell: (item) => item.VersionId,
      minWidth: "250px"
    },
    {
      id: "LastModified",
      header: i18n("i18nStrings.columnVersionLastModified", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionLastModified),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnVersionLastModified", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionLastModified)),
      sortingComparator: (a4, b2) => compareDates2(a4.LastModified, b2.LastModified),
      cell: (item) => formatDefault(item.LastModified)
    },
    {
      id: "Size",
      header: i18n("i18nStrings.columnVersionSize", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionSize),
      ariaLabel: getColumnAriaLabel(i18n, i18nStrings, i18n("i18nStrings.columnVersionSize", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnVersionSize)),
      sortingField: "Size",
      cell: (item) => formatSize(item.Size)
    }
  ], onSelect: (item) => {
    var _a3;
    return onSelect((_a3 = item === null || item === void 0 ? void 0 : item.VersionId) !== null && _a3 !== void 0 ? _a3 : "");
  } });
}

// node_modules/@cloudscape-design/components/s3-resource-selector/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/s3-resource-selector/test-classes/styles.scoped.css";
var styles_css_default170 = {
  "modal-root": "awsui_modal-root_rkh1e_1yimk_5"
};

// node_modules/@cloudscape-design/components/s3-resource-selector/s3-modal/index.js
var initialBrowseState = {
  selectedItem: null,
  currentView: "buckets",
  breadcrumbs: []
};
function s3BrowseReducer(state, action) {
  switch (action.type) {
    case "browse-buckets":
      return initialBrowseState;
    case "browse-objects":
      return {
        selectedItem: null,
        currentView: "objects",
        breadcrumbs: action.breadcrumbs
      };
    case "browse-versions":
      return {
        selectedItem: null,
        currentView: "versions",
        breadcrumbs: action.breadcrumbs
      };
    case "select-item":
      return Object.assign(Object.assign({}, state), { selectedItem: action.item });
    default:
      assertNever(action);
  }
  return state;
}
function createResourceInfo({ currentView, breadcrumbs, selectedItem }) {
  const prefix = "s3://";
  if (currentView === "versions") {
    return { uri: prefix + joinObjectPath(breadcrumbs), versionId: selectedItem !== null && selectedItem !== void 0 ? selectedItem : void 0 };
  }
  return { uri: prefix + joinObjectPath([...breadcrumbs, selectedItem]) };
}
function S3Modal({ i18nStrings, alert, selectableItemsTypes, fetchBuckets, bucketsVisibleColumns, bucketsIsItemDisabled, fetchObjects, objectsVisibleColumns, objectsIsItemDisabled, fetchVersions, versionsVisibleColumns, versionsIsItemDisabled, getModalRoot, removeModalRoot, onSubmit, onDismiss }) {
  var _a2;
  const [{ currentView, breadcrumbs, selectedItem }, dispatch] = (0, import_react496.useReducer)(s3BrowseReducer, initialBrowseState);
  const forwardFocusRef = (0, import_react496.useRef)(null);
  const i18n = useInternalI18n("s3-resource-selector");
  const isVisualRefresh = useVisualRefresh();
  useEffectOnUpdate2(() => {
    var _a3;
    (_a3 = forwardFocusRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
  }, [breadcrumbs]);
  return import_react496.default.createElement(
    "div",
    null,
    import_react496.default.createElement(
      InternalModal,
      { className: styles_css_default170["modal-root"], visible: true, size: "max", getModalRoot, removeModalRoot, closeAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelModalDismiss, onDismiss, header: i18n("i18nStrings.modalTitle", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalTitle), footer: import_react496.default.createElement(
        internal_default5,
        { className: styles_css_default169["modal-actions"], size: "xs", direction: "horizontal" },
        import_react496.default.createElement(InternalButton, { variant: "link", formAction: "none", onClick: onDismiss }, i18n("i18nStrings.modalCancelButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalCancelButton)),
        import_react496.default.createElement(InternalButton, { variant: "primary", className: styles_css_default169["submit-button"], disabled: !selectedItem, formAction: "none", onClick: () => onSubmit(createResourceInfo({ currentView, breadcrumbs, selectedItem })) }, i18n("i18nStrings.modalSubmitButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalSubmitButton))
      ) },
      import_react496.default.createElement(
        internal_default5,
        { size: isVisualRefresh ? "xxs" : "xs" },
        import_react496.default.createElement(BreadcrumbGroupImplementation, { ariaLabel: i18n("i18nStrings.labelBreadcrumbs", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelBreadcrumbs), expandAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.labelExpandBreadcrumbs, onFollow: (event) => {
          event.preventDefault();
          event.detail.item.meta.onClick();
        }, items: [
          {
            text: (_a2 = i18n("i18nStrings.modalBreadcrumbRootItem", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.modalBreadcrumbRootItem)) !== null && _a2 !== void 0 ? _a2 : "",
            href: "",
            meta: { onClick: () => dispatch({ type: "browse-buckets" }) }
          },
          ...breadcrumbs.map((segment, index) => ({
            text: segment,
            href: "",
            meta: {
              onClick: () => dispatch({
                type: "browse-objects",
                breadcrumbs: breadcrumbs.slice(0, index + 1)
              })
            }
          }))
        ] }),
        alert,
        currentView === "buckets" ? import_react496.default.createElement(BucketsTable, { forwardFocusRef, fetchData: fetchBuckets, visibleColumns: bucketsVisibleColumns, isItemDisabled: bucketsIsItemDisabled, selectableItemsTypes, i18nStrings, isVisualRefresh, onDrilldown: (path2) => dispatch({
          type: "browse-objects",
          breadcrumbs: [path2]
        }), onSelect: (item) => dispatch({ type: "select-item", item }) }) : currentView === "objects" ? import_react496.default.createElement(ObjectsTable, { forwardFocusRef, pathSegments: breadcrumbs, fetchData: fetchObjects, visibleColumns: objectsVisibleColumns, isItemDisabled: objectsIsItemDisabled, selectableItemsTypes, i18nStrings, isVisualRefresh, onDrilldown: (item) => {
          dispatch({
            type: item.IsFolder ? "browse-objects" : "browse-versions",
            breadcrumbs: [...breadcrumbs, item.Key]
          });
        }, onSelect: (item) => dispatch({ type: "select-item", item }) }) : currentView === "versions" ? import_react496.default.createElement(VersionsTable, { forwardFocusRef, pathSegments: breadcrumbs, fetchData: fetchVersions, visibleColumns: versionsVisibleColumns, isItemDisabled: versionsIsItemDisabled, i18nStrings, isVisualRefresh, onSelect: (item) => dispatch({ type: "select-item", item }) }) : assertNever(currentView)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/s3-resource-selector/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/s3-resource-selector/styles.scoped.css";
var styles_css_default171 = {
  "root": "awsui_root_1u0yw_rfo7y_5",
  "alert": "awsui_alert_1u0yw_rfo7y_9"
};

// node_modules/@cloudscape-design/components/s3-resource-selector/index.js
var S3ResourceSelector = import_react497.default.forwardRef((_a2, ref) => {
  var { i18nStrings, inputPlaceholder, alert, resource, viewHref, invalid, selectableItemsTypes = [], inputAriaDescribedby, bucketsVisibleColumns = ["Name", "CreationDate"], bucketsIsItemDisabled, fetchBuckets, fetchObjects, objectsVisibleColumns = ["Key", "LastModified", "Size"], objectsIsItemDisabled, fetchVersions, versionsVisibleColumns = ["ID", "LastModified", "Size"], versionsIsItemDisabled, onChange, ariaLabel, getModalRoot, removeModalRoot } = _a2, rest = __rest(_a2, ["i18nStrings", "inputPlaceholder", "alert", "resource", "viewHref", "invalid", "selectableItemsTypes", "inputAriaDescribedby", "bucketsVisibleColumns", "bucketsIsItemDisabled", "fetchBuckets", "fetchObjects", "objectsVisibleColumns", "objectsIsItemDisabled", "fetchVersions", "versionsVisibleColumns", "versionsIsItemDisabled", "onChange", "ariaLabel", "getModalRoot", "removeModalRoot"]);
  checkSafeUrl("S3ResourceSelector", viewHref);
  const { __internalRootRef } = useBaseComponent("S3ResourceSelector");
  const [modalOpen, setModalOpen] = (0, import_react497.useState)(false);
  const inContextRef = (0, import_react497.useRef)(null);
  const modalWasSubmitted = (0, import_react497.useRef)(false);
  useForwardFocus(ref, inContextRef);
  const { ariaLabelledby, ariaDescribedby } = useFormFieldContext(rest);
  (0, import_react497.useEffect)(() => {
    var _a3;
    if (!modalOpen && modalWasSubmitted.current) {
      modalWasSubmitted.current = false;
      (_a3 = inContextRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
    }
  }, [modalOpen]);
  const baseProps = getBaseProps(rest);
  const modalProps = {
    alert,
    i18nStrings,
    fetchBuckets,
    selectableItemsTypes,
    bucketsVisibleColumns,
    bucketsIsItemDisabled,
    fetchObjects,
    objectsVisibleColumns,
    objectsIsItemDisabled,
    fetchVersions,
    versionsVisibleColumns,
    versionsIsItemDisabled,
    getModalRoot,
    removeModalRoot,
    onSubmit: (resource2) => {
      fireNonCancelableEvent(onChange, { resource: resource2 });
      setModalOpen(false);
      modalWasSubmitted.current = true;
    },
    onDismiss: () => setModalOpen(false)
  };
  return import_react497.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default171.root, baseProps.className), ref: __internalRootRef, role: "group", "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, "aria-label": ariaLabel }),
    import_react497.default.createElement(S3InContext, { ref: inContextRef, selectableItemsTypes, i18nStrings, inputPlaceholder, resource, viewHref, invalid, inputAriaDescribedby, fetchVersions, onBrowse: () => setModalOpen(true), onChange: (resource2, errorText) => fireNonCancelableEvent(onChange, { resource: resource2, errorText }) }),
    !modalOpen && alert && import_react497.default.createElement(InternalBox, { className: styles_css_default171.alert, margin: { top: "s" } }, alert),
    modalOpen && import_react497.default.createElement(S3Modal, Object.assign({}, modalProps))
  );
});
applyDisplayName(S3ResourceSelector, "S3ResourceSelector");
var s3_resource_selector_default = S3ResourceSelector;

// node_modules/@cloudscape-design/components/segmented-control/index.js
var import_react498 = __toESM(require_react());
function SegmentedControl(props2) {
  var _a2;
  const baseComponentProps = useBaseComponent("SegmentedControl", {
    props: {},
    metadata: {
      hasDisabledReasons: ((_a2 = props2.options) !== null && _a2 !== void 0 ? _a2 : []).some((option) => Boolean(option.disabledReason))
    }
  });
  return import_react498.default.createElement(InternalSegmentedControl2, Object.assign({}, props2, baseComponentProps));
}
applyDisplayName(SegmentedControl, "SegmentedControl");

// node_modules/@cloudscape-design/components/select/index.js
var import_react499 = __toESM(require_react());
var Select = import_react499.default.forwardRef((_a2, ref) => {
  var { options = [], filteringType = "none", statusType = "finished", triggerVariant = "label" } = _a2, restProps = __rest(_a2, ["options", "filteringType", "statusType", "triggerVariant"]);
  const baseComponentProps = useBaseComponent("Select", {
    props: {
      autoFocus: restProps.autoFocus,
      expandToViewport: restProps.expandToViewport,
      filteringType,
      triggerVariant,
      virtualScroll: restProps.virtualScroll,
      readOnly: restProps.readOnly
    },
    metadata: {
      hasInlineLabel: Boolean(restProps.inlineLabelText),
      hasDisabledReasons: options.some((option) => Boolean(option.disabledReason))
    }
  });
  const externalProps = getExternalProps(restProps);
  const componentAnalyticsMetadata2 = {
    name: "awsui.Select",
    label: `.${styles_css_default90["button-trigger"]}`,
    properties: {
      disabled: `${!!externalProps.disabled}`,
      selectedOptionValue: `${externalProps.selectedOption && externalProps.selectedOption.value ? externalProps.selectedOption.value : null}`
    }
  };
  return import_react499.default.createElement(internal_default17, Object.assign({ options, filteringType, statusType, triggerVariant }, externalProps, baseComponentProps, { ref }, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 })));
});
applyDisplayName(Select, "Select");
var select_default = Select;

// node_modules/@cloudscape-design/components/side-navigation/index.js
var import_react502 = __toESM(require_react());

// node_modules/@cloudscape-design/components/side-navigation/implementation.js
var import_react501 = __toESM(require_react());

// node_modules/@cloudscape-design/components/side-navigation/parts.js
var import_react500 = __toESM(require_react());

// node_modules/@cloudscape-design/components/side-navigation/util.js
function hasActiveLink(items, activeHref) {
  for (const item of items) {
    if ((item.type === "link" || item.type === "link-group" || item.type === "expandable-link-group") && item.href === activeHref) {
      return true;
    }
    if ((item.type === "section" || item.type === "link-group" || item.type === "expandable-link-group") && hasActiveLink(item.items, activeHref)) {
      return true;
    }
  }
  return false;
}
function generateExpandableItemsMapping(items, mapping = /* @__PURE__ */ new WeakMap(), expandableParents = []) {
  items.forEach((item) => {
    const nextLevelParents = expandableParents.slice();
    if (item.type === "section" || item.type === "expandable-link-group") {
      mapping.set(item, expandableParents);
      nextLevelParents.unshift(item);
    }
    if (item.type === "section" || item.type === "link-group" || item.type === "expandable-link-group") {
      generateExpandableItemsMapping(item.items, mapping, nextLevelParents);
    }
  });
  return mapping;
}
function checkDuplicateHrefs(items) {
  const hrefs = /* @__PURE__ */ new Set();
  const queue = items.slice();
  while (queue.length > 0) {
    const item = queue.shift();
    if ("href" in item) {
      if (hrefs.has(item.href)) {
        warnOnce("SideNavigation", `duplicate href in "${item.text}": ${item.href}`);
      }
      hrefs.add(item.href);
    }
    if ("items" in item) {
      queue.push(...item.items);
    }
  }
}

// node_modules/@cloudscape-design/components/side-navigation/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/side-navigation/analytics-metadata/styles.scoped.css";
var styles_css_default172 = {
  "header-link-text": "awsui_header-link-text_eymn4_rug8v_5",
  "link-text": "awsui_link-text_eymn4_rug8v_6"
};

// node_modules/@cloudscape-design/components/side-navigation/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/side-navigation/styles.scoped.css";
var styles_css_default173 = {
  "root": "awsui_root_l0dv0_1u5ju_145",
  "header": "awsui_header_l0dv0_1u5ju_179",
  "header-link": "awsui_header-link_l0dv0_1u5ju_193",
  "header-link--has-logo": "awsui_header-link--has-logo_l0dv0_1u5ju_204",
  "header-link-text": "awsui_header-link-text_l0dv0_1u5ju_204",
  "header-logo": "awsui_header-logo_l0dv0_1u5ju_209",
  "header-logo--stretched": "awsui_header-logo--stretched_l0dv0_1u5ju_215",
  "items-control": "awsui_items-control_l0dv0_1u5ju_220",
  "list-container": "awsui_list-container_l0dv0_1u5ju_224",
  "with-toolbar": "awsui_with-toolbar_l0dv0_1u5ju_232",
  "divider-header": "awsui_divider-header_l0dv0_1u5ju_232",
  "list": "awsui_list_l0dv0_1u5ju_224",
  "list-variant-root": "awsui_list-variant-root_l0dv0_1u5ju_245",
  "list-variant-root--first": "awsui_list-variant-root--first_l0dv0_1u5ju_252",
  "list-variant-expandable-link-group": "awsui_list-variant-expandable-link-group_l0dv0_1u5ju_256",
  "list-item": "awsui_list-item_l0dv0_1u5ju_260",
  "section": "awsui_section_l0dv0_1u5ju_271",
  "expandable-link-group": "awsui_expandable-link-group_l0dv0_1u5ju_272",
  "section--no-ident": "awsui_section--no-ident_l0dv0_1u5ju_275",
  "expandable-link-group--no-ident": "awsui_expandable-link-group--no-ident_l0dv0_1u5ju_276",
  "refresh": "awsui_refresh_l0dv0_1u5ju_284",
  "list-variant-section-group": "awsui_list-variant-section-group_l0dv0_1u5ju_295",
  "section-group": "awsui_section-group_l0dv0_1u5ju_302",
  "section-group-title": "awsui_section-group-title_l0dv0_1u5ju_313",
  "link": "awsui_link_l0dv0_1u5ju_317",
  "link-active": "awsui_link-active_l0dv0_1u5ju_326",
  "info": "awsui_info_l0dv0_1u5ju_363",
  "external-icon": "awsui_external-icon_l0dv0_1u5ju_367",
  "divider": "awsui_divider_l0dv0_1u5ju_232",
  "divider-default": "awsui_divider-default_l0dv0_1u5ju_376"
};

// node_modules/@cloudscape-design/components/side-navigation/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/side-navigation/test-classes/styles.scoped.css";
var styles_css_default174 = {
  "info": "awsui_info_1fhsi_6k3bb_5"
};

// node_modules/@cloudscape-design/components/side-navigation/parts.js
function Header3({ definition, activeHref, fireFollow }) {
  checkSafeUrl("SideNavigation", definition.href);
  const onClick = (0, import_react500.useCallback)((event) => {
    if (isPlainLeftClick(event)) {
      fireFollow(definition, event);
    }
  }, [fireFollow, definition]);
  const clickActionAnalyticsMetadata = {
    action: "click",
    detail: {
      label: `.${styles_css_default172["header-link-text"]}`,
      external: "false",
      href: definition.href,
      position: "header"
    }
  };
  return import_react500.default.createElement(
    import_react500.default.Fragment,
    null,
    import_react500.default.createElement(
      "h2",
      { className: styles_css_default173.header },
      import_react500.default.createElement(
        "a",
        Object.assign({ href: definition.href, className: clsx_m_default(styles_css_default173["header-link"], { [styles_css_default173["header-link--has-logo"]]: !!definition.logo }), "aria-current": definition.href === activeHref ? "page" : void 0, onClick }, getAnalyticsMetadataAttribute(clickActionAnalyticsMetadata)),
        definition.logo && import_react500.default.createElement("img", Object.assign({ className: clsx_m_default(styles_css_default173["header-logo"], {
          [styles_css_default173["header-logo--stretched"]]: !definition.text
        }) }, definition.logo)),
        import_react500.default.createElement("span", { className: clsx_m_default(styles_css_default173["header-link-text"], styles_css_default172["header-link-text"]) }, definition.text)
      )
    ),
    import_react500.default.createElement(Divider2, { isPresentational: true, variant: "header" })
  );
}
function NavigationItemsList({ items, variant, activeHref, fireChange, fireFollow, position = "" }) {
  const lists = [];
  let currentListIndex = 0;
  lists[currentListIndex] = {
    listVariant: variant,
    items: []
  };
  items.forEach((item, index) => {
    var _a2, _b, _c, _d, _e;
    const itemid = index + 1;
    const itemPosition = `${position ? `${position},` : ""}${itemid}`;
    switch (item.type) {
      case "divider": {
        const dividerIndex = lists.length;
        lists[dividerIndex] = {
          element: import_react500.default.createElement(
            "div",
            { "data-itemid": `item-${itemid}` },
            import_react500.default.createElement(Divider2, { variant: "default" })
          )
        };
        currentListIndex = lists.length;
        lists[currentListIndex] = {
          listVariant: variant,
          items: []
        };
        return;
      }
      case "link": {
        (_a2 = lists[currentListIndex].items) === null || _a2 === void 0 ? void 0 : _a2.push({
          element: import_react500.default.createElement(
            "li",
            { key: index, "data-itemid": `item-${itemid}`, className: styles_css_default173["list-item"] },
            import_react500.default.createElement(Link3, { definition: item, activeHref, fireChange, fireFollow, position: itemPosition })
          )
        });
        return;
      }
      case "section": {
        (_b = lists[currentListIndex].items) === null || _b === void 0 ? void 0 : _b.push({
          element: import_react500.default.createElement(
            "li",
            { key: index, "data-itemid": `item-${itemid}`, className: styles_css_default173["list-item"] },
            import_react500.default.createElement(Section, { definition: item, activeHref, variant, fireChange, fireFollow, position: itemPosition })
          )
        });
        return;
      }
      case "section-group": {
        (_c = lists[currentListIndex].items) === null || _c === void 0 ? void 0 : _c.push({
          element: import_react500.default.createElement(
            "li",
            { key: index, "data-itemid": `item-${itemid}`, className: styles_css_default173["list-item"] },
            import_react500.default.createElement(SectionGroup, { definition: item, activeHref, fireChange, fireFollow, position: itemPosition })
          )
        });
        return;
      }
      case "link-group": {
        (_d = lists[currentListIndex].items) === null || _d === void 0 ? void 0 : _d.push({
          element: import_react500.default.createElement(
            "li",
            { key: index, "data-itemid": `item-${itemid}`, className: styles_css_default173["list-item"] },
            import_react500.default.createElement(LinkGroup, { definition: item, activeHref, fireChange, fireFollow, position: itemPosition })
          )
        });
        return;
      }
      case "expandable-link-group": {
        (_e = lists[currentListIndex].items) === null || _e === void 0 ? void 0 : _e.push({
          element: import_react500.default.createElement(
            "li",
            { key: index, "data-itemid": `item-${itemid}`, className: styles_css_default173["list-item"] },
            import_react500.default.createElement(ExpandableLinkGroup, { definition: item, activeHref, fireChange, fireFollow, variant, position: itemPosition })
          )
        });
        return;
      }
    }
  });
  return import_react500.default.createElement(import_react500.default.Fragment, null, lists.map((list, index) => {
    if (!list.items || list.items.length === 0) {
      return import_react500.default.createElement("div", { key: `hr-${index}`, className: clsx_m_default(styles_css_default173.list, styles_css_default173[`list-variant-${variant}`], {
        [styles_css_default173["list-variant-root--first"]]: list.listVariant === "root" && index === 0
      }) }, list.element);
    } else {
      return import_react500.default.createElement("ul", { key: `list-${index}`, className: clsx_m_default(styles_css_default173.list, styles_css_default173[`list-variant-${list.listVariant}`], {
        [styles_css_default173["list-variant-root--first"]]: list.listVariant === "root" && index === 0
      }) }, list.items.map((item) => item.element));
    }
  }));
}
function Divider2({ variant = "default", isPresentational = false }) {
  return import_react500.default.createElement("hr", { className: clsx_m_default(styles_css_default173.divider, styles_css_default173[`divider-${variant}`]), role: isPresentational ? "presentation" : void 0 });
}
function Link3({ definition, expanded, activeHref, fireFollow, position }) {
  checkSafeUrl("SideNavigation", definition.href);
  const isActive = definition.href === activeHref;
  const onClick = (0, import_react500.useCallback)((event) => {
    if (isPlainLeftClick(event)) {
      fireFollow(definition, event);
    }
  }, [fireFollow, definition]);
  const clickActionAnalyticsMetadata = {
    action: "click",
    detail: {
      label: `.${styles_css_default172["link-text"]}`,
      external: `${!!definition.external}`,
      href: definition.href,
      position
    }
  };
  return import_react500.default.createElement(
    import_react500.default.Fragment,
    null,
    import_react500.default.createElement(
      "a",
      Object.assign({ href: definition.href, className: clsx_m_default(styles_css_default173.link, { [styles_css_default173["link-active"]]: isActive }), target: definition.external ? "_blank" : void 0, rel: definition.external ? "noopener noreferrer" : void 0, "aria-expanded": expanded, "aria-current": definition.href === activeHref ? "page" : void 0, onClick }, getAnalyticsMetadataAttribute(clickActionAnalyticsMetadata)),
      import_react500.default.createElement("span", { className: styles_css_default172["link-text"] }, definition.text),
      definition.external && import_react500.default.createElement(
        "span",
        { "aria-label": definition.externalIconAriaLabel, role: definition.externalIconAriaLabel ? "img" : void 0 },
        import_react500.default.createElement(internal_default, { name: "external", className: styles_css_default173["external-icon"] })
      )
    ),
    definition.info && import_react500.default.createElement("span", { className: clsx_m_default(styles_css_default173.info, styles_css_default174.info) }, definition.info)
  );
}
function Section({ definition, activeHref, fireFollow, fireChange, variant, position }) {
  var _a2;
  const [expanded, setExpanded] = (0, import_react500.useState)((_a2 = definition.defaultExpanded) !== null && _a2 !== void 0 ? _a2 : true);
  const isVisualRefresh = useVisualRefresh();
  const onExpandedChange = (0, import_react500.useCallback)((e3) => {
    fireChange(definition, e3.detail.expanded);
    setExpanded(e3.detail.expanded);
  }, [definition, fireChange]);
  (0, import_react500.useEffect)(() => {
    var _a3;
    setExpanded((_a3 = definition.defaultExpanded) !== null && _a3 !== void 0 ? _a3 : true);
  }, [definition]);
  return import_react500.default.createElement(
    InternalExpandableSection,
    { variant: "footer", expanded, onChange: onExpandedChange, className: clsx_m_default(styles_css_default173.section, variant === "section-group" && styles_css_default173["section--no-ident"], isVisualRefresh && styles_css_default173.refresh), headerText: definition.text },
    import_react500.default.createElement(NavigationItemsList, { variant: "section", items: definition.items, fireFollow, fireChange, activeHref, position })
  );
}
function SectionGroup({ definition, activeHref, fireFollow, fireChange, position }) {
  return import_react500.default.createElement(
    "div",
    { className: styles_css_default173["section-group"] },
    import_react500.default.createElement(InternalBox, { className: styles_css_default173["section-group-title"], variant: "h3" }, definition.title),
    import_react500.default.createElement(NavigationItemsList, { variant: "section-group", items: definition.items, fireFollow, fireChange, activeHref, position })
  );
}
function LinkGroup({ definition, activeHref, fireFollow, fireChange, position }) {
  checkSafeUrl("SideNavigation", definition.href);
  return import_react500.default.createElement(
    import_react500.default.Fragment,
    null,
    import_react500.default.createElement(Link3, { definition: { type: "link", href: definition.href, text: definition.text, info: definition.info }, fireFollow: (_, event) => fireFollow(definition, event), fireChange, activeHref, position }),
    import_react500.default.createElement(NavigationItemsList, { variant: "link-group", items: definition.items, fireFollow, fireChange, activeHref, position })
  );
}
function ExpandableLinkGroup({ definition, fireFollow, fireChange, activeHref, variant, position }) {
  const containsActiveLink = (0, import_react500.useMemo)(() => {
    return activeHref ? hasActiveLink(definition.items, activeHref) : false;
  }, [activeHref, definition.items]);
  const [expanded, setExpanded] = (0, import_react500.useState)(() => {
    var _a2;
    return (_a2 = definition.defaultExpanded) !== null && _a2 !== void 0 ? _a2 : definition.href === activeHref || containsActiveLink;
  });
  const [userExpanded, setUserExpanded] = (0, import_react500.useState)();
  (0, import_react500.useEffect)(() => setUserExpanded(void 0), [definition]);
  (0, import_react500.useEffect)(() => {
    setExpanded(definition.href === activeHref || containsActiveLink);
  }, [definition.href, containsActiveLink, activeHref]);
  (0, import_react500.useEffect)(() => {
    if (definition.defaultExpanded !== void 0) {
      setExpanded(definition.defaultExpanded);
    }
  }, [definition]);
  const onExpandedChange = (0, import_react500.useCallback)((e3) => {
    fireChange(definition, e3.detail.expanded);
    setUserExpanded(e3.detail.expanded);
  }, [definition, fireChange]);
  const onHeaderFollow = (_, event) => {
    fireFollow(definition, event);
    setUserExpanded(true);
    if (!expanded) {
      fireChange(definition, true);
    }
  };
  return import_react500.default.createElement(
    InternalExpandableSection,
    { className: clsx_m_default(styles_css_default173["expandable-link-group"], variant === "section-group" && styles_css_default173["expandable-link-group--no-ident"]), variant: "navigation", expanded: userExpanded !== null && userExpanded !== void 0 ? userExpanded : expanded, onChange: onExpandedChange, headerText: import_react500.default.createElement(Link3, { definition: { type: "link", href: definition.href, text: definition.text }, expanded: userExpanded !== null && userExpanded !== void 0 ? userExpanded : expanded, fireFollow: onHeaderFollow, fireChange, activeHref, position }) },
    import_react500.default.createElement(NavigationItemsList, { variant: "expandable-link-group", items: definition.items, fireFollow, fireChange, activeHref, position })
  );
}

// node_modules/@cloudscape-design/components/side-navigation/implementation.js
function SideNavigationImplementation(_a2) {
  var { header, itemsControl, activeHref, items = [], onFollow, onChange, __internalRootRef } = _a2, props2 = __rest(_a2, ["header", "itemsControl", "activeHref", "items", "onFollow", "onChange", "__internalRootRef"]);
  const baseProps = getBaseProps(props2);
  const isToolbar = useAppLayoutToolbarDesignEnabled();
  const parentMap = (0, import_react501.useMemo)(() => generateExpandableItemsMapping(items), [items]);
  if (isDevelopment2) {
    (0, import_react501.useEffect)(() => checkDuplicateHrefs(items), [items]);
  }
  const onChangeHandler = (0, import_react501.useCallback)((item, expanded) => {
    fireNonCancelableEvent(onChange, { item, expanded, expandableParents: parentMap.get(item) });
  }, [onChange, parentMap]);
  const onFollowHandler = (0, import_react501.useCallback)((item, sourceEvent) => {
    fireCancelableEvent(onFollow, item, sourceEvent);
  }, [onFollow]);
  return import_react501.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default173.root, baseProps.className, isToolbar && styles_css_default173["with-toolbar"]), ref: __internalRootRef }),
    header && import_react501.default.createElement(Header3, { definition: header, activeHref, fireChange: onChangeHandler, fireFollow: onFollowHandler }),
    itemsControl && import_react501.default.createElement("div", { className: styles_css_default173["items-control"] }, itemsControl),
    items && import_react501.default.createElement(
      "div",
      { className: styles_css_default173["list-container"] },
      import_react501.default.createElement(NavigationItemsList, { variant: "root", items, fireFollow: onFollowHandler, fireChange: onChangeHandler, activeHref })
    )
  );
}
var createWidgetizedSideNavigation = createWidgetizedComponent(SideNavigationImplementation);

// node_modules/@cloudscape-design/components/side-navigation/internal.js
var InternalSideNavigation = createWidgetizedSideNavigation();

// node_modules/@cloudscape-design/components/side-navigation/index.js
function SideNavigation(_a2) {
  var { items = [] } = _a2, props2 = __rest(_a2, ["items"]);
  const internalProps = useBaseComponent("SideNavigation");
  const componentAnalyticMetadata = {
    name: "awsui.SideNavigation",
    label: `.${styles_css_default172["header-link-text"]}`,
    properties: {
      activeHref: props2.activeHref || ""
    }
  };
  return import_react502.default.createElement(InternalSideNavigation, Object.assign({}, props2, internalProps, { items }, getAnalyticsMetadataAttribute({ component: componentAnalyticMetadata })));
}
applyDisplayName(SideNavigation, "SideNavigation");

// node_modules/@cloudscape-design/components/slider/index.js
var import_react506 = __toESM(require_react());

// node_modules/@cloudscape-design/components/slider/internal.js
var import_react505 = __toESM(require_react());

// node_modules/@cloudscape-design/components/slider/slider-labels.js
var import_react503 = __toESM(require_react());

// node_modules/@cloudscape-design/components/slider/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/slider/styles.scoped.css";
var styles_css_default175 = {
  "root": "awsui_root_pcgz5_13s75_153",
  "slider": "awsui_slider_pcgz5_13s75_190",
  "slider-track": "awsui_slider-track_pcgz5_13s75_194",
  "slider-range": "awsui_slider-range_pcgz5_13s75_194",
  "disabled": "awsui_disabled_pcgz5_13s75_209",
  "readonly": "awsui_readonly_pcgz5_13s75_213",
  "error": "awsui_error_pcgz5_13s75_222",
  "warning": "awsui_warning_pcgz5_13s75_225",
  "active": "awsui_active_pcgz5_13s75_228",
  "error-active": "awsui_error-active_pcgz5_13s75_231",
  "warning-active": "awsui_warning-active_pcgz5_13s75_234",
  "labels": "awsui_labels_pcgz5_13s75_245",
  "labels-noref": "awsui_labels-noref_pcgz5_13s75_251",
  "labels-reference": "awsui_labels-reference_pcgz5_13s75_254",
  "labels-min": "awsui_labels-min_pcgz5_13s75_261",
  "labels-max": "awsui_labels-max_pcgz5_13s75_267",
  "labels-aria-description": "awsui_labels-aria-description_pcgz5_13s75_275",
  "ticks": "awsui_ticks_pcgz5_13s75_293",
  "ticks-wrapper": "awsui_ticks-wrapper_pcgz5_13s75_299",
  "tick": "awsui_tick_pcgz5_13s75_293",
  "middle": "awsui_middle_pcgz5_13s75_314",
  "filled": "awsui_filled_pcgz5_13s75_317",
  "tooltip-thumb": "awsui_tooltip-thumb_pcgz5_13s75_345",
  "thumb": "awsui_thumb_pcgz5_13s75_358",
  "min": "awsui_min_pcgz5_13s75_394",
  "max": "awsui_max_pcgz5_13s75_397"
};

// node_modules/@cloudscape-design/components/slider/slider-labels.js
function SliderLabels({ min: min3, max: max3, referenceValues, valueFormatter, labelsId, ariaDescription }) {
  const isMobile = useMobile();
  const MAX_LABEL_COUNT = isMobile ? 4 : 10;
  const minDistance = (max3 - min3) / MAX_LABEL_COUNT;
  const getVisibleReferenceValues = () => {
    if (!referenceValues || referenceValues.length === 0) {
      return [];
    }
    const values2 = [];
    let lastValue = min3;
    for (let i2 = 0; i2 <= referenceValues.length; i2++) {
      if (referenceValues[i2] > min3 && referenceValues[i2] < max3 && Math.abs(referenceValues[i2] - lastValue) >= minDistance && Math.abs(max3 - referenceValues[i2]) >= minDistance && Number.isInteger(referenceValues[i2])) {
        values2.push(referenceValues[i2]);
        lastValue = referenceValues[i2];
      }
    }
    return values2;
  };
  function getLabelPosition(index) {
    const colSpan = Math.floor(minDistance / 2);
    const positionStart = index - colSpan;
    const positionEnd = index + colSpan;
    const hasSmallRange = max3 - min3 <= MAX_LABEL_COUNT;
    if (hasSmallRange) {
      return {
        min: 1,
        max: (max3 - min3) * 2 - 1,
        posStart: (index - min3) * 2,
        posEnd: (index - min3) * 2
      };
    }
    const roundedHalfCol = Math.round(colSpan / 2);
    return {
      min: colSpan * 2 + roundedHalfCol,
      max: (max3 - min3 - colSpan) * 2 - roundedHalfCol + 1,
      // add one to center the label
      posStart: (positionStart - min3) * 2 + 1 + roundedHalfCol,
      posEnd: (positionEnd - min3) * 2 - roundedHalfCol
    };
  }
  return import_react503.default.createElement(
    import_react503.default.Fragment,
    null,
    import_react503.default.createElement(
      "div",
      { role: "list", "aria-hidden": !valueFormatter && !referenceValues ? "true" : void 0, className: clsx_m_default(styles_css_default175.labels, {
        [styles_css_default175["labels-noref"]]: getVisibleReferenceValues().length === 0
      }), style: {
        [custom_css_properties_default.sliderLabelCount]: getVisibleReferenceValues().length === 0 ? 2 : (max3 - min3) * 2
      }, id: !ariaDescription ? labelsId : void 0 },
      import_react503.default.createElement("span", { role: "listitem", className: clsx_m_default(styles_css_default175.label, styles_css_default175["labels-min"]), style: {
        [custom_css_properties_default.sliderMinEnd]: getLabelPosition(0).min
      } }, valueFormatter ? valueFormatter(min3) : min3),
      getVisibleReferenceValues().map((step2) => {
        return import_react503.default.createElement("span", { role: "listitem", key: step2, style: {
          [custom_css_properties_default.sliderReferenceColumn]: getLabelPosition(step2).posStart,
          [custom_css_properties_default.sliderNextReferenceColumn]: getLabelPosition(step2).posEnd
        }, className: clsx_m_default(styles_css_default175.label, styles_css_default175["labels-reference"]) }, valueFormatter ? valueFormatter(step2) : step2);
      }),
      import_react503.default.createElement("span", { role: "listitem", className: clsx_m_default(styles_css_default175.label, styles_css_default175["labels-max"]), style: {
        [custom_css_properties_default.sliderMaxStart]: !referenceValues ? 2 : getLabelPosition(0).max
      } }, valueFormatter ? valueFormatter(max3) : max3)
    ),
    ariaDescription && import_react503.default.createElement("div", { className: styles_css_default175["labels-aria-description"], id: labelsId }, ariaDescription)
  );
}

// node_modules/@cloudscape-design/components/slider/tick-marks.js
var import_react504 = __toESM(require_react());

// node_modules/@cloudscape-design/components/slider/utils.js
function getPercent(value, range3) {
  return (value - range3[0]) / (range3[1] - range3[0]) * 100;
}
function countDecimals(value) {
  var _a2;
  if (Math.floor(value) === value) {
    return 0;
  }
  const str = Math.abs(value).toString();
  if (str.indexOf("-") !== -1) {
    return parseInt(str.split("-")[1], 10) || 0;
  }
  return ((_a2 = str.split(".")[1]) === null || _a2 === void 0 ? void 0 : _a2.length) || 0;
}
var getStepArray = (step2, [min3, max3]) => {
  const steps = [min3];
  const multiplier = Math.pow(10, countDecimals(step2));
  let currentStep = min3;
  while (currentStep < max3) {
    currentStep = (multiplier * currentStep + multiplier * step2) / multiplier;
    if (currentStep <= max3) {
      steps.push(currentStep);
    }
  }
  return steps;
};
var findLowerAndHigherValues = (array, value) => {
  let sortedArray = [...array];
  sortedArray = sortedArray.sort((a4, b2) => a4 - b2);
  const index = sortedArray.indexOf(value) || 0;
  const lower = sortedArray[index - 1] || void 0;
  const higher = sortedArray[index + 1] || void 0;
  return { lower, higher };
};
var valuesAreValid = (referenceValues) => {
  const valuesWithDecimals = referenceValues === null || referenceValues === void 0 ? void 0 : referenceValues.filter((value) => !Number.isInteger(value));
  return valuesWithDecimals.length === 0;
};
var THUMB_SIZE = 16;
var THUMB_READONLY_SIZE = 12;

// node_modules/@cloudscape-design/components/slider/tick-marks.js
function TickMark(props2) {
  const { hideFillLine, value, isActive, invalid, warning, disabled, type, min: min3, max: max3, step: step2, readOnly } = props2;
  const showWarning = warning && !invalid;
  const getType = () => {
    if (type === "min") {
      return min3;
    }
    if (type === "max") {
      return max3;
    }
    return step2;
  };
  return import_react504.default.createElement("div", { className: clsx_m_default(styles_css_default175.tick, {
    [styles_css_default175.filled]: !hideFillLine && value > getType(),
    [styles_css_default175.active]: !hideFillLine && isActive && value > getType(),
    [styles_css_default175.error]: invalid && !hideFillLine && value > getType(),
    [styles_css_default175.warning]: showWarning && !hideFillLine && value > getType(),
    [styles_css_default175["error-active"]]: invalid && isActive && !hideFillLine && value > getType(),
    [styles_css_default175["warning-active"]]: showWarning && isActive && !hideFillLine && value > getType(),
    [styles_css_default175.disabled]: disabled,
    [styles_css_default175.readonly]: readOnly,
    [styles_css_default175.middle]: type === "step"
  }) });
}
function SliderTickMarks(props2) {
  const { min: min3, max: max3, step: step2 } = props2;
  return import_react504.default.createElement(
    "div",
    { className: styles_css_default175["ticks-wrapper"] },
    import_react504.default.createElement(TickMark, Object.assign({}, props2, { type: "min" })),
    import_react504.default.createElement("div", { className: styles_css_default175.ticks, style: {
      [custom_css_properties_default.sliderTickCount]: Math.round((max3 - min3) / step2)
    } }, getStepArray(step2, [min3, max3]).map((step3, index) => import_react504.default.createElement(TickMark, Object.assign({}, props2, { type: "step", step: step3, key: `step-${index}` })))),
    import_react504.default.createElement(TickMark, Object.assign({}, props2, { type: "max" }))
  );
}

// node_modules/@cloudscape-design/components/slider/internal.js
function InternalSlider(_a2) {
  var { value, min: min3, max: max3, onChange, step: step2, disabled, readOnly, ariaLabel, ariaDescription, referenceValues, tickMarks, hideFillLine, valueFormatter, i18nStrings, __internalRootRef } = _a2, rest = __rest(_a2, ["value", "min", "max", "onChange", "step", "disabled", "readOnly", "ariaLabel", "ariaDescription", "referenceValues", "tickMarks", "hideFillLine", "valueFormatter", "i18nStrings", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const i18n = useInternalI18n("slider");
  const handleRef = (0, import_react505.useRef)(null);
  const [showTooltip, setShowTooltip] = (0, import_react505.useState)(false);
  const [isActive, setIsActive] = (0, import_react505.useState)(false);
  const labelsId = useUniqueId("labels");
  const { ariaLabelledby, ariaDescribedby, controlId, invalid, warning } = useFormFieldContext(rest);
  const showWarning = warning && !invalid;
  if (referenceValues && valuesAreValid(referenceValues) === false) {
    warnOnce("Slider", "All reference values must be integers. Non-integer values will not be displayed.");
  }
  if (min3 >= max3) {
    warnOnce("Slider", "The min value cannot be greater than the max value.");
  }
  if (step2 && step2 > max3 - min3) {
    warnOnce("Slider", "The step value cannot be greater than the difference between the min and max.");
  }
  if (step2 && value !== void 0 && (value - min3) % step2 !== 0) {
    warnOnce("Slider", "Slider value must be a multiple of the step. The value will round to the nearest step value.");
  }
  const getValue = () => {
    const stepIsValid = step2 && step2 < max3 - min3 && step2 > min3;
    if (value === void 0) {
      return max3 < min3 ? min3 : min3 + (max3 - min3) / 2;
    }
    if (!step2) {
      return value;
    }
    if (step2 && stepIsValid && (value - min3) % step2 !== 0) {
      const closest = getStepArray(step2, [min3, max3]).reduce(function(prev, curr) {
        return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;
      });
      return closest;
    }
    return value;
  };
  const sliderValue = getValue();
  const percent = getPercent(Math.max(Math.min(sliderValue, max3), min3), [min3, max3]);
  const getAriaValueText = () => {
    if (valueFormatter && valueFormatter(sliderValue)) {
      return valueFormatter(sliderValue);
    }
    if (valueFormatter && !valueFormatter(sliderValue)) {
      const middleValues = referenceValues ? referenceValues : [];
      const valueArray = [min3, ...middleValues, sliderValue, max3];
      const prevAndNext = findLowerAndHigherValues(valueArray, sliderValue);
      const previousValue = prevAndNext.lower ? valueFormatter(prevAndNext.lower) : valueFormatter(min3);
      const nextValue = prevAndNext.higher ? valueFormatter(prevAndNext.higher) : valueFormatter(max3);
      const value2 = sliderValue;
      return i18n("i18nStrings.valueTextRange", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valueTextRange(previousValue, value2, nextValue), (format3) => format3({ value: value2, previousValue, nextValue }));
    }
    return void 0;
  };
  const thumbSize = readOnly ? THUMB_READONLY_SIZE : THUMB_SIZE;
  return import_react505.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef, className: clsx_m_default(baseProps.className, styles_css_default175.root) }),
    import_react505.default.createElement(
      "div",
      { onMouseEnter: () => {
        setShowTooltip(true);
      }, onMouseLeave: () => {
        setShowTooltip(false);
      } },
      showTooltip && import_react505.default.createElement(Tooltip, { value: valueFormatter ? valueFormatter(sliderValue) : sliderValue, trackRef: handleRef, onDismiss: () => setShowTooltip(false) }),
      import_react505.default.createElement("div", { ref: handleRef, className: clsx_m_default(styles_css_default175["tooltip-thumb"], {
        [styles_css_default175.readonly]: readOnly
      }), style: {
        [custom_css_properties_default.sliderTooltipPosition]: `calc(${percent}% - ${thumbSize}px)`
      } }),
      import_react505.default.createElement(
        "div",
        { className: styles_css_default175.slider },
        import_react505.default.createElement("div", { className: clsx_m_default(styles_css_default175["slider-track"], {
          [styles_css_default175.disabled]: disabled,
          [styles_css_default175.readonly]: readOnly
        }) }),
        !hideFillLine && import_react505.default.createElement("div", { className: clsx_m_default(styles_css_default175["slider-range"], {
          [styles_css_default175.error]: invalid,
          [styles_css_default175.warning]: showWarning,
          [styles_css_default175.active]: isActive,
          [styles_css_default175["error-active"]]: invalid && isActive,
          [styles_css_default175["warning-active"]]: showWarning && isActive,
          [styles_css_default175.disabled]: disabled,
          [styles_css_default175.readonly]: readOnly
        }), style: { [custom_css_properties_default.sliderRangeInlineSize]: `${percent}%` } })
      ),
      !!step2 && tickMarks && import_react505.default.createElement(SliderTickMarks, { hideFillLine, disabled, readOnly, invalid, warning, isActive, step: step2, min: min3, max: max3, value: sliderValue }),
      import_react505.default.createElement("input", {
        // we need to add this because input[type=range] isn't natively focusable in Safari.
        tabIndex: 0,
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabel && !rest.ariaLabelledby ? void 0 : ariaLabelledby,
        "aria-describedby": valueFormatter ? ariaDescribedby ? `${labelsId} ${ariaDescribedby}` : labelsId : ariaDescribedby,
        "aria-valuetext": getAriaValueText(),
        "aria-invalid": invalid ? "true" : void 0,
        "aria-disabled": readOnly && !disabled ? "true" : void 0,
        id: controlId,
        type: "range",
        min: min3,
        max: max3,
        disabled,
        onFocus: () => {
          setShowTooltip(true);
          setIsActive(true);
        },
        onBlur: () => {
          setShowTooltip(false);
          setIsActive(false);
        },
        onTouchStart: () => {
          setShowTooltip(true);
          setIsActive(true);
        },
        onTouchEnd: () => {
          setShowTooltip(false);
          setIsActive(false);
        },
        step: step2,
        value: sliderValue,
        onChange: (event) => {
          if (readOnly) {
            return;
          }
          fireNonCancelableEvent(onChange, { value: Number(event.target.value) });
        },
        className: clsx_m_default(styles_css_default175.thumb, {
          [styles_css_default175.error]: invalid,
          [styles_css_default175.warning]: showWarning,
          [styles_css_default175.disabled]: disabled,
          [styles_css_default175.readonly]: readOnly,
          [styles_css_default175.min]: sliderValue <= min3 || max3 < min3,
          [styles_css_default175.max]: sliderValue >= max3 && min3 < max3
        })
      })
    ),
    import_react505.default.createElement(SliderLabels, { min: min3, max: max3, referenceValues, valueFormatter, labelsId, ariaDescription })
  );
}

// node_modules/@cloudscape-design/components/slider/index.js
function Slider(_a2) {
  var { tickMarks, hideFillLine } = _a2, props2 = __rest(_a2, ["tickMarks", "hideFillLine"]);
  const baseComponentProps = useBaseComponent("Slider", {
    props: { tickMarks, hideFillLine, readOnly: props2.readOnly }
  });
  return import_react506.default.createElement(InternalSlider, Object.assign({ tickMarks, hideFillLine }, props2, baseComponentProps));
}
applyDisplayName(Slider, "Slider");

// node_modules/@cloudscape-design/components/space-between/index.js
var import_react508 = __toESM(require_react());

// node_modules/@cloudscape-design/components/space-between/internal-do-not-use-core.js
var import_react507 = __toESM(require_react());
function SpaceBetween(_a2) {
  var { direction = "vertical" } = _a2, props2 = __rest(_a2, ["direction"]);
  const baseComponentProps = useBaseComponent("SpaceBetween", {
    props: { alignItems: props2.alignItems, direction, size: props2.size }
  });
  return import_react507.default.createElement(internal_default5, Object.assign({ direction }, props2, baseComponentProps));
}
applyDisplayName(SpaceBetween, "SpaceBetween");

// node_modules/@cloudscape-design/components/space-between/index.js
var SpaceBetween2 = (props2) => {
  validateProps("SpaceBetween", props2, ["nativeAttributes"], {}, "console");
  return import_react508.default.createElement(SpaceBetween, props2);
};
applyDisplayName(SpaceBetween2, "SpaceBetween");
var space_between_default = SpaceBetween2;

// node_modules/@cloudscape-design/components/spinner/index.js
var import_react510 = __toESM(require_react());

// node_modules/@cloudscape-design/components/spinner/internal-do-not-use-core.js
var import_react509 = __toESM(require_react());
function Spinner(_a2) {
  var { size = "normal", variant = "normal" } = _a2, props2 = __rest(_a2, ["size", "variant"]);
  const baseComponentProps = useBaseComponent("Spinner", {
    props: { size, variant }
  });
  return import_react509.default.createElement(InternalSpinner, Object.assign({ size, variant }, props2, baseComponentProps));
}
applyDisplayName(Spinner, "Spinner");

// node_modules/@cloudscape-design/components/spinner/index.js
var Spinner2 = (props2) => {
  validateProps("Spinner", props2, ["nativeAttributes"], {}, "console");
  return import_react510.default.createElement(Spinner, props2);
};
applyDisplayName(Spinner2, "Spinner");
var spinner_default = Spinner2;

// node_modules/@cloudscape-design/components/split-panel/index.js
var import_react521 = __toESM(require_react());

// node_modules/@cloudscape-design/components/split-panel/implementation.js
var import_react520 = __toESM(require_react());

// node_modules/@cloudscape-design/components/split-panel/bottom.js
var import_react511 = __toESM(require_react());

// node_modules/@cloudscape-design/components/split-panel/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/split-panel/styles.scoped.css";
var styles_css_default176 = {
  "drawer": "awsui_drawer_1r9lg_492kg_153",
  "drawer-closed": "awsui_drawer-closed_1r9lg_492kg_190",
  "refresh": "awsui_refresh_1r9lg_492kg_190",
  "drawer-content-side": "awsui_drawer-content-side_1r9lg_492kg_194",
  "drawer-content-bottom": "awsui_drawer-content-bottom_1r9lg_492kg_210",
  "position-bottom": "awsui_position-bottom_1r9lg_492kg_217",
  "hidden": "awsui_hidden_1r9lg_492kg_225",
  "drawer-clickable": "awsui_drawer-clickable_1r9lg_492kg_236",
  "position-side": "awsui_position-side_1r9lg_492kg_247",
  "with-toolbar": "awsui_with-toolbar_1r9lg_492kg_252",
  "slider-wrapper-bottom": "awsui_slider-wrapper-bottom_1r9lg_492kg_256",
  "slider-wrapper-side": "awsui_slider-wrapper-side_1r9lg_492kg_267",
  "open-button-side": "awsui_open-button-side_1r9lg_492kg_281",
  "pane-header-wrapper-bottom": "awsui_pane-header-wrapper-bottom_1r9lg_492kg_290",
  "drawer-mobile": "awsui_drawer-mobile_1r9lg_492kg_300",
  "drawer-disable-content-paddings": "awsui_drawer-disable-content-paddings_1r9lg_492kg_304",
  "content-bottom": "awsui_content-bottom_1r9lg_492kg_316",
  "pane-bottom-center-align": "awsui_pane-bottom-center-align_1r9lg_492kg_335",
  "pane-bottom-content-nav-padding": "awsui_pane-bottom-content-nav-padding_1r9lg_492kg_340",
  "pane-bottom-content-tools-padding": "awsui_pane-bottom-content-tools-padding_1r9lg_492kg_344",
  "content-bottom-max-width": "awsui_content-bottom-max-width_1r9lg_492kg_348",
  "content-side": "awsui_content-side_1r9lg_492kg_353",
  "pane-header-wrapper-side": "awsui_pane-header-wrapper-side_1r9lg_492kg_365",
  "pane-content-wrapper-side": "awsui_pane-content-wrapper-side_1r9lg_492kg_374",
  "header": "awsui_header_1r9lg_492kg_385",
  "header-main-row": "awsui_header-main-row_1r9lg_492kg_393",
  "header-main-content": "awsui_header-main-content_1r9lg_492kg_393",
  "header-tag-and-info": "awsui_header-tag-and-info_1r9lg_492kg_407",
  "with-description": "awsui_with-description_1r9lg_492kg_412",
  "header-tag": "awsui_header-tag_1r9lg_492kg_407",
  "with-info": "awsui_with-info_1r9lg_492kg_415",
  "header-text": "awsui_header-text_1r9lg_492kg_415",
  "header-before-slot": "awsui_header-before-slot_1r9lg_492kg_421",
  "with-header-text": "awsui_with-header-text_1r9lg_492kg_432",
  "header-actions-slot": "awsui_header-actions-slot_1r9lg_492kg_438",
  "header-description": "awsui_header-description_1r9lg_492kg_444",
  "header-buttons": "awsui_header-buttons_1r9lg_492kg_451",
  "divider": "awsui_divider_1r9lg_492kg_459"
};

// node_modules/@cloudscape-design/components/split-panel/bottom.js
function SplitPanelContentBottom({ closeBehavior, baseProps, isOpen, splitPanelRef, cappedSize, header, resizeHandle, children: children2, appLayoutMaxWidth, panelHeaderId, ariaLabel, onToggle, hasCustomElements }) {
  const isRefresh = useVisualRefresh();
  const isToolbar = useAppLayoutToolbarDesignEnabled();
  const { bottomOffset, leftOffset, rightOffset, disableContentPaddings, contentWrapperPaddings, reportHeaderHeight, headerHeight: headerBlockSize, animationDisabled } = useSplitPanelContext();
  const isMobile = useMobile();
  const headerRef = (0, import_react511.useRef)(null);
  useResizeObserver(headerRef, (entry) => {
    const visibleHeaderSize = closeBehavior === "hide" && !isOpen ? 0 : entry.borderBoxHeight;
    reportHeaderHeight(visibleHeaderSize);
  });
  (0, import_react511.useEffect)(() => {
    return () => reportHeaderHeight(0);
  }, []);
  const centeredMaxWidthClasses = clsx_m_default({
    [styles_css_default176["pane-bottom-center-align"]]: isRefresh,
    [styles_css_default176["pane-bottom-content-nav-padding"]]: contentWrapperPaddings === null || contentWrapperPaddings === void 0 ? void 0 : contentWrapperPaddings.closedNav,
    [styles_css_default176["pane-bottom-content-tools-padding"]]: contentWrapperPaddings === null || contentWrapperPaddings === void 0 ? void 0 : contentWrapperPaddings.closedTools
  });
  return import_react511.default.createElement("div", Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default176.drawer, styles_css_default176["position-bottom"], styles_css_default42.root, {
    [styles_css_default36["with-motion-vertical"]]: !animationDisabled,
    [styles_css_default42["open-position-bottom"]]: isOpen,
    [styles_css_default176["drawer-closed"]]: !isOpen,
    [styles_css_default176["drawer-clickable"]]: !hasCustomElements,
    [styles_css_default176["drawer-mobile"]]: isMobile,
    [styles_css_default176["drawer-disable-content-paddings"]]: disableContentPaddings,
    [styles_css_default176.refresh]: isRefresh,
    [styles_css_default176["with-toolbar"]]: isToolbar,
    [styles_css_default176.hidden]: closeBehavior === "hide" && !isOpen
  }), onClick: () => !isOpen && !hasCustomElements && onToggle(), style: {
    insetBlockEnd: bottomOffset,
    insetInlineStart: leftOffset,
    insetInlineEnd: rightOffset,
    blockSize: isOpen ? cappedSize : closeBehavior === "hide" ? 0 : isToolbar && headerBlockSize !== void 0 ? `calc(${headerBlockSize}px + ${borderPanelTopWidth})` : void 0
  }, ref: splitPanelRef }), closeBehavior === "hide" && !isOpen ? null : import_react511.default.createElement(
    import_react511.default.Fragment,
    null,
    isOpen && import_react511.default.createElement("div", { className: styles_css_default176["slider-wrapper-bottom"] }, resizeHandle),
    import_react511.default.createElement(
      "div",
      { className: styles_css_default176["drawer-content-bottom"], "aria-labelledby": panelHeaderId, "aria-label": ariaLabel, role: "region" },
      import_react511.default.createElement("div", { className: clsx_m_default(styles_css_default176["pane-header-wrapper-bottom"], centeredMaxWidthClasses), ref: headerRef }, header),
      import_react511.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default176["content-bottom"], centeredMaxWidthClasses), "aria-hidden": !isOpen },
        import_react511.default.createElement("div", { className: clsx_m_default({ [styles_css_default176["content-bottom-max-width"]]: isRefresh }), style: appLayoutMaxWidth }, children2)
      )
    )
  ));
}

// node_modules/@cloudscape-design/components/split-panel/preferences-modal.js
var import_react518 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tiles/internal.js
var import_react513 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tiles/tile.js
var import_react512 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tiles/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/tiles/analytics-metadata/styles.scoped.css";
var styles_css_default177 = {
  "radio-button": "awsui_radio-button_feeqa_1rmzd_5"
};

// node_modules/@cloudscape-design/components/tiles/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/tiles/styles.scoped.css";
var styles_css_default178 = {
  "column-layout": "awsui_column-layout_vj6p7_1p9yl_189",
  "grid": "awsui_grid_vj6p7_1p9yl_221",
  "grid-no-gutters": "awsui_grid-no-gutters_vj6p7_1p9yl_227",
  "grid-variant-text-grid": "awsui_grid-variant-text-grid_vj6p7_1p9yl_231",
  "grid-breakpoint-default": "awsui_grid-breakpoint-default_vj6p7_1p9yl_239",
  "grid-columns-1": "awsui_grid-columns-1_vj6p7_1p9yl_242",
  "grid-breakpoint-xxs": "awsui_grid-breakpoint-xxs_vj6p7_1p9yl_242",
  "grid-breakpoint-xs": "awsui_grid-breakpoint-xs_vj6p7_1p9yl_245",
  "grid-columns-2": "awsui_grid-columns-2_vj6p7_1p9yl_248",
  "grid-columns-3": "awsui_grid-columns-3_vj6p7_1p9yl_254",
  "grid-columns-4": "awsui_grid-columns-4_vj6p7_1p9yl_260",
  "grid-vertical-borders": "awsui_grid-vertical-borders_vj6p7_1p9yl_276",
  "grid-horizontal-borders": "awsui_grid-horizontal-borders_vj6p7_1p9yl_309",
  "root": "awsui_root_vj6p7_1p9yl_359",
  "tile-container": "awsui_tile-container_vj6p7_1p9yl_394",
  "refresh": "awsui_refresh_vj6p7_1p9yl_419",
  "selected": "awsui_selected_vj6p7_1p9yl_423",
  "disabled": "awsui_disabled_vj6p7_1p9yl_423",
  "readonly": "awsui_readonly_vj6p7_1p9yl_423",
  "has-metadata": "awsui_has-metadata_vj6p7_1p9yl_426",
  "columns": "awsui_columns_vj6p7_1p9yl_448",
  "column-1": "awsui_column-1_vj6p7_1p9yl_455",
  "breakpoint-xs": "awsui_breakpoint-xs_vj6p7_1p9yl_462",
  "breakpoint-xxs": "awsui_breakpoint-xxs_vj6p7_1p9yl_466",
  "column-2": "awsui_column-2_vj6p7_1p9yl_470",
  "column-3": "awsui_column-3_vj6p7_1p9yl_485",
  "column-4": "awsui_column-4_vj6p7_1p9yl_500",
  "control": "awsui_control_vj6p7_1p9yl_516",
  "no-image": "awsui_no-image_vj6p7_1p9yl_520",
  "image": "awsui_image_vj6p7_1p9yl_524"
};

// node_modules/@cloudscape-design/components/tiles/tile.js
var Tile = import_react512.default.forwardRef((_a2, forwardedRef) => {
  var { item, selected, name, breakpoint, onChange, readOnly } = _a2, rest = __rest(_a2, ["item", "selected", "name", "breakpoint", "onChange", "readOnly"]);
  const internalRef = (0, import_react512.useRef)(null);
  const isVisualRefresh = useVisualRefresh();
  const mergedRef = useMergeRefs(internalRef, forwardedRef);
  return import_react512.default.createElement(
    "div",
    Object.assign({ className: clsx_m_default(styles_css_default178["tile-container"], { [styles_css_default178["has-metadata"]]: item.description || item.image }, { [styles_css_default178.selected]: selected }, { [styles_css_default178.disabled]: !!item.disabled }, { [styles_css_default178.readonly]: readOnly }, { [styles_css_default178.refresh]: isVisualRefresh }, styles_css_default178[`breakpoint-${breakpoint}`]), "data-value": item.value, onClick: () => {
      var _a3;
      if (item.disabled || readOnly) {
        return;
      }
      (_a3 = internalRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
      if (!selected) {
        fireNonCancelableEvent(onChange, { value: item.value });
      }
    } }, copyAnalyticsMetadataAttribute(rest)),
    import_react512.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default178.control, { [styles_css_default178["no-image"]]: !item.image }) },
      import_react512.default.createElement(radio_button_default, { checked: selected, ref: mergedRef, name, value: item.value, label: item.label, description: item.description, disabled: item.disabled, controlId: item.controlId, readOnly, className: styles_css_default177["radio-button"] })
    ),
    item.image && import_react512.default.createElement("div", { className: clsx_m_default(styles_css_default178.image, { [styles_css_default178.disabled]: !!item.disabled }) }, item.image)
  );
});

// node_modules/@cloudscape-design/components/tiles/internal.js
var COLUMN_TRIGGERS2 = ["default", "xxs", "xs"];
var InternalTiles = import_react513.default.forwardRef((_a2, ref) => {
  var { name, value, items, ariaLabel, ariaRequired, ariaControls, columns, onChange, readOnly, __internalRootRef } = _a2, rest = __rest(_a2, ["name", "value", "items", "ariaLabel", "ariaRequired", "ariaControls", "columns", "onChange", "readOnly", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const { ariaDescribedby, ariaLabelledby } = useFormFieldContext(rest);
  const generatedName = useUniqueId("awsui-tiles-");
  const [tileRef, tileRefIndex] = useRadioGroupForwardFocus(ref, items, value);
  const [breakpoint, breakpointRef] = useContainerBreakpoints(COLUMN_TRIGGERS2);
  const mergedRef = useMergeRefs(breakpointRef, __internalRootRef);
  const columnCount = getColumnCount(items, columns);
  return import_react513.default.createElement(
    "div",
    Object.assign({ role: "radiogroup", "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby, "aria-required": ariaRequired, "aria-controls": ariaControls, "aria-readonly": readOnly ? "true" : void 0 }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default178.root), ref: mergedRef }),
    import_react513.default.createElement("div", { className: clsx_m_default(styles_css_default178.columns, styles_css_default178[`column-${columnCount}`]) }, items && items.map((item, index) => import_react513.default.createElement(Tile, Object.assign({ ref: index === tileRefIndex ? tileRef : void 0, key: item.value, item, selected: item.value === value, name: name || generatedName, breakpoint, onChange, readOnly }, !item.disabled && !readOnly ? getAnalyticsMetadataAttribute({
      action: "select",
      detail: {
        position: `${index + 1}`,
        value: item.value,
        label: `.${styles_css_default177["radio-button"]}`
      }
    }) : {}))))
  );
});
function getColumnCount(items, columns) {
  if (columns) {
    return columns;
  }
  const nItems = items ? items.length : 0;
  const columnsLookup = {
    0: 1,
    1: 1,
    2: 2,
    4: 2,
    8: 2
  };
  return columnsLookup[nItems] || 3;
}
var internal_default30 = InternalTiles;

// node_modules/@cloudscape-design/components/split-panel/icons/bottom-icon.js
var import_react514 = __toESM(require_react());

// node_modules/@cloudscape-design/components/split-panel/icons/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/split-panel/icons/styles.scoped.css";
var styles_css_default179 = {
  "preference-icon--svg": "awsui_preference-icon--svg_d4xxm_19o1r_145",
  "preference-icon--layout-border": "awsui_preference-icon--layout-border_d4xxm_19o1r_151",
  "preference-icon--layout-background": "awsui_preference-icon--layout-background_d4xxm_19o1r_155",
  "preference-icon--layout-header": "awsui_preference-icon--layout-header_d4xxm_19o1r_158",
  "preference-icon--border": "awsui_preference-icon--border_d4xxm_19o1r_161",
  "preference-icon--primary-button": "awsui_preference-icon--primary-button_d4xxm_19o1r_165",
  "preference-icon--secondary": "awsui_preference-icon--secondary_d4xxm_19o1r_168",
  "preference-icon--disabled-element": "awsui_preference-icon--disabled-element_d4xxm_19o1r_171",
  "preference-icon--separator": "awsui_preference-icon--separator_d4xxm_19o1r_174",
  "preference-icon--focus-text": "awsui_preference-icon--focus-text_d4xxm_19o1r_177",
  "preference-icon-refresh--svg": "awsui_preference-icon-refresh--svg_d4xxm_19o1r_181",
  "preference-icon-refresh--layout-top": "awsui_preference-icon-refresh--layout-top_d4xxm_19o1r_187",
  "preference-icon-refresh--layout-main": "awsui_preference-icon-refresh--layout-main_d4xxm_19o1r_190",
  "preference-icon-refresh--primary": "awsui_preference-icon-refresh--primary_d4xxm_19o1r_193",
  "preference-icon-refresh--disabled": "awsui_preference-icon-refresh--disabled_d4xxm_19o1r_196",
  "preference-icon-refresh--column-header": "awsui_preference-icon-refresh--column-header_d4xxm_19o1r_199",
  "preference-icon-refresh--window": "awsui_preference-icon-refresh--window_d4xxm_19o1r_202",
  "preference-icon-refresh--secondary": "awsui_preference-icon-refresh--secondary_d4xxm_19o1r_206",
  "preference-icon-refresh--default": "awsui_preference-icon-refresh--default_d4xxm_19o1r_209",
  "preference-icon-refresh--separator": "awsui_preference-icon-refresh--separator_d4xxm_19o1r_212",
  "preference-icon-refresh--input-default": "awsui_preference-icon-refresh--input-default_d4xxm_19o1r_215",
  "preference-icon-refresh--heading": "awsui_preference-icon-refresh--heading_d4xxm_19o1r_218"
};

// node_modules/@cloudscape-design/components/split-panel/icons/bottom-icon.js
var bottomPositionIcon = import_react514.default.createElement(
  "svg",
  { className: styles_css_default179["preference-icon--svg"], focusable: "false", viewBox: "0 0 240 134", version: "1.1", xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", "aria-hidden": "true" },
  import_react514.default.createElement(
    "g",
    { stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd" },
    import_react514.default.createElement(
      "g",
      null,
      import_react514.default.createElement(
        "g",
        null,
        import_react514.default.createElement("rect", { className: styles_css_default179["preference-icon--layout-border"], strokeWidth: "2", x: "1", y: "1", width: "238", height: "125", rx: "2" }),
        import_react514.default.createElement("rect", { className: styles_css_default179["preference-icon--layout-background"], x: "12", y: "0", width: "217", height: "126" }),
        import_react514.default.createElement("path", { className: styles_css_default179["preference-icon--layout-header"], d: "M2,0 L238,0 C239.104569,-1.58997828e-14 240,0.8954305 240,2 L240,10 L240,10 L0,10 L0,2 C-1.3527075e-16,0.8954305 0.8954305,2.02906125e-16 2,0 Z" })
      ),
      import_react514.default.createElement(
        "g",
        { transform: "translate(28.000000, 22.000000)" },
        import_react514.default.createElement("rect", { className: styles_css_default179["preference-icon--border"], strokeWidth: "2", x: "1", y: "1", width: "182", height: "110", rx: "2" }),
        import_react514.default.createElement("rect", { className: styles_css_default179["preference-icon--primary-button"], x: "152", y: "6", width: "26", height: "10" }),
        import_react514.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "122", y: "6", width: "26", height: "10" }),
        import_react514.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "92", y: "6", width: "26", height: "10" }),
        import_react514.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "122", y: "29", width: "55", height: "3" }),
        import_react514.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "92", y: "29", width: "26", height: "3" }),
        import_react514.default.createElement("polygon", { className: styles_css_default179["preference-icon--focus-text"], points: "19 29 49 29 49 32 19 32" }),
        import_react514.default.createElement("polygon", { className: styles_css_default179["preference-icon--focus-text"], points: "10 10 40 10 40 13 10 13" }),
        import_react514.default.createElement("polygon", { className: styles_css_default179["preference-icon--disabled-element"], points: "10 29 13 29 13 32 10 32" }),
        import_react514.default.createElement("line", { className: styles_css_default179["preference-icon--separator"], x1: "3", y1: "22.7619048", x2: "181", y2: "22.7619048", strokeWidth: "2", strokeLinecap: "square" }),
        import_react514.default.createElement(
          "g",
          { transform: "translate(3.000000, 37.285714)" },
          import_react514.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
          import_react514.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
          import_react514.default.createElement("polygon", { className: styles_css_default179["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
          import_react514.default.createElement("polygon", { className: styles_css_default179["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
          import_react514.default.createElement("line", { className: styles_css_default179["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
        )
      ),
      import_react514.default.createElement(
        "g",
        { transform: "translate(12.000000, 74.000000)" },
        import_react514.default.createElement(
          "g",
          null,
          import_react514.default.createElement("rect", { className: styles_css_default179["preference-icon--border"], strokeWidth: "2", x: "1", y: "1", width: "215", height: "58", rx: "2" }),
          import_react514.default.createElement("rect", { className: styles_css_default179["preference-icon--secondary"], x: "177", y: "8", width: "30.6630435", height: "10" }),
          import_react514.default.createElement("polygon", { className: styles_css_default179["preference-icon--focus-text"], points: "10 12 45.3804348 12 45.3804348 15 10 15" })
        ),
        import_react514.default.createElement(
          "g",
          { className: styles_css_default179["preference-icon--secondary"], transform: "translate(9.000000, 40.000000)" },
          import_react514.default.createElement("polygon", { points: "-3.55271368e-15 0 39 0 39 3 -3.55271368e-15 3" }),
          import_react514.default.createElement("polygon", { points: "53 0 92 0 92 3 53 3" }),
          import_react514.default.createElement("polygon", { points: "107 0 146 0 146 3 107 3" }),
          import_react514.default.createElement("polygon", { points: "160 0 199 0 199 3 160 3" }),
          import_react514.default.createElement("polygon", { points: "-3.55271368e-15 9 39 9 39 12 -3.55271368e-15 12" }),
          import_react514.default.createElement("polygon", { points: "53 9 92 9 92 12 53 12" }),
          import_react514.default.createElement("polygon", { points: "107 9 146 9 146 12 107 12" }),
          import_react514.default.createElement("polygon", { points: "160 9 199 9 199 12 160 12" })
        ),
        import_react514.default.createElement("polygon", { className: styles_css_default179["preference-icon--focus-text"], points: "10 23 32 23 32 26 10 26" }),
        import_react514.default.createElement("polygon", { className: styles_css_default179["preference-icon--secondary"], points: "40 23 62 23 62 26 40 26" })
      )
    )
  )
);
var bottom_icon_default = bottomPositionIcon;

// node_modules/@cloudscape-design/components/split-panel/icons/bottom-icon-refresh.js
var import_react516 = __toESM(require_react());

// node_modules/@cloudscape-design/components/split-panel/icons/side-position-refresh.js
var import_react515 = __toESM(require_react());
var getClassName3 = (suffix) => styles_css_default179[`preference-icon-refresh--${suffix}`];
var TableRow = ({ offset, separator = true, isHeader }) => {
  const offsetTop = 0.4482;
  const offsetBottom = 3.4482;
  return import_react515.default.createElement(
    "g",
    { transform: `translate(0, ${offset})`, className: getClassName3(isHeader ? "column-header" : "disabled") },
    import_react515.default.createElement("path", { d: `M19 ${offsetTop}2H22V${offsetBottom}H19V${offsetTop}Z` }),
    import_react515.default.createElement("path", { d: `M27 ${offsetTop}H51V${offsetBottom}H27V${offsetTop}Z`, className: !isHeader ? getClassName3("secondary") : void 0 }),
    import_react515.default.createElement("path", { d: `M90 ${offsetTop}H110V${offsetBottom}H90V${offsetTop}Z` }),
    import_react515.default.createElement("path", { d: `M113 ${offsetTop}H157V${offsetBottom}H113V${offsetTop}Z` }),
    separator && import_react515.default.createElement("path", { d: "M14 8H159.387", className: getClassName3("separator"), strokeLinecap: "square" })
  );
};
var SidePanelRow = ({ offset }) => {
  return import_react515.default.createElement(
    "g",
    { transform: `translate(0, ${offset})`, className: getClassName3("secondary") },
    import_react515.default.createElement("path", { d: "M177 0H190V3H177V0Z" }),
    import_react515.default.createElement("path", { d: "M195 0H208V3H195V0Z" })
  );
};
var bottomPositionIcon2 = import_react515.default.createElement(
  "svg",
  { className: getClassName3("svg"), focusable: "false", viewBox: "0 0 230 128", version: "1.1", xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", "aria-hidden": "true" },
  import_react515.default.createElement("path", { d: "M2 1H214C214.552 1 215 1.44772 215 2V126C215 126.552 214.552 127 214 127H2.00001C1.44772 127 1 126.552 1 126V2C1 1.44772 1.44772 1 2 1Z", className: getClassName3("window"), strokeWidth: "2" }),
  import_react515.default.createElement(
    "g",
    { className: "awsui-context-top-navigation" },
    import_react515.default.createElement("rect", { x: "2", y: "2", width: "212", height: "6", className: getClassName3("layout-top") })
  ),
  import_react515.default.createElement(
    "g",
    null,
    import_react515.default.createElement("path", { d: "M2 8H214V23H2V8Z", className: getClassName3("layout-main") }),
    import_react515.default.createElement(
      "g",
      { className: getClassName3("default") },
      import_react515.default.createElement("path", { d: "M9 15.5C9 16.8807 7.88071 18 6.5 18C5.11929 18 4 16.8807 4 15.5C4 14.1193 5.11929 13 6.5 13C7.88071 13 9 14.1193 9 15.5Z", className: getClassName3("disabled") }),
      import_react515.default.createElement("path", { d: "M16 14H46.1484V17H16V14Z" }),
      import_react515.default.createElement("path", { d: "M92 15.5C92 13.567 93.567 12 95.5 12H108.86C110.793 12 112.36 13.567 112.36 15.5C112.36 17.433 110.793 19 108.86 19H95.5C93.567 19 92 17.433 92 15.5Z" }),
      import_react515.default.createElement("path", { d: "M116 15.5C116 13.567 117.567 12 119.5 12H132.86C134.793 12 136.36 13.567 136.36 15.5C136.36 17.433 134.793 19 132.86 19H119.5C117.567 19 116 17.433 116 15.5Z" }),
      import_react515.default.createElement("path", { d: "M139 15.5C139 13.567 140.567 12 142.5 12H155.86C157.793 12 159.36 13.567 159.36 15.5C159.36 17.433 157.793 19 155.86 19H142.5C140.567 19 139 17.433 139 15.5Z", className: getClassName3("primary") })
    )
  ),
  import_react515.default.createElement(TableRow, { offset: 27, isHeader: true }),
  import_react515.default.createElement(TableRow, { offset: 39 }),
  import_react515.default.createElement(TableRow, { offset: 51 }),
  import_react515.default.createElement(TableRow, { offset: 63 }),
  import_react515.default.createElement(TableRow, { offset: 75 }),
  import_react515.default.createElement(TableRow, { offset: 87 }),
  import_react515.default.createElement(TableRow, { offset: 99 }),
  import_react515.default.createElement(TableRow, { offset: 111, separator: false }),
  import_react515.default.createElement("rect", { x: "166", y: "13", width: "62", height: "108", rx: "5", className: getClassName3("window"), strokeWidth: "2" }),
  import_react515.default.createElement("rect", { x: "169", y: "62", width: "3", height: "8", rx: "1.5", className: getClassName3("input-default") }),
  import_react515.default.createElement("path", { d: "M216 14V120", className: getClassName3("separator") }),
  import_react515.default.createElement(
    "g",
    { className: getClassName3("disabled") },
    import_react515.default.createElement("path", { d: "M224 19.5C224 20.8807 222.881 22 221.5 22C220.119 22 219 20.8807 219 19.5C219 18.1193 220.119 17 221.5 17C222.881 17 224 18.1193 224 19.5Z" }),
    import_react515.default.createElement("path", { d: "M224 27.5C224 28.8807 222.881 30 221.5 30C220.119 30 219 28.8807 219 27.5C219 26.1193 220.119 25 221.5 25C222.881 25 224 26.1193 224 27.5Z" })
  ),
  import_react515.default.createElement("path", { d: "M177 23H191V28H177V23Z", className: getClassName3("heading") }),
  import_react515.default.createElement(
    "g",
    { className: getClassName3("secondary") },
    import_react515.default.createElement("path", { d: "M207 23H212V28H207V23Z" }),
    import_react515.default.createElement("path", { d: "M199 23H204V28H199V23Z" })
  ),
  import_react515.default.createElement(SidePanelRow, { offset: 36 }),
  import_react515.default.createElement(SidePanelRow, { offset: 48 }),
  import_react515.default.createElement(SidePanelRow, { offset: 60 }),
  import_react515.default.createElement(SidePanelRow, { offset: 72 })
);
var side_position_refresh_default = bottomPositionIcon2;

// node_modules/@cloudscape-design/components/split-panel/icons/bottom-icon-refresh.js
var TableRow2 = ({ offset, isHeader }) => {
  const offsetTop = 0.4482;
  const offsetBottom = 3.4482;
  return import_react516.default.createElement(
    "g",
    { transform: `translate(0, ${offset})`, className: getClassName3(isHeader ? "column-header" : "disabled") },
    import_react516.default.createElement("path", { d: `M31 ${offsetTop}H34V${offsetBottom}H31V${offsetTop}Z` }),
    import_react516.default.createElement("path", { d: `M39 ${offsetTop}H63V${offsetBottom}H39V${offsetTop}Z`, className: !isHeader ? getClassName3("secondary") : void 0 }),
    import_react516.default.createElement("path", { d: `M135 ${offsetTop}H155V${offsetBottom}H135V${offsetTop}Z` }),
    import_react516.default.createElement("path", { d: `M158 ${offsetTop}H202V${offsetBottom}H158V${offsetTop}Z` }),
    import_react516.default.createElement("path", { d: "M26 8H204.388", className: getClassName3("separator"), strokeLinecap: "square" })
  );
};
var SidePanelRow2 = ({ offset }) => {
  return import_react516.default.createElement(
    "g",
    { transform: `translate(0, ${offset})`, className: getClassName3("secondary") },
    import_react516.default.createElement("path", { d: "M27 0H59V3H27V0Z" }),
    import_react516.default.createElement("path", { d: "M75 0H107V3H75V0Z" }),
    import_react516.default.createElement("path", { d: "M123 0H155V3H123V0Z" }),
    import_react516.default.createElement("path", { d: "M171 0H203V3H171V0Z" })
  );
};
var bottomPositionIcon3 = import_react516.default.createElement(
  "svg",
  { className: getClassName3("svg"), focusable: "false", viewBox: "0 0 230 128", version: "1.1", xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", "aria-hidden": "true" },
  import_react516.default.createElement("path", { d: "M2 1H228C228.552 1 229 1.44772 229 2V117C229 117.552 228.552 118 228 118H2C1.44772 118 1 117.552 1 117V2C1 1.44772 1.44772 1 2 1Z", className: getClassName3("window"), strokeWidth: "2" }),
  import_react516.default.createElement(
    "g",
    { className: "awsui-context-top-navigation" },
    import_react516.default.createElement("rect", { x: "2", y: "2", width: "226", height: "6", className: getClassName3("layout-top") })
  ),
  import_react516.default.createElement(
    "g",
    null,
    import_react516.default.createElement("path", { d: "M2 8H228V23H2V8Z", className: getClassName3("layout-main") }),
    import_react516.default.createElement(
      "g",
      { className: getClassName3("default") },
      import_react516.default.createElement("path", { d: "M9 15.5C9 16.8807 7.88071 18 6.5 18C5.11929 18 4 16.8807 4 15.5C4 14.1193 5.11929 13 6.5 13C7.88071 13 9 14.1193 9 15.5Z", className: getClassName3("disabled") }),
      import_react516.default.createElement("path", { d: "M26 14H56.1484V17H26V14Z" }),
      import_react516.default.createElement("path", { d: "M139 15.5C139 13.567 140.567 12 142.5 12H155.86C157.793 12 159.36 13.567 159.36 15.5C159.36 17.433 157.793 19 155.86 19H142.5C140.567 19 139 17.433 139 15.5Z" }),
      import_react516.default.createElement("path", { d: "M163 15.5C163 13.567 164.567 12 166.5 12H179.86C181.793 12 183.36 13.567 183.36 15.5C183.36 17.433 181.793 19 179.86 19H166.5C164.567 19 163 17.433 163 15.5Z" }),
      import_react516.default.createElement("path", { d: "M186 15.5C186 13.567 187.567 12 189.5 12H202.86C204.793 12 206.36 13.567 206.36 15.5C206.36 17.433 204.793 19 202.86 19H189.5C187.567 19 186 17.433 186 15.5Z", className: getClassName3("primary") }),
      import_react516.default.createElement("circle", { cx: "223.5", cy: "15.5", r: "2.5", className: getClassName3("disabled") })
    )
  ),
  import_react516.default.createElement(TableRow2, { offset: 27, isHeader: true }),
  import_react516.default.createElement(TableRow2, { offset: 39 }),
  import_react516.default.createElement(TableRow2, { offset: 51 }),
  import_react516.default.createElement(TableRow2, { offset: 63 }),
  import_react516.default.createElement("rect", { x: "8", y: "75", width: "214", height: "52", rx: "5", className: getClassName3("window"), strokeWidth: "2" }),
  import_react516.default.createElement("rect", { x: "111", y: "79", width: "8", height: "3", rx: "1.5", className: getClassName3("input-default") }),
  import_react516.default.createElement("path", { d: "M27 87H57V92H27V87Z", className: getClassName3("heading") }),
  import_react516.default.createElement(
    "g",
    { className: getClassName3("secondary") },
    import_react516.default.createElement("path", { d: "M198 87H203V92H198V87Z" }),
    import_react516.default.createElement("path", { d: "M190 87H195V92H190V87Z" })
  ),
  import_react516.default.createElement(SidePanelRow2, { offset: 99 }),
  import_react516.default.createElement(SidePanelRow2, { offset: 106 }),
  import_react516.default.createElement(SidePanelRow2, { offset: 113 })
);
var bottom_icon_refresh_default = bottomPositionIcon3;

// node_modules/@cloudscape-design/components/split-panel/icons/side-position.js
var import_react517 = __toESM(require_react());
var sidePositionIcon = import_react517.default.createElement(
  "svg",
  { className: styles_css_default179["preference-icon--svg"], focusable: "false", viewBox: "0 0 239 134", version: "1.1", xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", "aria-hidden": "true" },
  import_react517.default.createElement(
    "g",
    { stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd" },
    import_react517.default.createElement(
      "g",
      null,
      import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--layout-border"], strokeWidth: "2", x: "1", y: "1", width: "223", height: "125", rx: "2" }),
      import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--layout-background"], x: "11.25", y: "0", width: "203.4375", height: "125" }),
      import_react517.default.createElement("path", { className: styles_css_default179["preference-icon--layout-header"], d: "M2,0 L223,0 C224.104569,-2.02906125e-16 225,0.8954305 225,2 L225,10 L225,10 L0,10 L0,2 C-1.3527075e-16,0.8954305 0.8954305,2.02906125e-16 2,0 Z" })
    ),
    import_react517.default.createElement(
      "g",
      { transform: "translate(20.000000, 22.000000)" },
      import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--border"], strokeWidth: "2", x: "1", y: "1", width: "182", height: "110", rx: "2" }),
      import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--primary-button"], x: "152", y: "6", width: "26", height: "10" }),
      import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "122", y: "6", width: "26", height: "10" }),
      import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "92", y: "6", width: "26", height: "10" }),
      import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "122", y: "29", width: "55", height: "3" }),
      import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "92", y: "29", width: "26", height: "3" }),
      import_react517.default.createElement("polygon", { className: styles_css_default179["preference-icon--focus-text"], points: "19 29 49 29 49 32 19 32" }),
      import_react517.default.createElement("polygon", { className: styles_css_default179["preference-icon--focus-text"], points: "10 10 40 10 40 13 10 13" }),
      import_react517.default.createElement("polygon", { className: styles_css_default179["preference-icon--disabled-element"], points: "10 29 13 29 13 32 10 32" }),
      import_react517.default.createElement("line", { className: styles_css_default179["preference-icon--separator"], x1: "3", y1: "22.7619048", x2: "181", y2: "22.7619048", strokeWidth: "2", strokeLinecap: "square" }),
      import_react517.default.createElement(
        "g",
        { transform: "translate(3.000000, 37.285714)" },
        import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
        import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
        import_react517.default.createElement("polygon", { className: styles_css_default179["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
        import_react517.default.createElement("polygon", { className: styles_css_default179["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
        import_react517.default.createElement("line", { className: styles_css_default179["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
      ),
      import_react517.default.createElement(
        "g",
        { transform: "translate(3.000000, 51.714286)" },
        import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
        import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
        import_react517.default.createElement("polygon", { className: styles_css_default179["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
        import_react517.default.createElement("polygon", { className: styles_css_default179["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
        import_react517.default.createElement("line", { className: styles_css_default179["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
      ),
      import_react517.default.createElement(
        "g",
        { transform: "translate(3.000000, 80.571429)" },
        import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
        import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
        import_react517.default.createElement("polygon", { className: styles_css_default179["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
        import_react517.default.createElement("polygon", { className: styles_css_default179["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
        import_react517.default.createElement("line", { className: styles_css_default179["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
      ),
      import_react517.default.createElement(
        "g",
        { transform: "translate(3.000000, 66.142857)" },
        import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
        import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
        import_react517.default.createElement("polygon", { className: styles_css_default179["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
        import_react517.default.createElement("polygon", { className: styles_css_default179["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
        import_react517.default.createElement("line", { className: styles_css_default179["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
      ),
      import_react517.default.createElement(
        "g",
        { transform: "translate(3.000000, 95.000000)" },
        import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "119", y: "6", width: "55", height: "3" }),
        import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--disabled-element"], x: "89", y: "6", width: "26", height: "3" }),
        import_react517.default.createElement("polygon", { className: styles_css_default179["preference-icon--focus-text"], points: "16 6 46 6 46 9 16 9" }),
        import_react517.default.createElement("polygon", { className: styles_css_default179["preference-icon--disabled-element"], points: "7 6 10 6 10 9 7 9" }),
        import_react517.default.createElement("line", { className: styles_css_default179["preference-icon--separator"], x1: "0", y1: "0.666666667", x2: "178", y2: "0.666666667", strokeLinecap: "square" })
      )
    ),
    import_react517.default.createElement(
      "g",
      { transform: "translate(182.000000, 28.000000)" },
      import_react517.default.createElement(
        "g",
        null,
        import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--border"], strokeWidth: "2", x: "1", y: "1", width: "55", height: "97", rx: "2" }),
        import_react517.default.createElement("rect", { className: styles_css_default179["preference-icon--secondary"], x: "39.5474354", y: "5.86666667", width: "14", height: "6.41666667" }),
        import_react517.default.createElement("polygon", { className: styles_css_default179["preference-icon--focus-text"], points: "3.62672811 7.88333333 24.6267281 7.88333333 24.6267281 10.6333333 3.62672811 10.6333333" })
      ),
      import_react517.default.createElement(
        "g",
        { transform: "translate(4.000000, 22.000000)", className: styles_css_default179["preference-icon--secondary"] },
        import_react517.default.createElement("polygon", { points: "0 0 23 0 23 2 0 2" }),
        import_react517.default.createElement("polygon", { points: "26 0 49 0 49 2 26 2" })
      ),
      import_react517.default.createElement(
        "g",
        { transform: "translate(4.000000, 32.000000)", className: styles_css_default179["preference-icon--secondary"] },
        import_react517.default.createElement("polygon", { points: "0 0 23 0 23 2 0 2" }),
        import_react517.default.createElement("polygon", { points: "26 0 49 0 49 2 26 2" })
      ),
      import_react517.default.createElement(
        "g",
        { transform: "translate(4.000000, 43.000000)", className: styles_css_default179["preference-icon--secondary"] },
        import_react517.default.createElement("polygon", { points: "0 0 23 0 23 2 0 2" }),
        import_react517.default.createElement("polygon", { points: "26 0 49 0 49 2 26 2" })
      ),
      import_react517.default.createElement(
        "g",
        { transform: "translate(4.000000, 51.000000)", className: styles_css_default179["preference-icon--secondary"] },
        import_react517.default.createElement("polygon", { points: "0 0 23 0 23 2 0 2" }),
        import_react517.default.createElement("polygon", { points: "26 0 49 0 49 2 26 2" })
      )
    )
  )
);
var side_position_default = sidePositionIcon;

// node_modules/@cloudscape-design/components/split-panel/preferences-modal.js
var preferences_modal_default2 = (props2) => {
  const [position, setPosition] = (0, import_react518.useState)(props2.preferences.position);
  const onCancel = () => {
    setPosition(props2.preferences.position);
    props2.onDismiss();
  };
  const onConfirm = () => {
    props2.onConfirm({ position });
  };
  return import_react518.default.createElement(
    InternalModal,
    { size: "medium", visible: props2.visible, onDismiss: props2.onDismiss, header: props2.i18nStrings.header, closeAriaLabel: props2.i18nStrings.close, footer: import_react518.default.createElement(
      InternalBox,
      { float: "right" },
      import_react518.default.createElement(
        internal_default5,
        { direction: "horizontal", size: "xs" },
        import_react518.default.createElement(InternalButton, { onClick: onCancel, formAction: "none", variant: "link" }, props2.i18nStrings.cancel),
        import_react518.default.createElement(InternalButton, { onClick: onConfirm, variant: "primary" }, props2.i18nStrings.confirm)
      )
    ), __internalRootRef: props2.__internalRootRef },
    import_react518.default.createElement(
      InternalFormField,
      { label: props2.i18nStrings.positionLabel, description: props2.i18nStrings.positionDescription },
      import_react518.default.createElement(internal_default30, { onChange: (e3) => setPosition(e3.detail.value), value: position, columns: 2, items: [
        {
          label: props2.i18nStrings.positionBottom,
          image: props2.isRefresh ? bottom_icon_refresh_default : bottom_icon_default,
          value: "bottom"
        },
        {
          label: props2.i18nStrings.positionSide,
          image: props2.isRefresh ? side_position_refresh_default : side_position_default,
          value: "side",
          disabled: props2.disabledSidePosition
        }
      ] })
    )
  );
};

// node_modules/@cloudscape-design/components/split-panel/side.js
var import_react519 = __toESM(require_react());
function SplitPanelContentSide({ style, baseProps, splitPanelRef, toggleRef, header, children: children2, resizeHandle, isOpen, cappedSize, openButtonAriaLabel, panelHeaderId, ariaLabel, onToggle, closeBehavior }) {
  const { topOffset, bottomOffset, animationDisabled } = useSplitPanelContext();
  const isRefresh = useVisualRefresh();
  const isToolbar = useAppLayoutToolbarDesignEnabled();
  const disableAnimation = animationDisabled || closeBehavior === "hide" && !isOpen;
  return import_react519.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default176.drawer, styles_css_default176["position-side"], styles_css_default42.root, {
      [styles_css_default36["with-motion-horizontal"]]: !disableAnimation,
      [styles_css_default42["open-position-side"]]: isOpen,
      [styles_css_default176["drawer-closed"]]: !isOpen,
      [styles_css_default176["with-toolbar"]]: isToolbar,
      [styles_css_default176.refresh]: isRefresh
    }), style: Object.assign({ width: isOpen ? cappedSize : isRefresh ? "0px" : void 0, maxWidth: isRefresh ? "100%" : void 0 }, style), ref: splitPanelRef }),
    import_react519.default.createElement(
      "div",
      { className: styles_css_default176["drawer-content-side"], style: {
        top: topOffset,
        bottom: bottomOffset
      }, onClick: () => !isOpen && onToggle(), "aria-labelledby": panelHeaderId, "aria-label": ariaLabel, role: "region" },
      isOpen ? import_react519.default.createElement("div", { className: clsx_m_default(styles_css_default176["slider-wrapper-side"], isToolbar && styles_css_default176["with-toolbar"]) }, resizeHandle) : closeBehavior === "hide" ? null : import_react519.default.createElement(internal_default3, {
        className: clsx_m_default(styles_css_default42["open-button"], styles_css_default176["open-button-side"]),
        iconName: "angle-left",
        variant: "icon",
        formAction: "none",
        ariaLabel: openButtonAriaLabel,
        ariaExpanded: isOpen,
        //toggleRef should only be assigned when there is no other trigger-buttons
        ref: isRefresh || isToolbar ? null : toggleRef
      }),
      import_react519.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default176["content-side"], isToolbar && styles_css_default176["with-toolbar"]), "aria-hidden": !isOpen, style: { width: isToolbar ? cappedSize : "0px" } },
        import_react519.default.createElement("div", { className: styles_css_default176["pane-header-wrapper-side"] }, header),
        import_react519.default.createElement("div", { className: styles_css_default176["pane-content-wrapper-side"] }, children2)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/split-panel/implementation.js
function SplitPanelImplementation(_a2) {
  var { __internalRootRef, header, children: children2, hidePreferencesButton, closeBehavior, i18nStrings = {}, ariaLabel, headerActions, headerBefore, headerDescription, headerInfo } = _a2, restProps = __rest(_a2, ["__internalRootRef", "header", "children", "hidePreferencesButton", "closeBehavior", "i18nStrings", "ariaLabel", "headerActions", "headerBefore", "headerDescription", "headerInfo"]);
  const isRefresh = useVisualRefresh();
  const isToolbar = useAppLayoutToolbarDesignEnabled();
  if (!header && !headerBefore) {
    warnOnce("SplitPanel", "You must provide either `header` or `headerBefore`.");
  }
  const { position, topOffset, bottomOffset, rightOffset, contentWidthStyles, isOpen, isForcedPosition, onPreferencesChange, onResize, onToggle, size, relativeSize, setSplitPanelToggle, refs, animationDisabled } = useSplitPanelContext();
  const baseProps = getBaseProps(restProps);
  const [isPreferencesOpen, setPreferencesOpen] = (0, import_react520.useState)(false);
  const appLayoutMaxWidth = isRefresh && position === "bottom" ? contentWidthStyles : void 0;
  const openButtonAriaLabel = i18nStrings.openButtonAriaLabel;
  (0, import_react520.useEffect)(() => {
    setSplitPanelToggle({ displayed: closeBehavior === "collapse", ariaLabel: openButtonAriaLabel });
    return () => {
      setSplitPanelToggle({ displayed: false, ariaLabel: void 0 });
    };
  }, [setSplitPanelToggle, openButtonAriaLabel, closeBehavior]);
  const splitPanelRefObject = (0, import_react520.useRef)(null);
  const sizeControlProps = {
    position,
    panelRef: splitPanelRefObject,
    handleRef: refs.slider,
    onResize
  };
  const onSliderPointerDown = usePointerEvents(sizeControlProps);
  const { onKeyDown, onDirectionClick } = useKeyboardEvents(sizeControlProps);
  const contentStyle = {
    [global_vars_default.stickyVerticalTopOffset]: topOffset,
    [global_vars_default.stickyVerticalBottomOffset]: bottomOffset
  };
  const panelHeaderUniqueId = useUniqueId("split-panel-header");
  const panelHeaderId = ariaLabel ? void 0 : panelHeaderUniqueId;
  const showActions = headerActions && isOpen;
  const showDescription = headerDescription && isOpen;
  const hasCustomElements = !!headerActions || !!headerBefore || !!headerInfo;
  const wrappedHeader = import_react520.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default176.header, isToolbar && styles_css_default176["with-toolbar"]), style: appLayoutMaxWidth },
    import_react520.default.createElement(
      "div",
      { className: styles_css_default176["header-main-row"] },
      import_react520.default.createElement(
        "div",
        { className: styles_css_default176["header-main-content"] },
        import_react520.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default176["header-tag-and-info"], showDescription && styles_css_default176["with-description"]) },
          import_react520.default.createElement(
            "h2",
            { className: clsx_m_default(styles_css_default176["header-tag"], !!headerInfo && styles_css_default176["with-info"]), id: panelHeaderId },
            headerBefore && import_react520.default.createElement("div", { className: clsx_m_default(styles_css_default176["header-before-slot"], styles_css_default42["header-before"], !!header && styles_css_default176["with-header-text"]) }, headerBefore),
            !!header && import_react520.default.createElement("div", { className: clsx_m_default(styles_css_default176["header-text"], styles_css_default42["header-text"]) }, header)
          ),
          headerInfo && import_react520.default.createElement("span", { className: clsx_m_default(styles_css_default176["header-info-slot"], styles_css_default42["header-info"]) }, headerInfo)
        ),
        showActions && import_react520.default.createElement("div", { className: clsx_m_default(styles_css_default176["header-actions-slot"], styles_css_default42["header-actions"]) }, headerActions)
      ),
      import_react520.default.createElement(
        "div",
        { className: styles_css_default176["header-buttons"] },
        !hidePreferencesButton && isOpen && import_react520.default.createElement(
          import_react520.default.Fragment,
          null,
          import_react520.default.createElement(InternalButton, { className: styles_css_default42["preferences-button"], iconName: "settings", variant: "icon", onClick: () => setPreferencesOpen(true), formAction: "none", ariaLabel: i18nStrings.preferencesTitle, ref: refs.preferences }),
          import_react520.default.createElement("span", { className: styles_css_default176.divider })
        ),
        isOpen ? import_react520.default.createElement(InternalButton, { className: styles_css_default42["close-button"], iconName: isRefresh && closeBehavior === "collapse" ? position === "side" ? "angle-right" : "angle-down" : "close", variant: "icon", onClick: onToggle, formAction: "none", ariaLabel: i18nStrings.closeButtonAriaLabel, ariaExpanded: isOpen }) : position === "side" || closeBehavior === "hide" ? null : import_react520.default.createElement(InternalButton, { className: styles_css_default42["open-button"], iconName: "angle-up", variant: "icon", formAction: "none", ariaLabel: i18nStrings.openButtonAriaLabel, ref: refs.toggle, ariaExpanded: isOpen, onClick: hasCustomElements ? onToggle : void 0 })
      )
    ),
    showDescription && import_react520.default.createElement("p", { className: clsx_m_default(styles_css_default176["header-description"], styles_css_default42["header-description"]) }, headerDescription)
  );
  const resizeHandle = import_react520.default.createElement(panel_resize_handle_default, {
    ref: refs.slider,
    className: styles_css_default42.slider,
    tooltipText: i18nStrings.resizeHandleTooltipText,
    ariaLabel: i18nStrings.resizeHandleAriaLabel,
    // Allows us to use the logical left/right keys to move the slider left/right,
    // but match aria keyboard behavior of using left/right to decrease/increase
    // the slider value.
    ariaValuenow: position === "bottom" ? relativeSize : 100 - relativeSize,
    position,
    onKeyDown,
    onPointerDown: onSliderPointerDown,
    onDirectionClick
  });
  (0, import_react520.useLayoutEffect)(() => {
    const root = splitPanelRefObject.current;
    if (root) {
      const property = "transform";
      const temporaryValue = "translateZ(0)";
      const valueBefore = root.style[property];
      root.style[property] = temporaryValue;
      void root.offsetHeight;
      root.style[property] = valueBefore;
    }
  }, [rightOffset, __internalRootRef]);
  const mergedRef = useMergeRefs(splitPanelRefObject, __internalRootRef);
  if (closeBehavior === "hide" && !isOpen && (animationDisabled || !isRefresh)) {
    return import_react520.default.createElement(import_react520.default.Fragment, null);
  }
  if (isRefresh && !isToolbar && !isOpen && position === "side") {
    return import_react520.default.createElement(import_react520.default.Fragment, null);
  }
  return import_react520.default.createElement(
    import_react520.default.Fragment,
    null,
    position === "side" && import_react520.default.createElement(SplitPanelContentSide, { style: contentStyle, resizeHandle, baseProps, isOpen, splitPanelRef: mergedRef, cappedSize: size, onToggle, openButtonAriaLabel, toggleRef: refs.toggle, header: wrappedHeader, panelHeaderId, ariaLabel, closeBehavior }, children2),
    position === "bottom" && import_react520.default.createElement(SplitPanelContentBottom, { style: contentStyle, resizeHandle, baseProps, isOpen, splitPanelRef: mergedRef, cappedSize: size, onToggle, header: wrappedHeader, panelHeaderId, appLayoutMaxWidth, ariaLabel, closeBehavior, hasCustomElements }, children2),
    isPreferencesOpen && import_react520.default.createElement(preferences_modal_default2, { visible: true, preferences: { position }, disabledSidePosition: position === "bottom" && isForcedPosition, isRefresh, i18nStrings: {
      header: i18nStrings.preferencesTitle,
      confirm: i18nStrings.preferencesConfirm,
      cancel: i18nStrings.preferencesCancel,
      close: i18nStrings.preferencesCloseAriaLabel,
      positionLabel: i18nStrings.preferencesPositionLabel,
      positionDescription: i18nStrings.preferencesPositionDescription,
      positionBottom: i18nStrings.preferencesPositionBottom,
      positionSide: i18nStrings.preferencesPositionSide
    }, onConfirm: (preferences) => {
      onPreferencesChange(Object.assign({}, preferences));
      setPreferencesOpen(false);
    }, onDismiss: () => {
      setPreferencesOpen(false);
    } })
  );
}
var createWidgetizedSplitPanel = createWidgetizedComponent(SplitPanelImplementation);

// node_modules/@cloudscape-design/components/split-panel/internal.js
var SplitPanelInternal = createWidgetizedSplitPanel();

// node_modules/@cloudscape-design/components/split-panel/index.js
function SplitPanel2(_a2) {
  var { hidePreferencesButton = false, closeBehavior = "collapse", i18nStrings = {} } = _a2, restProps = __rest(_a2, ["hidePreferencesButton", "closeBehavior", "i18nStrings"]);
  const { __internalRootRef } = useBaseComponent("SplitPanel", {
    props: { closeBehavior, hidePreferencesButton },
    metadata: {
      hasHeaderActions: Boolean(restProps.headerActions),
      hasHeaderDescription: Boolean(restProps.headerDescription),
      hasHeaderInfo: Boolean(restProps.headerInfo),
      hasHeaderBefore: Boolean(restProps.headerBefore)
    }
  });
  const i18n = useInternalI18n("split-panel");
  const i18nModal = useInternalI18n("modal");
  return import_react521.default.createElement(SplitPanelInternal, Object.assign({}, restProps, { __internalRootRef, hidePreferencesButton, closeBehavior, i18nStrings: Object.assign(Object.assign({}, i18nStrings), { closeButtonAriaLabel: i18n("i18nStrings.closeButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.closeButtonAriaLabel), openButtonAriaLabel: i18n("i18nStrings.openButtonAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.openButtonAriaLabel), resizeHandleAriaLabel: i18n("i18nStrings.resizeHandleAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.resizeHandleAriaLabel), resizeHandleTooltipText: i18n("i18nStrings.resizeHandleTooltipText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.resizeHandleTooltipText), preferencesTitle: i18n("i18nStrings.preferencesTitle", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesTitle), preferencesConfirm: i18n("i18nStrings.preferencesConfirm", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesConfirm), preferencesCancel: i18n("i18nStrings.preferencesCancel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesCancel), preferencesCloseAriaLabel: i18nModal("closeAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesCloseAriaLabel) || (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesCancel), preferencesPositionLabel: i18n("i18nStrings.preferencesPositionLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesPositionLabel), preferencesPositionDescription: i18n("i18nStrings.preferencesPositionDescription", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesPositionDescription), preferencesPositionBottom: i18n("i18nStrings.preferencesPositionBottom", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesPositionBottom), preferencesPositionSide: i18n("i18nStrings.preferencesPositionSide", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.preferencesPositionSide) }) }));
}
applyDisplayName(SplitPanel2, "SplitPanel");

// node_modules/@cloudscape-design/components/status-indicator/index.js
var import_react523 = __toESM(require_react());

// node_modules/@cloudscape-design/components/status-indicator/internal-do-not-use-core.js
var import_react522 = __toESM(require_react());
function StatusIndicator2(_a2) {
  var { type = "success", wrapText = true } = _a2, props2 = __rest(_a2, ["type", "wrapText"]);
  const baseComponentProps = useBaseComponent("StatusIndicator", {
    props: { colorOverride: props2.colorOverride, type, wrapText }
  });
  return import_react522.default.createElement(StatusIndicator, Object.assign({ type, wrapText }, props2, baseComponentProps));
}
applyDisplayName(StatusIndicator2, "StatusIndicator");

// node_modules/@cloudscape-design/components/status-indicator/index.js
var StatusIndicator3 = (props2) => {
  validateProps("StatusIndicator", props2, ["nativeAttributes"], {}, "console");
  return import_react523.default.createElement(StatusIndicator2, props2);
};
applyDisplayName(StatusIndicator3, "StatusIndicator");
var status_indicator_default = StatusIndicator3;

// node_modules/@cloudscape-design/components/steps/index.js
var import_react525 = __toESM(require_react());

// node_modules/@cloudscape-design/components/steps/internal.js
var import_react524 = __toESM(require_react());

// node_modules/@cloudscape-design/components/steps/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/steps/styles.scoped.css";
var styles_css_default180 = {
  "root": "awsui_root_gxp9y_psgtx_181",
  "list": "awsui_list_gxp9y_psgtx_212",
  "container": "awsui_container_gxp9y_psgtx_217",
  "header": "awsui_header_gxp9y_psgtx_222",
  "details": "awsui_details_gxp9y_psgtx_226",
  "connector": "awsui_connector_gxp9y_psgtx_232"
};

// node_modules/@cloudscape-design/components/steps/internal.js
var InternalStep = ({ status, statusIconAriaLabel, header, details }) => {
  return import_react524.default.createElement(
    "li",
    { className: styles_css_default180.container },
    import_react524.default.createElement(
      "div",
      { className: styles_css_default180.header },
      import_react524.default.createElement(StatusIndicator, { type: status, iconAriaLabel: statusIconAriaLabel }, header)
    ),
    import_react524.default.createElement("hr", { className: styles_css_default180.connector, role: "none" }),
    details && import_react524.default.createElement("div", { className: styles_css_default180.details }, details)
  );
};
var InternalSteps = (_a2) => {
  var { steps, ariaLabel, ariaLabelledby, ariaDescribedby, __internalRootRef } = _a2, props2 = __rest(_a2, ["steps", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "__internalRootRef"]);
  return import_react524.default.createElement(
    "div",
    Object.assign({}, props2, { className: clsx_m_default(styles_css_default180.root, props2.className), ref: __internalRootRef }),
    import_react524.default.createElement("ol", { className: styles_css_default180.list, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby }, steps.map((step2, index) => import_react524.default.createElement(InternalStep, { key: index, status: step2.status, statusIconAriaLabel: step2.statusIconAriaLabel, header: step2.header, details: step2.details })))
  );
};
var internal_default31 = InternalSteps;

// node_modules/@cloudscape-design/components/steps/index.js
var Steps = (_a2) => {
  var { steps } = _a2, props2 = __rest(_a2, ["steps"]);
  const baseProps = getBaseProps(props2);
  const baseComponentProps = useBaseComponent("Steps");
  const externalProps = getExternalProps(props2);
  return import_react525.default.createElement(internal_default31, Object.assign({}, baseProps, baseComponentProps, externalProps, { steps }));
};
applyDisplayName(Steps, "Steps");
var steps_default = Steps;

// node_modules/@cloudscape-design/components/table/index.js
var import_react526 = __toESM(require_react());
var Table = import_react526.default.forwardRef((_a2, ref) => {
  var _b, _c, _d;
  var { items = [], selectedItems = [], variant = "container", contentDensity = "comfortable", cellVerticalAlign = "middle", firstIndex = 1 } = _a2, props2 = __rest(_a2, ["items", "selectedItems", "variant", "contentDensity", "cellVerticalAlign", "firstIndex"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props2);
  const hasHiddenColumns = props2.visibleColumns && props2.visibleColumns.length < props2.columnDefinitions.length || ((_b = props2.columnDisplay) === null || _b === void 0 ? void 0 : _b.some((col) => !col.visible));
  const hasStickyColumns = !!((_c = props2.stickyColumns) === null || _c === void 0 ? void 0 : _c.first) || !!((_d = props2.stickyColumns) === null || _d === void 0 ? void 0 : _d.last);
  const baseComponentProps = useBaseComponent("Table", {
    props: {
      contentDensity,
      resizableColumns: props2.resizableColumns,
      selectionType: props2.selectionType,
      stickyHeader: props2.stickyHeader,
      stripedRows: props2.stripedRows,
      variant,
      wrapLines: props2.wrapLines,
      enableKeyboardNavigation: props2.enableKeyboardNavigation,
      totalItemsCount: props2.totalItemsCount,
      flowType: analyticsMetadata.flowType,
      cellVerticalAlign
    },
    metadata: {
      expandableRows: !!props2.expandableRows,
      progressiveLoading: !!props2.getLoadingStatus,
      inlineEdit: props2.columnDefinitions.some((def) => !!def.editConfig),
      disabledInlineEdit: props2.columnDefinitions.some((def) => {
        var _a3;
        return !!((_a3 = def.editConfig) === null || _a3 === void 0 ? void 0 : _a3.disabledReason);
      }),
      hasSortableColumns: props2.columnDefinitions.some((def) => def.sortingField || def.sortingComparator),
      hasHiddenColumns,
      hasStickyColumns,
      hasFilterSlot: !!props2.filter,
      hasPaginationSlot: !!props2.pagination,
      itemsCount: items.length,
      hasInstanceIdentifier: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier),
      hasResourceType: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.resourceType),
      usesVisibleColumns: !!props2.visibleColumns,
      usesColumnDisplay: !!props2.columnDisplay,
      usesColumnDefinitionsVerticalAlign: props2.columnDefinitions.some((def) => def.verticalAlign !== cellVerticalAlign)
    }
  }, analyticsMetadata);
  const analyticsComponentMetadata = {
    name: "awsui.Table",
    label: { root: "self" },
    properties: {
      selectionType: props2.selectionType || "none",
      itemsCount: `${items.length}`,
      selectedItemsCount: `${selectedItems.length}`,
      variant
    }
  };
  const sortingColumnId = getSortingColumnId(props2.columnDefinitions, props2.sortingColumn);
  if (sortingColumnId) {
    analyticsComponentMetadata.properties.sortingColumnId = sortingColumnId;
    analyticsComponentMetadata.properties.sortingDescending = `${props2.sortingDescending || false}`;
  }
  const tableProps = Object.assign(Object.assign(Object.assign(Object.assign({
    items,
    selectedItems,
    variant,
    contentDensity,
    firstIndex,
    cellVerticalAlign
  }, props2), baseComponentProps), { ref }), getAnalyticsMetadataAttribute({ component: analyticsComponentMetadata }));
  const collectionPreferencesMetadata = {
    tableContentDensity: contentDensity,
    tableHasStripedRows: !!props2.stripedRows,
    tableHasHiddenColumns: hasHiddenColumns,
    tableHasStickyColumns: hasStickyColumns
  };
  if (variant === "borderless" || variant === "embedded") {
    return import_react526.default.createElement(
      CollectionPreferencesMetadata.Provider,
      { value: collectionPreferencesMetadata },
      import_react526.default.createElement(internal_default29, Object.assign({}, tableProps))
    );
  }
  return import_react526.default.createElement(
    CollectionPreferencesMetadata.Provider,
    { value: collectionPreferencesMetadata },
    import_react526.default.createElement(
      AnalyticsFunnelSubStep,
      null,
      import_react526.default.createElement(InternalTableAsSubstep, Object.assign({}, tableProps))
    )
  );
});
applyDisplayName(Table, "Table");
var table_default = Table;

// node_modules/@cloudscape-design/components/tabs/index.js
var import_react528 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tabs/tab-header-bar.js
var import_react527 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tabs/native-smooth-scroll-supported.js
function native_smooth_scroll_supported_default() {
  return "scrollBehavior" in document.documentElement.style;
}

// node_modules/@cloudscape-design/components/tabs/smooth-scroll.js
var getScrollSpeed = (pixels) => 15e-4 * Math.abs(pixels) + 0.558;
var getScrollTime = (pixels) => Math.round(Math.abs(pixels) / getScrollSpeed(pixels));
var now = () => window.performance ? window.performance.now() : Date.now();
var ease = (k3) => {
  return 0.5 * (1 - Math.cos(Math.PI * k3));
};
var step = (context) => {
  const time2 = now();
  const elapsed = Math.min((time2 - context.startTime) / context.scrollTime, 1);
  const value = ease(elapsed);
  const currentX = context.startX + (context.endX - context.startX) * value;
  context.scrollable.scrollLeft = currentX;
  if (currentX !== context.endX) {
    requestAnimationFrame(() => step(context));
  }
};
var simulateSmoothScroll = (element, endX) => {
  const startX = element.scrollLeft;
  step({
    scrollable: element,
    startX,
    endX,
    startTime: now(),
    scrollTime: getScrollTime(endX - startX)
  });
};
var smoothScroll = (element, to) => {
  if (isMotionDisabled(element)) {
    element.scrollLeft = to;
    return;
  }
  if (native_smooth_scroll_supported_default() && element.scrollTo) {
    element.scrollTo({
      left: to,
      behavior: "smooth"
    });
    return;
  }
  simulateSmoothScroll(element, to);
};
var smooth_scroll_default = smoothScroll;

// node_modules/@cloudscape-design/components/tabs/scroll-utils.js
var onPaginationClick = (headerBarRef, direction) => {
  if (!(headerBarRef === null || headerBarRef === void 0 ? void 0 : headerBarRef.current)) {
    return;
  }
  const element = headerBarRef.current;
  const { scrollLeft, scrollWidth, offsetWidth } = element;
  const paginatedSectionSize = Math.ceil(element.clientWidth * 0.75);
  const scrollDistance = direction === "forward" ? Math.min(Math.abs(scrollLeft) + paginatedSectionSize, scrollWidth - offsetWidth) : Math.max(Math.abs(scrollLeft) - paginatedSectionSize, 0);
  const scrollTo = getIsRtl(element) ? scrollDistance * -1 : scrollDistance;
  smooth_scroll_default(element, scrollTo);
};
var hasHorizontalOverflow = (headerBar, inlineStartOverflowButton) => {
  const { offsetWidth, scrollWidth } = headerBar;
  const paginationButtonsWidth = inlineStartOverflowButton.current && 2 * inlineStartOverflowButton.current.offsetWidth;
  return paginationButtonsWidth ? scrollWidth > offsetWidth + paginationButtonsWidth : scrollWidth > offsetWidth;
};
var hasInlineStartOverflow = (headerBar) => {
  return getScrollInlineStart(headerBar) > 0;
};
var hasInlineEndOverflow = (headerBar) => {
  return Math.ceil(getScrollInlineStart(headerBar)) < headerBar.scrollWidth - headerBar.offsetWidth;
};
var scrollIntoView = (tabHeader, headerBar, smooth = true) => {
  if (!tabHeader || !headerBar) {
    return;
  }
  const margin = 2;
  let updatedLeftScroll = headerBar.scrollLeft;
  updatedLeftScroll = Math.min(updatedLeftScroll, tabHeader.offsetLeft - margin);
  updatedLeftScroll = Math.max(updatedLeftScroll, tabHeader.offsetLeft + tabHeader.offsetWidth / 2 - headerBar.offsetWidth / 2 + margin);
  if (smooth) {
    smooth_scroll_default(headerBar, updatedLeftScroll);
  } else {
    headerBar.scrollLeft = updatedLeftScroll;
  }
};

// node_modules/@cloudscape-design/components/tabs/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/tabs/analytics-metadata/styles.scoped.css";
var styles_css_default181 = {
  "tabs-header-list": "awsui_tabs-header-list_1acwa_dp0cl_5",
  "active-tab-header": "awsui_active-tab-header_1acwa_dp0cl_6",
  "tab-label": "awsui_tab-label_1acwa_dp0cl_7",
  "tab-dismiss-button": "awsui_tab-dismiss-button_1acwa_dp0cl_8"
};

// node_modules/@cloudscape-design/components/tabs/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/tabs/styles.scoped.css";
var styles_css_default182 = {
  "tabs-header": "awsui_tabs-header_14rmt_1l8w6_154",
  "tab-header-scroll-container": "awsui_tab-header-scroll-container_14rmt_1l8w6_163",
  "tabs-header-list": "awsui_tabs-header-list_14rmt_1l8w6_169",
  "pagination-button": "awsui_pagination-button_14rmt_1l8w6_186",
  "pagination-button-left": "awsui_pagination-button-left_14rmt_1l8w6_193",
  "pagination-button-left-scrollable": "awsui_pagination-button-left-scrollable_14rmt_1l8w6_196",
  "pagination-button-right": "awsui_pagination-button-right_14rmt_1l8w6_200",
  "pagination-button-right-scrollable": "awsui_pagination-button-right-scrollable_14rmt_1l8w6_203",
  "actions-container": "awsui_actions-container_14rmt_1l8w6_208",
  "tabs-tab": "awsui_tabs-tab_14rmt_1l8w6_216",
  "tabs-tab-label": "awsui_tabs-tab-label_14rmt_1l8w6_226",
  "tabs-tab-header-container": "awsui_tabs-tab-header-container_14rmt_1l8w6_237",
  "tabs-tab-dismiss": "awsui_tabs-tab-dismiss_14rmt_1l8w6_248",
  "tabs-tab-action": "awsui_tabs-tab-action_14rmt_1l8w6_248",
  "refresh": "awsui_refresh_14rmt_1l8w6_253",
  "tabs-tab-disabled": "awsui_tabs-tab-disabled_14rmt_1l8w6_257",
  "tabs-tab-link": "awsui_tabs-tab-link_14rmt_1l8w6_299",
  "tabs-tab-active": "awsui_tabs-tab-active_14rmt_1l8w6_377",
  "tabs-header-with-divider": "awsui_tabs-header-with-divider_14rmt_1l8w6_384",
  "tabs-tab-focusable": "awsui_tabs-tab-focusable_14rmt_1l8w6_388",
  "root": "awsui_root_14rmt_1l8w6_392",
  "tabs": "awsui_tabs_14rmt_1l8w6_154",
  "tabs-content": "awsui_tabs-content_14rmt_1l8w6_430",
  "fit-height": "awsui_fit-height_14rmt_1l8w6_434",
  "tabs-content-active": "awsui_tabs-content-active_14rmt_1l8w6_440",
  "tabs-content-wrapper": "awsui_tabs-content-wrapper_14rmt_1l8w6_454",
  "with-paddings": "awsui_with-paddings_14rmt_1l8w6_454",
  "tabs-container-content-wrapper": "awsui_tabs-container-content-wrapper_14rmt_1l8w6_465",
  "disabled-reason-tooltip": "awsui_disabled-reason-tooltip_14rmt_1l8w6_476",
  "tabs-tab-focused": "awsui_tabs-tab-focused_14rmt_1l8w6_480"
};

// node_modules/@cloudscape-design/components/tabs/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/tabs/test-classes/styles.scoped.css";
var styles_css_default183 = {
  "tab-dismiss-button": "awsui_tab-dismiss-button_1nq1i_1nd7r_5"
};

// node_modules/@cloudscape-design/components/tabs/tab-header-bar.js
var tabSelector = `.${styles_css_default182["tabs-tab-link"]}`;
var focusedTabSelector = `.${styles_css_default182["tabs-tab-focused"]}`;
var focusableTabSelector = `.${styles_css_default182["tabs-tab-focusable"]}`;
function dismissButton2({ dismissLabel, dismissDisabled, onDismiss, tabId }) {
  return import_react527.default.createElement(InternalButton, { onClick: onDismiss, variant: "icon", iconName: "close", formAction: "none", ariaLabel: dismissLabel, disabled: dismissDisabled, className: clsx_m_default(styles_css_default183["tab-dismiss-button"], styles_css_default181["tab-dismiss-button"]), "data-testid": `awsui-tab-dismiss-button-${tabId}` });
}
function TabHeaderBar({ onChange, activeTabId, tabs, variant, idNamespace, ariaLabel, ariaLabelledby, i18nStrings, keyboardActivationMode, actions }) {
  const headerBarRef = (0, import_react527.useRef)(null);
  const activeTabHeaderRef = (0, import_react527.useRef)(null);
  const inlineStartOverflowButton = (0, import_react527.useRef)(null);
  const i18n = useInternalI18n("tabs");
  const isVisualRefresh = useVisualRefresh();
  const containerObjectRef = (0, import_react527.useRef)(null);
  const documentRef = (0, import_react527.useRef)(typeof document !== "undefined" ? document : null);
  const documentRefCallback = (node) => {
    var _a2;
    return documentRef.current = (_a2 = node === null || node === void 0 ? void 0 : node.ownerDocument) !== null && _a2 !== void 0 ? _a2 : document;
  };
  const [widthChange, containerMeasureRef] = useContainerQuery((rect) => rect.contentBoxWidth);
  const containerRef = useMergeRefs(containerObjectRef, containerMeasureRef, documentRefCallback);
  const tabRefs = (0, import_react527.useRef)(/* @__PURE__ */ new Map());
  const [horizontalOverflow, setHorizontalOverflow] = (0, import_react527.useState)(false);
  const [inlineStartOverflow, setInlineStartOverflow] = (0, import_react527.useState)(false);
  const [inlineEndOverflow, setInlineEndOverflow] = (0, import_react527.useState)(false);
  const [focusedTabId, setFocusedTabId] = (0, import_react527.useState)(activeTabId);
  const [previousActiveTabId, setPreviousActiveTabId] = (0, import_react527.useState)(activeTabId);
  const hasActionOrDismissible = tabs.some((tab) => tab.action || tab.dismissible);
  const hadActionOrDismissible = usePrevious(hasActionOrDismissible);
  const tabActionAttributes = hasActionOrDismissible ? {
    role: "application",
    "aria-roledescription": i18n("i18nStrings.tabsWithActionsAriaRoleDescription", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tabsWithActionsAriaRoleDescription)
  } : {
    role: "tablist"
  };
  (0, import_react527.useEffect)(() => {
    var _a2;
    if (hadActionOrDismissible && !hasActionOrDismissible) {
      (_a2 = getNextFocusTarget()) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }, [hasActionOrDismissible, hadActionOrDismissible]);
  (0, import_react527.useEffect)(() => {
    if (headerBarRef.current) {
      setHorizontalOverflow(hasHorizontalOverflow(headerBarRef.current, inlineStartOverflowButton));
      setInlineStartOverflow(hasInlineStartOverflow(headerBarRef.current));
      setInlineEndOverflow(hasInlineEndOverflow(headerBarRef.current));
    }
  }, [widthChange, tabs]);
  const scrollIntoViewIfPossible = (smooth) => {
    if (!activeTabId) {
      return;
    }
    const activeTabRef = tabRefs.current.get(activeTabId);
    if (activeTabRef && headerBarRef.current) {
      scrollIntoView(activeTabRef, headerBarRef.current, smooth);
    }
  };
  (0, import_react527.useEffect)(() => {
    requestAnimationFrame(() => {
      scrollIntoViewIfPossible(false);
    });
  }, [horizontalOverflow, widthChange, tabs.length]);
  (0, import_react527.useEffect)(() => {
    scrollIntoViewIfPossible(true);
  }, [activeTabId]);
  (0, import_react527.useEffect)(() => {
    var _a2, _b;
    if (documentRef.current && ((_a2 = headerBarRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(documentRef.current.activeElement))) {
      if (documentRef.current.activeElement !== activeTabHeaderRef.current) {
        (_b = activeTabHeaderRef.current) === null || _b === void 0 ? void 0 : _b.focus({ preventScroll: true });
      }
    }
  }, [activeTabId]);
  const onScroll = () => {
    if (headerBarRef.current) {
      setInlineStartOverflow(hasInlineStartOverflow(headerBarRef.current));
      setInlineEndOverflow(hasInlineEndOverflow(headerBarRef.current));
    }
  };
  const classes = clsx_m_default({
    [styles_css_default182["tabs-header"]]: true,
    [styles_css_default182["tabs-header-with-divider"]]: variant === "default" || isVisualRefresh
  });
  const leftButtonClasses = clsx_m_default({
    [styles_css_default182["pagination-button"]]: true,
    [styles_css_default182["pagination-button-left"]]: true,
    [styles_css_default182["pagination-button-left-scrollable"]]: inlineStartOverflow
  });
  const rightButtonClasses = clsx_m_default({
    [styles_css_default182["pagination-button"]]: true,
    [styles_css_default182["pagination-button-right"]]: true,
    [styles_css_default182["pagination-button-right-scrollable"]]: inlineEndOverflow
  });
  const navigationAPI = (0, import_react527.useRef)(null);
  function getNextFocusTarget() {
    var _a2, _b;
    if (!containerObjectRef.current) {
      return null;
    }
    const tabElements = Array.from(containerObjectRef.current.querySelectorAll(tabSelector));
    return (_b = (_a2 = tabElements.find((tab) => tab.matches(focusedTabSelector))) !== null && _a2 !== void 0 ? _a2 : tabElements.find((tab) => !tab.disabled)) !== null && _b !== void 0 ? _b : null;
  }
  function onUnregisterActive(focusableElement) {
    var _a2;
    const isFocusableActionOrDismissible = !focusableElement.classList.contains(styles_css_default182["tabs-tab-link"]);
    if (!isFocusableActionOrDismissible) {
      const nextFocusTarget = (_a2 = navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.getFocusTarget();
      const tabLinkButton = nextFocusTarget === null || nextFocusTarget === void 0 ? void 0 : nextFocusTarget.querySelector(`.${styles_css_default182["tabs-tab-link"]}`);
      tabLinkButton === null || tabLinkButton === void 0 ? void 0 : tabLinkButton.focus();
    }
  }
  (0, import_react527.useEffect)(() => {
    var _a2;
    (_a2 = navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.updateFocusTarget();
  });
  function onFocus() {
    var _a2;
    (_a2 = navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.updateFocusTarget();
  }
  function onBlur() {
    var _a2;
    (_a2 = navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.updateFocusTarget();
  }
  function onKeyDown(event) {
    var _a2, _b, _c;
    const focusTarget = (_a2 = documentRef.current) === null || _a2 === void 0 ? void 0 : _a2.activeElement;
    const specialKeys = [
      KeyCode2.right,
      KeyCode2.left,
      KeyCode2.end,
      KeyCode2.home,
      KeyCode2.pageUp,
      KeyCode2.pageDown,
      KeyCode2.space
    ];
    const isActionOpen = (_b = documentRef.current) === null || _b === void 0 ? void 0 : _b.querySelector(`.${styles_css_default182["tabs-tab-action"]} [aria-expanded="true"]`);
    const isDismissOrActionFocused = !(focusTarget === null || focusTarget === void 0 ? void 0 : focusTarget.classList.contains(styles_css_default182["tabs-tab-link"]));
    if (isActionOpen) {
      return;
    }
    if (event.key === "Tab" && !event.shiftKey && isDismissOrActionFocused) {
      event.preventDefault();
      const panelId = `${idNamespace}-${activeTabId}-panel`;
      const panel = (_c = documentRef.current) === null || _c === void 0 ? void 0 : _c.getElementById(panelId);
      panel === null || panel === void 0 ? void 0 : panel.focus();
    }
    if (hasModifierKeys(event) || specialKeys.indexOf(event.keyCode) === -1) {
      return;
    }
    if (!containerObjectRef.current || !focusTarget) {
      return;
    }
    event.preventDefault();
    const focusables = getFocusablesFrom(containerObjectRef.current);
    const activeIndex = isHTMLElement2(focusTarget) ? focusables.indexOf(focusTarget) : -1;
    handleKey2(event, {
      onHome: () => focusElement(focusables[0]),
      onEnd: () => focusElement(focusables[focusables.length - 1]),
      onInlineStart: () => focusElement(focusables[circleIndex2(activeIndex - 1, [0, focusables.length - 1])]),
      onInlineEnd: () => focusElement(focusables[circleIndex2(activeIndex + 1, [0, focusables.length - 1])]),
      onPageDown: () => inlineEndOverflow && onPaginationClick(headerBarRef, "forward"),
      onPageUp: () => inlineStartOverflow && onPaginationClick(headerBarRef, "backward"),
      onActivate: () => {
        var _a3;
        return focusedTabId && focusedTabId !== activeTabId && onChange({ activeTabId: focusedTabId, activeTabHref: (_a3 = tabs.find((tab) => tab.id === focusedTabId)) === null || _a3 === void 0 ? void 0 : _a3.href });
      }
    });
  }
  function focusElement(element) {
    var _a2, _b;
    element.focus();
    const tabsById = tabs.reduce((map3, tab) => map3.set(tab.id, tab), /* @__PURE__ */ new Map());
    for (const [tabId, focusTargetTabTriggerElement] of tabRefs.current.entries()) {
      const focusTargetTabLabelElement = focusTargetTabTriggerElement === null || focusTargetTabTriggerElement === void 0 ? void 0 : focusTargetTabTriggerElement.querySelector(`.${styles_css_default182["tabs-tab-link"]}`);
      if (tabId !== activeTabId && focusTargetTabLabelElement === element) {
        setPreviousActiveTabId(tabId);
        setFocusedTabId(tabId);
        if (!((_a2 = tabsById.get(tabId)) === null || _a2 === void 0 ? void 0 : _a2.disabled) && keyboardActivationMode === "automatic") {
          onChange({ activeTabId: tabId, activeTabHref: (_b = tabsById.get(tabId)) === null || _b === void 0 ? void 0 : _b.href });
        }
        break;
      }
    }
  }
  function getFocusablesFrom(target) {
    function isElementRegistered(element) {
      var _a2, _b;
      return (_b = (_a2 = navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.isRegistered(element)) !== null && _b !== void 0 ? _b : false;
    }
    function isElementFocusable(element) {
      if (element instanceof HTMLButtonElement) {
        return !element.disabled || element.closest(focusableTabSelector);
      }
      return element.matches(focusableTabSelector);
    }
    return getAllFocusables2(target).filter((el) => isElementRegistered(el) && isElementFocusable(el));
  }
  const TabList = hasActionOrDismissible ? "div" : "ul";
  return import_react527.default.createElement(
    "div",
    { className: classes },
    import_react527.default.createElement(
      "div",
      { className: styles_css_default182["tab-header-scroll-container"], ref: containerRef },
      horizontalOverflow && import_react527.default.createElement(
        "span",
        { ref: inlineStartOverflowButton, className: leftButtonClasses },
        import_react527.default.createElement(InternalButton, { formAction: "none", variant: "icon", iconName: "angle-left", disabled: !inlineStartOverflow, __focusable: true, onClick: () => onPaginationClick(headerBarRef, "backward"), ariaLabel: i18n("i18nStrings.scrollLeftAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.scrollLeftAriaLabel) })
      ),
      import_react527.default.createElement(
        SingleTabStopNavigationProvider,
        { ref: navigationAPI, navigationActive: true, getNextFocusTarget, onUnregisterActive },
        import_react527.default.createElement(TabList, Object.assign({}, tabActionAttributes, { className: clsx_m_default(styles_css_default182["tabs-header-list"], styles_css_default181["tabs-header-list"]), "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, ref: headerBarRef, onScroll, onKeyDown, onFocus, onBlur }), tabs.map(renderTabHeader))
      ),
      horizontalOverflow && import_react527.default.createElement(
        "span",
        { className: rightButtonClasses },
        import_react527.default.createElement(InternalButton, { formAction: "none", variant: "icon", iconName: "angle-right", disabled: !inlineEndOverflow, __focusable: true, onClick: () => onPaginationClick(headerBarRef, "forward"), ariaLabel: i18n("i18nStrings.scrollRightAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.scrollRightAriaLabel) })
      )
    ),
    actions && import_react527.default.createElement("div", { className: styles_css_default182["actions-container"] }, actions)
  );
  function renderTabHeader(tab, index) {
    const { dismissible, dismissLabel, dismissDisabled, action, onDismiss } = tab;
    const isActive = activeTabId === tab.id && !tab.disabled;
    const clickTab = (event) => {
      var _a2;
      if (tab.disabled) {
        event.preventDefault();
        return;
      }
      const specialKey = !isPlainLeftClick(event);
      if (specialKey && tab.href) {
        return;
      }
      event.preventDefault();
      if (!tab.href) {
        const clickedTabRef = tabRefs.current.get(tab.id);
        if (clickedTabRef) {
          if (clickedTabRef && clickedTabRef !== ((_a2 = documentRef.current) === null || _a2 === void 0 ? void 0 : _a2.activeElement)) {
            clickedTabRef.focus({ preventScroll: true });
          }
        }
      }
      if (tab.id === activeTabId) {
        return;
      }
      setFocusedTabId(tab.id);
      setPreviousActiveTabId(tab.id);
      onChange({ activeTabId: tab.id, activeTabHref: tab.href });
    };
    const classes2 = clsx_m_default({
      [styles_css_default182["tabs-tab-link"]]: true,
      [styles_css_default182.refresh]: isVisualRefresh,
      [styles_css_default182["tabs-tab-active"]]: activeTabId === tab.id && !tab.disabled,
      [styles_css_default182["tabs-tab-focused"]]: focusedTabId === tab.id,
      [styles_css_default182["tabs-tab-active"]]: isActive,
      [styles_css_default181["active-tab-header"]]: isActive,
      [styles_css_default182["tabs-tab-disabled"]]: tab.disabled,
      [styles_css_default182["tabs-tab-focusable"]]: !tab.disabled || tab.disabled && !!tab.disabledReason
    });
    const tabHeaderContainerClasses = clsx_m_default({
      [styles_css_default182["tabs-tab-header-container"]]: true,
      [styles_css_default182.refresh]: isVisualRefresh,
      [styles_css_default182["tabs-tab-active"]]: isActive,
      [styles_css_default182["tabs-tab-disabled"]]: tab.disabled,
      [styles_css_default182["tabs-tab-focusable"]]: !tab.disabled || tab.disabled && !!tab.disabledReason
    });
    const tabActionClasses = clsx_m_default({
      [styles_css_default182["tabs-tab-action"]]: true,
      [styles_css_default182["tabs-tab-active"]]: isActive
    });
    const commonProps = {
      className: classes2,
      "aria-controls": `${idNamespace}-${tab.id}-panel`,
      "data-testid": tab.id,
      id: getTabElementId({ namespace: idNamespace, tabId: tab.id }),
      onClick: clickTab
    };
    const tabHeaderContainerAriaProps = hasActionOrDismissible ? {
      role: "group",
      "aria-labelledby": commonProps.id
    } : {};
    if (!hasActionOrDismissible) {
      commonProps["aria-selected"] = activeTabId === tab.id;
      commonProps.role = "tab";
    } else {
      commonProps["aria-expanded"] = activeTabId === tab.id;
    }
    if (tab.disabled) {
      commonProps["aria-disabled"] = "true";
    }
    const setElement = (tabElement) => {
      if (tab.id === activeTabId) {
        activeTabHeaderRef.current = tabElement;
      }
      tabRefs.current.set(tab.id, tabElement);
    };
    const handleDismiss = (event) => {
      if (!containerObjectRef.current || !onDismiss) {
        return;
      }
      const tabElements = getFocusablesFrom(containerObjectRef.current).filter((el) => el.classList.contains(styles_css_default182["tabs-tab-link"]));
      const activeTabIndex = tabElements.findIndex((el) => el.dataset.testid === tab.id);
      tabElements.splice(activeTabIndex, 1);
      let nextActive;
      if (previousActiveTabId && previousActiveTabId !== tab.id) {
        nextActive = tabElements.find((el) => el.dataset.testid === previousActiveTabId);
      } else {
        nextActive = tabElements[Math.min(tabElements.length - 1, activeTabIndex)];
      }
      if (nextActive && nextActive.dataset.testid) {
        onChange({ activeTabId: nextActive.dataset.testid });
        setPreviousActiveTabId(nextActive.dataset.testid);
        nextActive.focus();
      }
      onDismiss(event);
    };
    const TabItem = hasActionOrDismissible ? "div" : "li";
    const analyticsDismissMetadata = {
      action: "dismiss",
      detail: {
        id: tab.id,
        label: `.${styles_css_default181["tab-dismiss-button"]}`,
        position: `${index + 1}`
      }
    };
    const analyticsComponentMetadataInnerContext = {
      innerContext: {
        tabId: tab.id,
        tabLabel: `.${styles_css_default181["tab-label"]}`,
        tabPosition: `${index + 1}`
      }
    };
    return import_react527.default.createElement(
      TabItem,
      { ref: (element) => tabRefs.current.set(tab.id, element), className: styles_css_default182["tabs-tab"], role: "presentation", key: tab.id },
      import_react527.default.createElement(
        "div",
        Object.assign({ className: tabHeaderContainerClasses }, tabHeaderContainerAriaProps, getAnalyticsMetadataAttribute({ component: analyticsComponentMetadataInnerContext })),
        import_react527.default.createElement(TabTrigger, { ref: setElement, tab, elementProps: commonProps, activeTabId, index }),
        action && import_react527.default.createElement("span", { className: tabActionClasses }, action),
        dismissible && import_react527.default.createElement("span", Object.assign({ className: styles_css_default182["tabs-tab-dismiss"] }, getAnalyticsMetadataAttribute(analyticsDismissMetadata)), dismissButton2({ dismissLabel, dismissDisabled, onDismiss: handleDismiss, tabId: tab.id }))
      )
    );
  }
}
var TabTrigger = (0, import_react527.forwardRef)(({ tab, elementProps, activeTabId, index }, ref) => {
  const refObject = (0, import_react527.useRef)(null);
  const tabLabelRefObject = (0, import_react527.useRef)(null);
  const mergedRef = useMergeRefs(refObject, ref);
  const { tabIndex } = useSingleTabStopNavigation(refObject);
  const isDisabledWithReason = tab.disabled && !!tab.disabledReason;
  const [showTooltip, setShowTooltip] = (0, import_react527.useState)(false);
  const { targetProps, descriptionEl } = useHiddenDescription(tab.disabledReason);
  const children2 = import_react527.default.createElement(
    import_react527.default.Fragment,
    null,
    import_react527.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default182["tabs-tab-label"], styles_css_default181["tab-label"]), ref: tabLabelRefObject },
      import_react527.default.createElement("span", null, tab.label)
    ),
    isDisabledWithReason && import_react527.default.createElement(
      import_react527.default.Fragment,
      null,
      descriptionEl,
      showTooltip && import_react527.default.createElement(Tooltip, { className: styles_css_default182["disabled-reason-tooltip"], trackRef: tabLabelRefObject, value: tab.disabledReason, onDismiss: () => setShowTooltip(false) })
    )
  );
  const handlers = {
    onFocus: () => setShowTooltip(true),
    onBlur: () => setShowTooltip(false),
    onMouseEnter: () => setShowTooltip(true),
    onMouseLeave: () => setShowTooltip(false)
  };
  const analyticsSelectMetadata = {
    action: "select",
    detail: {
      id: tab.id,
      label: `.${styles_css_default181["tab-label"]}`,
      position: `${index + 1}`,
      originTabId: activeTabId || ""
    }
  };
  const commonProps = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, elementProps), isDisabledWithReason ? targetProps : {}), isDisabledWithReason ? handlers : {}), { ref: mergedRef, tabIndex }), tab.disabled || tab.id === activeTabId ? {} : getAnalyticsMetadataAttribute(analyticsSelectMetadata));
  return tab.href ? import_react527.default.createElement("a", Object.assign({}, commonProps, { href: tab.href }), children2) : import_react527.default.createElement("button", Object.assign({}, commonProps, { type: "button", disabled: tab.disabled && !isDisabledWithReason }), children2);
});
function getTabElementId({ namespace: namespace2, tabId }) {
  return namespace2 + "-" + tabId;
}

// node_modules/@cloudscape-design/components/tabs/index.js
function firstEnabledTab(tabs) {
  const enabledTabs = tabs.filter((tab) => !tab.disabled);
  if (enabledTabs.length > 0) {
    return enabledTabs[0];
  }
  return null;
}
function shouldRenderTabContent(tab, viewedTabs) {
  switch (tab.contentRenderStrategy) {
    case "active":
      return false;
    // rendering active tab is handled directly in component
    case "eager":
      return true;
    case "lazy":
      return viewedTabs.has(tab.id);
  }
  return false;
}
function Tabs(_a2) {
  var _b, _c;
  var { tabs, variant = "default", onChange, activeTabId: controlledTabId, ariaLabel, ariaLabelledby, disableContentPaddings = false, i18nStrings, fitHeight, keyboardActivationMode = "automatic", actions } = _a2, rest = __rest(_a2, ["tabs", "variant", "onChange", "activeTabId", "ariaLabel", "ariaLabelledby", "disableContentPaddings", "i18nStrings", "fitHeight", "keyboardActivationMode", "actions"]);
  for (const tab of tabs) {
    checkSafeUrl("Tabs", tab.href);
  }
  const { __internalRootRef } = useBaseComponent("Tabs", {
    props: { disableContentPaddings, variant, fitHeight, keyboardActivationMode },
    metadata: {
      hasActions: tabs.some((tab) => !!tab.action),
      hasHeaderActions: !!actions,
      hasDisabledReasons: tabs.some((tab) => !!tab.disabledReason),
      hasEagerLoadedTabs: tabs.some((tab) => tab.contentRenderStrategy === "eager"),
      hasLazyLoadedTabs: tabs.some((tab) => tab.contentRenderStrategy === "lazy")
    }
  });
  const idNamespace = useUniqueId("awsui-tabs-");
  const [activeTabId, setActiveTabId] = useControllable2(controlledTabId, onChange, (_c = (_b = firstEnabledTab(tabs)) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : "", {
    componentName: "Tabs",
    controlledProp: "activeTabId",
    changeHandler: "onChange"
  });
  const viewedTabs = (0, import_react528.useRef)(/* @__PURE__ */ new Set());
  if (activeTabId !== void 0) {
    viewedTabs.current.add(activeTabId);
  }
  const baseProps = getBaseProps(rest);
  const analyticsComponentMetadata = {
    name: "awsui.Tabs",
    label: `.${styles_css_default181["tabs-header-list"]}`
  };
  if (activeTabId) {
    analyticsComponentMetadata.properties = {
      activeTabId,
      activeTabLabel: `.${styles_css_default181["active-tab-header"]} .${styles_css_default181["tab-label"]}`,
      activeTabPosition: `${tabs.findIndex((tab) => tab.id === activeTabId) + 1}`,
      tabsCount: `${tabs.length}`
    };
  }
  const content = () => {
    const selectedTab = tabs.filter((tab) => tab.id === activeTabId)[0];
    const renderContent = (tab) => {
      const isTabSelected = tab === selectedTab;
      const classes = clsx_m_default({
        [styles_css_default182["tabs-content"]]: true,
        [styles_css_default182["tabs-content-active"]]: isTabSelected
      });
      const contentAttributes = {
        className: classes,
        role: "tabpanel",
        id: `${idNamespace}-${tab.id}-panel`,
        key: `${idNamespace}-${tab.id}-panel`,
        tabIndex: 0,
        "aria-labelledby": getTabElementId({ namespace: idNamespace, tabId: tab.id })
      };
      const isContentShown = !tab.disabled && (isTabSelected || shouldRenderTabContent(tab, viewedTabs.current));
      return import_react528.default.createElement("div", Object.assign({}, contentAttributes), isContentShown && tab.content);
    };
    return import_react528.default.createElement("div", { className: clsx_m_default(variant === "container" || variant === "stacked" ? styles_css_default182["tabs-container-content-wrapper"] : styles_css_default182["tabs-content-wrapper"], {
      [styles_css_default182["with-paddings"]]: !disableContentPaddings
    }) }, tabs.map(renderContent));
  };
  const header = import_react528.default.createElement(TabHeaderBar, { activeTabId, variant, idNamespace, ariaLabel, ariaLabelledby, tabs, actions, onChange: (changeDetail) => {
    setActiveTabId(changeDetail.activeTabId);
    fireNonCancelableEvent(onChange, changeDetail);
  }, i18nStrings, keyboardActivationMode });
  if (variant === "container" || variant === "stacked") {
    return import_react528.default.createElement(InternalContainer, Object.assign({ header, disableHeaderPaddings: true }, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default182.root), __internalRootRef, disableContentPaddings: true, variant: variant === "stacked" ? "stacked" : "default", fitHeight }, getAnalyticsMetadataAttribute({ component: analyticsComponentMetadata })), content());
  }
  return import_react528.default.createElement(
    "div",
    Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default182.root, styles_css_default182.tabs, { [styles_css_default182["fit-height"]]: fitHeight }), ref: __internalRootRef }, getAnalyticsMetadataAttribute({ component: analyticsComponentMetadata })),
    header,
    content()
  );
}
applyDisplayName(Tabs, "Tabs");

// node_modules/@cloudscape-design/components/tag-editor/index.js
var import_react531 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tag-editor/internal.js
var import_react529 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tag-editor/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/tag-editor/styles.scoped.css";
var styles_css_default184 = {
  "root": "awsui_root_brdst_df9ia_145",
  "loading": "awsui_loading_brdst_df9ia_149",
  "undo-button": "awsui_undo-button_brdst_df9ia_153"
};

// node_modules/@cloudscape-design/components/tag-editor/internal.js
var TagControl = import_react529.default.forwardRef(({ row, value, readOnly, defaultOptions: defaultOptions3, placeholder, errorText, loadingText, suggestionText, tooManySuggestionText, limit, filteringKey, enteredTextLabel, clearAriaLabel, onChange, onBlur, onRequest, initialOptionsRef }, ref) => {
  const [options, setOptions] = (0, import_react529.useState)(defaultOptions3);
  const [statusType, setStatusType] = (0, import_react529.useState)();
  const requestCancelFnRef = (0, import_react529.useRef)({
    cancel: () => {
    },
    isCancelled: () => false
  });
  const latestFilteringQuery = (0, import_react529.useRef)({ key: void 0, value: void 0 });
  const isSameQuery = (key2, value2) => latestFilteringQuery.current.key === key2 && latestFilteringQuery.current.value === value2;
  const onLoadItems = (filteringText) => {
    if (!onRequest || isSameQuery(filteringKey, filteringText) || requestCancelFnRef.current.isCancelled()) {
      return;
    }
    requestCancelFnRef.current.cancel();
    if (latestFilteringQuery.current.key !== filteringKey) {
      setOptions([]);
    } else if (filteringText === "" && (initialOptionsRef === null || initialOptionsRef === void 0 ? void 0 : initialOptionsRef.current) && initialOptionsRef.current.length > 0) {
      setOptions(initialOptionsRef.current);
    }
    setStatusType("loading");
    latestFilteringQuery.current = { key: filteringKey, value: filteringText };
    const { promise, cancel, isCancelled } = makeCancellable(onRequest(filteringText));
    promise.then((newValues) => {
      const newOptions = newValues.map((value2) => ({ value: value2 }));
      setStatusType(void 0);
      setOptions(newOptions);
      if (initialOptionsRef) {
        initialOptionsRef.current = newOptions;
      }
    }).catch((err) => {
      if (!(err instanceof PromiseCancelledSignal)) {
        setStatusType("error");
      }
    });
    requestCancelFnRef.current = { cancel, isCancelled };
  };
  return import_react529.default.createElement(internal_default15, { ref, value, readOnly, statusType, options: options.length < limit ? options : [], empty: options.length < limit ? suggestionText : tooManySuggestionText, placeholder, errorText, loadingText, enteredTextLabel, clearAriaLabel, onChange: ({ detail }) => onChange(detail.value, row), onBlur: () => onBlur === null || onBlur === void 0 ? void 0 : onBlur(row), onFocus: () => {
    onLoadItems("");
  }, onLoadItems: ({ detail }) => {
    onLoadItems(detail.filteringText);
  } });
});
var UndoButton = import_react529.default.forwardRef(({ children: children2, onClick }, ref) => {
  return import_react529.default.createElement("a", { ref, role: "button", tabIndex: 0, className: styles_css_default184["undo-button"], onClick, onKeyDown: (event) => {
    if (event.keyCode === KeyCode2.space || event.keyCode === KeyCode2.enter) {
      event.preventDefault();
    }
    if (event.keyCode === KeyCode2.enter) {
      onClick();
    }
  }, onKeyUp: (event) => {
    if (event.keyCode === KeyCode2.space) {
      onClick();
    }
  } }, children2);
});

// node_modules/@cloudscape-design/components/tag-editor/utils.js
var import_react530 = __toESM(require_react());
function findIndex3(array, condition) {
  for (let i2 = 0; i2 < array.length; i2++) {
    if (condition(array[i2])) {
      return i2;
    }
  }
  return -1;
}
function makeMemoizedArray(prev, next, isEqual2) {
  for (let i2 = 0; i2 < Math.max(prev.length, next.length); i2++) {
    if (i2 === next.length) {
      return prev.slice(0, i2);
    }
    if (i2 === prev.length) {
      return [...prev.slice(0, i2), ...next.slice(i2)];
    }
    if (!isEqual2(prev[i2], next[i2])) {
      return [...prev.slice(0, i2), next[i2], ...makeMemoizedArray(prev.slice(i2 + 1), next.slice(i2 + 1), isEqual2)];
    }
  }
  return prev;
}
function useMemoizedArray(array, isEqual2) {
  const ref = (0, import_react530.useRef)(array);
  const updated = makeMemoizedArray(ref.current, array, isEqual2);
  (0, import_react530.useEffect)(() => {
    ref.current = updated;
  }, [updated]);
  return updated;
}

// node_modules/@cloudscape-design/components/tag-editor/validation.js
var DEFAULT_CHAR_REGEX = /^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$/u;
var SYSTEM_TAG_PREFIX = "aws:";
var MAX_KEY_LENGTH = 128;
var MAX_VALUE_LENGTH = 256;
function validate2(tags, keyDirtyState, i18n, i18nStrings, charRegex = DEFAULT_CHAR_REGEX) {
  const tagKeysCache = {};
  tags.forEach((tag) => {
    var _a2;
    if (tag.key && !tag.markedForRemoval) {
      tagKeysCache[tag.key] = ((_a2 = tagKeysCache[tag.key]) !== null && _a2 !== void 0 ? _a2 : 0) + 1;
    }
  });
  return tags.map((tag, i2) => {
    let keyError, valueError;
    if (keyDirtyState[i2] && emptyKeyCheck(tag.key)) {
      keyError = i18n("i18nStrings.emptyKeyError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.emptyKeyError);
    } else if (awsPrefixCheck(tag.key)) {
      keyError = i18n("i18nStrings.awsPrefixError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.awsPrefixError);
    } else if (invalidCharCheck(tag.key, charRegex)) {
      keyError = i18n("i18nStrings.invalidKeyError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.invalidKeyError);
    } else if (maxKeyLengthCheck(tag.key)) {
      keyError = i18n("i18nStrings.maxKeyCharLengthError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.maxKeyCharLengthError);
    } else if (duplicateKeyCheck(tag.key, tagKeysCache)) {
      keyError = i18n("i18nStrings.duplicateKeyError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.duplicateKeyError);
    }
    if (!tag.markedForRemoval) {
      if (invalidCharCheck(tag.value, charRegex)) {
        valueError = i18n("i18nStrings.invalidValueError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.invalidValueError);
      } else if (maxValueLengthCheck(tag.value)) {
        valueError = i18n("i18nStrings.maxValueCharLengthError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.maxValueCharLengthError);
      }
    }
    if (keyError || valueError) {
      return { key: keyError, value: valueError };
    }
  });
}
var awsPrefixCheck = (value) => {
  return value.toLowerCase().indexOf(SYSTEM_TAG_PREFIX) === 0;
};
var emptyKeyCheck = (value) => {
  return !value || value.trim().length === 0;
};
var maxKeyLengthCheck = (value) => {
  return value && value.length > MAX_KEY_LENGTH;
};
var duplicateKeyCheck = (value, keyCache) => {
  var _a2;
  return ((_a2 = keyCache === null || keyCache === void 0 ? void 0 : keyCache[value]) !== null && _a2 !== void 0 ? _a2 : 0) > 1;
};
var maxValueLengthCheck = (value) => {
  return value && value.length > MAX_VALUE_LENGTH;
};
var invalidCharCheck = (value, validCharRegex = DEFAULT_CHAR_REGEX) => {
  if (!value || !validCharRegex) {
    return false;
  }
  return !validCharRegex.test(value);
};

// node_modules/@cloudscape-design/components/tag-editor/index.js
var isItemRemovable = ({ tag }) => !tag.markedForRemoval;
var TagEditor = import_react531.default.forwardRef((_a2, ref) => {
  var _b, _c, _d, _e, _f, _g;
  var { tags = [], i18nStrings, loading = false, tagLimit = 50, allowedCharacterPattern, keysRequest, valuesRequest, onChange } = _a2, restProps = __rest(_a2, ["tags", "i18nStrings", "loading", "tagLimit", "allowedCharacterPattern", "keysRequest", "valuesRequest", "onChange"]);
  const baseComponentProps = useBaseComponent("TagEditor", {
    props: { tagLimit, allowedCharacterPattern }
  });
  const i18n = useInternalI18n("tag-editor");
  const remainingTags = tagLimit - tags.filter((tag) => !tag.markedForRemoval).length;
  const attributeEditorRef = (0, import_react531.useRef)(null);
  const keyInputRefs = (0, import_react531.useRef)([]);
  const valueInputRefs = (0, import_react531.useRef)([]);
  const undoButtonRefs = (0, import_react531.useRef)([]);
  const initialKeyOptionsRef = (0, import_react531.useRef)([]);
  const keyDirtyStateRef = (0, import_react531.useRef)([]);
  const focusEventRef = (0, import_react531.useRef)();
  (0, import_react531.useLayoutEffect)(() => {
    var _a3;
    (_a3 = focusEventRef.current) === null || _a3 === void 0 ? void 0 : _a3.apply(void 0);
    focusEventRef.current = void 0;
  });
  const errors = validate2(tags, keyDirtyStateRef.current, i18n, i18nStrings, allowedCharacterPattern ? new RegExp(allowedCharacterPattern) : void 0);
  const internalTags = useMemoizedArray(tags.map((tag, i2) => ({ tag, error: errors[i2] })), (prev, next) => {
    var _a3, _b2, _c2, _d2;
    return prev.tag === next.tag && ((_a3 = prev.error) === null || _a3 === void 0 ? void 0 : _a3.key) === ((_b2 = next.error) === null || _b2 === void 0 ? void 0 : _b2.key) && ((_c2 = prev.error) === null || _c2 === void 0 ? void 0 : _c2.value) === ((_d2 = next.error) === null || _d2 === void 0 ? void 0 : _d2.value);
  });
  (0, import_react531.useImperativeHandle)(ref, () => ({
    focus() {
      var _a3, _b2;
      const errorIndex = findIndex3(internalTags, ({ error }) => (error === null || error === void 0 ? void 0 : error.key) || (error === null || error === void 0 ? void 0 : error.value));
      if (errorIndex !== -1) {
        const refArray = ((_a3 = internalTags[errorIndex].error) === null || _a3 === void 0 ? void 0 : _a3.key) ? keyInputRefs : valueInputRefs;
        (_b2 = refArray.current[errorIndex]) === null || _b2 === void 0 ? void 0 : _b2.focus();
      }
    }
  }), [internalTags]);
  const validateAndFire = (0, import_react531.useCallback)((newTags) => {
    fireNonCancelableEvent(onChange, {
      tags: newTags,
      valid: !validate2(newTags, keyDirtyStateRef.current, i18n, i18nStrings, allowedCharacterPattern ? new RegExp(allowedCharacterPattern) : void 0).some((error) => error)
    });
  }, [onChange, i18n, i18nStrings, allowedCharacterPattern]);
  const onAddButtonClick = () => {
    validateAndFire([...tags, { key: "", value: "", existing: false }]);
    focusEventRef.current = () => {
      var _a3;
      (_a3 = keyInputRefs.current[tags.length]) === null || _a3 === void 0 ? void 0 : _a3.focus();
    };
  };
  const onRemoveButtonClick = useStableCallback(({ detail }) => {
    var _a3, _b2, _c2, _d2, _e2;
    const existing = tags[detail.itemIndex].existing;
    validateAndFire([
      ...tags.slice(0, detail.itemIndex),
      ...existing ? [Object.assign(Object.assign({}, tags[detail.itemIndex]), { markedForRemoval: true })] : [],
      ...tags.slice(detail.itemIndex + 1)
    ]);
    if (existing) {
      focusEventRef.current = () => {
        var _a4;
        (_a4 = undoButtonRefs.current[detail.itemIndex]) === null || _a4 === void 0 ? void 0 : _a4.focus();
      };
    } else {
      keyDirtyStateRef.current.splice(detail.itemIndex, 1);
      const nextKey = keyInputRefs.current[detail.itemIndex + 1];
      if (nextKey) {
        (_a3 = keyInputRefs.current[detail.itemIndex]) === null || _a3 === void 0 ? void 0 : _a3.focus();
      } else if (detail.itemIndex > 0) {
        const previousIsExisting = tags[detail.itemIndex - 1].existing;
        if (previousIsExisting) {
          if (tags[detail.itemIndex - 1].markedForRemoval) {
            (_b2 = undoButtonRefs.current[detail.itemIndex - 1]) === null || _b2 === void 0 ? void 0 : _b2.focus();
          } else {
            (_c2 = valueInputRefs.current[detail.itemIndex - 1]) === null || _c2 === void 0 ? void 0 : _c2.focus();
          }
        } else {
          (_d2 = keyInputRefs.current[detail.itemIndex - 1]) === null || _d2 === void 0 ? void 0 : _d2.focus();
        }
      } else {
        (_e2 = attributeEditorRef.current) === null || _e2 === void 0 ? void 0 : _e2.focusAddButton();
      }
    }
  });
  const onKeyChange = useStableCallback((value, row) => {
    keyDirtyStateRef.current[row] = true;
    validateAndFire([...tags.slice(0, row), Object.assign(Object.assign({}, tags[row]), { key: value }), ...tags.slice(row + 1)]);
  });
  const onKeyBlur = useStableCallback((row) => {
    keyDirtyStateRef.current[row] = true;
    validateAndFire([...tags]);
  });
  const onValueChange = useStableCallback((value, row) => {
    validateAndFire([...tags.slice(0, row), Object.assign(Object.assign({}, tags[row]), { value }), ...tags.slice(row + 1)]);
  });
  const onUndoRemoval = useStableCallback((row) => {
    validateAndFire([...tags.slice(0, row), Object.assign(Object.assign({}, tags[row]), { markedForRemoval: false }), ...tags.slice(row + 1)]);
    focusEventRef.current = () => {
      var _a3;
      (_a3 = attributeEditorRef.current) === null || _a3 === void 0 ? void 0 : _a3.focusRemoveButton(row);
    };
  });
  const definition = (0, import_react531.useMemo)(() => [
    {
      label: i18n("i18nStrings.keyHeader", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.keyHeader),
      control: ({ tag }, row) => import_react531.default.createElement(TagControl, { row, value: tag.key, readOnly: tag.existing, limit: 200, defaultOptions: [], placeholder: i18n("i18nStrings.keyPlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.keyPlaceholder), errorText: i18n("i18nStrings.keysSuggestionError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.keysSuggestionError), loadingText: i18n("i18nStrings.keysSuggestionLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.keysSuggestionLoading), suggestionText: i18n("i18nStrings.keySuggestion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.keySuggestion), tooManySuggestionText: i18n("i18nStrings.tooManyKeysSuggestion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tooManyKeysSuggestion), enteredTextLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.enteredKeyLabel, clearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.clearAriaLabel, onRequest: keysRequest, onChange: onKeyChange, onBlur: onKeyBlur, initialOptionsRef: initialKeyOptionsRef, ref: (ref2) => {
        keyInputRefs.current[row] = ref2;
      } }),
      errorText: ({ error }) => error === null || error === void 0 ? void 0 : error.key
    },
    {
      label: import_react531.default.createElement(
        "span",
        null,
        i18n("i18nStrings.valueHeader", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valueHeader),
        " -",
        " ",
        import_react531.default.createElement("i", null, i18n("i18nStrings.optional", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.optional))
      ),
      control: ({ tag }, row) => {
        var _a3;
        return tag.markedForRemoval ? import_react531.default.createElement(
          "div",
          { role: "alert" },
          import_react531.default.createElement(
            InternalBox,
            { margin: { top: "xxs" } },
            i18n("i18nStrings.undoPrompt", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.undoPrompt),
            " ",
            import_react531.default.createElement(UndoButton, { onClick: () => onUndoRemoval(row), ref: (elem) => {
              undoButtonRefs.current[row] = elem;
            } }, i18n("i18nStrings.undoButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.undoButton))
          )
        ) : import_react531.default.createElement(TagControl, { row, value: tag.value, readOnly: false, limit: 200, defaultOptions: (_a3 = tag.valueSuggestionOptions) !== null && _a3 !== void 0 ? _a3 : [], placeholder: i18n("i18nStrings.valuePlaceholder", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valuePlaceholder), errorText: i18n("i18nStrings.valuesSuggestionError", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valuesSuggestionError), loadingText: i18n("i18nStrings.valuesSuggestionLoading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valuesSuggestionLoading), suggestionText: i18n("i18nStrings.valueSuggestion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.valueSuggestion), tooManySuggestionText: i18n("i18nStrings.tooManyValuesSuggestion", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tooManyValuesSuggestion), enteredTextLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.enteredValueLabel, clearAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.clearAriaLabel, filteringKey: tag.key, onRequest: valuesRequest && ((value) => valuesRequest(tag.key, value)), onChange: onValueChange, ref: (ref2) => {
          valueInputRefs.current[row] = ref2;
        } });
      },
      errorText: ({ error }) => error === null || error === void 0 ? void 0 : error.value
    }
  ], [i18n, i18nStrings, keysRequest, onKeyChange, onKeyBlur, valuesRequest, onValueChange, onUndoRemoval]);
  const forwardedI18nStrings = (0, import_react531.useMemo)(() => ({
    errorIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel,
    itemRemovedAriaLive: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.itemRemovedAriaLive,
    removeButtonAriaLabel: i18n("i18nStrings.removeButtonAriaLabel", (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.removeButtonAriaLabel) && (({ tag }) => i18nStrings.removeButtonAriaLabel(tag)), (format3) => ({ tag }) => format3({ tag__key: tag.key }))
  }), [i18nStrings, i18n]);
  if (loading) {
    return import_react531.default.createElement(
      "div",
      { className: styles_css_default184.root, ref: baseComponentProps.__internalRootRef },
      import_react531.default.createElement(
        StatusIndicator,
        { className: styles_css_default184.loading, type: "loading" },
        import_react531.default.createElement(internal_default2, { tagName: "span" }, i18n("i18nStrings.loading", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.loading))
      )
    );
  }
  const baseProps = getBaseProps(restProps);
  return import_react531.default.createElement(internal_default14, Object.assign({}, baseProps, baseComponentProps, { ref: attributeEditorRef, className: clsx_m_default(styles_css_default184.root, baseProps.className), items: internalTags, isItemRemovable, onAddButtonClick, onRemoveButtonClick, addButtonText: (_b = i18n("i18nStrings.addButton", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.addButton)) !== null && _b !== void 0 ? _b : "", removeButtonText: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.removeButton, disableAddButton: remainingTags <= 0, empty: i18n("i18nStrings.emptyTags", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.emptyTags), addButtonVariant: "normal", additionalInfo: remainingTags < 0 ? import_react531.default.createElement(FormFieldError, { errorIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.errorIconAriaLabel }, (_d = i18n("i18nStrings.tagLimitExceeded", (_c = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tagLimitExceeded) === null || _c === void 0 ? void 0 : _c.call(i18nStrings, tagLimit), (format3) => format3({ tagLimit }))) !== null && _d !== void 0 ? _d : "") : remainingTags === 0 ? (_f = i18n("i18nStrings.tagLimitReached", (_e = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tagLimitReached) === null || _e === void 0 ? void 0 : _e.call(i18nStrings, tagLimit), (format3) => format3({ tagLimit }))) !== null && _f !== void 0 ? _f : "" : i18n("i18nStrings.tagLimit", (_g = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.tagLimit) === null || _g === void 0 ? void 0 : _g.call(i18nStrings, remainingTags, tagLimit), (format3) => format3({ tagLimitAvailable: `${remainingTags === tagLimit}`, availableTags: remainingTags, tagLimit })), definition, i18nStrings: forwardedI18nStrings }));
});
applyDisplayName(TagEditor, "TagEditor");
var tag_editor_default = TagEditor;

// node_modules/@cloudscape-design/components/text-content/index.js
var import_react532 = __toESM(require_react());

// node_modules/@cloudscape-design/components/text-content/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/text-content/styles.scoped.css";
var styles_css_default185 = {
  "text-content": "awsui_text-content_6absk_pp27u_146"
};

// node_modules/@cloudscape-design/components/text-content/index.js
function TextContent(_a2) {
  var { children: children2 } = _a2, props2 = __rest(_a2, ["children"]);
  const { __internalRootRef } = useBaseComponent("TextContent");
  const baseProps = getBaseProps(props2);
  const className2 = clsx_m_default(baseProps.className, styles_css_default185["text-content"]);
  return import_react532.default.createElement("div", Object.assign({}, baseProps, { className: className2, ref: __internalRootRef }), children2);
}
applyDisplayName(TextContent, "TextContent");

// node_modules/@cloudscape-design/components/text-filter/index.js
var import_react533 = __toESM(require_react());
var TextFilter = import_react533.default.forwardRef((props2, ref) => {
  const baseComponentProps = useBaseComponent("TextFilter", {
    props: { disabled: props2.disabled, disableBrowserAutocorrect: props2.disableBrowserAutocorrect }
  });
  const componentAnalyticsMetadata2 = {
    name: "awsui.TextFilter",
    label: "input",
    properties: {
      disabled: `${!!props2.disabled}`,
      filteringText: props2.filteringText || ""
    }
  };
  return import_react533.default.createElement(internal_default18, Object.assign({}, props2, baseComponentProps, { ref }, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 })));
});
applyDisplayName(TextFilter, "TextFilter");
var text_filter_default = TextFilter;

// node_modules/@cloudscape-design/components/textarea/index.js
var import_react535 = __toESM(require_react());

// node_modules/@cloudscape-design/components/textarea/internal-do-not-use-core.js
var import_react534 = __toESM(require_react());

// node_modules/@cloudscape-design/components/textarea/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/textarea/styles.scoped.css";
var styles_css_default186 = {
  "root": "awsui_root_qk1j1_19f61_145",
  "textarea": "awsui_textarea_qk1j1_19f61_149",
  "textarea-readonly": "awsui_textarea-readonly_qk1j1_19f61_199",
  "textarea-invalid": "awsui_textarea-invalid_qk1j1_19f61_234",
  "textarea-warning": "awsui_textarea-warning_qk1j1_19f61_243"
};

// node_modules/@cloudscape-design/components/textarea/internal-do-not-use-core.js
var Textarea = import_react534.default.forwardRef((_a2, ref) => {
  var { value, autoComplete = true, disabled, readOnly, disableBrowserAutocorrect, disableBrowserSpellcheck, spellcheck, onKeyDown, onKeyUp, onChange, onBlur, onFocus, ariaRequired, name, rows, placeholder, autoFocus, ariaLabel, nativeTextareaAttributes } = _a2, rest = __rest(_a2, ["value", "autoComplete", "disabled", "readOnly", "disableBrowserAutocorrect", "disableBrowserSpellcheck", "spellcheck", "onKeyDown", "onKeyUp", "onChange", "onBlur", "onFocus", "ariaRequired", "name", "rows", "placeholder", "autoFocus", "ariaLabel", "nativeTextareaAttributes"]);
  const { __internalRootRef } = useBaseComponent("Textarea", {
    props: { autoComplete, autoFocus, disableBrowserAutocorrect, disableBrowserSpellcheck, readOnly, spellcheck }
  });
  const { ariaLabelledby, ariaDescribedby, controlId, invalid, warning } = useFormFieldContext(rest);
  const baseProps = getBaseProps(rest);
  const textareaRef = (0, import_react534.useRef)(null);
  useForwardFocus(ref, textareaRef);
  const attributes = {
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    "aria-describedby": ariaDescribedby,
    "aria-required": ariaRequired ? "true" : void 0,
    "aria-invalid": invalid ? "true" : void 0,
    name,
    placeholder,
    autoFocus,
    className: clsx_m_default(styles_css_default186.textarea, {
      [styles_css_default186["textarea-readonly"]]: readOnly,
      [styles_css_default186["textarea-invalid"]]: invalid,
      [styles_css_default186["textarea-warning"]]: warning && !invalid
    }),
    autoComplete: convertAutoComplete(autoComplete),
    spellCheck: spellcheck,
    disabled,
    readOnly: readOnly ? true : void 0,
    rows: rows || 3,
    onKeyDown: onKeyDown && ((event) => fireKeyboardEvent(onKeyDown, event)),
    onKeyUp: onKeyUp && ((event) => fireKeyboardEvent(onKeyUp, event)),
    // We set a default value on the component in order to force it into the controlled mode.
    value: value || "",
    onChange: onChange && ((event) => fireNonCancelableEvent(onChange, { value: event.target.value })),
    onBlur: onBlur && (() => fireNonCancelableEvent(onBlur)),
    onFocus: onFocus && (() => fireNonCancelableEvent(onFocus))
  };
  if (disableBrowserAutocorrect) {
    attributes.autoCorrect = "off";
    attributes.autoCapitalize = "off";
  }
  if (disableBrowserSpellcheck) {
    attributes.spellCheck = "false";
  }
  const componentAnalyticsMetadata2 = {
    name: "awsui.Textarea",
    label: "textarea",
    properties: {
      value: value || ""
    }
  };
  return import_react534.default.createElement(
    "span",
    Object.assign({}, baseProps, { className: clsx_m_default(styles_css_default186.root, baseProps.className), ref: __internalRootRef }, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 })),
    import_react534.default.createElement(with_native_attributes_default, Object.assign({}, attributes, { tag: "textarea", componentName: "Textarea", nativeAttributes: nativeTextareaAttributes, ref: textareaRef, id: controlId }))
  );
});
applyDisplayName(Textarea, "Textarea");
var internal_do_not_use_core_default12 = Textarea;

// node_modules/@cloudscape-design/components/textarea/index.js
var Textarea2 = import_react535.default.forwardRef((props2, ref) => {
  validateProps("Textarea", props2, ["nativeTextareaAttributes"], {}, "console");
  return import_react535.default.createElement(internal_do_not_use_core_default12, { ref, ...props2 });
});
applyDisplayName(Textarea2, "Textarea");
var textarea_default = Textarea2;

// node_modules/@cloudscape-design/components/tiles/index.js
var import_react536 = __toESM(require_react());
var Tiles = import_react536.default.forwardRef((props2, ref) => {
  const baseComponentProps = useBaseComponent("Tiles", {
    props: { columns: props2.columns, readOnly: props2.readOnly }
  });
  const componentAnalyticsMetadata2 = {
    name: "awsui.Tiles",
    label: { root: "self" },
    properties: {
      value: `${props2.value}`
    }
  };
  return import_react536.default.createElement(internal_default30, Object.assign({ ref }, props2, baseComponentProps, getAnalyticsMetadataAttribute({
    component: componentAnalyticsMetadata2
  })));
});
applyDisplayName(Tiles, "Tiles");
var tiles_default = Tiles;

// node_modules/@cloudscape-design/components/time-input/index.js
var import_react538 = __toESM(require_react());

// node_modules/@cloudscape-design/components/time-input/internal-do-not-use-core.js
var import_react537 = __toESM(require_react());
var TimeInput = import_react537.default.forwardRef((_a2, ref) => {
  var { format: format3 = "hh:mm:ss", use24Hour = true, autoComplete = true } = _a2, props2 = __rest(_a2, ["format", "use24Hour", "autoComplete"]);
  const baseComponentProps = useBaseComponent("TimeInput", {
    props: {
      autoFocus: props2.autoFocus,
      disableBrowserAutocorrect: props2.disableBrowserAutocorrect,
      format: format3,
      readOnly: props2.readOnly,
      use24Hour
    }
  });
  return import_react537.default.createElement(internal_default23, Object.assign({ format: format3, use24Hour, autoComplete }, props2, baseComponentProps, { ref }));
});
applyDisplayName(TimeInput, "TimeInput");
var internal_do_not_use_core_default13 = TimeInput;

// node_modules/@cloudscape-design/components/time-input/index.js
var TimeInput2 = import_react538.default.forwardRef((props2, ref) => {
  validateProps("TimeInput", props2, ["nativeInputAttributes"], {}, "console");
  return import_react538.default.createElement(internal_do_not_use_core_default13, { ref, ...props2 });
});
applyDisplayName(TimeInput2, "TimeInput");
var time_input_default = TimeInput2;

// node_modules/@cloudscape-design/components/toggle/index.js
var import_react540 = __toESM(require_react());

// node_modules/@cloudscape-design/components/toggle/internal-do-not-use-core.js
var import_react539 = __toESM(require_react());
var Toggle = import_react539.default.forwardRef((props2, ref) => {
  const baseComponentProps = useBaseComponent("Toggle", { props: { readOnly: props2.readOnly } });
  return import_react539.default.createElement(internal_default19, Object.assign({}, props2, baseComponentProps, { ref, __injectAnalyticsComponentMetadata: true }));
});
applyDisplayName(Toggle, "Toggle");
var internal_do_not_use_core_default14 = Toggle;

// node_modules/@cloudscape-design/components/toggle/index.js
var Toggle2 = import_react540.default.forwardRef((props2, ref) => {
  validateProps("Toggle", props2, ["nativeInputAttributes", "style"], {}, "console");
  return import_react540.default.createElement(internal_do_not_use_core_default14, { ref, ...props2 });
});
applyDisplayName(Toggle2, "Toggle");
var toggle_default = Toggle2;

// node_modules/@cloudscape-design/components/toggle-button/index.js
var import_react542 = __toESM(require_react());

// node_modules/@cloudscape-design/components/toggle-button/internal-do-not-use-core.js
var import_react541 = __toESM(require_react());
var ToggleButton2 = import_react541.default.forwardRef((_a2, ref) => {
  var { children: children2, iconName, pressedIconName, iconUrl, pressedIconUrl, iconSvg, pressedIconSvg, variant = "normal", loading = false, loadingText, disabled = false, disabledReason, wrapText = true, ariaLabel, ariaDescribedby, ariaControls, pressed = false, nativeButtonAttributes, onChange } = _a2, props2 = __rest(_a2, ["children", "iconName", "pressedIconName", "iconUrl", "pressedIconUrl", "iconSvg", "pressedIconSvg", "variant", "loading", "loadingText", "disabled", "disabledReason", "wrapText", "ariaLabel", "ariaDescribedby", "ariaControls", "pressed", "nativeButtonAttributes", "onChange"]);
  const baseComponentProps = useBaseComponent("ToggleButton", {
    props: { iconName, pressedIconName, pressed, variant, wrapText },
    metadata: {
      hasDisabledReason: Boolean(disabledReason)
    }
  });
  const baseProps = getBaseProps(props2);
  return import_react541.default.createElement(InternalToggleButton, Object.assign({}, baseProps, baseComponentProps, { ref, iconName, iconUrl, iconSvg, variant, loading, loadingText, disabled, disabledReason, wrapText, ariaLabel, ariaDescribedby, ariaControls, pressedIconName, pressedIconUrl, pressedIconSvg, pressed, nativeButtonAttributes, onChange }), children2);
});
applyDisplayName(ToggleButton2, "ToggleButton");
var internal_do_not_use_core_default15 = ToggleButton2;

// node_modules/@cloudscape-design/components/toggle-button/index.js
var ToggleButton3 = import_react542.default.forwardRef((props2, ref) => {
  validateProps("ToggleButton", props2, ["nativeButtonAttributes"], {}, "console");
  return import_react542.default.createElement(internal_do_not_use_core_default15, { ref, ...props2 });
});
applyDisplayName(ToggleButton3, "ToggleButton");
var toggle_button_default = ToggleButton3;

// node_modules/@cloudscape-design/components/token-group/index.js
var import_react543 = __toESM(require_react());
function TokenGroup2(_a2) {
  var { items = [], alignment = "horizontal" } = _a2, props2 = __rest(_a2, ["items", "alignment"]);
  const baseComponentProps = useBaseComponent("TokenGroup", {
    props: { alignment, disableOuterPadding: props2.disableOuterPadding, limit: props2.limit, readOnly: props2.readOnly }
  });
  const componentAnalyticsMetadata2 = {
    name: "awsui.TokenGroup",
    label: "invalid",
    properties: {
      itemsCount: `${items.length}`
    }
  };
  return import_react543.default.createElement(InternalTokenGroup, Object.assign({ items, alignment }, props2, baseComponentProps, getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 })));
}
applyDisplayName(TokenGroup2, "TokenGroup");

// node_modules/@cloudscape-design/components/top-navigation/index.js
var import_react554 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/internal.js
var import_react553 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/menu-dropdown/index.js
var import_react544 = __toESM(require_react());

// node_modules/@cloudscape-design/components/internal/components/menu-dropdown/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/internal/components/menu-dropdown/styles.scoped.css";
var styles_css_default187 = {
  "button": "awsui_button_m5h9f_19alj_145",
  "expanded": "awsui_expanded_m5h9f_19alj_197",
  "offset-right-none": "awsui_offset-right-none_m5h9f_19alj_208",
  "offset-right-l": "awsui_offset-right-l_m5h9f_19alj_211",
  "offset-right-xxl": "awsui_offset-right-xxl_m5h9f_19alj_214",
  "text": "awsui_text_m5h9f_19alj_239",
  "icon": "awsui_icon_m5h9f_19alj_243"
};

// node_modules/@cloudscape-design/components/internal/components/menu-dropdown/index.js
var ButtonTrigger2 = import_react544.default.forwardRef(({ testUtilsClass, iconName, iconUrl, iconAlt, iconSvg, badge, ariaLabel, offsetRight, disabled, expanded, children: children2, onClick }, ref) => {
  const hasIcon = iconName || iconUrl || iconSvg;
  return import_react544.default.createElement(
    "button",
    { ref, type: "button", className: clsx_m_default(styles_css_default187.button, styles_css_default187[`offset-right-${offsetRight}`], testUtilsClass, {
      [styles_css_default187.expanded]: expanded
    }), "aria-label": ariaLabel, "aria-expanded": !!expanded, "aria-haspopup": true, disabled, onClick: (event) => {
      event.preventDefault();
      onClick === null || onClick === void 0 ? void 0 : onClick();
    } },
    hasIcon && import_react544.default.createElement(internal_default, { className: styles_css_default187.icon, name: iconName, url: iconUrl, alt: iconAlt, svg: iconSvg, badge }),
    children2 && import_react544.default.createElement("span", { className: styles_css_default187.text }, children2),
    children2 && import_react544.default.createElement(internal_default, { name: "caret-down-filled", className: spinWhenOpen(styles_css_default29, "rotate", !!expanded) })
  );
});
var MenuDropdown = (_a2) => {
  var { iconName, iconUrl, iconAlt, iconSvg, badge, offsetRight, children: children2 } = _a2, props2 = __rest(_a2, ["iconName", "iconUrl", "iconAlt", "iconSvg", "badge", "offsetRight", "children"]);
  const baseProps = getBaseProps(props2);
  const dropdownTrigger = ({ triggerRef, ariaLabel, isOpen, testUtilsClass, disabled, onClick }) => {
    return import_react544.default.createElement(ButtonTrigger2, { testUtilsClass, ref: triggerRef, disabled, expanded: isOpen, iconName, iconUrl, iconAlt, iconSvg, badge, ariaLabel, offsetRight, onClick }, children2);
  };
  return import_react544.default.createElement(internal_default6, Object.assign({}, baseProps, props2, { variant: "navigation", customTriggerBuilder: dropdownTrigger, preferCenter: true }));
};
applyDisplayName(MenuDropdown, "MenuDropdown");
var menu_dropdown_default = MenuDropdown;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/index.js
var import_react550 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/router.js
var import_react545 = __toESM(require_react());
var defaultCtx = { state: { view: "utilities", data: null }, setState: () => {
} };
var ViewContext = (0, import_react545.createContext)(defaultCtx);
var useNavigate = () => {
  const { setState } = (0, import_react545.useContext)(ViewContext);
  const navigate = (view, data) => {
    setState({ view, data });
  };
  return navigate;
};
var Route = ({ view, element }) => {
  const { state } = (0, import_react545.useContext)(ViewContext);
  if (view === state.view) {
    if (typeof element === "function") {
      return element(state.data);
    }
    return import_react545.default.createElement(import_react545.default.Fragment, null, element);
  }
  return null;
};
var Router = ({ children: children2 }) => {
  const [state, setState] = (0, import_react545.useState)({ view: "utilities", data: null });
  return import_react545.default.createElement(ViewContext.Provider, { value: { state, setState } }, children2);
};
var router_default = Router;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/views/submenu.js
var import_react548 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/header.js
var import_react546 = __toESM(require_react());

// node_modules/@cloudscape-design/components/top-navigation/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/top-navigation/styles.scoped.css";
var styles_css_default188 = {
  "top-navigation": "awsui_top-navigation_k5dlb_avvbm_145",
  "padding-box": "awsui_padding-box_k5dlb_avvbm_178",
  "medium": "awsui_medium_k5dlb_avvbm_188",
  "narrow": "awsui_narrow_k5dlb_avvbm_188",
  "virtual": "awsui_virtual_k5dlb_avvbm_199",
  "hidden": "awsui_hidden_k5dlb_avvbm_203",
  "	": "awsui_	_k5dlb_avvbm_1",
  "identity": "awsui_identity_k5dlb_avvbm_215",
  "identity-link": "awsui_identity-link_k5dlb_avvbm_218",
  "no-logo": "awsui_no-logo_k5dlb_avvbm_238",
  "logo": "awsui_logo_k5dlb_avvbm_242",
  "title": "awsui_title_k5dlb_avvbm_254",
  "inputs": "awsui_inputs_k5dlb_avvbm_269",
  "search": "awsui_search_k5dlb_avvbm_277",
  "search-expanded": "awsui_search-expanded_k5dlb_avvbm_281",
  "utilities": "awsui_utilities_k5dlb_avvbm_285",
  "utility-wrapper": "awsui_utility-wrapper_k5dlb_avvbm_296",
  "utility-type-button-link": "awsui_utility-type-button-link_k5dlb_avvbm_317",
  "utility-type-menu-dropdown": "awsui_utility-type-menu-dropdown_k5dlb_avvbm_322",
  "utility-type-button-primary-button": "awsui_utility-type-button-primary-button_k5dlb_avvbm_331",
  "utility-link-icon": "awsui_utility-link-icon_k5dlb_avvbm_339",
  "utility-button-external-icon": "awsui_utility-button-external-icon_k5dlb_avvbm_343",
  "offset-right-none": "awsui_offset-right-none_k5dlb_avvbm_347",
  "offset-right-l": "awsui_offset-right-l_k5dlb_avvbm_351",
  "offset-right-xxl": "awsui_offset-right-xxl_k5dlb_avvbm_355",
  "overflow-menu-drawer": "awsui_overflow-menu-drawer_k5dlb_avvbm_360",
  "overflow-menu": "awsui_overflow-menu_k5dlb_avvbm_360",
  "overflow-menu-header": "awsui_overflow-menu-header_k5dlb_avvbm_401",
  "overflow-menu-header-text": "awsui_overflow-menu-header-text_k5dlb_avvbm_409",
  "overflow-menu-header-text--title": "awsui_overflow-menu-header-text--title_k5dlb_avvbm_416",
  "overflow-menu-header-text--secondary": "awsui_overflow-menu-header-text--secondary_k5dlb_avvbm_425",
  "overflow-menu-back-button": "awsui_overflow-menu-back-button_k5dlb_avvbm_433",
  "overflow-menu-dismiss-button": "awsui_overflow-menu-dismiss-button_k5dlb_avvbm_437",
  "overflow-menu-control": "awsui_overflow-menu-control_k5dlb_avvbm_441",
  "overflow-menu-list-item-utility": "awsui_overflow-menu-list-item-utility_k5dlb_avvbm_479",
  "overflow-menu-control-link": "awsui_overflow-menu-control-link_k5dlb_avvbm_487",
  "overflow-menu-control-expandable-menu-trigger": "awsui_overflow-menu-control-expandable-menu-trigger_k5dlb_avvbm_490",
  "overflow-menu-list": "awsui_overflow-menu-list_k5dlb_avvbm_479",
  "overflow-menu-list-submenu": "awsui_overflow-menu-list-submenu_k5dlb_avvbm_526",
  "overflow-menu-list-item": "awsui_overflow-menu-list-item_k5dlb_avvbm_479",
  "overflow-menu-list-item-icon": "awsui_overflow-menu-list-item-icon_k5dlb_avvbm_535",
  "overflow-menu-list-item-text": "awsui_overflow-menu-list-item-text_k5dlb_avvbm_538",
  "overflow-menu-list-item-submenu": "awsui_overflow-menu-list-item-submenu_k5dlb_avvbm_547",
  "overflow-menu-list-item-dropdown-menu": "awsui_overflow-menu-list-item-dropdown-menu_k5dlb_avvbm_553",
  "overflow-menu-list-item-expandable": "awsui_overflow-menu-list-item-expandable_k5dlb_avvbm_557",
  "icon": "awsui_icon_k5dlb_avvbm_562",
  "icon-open": "awsui_icon-open_k5dlb_avvbm_576"
};

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/header.js
var Header4 = ({ children: children2, secondaryText, backIconAriaLabel, dismissIconAriaLabel, onBack, onClose }) => {
  return import_react546.default.createElement(
    "div",
    { className: styles_css_default188["overflow-menu-header"] },
    onBack && import_react546.default.createElement(
      internal_default3,
      {
        // Used for test-utils, which require the selectable element to have a classname.
        className: styles_css_default188["overflow-menu-back-button"],
        ariaLabel: backIconAriaLabel,
        iconName: "angle-left",
        variant: "icon",
        onClick: () => onBack()
      }
    ),
    import_react546.default.createElement(
      "h2",
      { className: styles_css_default188["overflow-menu-header-text"] },
      import_react546.default.createElement("div", { className: styles_css_default188["overflow-menu-header-text--title"] }, children2),
      secondaryText && import_react546.default.createElement("div", { className: styles_css_default188["overflow-menu-header-text--secondary"] }, secondaryText)
    ),
    import_react546.default.createElement(internal_default3, { className: styles_css_default188["overflow-menu-dismiss-button"], ariaLabel: dismissIconAriaLabel, iconName: "close", variant: "icon", onClick: () => onClose && onClose() })
  );
};
var header_default2 = Header4;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/menu-item.js
var import_react547 = __toESM(require_react());
var ListItem = ({ children: children2, startIcon, endIcon }) => {
  return import_react547.default.createElement(
    import_react547.default.Fragment,
    null,
    startIcon && import_react547.default.createElement("span", { className: styles_css_default188["overflow-menu-list-item-icon"] }, startIcon),
    import_react547.default.createElement("span", { className: styles_css_default188["overflow-menu-list-item-text"] }, children2),
    endIcon && endIcon
  );
};
var LinkItem = (0, import_react547.forwardRef)(({ children: children2, external, href, target, rel, startIcon, endIcon, onClick, context, testId }, ref) => {
  const anchorTarget = target !== null && target !== void 0 ? target : external ? "_blank" : void 0;
  const anchorRel = rel !== null && rel !== void 0 ? rel : anchorTarget === "_blank" ? "noopener noreferrer" : void 0;
  const role = !href ? "button" : void 0;
  return import_react547.default.createElement(
    "a",
    Object.assign({ ref, onClick, className: clsx_m_default(styles_css_default188["overflow-menu-control"], styles_css_default188["overflow-menu-control-link"], context && styles_css_default188[`overflow-menu-control-${context}`]), role, tabIndex: 0, href, target: anchorTarget, rel: anchorRel }, testId ? { "data-testid": testId } : {}),
    import_react547.default.createElement(ListItem, { startIcon, endIcon }, children2)
  );
});
var ButtonItem = (0, import_react547.forwardRef)(({ children: children2, startIcon, endIcon, onClick, testId }, ref) => {
  return import_react547.default.createElement(
    "button",
    Object.assign({ ref, className: styles_css_default188["overflow-menu-control"], onClick }, typeof testId === "string" ? { "data-testid": testId } : {}),
    import_react547.default.createElement(ListItem, { startIcon, endIcon }, children2)
  );
});
var NavigationItem = (0, import_react547.forwardRef)((_a2, ref) => {
  var { startIcon, children: children2, index, testId } = _a2, definition = __rest(_a2, ["startIcon", "children", "index", "testId"]);
  const navigate = useNavigate();
  return import_react547.default.createElement(ButtonItem, { ref, startIcon, endIcon: import_react547.default.createElement(internal_default, { name: "angle-right" }), testId, onClick: () => navigate("dropdown-menu", {
    definition,
    headerText: definition.text || definition.title,
    headerSecondaryText: definition.description,
    utilityIndex: index
  }) }, children2);
});
var ExpandableItem = (_a2) => {
  var { children: children2, onItemClick } = _a2, definition = __rest(_a2, ["children", "onItemClick"]);
  const [expanded, setExpanded] = (0, import_react547.useState)(false);
  const headerId = useUniqueId("overflow-menu-item");
  return import_react547.default.createElement(
    import_react547.default.Fragment,
    null,
    import_react547.default.createElement(
      "button",
      { className: clsx_m_default(styles_css_default188["overflow-menu-control"], styles_css_default188["overflow-menu-control-expandable-menu-trigger"]), onClick: () => setExpanded((value) => !value), "aria-expanded": expanded },
      import_react547.default.createElement(
        ListItem,
        { endIcon: import_react547.default.createElement(
          "span",
          { className: spinWhenOpen(styles_css_default188, "icon", expanded) },
          import_react547.default.createElement(internal_default, { name: "caret-down-filled" })
        ) },
        import_react547.default.createElement("span", { id: headerId }, children2)
      )
    ),
    expanded && import_react547.default.createElement("ul", { className: clsx_m_default(styles_css_default188["overflow-menu-list"], styles_css_default188["overflow-menu-list-submenu"]), "aria-labelledby": headerId }, definition.items.map((item, index) => {
      const isGroup5 = typeof item.items !== "undefined";
      return import_react547.default.createElement("li", { key: index, className: clsx_m_default(styles_css_default188[`overflow-menu-list-item`], styles_css_default188[`overflow-menu-list-item-dropdown-menu`]) }, dropdownComponentFactory(item, isGroup5, onItemClick));
    }))
  );
};
function utilityComponentFactory(utility, index, ref) {
  const label = utility.text || utility.title;
  const hasIcon = !!utility.iconName || !!utility.iconUrl || !!utility.iconAlt || !!utility.iconSvg;
  const startIcon = hasIcon && import_react547.default.createElement(internal_default, { name: utility.iconName, url: utility.iconUrl, alt: utility.iconAlt, svg: utility.iconSvg });
  switch (utility.type) {
    case "button": {
      const handleClick = (event) => {
        var _a2;
        if (Boolean(utility.href) && isPlainLeftClick(event)) {
          fireCancelableEvent(utility.onFollow, { href: utility.href, target: utility.target }, event);
        }
        fireCancelableEvent(utility.onClick, {}, event);
        (_a2 = utility.onClose) === null || _a2 === void 0 ? void 0 : _a2.call(utility);
      };
      const content = import_react547.default.createElement(
        import_react547.default.Fragment,
        null,
        label,
        utility.external && import_react547.default.createElement(
          import_react547.default.Fragment,
          null,
          " ",
          import_react547.default.createElement(
            "span",
            { "aria-label": utility.externalIconAriaLabel, role: utility.externalIconAriaLabel ? "img" : void 0 },
            import_react547.default.createElement(internal_default, { name: "external", size: "normal" })
          )
        )
      );
      if (!utility.href) {
        return import_react547.default.createElement(ButtonItem, { ref, startIcon, onClick: handleClick, testId: `__${index}` }, content);
      }
      return import_react547.default.createElement(LinkItem, { ref, startIcon, href: utility.href, external: utility.external, target: utility.target, rel: utility.rel, testId: `__${index}`, onClick: handleClick }, content);
    }
    case "menu-dropdown": {
      return import_react547.default.createElement(NavigationItem, Object.assign({ ref, startIcon, index }, utility, { testId: `__${index}` }), label);
    }
  }
}
function dropdownComponentFactory(item, expandable, onItemClick) {
  const label = item.text;
  const hasIcon = !!item.iconName || !!item.iconUrl || !!item.iconAlt || !!item.iconSvg;
  const isLink = isLinkItem(item);
  const startIcon = hasIcon && import_react547.default.createElement(internal_default, { name: item.iconName, url: item.iconUrl, alt: item.iconAlt, svg: item.iconSvg });
  if (expandable) {
    return import_react547.default.createElement(ExpandableItem, Object.assign({}, item, { onItemClick }), label);
  }
  return import_react547.default.createElement(
    LinkItem,
    { startIcon, href: isLink ? item.href : void 0, external: isLink ? item.external : void 0, context: "dropdown-menu", testId: item.id, onClick: (event) => onItemClick(event, item) },
    label,
    isLink && item.external && import_react547.default.createElement(
      import_react547.default.Fragment,
      null,
      " ",
      import_react547.default.createElement(
        "span",
        { "aria-label": item.externalIconAriaLabel, role: item.externalIconAriaLabel ? "img" : void 0 },
        import_react547.default.createElement(internal_default, { name: "external", size: "normal" })
      )
    )
  );
}
var UtilityMenuItem = (0, import_react547.forwardRef)((_a2, ref) => {
  var { index } = _a2, props2 = __rest(_a2, ["index"]);
  return import_react547.default.createElement("li", { className: clsx_m_default(styles_css_default188[`overflow-menu-list-item`], styles_css_default188[`overflow-menu-list-item-utility`]) }, utilityComponentFactory(props2, index, ref));
});
var SubmenuItem = (props2) => {
  const expandable = typeof props2.items !== "undefined";
  return import_react547.default.createElement("li", { className: clsx_m_default(styles_css_default188[`overflow-menu-list-item`], styles_css_default188[`overflow-menu-list-item-submenu`], expandable && styles_css_default188[`overflow-menu-list-item-expandable`]) }, dropdownComponentFactory(props2, expandable, props2.onClick));
};

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/views/submenu.js
var SubmenuView = ({ onClose, utilityIndex, headerText, headerSecondaryText, dismissIconAriaLabel, backIconAriaLabel, definition }) => {
  const navigate = useNavigate();
  const headerId = useUniqueId("overflow-menu-header");
  return import_react548.default.createElement(
    focus_lock_default,
    { autoFocus: true },
    import_react548.default.createElement(
      header_default2,
      { secondaryText: headerSecondaryText, dismissIconAriaLabel, backIconAriaLabel, onClose, onBack: () => navigate("utilities", { utilityIndex }) },
      import_react548.default.createElement("span", { id: headerId }, headerText)
    ),
    import_react548.default.createElement("ul", { className: clsx_m_default(styles_css_default188["overflow-menu-list"], styles_css_default188["overflow-menu-list-submenu"]), "aria-labelledby": headerId }, definition.items.map((item, index) => import_react548.default.createElement(SubmenuItem, Object.assign({ key: index }, item, { onClick: (event, item2) => {
      if (item2.href && isPlainLeftClick(event)) {
        fireCancelableEvent(definition.onItemFollow, { id: item2.id, href: item2.href, external: item2.external }, event);
      }
      fireCancelableEvent(definition.onItemClick, { id: item2.id, href: item2.href, external: item2.external }, event);
      onClose === null || onClose === void 0 ? void 0 : onClose();
    } }))))
  );
};
var submenu_default = SubmenuView;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/views/utilities.js
var import_react549 = __toESM(require_react());
var UtilitiesView = ({ headerText, dismissIconAriaLabel, onClose, items = [], focusIndex }) => {
  const headerId = useUniqueId("overflow-menu-header");
  const ref = (0, import_react549.useRef)(null);
  (0, import_react549.useEffect)(() => {
    var _a2;
    if (typeof focusIndex === "number") {
      (_a2 = ref.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
  }, [focusIndex]);
  return import_react549.default.createElement(
    focus_lock_default,
    { autoFocus: true },
    import_react549.default.createElement(
      header_default2,
      { dismissIconAriaLabel, onClose },
      import_react549.default.createElement("span", { id: headerId }, headerText)
    ),
    import_react549.default.createElement("ul", { className: styles_css_default188["overflow-menu-list"], "aria-labelledby": headerId }, items.map((utility, index) => import_react549.default.createElement(UtilityMenuItem, Object.assign({ key: index, index, ref: index === focusIndex ? ref : void 0, onClose }, utility))))
  );
};
var utilities_default = UtilitiesView;

// node_modules/@cloudscape-design/components/top-navigation/parts/overflow-menu/index.js
var OverflowMenu2 = ({ headerText, dismissIconAriaLabel, backIconAriaLabel, items = [], onClose }) => {
  const i18n = useInternalI18n("top-navigation");
  const renderedDismissIconAriaLabel = i18n("i18nStrings.overflowMenuDismissIconAriaLabel", dismissIconAriaLabel);
  const renderedBackIconAriaLabel = i18n("i18nStrings.overflowMenuBackIconAriaLabel", backIconAriaLabel);
  return import_react550.default.createElement(
    "div",
    { className: styles_css_default188["overflow-menu"], onKeyUp: (event) => {
      if (event.key === "Escape") {
        onClose === null || onClose === void 0 ? void 0 : onClose();
      }
    } },
    import_react550.default.createElement(
      router_default,
      null,
      import_react550.default.createElement(Route, { view: "utilities", element: (data) => import_react550.default.createElement(utilities_default, { headerText: i18n("i18nStrings.overflowMenuTitleText", headerText), items, focusIndex: data === null || data === void 0 ? void 0 : data.utilityIndex, dismissIconAriaLabel: renderedDismissIconAriaLabel, backIconAriaLabel: renderedBackIconAriaLabel, onClose }) }),
      import_react550.default.createElement(Route, { view: "dropdown-menu", element: (data) => import_react550.default.createElement(submenu_default, { headerText: data === null || data === void 0 ? void 0 : data.headerText, headerSecondaryText: data === null || data === void 0 ? void 0 : data.headerSecondaryText, dismissIconAriaLabel: renderedDismissIconAriaLabel, backIconAriaLabel: renderedBackIconAriaLabel, definition: data === null || data === void 0 ? void 0 : data.definition, utilityIndex: data === null || data === void 0 ? void 0 : data.utilityIndex, onClose }) })
    )
  );
};
var overflow_menu_default = OverflowMenu2;

// node_modules/@cloudscape-design/components/top-navigation/parts/utility.js
var import_react551 = __toESM(require_react());
function Utility({ hideText, definition, offsetRight }) {
  var _a2;
  const hasIcon = !!definition.iconName || !!definition.iconUrl || !!definition.iconAlt || !!definition.iconSvg;
  const shouldHideText = hideText && !definition.disableTextCollapse && hasIcon;
  let ariaLabel = (_a2 = definition.ariaLabel) !== null && _a2 !== void 0 ? _a2 : definition.text;
  if (definition.type === "button") {
    ariaLabel = definition.ariaLabel ? definition.ariaLabel : joinStrings(definition.text, definition.externalIconAriaLabel);
    checkSafeUrl("TopNavigation", definition.href);
    if (definition.variant === "primary-button") {
      return import_react551.default.createElement(
        "span",
        { className: styles_css_default188[`offset-right-${offsetRight}`] },
        import_react551.default.createElement(InternalButton, { variant: "primary", href: definition.href, target: definition.external ? "_blank" : void 0, onClick: definition.onClick, onFollow: definition.onFollow, ariaLabel, iconName: definition.iconName, iconUrl: definition.iconUrl, iconAlt: definition.iconAlt, iconSvg: definition.iconSvg }, shouldHideText ? null : import_react551.default.createElement(
          import_react551.default.Fragment,
          null,
          definition.text,
          definition.external && import_react551.default.createElement(
            import_react551.default.Fragment,
            null,
            " ",
            import_react551.default.createElement(
              "span",
              { className: clsx_m_default(styles_css_default188["utility-button-external-icon"], styles_css_default188[`offset-right-${offsetRight}`]), "aria-label": definition.externalIconAriaLabel, role: definition.externalIconAriaLabel ? "img" : void 0 },
              import_react551.default.createElement(internal_default, { name: "external" })
            )
          )
        ))
      );
    } else {
      return import_react551.default.createElement(
        "span",
        { className: styles_css_default188[`offset-right-${offsetRight}`] },
        import_react551.default.createElement(
          internal_default10,
          { variant: "top-navigation", href: definition.href, target: definition.target, rel: definition.rel, external: definition.external, onFollow: (evt) => {
            fireCancelableEvent(definition.onFollow, { href: definition.href, target: definition.target, external: definition.external }, evt);
            fireCancelableEvent(definition.onClick, { href: definition.href, target: definition.target, external: definition.external }, evt);
          }, ariaLabel },
          hasIcon && import_react551.default.createElement(internal_default, { name: definition.iconName, url: definition.iconUrl, alt: definition.iconAlt, svg: definition.iconSvg, badge: definition.badge }),
          !shouldHideText && definition.text && import_react551.default.createElement("span", { className: hasIcon ? styles_css_default188["utility-link-icon"] : void 0 }, definition.text)
        )
      );
    }
  } else if (definition.type === "menu-dropdown") {
    const title = definition.title || definition.text;
    const shouldShowTitle = shouldHideText || !definition.text;
    const items = excludeCheckboxes(definition.items);
    checkSafeUrlRecursively(definition.items);
    return import_react551.default.createElement(menu_dropdown_default, Object.assign({}, definition, { items, title: shouldShowTitle ? title : "", ariaLabel, offsetRight }), !shouldHideText && definition.text);
  }
  return null;
}
function checkSafeUrlRecursively(itemOrGroup) {
  for (const item of itemOrGroup) {
    if (isLinkItem(item)) {
      checkSafeUrl("TopNavigation", item.href);
    }
    if ("items" in item) {
      checkSafeUrlRecursively(item.items);
    }
  }
}
function excludeCheckboxes(items) {
  return items.map((item) => {
    if (item.itemType === "checkbox") {
      return null;
    }
    if ("items" in item) {
      return Object.assign(Object.assign({}, item), { items: excludeCheckboxes(item.items) });
    }
    return item;
  }).filter((item) => item !== null);
}

// node_modules/@cloudscape-design/components/top-navigation/use-top-navigation.js
var import_react552 = __toESM(require_react());
var RESPONSIVENESS_BUFFER = 20;
function useTopNavigation({ identity: identity2, search, utilities }) {
  const mainRef = (0, import_react552.useRef)(null);
  const virtualRef = (0, import_react552.useRef)(null);
  const [breakpoint, breakpointRef] = useContainerBreakpoints(["xxs", "s"]);
  const hasSearch = !!search;
  const hasTitleWithLogo = identity2 && !!identity2.logo && !!identity2.title;
  const responsiveStates = (0, import_react552.useMemo)(() => {
    return generateResponsiveStateKeys(utilities, hasSearch, hasTitleWithLogo);
  }, [utilities, hasSearch, hasTitleWithLogo]);
  const [responsiveState, setResponsiveState] = (0, import_react552.useState)();
  const recalculateFit = (0, import_react552.useCallback)(() => {
    var _a2, _b, _c, _d;
    if (!(mainRef === null || mainRef === void 0 ? void 0 : mainRef.current) || !virtualRef.current) {
      setResponsiveState(responsiveStates[0]);
      return;
    }
    const availableWidth = getContentBoxWidth(mainRef.current.querySelector(`.${styles_css_default188["padding-box"]}`));
    if (availableWidth === 0) {
      setResponsiveState(responsiveStates[0]);
      return;
    }
    const sizeConfiguration = {
      hasSearch,
      availableWidth,
      // Get widths from the hidden top navigation
      fullIdentityWidth: virtualRef.current.querySelector(`.${styles_css_default188.identity}`).getBoundingClientRect().width,
      titleWidth: (_b = (_a2 = virtualRef.current.querySelector(`.${styles_css_default188.title}`)) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect().width) !== null && _b !== void 0 ? _b : 0,
      searchSlotWidth: (_d = (_c = virtualRef.current.querySelector(`.${styles_css_default188.search}`)) === null || _c === void 0 ? void 0 : _c.getBoundingClientRect().width) !== null && _d !== void 0 ? _d : 0,
      searchUtilityWidth: virtualRef.current.querySelector('[data-utility-special="search"]').getBoundingClientRect().width,
      utilitiesLeftPadding: parseFloat(getComputedStyle(virtualRef.current.querySelector(`.${styles_css_default188.utilities}`)).paddingLeft || "0px"),
      utilityWithLabelWidths: Array.prototype.slice.call(virtualRef.current.querySelectorAll(`[data-utility-hide="false"]`)).map((element) => element.getBoundingClientRect().width),
      utilityWithoutLabelWidths: Array.prototype.slice.call(virtualRef.current.querySelectorAll(`[data-utility-hide="true"]`)).map((element) => element.getBoundingClientRect().width),
      menuTriggerUtilityWidth: virtualRef.current.querySelector('[data-utility-special="menu-trigger"]').getBoundingClientRect().width
    };
    setResponsiveState(determineBestResponsiveState(responsiveStates, sizeConfiguration));
  }, [responsiveStates, hasSearch]);
  const [, containerQueryRef] = useContainerQuery(() => {
    recalculateFit();
  }, [recalculateFit]);
  const onVirtualMount = (0, import_react552.useCallback)((element) => {
    virtualRef.current = element;
    recalculateFit();
  }, [recalculateFit]);
  const [isSearchMinimized, setSearchMinimized] = (0, import_react552.useState)(true);
  const isSearchExpanded = !isSearchMinimized && hasSearch && (responsiveState === null || responsiveState === void 0 ? void 0 : responsiveState.hideSearch);
  (0, import_react552.useEffect)(() => {
    if (!(responsiveState === null || responsiveState === void 0 ? void 0 : responsiveState.hideSearch)) {
      setSearchMinimized(true);
    }
  }, [responsiveState]);
  (0, import_react552.useEffect)(() => {
    var _a2, _b;
    if (isSearchExpanded) {
      (_b = (_a2 = mainRef === null || mainRef === void 0 ? void 0 : mainRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector(`.${styles_css_default188.search} input`)) === null || _b === void 0 ? void 0 : _b.focus();
    }
  }, [isSearchExpanded, mainRef]);
  const mergedMainRef = useMergeRefs(mainRef, containerQueryRef, breakpointRef);
  return {
    mainRef: mergedMainRef,
    virtualRef: onVirtualMount,
    responsiveState: responsiveState !== null && responsiveState !== void 0 ? responsiveState : responsiveStates[0],
    breakpoint: breakpoint !== null && breakpoint !== void 0 ? breakpoint : "default",
    isSearchExpanded: !!isSearchExpanded,
    onSearchUtilityClick: () => setSearchMinimized((isSearchMinimized2) => !isSearchMinimized2)
  };
}
function getContentBoxWidth(element) {
  const style = getComputedStyle(element);
  return parseFloat(style.width || "0px") - parseFloat(style.paddingLeft || "0px") - parseFloat(style.paddingRight || "0px");
}
function generateResponsiveStateKeys(utilities, canHideSearch, canHideTitle) {
  const states = [{}];
  if (utilities.some((utility) => utility.text)) {
    states.push({ hideUtilityText: true });
  }
  if (canHideSearch) {
    states.push({
      hideUtilityText: true,
      hideSearch: true
    });
  }
  const hiddenUtilties = [];
  for (let i2 = 0; i2 < utilities.length; i2++) {
    if (!utilities[i2].disableUtilityCollapse) {
      hiddenUtilties.push(i2);
      states.push({
        hideUtilityText: true,
        hideSearch: canHideSearch || void 0,
        hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : void 0
      });
    }
  }
  if (canHideTitle) {
    states.push({
      hideUtilityText: true,
      hideSearch: canHideSearch || void 0,
      hideUtilities: hiddenUtilties.length > 0 ? hiddenUtilties.slice() : void 0,
      hideTitle: true
    });
  }
  return states;
}
function determineBestResponsiveState(possibleStates, sizes) {
  const { hasSearch, availableWidth, utilitiesLeftPadding, fullIdentityWidth, titleWidth, searchSlotWidth, searchUtilityWidth, utilityWithLabelWidths, utilityWithoutLabelWidths, menuTriggerUtilityWidth } = sizes;
  for (const state of possibleStates) {
    const searchWidth = hasSearch ? state.hideSearch ? searchUtilityWidth : searchSlotWidth : 0;
    const utilitiesWidth = (state.hideUtilityText ? utilityWithoutLabelWidths : utilityWithLabelWidths).filter((_width, i2) => !state.hideUtilities || state.hideUtilities.indexOf(i2) === -1).reduce((sum2, width) => sum2 + width, 0);
    const menuTriggerWidth = state.hideUtilities ? menuTriggerUtilityWidth : 0;
    const identityWidth = state.hideTitle ? fullIdentityWidth - titleWidth : fullIdentityWidth;
    const expectedInnerWidth = identityWidth + searchWidth + utilitiesLeftPadding + utilitiesWidth + menuTriggerWidth;
    if (expectedInnerWidth <= availableWidth - RESPONSIVENESS_BUFFER) {
      return state;
    }
  }
  return possibleStates[possibleStates.length - 1];
}

// node_modules/@cloudscape-design/components/top-navigation/internal.js
function InternalTopNavigation(_a2) {
  var { __internalRootRef, identity: identity2, i18nStrings, utilities, search } = _a2, restProps = __rest(_a2, ["__internalRootRef", "identity", "i18nStrings", "utilities", "search"]);
  checkSafeUrl("TopNavigation", identity2.href);
  const baseProps = getBaseProps(restProps);
  const { mainRef, virtualRef, breakpoint, responsiveState, isSearchExpanded, onSearchUtilityClick } = useTopNavigation({ identity: identity2, search, utilities });
  const [overflowMenuOpen, setOverflowMenuOpen] = (0, import_react553.useState)(false);
  const overflowMenuTriggerRef = (0, import_react553.useRef)(null);
  const isNarrowViewport = breakpoint === "default";
  const isMediumViewport = breakpoint === "xxs";
  const isLargeViewport = breakpoint === "s";
  const i18n = useInternalI18n("top-navigation");
  if (isDevelopment) {
    if (utilities.some((item) => item.type === "menu-dropdown" && hasCheckboxItems(item.items))) {
      warnOnce("TopNavigation", "The TopNavigation component does not support menu-dropdown items with `itemType` equal to `checkbox`.");
    }
  }
  const onIdentityClick = (event) => {
    if (isPlainLeftClick(event)) {
      fireCancelableEvent(identity2.onFollow, {}, event);
    }
  };
  const toggleOverflowMenu = () => {
    setOverflowMenuOpen((overflowMenuOpen2) => !overflowMenuOpen2);
  };
  const menuTriggerVisible = !isSearchExpanded && responsiveState.hideUtilities;
  (0, import_react553.useEffect)(() => {
    setOverflowMenuOpen(false);
  }, [menuTriggerVisible]);
  useEffectOnUpdate2(() => {
    var _a3;
    if (!overflowMenuOpen) {
      (_a3 = overflowMenuTriggerRef.current) === null || _a3 === void 0 ? void 0 : _a3.focus();
    }
  }, [overflowMenuOpen]);
  const content = (isVirtual) => {
    var _a3, _b;
    const Wrapper = isVirtual ? "div" : "header";
    const showIdentity = isVirtual || !isSearchExpanded;
    const showTitle = isVirtual || !responsiveState.hideTitle;
    const showSearchSlot = search && (isVirtual || !responsiveState.hideSearch || isSearchExpanded);
    const showSearchUtility = isVirtual || search && responsiveState.hideSearch;
    const showUtilities = isVirtual || !isSearchExpanded;
    const showMenuTrigger = isVirtual || menuTriggerVisible;
    return import_react553.default.createElement(
      Wrapper,
      { ref: isVirtual ? virtualRef : mainRef, "aria-hidden": isVirtual ? true : void 0, className: clsx_m_default(styles_css_default188["top-navigation"], {
        [styles_css_default188.virtual]: isVirtual,
        [styles_css_default188.hidden]: isVirtual,
        [styles_css_default188.narrow]: isNarrowViewport,
        [styles_css_default188.medium]: isMediumViewport
      }) },
      import_react553.default.createElement(
        "div",
        { className: styles_css_default188["padding-box"] },
        showIdentity && import_react553.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default188.identity, !identity2.logo && styles_css_default188["no-logo"]) },
          import_react553.default.createElement(
            "a",
            { className: styles_css_default188["identity-link"], href: identity2.href, onClick: onIdentityClick },
            identity2.logo && import_react553.default.createElement("img", { role: "img", src: (_a3 = identity2.logo) === null || _a3 === void 0 ? void 0 : _a3.src, alt: (_b = identity2.logo) === null || _b === void 0 ? void 0 : _b.alt, className: clsx_m_default(styles_css_default188.logo, {
              [styles_css_default188.narrow]: isNarrowViewport
            }) }),
            showTitle && import_react553.default.createElement("span", { className: styles_css_default188.title }, identity2.title)
          )
        ),
        showSearchSlot && import_react553.default.createElement(
          "div",
          { className: styles_css_default188.inputs },
          import_react553.default.createElement("div", { className: clsx_m_default(styles_css_default188.search, !isVirtual && isSearchExpanded && styles_css_default188["search-expanded"]) }, search)
        ),
        import_react553.default.createElement(
          "div",
          { className: styles_css_default188.utilities },
          showSearchUtility && import_react553.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default188["utility-wrapper"], styles_css_default188["utility-type-button"], styles_css_default188["utility-type-button-link"], {
              [styles_css_default188.narrow]: isNarrowViewport,
              [styles_css_default188.medium]: isMediumViewport
            }), "data-utility-special": "search" },
            import_react553.default.createElement(Utility, { hideText: true, definition: {
              type: "button",
              iconName: isSearchExpanded ? "close" : "search",
              ariaLabel: isSearchExpanded ? i18n("i18nStrings.searchDismissIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.searchDismissIconAriaLabel) : i18n("i18nStrings.searchIconAriaLabel", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.searchIconAriaLabel),
              onClick: onSearchUtilityClick
            } })
          ),
          showUtilities && utilities.filter((_utility, i2) => isVirtual || !responsiveState.hideUtilities || responsiveState.hideUtilities.indexOf(i2) === -1).map((utility, i2) => {
            var _a4;
            const hideText = !!responsiveState.hideUtilityText;
            const isLast = (isVirtual || !showMenuTrigger) && i2 === utilities.length - 1;
            const offsetRight = isLast && isLargeViewport ? "xxl" : isLast ? "l" : void 0;
            return import_react553.default.createElement(
              "div",
              { key: i2, className: clsx_m_default(styles_css_default188["utility-wrapper"], styles_css_default188[`utility-type-${utility.type}`], utility.type === "button" && styles_css_default188[`utility-type-button-${(_a4 = utility.variant) !== null && _a4 !== void 0 ? _a4 : "link"}`], {
                [styles_css_default188.narrow]: isNarrowViewport,
                [styles_css_default188.medium]: isMediumViewport
              }), "data-utility-index": i2, "data-utility-hide": `${hideText}` },
              import_react553.default.createElement(Utility, { hideText, definition: utility, offsetRight })
            );
          }),
          isVirtual && utilities.map((utility, i2) => {
            var _a4;
            const hideText = !responsiveState.hideUtilityText;
            const isLast = !showMenuTrigger && i2 === utilities.length - 1;
            const offsetRight = isLast && isLargeViewport ? "xxl" : isLast ? "l" : void 0;
            return import_react553.default.createElement(
              "div",
              { key: i2, className: clsx_m_default(styles_css_default188["utility-wrapper"], styles_css_default188[`utility-type-${utility.type}`], utility.type === "button" && styles_css_default188[`utility-type-button-${(_a4 = utility.variant) !== null && _a4 !== void 0 ? _a4 : "link"}`], {
                [styles_css_default188.narrow]: isNarrowViewport,
                [styles_css_default188.medium]: isMediumViewport
              }), "data-utility-index": i2, "data-utility-hide": `${hideText}` },
              import_react553.default.createElement(Utility, { hideText, definition: utility, offsetRight })
            );
          }),
          showMenuTrigger && import_react553.default.createElement(
            "div",
            { className: clsx_m_default(styles_css_default188["utility-wrapper"], styles_css_default188["utility-type-menu-dropdown"], {
              [styles_css_default188.narrow]: isNarrowViewport,
              [styles_css_default188.medium]: isMediumViewport
            }), "data-utility-special": "menu-trigger" },
            import_react553.default.createElement(ButtonTrigger2, { expanded: overflowMenuOpen, onClick: toggleOverflowMenu, offsetRight: "l", ref: !isVirtual ? overflowMenuTriggerRef : void 0 }, i18n("i18nStrings.overflowMenuTriggerText", i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.overflowMenuTriggerText))
          )
        )
      )
    );
  };
  return import_react553.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef }),
    import_react553.default.createElement(
      VisualContext,
      { contextName: "top-navigation" },
      content(true),
      content(false),
      menuTriggerVisible && overflowMenuOpen && import_react553.default.createElement(
        "div",
        { className: styles_css_default188["overflow-menu-drawer"] },
        import_react553.default.createElement(overflow_menu_default, { headerText: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.overflowMenuTitleText, dismissIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.overflowMenuDismissIconAriaLabel, backIconAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.overflowMenuBackIconAriaLabel, items: utilities.filter((utility, i2) => (!responsiveState.hideUtilities || responsiveState.hideUtilities.indexOf(i2) !== -1) && !utility.disableUtilityCollapse), onClose: toggleOverflowMenu })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/top-navigation/index.js
function TopNavigation(_a2) {
  var { utilities = [] } = _a2, restProps = __rest(_a2, ["utilities"]);
  const baseComponentProps = useBaseComponent("TopNavigation");
  return import_react554.default.createElement(InternalTopNavigation, Object.assign({}, baseComponentProps, { utilities }, restProps));
}
applyDisplayName(TopNavigation, "TopNavigation");

// node_modules/@cloudscape-design/components/tree-view/index.js
var import_react560 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tree-view/internal.js
var import_react559 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tree-view/keyboard-navigation/index.js
var import_react555 = __toESM(require_react());
var import_react556 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tree-view/tree-item/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/tree-view/tree-item/styles.scoped.css";
var styles_css_default189 = {
  "treeitem-group": "awsui_treeitem-group_1agpu_c0siv_185",
  "treeitem": "awsui_treeitem_1agpu_c0siv_185",
  "offset": "awsui_offset_1agpu_c0siv_202",
  "treeitem-content-wrapper": "awsui_treeitem-content-wrapper_1agpu_c0siv_205",
  "tree-item-focus-target": "awsui_tree-item-focus-target_1agpu_c0siv_210",
  "expand-toggle-wrapper": "awsui_expand-toggle-wrapper_1agpu_c0siv_231",
  "toggle": "awsui_toggle_1agpu_c0siv_236",
  "structured-item-wrapper": "awsui_structured-item-wrapper_1agpu_c0siv_241",
  "tree-item-structured-item": "awsui_tree-item-structured-item_1agpu_c0siv_248"
};

// node_modules/@cloudscape-design/components/tree-view/keyboard-navigation/utils.js
function getClosestTreeItem(element) {
  return element.closest("li[data-awsui-tree-item-index]");
}
function getToggleButtonOfTreeItem(treeItem) {
  const toggleElement = treeItem === null || treeItem === void 0 ? void 0 : treeItem.querySelector(`.${styles_css_default189["tree-item-focus-target"]}`);
  return toggleElement;
}
function isElementDisabled2(element) {
  if (element instanceof HTMLButtonElement) {
    return element.disabled;
  }
  return false;
}
function findTreeItemByIndex(treeView, targetTreeItemIndex, delta) {
  var _a2;
  let targetTreeItem = null;
  const treeItemElements = Array.from(treeView.querySelectorAll("li[data-awsui-tree-item-index]"));
  if (delta < 0) {
    treeItemElements.reverse();
  }
  for (const element of treeItemElements) {
    const elementIndex = parseInt((_a2 = element.getAttribute("data-awsui-tree-item-index")) !== null && _a2 !== void 0 ? _a2 : "");
    targetTreeItem = element;
    if (elementIndex === targetTreeItemIndex) {
      break;
    }
  }
  return targetTreeItem;
}
function findTreeItemContentById(treeView, treeItemId) {
  const treeItemContent = treeView.querySelector(`li[data-awsui-tree-item-index][id="${treeItemId}"] .${styles_css_default189["tree-item-structured-item"]}`);
  return treeItemContent;
}
function isTreeItemToggle(element) {
  return element.classList.contains(styles_css_default189["tree-item-focus-target"]);
}

// node_modules/@cloudscape-design/components/tree-view/keyboard-navigation/index.js
function KeyboardNavigationProvider({ getTreeView, children: children2 }) {
  const navigationAPI = (0, import_react555.useRef)(null);
  const keyboardNavigation = (0, import_react556.useMemo)(() => new KeyboardNavigationProcessor(navigationAPI), []);
  const getTreeViewStable = useStableCallback(getTreeView);
  (0, import_react556.useEffect)(() => {
    const treeView = getTreeViewStable();
    if (treeView) {
      keyboardNavigation.init(treeView);
      return keyboardNavigation.cleanup;
    }
  }, [keyboardNavigation, getTreeViewStable]);
  (0, import_react556.useEffect)(() => {
    keyboardNavigation.refresh();
  });
  return import_react555.default.createElement(SingleTabStopNavigationProvider, { ref: navigationAPI, getNextFocusTarget: keyboardNavigation.getNextFocusTarget, onUnregisterActive: keyboardNavigation.onUnregisterActive, navigationActive: true }, children2);
}
var KeyboardNavigationProcessor = class {
  constructor(navigationAPI) {
    this._treeView = null;
    this.focusedTreeItem = null;
    this.cleanup = () => {
    };
    this.onUnregisterActive = () => {
      if (this.treeView && this.focusedTreeItem && !nodeBelongs2(this.treeView, this.focusedTreeItem.element)) {
        const nextFocusableElement = this.getNextFocusableTreeItemContent(this.treeView, this.focusedTreeItem, 0);
        if (nextFocusableElement) {
          nextFocusableElement === null || nextFocusableElement === void 0 ? void 0 : nextFocusableElement.focus();
        } else {
          this.moveFocusBetweenTreeItems(this.treeView, this.focusedTreeItem, 0);
        }
      }
    };
    this.getNextFocusTarget = () => {
      if (!this.treeView) {
        return null;
      }
      const treeItem = this.focusedTreeItem;
      const firstTreeItemToggle = this.treeView.querySelector(`.${styles_css_default189["tree-item-focus-target"]}`);
      let focusTarget = firstTreeItemToggle;
      if (treeItem) {
        focusTarget = this.getNextFocusableTreeItem(this.treeView, treeItem, 0);
      }
      return focusTarget;
    };
    this.onFocusin = (treeView, event) => {
      var _a2;
      if (!(event.target instanceof HTMLElement)) {
        return;
      }
      this.updateFocusedTreeItem(treeView, event.target);
      if (!this.focusedTreeItem) {
        return;
      }
      (_a2 = this._navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.updateFocusTarget();
    };
    this.onKeydown = (treeView, event) => {
      const keys = [
        KeyCode2.up,
        KeyCode2.down,
        KeyCode2.left,
        KeyCode2.right,
        KeyCode2.pageUp,
        KeyCode2.pageDown,
        KeyCode2.home,
        KeyCode2.end
      ];
      if (!this.focusedTreeItem || !this.isRegistered(document.activeElement) || keys.indexOf(event.keyCode) === -1) {
        return;
      }
      const from = this.focusedTreeItem;
      if (isEventLike(event)) {
        handleKey2(event, {
          onBlockStart: () => this.moveFocusBetweenTreeItems(treeView, from, -1, event),
          onBlockEnd: () => this.moveFocusBetweenTreeItems(treeView, from, 1, event),
          onInlineEnd: () => {
            if (isTreeItemToggle(from.element)) {
              return this.moveFocusInsideTreeItem(treeView, from, 0, event);
            }
            return this.moveFocusInsideTreeItem(treeView, from, 1, event);
          },
          onInlineStart: () => {
            if (isTreeItemToggle(from.element)) {
              return this.moveFocusToTheLastElementInsideTreeItem(treeView, from, event);
            }
            return this.moveFocusInsideTreeItem(treeView, from, -1, event);
          },
          onPageUp: () => this.moveFocusBetweenTreeItems(treeView, from, -10, event),
          onPageDown: () => this.moveFocusBetweenTreeItems(treeView, from, 10, event),
          onHome: () => this.moveFocusBetweenTreeItems(treeView, from, -Infinity, event),
          onEnd: () => this.moveFocusBetweenTreeItems(treeView, from, Infinity, event)
        });
      }
    };
    this._navigationAPI = navigationAPI;
  }
  init(treeView) {
    this._treeView = treeView;
    const controller = new AbortController();
    treeView.addEventListener("focusin", (event) => this.onFocusin(treeView, event), { signal: controller.signal });
    treeView.addEventListener("keydown", (event) => this.onKeydown(treeView, event), { signal: controller.signal });
    this.cleanup = () => {
      controller.abort();
    };
  }
  refresh() {
    setTimeout(() => {
      var _a2, _b;
      if (this.treeView) {
        this.updateFocusedTreeItem(this.treeView, (_a2 = this.focusedTreeItem) === null || _a2 === void 0 ? void 0 : _a2.element);
        (_b = this._navigationAPI.current) === null || _b === void 0 ? void 0 : _b.updateFocusTarget();
      }
    }, 0);
  }
  get treeView() {
    return this._treeView;
  }
  getFocusablesFrom(target) {
    const isElementRegistered = (element) => {
      var _a2;
      return (_a2 = this._navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.isRegistered(element);
    };
    return getAllFocusables2(target).filter((el) => isElementRegistered(el) && !isElementDisabled2(el));
  }
  isRegistered(element) {
    var _a2, _b;
    return !element || ((_b = (_a2 = this._navigationAPI.current) === null || _a2 === void 0 ? void 0 : _a2.isRegistered(element)) !== null && _b !== void 0 ? _b : false);
  }
  updateFocusedTreeItem(treeView, focusedElement) {
    var _a2;
    if (!focusedElement) {
      return;
    }
    const treeItem = getClosestTreeItem(focusedElement);
    if (!treeItem) {
      return;
    }
    const treeItemContent = findTreeItemContentById(treeView, treeItem.id);
    this.focusedTreeItem = {
      treeItemId: treeItem.id,
      treeItemIndex: parseInt((_a2 = treeItem.getAttribute("data-awsui-tree-item-index")) !== null && _a2 !== void 0 ? _a2 : ""),
      element: focusedElement,
      elementIndex: treeItemContent ? this.getFocusablesFrom(treeItemContent).indexOf(focusedElement) : 0
    };
  }
  getNextFocusableTreeItem(treeView, from, by) {
    const targetTreeItemIndex = from.treeItemIndex + by;
    const targetTreeItem = findTreeItemByIndex(treeView, targetTreeItemIndex, by);
    return getToggleButtonOfTreeItem(targetTreeItem);
  }
  moveFocusInsideTreeItem(treeView, from, by, event) {
    const nextFocusableElement = this.getNextFocusableTreeItemContent(treeView, from, by);
    if (nextFocusableElement) {
      event === null || event === void 0 ? void 0 : event.preventDefault();
      nextFocusableElement === null || nextFocusableElement === void 0 ? void 0 : nextFocusableElement.focus();
    }
  }
  moveFocusBetweenTreeItems(treeView, from, by, event) {
    event === null || event === void 0 ? void 0 : event.preventDefault();
    const isToggleFocused = isTreeItemToggle(from.element);
    const nextFocusableTreeItem = this.getNextFocusableTreeItem(treeView, from, isToggleFocused ? by : 0);
    nextFocusableTreeItem === null || nextFocusableTreeItem === void 0 ? void 0 : nextFocusableTreeItem.focus();
  }
  moveFocusToTheLastElementInsideTreeItem(treeView, from, event) {
    const treeItem = findTreeItemContentById(treeView, from.treeItemId);
    if (!treeItem) {
      return null;
    }
    const treeItemFocusables = this.getFocusablesFrom(treeItem);
    const focusableElement = treeItemFocusables[treeItemFocusables.length - 1];
    if (focusableElement) {
      event === null || event === void 0 ? void 0 : event.preventDefault();
      focusableElement === null || focusableElement === void 0 ? void 0 : focusableElement.focus();
    }
  }
  getNextFocusableTreeItemContent(treeView, from, by) {
    const treeItem = findTreeItemContentById(treeView, from.treeItemId);
    if (!treeItem) {
      return null;
    }
    const treeItemFocusables = this.getFocusablesFrom(treeItem);
    const targetElementIndex = isTreeItemToggle(from.element) ? by : from.elementIndex + by;
    const isTargetToggle = from.elementIndex === 0 && by < 0 || targetElementIndex === treeItemFocusables.length && by > 0;
    if (isTargetToggle) {
      return this.getNextFocusableTreeItem(treeView, from, 0);
    }
    const isValidIndex2 = targetElementIndex < treeItemFocusables.length;
    if (isValidIndex2) {
      return treeItemFocusables[targetElementIndex];
    }
    return null;
  }
};

// node_modules/@cloudscape-design/components/tree-view/tree-item/index.js
var import_react558 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tree-view/tree-item/focus-target.js
var import_react557 = __toESM(require_react());
function FocusTarget({ ariaLabel }) {
  const divRef = (0, import_react557.useRef)(null);
  const { tabIndex } = useSingleTabStopNavigation(divRef);
  return import_react557.default.createElement("div", { role: "group", ref: divRef, tabIndex, "aria-label": ariaLabel, className: styles_css_default189["tree-item-focus-target"] }, null);
}

// node_modules/@cloudscape-design/components/tree-view/test-classes/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/tree-view/test-classes/styles.scoped.css";
var styles_css_default190 = {
  "root": "awsui_root_1js4f_l7ca9_5",
  "tree": "awsui_tree_1js4f_l7ca9_6",
  "treeitem": "awsui_treeitem_1js4f_l7ca9_7",
  "expandable": "awsui_expandable_1js4f_l7ca9_8",
  "expanded": "awsui_expanded_1js4f_l7ca9_9"
};

// node_modules/@cloudscape-design/components/tree-view/tree-item/index.js
var InternalTreeItem = ({ item, index, level, i18nStrings, expandedItems = [], renderItemToggleIcon, renderItem, getItemId, getItemChildren, onItemToggle, allVisibleItemsIndices }) => {
  var _a2, _b;
  const i18n = useInternalI18n("tree-view");
  const { icon, content, secondaryContent, actions, announcementLabel } = renderItem(item, index);
  const id = getItemId(item, index);
  const children2 = getItemChildren(item, index) || [];
  const isExpandable = children2.length > 0;
  const isExpanded = isExpandable && expandedItems.includes(id);
  const nextLevel = level + 1;
  let customIcon = void 0;
  if (isExpandable && renderItemToggleIcon) {
    customIcon = renderItemToggleIcon({ expanded: isExpanded });
  }
  const itemLabelToAnnounce = announcementLabel ? announcementLabel : typeof content === "string" ? content : "";
  return import_react558.default.createElement(
    "li",
    { role: "treeitem", id, className: clsx_m_default(styles_css_default189.treeitem, styles_css_default190.treeitem, level > 1 && styles_css_default189.offset, isExpandable && [styles_css_default190.expandable], isExpanded && [styles_css_default190.expanded]), "aria-expanded": isExpandable ? isExpanded : void 0, "aria-level": level, "data-testid": `awsui-treeitem-${id}`, "data-awsui-tree-item-index": allVisibleItemsIndices[id] },
    import_react558.default.createElement(
      "div",
      { className: styles_css_default189["treeitem-content-wrapper"] },
      import_react558.default.createElement(
        "div",
        { className: styles_css_default189["expand-toggle-wrapper"] },
        import_react558.default.createElement("div", { className: styles_css_default189.toggle }, isExpandable ? import_react558.default.createElement(ExpandToggleButton, { isExpanded, customIcon, expandButtonLabel: joinStrings(i18n("i18nStrings.expandButtonLabel", (_a2 = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.expandButtonLabel) === null || _a2 === void 0 ? void 0 : _a2.call(i18nStrings, item)), itemLabelToAnnounce), collapseButtonLabel: joinStrings(i18n("i18nStrings.collapseButtonLabel", (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.collapseButtonLabel) === null || _b === void 0 ? void 0 : _b.call(i18nStrings, item)), itemLabelToAnnounce), onExpandableItemToggle: () => onItemToggle({ id, item, expanded: !isExpanded }), className: styles_css_default189["tree-item-focus-target"], disableFocusHighlight: true }) : import_react558.default.createElement(FocusTarget, { ariaLabel: itemLabelToAnnounce }))
      ),
      import_react558.default.createElement(
        "div",
        { className: styles_css_default189["structured-item-wrapper"] },
        import_react558.default.createElement(InternalStructuredItem, { icon, content, secondaryContent, actions, wrapActions: false, className: styles_css_default189["tree-item-structured-item"] })
      )
    ),
    isExpanded && children2.length && import_react558.default.createElement("ul", { role: "group", className: styles_css_default189["treeitem-group"] }, children2.map((child, index2) => {
      const itemId = getItemId(child, index2);
      return import_react558.default.createElement(InternalTreeItem, { item: child, index: index2, key: itemId, level: nextLevel, expandedItems, i18nStrings, onItemToggle, renderItem, getItemId, getItemChildren, renderItemToggleIcon, allVisibleItemsIndices });
    }))
  );
};
var tree_item_default = InternalTreeItem;

// node_modules/@cloudscape-design/components/tree-view/utils.js
function getAllVisibleItemsIndices({ items, expandedItems, getItemId, getItemChildren }) {
  const allIndicesByItemId = {};
  let currentIndex = 0;
  const traverse = (item, index) => {
    const itemId = getItemId(item, index);
    const children2 = getItemChildren(item, index);
    allIndicesByItemId[itemId] = currentIndex;
    currentIndex += 1;
    const isExpanded = children2 && children2.length > 0 && (expandedItems === null || expandedItems === void 0 ? void 0 : expandedItems.includes(itemId));
    if (isExpanded) {
      children2.forEach((child, index2) => traverse(child, index2));
    }
  };
  items.forEach((item, index) => traverse(item, index));
  return allIndicesByItemId;
}

// node_modules/@cloudscape-design/components/tree-view/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/tree-view/styles.scoped.css";
var styles_css_default191 = {
  "root": "awsui_root_18gnm_js2fw_181",
  "tree": "awsui_tree_18gnm_js2fw_218"
};

// node_modules/@cloudscape-design/components/tree-view/internal.js
var InternalTreeView = (_a2) => {
  var { expandedItems: controlledExpandedItems, items, renderItem, getItemId, getItemChildren, onItemToggle, renderItemToggleIcon, ariaLabel, ariaLabelledby, ariaDescribedby, i18nStrings, __internalRootRef } = _a2, rest = __rest(_a2, ["expandedItems", "items", "renderItem", "getItemId", "getItemChildren", "onItemToggle", "renderItemToggleIcon", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "i18nStrings", "__internalRootRef"]);
  const baseProps = getBaseProps(rest);
  const [expandedItems, setExpandedItems] = useControllable2(controlledExpandedItems, onItemToggle, [], {
    componentName: "TreeView",
    controlledProp: "expandedItems",
    changeHandler: "onItemToggle"
  });
  const treeViewRefObject = (0, import_react559.useRef)(null);
  const allVisibleItemsIndices = getAllVisibleItemsIndices({ items, expandedItems, getItemId, getItemChildren });
  const onToggle = ({ id, item, expanded }) => {
    if (expanded) {
      setExpandedItems([...expandedItems || [], id]);
    } else {
      setExpandedItems((expandedItems || []).filter((expandedId) => expandedId !== id));
    }
    fireNonCancelableEvent(onItemToggle, { id, item, expanded });
  };
  return import_react559.default.createElement(
    "div",
    Object.assign({}, baseProps, { ref: __internalRootRef, className: clsx_m_default(baseProps.className, styles_css_default191.root, styles_css_default190.root) }),
    import_react559.default.createElement(
      KeyboardNavigationProvider,
      { getTreeView: () => treeViewRefObject.current },
      import_react559.default.createElement("ul", { role: "tree", ref: treeViewRefObject, className: clsx_m_default(styles_css_default191.tree, styles_css_default190.tree), "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby }, items.map((item, index) => {
        const itemId = getItemId(item, index);
        return import_react559.default.createElement(tree_item_default, { key: itemId, item, level: 1, index, expandedItems, i18nStrings, onItemToggle: onToggle, renderItem, getItemId, getItemChildren, renderItemToggleIcon, allVisibleItemsIndices });
      }))
    )
  );
};
var internal_default32 = InternalTreeView;

// node_modules/@cloudscape-design/components/tree-view/index.js
var TreeView = (props2) => {
  const baseComponentProps = useBaseComponent("TreeView");
  const baseProps = getBaseProps(props2);
  const externalProps = getExternalProps(props2);
  return import_react560.default.createElement(internal_default32, Object.assign({}, baseProps, baseComponentProps, externalProps, props2));
};
applyDisplayName(TreeView, "TreeView");
var tree_view_default = TreeView;

// node_modules/@cloudscape-design/components/tutorial-panel/index.js
var import_react566 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/index.js
var import_react564 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/congratulation-screen.js
var import_react561 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/styles.scoped.css";
var styles_css_default192 = {
  "tutorial-list": "awsui_tutorial-list_1u70p_1bqgo_181",
  "tutorial-title": "awsui_tutorial-title_1u70p_1bqgo_217",
  "task": "awsui_task_1u70p_1bqgo_224",
  "task-title": "awsui_task-title_1u70p_1bqgo_232",
  "task-title--status": "awsui_task-title--status_1u70p_1bqgo_240",
  "current-task": "awsui_current-task_1u70p_1bqgo_244",
  "successful-task": "awsui_successful-task_1u70p_1bqgo_248",
  "congratulation-message": "awsui_congratulation-message_1u70p_1bqgo_252",
  "congratulation-message--status": "awsui_congratulation-message--status_1u70p_1bqgo_260",
  "plaintext-congratulation-description": "awsui_plaintext-congratulation-description_1u70p_1bqgo_265",
  "divider": "awsui_divider_1u70p_1bqgo_269",
  "step-list": "awsui_step-list_1u70p_1bqgo_273",
  "step": "awsui_step_1u70p_1bqgo_273",
  "expandable-section-wrapper": "awsui_expandable-section-wrapper_1u70p_1bqgo_284",
  "expandable-section-header": "awsui_expandable-section-header_1u70p_1bqgo_288",
  "step-title": "awsui_step-title_1u70p_1bqgo_293",
  "feedback-link": "awsui_feedback-link_1u70p_1bqgo_294",
  "dismiss-button": "awsui_dismiss-button_1u70p_1bqgo_295",
  "completion-screen-title": "awsui_completion-screen-title_1u70p_1bqgo_296",
  "completion-screen-description": "awsui_completion-screen-description_1u70p_1bqgo_297"
};

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/congratulation-screen.js
function CongratulationScreen({ children: children2, onFeedbackClick, i18nStrings }) {
  return import_react561.default.createElement(
    internal_default5,
    { size: "xxl" },
    import_react561.default.createElement(
      internal_default5,
      { size: "xl" },
      import_react561.default.createElement(
        "div",
        { className: styles_css_default192["congratulation-message"] },
        import_react561.default.createElement(StatusIndicator, { __size: "inherit", type: "success", className: styles_css_default192["congratulation-message--status"] }),
        import_react561.default.createElement("div", { className: styles_css_default192["completion-screen-title"] }, i18nStrings.completionScreenTitle)
      ),
      import_react561.default.createElement(
        InternalBox,
        { color: "text-body-secondary" },
        import_react561.default.createElement("div", { className: clsx_m_default({
          [styles_css_default192["completion-screen-description"]]: true,
          [styles_css_default192["plaintext-congratulation-description"]]: typeof children2 === "string"
        }) }, children2)
      )
    ),
    import_react561.default.createElement("div", { className: styles_css_default192.divider }),
    onFeedbackClick && import_react561.default.createElement(internal_default10, { onFollow: onFeedbackClick, className: styles_css_default192["feedback-link"], variant: "primary" }, i18nStrings.feedbackLinkText)
  );
}

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/task-list.js
var import_react563 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/task.js
var import_react562 = __toESM(require_react());
function getStatusIndicatorType(taskIndex, currentTaskIndex) {
  if (taskIndex < currentTaskIndex) {
    return "success";
  }
  if (taskIndex === currentTaskIndex) {
    return "in-progress";
  }
  return "pending";
}
function Task({ task, taskIndex, currentTaskIndex, expanded, onToggleExpand, i18nStrings }) {
  const statusIndicatorType = getStatusIndicatorType(taskIndex, currentTaskIndex);
  const onExpandChange = (0, import_react562.useCallback)(() => {
    onToggleExpand(taskIndex);
  }, [onToggleExpand, taskIndex]);
  return import_react562.default.createElement(
    "li",
    { className: styles_css_default192.task },
    import_react562.default.createElement(
      internal_default5,
      { size: "xxs" },
      import_react562.default.createElement(
        "div",
        { className: styles_css_default192["task-title"] },
        import_react562.default.createElement(StatusIndicator, { __size: "inherit", type: statusIndicatorType, iconAriaLabel: i18nStrings.labelsTaskStatus[statusIndicatorType], className: styles_css_default192["task-title--status"] }),
        import_react562.default.createElement(InternalBox, { variant: "h3", padding: { left: "xxxs", vertical: "n" }, fontSize: "heading-s", color: taskIndex < currentTaskIndex ? "text-status-success" : "text-status-inactive" }, i18nStrings.taskTitle(taskIndex, task.title))
      ),
      import_react562.default.createElement(
        "div",
        { className: styles_css_default192["expandable-section-wrapper"] },
        import_react562.default.createElement(
          InternalExpandableSection,
          { header: import_react562.default.createElement("span", { className: styles_css_default192["expandable-section-header"] }, i18nStrings.labelTotalSteps(task.steps.length)), expanded, onChange: onExpandChange, headerAriaLabel: joinStrings(i18nStrings.taskTitle(taskIndex, task.title), i18nStrings.labelTotalSteps(task.steps.length)) },
          import_react562.default.createElement("ol", { className: styles_css_default192["step-list"] }, task.steps.map((step2, stepIndex) => import_react562.default.createElement(
            "li",
            { key: stepIndex, className: styles_css_default192.step },
            import_react562.default.createElement(InternalBox, { color: "text-body-secondary", fontSize: "body-m", padding: { left: "l" }, className: styles_css_default192["step-title"] }, i18nStrings.stepTitle(stepIndex, step2.title))
          )))
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/task-list.js
function TaskList({ tasks, onExitTutorial, currentGlobalStepIndex, i18nStrings }) {
  const currentTaskIndex = getStepInfo(tasks, currentGlobalStepIndex !== null && currentGlobalStepIndex !== void 0 ? currentGlobalStepIndex : 0).taskIndex;
  const [expandedTasks, setExpandedTasks] = (0, import_react563.useState)({ [currentTaskIndex]: true });
  const onToggleExpand = (0, import_react563.useCallback)((stepIndex) => {
    setExpandedTasks((prevTasks) => Object.assign(Object.assign({}, prevTasks), { [stepIndex]: !prevTasks[stepIndex] }));
  }, []);
  (0, import_react563.useEffect)(() => {
    setExpandedTasks({ [currentTaskIndex]: true });
  }, [currentTaskIndex]);
  return import_react563.default.createElement(
    internal_default5,
    { size: "xxl" },
    import_react563.default.createElement("ol", { className: styles_css_default192["tutorial-list"] }, tasks.map((task, index) => {
      var _a2;
      return import_react563.default.createElement(Task, { task, key: index, taskIndex: index, currentTaskIndex, expanded: (_a2 = expandedTasks[index]) !== null && _a2 !== void 0 ? _a2 : false, onToggleExpand, i18nStrings });
    })),
    import_react563.default.createElement(
      InternalBox,
      { margin: { top: "xxxs" } },
      import_react563.default.createElement(InternalButton, { onClick: onExitTutorial, formAction: "none", className: styles_css_default192["dismiss-button"] }, i18nStrings.dismissTutorialButtonText)
    )
  );
}

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-detail-view/index.js
function TutorialDetailView({ tutorial, onExitTutorial: onExitTutorialHandler, currentStepIndex = 0, onFeedbackClick: onFeedbackClickHandler, i18nStrings }) {
  const isRefresh = useVisualRefresh();
  const onExitTutorial = (0, import_react564.useCallback)(() => {
    fireNonCancelableEvent(onExitTutorialHandler, { tutorial });
  }, [onExitTutorialHandler, tutorial]);
  const onFeedbackClick = (0, import_react564.useMemo)(() => onFeedbackClickHandler && (() => fireNonCancelableEvent(onFeedbackClickHandler, { tutorial })), [onFeedbackClickHandler, tutorial]);
  return import_react564.default.createElement(
    import_react564.default.Fragment,
    null,
    import_react564.default.createElement(
      internal_default5,
      { size: "xl" },
      import_react564.default.createElement(
        "div",
        { className: styles_css_default192["tutorial-title"] },
        import_react564.default.createElement(InternalButton, { variant: "icon", onClick: onExitTutorial, ariaLabel: i18nStrings.labelExitTutorial, formAction: "none", iconName: "arrow-left" }),
        import_react564.default.createElement(InternalBox, { variant: "h2", fontSize: isRefresh ? "heading-m" : "heading-l", padding: { top: "xxs" }, margin: { left: "s" } }, tutorial.title)
      ),
      import_react564.default.createElement(
        "div",
        null,
        import_react564.default.createElement("div", { role: "status" }, tutorial.completed && import_react564.default.createElement(CongratulationScreen, { onFeedbackClick, i18nStrings }, tutorial.completedScreenDescription)),
        !tutorial.completed && import_react564.default.createElement(TaskList, { tasks: tutorial.tasks, onExitTutorial, currentGlobalStepIndex: currentStepIndex, i18nStrings })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-list/index.js
var import_react565 = __toESM(require_react());

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-list/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-list/styles.scoped.css";
var styles_css_default193 = {
  "content-enter": "awsui_content-enter_ig8mp_1s82y_193",
  "awsui-motion-fade-in": "awsui_awsui-motion-fade-in_ig8mp_1s82y_1",
  "tutorial-list": "awsui_tutorial-list_ig8mp_1s82y_215",
  "tutorial-box": "awsui_tutorial-box_ig8mp_1s82y_251",
  "tutorial-box-title": "awsui_tutorial-box-title_ig8mp_1s82y_295",
  "tutorial-description-plaintext": "awsui_tutorial-description-plaintext_ig8mp_1s82y_301",
  "tutorial-description": "awsui_tutorial-description_ig8mp_1s82y_301",
  "expandable-section": "awsui_expandable-section_ig8mp_1s82y_312",
  "expanded": "awsui_expanded_ig8mp_1s82y_316",
  "button-wrapper": "awsui_button-wrapper_ig8mp_1s82y_320",
  "start": "awsui_start_ig8mp_1s82y_325",
  "expand-button": "awsui_expand-button_ig8mp_1s82y_329",
  "collapse-button": "awsui_collapse-button_ig8mp_1s82y_333",
  "learn-more-link": "awsui_learn-more-link_ig8mp_1s82y_337",
  "title": "awsui_title_ig8mp_1s82y_341",
  "prerequisites-alert": "awsui_prerequisites-alert_ig8mp_1s82y_345",
  "completed": "awsui_completed_ig8mp_1s82y_349",
  "download-link": "awsui_download-link_ig8mp_1s82y_353"
};

// node_modules/@cloudscape-design/components/tutorial-panel/components/tutorial-list/index.js
function TutorialList({ i18nStrings, tutorials, loading = false, onStartTutorial, downloadUrl }) {
  checkSafeUrl("TutorialPanel", downloadUrl);
  const isRefresh = useVisualRefresh();
  return import_react565.default.createElement(
    import_react565.default.Fragment,
    null,
    import_react565.default.createElement(
      internal_default5,
      { size: "s" },
      import_react565.default.createElement(
        internal_default5,
        { size: "m" },
        import_react565.default.createElement(InternalBox, { variant: "h2", fontSize: isRefresh ? "heading-m" : "heading-l", padding: { bottom: "n" } }, i18nStrings.tutorialListTitle),
        import_react565.default.createElement(InternalBox, { variant: "p", color: "text-body-secondary", padding: "n" }, i18nStrings.tutorialListDescription)
      ),
      import_react565.default.createElement(
        internal_default5,
        { size: "l" },
        downloadUrl && import_react565.default.createElement(
          "a",
          { href: downloadUrl, target: "_blank", rel: "noopener noreferrer", className: styles_css_default193["download-link"], "aria-label": i18nStrings.labelTutorialListDownloadLink },
          import_react565.default.createElement(internal_default, { name: "download" }),
          import_react565.default.createElement(InternalBox, { padding: { left: "xs" }, color: "inherit", fontWeight: "bold", display: "inline" }, i18nStrings.tutorialListDownloadLinkText)
        ),
        loading ? import_react565.default.createElement(
          StatusIndicator,
          { type: "loading" },
          import_react565.default.createElement(internal_default2, { tagName: "span" }, i18nStrings.loadingText)
        ) : import_react565.default.createElement("ul", { className: styles_css_default193["tutorial-list"], role: "list" }, tutorials.map((tutorial, index) => import_react565.default.createElement(Tutorial, { tutorial, key: index, onStartTutorial, i18nStrings })))
      )
    )
  );
}
function Tutorial({ tutorial, onStartTutorial: onStartTutorialEventHandler, i18nStrings }) {
  var _a2;
  checkSafeUrl("TutorialPanel", tutorial.learnMoreUrl);
  const controlId = useUniqueId();
  const triggerControldId = useUniqueId();
  const headerId = useUniqueId();
  const isRefresh = useVisualRefresh();
  const onStartTutorial = (0, import_react565.useCallback)(() => {
    fireNonCancelableEvent(onStartTutorialEventHandler, { tutorial });
  }, [onStartTutorialEventHandler, tutorial]);
  const [expanded, setExpanded] = (0, import_react565.useState)(!tutorial.prerequisitesNeeded && !tutorial.completed);
  const onClick = (0, import_react565.useCallback)(() => {
    setExpanded((expanded2) => !expanded2);
  }, []);
  return import_react565.default.createElement(
    "li",
    { className: styles_css_default193["tutorial-box"], role: "listitem" },
    import_react565.default.createElement(
      internal_default5,
      { size: "xs" },
      import_react565.default.createElement(
        "div",
        { className: styles_css_default193["tutorial-box-title"] },
        import_react565.default.createElement(InternalBox, { variant: "h3", fontSize: isRefresh ? "heading-s" : "heading-m", id: headerId, margin: { right: "xs" }, padding: "n", className: styles_css_default193.title }, tutorial.title),
        import_react565.default.createElement(
          "div",
          { className: styles_css_default193["button-wrapper"] },
          import_react565.default.createElement(InternalButton, { id: triggerControldId, variant: "icon", ariaExpanded: expanded, nativeButtonAttributes: {
            "aria-controls": controlId,
            "aria-labelledby": headerId
          }, formAction: "none", onClick, className: expanded ? styles_css_default193["collapse-button"] : styles_css_default193["expand-button"], iconName: expanded ? "angle-up" : "angle-down" })
        )
      ),
      tutorial.completed ? import_react565.default.createElement(StatusIndicator, { __size: "inherit", type: "success", className: styles_css_default193.completed, wrapText: true }, i18nStrings.tutorialCompletedText) : null
    ),
    import_react565.default.createElement(
      "div",
      { "aria-live": "polite" },
      import_react565.default.createElement(
        CSSTransition_default,
        { in: expanded, timeout: 30, classNames: { enter: styles_css_default193["content-enter"] } },
        import_react565.default.createElement(
          "div",
          { className: clsx_m_default(styles_css_default193["expandable-section"], expanded && styles_css_default193.expanded), id: controlId },
          import_react565.default.createElement(
            internal_default5,
            { size: "l" },
            import_react565.default.createElement(
              internal_default5,
              { size: "m" },
              tutorial.prerequisitesNeeded && tutorial.prerequisitesAlert && import_react565.default.createElement(internal_default4, { type: "info", className: styles_css_default193["prerequisites-alert"] }, tutorial.prerequisitesAlert),
              import_react565.default.createElement(
                internal_default5,
                { size: "s" },
                import_react565.default.createElement(
                  InternalBox,
                  { color: "text-body-secondary" },
                  import_react565.default.createElement("div", { className: clsx_m_default(styles_css_default193["tutorial-description"], typeof tutorial.description === "string" && styles_css_default193["tutorial-description-plaintext"]) }, tutorial.description)
                ),
                tutorial.learnMoreUrl && import_react565.default.createElement(internal_default10, { href: tutorial.learnMoreUrl, className: styles_css_default193["learn-more-link"], externalIconAriaLabel: i18nStrings.labelLearnMoreExternalIcon, ariaLabel: i18nStrings.labelLearnMoreLink, external: true, variant: "primary" }, i18nStrings.learnMoreLinkText)
              )
            ),
            import_react565.default.createElement(
              InternalBox,
              { margin: { bottom: "xxs" } },
              import_react565.default.createElement(InternalButton, { onClick: onStartTutorial, disabled: (_a2 = tutorial.prerequisitesNeeded) !== null && _a2 !== void 0 ? _a2 : false, formAction: "none", className: styles_css_default193.start }, tutorial.completed ? i18nStrings.restartTutorialButtonText : i18nStrings.startTutorialButtonText)
            )
          )
        )
      )
    )
  );
}

// node_modules/@cloudscape-design/components/tutorial-panel/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/tutorial-panel/styles.scoped.css";
var styles_css_default194 = {
  "tutorial-panel": "awsui_tutorial-panel_1oin5_1h3mq_181"
};

// node_modules/@cloudscape-design/components/tutorial-panel/index.js
function TutorialPanel(_a2) {
  var { i18nStrings, loading, tutorials, onFeedbackClick, downloadUrl } = _a2, restProps = __rest(_a2, ["i18nStrings", "loading", "tutorials", "onFeedbackClick", "downloadUrl"]);
  const { __internalRootRef } = useBaseComponent("TutorialPanel");
  const baseProps = getBaseProps(restProps);
  const context = (0, import_react566.useContext)(hotspotContext);
  return import_react566.default.createElement(
    import_react566.default.Fragment,
    null,
    import_react566.default.createElement("div", Object.assign({}, baseProps, { className: clsx_m_default(baseProps.className, styles_css_default194["tutorial-panel"]), ref: __internalRootRef }), context.currentTutorial ? import_react566.default.createElement(TutorialDetailView, { i18nStrings, tutorial: context.currentTutorial, onExitTutorial: context.onExitTutorial, currentStepIndex: context.currentStepIndex, onFeedbackClick }) : import_react566.default.createElement(TutorialList, { i18nStrings, tutorials, loading, onStartTutorial: context.onStartTutorial, downloadUrl }))
  );
}
applyDisplayName(TutorialPanel, "TutorialPanel");

// node_modules/@cloudscape-design/components/wizard/index.js
var import_react574 = __toESM(require_react());

// node_modules/@cloudscape-design/components/wizard/analytics.js
var import_react567 = __toESM(require_react());
function useFunnelChangeEvent(funnelInteractionId, funnelIdentifier, steps) {
  const listenForStepChanges = (0, import_react567.useRef)(false);
  (0, import_react567.useEffect)(() => {
    const handle = setTimeout(() => listenForStepChanges.current = true, 0);
    return () => {
      clearTimeout(handle);
      listenForStepChanges.current = false;
    };
  }, [funnelInteractionId]);
  const stepTitles = steps.map((step2) => step2.title).join();
  (0, import_react567.useEffect)(() => {
    if (!funnelInteractionId || !listenForStepChanges.current) {
      return;
    }
    FunnelMetrics.funnelChange({
      funnelInteractionId,
      funnelIdentifier,
      stepConfiguration: getStepConfiguration(steps)
    });
  }, [funnelInteractionId, stepTitles]);
}
function getStepConfiguration(steps) {
  return steps.map((step2, index) => {
    var _a2;
    const stepAnalyticsMetadata = getAnalyticsMetadataProps(step2);
    return {
      name: step2.title,
      number: index + 1,
      isOptional: (_a2 = step2.isOptional) !== null && _a2 !== void 0 ? _a2 : false,
      stepIdentifier: stepAnalyticsMetadata === null || stepAnalyticsMetadata === void 0 ? void 0 : stepAnalyticsMetadata.instanceIdentifier
    };
  });
}

// node_modules/@cloudscape-design/components/wizard/internal.js
var import_react573 = __toESM(require_react());

// node_modules/@cloudscape-design/components/wizard/wizard-form.js
var import_react571 = __toESM(require_react());

// node_modules/@cloudscape-design/components/wizard/wizard-actions.js
var import_react569 = __toESM(require_react());

// node_modules/@cloudscape-design/components/wizard/analytics-metadata/utils.js
var getNavigationActionDetail = (targetStepIndex, reason, addAction = false, label) => {
  const metadata = { detail: { targetStepIndex: `${targetStepIndex}`, reason } };
  if (addAction) {
    metadata.action = "navigate";
  }
  if (label) {
    metadata.detail.label = label;
  }
  return getAnalyticsMetadataAttribute(metadata);
};

// node_modules/@cloudscape-design/components/wizard/unmount.js
var import_react568 = __toESM(require_react());
var Unmount = class extends import_react568.default.Component {
  componentWillUnmount() {
    this.props.onUnmount();
  }
  render() {
    return this.props.children;
  }
};

// node_modules/@cloudscape-design/components/wizard/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/wizard/styles.scoped.css";
var styles_css_default195 = {
  "root": "awsui_root_1xupv_qcyqb_145",
  "wizard": "awsui_wizard_1xupv_qcyqb_177",
  "refresh": "awsui_refresh_1xupv_qcyqb_177",
  "small-container": "awsui_small-container_1xupv_qcyqb_184",
  "navigation": "awsui_navigation_1xupv_qcyqb_193",
  "number": "awsui_number_1xupv_qcyqb_226",
  "circle": "awsui_circle_1xupv_qcyqb_242",
  "title": "awsui_title_1xupv_qcyqb_253",
  "active": "awsui_active_1xupv_qcyqb_284",
  "disabled": "awsui_disabled_1xupv_qcyqb_295",
  "enabled": "awsui_enabled_1xupv_qcyqb_305",
  "form": "awsui_form_1xupv_qcyqb_349",
  "form-header": "awsui_form-header_1xupv_qcyqb_354",
  "form-header-content": "awsui_form-header-content_1xupv_qcyqb_369",
  "form-component": "awsui_form-component_1xupv_qcyqb_373",
  "hidden": "awsui_hidden_1xupv_qcyqb_387",
  "collapsed-steps": "awsui_collapsed-steps_1xupv_qcyqb_391",
  "collapsed-steps-hidden": "awsui_collapsed-steps-hidden_1xupv_qcyqb_396",
  "form-header-component-wrapper": "awsui_form-header-component-wrapper_1xupv_qcyqb_400",
  "form-header-component": "awsui_form-header-component_1xupv_qcyqb_400",
  "navigation-link": "awsui_navigation-link_1xupv_qcyqb_416",
  "navigation-link-item": "awsui_navigation-link-item_1xupv_qcyqb_417",
  "navigation-link-label": "awsui_navigation-link-label_1xupv_qcyqb_418",
  "navigation-link-active": "awsui_navigation-link-active_1xupv_qcyqb_422",
  "navigation-link-disabled": "awsui_navigation-link-disabled_1xupv_qcyqb_427",
  "cancel-button": "awsui_cancel-button_1xupv_qcyqb_431",
  "previous-button": "awsui_previous-button_1xupv_qcyqb_432",
  "primary-button": "awsui_primary-button_1xupv_qcyqb_433",
  "skip-to-button": "awsui_skip-to-button_1xupv_qcyqb_434",
  "action-buttons": "awsui_action-buttons_1xupv_qcyqb_438"
};

// node_modules/@cloudscape-design/components/wizard/wizard-actions.js
function WizardActions({ cancelButtonText, onCancelClick, isPrimaryLoading, primaryButtonText, primaryButtonLoadingText, onPrimaryClick, showPrevious, previousButtonText, onPreviousClick, showSkipTo, skipToButtonText, onSkipToClick, isLastStep, activeStepIndex, skipToStepIndex }) {
  const containerRef = (0, import_react569.useRef)(null);
  const primaryButtonRef = (0, import_react569.useRef)(null);
  const onPreviousUnmount = () => {
    var _a2, _b;
    if (((_a2 = containerRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector(`.${styles_css_default195["previous-button"]}`)) === document.activeElement) {
      (_b = primaryButtonRef.current) === null || _b === void 0 ? void 0 : _b.focus();
    }
  };
  const onSkipUnmount = () => {
    var _a2, _b;
    if (((_a2 = containerRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector(`.${styles_css_default195["skip-to-button"]}`)) === document.activeElement) {
      (_b = primaryButtonRef.current) === null || _b === void 0 ? void 0 : _b.focus();
    }
  };
  return import_react569.default.createElement(
    "div",
    { ref: containerRef },
    import_react569.default.createElement(
      internal_default5,
      { direction: "horizontal", size: "xs", className: styles_css_default195["action-buttons"] },
      import_react569.default.createElement(InternalButton, { className: styles_css_default195["cancel-button"], variant: "link", formAction: "none", onClick: onCancelClick, analyticsAction: "cancel" }, cancelButtonText),
      showSkipTo && skipToButtonText && import_react569.default.createElement(
        Unmount,
        { onUnmount: onSkipUnmount },
        import_react569.default.createElement(
          "span",
          Object.assign({}, getNavigationActionDetail(skipToStepIndex, "skip")),
          import_react569.default.createElement(InternalButton, { className: styles_css_default195["skip-to-button"], onClick: onSkipToClick, formAction: "none", disabled: isPrimaryLoading, analyticsAction: "navigate" }, skipToButtonText)
        )
      ),
      showPrevious && import_react569.default.createElement(
        Unmount,
        { onUnmount: onPreviousUnmount },
        import_react569.default.createElement(
          "span",
          Object.assign({}, getNavigationActionDetail(activeStepIndex - 1, "previous")),
          import_react569.default.createElement(InternalButton, { className: styles_css_default195["previous-button"], onClick: onPreviousClick, formAction: "none", disabled: isPrimaryLoading, analyticsAction: "navigate" }, previousButtonText)
        )
      ),
      import_react569.default.createElement(
        "span",
        Object.assign({}, isLastStep ? {} : getNavigationActionDetail(activeStepIndex + 1, "next")),
        import_react569.default.createElement(InternalButton, { ref: primaryButtonRef, className: styles_css_default195["primary-button"], variant: "primary", formAction: "none", onClick: onPrimaryClick, loading: isPrimaryLoading, loadingText: primaryButtonLoadingText, analyticsAction: isLastStep ? "submit" : "navigate" }, primaryButtonText)
      )
    )
  );
}

// node_modules/@cloudscape-design/components/wizard/wizard-form-header.js
var import_react570 = __toESM(require_react());
function WizardFormHeader({ children: children2 }) {
  const isVisualRefresh = useVisualRefresh();
  return import_react570.default.createElement(
    "div",
    { className: clsx_m_default(styles_css_default195["form-header"], isVisualRefresh && styles_css_default195["form-header-refresh"]) },
    import_react570.default.createElement("div", { className: styles_css_default195["form-header-content"] }, children2)
  );
}

// node_modules/@cloudscape-design/components/wizard/wizard-form.js
var STEP_NAME_SELECTOR = `[${DATA_ATTR_FUNNEL_KEY}="${FUNNEL_KEY_STEP_NAME}"]`;
function WizardFormWithAnalytics(props2) {
  const analyticsMetadata = getAnalyticsMetadataProps(props2.steps[props2.activeStepIndex]);
  const __internalRootRef = useComponentMetadata("WizardForm", PACKAGE_VERSION, analyticsMetadata);
  const stepHeaderRef = (0, import_react571.useRef)(null);
  useEffectOnUpdate2(() => {
    var _a2;
    (_a2 = stepHeaderRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  }, [props2.activeStepIndex]);
  return import_react571.default.createElement(
    AnalyticsFunnelStep,
    { stepIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, stepErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext, stepNameSelector: STEP_NAME_SELECTOR, stepNumber: props2.activeStepIndex + 1 },
    import_react571.default.createElement(WizardForm, Object.assign({ stepHeaderRef, __internalRootRef }, props2))
  );
}
function WizardForm({ __internalRootRef, stepHeaderRef, steps, activeStepIndex, showCollapsedSteps, i18nStrings, submitButtonText, isPrimaryLoading, allowSkipTo, secondaryActions, onCancelClick, onPreviousClick, onPrimaryClick, onSkipToClick }) {
  var _a2;
  const rootRef = (0, import_react571.useRef)();
  const ref = useMergeRefs(rootRef, __internalRootRef);
  const { title, info, description, content, errorText, isOptional } = steps[activeStepIndex] || {};
  const isLastStep = activeStepIndex >= steps.length - 1;
  const skipToTargetIndex = findSkipToTargetIndex(steps, activeStepIndex);
  const { funnelInteractionId, funnelIdentifier } = useFunnel();
  const funnelStepInfo = useFunnelStepRef();
  const errorSlotId = useUniqueId("wizard-error-");
  const showSkipTo = allowSkipTo && skipToTargetIndex !== -1;
  const skipToButtonText = skipToTargetIndex !== -1 && i18nStrings.skipToButtonLabel ? i18nStrings.skipToButtonLabel(steps[skipToTargetIndex], skipToTargetIndex + 1) : void 0;
  (0, import_react571.useEffect)(() => {
    var _a3, _b;
    if (funnelInteractionId && errorText) {
      const stepName = getTextFromSelector(funnelStepInfo.current.stepNameSelector);
      FunnelMetrics.funnelStepError({
        funnelInteractionId,
        stepNumber: funnelStepInfo.current.stepNumber,
        stepNameSelector: funnelStepInfo.current.stepNameSelector,
        stepName,
        stepIdentifier: funnelStepInfo.current.stepIdentifier,
        currentDocument: (_a3 = rootRef.current) === null || _a3 === void 0 ? void 0 : _a3.ownerDocument,
        totalSubSteps: funnelStepInfo.current.subStepCount.current,
        funnelIdentifier,
        subStepAllSelector: getSubStepAllSelector(),
        errorContext: funnelStepInfo.current.stepErrorContext,
        subStepConfiguration: (_b = funnelStepInfo.current.subStepConfiguration.current) === null || _b === void 0 ? void 0 : _b.get(funnelStepInfo.current.stepNumber),
        stepErrorSelector: "#" + errorSlotId
      });
    }
  }, [funnelInteractionId, funnelIdentifier, isLastStep, errorText, __internalRootRef, errorSlotId, funnelStepInfo]);
  return import_react571.default.createElement(
    import_react571.default.Fragment,
    null,
    import_react571.default.createElement(
      WizardFormHeader,
      null,
      import_react571.default.createElement("div", { className: clsx_m_default(styles_css_default195["collapsed-steps"], !showCollapsedSteps && styles_css_default195["collapsed-steps-hidden"]) }, (_a2 = i18nStrings.collapsedStepsLabel) === null || _a2 === void 0 ? void 0 : _a2.call(i18nStrings, activeStepIndex + 1, steps.length)),
      import_react571.default.createElement(
        InternalHeader,
        { className: styles_css_default195["form-header-component"], variant: "h1", description, info, __headingTagRef: stepHeaderRef, __headingTagTabIndex: -1 },
        import_react571.default.createElement(
          "span",
          { className: styles_css_default195["form-header-component-wrapper"] },
          import_react571.default.createElement("span", Object.assign({}, { [DATA_ATTR_FUNNEL_KEY]: FUNNEL_KEY_STEP_NAME }), title),
          isOptional && import_react571.default.createElement("i", null, ` - ${i18nStrings.optional}`)
        )
      )
    ),
    import_react571.default.createElement(InternalForm, Object.assign({ __internalRootRef: ref, className: styles_css_default195["form-component"], actions: import_react571.default.createElement(WizardActions, { cancelButtonText: i18nStrings.cancelButton, primaryButtonText: isLastStep ? submitButtonText !== null && submitButtonText !== void 0 ? submitButtonText : i18nStrings.submitButton : i18nStrings.nextButton, primaryButtonLoadingText: isLastStep ? i18nStrings.submitButtonLoadingAnnouncement : i18nStrings.nextButtonLoadingAnnouncement, previousButtonText: i18nStrings.previousButton, onCancelClick, onPreviousClick, onPrimaryClick, onSkipToClick: () => onSkipToClick(skipToTargetIndex), showPrevious: activeStepIndex !== 0, isPrimaryLoading, showSkipTo, skipToButtonText, isLastStep, activeStepIndex, skipToStepIndex: skipToTargetIndex }), secondaryActions, errorText, __errorSlotId: errorSlotId, errorIconAriaLabel: i18nStrings.errorIconAriaLabel }, funnelStepInfo.current.funnelStepProps), content)
  );
}
function findSkipToTargetIndex(steps, activeStepIndex) {
  let nextRequiredStepIndex = activeStepIndex;
  do {
    nextRequiredStepIndex++;
  } while (nextRequiredStepIndex < steps.length - 1 && steps[nextRequiredStepIndex].isOptional);
  return nextRequiredStepIndex > activeStepIndex + 1 ? nextRequiredStepIndex : -1;
}

// node_modules/@cloudscape-design/components/wizard/wizard-navigation.js
var import_react572 = __toESM(require_react());

// node_modules/@cloudscape-design/components/wizard/analytics-metadata/styles.css.js
import "/Users/scttfrdmn/src/cloudworkstation/cmd/prism-gui/frontend/node_modules/@cloudscape-design/components/wizard/analytics-metadata/styles.scoped.css";
var styles_css_default196 = {
  "step-title": "awsui_step-title_zr0a1_2uwax_5"
};

// node_modules/@cloudscape-design/components/wizard/wizard-navigation.js
var Statuses;
(function(Statuses2) {
  Statuses2["Active"] = "active";
  Statuses2["Unvisited"] = "unvisited";
  Statuses2["Visited"] = "visited";
  Statuses2["Next"] = "next";
})(Statuses || (Statuses = {}));
function Navigation2({ activeStepIndex, farthestStepIndex, allowSkipTo, hidden, i18nStrings, isLoadingNextStep, onStepClick, onSkipToClick, steps }) {
  const isVisualRefresh = useVisualRefresh();
  return import_react572.default.createElement(
    "nav",
    { className: clsx_m_default(styles_css_default195.navigation, hidden && styles_css_default195.hidden, isVisualRefresh && styles_css_default195.refresh), "aria-label": i18nStrings.navigationAriaLabel },
    import_react572.default.createElement("ul", { className: clsx_m_default(isVisualRefresh && styles_css_default195.refresh) }, steps.map((step2, index) => isVisualRefresh ? import_react572.default.createElement(NavigationStepVisualRefresh, { i18nStrings, index, key: index, onStepClick, onSkipToClick, status: getStatus(index), step: step2 }) : import_react572.default.createElement(NavigationStepClassic, { i18nStrings, index, key: index, onStepClick, onSkipToClick, status: getStatus(index), step: step2 })))
  );
  function getStatus(index) {
    if (activeStepIndex === index) {
      return Statuses.Active;
    }
    if (isLoadingNextStep) {
      return Statuses.Unvisited;
    }
    if (farthestStepIndex >= index) {
      return Statuses.Visited;
    }
    if (allowSkipTo && canSkip(activeStepIndex + 1, index)) {
      return Statuses.Next;
    }
    return Statuses.Unvisited;
  }
  function canSkip(fromIndex, toIndex) {
    let index = fromIndex;
    do {
      if (!steps[index].isOptional) {
        return false;
      }
      index++;
    } while (index < toIndex);
    return true;
  }
}
function NavigationStepVisualRefresh({ i18nStrings, index, onStepClick, onSkipToClick, status, step: step2 }) {
  function handleStepInteraction() {
    if (status === Statuses.Visited) {
      onStepClick(index);
    }
    if (status === Statuses.Next) {
      onSkipToClick(index);
    }
  }
  const state = {
    active: "active",
    unvisited: "disabled",
    visited: "enabled",
    next: "enabled"
  }[status];
  const linkClassName = clsx_m_default(styles_css_default195["navigation-link"], {
    [styles_css_default195["navigation-link-active"]]: status === Statuses.Active,
    [styles_css_default195["navigation-link-disabled"]]: status === Statuses.Unvisited
  });
  return import_react572.default.createElement(
    "li",
    { className: clsx_m_default(styles_css_default195[`${state}`], styles_css_default195["navigation-link-item"]) },
    import_react572.default.createElement("hr", null),
    import_react572.default.createElement(
      "span",
      { className: clsx_m_default(styles_css_default195.number, styles_css_default195["navigation-link-label"]) },
      i18nStrings.stepNumberLabel && i18nStrings.stepNumberLabel(index + 1),
      step2.isOptional && import_react572.default.createElement("i", null, ` - ${i18nStrings.optional}`)
    ),
    import_react572.default.createElement(
      "a",
      Object.assign({ className: linkClassName, "aria-current": status === Statuses.Active ? "step" : void 0, "aria-disabled": status === Statuses.Unvisited ? "true" : void 0, onClick: (event) => {
        event.preventDefault();
        handleStepInteraction();
      }, onKeyDown: (event) => {
        if (event.key === " " || event.key === "Enter") {
          event.preventDefault();
        }
        if (event.key === "Enter") {
          handleStepInteraction();
        }
      }, onKeyUp: (event) => {
        if (event.key === " ") {
          handleStepInteraction();
        }
      }, role: "button", tabIndex: status === Statuses.Visited || status === Statuses.Next ? 0 : void 0 }, status === Statuses.Unvisited ? {} : getNavigationActionDetail(index, "step", true, `.${styles_css_default196["step-title"]}`)),
      import_react572.default.createElement("div", { className: styles_css_default195.circle }),
      import_react572.default.createElement("span", { className: clsx_m_default(styles_css_default195.title, styles_css_default196["step-title"]) }, step2.title)
    )
  );
}
function NavigationStepClassic({ i18nStrings, index, onStepClick, onSkipToClick, status, step: step2 }) {
  const spanClassName = clsx_m_default(styles_css_default195["navigation-link"], status === Statuses.Active ? styles_css_default195["navigation-link-active"] : styles_css_default195["navigation-link-disabled"]);
  return import_react572.default.createElement(
    "li",
    Object.assign({ className: styles_css_default195["navigation-link-item"] }, status === Statuses.Unvisited ? {} : getNavigationActionDetail(index, "step", true, `.${styles_css_default196["step-title"]}`)),
    import_react572.default.createElement(
      InternalBox,
      { variant: "small", className: styles_css_default195["navigation-link-label"], display: "block", margin: { bottom: "xxs" } },
      i18nStrings.stepNumberLabel && i18nStrings.stepNumberLabel(index + 1),
      step2.isOptional && import_react572.default.createElement("i", null, ` - ${i18nStrings.optional}`)
    ),
    import_react572.default.createElement("div", null, status === Statuses.Visited || status === Statuses.Next ? import_react572.default.createElement(internal_default10, { className: clsx_m_default(styles_css_default195["navigation-link"], styles_css_default196["step-title"]), onFollow: (evt) => {
      evt.preventDefault();
      if (status === Statuses.Visited) {
        onStepClick(index);
      } else {
        onSkipToClick(index);
      }
    }, variant: "primary" }, step2.title) : import_react572.default.createElement("span", { className: clsx_m_default(spanClassName, styles_css_default196["step-title"]), "aria-current": status === Statuses.Active ? "step" : void 0, "aria-disabled": status === Statuses.Active ? void 0 : "true" }, step2.title))
  );
}

// node_modules/@cloudscape-design/components/wizard/internal.js
function InternalWizard(_a2) {
  var _b, _c, _d, _e, _f, _g, _h, _j;
  var { steps, activeStepIndex: controlledActiveStepIndex, submitButtonText, isLoadingNextStep = false, allowSkipTo = false, secondaryActions, onCancel, onSubmit, onNavigate, __internalRootRef, __injectAnalyticsComponentMetadata = false } = _a2, rest = __rest(_a2, ["steps", "activeStepIndex", "submitButtonText", "isLoadingNextStep", "allowSkipTo", "secondaryActions", "onCancel", "onSubmit", "onNavigate", "__internalRootRef", "__injectAnalyticsComponentMetadata"]);
  const baseProps = getBaseProps(rest);
  const [breakpoint, breakpointsRef] = useContainerBreakpoints(["xs"]);
  const ref = useMergeRefs(breakpointsRef, __internalRootRef);
  const smallContainer = breakpoint === "default";
  const [activeStepIndex, setActiveStepIndex] = useControllable2(controlledActiveStepIndex, onNavigate, 0, {
    componentName: "Wizard",
    controlledProp: "activeStepIndex",
    changeHandler: "onNavigate"
  });
  const { funnelIdentifier, funnelInteractionId, funnelSubmit, funnelCancel, funnelProps, funnelNextOrSubmitAttempt } = useFunnel();
  const actualActiveStepIndex = activeStepIndex ? Math.min(activeStepIndex, steps.length - 1) : 0;
  const farthestStepIndex = (0, import_react573.useRef)(actualActiveStepIndex);
  farthestStepIndex.current = Math.max(farthestStepIndex.current, actualActiveStepIndex);
  const isVisualRefresh = useVisualRefresh();
  const isLastStep = actualActiveStepIndex >= steps.length - 1;
  const navigationEvent = (requestedStepIndex, reason) => {
    if (funnelInteractionId) {
      const stepName = getTextFromSelector(STEP_NAME_SELECTOR);
      FunnelMetrics.funnelStepNavigation({
        navigationType: reason,
        funnelInteractionId,
        stepNumber: actualActiveStepIndex + 1,
        stepName,
        stepNameSelector: STEP_NAME_SELECTOR,
        destinationStepNumber: requestedStepIndex + 1,
        subStepAllSelector: getSubStepAllSelector()
      });
    }
    setActiveStepIndex(requestedStepIndex);
    fireNonCancelableEvent(onNavigate, { requestedStepIndex, reason });
  };
  const onStepClick = (stepIndex) => navigationEvent(stepIndex, "step");
  const onSkipToClick = (stepIndex) => navigationEvent(stepIndex, "skip");
  const onCancelClick = () => {
    funnelCancel();
    fireNonCancelableEvent(onCancel);
  };
  const onPreviousClick = () => navigationEvent(actualActiveStepIndex - 1, "previous");
  const onPrimaryClick = () => {
    funnelNextOrSubmitAttempt();
    if (isLastStep) {
      funnelSubmit();
      fireNonCancelableEvent(onSubmit);
    } else {
      navigationEvent(actualActiveStepIndex + 1, "next");
    }
  };
  useFunnelChangeEvent(funnelInteractionId, funnelIdentifier, steps);
  const i18n = useInternalI18n("wizard");
  const skipToButtonLabel = i18n("i18nStrings.skipToButtonLabel", (_b = rest.i18nStrings) === null || _b === void 0 ? void 0 : _b.skipToButtonLabel, (format3) => (task) => format3({ task__title: task.title }));
  const i18nStrings = Object.assign(Object.assign({}, rest.i18nStrings), { skipToButtonLabel, stepNumberLabel: i18n("i18nStrings.stepNumberLabel", (_c = rest.i18nStrings) === null || _c === void 0 ? void 0 : _c.stepNumberLabel, (format3) => (stepNumber) => format3({ stepNumber })), collapsedStepsLabel: i18n("i18nStrings.collapsedStepsLabel", (_d = rest.i18nStrings) === null || _d === void 0 ? void 0 : _d.collapsedStepsLabel, (format3) => (stepNumber, stepsCount) => format3({ stepNumber, stepsCount })), navigationAriaLabel: i18n("i18nStrings.navigationAriaLabel", (_e = rest.i18nStrings) === null || _e === void 0 ? void 0 : _e.navigationAriaLabel), cancelButton: i18n("i18nStrings.cancelButton", (_f = rest.i18nStrings) === null || _f === void 0 ? void 0 : _f.cancelButton), previousButton: i18n("i18nStrings.previousButton", (_g = rest.i18nStrings) === null || _g === void 0 ? void 0 : _g.previousButton), nextButton: i18n("i18nStrings.nextButton", (_h = rest.i18nStrings) === null || _h === void 0 ? void 0 : _h.nextButton), optional: i18n("i18nStrings.optional", (_j = rest.i18nStrings) === null || _j === void 0 ? void 0 : _j.optional) });
  if (activeStepIndex && activeStepIndex >= steps.length) {
    warnOnce("Wizard", `You have set \`activeStepIndex\` to ${activeStepIndex} but you have provided only ${steps.length} steps. Its value is ignored and the component uses ${steps.length - 1} instead.`);
  }
  if (allowSkipTo && !skipToButtonLabel) {
    warnOnce("Wizard", `You have set \`allowSkipTo\` but you have not provided \`i18nStrings.skipToButtonLabel\`. The skip-to button will not be rendered.`);
  }
  const componentAnalyticsMetadata2 = {
    name: "awsui.Wizard",
    label: {
      root: "body",
      selector: `[${DATA_ATTR_FUNNEL_KEY}="${FUNNEL_KEY_FUNNEL_NAME}"]`
    },
    properties: Object.assign({ stepsCount: `${(steps || []).length}`, activeStepIndex: `${activeStepIndex}`, activeStepLabel: `[${DATA_ATTR_FUNNEL_KEY}="${FUNNEL_KEY_STEP_NAME}"]` }, rest.analyticsMetadata || {})
  };
  return import_react573.default.createElement(
    "div",
    Object.assign({}, baseProps, funnelProps, { ref, className: clsx_m_default(styles_css_default195.root, baseProps.className) }, __injectAnalyticsComponentMetadata ? getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata2 }) : {}),
    import_react573.default.createElement(
      "div",
      { className: clsx_m_default(styles_css_default195.wizard, isVisualRefresh && styles_css_default195.refresh, smallContainer && styles_css_default195["small-container"]) },
      import_react573.default.createElement(Navigation2, { activeStepIndex: actualActiveStepIndex, farthestStepIndex: farthestStepIndex.current, allowSkipTo, hidden: smallContainer, i18nStrings, isLoadingNextStep, onStepClick, onSkipToClick, steps }),
      import_react573.default.createElement(
        "div",
        { className: clsx_m_default(styles_css_default195.form, isVisualRefresh && styles_css_default195.refresh, smallContainer && styles_css_default195["small-container"]) },
        import_react573.default.createElement(WizardFormWithAnalytics, { steps, showCollapsedSteps: smallContainer, i18nStrings, submitButtonText, activeStepIndex: actualActiveStepIndex, isPrimaryLoading: isLoadingNextStep, allowSkipTo, secondaryActions, onCancelClick, onPreviousClick, onSkipToClick, onPrimaryClick })
      )
    )
  );
}

// node_modules/@cloudscape-design/components/wizard/index.js
function Wizard(_a2) {
  var { isLoadingNextStep = false, allowSkipTo = false } = _a2, props2 = __rest(_a2, ["isLoadingNextStep", "allowSkipTo"]);
  const analyticsMetadata = getAnalyticsMetadataProps(props2);
  const baseComponentProps = useBaseComponent("Wizard", {
    props: {
      allowSkipTo,
      flowType: analyticsMetadata.flowType
    },
    metadata: {
      hasInstanceIdentifier: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier),
      hasResourceType: Boolean(analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.resourceType)
    }
  }, analyticsMetadata);
  const { wizardCount } = useFunnel();
  const externalProps = getExternalProps(props2);
  (0, import_react574.useEffect)(() => {
    wizardCount.current++;
    return () => void wizardCount.current--;
  }, [wizardCount]);
  return import_react574.default.createElement(
    AnalyticsFunnel,
    { funnelIdentifier: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.instanceIdentifier, funnelFlowType: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.flowType, funnelErrorContext: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.errorContext, funnelResourceType: analyticsMetadata === null || analyticsMetadata === void 0 ? void 0 : analyticsMetadata.resourceType, funnelType: "multi-page", optionalStepNumbers: props2.steps.map((step2, index) => step2.isOptional ? index + 1 : -1).filter((step2) => step2 !== -1), totalFunnelSteps: props2.steps.length, stepConfiguration: getStepConfiguration(props2.steps) },
    import_react574.default.createElement(InternalWizard, Object.assign({ isLoadingNextStep, allowSkipTo }, externalProps, baseComponentProps, { __injectAnalyticsComponentMetadata: true }))
  );
}
applyDisplayName(Wizard, "Wizard");
var wizard_default = Wizard;
export {
  alert_default as Alert,
  AnchorNavigation,
  AnnotationContext,
  app_layout_default as AppLayout,
  app_layout_toolbar_default as AppLayoutToolbar,
  area_chart_default as AreaChart,
  attribute_editor_default as AttributeEditor,
  autosuggest_default as Autosuggest,
  badge_default as Badge,
  bar_chart_default as BarChart,
  box_default as Box,
  BreadcrumbGroup,
  button_default2 as Button,
  button_dropdown_default as ButtonDropdown,
  button_group_default as ButtonGroup,
  Calendar2 as Calendar,
  cards_default as Cards,
  checkbox_default as Checkbox,
  code_editor_default as CodeEditor,
  CollectionPreferences,
  ColumnLayout2 as ColumnLayout,
  container_default as Container,
  ContentLayout,
  CopyToClipboard,
  date_input_default as DateInput,
  date_picker_default as DatePicker,
  date_range_picker_default as DateRangePicker,
  Drawer2 as Drawer,
  ExpandableSection,
  FileDropzone,
  file_input_default as FileInput,
  file_token_group_default as FileTokenGroup,
  file_upload_default as FileUpload,
  flashbar_default as Flashbar,
  Form,
  FormField,
  Grid3 as Grid,
  Header2 as Header,
  HelpPanel,
  Hotspot,
  icon_default as Icon,
  input_default as Input,
  KeyValuePairs,
  line_chart_default as LineChart,
  link_default as Link,
  List,
  live_region_default as LiveRegion,
  mixed_line_bar_chart_default as MixedLineBarChart,
  Modal,
  multiselect_default as Multiselect,
  navigable_group_default as NavigableGroup,
  Pagination,
  pie_chart_default2 as PieChart,
  popover_default as Popover,
  ProgressBar,
  prompt_input_default as PromptInput,
  property_filter_default as PropertyFilter,
  radio_group_default as RadioGroup,
  s3_resource_selector_default as S3ResourceSelector,
  SegmentedControl,
  select_default as Select,
  SideNavigation,
  Slider,
  space_between_default as SpaceBetween,
  spinner_default as Spinner,
  SplitPanel2 as SplitPanel,
  status_indicator_default as StatusIndicator,
  steps_default as Steps,
  table_default as Table,
  Tabs,
  tag_editor_default as TagEditor,
  TextContent,
  text_filter_default as TextFilter,
  textarea_default as Textarea,
  tiles_default as Tiles,
  time_input_default as TimeInput,
  toggle_default as Toggle,
  toggle_button_default as ToggleButton,
  TokenGroup2 as TokenGroup,
  TopNavigation,
  tree_view_default as TreeView,
  TutorialPanel,
  wizard_default as Wizard
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=@cloudscape-design_components.js.map

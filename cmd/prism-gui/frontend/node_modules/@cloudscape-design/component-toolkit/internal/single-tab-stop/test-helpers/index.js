// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { forwardRef, useCallback, useEffect, useRef } from 'react';
import { SingleTabStopNavigationContext } from '../';
import { useUniqueId } from '../../use-unique-id';
const providerRegistry = new Map();
export const TestSingleTabStopNavigationProvider = forwardRef(({ children, navigationActive }) => {
    const focusablesRef = useRef(new Set());
    const focusHandlersRef = useRef(new Map());
    const registerFocusable = useCallback((focusable, changeHandler) => {
        focusablesRef.current.add(focusable);
        focusHandlersRef.current.set(focusable, changeHandler);
        return () => {
            focusablesRef.current.delete(focusable);
            focusHandlersRef.current.delete(focusable);
        };
    }, []);
    const providerId = useUniqueId();
    providerRegistry.set(providerId, {
        setCurrentTarget: (focusTarget, suppressed = []) => {
            focusablesRef.current.forEach(focusable => {
                const handler = focusHandlersRef.current.get(focusable);
                handler(focusTarget === focusable || suppressed.includes(focusable));
            });
        },
    });
    useEffect(() => () => {
        providerRegistry.delete(providerId);
    }, [providerId]);
    return (React.createElement(SingleTabStopNavigationContext.Provider, { value: { navigationActive, registerFocusable, resetFocusTarget: () => { } } }, children));
});
export const setTestSingleTabStopNavigationTarget = (focusTarget, suppressed) => {
    Array.from(providerRegistry).forEach(([, provider]) => provider.setCurrentTarget(focusTarget, suppressed));
};

{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/text-filter/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { InputAutoCorrect } from '../input/interfaces';\nimport { BaseComponentProps } from '../internal/base-component';\nimport { FormFieldControlProps } from '../internal/context/form-field-context';\nimport { NonCancelableEventHandler } from '../internal/events';\n\nexport interface TextFilterProps extends BaseComponentProps, FormFieldControlProps, InputAutoCorrect {\n  /**\n   * The current value of the filtering input.\n   */\n  filteringText: string;\n\n  /**\n   * Placeholder for the filtering input.\n   */\n  filteringPlaceholder?: string;\n\n  /**\n   * Label for the filtering input clear button.\n   */\n  filteringClearAriaLabel?: string;\n\n  /**\n   * Accepts a human-readable, localized string that indicates the number of results. For example, \"1 match\" or \"165 matches.\"\n   * If the total number of results is unknown, also include an indication that there may be more results than\n   * the number listed. For example, \"25+ matches.\"\n   *\n   * The count text is only displayed when `filteringText` isn't empty.\n   * When the `countText` or `filteringText` changes, it will be announced to assistive technologies.\n   */\n  countText?: string;\n\n  /**\n   * Set to `true` while the related collection is loading (e.g. during an async filtering action).\n   * If set to `true`, the live announcement of countText by assistive technologies will be paused until it changes back to `false`.\n   */\n  loading?: boolean;\n\n  /**\n   * Specifies if the filtering input is disabled.\n   * For example, you can use it if you are fetching new items upon filtering change\n   * in order to prevent the user from changing the filtering text.\n   */\n  disabled?: boolean;\n\n  /**\n   * Adds an `aria-label` on the filtering input.\n   */\n  filteringAriaLabel?: string;\n\n  /**\n   * Called when a change in filtering is caused by a user interaction. The event `detail` contains the current `filteringText`.\n   */\n  onChange?: NonCancelableEventHandler<TextFilterProps.ChangeDetail>;\n\n  /**\n   * Called after the user changes the value of the filtering input field and stops typing for a certain\n   * period of time. If you want a delayed handler to invoke a filtering API call, you can use this event in addition to `onChange`.\n   */\n  onDelayedChange?: NonCancelableEventHandler<TextFilterProps.ChangeDetail>;\n}\n\nexport namespace TextFilterProps {\n  export interface ChangeDetail {\n    filteringText: string;\n  }\n\n  export interface Ref {\n    /**\n     * Sets focus on the underlying input control.\n     */\n    focus(): void;\n  }\n}\n"]}
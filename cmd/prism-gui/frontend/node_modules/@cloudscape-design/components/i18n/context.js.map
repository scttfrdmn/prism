{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../src/i18n/context.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AAEtC,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAE1C,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAgB/D,MAAM,CAAC,MAAM,SAAS,GAAG,8BAA8B,CAAC;AAExD,MAAM,mBAAmB,GAA6B;IACpD,MAAM,EAAE,IAAI;IACZ,MAAM,EAAE,CAAI,UAAkB,EAAE,UAAkB,EAAE,IAAY,EAAE,QAAW,EAAE,EAAE,CAAC,QAAQ;CAC3F,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,oBAAoB,CAAC,mBAAmB,CAAC,aAAa,CACvF,KAAK,EACL,qBAAqB,CACtB,CAAC;AAEF,MAAM,UAAU,SAAS;;IACvB,OAAO,CAAC,MAAA,UAAU,CAAC,mBAAmB,CAAC,mCAAI,mBAAmB,CAAC,CAAC,MAAM,CAAC;AACzE,CAAC;AA4BD,MAAM,UAAU,eAAe,CAC7B,aAA4B;;IAE5B,MAAM,EAAE,MAAM,EAAE,GAAG,MAAA,UAAU,CAAC,mBAAmB,CAAC,mCAAI,mBAAmB,CAAC;IAC1E,OAAO,CACL,GAAe,EACf,QAAmB,EACnB,aAAuF,EACvF,EAAE;QACF,OAAO,MAAM,CAAC,SAAS,EAAE,aAAa,EAAE,GAAG,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;IACxE,CAAC,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useContext } from 'react';\n\nimport { awsuiPluginsInternal } from '../internal/plugins/api';\nimport { I18nFormatArgTypes } from './messages-types';\n\nexport type CustomHandler<ReturnValue, FormatFnArgs> = (formatFn: (args: FormatFnArgs) => string) => ReturnValue;\n\nexport interface FormatFunction {\n  (namespace: string, component: string, key: string, provided: string): string;\n  (namespace: string, component: string, key: string, provided: string | undefined): string | undefined;\n  <T, A = unknown>(namespace: string, component: string, key: string, provided: T, handler?: CustomHandler<T, A>): T;\n}\n\ninterface InternalI18nContextProps {\n  locale: string | null;\n  format: FormatFunction;\n}\n\nexport const namespace = 'cloudscape-design-components';\n\nconst defaultContextValue: InternalI18nContextProps = {\n  locale: null,\n  format: <T>(_namespace: string, _component: string, _key: string, provided: T) => provided,\n};\n\nexport const InternalI18nContext = awsuiPluginsInternal.sharedReactContexts.createContext<InternalI18nContextProps>(\n  React,\n  'InternalI18nContext'\n);\n\nexport function useLocale(): string | null {\n  return (useContext(InternalI18nContext) ?? defaultContextValue).locale;\n}\n\n/**\n * Utility to get \"keyof T\" but exclude number or symbol types.\n * TypeScript allows those types because JS implicitly casts them to string.\n */\ntype StringKeyOf<T> = Extract<keyof T, string>;\n\nexport interface ComponentFormatFunction<ComponentName extends StringKeyOf<I18nFormatArgTypes>> {\n  <MessageKey extends StringKeyOf<I18nFormatArgTypes[ComponentName]>>(\n    key: MessageKey,\n    provided: string,\n    handler?: CustomHandler<string, I18nFormatArgTypes[ComponentName][MessageKey]>\n  ): string;\n  <MessageKey extends StringKeyOf<I18nFormatArgTypes[ComponentName]>>(\n    key: MessageKey,\n    provided: string | undefined,\n    handler?: CustomHandler<string, I18nFormatArgTypes[ComponentName][MessageKey]>\n  ): string | undefined;\n  <MessageKey extends StringKeyOf<I18nFormatArgTypes[ComponentName]>, ReturnValue>(\n    key: MessageKey,\n    provided: ReturnValue,\n    handler: I18nFormatArgTypes[ComponentName][MessageKey] extends never\n      ? never\n      : CustomHandler<ReturnValue, I18nFormatArgTypes[ComponentName][MessageKey]>\n  ): ReturnValue;\n}\n\nexport function useInternalI18n<ComponentName extends StringKeyOf<I18nFormatArgTypes>>(\n  componentName: ComponentName\n): ComponentFormatFunction<ComponentName> {\n  const { format } = useContext(InternalI18nContext) ?? defaultContextValue;\n  return <MessageKey extends StringKeyOf<I18nFormatArgTypes[ComponentName]>, ValueType>(\n    key: MessageKey,\n    provided: ValueType,\n    customHandler?: CustomHandler<ValueType, I18nFormatArgTypes[ComponentName][MessageKey]>\n  ) => {\n    return format(namespace, componentName, key, provided, customHandler);\n  };\n}\n"]}
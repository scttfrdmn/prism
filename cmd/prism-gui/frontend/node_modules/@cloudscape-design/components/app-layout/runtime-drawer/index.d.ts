import { ButtonGroupProps } from '../../button-group/interfaces';
import { NonCancelableEventHandler } from '../../internal/events';
import { DrawerConfig as RuntimeDrawerConfig, DrawerStateChangeParams } from '../../internal/plugins/controllers/drawers';
import { DrawerPayload as RuntimeAiDrawerConfig } from '../../internal/plugins/widget/interfaces';
import { AppLayoutProps } from '../interfaces';
export interface RuntimeDrawer extends AppLayoutProps.Drawer {
  onToggle?: NonCancelableEventHandler<DrawerStateChangeParams>;
}
export interface DrawersLayout {
  global: Array<RuntimeDrawer>;
  localBefore: Array<RuntimeDrawer>;
  localAfter: Array<RuntimeDrawer>;
}
export declare const mapRuntimeConfigToDrawer: (runtimeConfig: RuntimeDrawerConfig) => AppLayoutProps.Drawer & {
  orderPriority?: number;
  onToggle?: NonCancelableEventHandler<DrawerStateChangeParams>;
  headerActions?: ReadonlyArray<ButtonGroupProps.Item>;
};
export declare const mapRuntimeConfigToAiDrawer: (runtimeConfig: RuntimeAiDrawerConfig) => AppLayoutProps.Drawer & {
  orderPriority?: number;
  onToggle?: NonCancelableEventHandler<DrawerStateChangeParams>;
  headerActions?: ReadonlyArray<ButtonGroupProps.Item>;
};
export declare function convertRuntimeDrawers(localDrawers: Array<RuntimeDrawerConfig>, globalDrawers: Array<RuntimeDrawerConfig>): DrawersLayout;
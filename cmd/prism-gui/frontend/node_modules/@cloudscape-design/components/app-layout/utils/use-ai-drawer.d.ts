export interface OnChangeParams {
  initiatedByUserAction: boolean;
}
interface UseDrawersProps {
  isEnabled: boolean;
  onAiDrawerFocus: () => void;
  expandedDrawerId: string | null;
  setExpandedDrawerId: (value: string | null) => void;
}
export declare function useAiDrawer({
  isEnabled,
  onAiDrawerFocus,
  expandedDrawerId,
  setExpandedDrawerId
}: UseDrawersProps): {
  aiDrawer: (import("..").AppLayoutProps.Drawer & {
    orderPriority?: number | undefined;
    onToggle?: import("../../internal/events").NonCancelableEventHandler<import("../../internal/plugins/controllers/drawers").DrawerStateChangeParams> | undefined;
    headerActions?: readonly import("../..").ButtonGroupProps.Item[] | undefined;
  }) | null;
  onActiveAiDrawerChange: (newDrawerId: string | null, {
    initiatedByUserAction
  }?: OnChangeParams) => void;
  activeAiDrawer: (import("..").AppLayoutProps.Drawer & {
    orderPriority?: number | undefined;
    onToggle?: import("../../internal/events").NonCancelableEventHandler<import("../../internal/plugins/controllers/drawers").DrawerStateChangeParams> | undefined;
    headerActions?: readonly import("../..").ButtonGroupProps.Item[] | undefined;
  }) | null;
  activeAiDrawerId: string | null;
  activeAiDrawerSize: number;
  minAiDrawerSize: number;
  onActiveAiDrawerResize: (size: number) => void;
};
export {};
import React from 'react';
import { AppLayoutProps, AppLayoutPropsWithDefaults } from '../../interfaces';
import { OnChangeParams } from '../../utils/use-drawers';
import { Focusable, FocusControlMultipleStates } from '../../utils/use-focus-control';
export interface SplitPanelToggleProps {
  displayed: boolean | undefined;
  ariaLabel: string | undefined;
  controlId: string | undefined;
  active: boolean | undefined;
  position: AppLayoutProps.SplitPanelPosition;
}
interface DrawerTriggersProps {
  ariaLabels: AppLayoutPropsWithDefaults['ariaLabels'];
  activeDrawerId: string | null;
  drawersFocusRef: React.Ref<Focusable> | undefined;
  drawers: ReadonlyArray<AppLayoutProps.Drawer>;
  onActiveDrawerChange: ((drawerId: string | null, params: OnChangeParams) => void) | undefined;
  activeGlobalDrawersIds: ReadonlyArray<string>;
  globalDrawersFocusControl?: FocusControlMultipleStates;
  globalDrawers: ReadonlyArray<AppLayoutProps.Drawer>;
  onActiveGlobalDrawersChange?: (newDrawerId: string, params: OnChangeParams) => void;
  expandedDrawerId?: string | null;
  setExpandedDrawerId: (value: string | null) => void;
  splitPanelOpen?: boolean;
  splitPanelPosition?: AppLayoutProps.SplitPanelPreferences['position'];
  splitPanelToggleProps: SplitPanelToggleProps | undefined;
  splitPanelFocusRef: React.Ref<Focusable> | undefined;
  onSplitPanelToggle: (() => void) | undefined;
  disabled: boolean;
}
export declare function DrawerTriggers({
  ariaLabels,
  activeDrawerId,
  drawers,
  drawersFocusRef,
  onActiveDrawerChange,
  splitPanelOpen,
  splitPanelPosition,
  splitPanelFocusRef,
  splitPanelToggleProps,
  onSplitPanelToggle,
  disabled,
  activeGlobalDrawersIds,
  globalDrawers,
  globalDrawersFocusControl,
  onActiveGlobalDrawersChange,
  expandedDrawerId,
  setExpandedDrawerId
}: DrawerTriggersProps): JSX.Element | null;
export {};
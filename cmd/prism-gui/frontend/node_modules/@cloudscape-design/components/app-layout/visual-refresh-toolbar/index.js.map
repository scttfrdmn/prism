{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/app-layout/visual-refresh-toolbar/index.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAC5E,OAAO,EAAE,uBAAuB,EAAE,MAAM,WAAW,CAAC;AAEpD,OAAO,gBAAgB,MAAM,6CAA6C,CAAC;AAE3E,OAAO,EAAE,0BAA0B,EAAE,MAAM,YAAY,CAAC;AAExD,OAAO,EAAE,wBAAwB,EAAE,MAAM,YAAY,CAAC;AACtD,OAAO,EAAE,cAAc,EAAE,MAAM,YAAY,CAAC;AAE5C,OAAO,EAAqB,iBAAiB,EAAE,MAAM,yBAAyB,CAAC;AAG/E,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAGnE,MAAM,sBAAsB,GAUvB,CAAC,EAAE,sBAAsB,EAAE,cAAc,EAAE,YAAY,EAAE,QAAQ,EAAE,EAAE,EAAE;IAC1E,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,QAAQ,CAAwB,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;IACtG,MAAM,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,GAAG,QAAQ,CAA0B,EAAE,CAAC,CAAC;IAC1F,+EAA+E;IAC/E,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;IACrE,MAAM,CAAC,kBAAkB,EAAE,qBAAqB,CAAC,GAAG,QAAQ,CAA0B,SAAS,CAAC,CAAC;IAEjG,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,iBAAiB,CACpD,sBAAsB,EACtB,cAAc,CAAC,cAAc,EAC7B,kBAAkB,aAAlB,kBAAkB,cAAlB,kBAAkB,GAAI,eAAe,CAAC,cAAc,EAAE,cAAc,CAAC,EACrE,YAAY,CAAC,EAAE,CAChB,CAAC;IAEF,eAAe,CAAC,GAAG,EAAE;QACnB,YAAY,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,UAAU,EAAE,EAAE;YACrG,uBAAuB,CAAC,GAAG,EAAE;gBAC3B,iBAAiB,CAAC,cAAc,CAAC,CAAC;gBAClC,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;gBAC1C,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;gBAC1C,eAAe,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;IAEnB,MAAM,UAAU,GAAG,CAAC,CAAC,YAAY,CAAC;IAClC,SAAS,CAAC,GAAG,EAAE;;QACb,YAAY,CAAC,OAAO,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7C,MAAA,MAAA,YAAY,CAAC,OAAO,EAAC,UAAU,mDAAG,UAAU,CAAC,CAAC;IAChD,CAAC,EAAE,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC,CAAC;IAE/B,OAAO,0CAAG,QAAQ,CAAC,UAAU,EAAE,cAAc,EAAE,YAAY,EAAE,kBAAkB,CAAC,CAAI,CAAC;AACvF,CAAC,CAAC;AAEF,MAAM,6BAA6B,GAAG,KAAK,CAAC,UAAU,CACpD,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE;IACpB,MAAM,YAAY,GAAG,MAAM,CAAe,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC;IAC5G,MAAM,EAAE,wBAAwB,EAAE,sBAAsB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,GAAG,KAAY,CAAC;IAEhH,OAAO,CACL;QACE,oBAAC,sBAAsB,IACrB,sBAAsB,EAAE,sBAAsB,EAC9C,cAAc,EAAE,KAAK,EACrB,YAAY,EAAE,YAAY,IAEzB,CAAC,UAAU,EAAE,cAAc,EAAE,YAAY,EAAE,kBAAkB,EAAE,EAAE,CAAC,CACjE,oBAAC,0BAA0B,CAAC,QAAQ,IAAC,KAAK,EAAE,cAAc,CAAC,cAAc;YAEtE,CAAC,gBAAgB,IAAI,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAC1D,oBAAC,gBAAgB,QAAE,KAAK,CAAC,WAAW,CAAoB,CACzD,CAAC,CAAC,CAAC,IAAI;YACR,oBAAC,cAAc,IACb,UAAU,EAAE,UAAU,EACtB,YAAY,EAAE,YAAY,EAC1B,cAAc,EAAE,KAAK,EACrB,cAAc,EAAE,cAAc,EAC9B,uBAAuB,EAAE,kBAAkB,GAC3C,CACkC,CACvC,CACsB;QACzB,oBAAC,wBAAwB,IAAC,UAAU,EAAE,UAAU,EAAE,cAAc,EAAE,KAAK,EAAE,YAAY,EAAE,YAAY,GAAI,CACtG,CACJ,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,eAAe,6BAA6B,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { unstable_batchedUpdates } from 'react-dom';\n\nimport ScreenreaderOnly from '../../internal/components/screenreader-only';\nimport { AppLayoutProps } from '../interfaces';\nimport { AppLayoutVisibilityContext } from './contexts';\nimport { AppLayoutInternalProps, AppLayoutPendingState } from './interfaces';\nimport { AppLayoutWidgetizedState } from './internal';\nimport { SkeletonLayout } from './skeleton';\nimport { SkeletonSlotsAttributes } from './skeleton/interfaces';\nimport { DeduplicationType, useMultiAppLayout } from './skeleton/multi-layout';\nimport { StateManager } from './state';\nimport { SharedProps } from './state/interfaces';\nimport { getPropsToMerge, mergeProps } from './state/props-merger';\nimport { ToolbarProps } from './toolbar';\n\nconst AppLayoutStateProvider: React.FC<{\n  forceDeduplicationType: DeduplicationType;\n  appLayoutProps: AppLayoutInternalProps;\n  stateManager: React.MutableRefObject<StateManager>;\n  children: (\n    registered: boolean,\n    appLayoutState: AppLayoutPendingState,\n    toolbarProps: ToolbarProps | null,\n    skeletonAttributes: SkeletonSlotsAttributes\n  ) => React.ReactNode;\n}> = ({ forceDeduplicationType, appLayoutProps, stateManager, children }) => {\n  const [appLayoutState, setAppLayoutState] = useState<AppLayoutPendingState>({ isIntersecting: true });\n  const [skeletonAttributes, setSkeletonAttributes] = useState<SkeletonSlotsAttributes>({});\n  // use { fn: } object wrapper to avoid confusion with callback form of setState\n  const [deduplicator, setDeduplicator] = useState({ fn: mergeProps });\n  const [deduplicationProps, setDeduplicationProps] = useState<SharedProps | undefined>(undefined);\n\n  const { registered, toolbarProps } = useMultiAppLayout(\n    forceDeduplicationType,\n    appLayoutState.isIntersecting,\n    deduplicationProps ?? getPropsToMerge(appLayoutProps, appLayoutState),\n    deduplicator.fn\n  );\n\n  useLayoutEffect(() => {\n    stateManager.current.setState = (appLayoutState, skeletonAttributes, deduplicationProps, mergeProps) => {\n      unstable_batchedUpdates(() => {\n        setAppLayoutState(appLayoutState);\n        setSkeletonAttributes(skeletonAttributes);\n        setDeduplicationProps(deduplicationProps);\n        setDeduplicator({ fn: mergeProps });\n      });\n    };\n  }, [stateManager]);\n\n  const hasToolbar = !!toolbarProps;\n  useEffect(() => {\n    stateManager.current.hasToolbar = hasToolbar;\n    stateManager.current.setToolbar?.(hasToolbar);\n  }, [stateManager, hasToolbar]);\n\n  return <>{children(registered, appLayoutState, toolbarProps, skeletonAttributes)}</>;\n};\n\nconst AppLayoutVisualRefreshToolbar = React.forwardRef<AppLayoutProps.Ref, AppLayoutInternalProps>(\n  (props, forwardRef) => {\n    const stateManager = useRef<StateManager>({ setState: undefined, hasToolbar: true, setToolbar: undefined });\n    const { __forceDeduplicationType: forceDeduplicationType, __embeddedViewMode: embeddedViewMode } = props as any;\n\n    return (\n      <>\n        <AppLayoutStateProvider\n          forceDeduplicationType={forceDeduplicationType}\n          appLayoutProps={props}\n          stateManager={stateManager}\n        >\n          {(registered, appLayoutState, toolbarProps, skeletonAttributes) => (\n            <AppLayoutVisibilityContext.Provider value={appLayoutState.isIntersecting}>\n              {/* Rendering a hidden copy of breadcrumbs to trigger their deduplication */}\n              {(embeddedViewMode || !toolbarProps) && props.breadcrumbs ? (\n                <ScreenreaderOnly>{props.breadcrumbs}</ScreenreaderOnly>\n              ) : null}\n              <SkeletonLayout\n                registered={registered}\n                toolbarProps={toolbarProps}\n                appLayoutProps={props}\n                appLayoutState={appLayoutState}\n                skeletonSlotsAttributes={skeletonAttributes}\n              />\n            </AppLayoutVisibilityContext.Provider>\n          )}\n        </AppLayoutStateProvider>\n        <AppLayoutWidgetizedState forwardRef={forwardRef} appLayoutProps={props} stateManager={stateManager} />\n      </>\n    );\n  }\n);\n\nexport default AppLayoutVisualRefreshToolbar;\n"]}
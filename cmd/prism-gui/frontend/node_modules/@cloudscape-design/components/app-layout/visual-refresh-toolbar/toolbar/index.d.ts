import React from 'react';
import { AppLayoutProps } from '../../interfaces';
import { OnChangeParams } from '../../utils/use-drawers';
import { Focusable, FocusControlMultipleStates } from '../../utils/use-focus-control';
import { AppLayoutInternals } from '../interfaces';
import { SplitPanelToggleProps } from './drawer-triggers';
export { SplitPanelToggleProps };
export interface ToolbarProps {
  ariaLabels?: AppLayoutProps.Labels;
  hasNavigation?: boolean;
  navigationOpen?: boolean;
  onNavigationToggle?: (open: boolean) => void;
  navigationFocusRef?: React.Ref<Focusable>;
  hasBreadcrumbsPortal?: boolean;
  hasSplitPanel?: boolean;
  splitPanelToggleProps?: SplitPanelToggleProps;
  splitPanelFocusRef?: React.Ref<Focusable>;
  onSplitPanelToggle?: () => void;
  activeDrawerId?: string | null;
  drawers?: ReadonlyArray<AppLayoutProps.Drawer>;
  drawersFocusRef?: React.Ref<Focusable>;
  globalDrawersFocusControl?: FocusControlMultipleStates;
  onActiveDrawerChange?: (drawerId: string | null, params: OnChangeParams) => void;
  globalDrawers?: ReadonlyArray<AppLayoutProps.Drawer> | undefined;
  activeGlobalDrawersIds?: ReadonlyArray<string>;
  onActiveGlobalDrawersChange?: ((drawerId: string, params: OnChangeParams) => void) | undefined;
  expandedDrawerId?: string | null;
  setExpandedDrawerId?: (value: string | null) => void;
  aiDrawer?: AppLayoutProps.Drawer;
  onActiveAiDrawerChange?: (value: string | null) => void;
  activeAiDrawerId?: string | null;
  aiDrawerFocusRef?: React.Ref<Focusable>;
}
export interface AppLayoutToolbarImplementationProps {
  appLayoutInternals: AppLayoutInternals;
  toolbarProps: ToolbarProps;
}
export declare function AppLayoutToolbarImplementation({
  appLayoutInternals,
  toolbarProps
}: AppLayoutToolbarImplementationProps): JSX.Element;
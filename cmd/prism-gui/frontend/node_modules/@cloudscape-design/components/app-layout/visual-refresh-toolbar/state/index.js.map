{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/app-layout/visual-refresh-toolbar/state/index.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,EAAE,EAAgB,eAAe,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAEvE,OAAO,EAAE,yBAAyB,EAAE,MAAM,2BAA2B,CAAC;AAKtE,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC7D,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAE,0BAA0B,EAAE,MAAM,iCAAiC,CAAC;AAqB7E,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,EAAE,cAAc,EAAE,YAAY,EAAE,UAAU,EAAuB,EAAE,EAAE;;IAC1G,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAC,MAAA,YAAY,CAAC,OAAO,CAAC,UAAU,mCAAI,IAAI,CAAC,CAAC;IACtF,MAAM,cAAc,GAAG,YAAY,CAAC,UAAU,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;IAC5E,MAAM,uBAAuB,GAAG,0BAA0B,CAAC,UAAU,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;IAEvG,eAAe,CAAC,GAAG,EAAE;;QACnB,IAAI,CAAC,CAAA,MAAA,YAAY,CAAC,OAAO,0CAAE,QAAQ,CAAA,EAAE;YACnC,OAAO,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;YACrD,OAAO;SACR;QACD,YAAY,CAAC,OAAO,CAAC,QAAQ,CAC3B,cAAc,EACd,uBAAuB,EACvB,eAAe,CAAC,cAAc,EAAE,cAAc,CAAC,EAC/C,UAAU,CACX,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,eAAe,CAAC,GAAG,EAAE;QACnB,YAAY,CAAC,OAAO,CAAC,UAAU,GAAG,aAAa,CAAC;IAClD,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;IAEnB,OAAO,yCAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,8BAA8B,GAAG,yBAAyB,CAAC,sBAAsB,CAAC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { ForwardedRef, useLayoutEffect, useState } from 'react';\n\nimport { createWidgetizedComponent } from '../../../internal/widgets';\nimport { AppLayoutProps } from '../../interfaces';\nimport { AppLayoutInternalProps, AppLayoutState } from '../interfaces';\nimport { SkeletonSlotsAttributes } from '../skeleton/interfaces';\nimport { MergeProps, SharedProps } from './interfaces';\nimport { getPropsToMerge, mergeProps } from './props-merger';\nimport { useAppLayout } from './use-app-layout';\nimport { useSkeletonSlotsAttributes } from './use-skeleton-slots-attributes';\n\nexport interface StateManager {\n  setState:\n    | ((\n        appLayoutState: AppLayoutState,\n        skeletonAttributes: SkeletonSlotsAttributes,\n        deduplicationProps: SharedProps,\n        mergeProps: MergeProps\n      ) => void)\n    | undefined;\n  hasToolbar: boolean;\n  setToolbar: ((hasToolbar: boolean) => void) | undefined;\n}\n\nexport interface AppLayoutStateProps {\n  appLayoutProps: AppLayoutInternalProps;\n  stateManager: React.MutableRefObject<StateManager>;\n  forwardRef: ForwardedRef<AppLayoutProps.Ref>;\n}\n\nexport const AppLayoutStateProvider = ({ appLayoutProps, stateManager, forwardRef }: AppLayoutStateProps) => {\n  const [hasToolbar, setHasToolbar] = useState(stateManager.current.hasToolbar ?? true);\n  const appLayoutState = useAppLayout(hasToolbar, appLayoutProps, forwardRef);\n  const skeletonSlotsAttributes = useSkeletonSlotsAttributes(hasToolbar, appLayoutProps, appLayoutState);\n\n  useLayoutEffect(() => {\n    if (!stateManager.current?.setState) {\n      console.warn('AppLayout state manager is not found');\n      return;\n    }\n    stateManager.current.setState(\n      appLayoutState,\n      skeletonSlotsAttributes,\n      getPropsToMerge(appLayoutProps, appLayoutState),\n      mergeProps\n    );\n  });\n\n  useLayoutEffect(() => {\n    stateManager.current.setToolbar = setHasToolbar;\n  }, [stateManager]);\n\n  return <></>;\n};\n\nexport const createWidgetizedAppLayoutState = createWidgetizedComponent(AppLayoutStateProvider);\n"]}
{"version":3,"file":"global-ai-drawer.js","sourceRoot":"","sources":["../../../../../src/app-layout/visual-refresh-toolbar/drawer/global-ai-drawer.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport { Transition } from 'react-transition-group';\nimport clsx from 'clsx';\n\nimport { InternalItemOrGroup } from '../../../button-group/interfaces';\nimport ButtonGroup from '../../../button-group/internal';\nimport PanelResizeHandle from '../../../internal/components/panel-resize-handle';\nimport customCssProps from '../../../internal/generated/custom-css-properties';\nimport { usePrevious } from '../../../internal/hooks/use-previous';\nimport { getLimitedValue } from '../../../split-panel/utils/size-utils';\nimport { AppLayoutProps } from '../../interfaces';\nimport { OnChangeParams } from '../../utils/use-ai-drawer';\nimport { FocusControlState } from '../../utils/use-focus-control';\nimport { AppLayoutInternals, InternalDrawer } from '../interfaces';\nimport { useResize } from './use-resize';\n\nimport sharedStyles from '../../resize/styles.css.js';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\ninterface AIDrawerProps {\n  activeAiDrawerSize: number;\n  minAiDrawerSize: number;\n  aiDrawer: AppLayoutProps.Drawer | undefined;\n  maxAiDrawerSize: number;\n  ariaLabels: any;\n  aiDrawerFocusControl: FocusControlState | undefined;\n  isMobile: boolean;\n  drawersOpenQueue: ReadonlyArray<string> | undefined;\n  onActiveAiDrawerChange: undefined | ((newDrawerId: string | null, params?: OnChangeParams) => void);\n  onActiveDrawerResize: (detail: { id: string; size: number }) => void;\n  expandedDrawerId?: string | null;\n  setExpandedDrawerId: (value: string | null) => void;\n}\n\ninterface AppLayoutGlobalAiDrawerImplementationProps {\n  appLayoutInternals: AppLayoutInternals;\n  show: boolean;\n  activeAiDrawer: InternalDrawer | null;\n  aiDrawerProps: AIDrawerProps;\n}\n\nexport function AppLayoutGlobalAiDrawerImplementation({\n  appLayoutInternals,\n  show,\n  activeAiDrawer,\n  aiDrawerProps,\n}: AppLayoutGlobalAiDrawerImplementationProps) {\n  const {\n    activeAiDrawerSize,\n    minAiDrawerSize,\n    maxAiDrawerSize,\n    ariaLabels,\n    aiDrawerFocusControl,\n    isMobile,\n    drawersOpenQueue,\n    onActiveAiDrawerChange,\n    onActiveDrawerResize,\n    expandedDrawerId,\n    setExpandedDrawerId,\n  } = aiDrawerProps;\n  const { verticalOffsets, placement } = appLayoutInternals;\n  const drawerRef = useRef<HTMLDivElement>(null);\n  const activeDrawerId = activeAiDrawer?.id;\n\n  const computedAriaLabels = {\n    closeButton: activeAiDrawer ? activeAiDrawer.ariaLabels?.closeButton : ariaLabels?.toolsClose,\n    content: activeAiDrawer ? activeAiDrawer.ariaLabels?.drawerName : ariaLabels?.tools,\n  };\n\n  const resizeProps = useResize({\n    currentWidth: activeAiDrawerSize,\n    minWidth: minAiDrawerSize,\n    maxWidth: maxAiDrawerSize,\n    panelRef: drawerRef,\n    handleRef: aiDrawerFocusControl!.refs.slider,\n    onResize: size => {\n      onActiveDrawerResize({ id: activeDrawerId!, size });\n    },\n    position: 'side-start',\n  });\n  const size = getLimitedValue(minAiDrawerSize, activeAiDrawerSize, maxAiDrawerSize);\n  const isExpanded = activeAiDrawer?.isExpandable && expandedDrawerId === activeDrawerId;\n  const wasExpanded = usePrevious(isExpanded);\n  const animationDisabled =\n    (activeAiDrawer?.defaultActive && !drawersOpenQueue?.includes(activeAiDrawer.id)) || (wasExpanded && !isExpanded);\n  const drawerHeight = `calc(100vh - ${verticalOffsets.toolbar + placement.insetBlockEnd}px)`;\n  // disable resizing when the drawer is at its minimum width in a \"squeezed\" state\n  // (window is between mobile and desktop sizes). At this point, the drawer can't be\n  // resized in either direction, so we disable the resize handler\n  const isResizingDisabled = maxAiDrawerSize < activeAiDrawerSize;\n  let drawerActions: ReadonlyArray<InternalItemOrGroup> = [\n    {\n      type: 'icon-button',\n      id: 'close',\n      iconName: isMobile ? 'close' : 'angle-left',\n      text: computedAriaLabels.closeButton,\n      analyticsAction: 'close',\n    },\n  ];\n  if (!isMobile && activeAiDrawer?.isExpandable) {\n    drawerActions = [\n      {\n        type: 'icon-button',\n        id: 'expand',\n        iconName: isExpanded ? 'shrink' : 'expand',\n        text: activeAiDrawer?.ariaLabels?.expandedModeButton ?? '',\n        analyticsAction: isExpanded ? 'expand' : 'collapse',\n      },\n      ...drawerActions,\n    ];\n  }\n  if (activeAiDrawer?.headerActions) {\n    drawerActions = [\n      {\n        type: 'group',\n        text: 'Actions',\n        items: activeAiDrawer.headerActions!,\n      },\n      ...drawerActions,\n    ];\n  }\n\n  return (\n    <Transition nodeRef={drawerRef} in={show} appear={show} mountOnEnter={true} timeout={250}>\n      {drawerTransitionState => {\n        return (\n          <Transition nodeRef={drawerRef} in={isExpanded} timeout={250}>\n            {expandedTransitionState => {\n              return (\n                <aside\n                  id={activeAiDrawer?.id}\n                  aria-hidden={!activeAiDrawer}\n                  aria-label={computedAriaLabels.content}\n                  className={clsx(\n                    styles.drawer,\n                    styles['ai-drawer'],\n                    !animationDisabled && isExpanded && styles['with-expanded-motion'],\n                    {\n                      [sharedStyles['with-motion-horizontal']]: !animationDisabled,\n                      [testutilStyles['active-drawer']]: show,\n                      [styles['drawer-hidden']]: !show && drawerTransitionState === 'exited',\n                      [testutilStyles['drawer-closed']]: !activeAiDrawer,\n                      [styles['drawer-expanded']]: isExpanded,\n                    }\n                  )}\n                  ref={drawerRef}\n                  onBlur={e => {\n                    if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n                      aiDrawerFocusControl?.loseFocus();\n                    }\n                  }}\n                  style={{\n                    blockSize: drawerHeight,\n                    insetBlockStart: `${placement.insetBlockStart}px`,\n                    ...(!isMobile && {\n                      [customCssProps.drawerMinSize]: `${size}px`,\n                      [customCssProps.drawerSize]: `${['entering', 'entered'].includes(drawerTransitionState) ? size : 0}px`,\n                    }),\n                  }}\n                  data-testid={activeDrawerId && `awsui-app-layout-drawer-${activeDrawerId}`}\n                >\n                  {!isMobile && activeAiDrawer?.resizable && (!isExpanded || expandedTransitionState !== 'entered') && (\n                    <div className={styles['drawer-slider']}>\n                      <PanelResizeHandle\n                        ref={aiDrawerFocusControl?.refs.slider}\n                        position=\"side-start\"\n                        className={clsx(testutilStyles['drawers-slider'], styles['ai-drawer-slider-handle'])}\n                        ariaLabel={activeAiDrawer?.ariaLabels?.resizeHandle}\n                        tooltipText={activeAiDrawer?.ariaLabels?.resizeHandleTooltipText}\n                        ariaValuenow={resizeProps.relativeSize}\n                        onKeyDown={resizeProps.onKeyDown}\n                        onPointerDown={resizeProps.onPointerDown}\n                        onDirectionClick={resizeProps.onDirectionClick}\n                        disabled={isResizingDisabled}\n                      />\n                    </div>\n                  )}\n                  <div className={clsx(styles['drawer-content-container'], sharedStyles['with-motion-horizontal'])}>\n                    <div className={styles['drawer-content']}>\n                      <header className={styles['drawer-content-header']}>\n                        <div className={styles['drawer-content-header-content']}>\n                          {activeAiDrawer?.header ?? <div />}\n                          <div className={styles['drawer-actions']}>\n                            <ButtonGroup\n                              dropdownExpandToViewport={false}\n                              variant=\"icon\"\n                              onItemClick={event => {\n                                switch (event.detail.id) {\n                                  case 'close':\n                                    onActiveAiDrawerChange?.(null, { initiatedByUserAction: true });\n                                    break;\n                                  case 'expand':\n                                    setExpandedDrawerId(isExpanded ? null : activeDrawerId!);\n                                    break;\n                                  default:\n                                    activeAiDrawer?.onHeaderActionClick?.(event);\n                                }\n                              }}\n                              ariaLabel=\"Left panel actions\"\n                              items={drawerActions}\n                            />\n                          </div>\n                        </div>\n                        {!isMobile && isExpanded && activeAiDrawer?.ariaLabels?.exitExpandedModeButton && (\n                          <div className={styles['drawer-back-to-console-slot']}>\n                            <div className={styles['drawer-back-to-console-button-wrapper']}>\n                              <button\n                                className={clsx(\n                                  testutilStyles['active-ai-drawer-leave-expanded-mode-custom-button'],\n                                  styles['drawer-back-to-console-button']\n                                )}\n                                formAction=\"none\"\n                                onClick={() => setExpandedDrawerId(null)}\n                              >\n                                {activeAiDrawer?.ariaLabels?.exitExpandedModeButton}\n                              </button>\n                            </div>\n                          </div>\n                        )}\n                      </header>\n                      <div className={styles['drawer-content-content']}>{activeAiDrawer?.content}</div>\n                    </div>\n                  </div>\n                </aside>\n              );\n            }}\n          </Transition>\n        );\n      }}\n    </Transition>\n  );\n}\n"]}
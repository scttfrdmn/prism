{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/app-layout-toolbar/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AppLayoutProps, BaseLayoutProps } from '../app-layout/interfaces';\n\nexport interface AppLayoutToolbarProps extends BaseLayoutProps {\n  /**\n   * If `true`, the navigation trigger is not displayed at all,\n   * while navigation drawer might be displayed, but opened using a custom trigger.\n   */\n  navigationTriggerHide?: boolean;\n\n  /**\n   * Drawers property. If you set both `drawers` and `tools`, `drawers` will take precedence.\n\n   * Each Drawer is an item in the drawers wrapper with the following properties:\n   * * id (string) - the id of the drawer.\n   * * content (React.ReactNode) - the content in the drawer.\n   * * trigger (DrawerTrigger) - (Optional) the button that opens and closes the active drawer.\n   * If not set, a corresponding trigger button is not displayed, while the drawer might be displayed, but opened using a custom trigger.\n   * * ariaLabels (DrawerAriaLabels) - the labels for the interactive elements of the drawer.\n   * * badge (boolean) - (Optional) Adds a badge to the corner of the icon to indicate a state change. For example: Unread notifications.\n   * * resizable (boolean) - (Optional) if the drawer is resizable or not.\n   * * defaultSize (number) - (Optional) starting size of the drawer. if not set, defaults to 290.\n   * * onResize (({ size: number }) => void) - (Optional) Fired when the active drawer is resized.\n   *\n   * #### DrawerTrigger\n   * - `iconName` (IconProps.Name) - (Optional) Specifies the icon to be displayed.\n   * - `iconSvg` (React.ReactNode) - (Optional) Specifies the SVG of a custom icon. For more information, see [SVG icon guidelines](/components/icon/?tabId=api#slots)\n   *\n   * #### DrawerAriaLabels\n   * - `drawerName` (string) - Label for the drawer itself, and for the drawer trigger button tooltip text.\n   * - `closeButton` (string) - (Optional) Label for the close button.\n   * - `triggerButton` (string) - (Optional) Label for the trigger button.\n   * - `resizeHandle` (string) - (Optional) Label for the resize handle.\n   */\n  drawers?: Array<AppLayoutToolbarProps.Drawer>;\n}\n\nexport namespace AppLayoutToolbarProps {\n  export type AnalyticsMetadata = AppLayoutProps.AnalyticsMetadata;\n  export type ContentType = AppLayoutProps.ContentType;\n  export interface Ref extends AppLayoutProps.Ref {\n    /**\n     * Focuses the navigation. Use this to focus the navigation after opening it programmatically.\n     */\n    focusNavigation(): void;\n  }\n  export type Drawer = AppLayoutProps.Drawer;\n  export type DrawerAriaLabels = AppLayoutProps.DrawerAriaLabels;\n  export type Labels = AppLayoutProps.Labels;\n  export type ChangeDetail = AppLayoutProps.ChangeDetail;\n  export type SplitPanelResizeDetail = AppLayoutProps.SplitPanelResizeDetail;\n  export type SplitPanelPreferences = AppLayoutProps.SplitPanelPreferences;\n  export type SplitPanelPosition = AppLayoutProps.SplitPanelPosition;\n  export type DrawerChangeDetail = AppLayoutProps.DrawerChangeDetail;\n}\n"]}
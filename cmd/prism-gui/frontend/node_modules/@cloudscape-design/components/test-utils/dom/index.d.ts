import { ElementWrapper } from '@cloudscape-design/test-utils-core/dom';
export { ElementWrapper };
import AlertWrapper from './alert';
import AnchorNavigationWrapper from './anchor-navigation';
import AnnotationWrapper from './annotation';
import AppLayoutWrapper from './app-layout';
import AppLayoutToolbarWrapper from './app-layout-toolbar';
import AreaChartWrapper from './area-chart';
import AttributeEditorWrapper from './attribute-editor';
import AutosuggestWrapper from './autosuggest';
import BadgeWrapper from './badge';
import BarChartWrapper from './bar-chart';
import BoxWrapper from './box';
import BreadcrumbGroupWrapper from './breadcrumb-group';
import ButtonWrapper from './button';
import ButtonDropdownWrapper from './button-dropdown';
import ButtonGroupWrapper from './button-group';
import CalendarWrapper from './calendar';
import CardsWrapper from './cards';
import CheckboxWrapper from './checkbox';
import CodeEditorWrapper from './code-editor';
import CollectionPreferencesWrapper from './collection-preferences';
import ColumnLayoutWrapper from './column-layout';
import ContainerWrapper from './container';
import ContentLayoutWrapper from './content-layout';
import CopyToClipboardWrapper from './copy-to-clipboard';
import DateInputWrapper from './date-input';
import DatePickerWrapper from './date-picker';
import DateRangePickerWrapper from './date-range-picker';
import DrawerWrapper from './drawer';
import ExpandableSectionWrapper from './expandable-section';
import FileDropzoneWrapper from './file-dropzone';
import FileInputWrapper from './file-input';
import FileTokenGroupWrapper from './file-token-group';
import FileUploadWrapper from './file-upload';
import FlashbarWrapper from './flashbar';
import FormWrapper from './form';
import FormFieldWrapper from './form-field';
import GridWrapper from './grid';
import HeaderWrapper from './header';
import HelpPanelWrapper from './help-panel';
import HotspotWrapper from './hotspot';
import IconWrapper from './icon';
import InputWrapper from './input';
import KeyValuePairsWrapper from './key-value-pairs';
import LineChartWrapper from './line-chart';
import LinkWrapper from './link';
import ListWrapper from './list';
import LiveRegionWrapper from './live-region';
import MixedLineBarChartWrapper from './mixed-line-bar-chart';
import ModalWrapper from './modal';
import MultiselectWrapper from './multiselect';
import NavigableGroupWrapper from './navigable-group';
import PaginationWrapper from './pagination';
import PieChartWrapper from './pie-chart';
import PopoverWrapper from './popover';
import ProgressBarWrapper from './progress-bar';
import PromptInputWrapper from './prompt-input';
import PropertyFilterWrapper from './property-filter';
import RadioGroupWrapper from './radio-group';
import S3ResourceSelectorWrapper from './s3-resource-selector';
import SegmentedControlWrapper from './segmented-control';
import SelectWrapper from './select';
import SideNavigationWrapper from './side-navigation';
import SliderWrapper from './slider';
import SpaceBetweenWrapper from './space-between';
import SpinnerWrapper from './spinner';
import SplitPanelWrapper from './split-panel';
import StatusIndicatorWrapper from './status-indicator';
import StepsWrapper from './steps';
import TableWrapper from './table';
import TabsWrapper from './tabs';
import TagEditorWrapper from './tag-editor';
import TextContentWrapper from './text-content';
import TextFilterWrapper from './text-filter';
import TextareaWrapper from './textarea';
import TilesWrapper from './tiles';
import TimeInputWrapper from './time-input';
import ToggleWrapper from './toggle';
import ToggleButtonWrapper from './toggle-button';
import TokenGroupWrapper from './token-group';
import TopNavigationWrapper from './top-navigation';
import TreeViewWrapper from './tree-view';
import TutorialPanelWrapper from './tutorial-panel';
import WizardWrapper from './wizard';
export { AlertWrapper };
export { AnchorNavigationWrapper };
export { AnnotationWrapper };
export { AppLayoutWrapper };
export { AppLayoutToolbarWrapper };
export { AreaChartWrapper };
export { AttributeEditorWrapper };
export { AutosuggestWrapper };
export { BadgeWrapper };
export { BarChartWrapper };
export { BoxWrapper };
export { BreadcrumbGroupWrapper };
export { ButtonWrapper };
export { ButtonDropdownWrapper };
export { ButtonGroupWrapper };
export { CalendarWrapper };
export { CardsWrapper };
export { CheckboxWrapper };
export { CodeEditorWrapper };
export { CollectionPreferencesWrapper };
export { ColumnLayoutWrapper };
export { ContainerWrapper };
export { ContentLayoutWrapper };
export { CopyToClipboardWrapper };
export { DateInputWrapper };
export { DatePickerWrapper };
export { DateRangePickerWrapper };
export { DrawerWrapper };
export { ExpandableSectionWrapper };
export { FileDropzoneWrapper };
export { FileInputWrapper };
export { FileTokenGroupWrapper };
export { FileUploadWrapper };
export { FlashbarWrapper };
export { FormWrapper };
export { FormFieldWrapper };
export { GridWrapper };
export { HeaderWrapper };
export { HelpPanelWrapper };
export { HotspotWrapper };
export { IconWrapper };
export { InputWrapper };
export { KeyValuePairsWrapper };
export { LineChartWrapper };
export { LinkWrapper };
export { ListWrapper };
export { LiveRegionWrapper };
export { MixedLineBarChartWrapper };
export { ModalWrapper };
export { MultiselectWrapper };
export { NavigableGroupWrapper };
export { PaginationWrapper };
export { PieChartWrapper };
export { PopoverWrapper };
export { ProgressBarWrapper };
export { PromptInputWrapper };
export { PropertyFilterWrapper };
export { RadioGroupWrapper };
export { S3ResourceSelectorWrapper };
export { SegmentedControlWrapper };
export { SelectWrapper };
export { SideNavigationWrapper };
export { SliderWrapper };
export { SpaceBetweenWrapper };
export { SpinnerWrapper };
export { SplitPanelWrapper };
export { StatusIndicatorWrapper };
export { StepsWrapper };
export { TableWrapper };
export { TabsWrapper };
export { TagEditorWrapper };
export { TextContentWrapper };
export { TextFilterWrapper };
export { TextareaWrapper };
export { TilesWrapper };
export { TimeInputWrapper };
export { ToggleWrapper };
export { ToggleButtonWrapper };
export { TokenGroupWrapper };
export { TopNavigationWrapper };
export { TreeViewWrapper };
export { TutorialPanelWrapper };
export { WizardWrapper };
declare module '@cloudscape-design/test-utils-core/dist/dom' {
  interface ElementWrapper {
    /**
     * Returns the wrapper of the first Alert that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Alert.
     * If no matching Alert is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {AlertWrapper | null}
     */
    findAlert(selector?: string): AlertWrapper | null;
    /**
     * Returns an array of Alert wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Alerts inside the current wrapper.
     * If no matching Alert is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<AlertWrapper>}
     */
    findAllAlerts(selector?: string): Array<AlertWrapper>;
    /**
     * Returns the wrapper of the first AnchorNavigation that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first AnchorNavigation.
     * If no matching AnchorNavigation is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {AnchorNavigationWrapper | null}
     */
    findAnchorNavigation(selector?: string): AnchorNavigationWrapper | null;
    /**
     * Returns an array of AnchorNavigation wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the AnchorNavigations inside the current wrapper.
     * If no matching AnchorNavigation is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<AnchorNavigationWrapper>}
     */
    findAllAnchorNavigations(selector?: string): Array<AnchorNavigationWrapper>;
    /**
     * Returns the wrapper of the first Annotation that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Annotation.
     * If no matching Annotation is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {AnnotationWrapper | null}
     */
    findAnnotation(selector?: string): AnnotationWrapper | null;
    /**
     * Returns an array of Annotation wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Annotations inside the current wrapper.
     * If no matching Annotation is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<AnnotationWrapper>}
     */
    findAllAnnotations(selector?: string): Array<AnnotationWrapper>;
    /**
     * Returns the wrapper of the first AppLayout that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first AppLayout.
     * If no matching AppLayout is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {AppLayoutWrapper | null}
     */
    findAppLayout(selector?: string): AppLayoutWrapper | null;
    /**
     * Returns an array of AppLayout wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the AppLayouts inside the current wrapper.
     * If no matching AppLayout is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<AppLayoutWrapper>}
     */
    findAllAppLayouts(selector?: string): Array<AppLayoutWrapper>;
    /**
     * Returns the wrapper of the first AppLayoutToolbar that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first AppLayoutToolbar.
     * If no matching AppLayoutToolbar is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {AppLayoutToolbarWrapper | null}
     */
    findAppLayoutToolbar(selector?: string): AppLayoutToolbarWrapper | null;
    /**
     * Returns an array of AppLayoutToolbar wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the AppLayoutToolbars inside the current wrapper.
     * If no matching AppLayoutToolbar is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<AppLayoutToolbarWrapper>}
     */
    findAllAppLayoutToolbars(selector?: string): Array<AppLayoutToolbarWrapper>;
    /**
     * Returns the wrapper of the first AreaChart that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first AreaChart.
     * If no matching AreaChart is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {AreaChartWrapper | null}
     */
    findAreaChart(selector?: string): AreaChartWrapper | null;
    /**
     * Returns an array of AreaChart wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the AreaCharts inside the current wrapper.
     * If no matching AreaChart is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<AreaChartWrapper>}
     */
    findAllAreaCharts(selector?: string): Array<AreaChartWrapper>;
    /**
     * Returns the wrapper of the first AttributeEditor that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first AttributeEditor.
     * If no matching AttributeEditor is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {AttributeEditorWrapper | null}
     */
    findAttributeEditor(selector?: string): AttributeEditorWrapper | null;
    /**
     * Returns an array of AttributeEditor wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the AttributeEditors inside the current wrapper.
     * If no matching AttributeEditor is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<AttributeEditorWrapper>}
     */
    findAllAttributeEditors(selector?: string): Array<AttributeEditorWrapper>;
    /**
     * Returns the wrapper of the first Autosuggest that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Autosuggest.
     * If no matching Autosuggest is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {AutosuggestWrapper | null}
     */
    findAutosuggest(selector?: string): AutosuggestWrapper | null;
    /**
     * Returns an array of Autosuggest wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Autosuggests inside the current wrapper.
     * If no matching Autosuggest is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<AutosuggestWrapper>}
     */
    findAllAutosuggests(selector?: string): Array<AutosuggestWrapper>;
    /**
     * Returns the wrapper of the first Badge that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Badge.
     * If no matching Badge is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {BadgeWrapper | null}
     */
    findBadge(selector?: string): BadgeWrapper | null;
    /**
     * Returns an array of Badge wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Badges inside the current wrapper.
     * If no matching Badge is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<BadgeWrapper>}
     */
    findAllBadges(selector?: string): Array<BadgeWrapper>;
    /**
     * Returns the wrapper of the first BarChart that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first BarChart.
     * If no matching BarChart is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {BarChartWrapper | null}
     */
    findBarChart(selector?: string): BarChartWrapper | null;
    /**
     * Returns an array of BarChart wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the BarCharts inside the current wrapper.
     * If no matching BarChart is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<BarChartWrapper>}
     */
    findAllBarCharts(selector?: string): Array<BarChartWrapper>;
    /**
     * Returns the wrapper of the first Box that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Box.
     * If no matching Box is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {BoxWrapper | null}
     */
    findBox(selector?: string): BoxWrapper | null;
    /**
     * Returns an array of Box wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Boxes inside the current wrapper.
     * If no matching Box is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<BoxWrapper>}
     */
    findAllBoxes(selector?: string): Array<BoxWrapper>;
    /**
     * Returns the wrapper of the first BreadcrumbGroup that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first BreadcrumbGroup.
     * If no matching BreadcrumbGroup is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {BreadcrumbGroupWrapper | null}
     */
    findBreadcrumbGroup(selector?: string): BreadcrumbGroupWrapper | null;
    /**
     * Returns an array of BreadcrumbGroup wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the BreadcrumbGroups inside the current wrapper.
     * If no matching BreadcrumbGroup is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<BreadcrumbGroupWrapper>}
     */
    findAllBreadcrumbGroups(selector?: string): Array<BreadcrumbGroupWrapper>;
    /**
     * Returns the wrapper of the first Button that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Button.
     * If no matching Button is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ButtonWrapper | null}
     */
    findButton(selector?: string): ButtonWrapper | null;
    /**
     * Returns an array of Button wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Buttons inside the current wrapper.
     * If no matching Button is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<ButtonWrapper>}
     */
    findAllButtons(selector?: string): Array<ButtonWrapper>;
    /**
     * Returns the wrapper of the first ButtonDropdown that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first ButtonDropdown.
     * If no matching ButtonDropdown is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ButtonDropdownWrapper | null}
     */
    findButtonDropdown(selector?: string): ButtonDropdownWrapper | null;
    /**
     * Returns an array of ButtonDropdown wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the ButtonDropdowns inside the current wrapper.
     * If no matching ButtonDropdown is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<ButtonDropdownWrapper>}
     */
    findAllButtonDropdowns(selector?: string): Array<ButtonDropdownWrapper>;
    /**
     * Returns the wrapper of the first ButtonGroup that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first ButtonGroup.
     * If no matching ButtonGroup is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ButtonGroupWrapper | null}
     */
    findButtonGroup(selector?: string): ButtonGroupWrapper | null;
    /**
     * Returns an array of ButtonGroup wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the ButtonGroups inside the current wrapper.
     * If no matching ButtonGroup is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<ButtonGroupWrapper>}
     */
    findAllButtonGroups(selector?: string): Array<ButtonGroupWrapper>;
    /**
     * Returns the wrapper of the first Calendar that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Calendar.
     * If no matching Calendar is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {CalendarWrapper | null}
     */
    findCalendar(selector?: string): CalendarWrapper | null;
    /**
     * Returns an array of Calendar wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Calendars inside the current wrapper.
     * If no matching Calendar is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<CalendarWrapper>}
     */
    findAllCalendars(selector?: string): Array<CalendarWrapper>;
    /**
     * Returns the wrapper of the first Cards that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Cards.
     * If no matching Cards is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {CardsWrapper | null}
     */
    findCards(selector?: string): CardsWrapper | null;
    /**
     * Returns an array of Cards wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Cards inside the current wrapper.
     * If no matching Cards is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<CardsWrapper>}
     */
    findAllCards(selector?: string): Array<CardsWrapper>;
    /**
     * Returns the wrapper of the first Checkbox that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Checkbox.
     * If no matching Checkbox is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {CheckboxWrapper | null}
     */
    findCheckbox(selector?: string): CheckboxWrapper | null;
    /**
     * Returns an array of Checkbox wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Checkboxes inside the current wrapper.
     * If no matching Checkbox is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<CheckboxWrapper>}
     */
    findAllCheckboxes(selector?: string): Array<CheckboxWrapper>;
    /**
     * Returns the wrapper of the first CodeEditor that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first CodeEditor.
     * If no matching CodeEditor is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {CodeEditorWrapper | null}
     */
    findCodeEditor(selector?: string): CodeEditorWrapper | null;
    /**
     * Returns an array of CodeEditor wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the CodeEditors inside the current wrapper.
     * If no matching CodeEditor is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<CodeEditorWrapper>}
     */
    findAllCodeEditors(selector?: string): Array<CodeEditorWrapper>;
    /**
     * Returns the wrapper of the first CollectionPreferences that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first CollectionPreferences.
     * If no matching CollectionPreferences is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {CollectionPreferencesWrapper | null}
     */
    findCollectionPreferences(selector?: string): CollectionPreferencesWrapper | null;
    /**
     * Returns an array of CollectionPreferences wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the CollectionPreferences inside the current wrapper.
     * If no matching CollectionPreferences is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<CollectionPreferencesWrapper>}
     */
    findAllCollectionPreferences(selector?: string): Array<CollectionPreferencesWrapper>;
    /**
     * Returns the wrapper of the first ColumnLayout that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first ColumnLayout.
     * If no matching ColumnLayout is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ColumnLayoutWrapper | null}
     */
    findColumnLayout(selector?: string): ColumnLayoutWrapper | null;
    /**
     * Returns an array of ColumnLayout wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the ColumnLayouts inside the current wrapper.
     * If no matching ColumnLayout is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<ColumnLayoutWrapper>}
     */
    findAllColumnLayouts(selector?: string): Array<ColumnLayoutWrapper>;
    /**
     * Returns the wrapper of the first Container that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Container.
     * If no matching Container is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ContainerWrapper | null}
     */
    findContainer(selector?: string): ContainerWrapper | null;
    /**
     * Returns an array of Container wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Containers inside the current wrapper.
     * If no matching Container is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<ContainerWrapper>}
     */
    findAllContainers(selector?: string): Array<ContainerWrapper>;
    /**
     * Returns the wrapper of the first ContentLayout that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first ContentLayout.
     * If no matching ContentLayout is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ContentLayoutWrapper | null}
     */
    findContentLayout(selector?: string): ContentLayoutWrapper | null;
    /**
     * Returns an array of ContentLayout wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the ContentLayouts inside the current wrapper.
     * If no matching ContentLayout is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<ContentLayoutWrapper>}
     */
    findAllContentLayouts(selector?: string): Array<ContentLayoutWrapper>;
    /**
     * Returns the wrapper of the first CopyToClipboard that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first CopyToClipboard.
     * If no matching CopyToClipboard is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {CopyToClipboardWrapper | null}
     */
    findCopyToClipboard(selector?: string): CopyToClipboardWrapper | null;
    /**
     * Returns an array of CopyToClipboard wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the CopyToClipboards inside the current wrapper.
     * If no matching CopyToClipboard is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<CopyToClipboardWrapper>}
     */
    findAllCopyToClipboards(selector?: string): Array<CopyToClipboardWrapper>;
    /**
     * Returns the wrapper of the first DateInput that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first DateInput.
     * If no matching DateInput is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {DateInputWrapper | null}
     */
    findDateInput(selector?: string): DateInputWrapper | null;
    /**
     * Returns an array of DateInput wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the DateInputs inside the current wrapper.
     * If no matching DateInput is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<DateInputWrapper>}
     */
    findAllDateInputs(selector?: string): Array<DateInputWrapper>;
    /**
     * Returns the wrapper of the first DatePicker that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first DatePicker.
     * If no matching DatePicker is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {DatePickerWrapper | null}
     */
    findDatePicker(selector?: string): DatePickerWrapper | null;
    /**
     * Returns an array of DatePicker wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the DatePickers inside the current wrapper.
     * If no matching DatePicker is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<DatePickerWrapper>}
     */
    findAllDatePickers(selector?: string): Array<DatePickerWrapper>;
    /**
     * Returns the wrapper of the first DateRangePicker that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first DateRangePicker.
     * If no matching DateRangePicker is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {DateRangePickerWrapper | null}
     */
    findDateRangePicker(selector?: string): DateRangePickerWrapper | null;
    /**
     * Returns an array of DateRangePicker wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the DateRangePickers inside the current wrapper.
     * If no matching DateRangePicker is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<DateRangePickerWrapper>}
     */
    findAllDateRangePickers(selector?: string): Array<DateRangePickerWrapper>;
    /**
     * Returns the wrapper of the first Drawer that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Drawer.
     * If no matching Drawer is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {DrawerWrapper | null}
     */
    findDrawer(selector?: string): DrawerWrapper | null;
    /**
     * Returns an array of Drawer wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Drawers inside the current wrapper.
     * If no matching Drawer is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<DrawerWrapper>}
     */
    findAllDrawers(selector?: string): Array<DrawerWrapper>;
    /**
     * Returns the wrapper of the first ExpandableSection that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first ExpandableSection.
     * If no matching ExpandableSection is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ExpandableSectionWrapper | null}
     */
    findExpandableSection(selector?: string): ExpandableSectionWrapper | null;
    /**
     * Returns an array of ExpandableSection wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the ExpandableSections inside the current wrapper.
     * If no matching ExpandableSection is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<ExpandableSectionWrapper>}
     */
    findAllExpandableSections(selector?: string): Array<ExpandableSectionWrapper>;
    /**
     * Returns the wrapper of the first FileDropzone that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first FileDropzone.
     * If no matching FileDropzone is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {FileDropzoneWrapper | null}
     */
    findFileDropzone(selector?: string): FileDropzoneWrapper | null;
    /**
     * Returns an array of FileDropzone wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the FileDropzones inside the current wrapper.
     * If no matching FileDropzone is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<FileDropzoneWrapper>}
     */
    findAllFileDropzones(selector?: string): Array<FileDropzoneWrapper>;
    /**
     * Returns the wrapper of the first FileInput that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first FileInput.
     * If no matching FileInput is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {FileInputWrapper | null}
     */
    findFileInput(selector?: string): FileInputWrapper | null;
    /**
     * Returns an array of FileInput wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the FileInputs inside the current wrapper.
     * If no matching FileInput is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<FileInputWrapper>}
     */
    findAllFileInputs(selector?: string): Array<FileInputWrapper>;
    /**
     * Returns the wrapper of the first FileTokenGroup that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first FileTokenGroup.
     * If no matching FileTokenGroup is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {FileTokenGroupWrapper | null}
     */
    findFileTokenGroup(selector?: string): FileTokenGroupWrapper | null;
    /**
     * Returns an array of FileTokenGroup wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the FileTokenGroups inside the current wrapper.
     * If no matching FileTokenGroup is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<FileTokenGroupWrapper>}
     */
    findAllFileTokenGroups(selector?: string): Array<FileTokenGroupWrapper>;
    /**
     * Returns the wrapper of the first FileUpload that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first FileUpload.
     * If no matching FileUpload is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {FileUploadWrapper | null}
     */
    findFileUpload(selector?: string): FileUploadWrapper | null;
    /**
     * Returns an array of FileUpload wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the FileUploads inside the current wrapper.
     * If no matching FileUpload is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<FileUploadWrapper>}
     */
    findAllFileUploads(selector?: string): Array<FileUploadWrapper>;
    /**
     * Returns the wrapper of the first Flashbar that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Flashbar.
     * If no matching Flashbar is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {FlashbarWrapper | null}
     */
    findFlashbar(selector?: string): FlashbarWrapper | null;
    /**
     * Returns an array of Flashbar wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Flashbars inside the current wrapper.
     * If no matching Flashbar is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<FlashbarWrapper>}
     */
    findAllFlashbars(selector?: string): Array<FlashbarWrapper>;
    /**
     * Returns the wrapper of the first Form that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Form.
     * If no matching Form is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {FormWrapper | null}
     */
    findForm(selector?: string): FormWrapper | null;
    /**
     * Returns an array of Form wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Forms inside the current wrapper.
     * If no matching Form is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<FormWrapper>}
     */
    findAllForms(selector?: string): Array<FormWrapper>;
    /**
     * Returns the wrapper of the first FormField that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first FormField.
     * If no matching FormField is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {FormFieldWrapper | null}
     */
    findFormField(selector?: string): FormFieldWrapper | null;
    /**
     * Returns an array of FormField wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the FormFields inside the current wrapper.
     * If no matching FormField is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<FormFieldWrapper>}
     */
    findAllFormFields(selector?: string): Array<FormFieldWrapper>;
    /**
     * Returns the wrapper of the first Grid that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Grid.
     * If no matching Grid is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {GridWrapper | null}
     */
    findGrid(selector?: string): GridWrapper | null;
    /**
     * Returns an array of Grid wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Grids inside the current wrapper.
     * If no matching Grid is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<GridWrapper>}
     */
    findAllGrids(selector?: string): Array<GridWrapper>;
    /**
     * Returns the wrapper of the first Header that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Header.
     * If no matching Header is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {HeaderWrapper | null}
     */
    findHeader(selector?: string): HeaderWrapper | null;
    /**
     * Returns an array of Header wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Headers inside the current wrapper.
     * If no matching Header is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<HeaderWrapper>}
     */
    findAllHeaders(selector?: string): Array<HeaderWrapper>;
    /**
     * Returns the wrapper of the first HelpPanel that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first HelpPanel.
     * If no matching HelpPanel is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {HelpPanelWrapper | null}
     */
    findHelpPanel(selector?: string): HelpPanelWrapper | null;
    /**
     * Returns an array of HelpPanel wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the HelpPanels inside the current wrapper.
     * If no matching HelpPanel is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<HelpPanelWrapper>}
     */
    findAllHelpPanels(selector?: string): Array<HelpPanelWrapper>;
    /**
     * Returns the wrapper of the first Hotspot that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Hotspot.
     * If no matching Hotspot is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {HotspotWrapper | null}
     */
    findHotspot(selector?: string): HotspotWrapper | null;
    /**
     * Returns an array of Hotspot wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Hotspots inside the current wrapper.
     * If no matching Hotspot is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<HotspotWrapper>}
     */
    findAllHotspots(selector?: string): Array<HotspotWrapper>;
    /**
     * Returns the wrapper of the first Icon that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Icon.
     * If no matching Icon is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {IconWrapper | null}
     */
    findIcon(selector?: string): IconWrapper | null;
    /**
     * Returns an array of Icon wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Icons inside the current wrapper.
     * If no matching Icon is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<IconWrapper>}
     */
    findAllIcons(selector?: string): Array<IconWrapper>;
    /**
     * Returns the wrapper of the first Input that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Input.
     * If no matching Input is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {InputWrapper | null}
     */
    findInput(selector?: string): InputWrapper | null;
    /**
     * Returns an array of Input wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Inputs inside the current wrapper.
     * If no matching Input is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<InputWrapper>}
     */
    findAllInputs(selector?: string): Array<InputWrapper>;
    /**
     * Returns the wrapper of the first KeyValuePairs that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first KeyValuePairs.
     * If no matching KeyValuePairs is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {KeyValuePairsWrapper | null}
     */
    findKeyValuePairs(selector?: string): KeyValuePairsWrapper | null;
    /**
     * Returns an array of KeyValuePairs wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the KeyValuePairs inside the current wrapper.
     * If no matching KeyValuePairs is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<KeyValuePairsWrapper>}
     */
    findAllKeyValuePairs(selector?: string): Array<KeyValuePairsWrapper>;
    /**
     * Returns the wrapper of the first LineChart that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first LineChart.
     * If no matching LineChart is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {LineChartWrapper | null}
     */
    findLineChart(selector?: string): LineChartWrapper | null;
    /**
     * Returns an array of LineChart wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the LineCharts inside the current wrapper.
     * If no matching LineChart is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<LineChartWrapper>}
     */
    findAllLineCharts(selector?: string): Array<LineChartWrapper>;
    /**
     * Returns the wrapper of the first Link that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Link.
     * If no matching Link is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {LinkWrapper | null}
     */
    findLink(selector?: string): LinkWrapper | null;
    /**
     * Returns an array of Link wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Links inside the current wrapper.
     * If no matching Link is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<LinkWrapper>}
     */
    findAllLinks(selector?: string): Array<LinkWrapper>;
    /**
     * Returns the wrapper of the first List that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first List.
     * If no matching List is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ListWrapper | null}
     */
    findList(selector?: string): ListWrapper | null;
    /**
     * Returns an array of List wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Lists inside the current wrapper.
     * If no matching List is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<ListWrapper>}
     */
    findAllLists(selector?: string): Array<ListWrapper>;
    /**
     * Returns the wrapper of the first LiveRegion that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first LiveRegion.
     * If no matching LiveRegion is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {LiveRegionWrapper | null}
     */
    findLiveRegion(selector?: string): LiveRegionWrapper | null;
    /**
     * Returns an array of LiveRegion wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the LiveRegions inside the current wrapper.
     * If no matching LiveRegion is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<LiveRegionWrapper>}
     */
    findAllLiveRegions(selector?: string): Array<LiveRegionWrapper>;
    /**
     * Returns the wrapper of the first MixedLineBarChart that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first MixedLineBarChart.
     * If no matching MixedLineBarChart is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MixedLineBarChartWrapper | null}
     */
    findMixedLineBarChart(selector?: string): MixedLineBarChartWrapper | null;
    /**
     * Returns an array of MixedLineBarChart wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the MixedLineBarCharts inside the current wrapper.
     * If no matching MixedLineBarChart is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<MixedLineBarChartWrapper>}
     */
    findAllMixedLineBarCharts(selector?: string): Array<MixedLineBarChartWrapper>;
    /**
     * Returns the wrapper of the first Modal that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Modal.
     * If no matching Modal is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ModalWrapper | null}
     */
    findModal(selector?: string): ModalWrapper | null;
    /**
     * Returns an array of Modal wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Modals inside the current wrapper.
     * If no matching Modal is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<ModalWrapper>}
     */
    findAllModals(selector?: string): Array<ModalWrapper>;
    /**
     * Returns the wrapper of the first Multiselect that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Multiselect.
     * If no matching Multiselect is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiselectWrapper | null}
     */
    findMultiselect(selector?: string): MultiselectWrapper | null;
    /**
     * Returns an array of Multiselect wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Multiselects inside the current wrapper.
     * If no matching Multiselect is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<MultiselectWrapper>}
     */
    findAllMultiselects(selector?: string): Array<MultiselectWrapper>;
    /**
     * Returns the wrapper of the first NavigableGroup that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first NavigableGroup.
     * If no matching NavigableGroup is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {NavigableGroupWrapper | null}
     */
    findNavigableGroup(selector?: string): NavigableGroupWrapper | null;
    /**
     * Returns an array of NavigableGroup wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the NavigableGroups inside the current wrapper.
     * If no matching NavigableGroup is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<NavigableGroupWrapper>}
     */
    findAllNavigableGroups(selector?: string): Array<NavigableGroupWrapper>;
    /**
     * Returns the wrapper of the first Pagination that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Pagination.
     * If no matching Pagination is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {PaginationWrapper | null}
     */
    findPagination(selector?: string): PaginationWrapper | null;
    /**
     * Returns an array of Pagination wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Paginations inside the current wrapper.
     * If no matching Pagination is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<PaginationWrapper>}
     */
    findAllPaginations(selector?: string): Array<PaginationWrapper>;
    /**
     * Returns the wrapper of the first PieChart that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first PieChart.
     * If no matching PieChart is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {PieChartWrapper | null}
     */
    findPieChart(selector?: string): PieChartWrapper | null;
    /**
     * Returns an array of PieChart wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the PieCharts inside the current wrapper.
     * If no matching PieChart is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<PieChartWrapper>}
     */
    findAllPieCharts(selector?: string): Array<PieChartWrapper>;
    /**
     * Returns the wrapper of the first Popover that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Popover.
     * If no matching Popover is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {PopoverWrapper | null}
     */
    findPopover(selector?: string): PopoverWrapper | null;
    /**
     * Returns an array of Popover wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Popovers inside the current wrapper.
     * If no matching Popover is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<PopoverWrapper>}
     */
    findAllPopovers(selector?: string): Array<PopoverWrapper>;
    /**
     * Returns the wrapper of the first ProgressBar that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first ProgressBar.
     * If no matching ProgressBar is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ProgressBarWrapper | null}
     */
    findProgressBar(selector?: string): ProgressBarWrapper | null;
    /**
     * Returns an array of ProgressBar wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the ProgressBars inside the current wrapper.
     * If no matching ProgressBar is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<ProgressBarWrapper>}
     */
    findAllProgressBars(selector?: string): Array<ProgressBarWrapper>;
    /**
     * Returns the wrapper of the first PromptInput that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first PromptInput.
     * If no matching PromptInput is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {PromptInputWrapper | null}
     */
    findPromptInput(selector?: string): PromptInputWrapper | null;
    /**
     * Returns an array of PromptInput wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the PromptInputs inside the current wrapper.
     * If no matching PromptInput is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<PromptInputWrapper>}
     */
    findAllPromptInputs(selector?: string): Array<PromptInputWrapper>;
    /**
     * Returns the wrapper of the first PropertyFilter that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first PropertyFilter.
     * If no matching PropertyFilter is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {PropertyFilterWrapper | null}
     */
    findPropertyFilter(selector?: string): PropertyFilterWrapper | null;
    /**
     * Returns an array of PropertyFilter wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the PropertyFilters inside the current wrapper.
     * If no matching PropertyFilter is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<PropertyFilterWrapper>}
     */
    findAllPropertyFilters(selector?: string): Array<PropertyFilterWrapper>;
    /**
     * Returns the wrapper of the first RadioGroup that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first RadioGroup.
     * If no matching RadioGroup is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {RadioGroupWrapper | null}
     */
    findRadioGroup(selector?: string): RadioGroupWrapper | null;
    /**
     * Returns an array of RadioGroup wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the RadioGroups inside the current wrapper.
     * If no matching RadioGroup is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<RadioGroupWrapper>}
     */
    findAllRadioGroups(selector?: string): Array<RadioGroupWrapper>;
    /**
     * Returns the wrapper of the first S3ResourceSelector that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first S3ResourceSelector.
     * If no matching S3ResourceSelector is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {S3ResourceSelectorWrapper | null}
     */
    findS3ResourceSelector(selector?: string): S3ResourceSelectorWrapper | null;
    /**
     * Returns an array of S3ResourceSelector wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the S3ResourceSelectors inside the current wrapper.
     * If no matching S3ResourceSelector is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<S3ResourceSelectorWrapper>}
     */
    findAllS3ResourceSelectors(selector?: string): Array<S3ResourceSelectorWrapper>;
    /**
     * Returns the wrapper of the first SegmentedControl that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first SegmentedControl.
     * If no matching SegmentedControl is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {SegmentedControlWrapper | null}
     */
    findSegmentedControl(selector?: string): SegmentedControlWrapper | null;
    /**
     * Returns an array of SegmentedControl wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the SegmentedControls inside the current wrapper.
     * If no matching SegmentedControl is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<SegmentedControlWrapper>}
     */
    findAllSegmentedControls(selector?: string): Array<SegmentedControlWrapper>;
    /**
     * Returns the wrapper of the first Select that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Select.
     * If no matching Select is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {SelectWrapper | null}
     */
    findSelect(selector?: string): SelectWrapper | null;
    /**
     * Returns an array of Select wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Selects inside the current wrapper.
     * If no matching Select is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<SelectWrapper>}
     */
    findAllSelects(selector?: string): Array<SelectWrapper>;
    /**
     * Returns the wrapper of the first SideNavigation that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first SideNavigation.
     * If no matching SideNavigation is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {SideNavigationWrapper | null}
     */
    findSideNavigation(selector?: string): SideNavigationWrapper | null;
    /**
     * Returns an array of SideNavigation wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the SideNavigations inside the current wrapper.
     * If no matching SideNavigation is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<SideNavigationWrapper>}
     */
    findAllSideNavigations(selector?: string): Array<SideNavigationWrapper>;
    /**
     * Returns the wrapper of the first Slider that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Slider.
     * If no matching Slider is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {SliderWrapper | null}
     */
    findSlider(selector?: string): SliderWrapper | null;
    /**
     * Returns an array of Slider wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Sliders inside the current wrapper.
     * If no matching Slider is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<SliderWrapper>}
     */
    findAllSliders(selector?: string): Array<SliderWrapper>;
    /**
     * Returns the wrapper of the first SpaceBetween that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first SpaceBetween.
     * If no matching SpaceBetween is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {SpaceBetweenWrapper | null}
     */
    findSpaceBetween(selector?: string): SpaceBetweenWrapper | null;
    /**
     * Returns an array of SpaceBetween wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the SpaceBetweens inside the current wrapper.
     * If no matching SpaceBetween is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<SpaceBetweenWrapper>}
     */
    findAllSpaceBetweens(selector?: string): Array<SpaceBetweenWrapper>;
    /**
     * Returns the wrapper of the first Spinner that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Spinner.
     * If no matching Spinner is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {SpinnerWrapper | null}
     */
    findSpinner(selector?: string): SpinnerWrapper | null;
    /**
     * Returns an array of Spinner wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Spinners inside the current wrapper.
     * If no matching Spinner is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<SpinnerWrapper>}
     */
    findAllSpinners(selector?: string): Array<SpinnerWrapper>;
    /**
     * Returns the wrapper of the first SplitPanel that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first SplitPanel.
     * If no matching SplitPanel is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {SplitPanelWrapper | null}
     */
    findSplitPanel(selector?: string): SplitPanelWrapper | null;
    /**
     * Returns an array of SplitPanel wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the SplitPanels inside the current wrapper.
     * If no matching SplitPanel is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<SplitPanelWrapper>}
     */
    findAllSplitPanels(selector?: string): Array<SplitPanelWrapper>;
    /**
     * Returns the wrapper of the first StatusIndicator that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first StatusIndicator.
     * If no matching StatusIndicator is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {StatusIndicatorWrapper | null}
     */
    findStatusIndicator(selector?: string): StatusIndicatorWrapper | null;
    /**
     * Returns an array of StatusIndicator wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the StatusIndicators inside the current wrapper.
     * If no matching StatusIndicator is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<StatusIndicatorWrapper>}
     */
    findAllStatusIndicators(selector?: string): Array<StatusIndicatorWrapper>;
    /**
     * Returns the wrapper of the first Steps that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Steps.
     * If no matching Steps is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {StepsWrapper | null}
     */
    findSteps(selector?: string): StepsWrapper | null;
    /**
     * Returns an array of Steps wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Steps inside the current wrapper.
     * If no matching Steps is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<StepsWrapper>}
     */
    findAllSteps(selector?: string): Array<StepsWrapper>;
    /**
     * Returns the wrapper of the first Table that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Table.
     * If no matching Table is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TableWrapper | null}
     */
    findTable(selector?: string): TableWrapper | null;
    /**
     * Returns an array of Table wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Tables inside the current wrapper.
     * If no matching Table is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<TableWrapper>}
     */
    findAllTables(selector?: string): Array<TableWrapper>;
    /**
     * Returns the wrapper of the first Tabs that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Tabs.
     * If no matching Tabs is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TabsWrapper | null}
     */
    findTabs(selector?: string): TabsWrapper | null;
    /**
     * Returns an array of Tabs wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Tabs inside the current wrapper.
     * If no matching Tabs is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<TabsWrapper>}
     */
    findAllTabs(selector?: string): Array<TabsWrapper>;
    /**
     * Returns the wrapper of the first TagEditor that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first TagEditor.
     * If no matching TagEditor is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TagEditorWrapper | null}
     */
    findTagEditor(selector?: string): TagEditorWrapper | null;
    /**
     * Returns an array of TagEditor wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the TagEditors inside the current wrapper.
     * If no matching TagEditor is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<TagEditorWrapper>}
     */
    findAllTagEditors(selector?: string): Array<TagEditorWrapper>;
    /**
     * Returns the wrapper of the first TextContent that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first TextContent.
     * If no matching TextContent is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TextContentWrapper | null}
     */
    findTextContent(selector?: string): TextContentWrapper | null;
    /**
     * Returns an array of TextContent wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the TextContents inside the current wrapper.
     * If no matching TextContent is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<TextContentWrapper>}
     */
    findAllTextContents(selector?: string): Array<TextContentWrapper>;
    /**
     * Returns the wrapper of the first TextFilter that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first TextFilter.
     * If no matching TextFilter is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TextFilterWrapper | null}
     */
    findTextFilter(selector?: string): TextFilterWrapper | null;
    /**
     * Returns an array of TextFilter wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the TextFilters inside the current wrapper.
     * If no matching TextFilter is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<TextFilterWrapper>}
     */
    findAllTextFilters(selector?: string): Array<TextFilterWrapper>;
    /**
     * Returns the wrapper of the first Textarea that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Textarea.
     * If no matching Textarea is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TextareaWrapper | null}
     */
    findTextarea(selector?: string): TextareaWrapper | null;
    /**
     * Returns an array of Textarea wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Textareas inside the current wrapper.
     * If no matching Textarea is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<TextareaWrapper>}
     */
    findAllTextareas(selector?: string): Array<TextareaWrapper>;
    /**
     * Returns the wrapper of the first Tiles that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Tiles.
     * If no matching Tiles is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TilesWrapper | null}
     */
    findTiles(selector?: string): TilesWrapper | null;
    /**
     * Returns an array of Tiles wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Tiles inside the current wrapper.
     * If no matching Tiles is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<TilesWrapper>}
     */
    findAllTiles(selector?: string): Array<TilesWrapper>;
    /**
     * Returns the wrapper of the first TimeInput that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first TimeInput.
     * If no matching TimeInput is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TimeInputWrapper | null}
     */
    findTimeInput(selector?: string): TimeInputWrapper | null;
    /**
     * Returns an array of TimeInput wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the TimeInputs inside the current wrapper.
     * If no matching TimeInput is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<TimeInputWrapper>}
     */
    findAllTimeInputs(selector?: string): Array<TimeInputWrapper>;
    /**
     * Returns the wrapper of the first Toggle that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Toggle.
     * If no matching Toggle is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ToggleWrapper | null}
     */
    findToggle(selector?: string): ToggleWrapper | null;
    /**
     * Returns an array of Toggle wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Toggles inside the current wrapper.
     * If no matching Toggle is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<ToggleWrapper>}
     */
    findAllToggles(selector?: string): Array<ToggleWrapper>;
    /**
     * Returns the wrapper of the first ToggleButton that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first ToggleButton.
     * If no matching ToggleButton is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ToggleButtonWrapper | null}
     */
    findToggleButton(selector?: string): ToggleButtonWrapper | null;
    /**
     * Returns an array of ToggleButton wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the ToggleButtons inside the current wrapper.
     * If no matching ToggleButton is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<ToggleButtonWrapper>}
     */
    findAllToggleButtons(selector?: string): Array<ToggleButtonWrapper>;
    /**
     * Returns the wrapper of the first TokenGroup that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first TokenGroup.
     * If no matching TokenGroup is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TokenGroupWrapper | null}
     */
    findTokenGroup(selector?: string): TokenGroupWrapper | null;
    /**
     * Returns an array of TokenGroup wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the TokenGroups inside the current wrapper.
     * If no matching TokenGroup is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<TokenGroupWrapper>}
     */
    findAllTokenGroups(selector?: string): Array<TokenGroupWrapper>;
    /**
     * Returns the wrapper of the first TopNavigation that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first TopNavigation.
     * If no matching TopNavigation is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TopNavigationWrapper | null}
     */
    findTopNavigation(selector?: string): TopNavigationWrapper | null;
    /**
     * Returns an array of TopNavigation wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the TopNavigations inside the current wrapper.
     * If no matching TopNavigation is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<TopNavigationWrapper>}
     */
    findAllTopNavigations(selector?: string): Array<TopNavigationWrapper>;
    /**
     * Returns the wrapper of the first TreeView that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first TreeView.
     * If no matching TreeView is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TreeViewWrapper | null}
     */
    findTreeView(selector?: string): TreeViewWrapper | null;
    /**
     * Returns an array of TreeView wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the TreeViews inside the current wrapper.
     * If no matching TreeView is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<TreeViewWrapper>}
     */
    findAllTreeViews(selector?: string): Array<TreeViewWrapper>;
    /**
     * Returns the wrapper of the first TutorialPanel that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first TutorialPanel.
     * If no matching TutorialPanel is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TutorialPanelWrapper | null}
     */
    findTutorialPanel(selector?: string): TutorialPanelWrapper | null;
    /**
     * Returns an array of TutorialPanel wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the TutorialPanels inside the current wrapper.
     * If no matching TutorialPanel is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<TutorialPanelWrapper>}
     */
    findAllTutorialPanels(selector?: string): Array<TutorialPanelWrapper>;
    /**
     * Returns the wrapper of the first Wizard that matches the specified CSS selector.
     * If no CSS selector is specified, returns the wrapper of the first Wizard.
     * If no matching Wizard is found, returns `null`.
     *
     * @param {string} [selector] CSS Selector
     * @returns {WizardWrapper | null}
     */
    findWizard(selector?: string): WizardWrapper | null;
    /**
     * Returns an array of Wizard wrapper that matches the specified CSS selector.
     * If no CSS selector is specified, returns all of the Wizards inside the current wrapper.
     * If no matching Wizard is found, returns an empty array.
     *
     * @param {string} [selector] CSS Selector
     * @returns {Array<WizardWrapper>}
     */
    findAllWizards(selector?: string): Array<WizardWrapper>;
  }
}
export default function wrapper(root?: Element): ElementWrapper<Element>;
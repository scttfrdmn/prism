import { ElementWrapper } from '@cloudscape-design/test-utils-core/selectors';
export { ElementWrapper };
import AlertWrapper from './alert';
import AnchorNavigationWrapper from './anchor-navigation';
import AnnotationWrapper from './annotation';
import AppLayoutWrapper from './app-layout';
import AppLayoutToolbarWrapper from './app-layout-toolbar';
import AreaChartWrapper from './area-chart';
import AttributeEditorWrapper from './attribute-editor';
import AutosuggestWrapper from './autosuggest';
import BadgeWrapper from './badge';
import BarChartWrapper from './bar-chart';
import BoxWrapper from './box';
import BreadcrumbGroupWrapper from './breadcrumb-group';
import ButtonWrapper from './button';
import ButtonDropdownWrapper from './button-dropdown';
import ButtonGroupWrapper from './button-group';
import CalendarWrapper from './calendar';
import CardsWrapper from './cards';
import CheckboxWrapper from './checkbox';
import CodeEditorWrapper from './code-editor';
import CollectionPreferencesWrapper from './collection-preferences';
import ColumnLayoutWrapper from './column-layout';
import ContainerWrapper from './container';
import ContentLayoutWrapper from './content-layout';
import CopyToClipboardWrapper from './copy-to-clipboard';
import DateInputWrapper from './date-input';
import DatePickerWrapper from './date-picker';
import DateRangePickerWrapper from './date-range-picker';
import DrawerWrapper from './drawer';
import ExpandableSectionWrapper from './expandable-section';
import FileDropzoneWrapper from './file-dropzone';
import FileInputWrapper from './file-input';
import FileTokenGroupWrapper from './file-token-group';
import FileUploadWrapper from './file-upload';
import FlashbarWrapper from './flashbar';
import FormWrapper from './form';
import FormFieldWrapper from './form-field';
import GridWrapper from './grid';
import HeaderWrapper from './header';
import HelpPanelWrapper from './help-panel';
import HotspotWrapper from './hotspot';
import IconWrapper from './icon';
import InputWrapper from './input';
import KeyValuePairsWrapper from './key-value-pairs';
import LineChartWrapper from './line-chart';
import LinkWrapper from './link';
import ListWrapper from './list';
import LiveRegionWrapper from './live-region';
import MixedLineBarChartWrapper from './mixed-line-bar-chart';
import ModalWrapper from './modal';
import MultiselectWrapper from './multiselect';
import NavigableGroupWrapper from './navigable-group';
import PaginationWrapper from './pagination';
import PieChartWrapper from './pie-chart';
import PopoverWrapper from './popover';
import ProgressBarWrapper from './progress-bar';
import PromptInputWrapper from './prompt-input';
import PropertyFilterWrapper from './property-filter';
import RadioGroupWrapper from './radio-group';
import S3ResourceSelectorWrapper from './s3-resource-selector';
import SegmentedControlWrapper from './segmented-control';
import SelectWrapper from './select';
import SideNavigationWrapper from './side-navigation';
import SliderWrapper from './slider';
import SpaceBetweenWrapper from './space-between';
import SpinnerWrapper from './spinner';
import SplitPanelWrapper from './split-panel';
import StatusIndicatorWrapper from './status-indicator';
import StepsWrapper from './steps';
import TableWrapper from './table';
import TabsWrapper from './tabs';
import TagEditorWrapper from './tag-editor';
import TextContentWrapper from './text-content';
import TextFilterWrapper from './text-filter';
import TextareaWrapper from './textarea';
import TilesWrapper from './tiles';
import TimeInputWrapper from './time-input';
import ToggleWrapper from './toggle';
import ToggleButtonWrapper from './toggle-button';
import TokenGroupWrapper from './token-group';
import TopNavigationWrapper from './top-navigation';
import TreeViewWrapper from './tree-view';
import TutorialPanelWrapper from './tutorial-panel';
import WizardWrapper from './wizard';
export { AlertWrapper };
export { AnchorNavigationWrapper };
export { AnnotationWrapper };
export { AppLayoutWrapper };
export { AppLayoutToolbarWrapper };
export { AreaChartWrapper };
export { AttributeEditorWrapper };
export { AutosuggestWrapper };
export { BadgeWrapper };
export { BarChartWrapper };
export { BoxWrapper };
export { BreadcrumbGroupWrapper };
export { ButtonWrapper };
export { ButtonDropdownWrapper };
export { ButtonGroupWrapper };
export { CalendarWrapper };
export { CardsWrapper };
export { CheckboxWrapper };
export { CodeEditorWrapper };
export { CollectionPreferencesWrapper };
export { ColumnLayoutWrapper };
export { ContainerWrapper };
export { ContentLayoutWrapper };
export { CopyToClipboardWrapper };
export { DateInputWrapper };
export { DatePickerWrapper };
export { DateRangePickerWrapper };
export { DrawerWrapper };
export { ExpandableSectionWrapper };
export { FileDropzoneWrapper };
export { FileInputWrapper };
export { FileTokenGroupWrapper };
export { FileUploadWrapper };
export { FlashbarWrapper };
export { FormWrapper };
export { FormFieldWrapper };
export { GridWrapper };
export { HeaderWrapper };
export { HelpPanelWrapper };
export { HotspotWrapper };
export { IconWrapper };
export { InputWrapper };
export { KeyValuePairsWrapper };
export { LineChartWrapper };
export { LinkWrapper };
export { ListWrapper };
export { LiveRegionWrapper };
export { MixedLineBarChartWrapper };
export { ModalWrapper };
export { MultiselectWrapper };
export { NavigableGroupWrapper };
export { PaginationWrapper };
export { PieChartWrapper };
export { PopoverWrapper };
export { ProgressBarWrapper };
export { PromptInputWrapper };
export { PropertyFilterWrapper };
export { RadioGroupWrapper };
export { S3ResourceSelectorWrapper };
export { SegmentedControlWrapper };
export { SelectWrapper };
export { SideNavigationWrapper };
export { SliderWrapper };
export { SpaceBetweenWrapper };
export { SpinnerWrapper };
export { SplitPanelWrapper };
export { StatusIndicatorWrapper };
export { StepsWrapper };
export { TableWrapper };
export { TabsWrapper };
export { TagEditorWrapper };
export { TextContentWrapper };
export { TextFilterWrapper };
export { TextareaWrapper };
export { TilesWrapper };
export { TimeInputWrapper };
export { ToggleWrapper };
export { ToggleButtonWrapper };
export { TokenGroupWrapper };
export { TopNavigationWrapper };
export { TreeViewWrapper };
export { TutorialPanelWrapper };
export { WizardWrapper };
declare module '@cloudscape-design/test-utils-core/dist/selectors' {
  interface ElementWrapper {
    /**
     * Returns a wrapper that matches the Alerts with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Alerts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {AlertWrapper}
     */
    findAlert(selector?: string): AlertWrapper;
    /**
     * Returns a multi-element wrapper that matches Alerts with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Alerts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<AlertWrapper>}
     */
    findAllAlerts(selector?: string): MultiElementWrapper<AlertWrapper>;
    /**
     * Returns a wrapper that matches the AnchorNavigations with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches AnchorNavigations.
     *
     * @param {string} [selector] CSS Selector
     * @returns {AnchorNavigationWrapper}
     */
    findAnchorNavigation(selector?: string): AnchorNavigationWrapper;
    /**
     * Returns a multi-element wrapper that matches AnchorNavigations with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches AnchorNavigations.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<AnchorNavigationWrapper>}
     */
    findAllAnchorNavigations(selector?: string): MultiElementWrapper<AnchorNavigationWrapper>;
    /**
     * Returns a wrapper that matches the Annotations with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Annotations.
     *
     * @param {string} [selector] CSS Selector
     * @returns {AnnotationWrapper}
     */
    findAnnotation(selector?: string): AnnotationWrapper;
    /**
     * Returns a multi-element wrapper that matches Annotations with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Annotations.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<AnnotationWrapper>}
     */
    findAllAnnotations(selector?: string): MultiElementWrapper<AnnotationWrapper>;
    /**
     * Returns a wrapper that matches the AppLayouts with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches AppLayouts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {AppLayoutWrapper}
     */
    findAppLayout(selector?: string): AppLayoutWrapper;
    /**
     * Returns a multi-element wrapper that matches AppLayouts with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches AppLayouts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<AppLayoutWrapper>}
     */
    findAllAppLayouts(selector?: string): MultiElementWrapper<AppLayoutWrapper>;
    /**
     * Returns a wrapper that matches the AppLayoutToolbars with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches AppLayoutToolbars.
     *
     * @param {string} [selector] CSS Selector
     * @returns {AppLayoutToolbarWrapper}
     */
    findAppLayoutToolbar(selector?: string): AppLayoutToolbarWrapper;
    /**
     * Returns a multi-element wrapper that matches AppLayoutToolbars with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches AppLayoutToolbars.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<AppLayoutToolbarWrapper>}
     */
    findAllAppLayoutToolbars(selector?: string): MultiElementWrapper<AppLayoutToolbarWrapper>;
    /**
     * Returns a wrapper that matches the AreaCharts with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches AreaCharts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {AreaChartWrapper}
     */
    findAreaChart(selector?: string): AreaChartWrapper;
    /**
     * Returns a multi-element wrapper that matches AreaCharts with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches AreaCharts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<AreaChartWrapper>}
     */
    findAllAreaCharts(selector?: string): MultiElementWrapper<AreaChartWrapper>;
    /**
     * Returns a wrapper that matches the AttributeEditors with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches AttributeEditors.
     *
     * @param {string} [selector] CSS Selector
     * @returns {AttributeEditorWrapper}
     */
    findAttributeEditor(selector?: string): AttributeEditorWrapper;
    /**
     * Returns a multi-element wrapper that matches AttributeEditors with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches AttributeEditors.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<AttributeEditorWrapper>}
     */
    findAllAttributeEditors(selector?: string): MultiElementWrapper<AttributeEditorWrapper>;
    /**
     * Returns a wrapper that matches the Autosuggests with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Autosuggests.
     *
     * @param {string} [selector] CSS Selector
     * @returns {AutosuggestWrapper}
     */
    findAutosuggest(selector?: string): AutosuggestWrapper;
    /**
     * Returns a multi-element wrapper that matches Autosuggests with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Autosuggests.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<AutosuggestWrapper>}
     */
    findAllAutosuggests(selector?: string): MultiElementWrapper<AutosuggestWrapper>;
    /**
     * Returns a wrapper that matches the Badges with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Badges.
     *
     * @param {string} [selector] CSS Selector
     * @returns {BadgeWrapper}
     */
    findBadge(selector?: string): BadgeWrapper;
    /**
     * Returns a multi-element wrapper that matches Badges with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Badges.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<BadgeWrapper>}
     */
    findAllBadges(selector?: string): MultiElementWrapper<BadgeWrapper>;
    /**
     * Returns a wrapper that matches the BarCharts with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches BarCharts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {BarChartWrapper}
     */
    findBarChart(selector?: string): BarChartWrapper;
    /**
     * Returns a multi-element wrapper that matches BarCharts with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches BarCharts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<BarChartWrapper>}
     */
    findAllBarCharts(selector?: string): MultiElementWrapper<BarChartWrapper>;
    /**
     * Returns a wrapper that matches the Boxes with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Boxes.
     *
     * @param {string} [selector] CSS Selector
     * @returns {BoxWrapper}
     */
    findBox(selector?: string): BoxWrapper;
    /**
     * Returns a multi-element wrapper that matches Boxes with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Boxes.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<BoxWrapper>}
     */
    findAllBoxes(selector?: string): MultiElementWrapper<BoxWrapper>;
    /**
     * Returns a wrapper that matches the BreadcrumbGroups with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches BreadcrumbGroups.
     *
     * @param {string} [selector] CSS Selector
     * @returns {BreadcrumbGroupWrapper}
     */
    findBreadcrumbGroup(selector?: string): BreadcrumbGroupWrapper;
    /**
     * Returns a multi-element wrapper that matches BreadcrumbGroups with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches BreadcrumbGroups.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<BreadcrumbGroupWrapper>}
     */
    findAllBreadcrumbGroups(selector?: string): MultiElementWrapper<BreadcrumbGroupWrapper>;
    /**
     * Returns a wrapper that matches the Buttons with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Buttons.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ButtonWrapper}
     */
    findButton(selector?: string): ButtonWrapper;
    /**
     * Returns a multi-element wrapper that matches Buttons with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Buttons.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<ButtonWrapper>}
     */
    findAllButtons(selector?: string): MultiElementWrapper<ButtonWrapper>;
    /**
     * Returns a wrapper that matches the ButtonDropdowns with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches ButtonDropdowns.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ButtonDropdownWrapper}
     */
    findButtonDropdown(selector?: string): ButtonDropdownWrapper;
    /**
     * Returns a multi-element wrapper that matches ButtonDropdowns with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches ButtonDropdowns.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<ButtonDropdownWrapper>}
     */
    findAllButtonDropdowns(selector?: string): MultiElementWrapper<ButtonDropdownWrapper>;
    /**
     * Returns a wrapper that matches the ButtonGroups with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches ButtonGroups.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ButtonGroupWrapper}
     */
    findButtonGroup(selector?: string): ButtonGroupWrapper;
    /**
     * Returns a multi-element wrapper that matches ButtonGroups with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches ButtonGroups.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<ButtonGroupWrapper>}
     */
    findAllButtonGroups(selector?: string): MultiElementWrapper<ButtonGroupWrapper>;
    /**
     * Returns a wrapper that matches the Calendars with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Calendars.
     *
     * @param {string} [selector] CSS Selector
     * @returns {CalendarWrapper}
     */
    findCalendar(selector?: string): CalendarWrapper;
    /**
     * Returns a multi-element wrapper that matches Calendars with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Calendars.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<CalendarWrapper>}
     */
    findAllCalendars(selector?: string): MultiElementWrapper<CalendarWrapper>;
    /**
     * Returns a wrapper that matches the Cards with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Cards.
     *
     * @param {string} [selector] CSS Selector
     * @returns {CardsWrapper}
     */
    findCards(selector?: string): CardsWrapper;
    /**
     * Returns a multi-element wrapper that matches Cards with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Cards.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<CardsWrapper>}
     */
    findAllCards(selector?: string): MultiElementWrapper<CardsWrapper>;
    /**
     * Returns a wrapper that matches the Checkboxes with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Checkboxes.
     *
     * @param {string} [selector] CSS Selector
     * @returns {CheckboxWrapper}
     */
    findCheckbox(selector?: string): CheckboxWrapper;
    /**
     * Returns a multi-element wrapper that matches Checkboxes with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Checkboxes.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<CheckboxWrapper>}
     */
    findAllCheckboxes(selector?: string): MultiElementWrapper<CheckboxWrapper>;
    /**
     * Returns a wrapper that matches the CodeEditors with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches CodeEditors.
     *
     * @param {string} [selector] CSS Selector
     * @returns {CodeEditorWrapper}
     */
    findCodeEditor(selector?: string): CodeEditorWrapper;
    /**
     * Returns a multi-element wrapper that matches CodeEditors with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches CodeEditors.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<CodeEditorWrapper>}
     */
    findAllCodeEditors(selector?: string): MultiElementWrapper<CodeEditorWrapper>;
    /**
     * Returns a wrapper that matches the CollectionPreferences with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches CollectionPreferences.
     *
     * @param {string} [selector] CSS Selector
     * @returns {CollectionPreferencesWrapper}
     */
    findCollectionPreferences(selector?: string): CollectionPreferencesWrapper;
    /**
     * Returns a multi-element wrapper that matches CollectionPreferences with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches CollectionPreferences.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<CollectionPreferencesWrapper>}
     */
    findAllCollectionPreferences(selector?: string): MultiElementWrapper<CollectionPreferencesWrapper>;
    /**
     * Returns a wrapper that matches the ColumnLayouts with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches ColumnLayouts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ColumnLayoutWrapper}
     */
    findColumnLayout(selector?: string): ColumnLayoutWrapper;
    /**
     * Returns a multi-element wrapper that matches ColumnLayouts with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches ColumnLayouts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<ColumnLayoutWrapper>}
     */
    findAllColumnLayouts(selector?: string): MultiElementWrapper<ColumnLayoutWrapper>;
    /**
     * Returns a wrapper that matches the Containers with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Containers.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ContainerWrapper}
     */
    findContainer(selector?: string): ContainerWrapper;
    /**
     * Returns a multi-element wrapper that matches Containers with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Containers.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<ContainerWrapper>}
     */
    findAllContainers(selector?: string): MultiElementWrapper<ContainerWrapper>;
    /**
     * Returns a wrapper that matches the ContentLayouts with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches ContentLayouts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ContentLayoutWrapper}
     */
    findContentLayout(selector?: string): ContentLayoutWrapper;
    /**
     * Returns a multi-element wrapper that matches ContentLayouts with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches ContentLayouts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<ContentLayoutWrapper>}
     */
    findAllContentLayouts(selector?: string): MultiElementWrapper<ContentLayoutWrapper>;
    /**
     * Returns a wrapper that matches the CopyToClipboards with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches CopyToClipboards.
     *
     * @param {string} [selector] CSS Selector
     * @returns {CopyToClipboardWrapper}
     */
    findCopyToClipboard(selector?: string): CopyToClipboardWrapper;
    /**
     * Returns a multi-element wrapper that matches CopyToClipboards with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches CopyToClipboards.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<CopyToClipboardWrapper>}
     */
    findAllCopyToClipboards(selector?: string): MultiElementWrapper<CopyToClipboardWrapper>;
    /**
     * Returns a wrapper that matches the DateInputs with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches DateInputs.
     *
     * @param {string} [selector] CSS Selector
     * @returns {DateInputWrapper}
     */
    findDateInput(selector?: string): DateInputWrapper;
    /**
     * Returns a multi-element wrapper that matches DateInputs with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches DateInputs.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<DateInputWrapper>}
     */
    findAllDateInputs(selector?: string): MultiElementWrapper<DateInputWrapper>;
    /**
     * Returns a wrapper that matches the DatePickers with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches DatePickers.
     *
     * @param {string} [selector] CSS Selector
     * @returns {DatePickerWrapper}
     */
    findDatePicker(selector?: string): DatePickerWrapper;
    /**
     * Returns a multi-element wrapper that matches DatePickers with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches DatePickers.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<DatePickerWrapper>}
     */
    findAllDatePickers(selector?: string): MultiElementWrapper<DatePickerWrapper>;
    /**
     * Returns a wrapper that matches the DateRangePickers with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches DateRangePickers.
     *
     * @param {string} [selector] CSS Selector
     * @returns {DateRangePickerWrapper}
     */
    findDateRangePicker(selector?: string): DateRangePickerWrapper;
    /**
     * Returns a multi-element wrapper that matches DateRangePickers with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches DateRangePickers.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<DateRangePickerWrapper>}
     */
    findAllDateRangePickers(selector?: string): MultiElementWrapper<DateRangePickerWrapper>;
    /**
     * Returns a wrapper that matches the Drawers with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Drawers.
     *
     * @param {string} [selector] CSS Selector
     * @returns {DrawerWrapper}
     */
    findDrawer(selector?: string): DrawerWrapper;
    /**
     * Returns a multi-element wrapper that matches Drawers with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Drawers.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<DrawerWrapper>}
     */
    findAllDrawers(selector?: string): MultiElementWrapper<DrawerWrapper>;
    /**
     * Returns a wrapper that matches the ExpandableSections with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches ExpandableSections.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ExpandableSectionWrapper}
     */
    findExpandableSection(selector?: string): ExpandableSectionWrapper;
    /**
     * Returns a multi-element wrapper that matches ExpandableSections with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches ExpandableSections.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<ExpandableSectionWrapper>}
     */
    findAllExpandableSections(selector?: string): MultiElementWrapper<ExpandableSectionWrapper>;
    /**
     * Returns a wrapper that matches the FileDropzones with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches FileDropzones.
     *
     * @param {string} [selector] CSS Selector
     * @returns {FileDropzoneWrapper}
     */
    findFileDropzone(selector?: string): FileDropzoneWrapper;
    /**
     * Returns a multi-element wrapper that matches FileDropzones with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches FileDropzones.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<FileDropzoneWrapper>}
     */
    findAllFileDropzones(selector?: string): MultiElementWrapper<FileDropzoneWrapper>;
    /**
     * Returns a wrapper that matches the FileInputs with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches FileInputs.
     *
     * @param {string} [selector] CSS Selector
     * @returns {FileInputWrapper}
     */
    findFileInput(selector?: string): FileInputWrapper;
    /**
     * Returns a multi-element wrapper that matches FileInputs with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches FileInputs.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<FileInputWrapper>}
     */
    findAllFileInputs(selector?: string): MultiElementWrapper<FileInputWrapper>;
    /**
     * Returns a wrapper that matches the FileTokenGroups with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches FileTokenGroups.
     *
     * @param {string} [selector] CSS Selector
     * @returns {FileTokenGroupWrapper}
     */
    findFileTokenGroup(selector?: string): FileTokenGroupWrapper;
    /**
     * Returns a multi-element wrapper that matches FileTokenGroups with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches FileTokenGroups.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<FileTokenGroupWrapper>}
     */
    findAllFileTokenGroups(selector?: string): MultiElementWrapper<FileTokenGroupWrapper>;
    /**
     * Returns a wrapper that matches the FileUploads with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches FileUploads.
     *
     * @param {string} [selector] CSS Selector
     * @returns {FileUploadWrapper}
     */
    findFileUpload(selector?: string): FileUploadWrapper;
    /**
     * Returns a multi-element wrapper that matches FileUploads with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches FileUploads.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<FileUploadWrapper>}
     */
    findAllFileUploads(selector?: string): MultiElementWrapper<FileUploadWrapper>;
    /**
     * Returns a wrapper that matches the Flashbars with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Flashbars.
     *
     * @param {string} [selector] CSS Selector
     * @returns {FlashbarWrapper}
     */
    findFlashbar(selector?: string): FlashbarWrapper;
    /**
     * Returns a multi-element wrapper that matches Flashbars with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Flashbars.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<FlashbarWrapper>}
     */
    findAllFlashbars(selector?: string): MultiElementWrapper<FlashbarWrapper>;
    /**
     * Returns a wrapper that matches the Forms with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Forms.
     *
     * @param {string} [selector] CSS Selector
     * @returns {FormWrapper}
     */
    findForm(selector?: string): FormWrapper;
    /**
     * Returns a multi-element wrapper that matches Forms with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Forms.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<FormWrapper>}
     */
    findAllForms(selector?: string): MultiElementWrapper<FormWrapper>;
    /**
     * Returns a wrapper that matches the FormFields with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches FormFields.
     *
     * @param {string} [selector] CSS Selector
     * @returns {FormFieldWrapper}
     */
    findFormField(selector?: string): FormFieldWrapper;
    /**
     * Returns a multi-element wrapper that matches FormFields with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches FormFields.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<FormFieldWrapper>}
     */
    findAllFormFields(selector?: string): MultiElementWrapper<FormFieldWrapper>;
    /**
     * Returns a wrapper that matches the Grids with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Grids.
     *
     * @param {string} [selector] CSS Selector
     * @returns {GridWrapper}
     */
    findGrid(selector?: string): GridWrapper;
    /**
     * Returns a multi-element wrapper that matches Grids with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Grids.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<GridWrapper>}
     */
    findAllGrids(selector?: string): MultiElementWrapper<GridWrapper>;
    /**
     * Returns a wrapper that matches the Headers with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Headers.
     *
     * @param {string} [selector] CSS Selector
     * @returns {HeaderWrapper}
     */
    findHeader(selector?: string): HeaderWrapper;
    /**
     * Returns a multi-element wrapper that matches Headers with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Headers.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<HeaderWrapper>}
     */
    findAllHeaders(selector?: string): MultiElementWrapper<HeaderWrapper>;
    /**
     * Returns a wrapper that matches the HelpPanels with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches HelpPanels.
     *
     * @param {string} [selector] CSS Selector
     * @returns {HelpPanelWrapper}
     */
    findHelpPanel(selector?: string): HelpPanelWrapper;
    /**
     * Returns a multi-element wrapper that matches HelpPanels with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches HelpPanels.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<HelpPanelWrapper>}
     */
    findAllHelpPanels(selector?: string): MultiElementWrapper<HelpPanelWrapper>;
    /**
     * Returns a wrapper that matches the Hotspots with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Hotspots.
     *
     * @param {string} [selector] CSS Selector
     * @returns {HotspotWrapper}
     */
    findHotspot(selector?: string): HotspotWrapper;
    /**
     * Returns a multi-element wrapper that matches Hotspots with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Hotspots.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<HotspotWrapper>}
     */
    findAllHotspots(selector?: string): MultiElementWrapper<HotspotWrapper>;
    /**
     * Returns a wrapper that matches the Icons with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Icons.
     *
     * @param {string} [selector] CSS Selector
     * @returns {IconWrapper}
     */
    findIcon(selector?: string): IconWrapper;
    /**
     * Returns a multi-element wrapper that matches Icons with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Icons.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<IconWrapper>}
     */
    findAllIcons(selector?: string): MultiElementWrapper<IconWrapper>;
    /**
     * Returns a wrapper that matches the Inputs with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Inputs.
     *
     * @param {string} [selector] CSS Selector
     * @returns {InputWrapper}
     */
    findInput(selector?: string): InputWrapper;
    /**
     * Returns a multi-element wrapper that matches Inputs with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Inputs.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<InputWrapper>}
     */
    findAllInputs(selector?: string): MultiElementWrapper<InputWrapper>;
    /**
     * Returns a wrapper that matches the KeyValuePairs with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches KeyValuePairs.
     *
     * @param {string} [selector] CSS Selector
     * @returns {KeyValuePairsWrapper}
     */
    findKeyValuePairs(selector?: string): KeyValuePairsWrapper;
    /**
     * Returns a multi-element wrapper that matches KeyValuePairs with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches KeyValuePairs.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<KeyValuePairsWrapper>}
     */
    findAllKeyValuePairs(selector?: string): MultiElementWrapper<KeyValuePairsWrapper>;
    /**
     * Returns a wrapper that matches the LineCharts with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches LineCharts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {LineChartWrapper}
     */
    findLineChart(selector?: string): LineChartWrapper;
    /**
     * Returns a multi-element wrapper that matches LineCharts with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches LineCharts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<LineChartWrapper>}
     */
    findAllLineCharts(selector?: string): MultiElementWrapper<LineChartWrapper>;
    /**
     * Returns a wrapper that matches the Links with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Links.
     *
     * @param {string} [selector] CSS Selector
     * @returns {LinkWrapper}
     */
    findLink(selector?: string): LinkWrapper;
    /**
     * Returns a multi-element wrapper that matches Links with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Links.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<LinkWrapper>}
     */
    findAllLinks(selector?: string): MultiElementWrapper<LinkWrapper>;
    /**
     * Returns a wrapper that matches the Lists with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Lists.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ListWrapper}
     */
    findList(selector?: string): ListWrapper;
    /**
     * Returns a multi-element wrapper that matches Lists with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Lists.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<ListWrapper>}
     */
    findAllLists(selector?: string): MultiElementWrapper<ListWrapper>;
    /**
     * Returns a wrapper that matches the LiveRegions with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches LiveRegions.
     *
     * @param {string} [selector] CSS Selector
     * @returns {LiveRegionWrapper}
     */
    findLiveRegion(selector?: string): LiveRegionWrapper;
    /**
     * Returns a multi-element wrapper that matches LiveRegions with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches LiveRegions.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<LiveRegionWrapper>}
     */
    findAllLiveRegions(selector?: string): MultiElementWrapper<LiveRegionWrapper>;
    /**
     * Returns a wrapper that matches the MixedLineBarCharts with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches MixedLineBarCharts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MixedLineBarChartWrapper}
     */
    findMixedLineBarChart(selector?: string): MixedLineBarChartWrapper;
    /**
     * Returns a multi-element wrapper that matches MixedLineBarCharts with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches MixedLineBarCharts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<MixedLineBarChartWrapper>}
     */
    findAllMixedLineBarCharts(selector?: string): MultiElementWrapper<MixedLineBarChartWrapper>;
    /**
     * Returns a wrapper that matches the Modals with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Modals.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ModalWrapper}
     */
    findModal(selector?: string): ModalWrapper;
    /**
     * Returns a multi-element wrapper that matches Modals with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Modals.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<ModalWrapper>}
     */
    findAllModals(selector?: string): MultiElementWrapper<ModalWrapper>;
    /**
     * Returns a wrapper that matches the Multiselects with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Multiselects.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiselectWrapper}
     */
    findMultiselect(selector?: string): MultiselectWrapper;
    /**
     * Returns a multi-element wrapper that matches Multiselects with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Multiselects.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<MultiselectWrapper>}
     */
    findAllMultiselects(selector?: string): MultiElementWrapper<MultiselectWrapper>;
    /**
     * Returns a wrapper that matches the NavigableGroups with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches NavigableGroups.
     *
     * @param {string} [selector] CSS Selector
     * @returns {NavigableGroupWrapper}
     */
    findNavigableGroup(selector?: string): NavigableGroupWrapper;
    /**
     * Returns a multi-element wrapper that matches NavigableGroups with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches NavigableGroups.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<NavigableGroupWrapper>}
     */
    findAllNavigableGroups(selector?: string): MultiElementWrapper<NavigableGroupWrapper>;
    /**
     * Returns a wrapper that matches the Paginations with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Paginations.
     *
     * @param {string} [selector] CSS Selector
     * @returns {PaginationWrapper}
     */
    findPagination(selector?: string): PaginationWrapper;
    /**
     * Returns a multi-element wrapper that matches Paginations with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Paginations.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<PaginationWrapper>}
     */
    findAllPaginations(selector?: string): MultiElementWrapper<PaginationWrapper>;
    /**
     * Returns a wrapper that matches the PieCharts with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches PieCharts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {PieChartWrapper}
     */
    findPieChart(selector?: string): PieChartWrapper;
    /**
     * Returns a multi-element wrapper that matches PieCharts with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches PieCharts.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<PieChartWrapper>}
     */
    findAllPieCharts(selector?: string): MultiElementWrapper<PieChartWrapper>;
    /**
     * Returns a wrapper that matches the Popovers with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Popovers.
     *
     * @param {string} [selector] CSS Selector
     * @returns {PopoverWrapper}
     */
    findPopover(selector?: string): PopoverWrapper;
    /**
     * Returns a multi-element wrapper that matches Popovers with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Popovers.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<PopoverWrapper>}
     */
    findAllPopovers(selector?: string): MultiElementWrapper<PopoverWrapper>;
    /**
     * Returns a wrapper that matches the ProgressBars with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches ProgressBars.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ProgressBarWrapper}
     */
    findProgressBar(selector?: string): ProgressBarWrapper;
    /**
     * Returns a multi-element wrapper that matches ProgressBars with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches ProgressBars.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<ProgressBarWrapper>}
     */
    findAllProgressBars(selector?: string): MultiElementWrapper<ProgressBarWrapper>;
    /**
     * Returns a wrapper that matches the PromptInputs with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches PromptInputs.
     *
     * @param {string} [selector] CSS Selector
     * @returns {PromptInputWrapper}
     */
    findPromptInput(selector?: string): PromptInputWrapper;
    /**
     * Returns a multi-element wrapper that matches PromptInputs with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches PromptInputs.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<PromptInputWrapper>}
     */
    findAllPromptInputs(selector?: string): MultiElementWrapper<PromptInputWrapper>;
    /**
     * Returns a wrapper that matches the PropertyFilters with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches PropertyFilters.
     *
     * @param {string} [selector] CSS Selector
     * @returns {PropertyFilterWrapper}
     */
    findPropertyFilter(selector?: string): PropertyFilterWrapper;
    /**
     * Returns a multi-element wrapper that matches PropertyFilters with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches PropertyFilters.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<PropertyFilterWrapper>}
     */
    findAllPropertyFilters(selector?: string): MultiElementWrapper<PropertyFilterWrapper>;
    /**
     * Returns a wrapper that matches the RadioGroups with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches RadioGroups.
     *
     * @param {string} [selector] CSS Selector
     * @returns {RadioGroupWrapper}
     */
    findRadioGroup(selector?: string): RadioGroupWrapper;
    /**
     * Returns a multi-element wrapper that matches RadioGroups with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches RadioGroups.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<RadioGroupWrapper>}
     */
    findAllRadioGroups(selector?: string): MultiElementWrapper<RadioGroupWrapper>;
    /**
     * Returns a wrapper that matches the S3ResourceSelectors with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches S3ResourceSelectors.
     *
     * @param {string} [selector] CSS Selector
     * @returns {S3ResourceSelectorWrapper}
     */
    findS3ResourceSelector(selector?: string): S3ResourceSelectorWrapper;
    /**
     * Returns a multi-element wrapper that matches S3ResourceSelectors with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches S3ResourceSelectors.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<S3ResourceSelectorWrapper>}
     */
    findAllS3ResourceSelectors(selector?: string): MultiElementWrapper<S3ResourceSelectorWrapper>;
    /**
     * Returns a wrapper that matches the SegmentedControls with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches SegmentedControls.
     *
     * @param {string} [selector] CSS Selector
     * @returns {SegmentedControlWrapper}
     */
    findSegmentedControl(selector?: string): SegmentedControlWrapper;
    /**
     * Returns a multi-element wrapper that matches SegmentedControls with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches SegmentedControls.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<SegmentedControlWrapper>}
     */
    findAllSegmentedControls(selector?: string): MultiElementWrapper<SegmentedControlWrapper>;
    /**
     * Returns a wrapper that matches the Selects with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Selects.
     *
     * @param {string} [selector] CSS Selector
     * @returns {SelectWrapper}
     */
    findSelect(selector?: string): SelectWrapper;
    /**
     * Returns a multi-element wrapper that matches Selects with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Selects.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<SelectWrapper>}
     */
    findAllSelects(selector?: string): MultiElementWrapper<SelectWrapper>;
    /**
     * Returns a wrapper that matches the SideNavigations with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches SideNavigations.
     *
     * @param {string} [selector] CSS Selector
     * @returns {SideNavigationWrapper}
     */
    findSideNavigation(selector?: string): SideNavigationWrapper;
    /**
     * Returns a multi-element wrapper that matches SideNavigations with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches SideNavigations.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<SideNavigationWrapper>}
     */
    findAllSideNavigations(selector?: string): MultiElementWrapper<SideNavigationWrapper>;
    /**
     * Returns a wrapper that matches the Sliders with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Sliders.
     *
     * @param {string} [selector] CSS Selector
     * @returns {SliderWrapper}
     */
    findSlider(selector?: string): SliderWrapper;
    /**
     * Returns a multi-element wrapper that matches Sliders with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Sliders.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<SliderWrapper>}
     */
    findAllSliders(selector?: string): MultiElementWrapper<SliderWrapper>;
    /**
     * Returns a wrapper that matches the SpaceBetweens with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches SpaceBetweens.
     *
     * @param {string} [selector] CSS Selector
     * @returns {SpaceBetweenWrapper}
     */
    findSpaceBetween(selector?: string): SpaceBetweenWrapper;
    /**
     * Returns a multi-element wrapper that matches SpaceBetweens with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches SpaceBetweens.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<SpaceBetweenWrapper>}
     */
    findAllSpaceBetweens(selector?: string): MultiElementWrapper<SpaceBetweenWrapper>;
    /**
     * Returns a wrapper that matches the Spinners with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Spinners.
     *
     * @param {string} [selector] CSS Selector
     * @returns {SpinnerWrapper}
     */
    findSpinner(selector?: string): SpinnerWrapper;
    /**
     * Returns a multi-element wrapper that matches Spinners with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Spinners.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<SpinnerWrapper>}
     */
    findAllSpinners(selector?: string): MultiElementWrapper<SpinnerWrapper>;
    /**
     * Returns a wrapper that matches the SplitPanels with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches SplitPanels.
     *
     * @param {string} [selector] CSS Selector
     * @returns {SplitPanelWrapper}
     */
    findSplitPanel(selector?: string): SplitPanelWrapper;
    /**
     * Returns a multi-element wrapper that matches SplitPanels with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches SplitPanels.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<SplitPanelWrapper>}
     */
    findAllSplitPanels(selector?: string): MultiElementWrapper<SplitPanelWrapper>;
    /**
     * Returns a wrapper that matches the StatusIndicators with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches StatusIndicators.
     *
     * @param {string} [selector] CSS Selector
     * @returns {StatusIndicatorWrapper}
     */
    findStatusIndicator(selector?: string): StatusIndicatorWrapper;
    /**
     * Returns a multi-element wrapper that matches StatusIndicators with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches StatusIndicators.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<StatusIndicatorWrapper>}
     */
    findAllStatusIndicators(selector?: string): MultiElementWrapper<StatusIndicatorWrapper>;
    /**
     * Returns a wrapper that matches the Steps with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Steps.
     *
     * @param {string} [selector] CSS Selector
     * @returns {StepsWrapper}
     */
    findSteps(selector?: string): StepsWrapper;
    /**
     * Returns a multi-element wrapper that matches Steps with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Steps.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<StepsWrapper>}
     */
    findAllSteps(selector?: string): MultiElementWrapper<StepsWrapper>;
    /**
     * Returns a wrapper that matches the Tables with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Tables.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TableWrapper}
     */
    findTable(selector?: string): TableWrapper;
    /**
     * Returns a multi-element wrapper that matches Tables with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Tables.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<TableWrapper>}
     */
    findAllTables(selector?: string): MultiElementWrapper<TableWrapper>;
    /**
     * Returns a wrapper that matches the Tabs with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Tabs.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TabsWrapper}
     */
    findTabs(selector?: string): TabsWrapper;
    /**
     * Returns a multi-element wrapper that matches Tabs with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Tabs.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<TabsWrapper>}
     */
    findAllTabs(selector?: string): MultiElementWrapper<TabsWrapper>;
    /**
     * Returns a wrapper that matches the TagEditors with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches TagEditors.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TagEditorWrapper}
     */
    findTagEditor(selector?: string): TagEditorWrapper;
    /**
     * Returns a multi-element wrapper that matches TagEditors with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches TagEditors.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<TagEditorWrapper>}
     */
    findAllTagEditors(selector?: string): MultiElementWrapper<TagEditorWrapper>;
    /**
     * Returns a wrapper that matches the TextContents with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches TextContents.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TextContentWrapper}
     */
    findTextContent(selector?: string): TextContentWrapper;
    /**
     * Returns a multi-element wrapper that matches TextContents with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches TextContents.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<TextContentWrapper>}
     */
    findAllTextContents(selector?: string): MultiElementWrapper<TextContentWrapper>;
    /**
     * Returns a wrapper that matches the TextFilters with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches TextFilters.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TextFilterWrapper}
     */
    findTextFilter(selector?: string): TextFilterWrapper;
    /**
     * Returns a multi-element wrapper that matches TextFilters with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches TextFilters.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<TextFilterWrapper>}
     */
    findAllTextFilters(selector?: string): MultiElementWrapper<TextFilterWrapper>;
    /**
     * Returns a wrapper that matches the Textareas with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Textareas.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TextareaWrapper}
     */
    findTextarea(selector?: string): TextareaWrapper;
    /**
     * Returns a multi-element wrapper that matches Textareas with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Textareas.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<TextareaWrapper>}
     */
    findAllTextareas(selector?: string): MultiElementWrapper<TextareaWrapper>;
    /**
     * Returns a wrapper that matches the Tiles with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Tiles.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TilesWrapper}
     */
    findTiles(selector?: string): TilesWrapper;
    /**
     * Returns a multi-element wrapper that matches Tiles with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Tiles.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<TilesWrapper>}
     */
    findAllTiles(selector?: string): MultiElementWrapper<TilesWrapper>;
    /**
     * Returns a wrapper that matches the TimeInputs with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches TimeInputs.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TimeInputWrapper}
     */
    findTimeInput(selector?: string): TimeInputWrapper;
    /**
     * Returns a multi-element wrapper that matches TimeInputs with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches TimeInputs.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<TimeInputWrapper>}
     */
    findAllTimeInputs(selector?: string): MultiElementWrapper<TimeInputWrapper>;
    /**
     * Returns a wrapper that matches the Toggles with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Toggles.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ToggleWrapper}
     */
    findToggle(selector?: string): ToggleWrapper;
    /**
     * Returns a multi-element wrapper that matches Toggles with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Toggles.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<ToggleWrapper>}
     */
    findAllToggles(selector?: string): MultiElementWrapper<ToggleWrapper>;
    /**
     * Returns a wrapper that matches the ToggleButtons with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches ToggleButtons.
     *
     * @param {string} [selector] CSS Selector
     * @returns {ToggleButtonWrapper}
     */
    findToggleButton(selector?: string): ToggleButtonWrapper;
    /**
     * Returns a multi-element wrapper that matches ToggleButtons with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches ToggleButtons.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<ToggleButtonWrapper>}
     */
    findAllToggleButtons(selector?: string): MultiElementWrapper<ToggleButtonWrapper>;
    /**
     * Returns a wrapper that matches the TokenGroups with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches TokenGroups.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TokenGroupWrapper}
     */
    findTokenGroup(selector?: string): TokenGroupWrapper;
    /**
     * Returns a multi-element wrapper that matches TokenGroups with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches TokenGroups.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<TokenGroupWrapper>}
     */
    findAllTokenGroups(selector?: string): MultiElementWrapper<TokenGroupWrapper>;
    /**
     * Returns a wrapper that matches the TopNavigations with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches TopNavigations.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TopNavigationWrapper}
     */
    findTopNavigation(selector?: string): TopNavigationWrapper;
    /**
     * Returns a multi-element wrapper that matches TopNavigations with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches TopNavigations.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<TopNavigationWrapper>}
     */
    findAllTopNavigations(selector?: string): MultiElementWrapper<TopNavigationWrapper>;
    /**
     * Returns a wrapper that matches the TreeViews with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches TreeViews.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TreeViewWrapper}
     */
    findTreeView(selector?: string): TreeViewWrapper;
    /**
     * Returns a multi-element wrapper that matches TreeViews with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches TreeViews.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<TreeViewWrapper>}
     */
    findAllTreeViews(selector?: string): MultiElementWrapper<TreeViewWrapper>;
    /**
     * Returns a wrapper that matches the TutorialPanels with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches TutorialPanels.
     *
     * @param {string} [selector] CSS Selector
     * @returns {TutorialPanelWrapper}
     */
    findTutorialPanel(selector?: string): TutorialPanelWrapper;
    /**
     * Returns a multi-element wrapper that matches TutorialPanels with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches TutorialPanels.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<TutorialPanelWrapper>}
     */
    findAllTutorialPanels(selector?: string): MultiElementWrapper<TutorialPanelWrapper>;
    /**
     * Returns a wrapper that matches the Wizards with the specified CSS selector.
     * If no CSS selector is specified, returns a wrapper that matches Wizards.
     *
     * @param {string} [selector] CSS Selector
     * @returns {WizardWrapper}
     */
    findWizard(selector?: string): WizardWrapper;
    /**
     * Returns a multi-element wrapper that matches Wizards with the specified CSS selector.
     * If no CSS selector is specified, returns a multi-element wrapper that matches Wizards.
     *
     * @param {string} [selector] CSS Selector
     * @returns {MultiElementWrapper<WizardWrapper>}
     */
    findAllWizards(selector?: string): MultiElementWrapper<WizardWrapper>;
  }
}
export default function wrapper(root?: string): ElementWrapper;
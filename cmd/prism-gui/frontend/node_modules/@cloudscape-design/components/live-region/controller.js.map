{"version":3,"file":"controller.js","sourceRoot":"","sources":["../../../src/live-region/controller.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AAEtC,OAAO,MAAM,MAAM,iBAAiB,CAAC;AACrC,OAAO,cAAc,MAAM,8BAA8B,CAAC;AAE1D;;;;;;;GAOG;AACH,MAAM,OAAO,oBAAoB;IAc/B,YACkB,UAAkC,EAClC,QAAQ,oBAAoB,CAAC,YAAY;QADzC,eAAU,GAAV,UAAU,CAAwB;QAClC,UAAK,GAAL,KAAK,CAAoC;QALnD,yBAAoB,GAAG,KAAK,CAAC;QAC7B,sBAAiB,GAAG,EAAE,CAAC;QAM7B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,GAAG,MAAM,CAAC,SAAS,IAAI,cAAc,CAAC,SAAS,EAAE,CAAC;QAC5E,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACzD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;QAClD,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACH,OAAO;;QACL,MAAA,IAAI,CAAC,QAAQ,0CAAE,MAAM,EAAE,CAAC;QACxB,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;YACjC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC9B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;SAC7B;IACH,CAAC;IAED,QAAQ,CAAC,EAAE,OAAO,EAAE,eAAe,GAAG,KAAK,EAAmE;QAC5G,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO;SACR;QAED,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;QAExC,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,IAAI,eAAe,EAAE;YACvC,sEAAsE;YACtE,0CAA0C;YAC1C,OAAO,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;SAC7C;QAED,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;YACjC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;SACnF;IACH,CAAC;IAEO,cAAc,CAAC,eAAwB;QAC7C,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,CAAC,iBAAiB,EAAE;YACrD,gEAAgE;YAChE,2DAA2D;YAC3D,sDAAsD;YACtD,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC;YACnD,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;SACnC;aAAM,IAAI,eAAe,EAAE;YAC1B,qEAAqE;YACrE,oEAAoE;YACpE,yCAAyC;YACzC,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC,iBAAiB,GAAG,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAC5F,IAAI,CAAC,oBAAoB,GAAG,CAAC,IAAI,CAAC,oBAAoB,CAAC;SACxD;QAED,8CAA8C;QAC9C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAEhD,6CAA6C;QAC7C,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;;AAzED;;;;GAIG;AACW,iCAAY,GAAG,CAAC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport styles from './styles.css.js';\nimport testUtilStyles from './test-classes/styles.css.js';\n\n/**\n * The controller that manages a single live region container. It has a timer\n * to make sure announcements are throttled correctly. It can also make sure\n * that a message is announced again even if it matches the previous content\n * of the live region.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n */\nexport class LiveRegionController {\n  /**\n   * The default delay for announcements when no delay is explicitly provided.\n   * During internal unit testing, you can import this and explicitly set it to\n   * 0 to make the live region update the DOM without waiting for a timer.\n   */\n  public static defaultDelay = 2;\n\n  private _element: HTMLElement;\n  private _timeoutId: number | undefined;\n  private _lastAnnouncement: string | undefined;\n  private _addedTerminalPeriod = false;\n  private _nextAnnouncement = '';\n\n  constructor(\n    public readonly politeness: 'polite' | 'assertive',\n    public readonly delay = LiveRegionController.defaultDelay\n  ) {\n    this._element = document.createElement('div');\n    this._element.className = `${styles.announcer} ${testUtilStyles.announcer}`;\n    this._element.setAttribute('aria-live', this.politeness);\n    this._element.setAttribute('aria-atomic', 'true');\n    document.body.appendChild(this._element);\n  }\n\n  /**\n   * Reset the state of the controller and clear any active announcements.\n   */\n  destroy() {\n    this._element?.remove();\n    if (this._timeoutId !== undefined) {\n      clearTimeout(this._timeoutId);\n      this._timeoutId = undefined;\n    }\n  }\n\n  announce({ message, forceReannounce = false }: { message?: string; delay?: number; forceReannounce?: boolean }) {\n    if (!message) {\n      return;\n    }\n\n    this._nextAnnouncement = message.trim();\n\n    if (this.delay === 0 || forceReannounce) {\n      // If the delay is 0, just skip the timeout shenanigans and update the\n      // element synchronously. Great for tests.\n      return this._updateElement(forceReannounce);\n    }\n\n    if (this._timeoutId === undefined) {\n      this._timeoutId = setTimeout(() => this._updateElement(false), this.delay * 1000);\n    }\n  }\n\n  private _updateElement(forceReannounce: boolean) {\n    if (this._nextAnnouncement !== this._lastAnnouncement) {\n      // The aria-atomic does not work properly in Voice Over, causing\n      // certain parts of the content to be ignored. To fix that,\n      // we assign the source text content as a single node.\n      this._element.textContent = this._nextAnnouncement;\n      this._addedTerminalPeriod = false;\n    } else if (forceReannounce) {\n      // A (generally) safe way of forcing re-announcements is toggling the\n      // terminal period. If we only keep adding periods, it's going to be\n      // eventually interpreted as an ellipsis.\n      this._element.textContent = this._nextAnnouncement + (this._addedTerminalPeriod ? '' : '.');\n      this._addedTerminalPeriod = !this._addedTerminalPeriod;\n    }\n\n    // Track the announced text for deduplication.\n    this._lastAnnouncement = this._nextAnnouncement;\n\n    // Reset the state for the next announcement.\n    this._timeoutId = undefined;\n  }\n}\n"]}
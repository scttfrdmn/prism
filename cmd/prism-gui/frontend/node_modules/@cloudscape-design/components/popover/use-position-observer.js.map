{"version":3,"file":"use-position-observer.js","sourceRoot":"","sources":["../../../src/popover/use-position-observer.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,0DAA0D;AAE1D,OAAc,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAEzC,OAAO,EAAE,iBAAiB,EAAE,MAAM,+CAA+C,CAAC;AAOlF,MAAM,CAAC,OAAO,UAAU,mBAAmB,CACzC,UAAgD,EAChD,QAAqC,EACrC,QAAoB;IAEpB,MAAM,cAAc,GAAG,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IAEnD,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,OAAO,CAAA,EAAE;YACxB,OAAO;SACR;QAED,IAAI,YAAY,GAAG,QAAQ,CAAC;QAE5B,IAAI,YAAY,GAAW;YACzB,CAAC,EAAE,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,CAAC;YAC/C,CAAC,EAAE,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,CAAC;SAChD,CAAC;QAEF,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,GAAG,EAAE;YACzC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;gBACvB,OAAO;aACR;YAED,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,UAAU,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC;YAE5D,+EAA+E;YAC/E,IAAI,CAAC,KAAK,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,YAAY,CAAC,CAAC,IAAI,QAAQ,KAAK,YAAY,EAAE;gBAC7E,YAAY,GAAG,QAAQ,CAAC;gBACxB,YAAY,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;gBACxB,cAAc,EAAE,CAAC;aAClB;QACH,CAAC,CAAC,CAAC;QAEH,mDAAmD;QACnD,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,aAAa,EAAE;YACjD,UAAU,EAAE,IAAI;YAChB,OAAO,EAAE,IAAI;YACb,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;QAEH,OAAO,GAAG,EAAE,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;QACnC,uDAAuD;IACzD,CAAC,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,4HAA4H;AAChK,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/* istanbul ignore file - Tested with integration tests */\n\nimport React, { useEffect } from 'react';\n\nimport { useStableCallback } from '@cloudscape-design/component-toolkit/internal';\n\ninterface Coords {\n  x?: number;\n  y?: number;\n}\n\nexport default function usePositionObserver(\n  triggerRef: React.RefObject<Element> | undefined,\n  trackKey: string | number | undefined,\n  callback: () => void\n) {\n  const stableCallback = useStableCallback(callback);\n\n  useEffect(() => {\n    if (!triggerRef?.current) {\n      return;\n    }\n\n    let lastTrackKey = trackKey;\n\n    let lastPosition: Coords = {\n      x: triggerRef.current.getBoundingClientRect().x,\n      y: triggerRef.current.getBoundingClientRect().y,\n    };\n\n    const observer = new MutationObserver(() => {\n      if (!triggerRef.current) {\n        return;\n      }\n\n      const { x, y } = triggerRef.current.getBoundingClientRect();\n\n      // Only trigger the callback when the position changes or the track key changes\n      if (x !== lastPosition.x || y !== lastPosition.y || trackKey !== lastTrackKey) {\n        lastTrackKey = trackKey;\n        lastPosition = { x, y };\n        stableCallback();\n      }\n    });\n\n    // Observe the entire ownerDocument for DOM changes\n    observer.observe(triggerRef.current.ownerDocument, {\n      attributes: true,\n      subtree: true,\n      childList: true,\n    });\n\n    return () => observer.disconnect();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [triggerRef, stableCallback]); // trackKey excluded to avoid the observer being recreated everytime the value changes, causing rendering issues for Tooltip\n}\n"]}
{"version":3,"file":"use-popover.js","sourceRoot":"","sources":["../../../../src/mixed-line-bar-chart/hooks/use-popover.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AAEtC,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAEtD,qEAAqE;AACrE,wEAAwE;AACxE,oDAAoD;AACpD,MAAM,eAAe,GAAG,EAAE,CAAC;AAE3B,MAAM,UAAU,UAAU;IACxB,MAAM,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,eAAe,CAAC,CAAC;IAC9D,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAA+B,QAAQ,CAAC,CAAC;IAE3E,MAAM,aAAa,GAAG,KAAK,KAAK,QAAQ,CAAC;IACzC,MAAM,eAAe,GAAG,KAAK,KAAK,QAAQ,CAAC;IAE3C,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,EAAE;QACnC,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,gBAAgB,CAAC,OAAO,GAAG,eAAe,EAAE;YAC3D,QAAQ,CAAC,MAAM,CAAC,CAAC;SAClB;IACH,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;IAC7D,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9D,MAAM,cAAc,GAAG,WAAW,CAAC,GAAG,EAAE;QACtC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACd,IAAI,IAAI,KAAK,QAAQ,EAAE;gBACrB,gBAAgB,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;aACvC;YACD,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,EAAE,aAAa,EAAE,eAAe,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE,cAAc,EAAE,CAAC;AAClG,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useCallback, useRef, useState } from 'react';\n\n// The delay prevents re-opening popover immediately upon dismissing,\n// so that the popover actually closes. It can be reopened with the next\n// hover or focus event that occurs after the delay.\nconst REOPEN_DELAY_MS = 50;\n\nexport function usePopover() {\n  const dismissedTimeRef = useRef(Date.now() - REOPEN_DELAY_MS);\n  const [state, setState] = useState<'open' | 'closed' | 'pinned'>('closed');\n\n  const isPopoverOpen = state !== 'closed';\n  const isPopoverPinned = state === 'pinned';\n\n  const showPopover = useCallback(() => {\n    if (Date.now() - dismissedTimeRef.current > REOPEN_DELAY_MS) {\n      setState('open');\n    }\n  }, []);\n  const pinPopover = useCallback(() => setState('pinned'), []);\n  const hidePopover = useCallback(() => setState('closed'), []);\n  const dismissPopover = useCallback(() => {\n    setState(prev => {\n      if (prev === 'pinned') {\n        dismissedTimeRef.current = Date.now();\n      }\n      return 'closed';\n    });\n  }, []);\n\n  return { isPopoverOpen, isPopoverPinned, showPopover, pinPopover, hidePopover, dismissPopover };\n}\n"]}
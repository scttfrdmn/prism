{"version":3,"file":"selection-cell.js","sourceRoot":"","sources":["../../../../src/table/selection/selection-cell.tsx"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,6BAA6B,EAAE,MAAM,kEAAkE,CAAC;AAEjH,OAAO,gBAAgB,MAAM,6CAA6C,CAAC;AAC3E,OAAO,EAAE,cAAc,EAAuB,MAAM,yBAAyB,CAAC;AAC9E,OAAO,EAAE,cAAc,EAAuB,MAAM,2BAA2B,CAAC;AAChF,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAErC,OAAO,EAAE,gBAAgB,EAAyB,MAAM,qBAAqB,CAAC;AAE9E,OAAO,MAAM,MAAM,kBAAkB,CAAC;AActC,MAAM,UAAU,wBAAwB,CAAC,EAMT;QANS,EACvC,gBAAgB,EAChB,8BAA8B,EAC9B,iBAAiB,EACjB,WAAW,OAEmB,EAD3B,KAAK,cAL+B,0FAMxC,CADS;IAER,MAAM,cAAc,GAAG,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;IAC3E,OAAO,CACL,oBAAC,cAAc,oBACT,KAAK,IACT,WAAW,EAAE,IAAI,EACjB,QAAQ,EAAE,CAAC,EACX,gBAAgB,EAAE,gBAAgB,EAClC,SAAS,EAAE,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,mBAAmB,IAC1C,6BAA6B,CAAC;QAChC,MAAM,EAAE,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,OAAO,EAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,WAAW;KAC9D,CAAC;QAED,cAAc,CAAC,CAAC,CAAC,CAChB,oBAAC,gBAAgB,kBACf,WAAW,EAAE,KAAK,CAAC,EAAE;gBACnB,WAAY,CAAC,KAAK,CAAC,MAAqB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACpD,CAAC,EACD,gBAAgB,EAAE,gBAAgB,IAC9B,cAAc,EACd,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAC1C,CACH,CAAC,CAAC,CAAC,CACF,oBAAC,gBAAgB,QAAE,8BAA8B,CAAoB,CACtE;QACD,oBAAC,OAAO,IAAC,SAAS,EAAE,MAAM,CAAC,gBAAgB,CAAC,GAAI,CACjC,CAClB,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,EAAgE;QAAhE,EAAE,qBAAqB,OAAyC,EAApC,KAAK,cAAjC,yBAAmC,CAAF;IACtE,OAAO,CACL,oBAAC,cAAc,oBAAK,KAAK,IAAE,WAAW,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,KAC7G,qBAAqB,CAAC,CAAC,CAAC,CACvB,oBAAC,gBAAgB,oBAAK,qBAAqB,IAAE,aAAa,EAAE,KAAK,CAAC,aAAa,IAAI,CACpF,CAAC,CAAC,CAAC,IAAI,CACO,CAClB,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport ScreenreaderOnly from '../../internal/components/screenreader-only';\nimport { TableTdElement, TableTdElementProps } from '../body-cell/td-element';\nimport { TableThElement, TableThElementProps } from '../header-cell/th-element';\nimport { Divider } from '../resizer';\nimport { SelectionProps } from './interfaces';\nimport { SelectionControl, SelectionControlProps } from './selection-control';\n\nimport styles from '../styles.css.js';\n\ninterface TableHeaderSelectionCellProps extends Omit<TableThElementProps, 'children' | 'colIndex'> {\n  focusedComponent?: null | string;\n  singleSelectionHeaderAriaLabel?: string;\n  getSelectAllProps?: () => SelectionProps;\n  onFocusMove: ((sourceElement: HTMLElement, fromIndex: number, direction: -1 | 1) => void) | undefined;\n}\n\ninterface TableBodySelectionCellProps\n  extends Omit<TableTdElementProps, 'children' | 'colIndex' | 'wrapLines' | 'isEditable' | 'isEditing'> {\n  selectionControlProps?: SelectionControlProps;\n}\n\nexport function TableHeaderSelectionCell({\n  focusedComponent,\n  singleSelectionHeaderAriaLabel,\n  getSelectAllProps,\n  onFocusMove,\n  ...props\n}: TableHeaderSelectionCellProps) {\n  const selectAllProps = getSelectAllProps ? getSelectAllProps() : undefined;\n  return (\n    <TableThElement\n      {...props}\n      isSelection={true}\n      colIndex={0}\n      focusedComponent={focusedComponent}\n      ariaLabel={selectAllProps?.selectionGroupLabel}\n      {...getAnalyticsMetadataAttribute({\n        action: selectAllProps?.checked ? 'deselectAll' : 'selectAll',\n      })}\n    >\n      {selectAllProps ? (\n        <SelectionControl\n          onFocusDown={event => {\n            onFocusMove!(event.target as HTMLElement, -1, +1);\n          }}\n          focusedComponent={focusedComponent}\n          {...selectAllProps}\n          {...(props.sticky ? { tabIndex: -1 } : {})}\n        />\n      ) : (\n        <ScreenreaderOnly>{singleSelectionHeaderAriaLabel}</ScreenreaderOnly>\n      )}\n      <Divider className={styles['resize-divider']} />\n    </TableThElement>\n  );\n}\n\nexport function TableBodySelectionCell({ selectionControlProps, ...props }: TableBodySelectionCellProps) {\n  return (\n    <TableTdElement {...props} isSelection={true} wrapLines={false} isEditable={false} isEditing={false} colIndex={0}>\n      {selectionControlProps ? (\n        <SelectionControl {...selectionControlProps} verticalAlign={props.verticalAlign} />\n      ) : null}\n    </TableTdElement>\n  );\n}\n"]}
{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/breadcrumb-group/utils.ts"],"names":[],"mappings":"AAIA,MAAM,CAAC,MAAM,cAAc,GAAG,CAAsC,IAAO,EAAE,EAAE,CAAC,CAAC;IAC/E,IAAI;IACJ,IAAI,EAAE,IAAI,CAAC,IAAI;IACf,IAAI,EAAE,IAAI,CAAC,IAAI;CAChB,CAAC,CAAC;AAEH,MAAM,oBAAoB,GAAG,EAAE,CAAC;AAChC,MAAM,cAAc,GAAG,EAAE,CAAC;AAE1B,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,WAA0B,EAAE,QAAuB,EAAE,EAAE;IAC/F,MAAM,wBAAwB,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC;IAClD,wBAAwB,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CACzD,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,EACnC,oBAAoB,CACrB,CAAC;IAEF,OAAO;QACL,SAAS,EAAE,6BAA6B,CAAC,wBAAwB,EAAE,QAAQ,CAAC;KAC7E,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,6BAA6B,GAAG,CAAC,UAAyB,EAAE,QAAuB,EAAU,EAAE;IACnG,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QAChC,OAAO,CAAC,CAAC;KACV;IACD,IAAI,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;IAClE,IAAI,cAAc,GAAG,CAAC,CAAC;IACvB,OAAO,cAAc,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QAC7C,IAAI,SAAS,IAAI,QAAQ,EAAE;YACzB,MAAM;SACP;QACD,cAAc,IAAI,CAAC,CAAC;QACpB,SAAS,GAAG,SAAS,GAAG,UAAU,CAAC,cAAc,CAAC,CAAC;QACnD,IAAI,cAAc,KAAK,CAAC,EAAE;YACxB,SAAS,IAAI,cAAc,CAAC;SAC7B;KACF;IACD,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { BreadcrumbGroupProps } from './interfaces';\n\nexport const getEventDetail = <T extends BreadcrumbGroupProps.Item>(item: T) => ({\n  item,\n  text: item.text,\n  href: item.href,\n});\n\nconst MIN_BREADCRUMB_WIDTH = 70;\nconst ELLIPSIS_WIDTH = 50;\n\nexport const getItemsDisplayProperties = (itemsWidths: Array<number>, navWidth: number | null) => {\n  const widthsWithFinalCollapsed = [...itemsWidths];\n  widthsWithFinalCollapsed[itemsWidths.length - 1] = Math.min(\n    itemsWidths[itemsWidths.length - 1],\n    MIN_BREADCRUMB_WIDTH\n  );\n\n  return {\n    collapsed: computeNumberOfCollapsedItems(widthsWithFinalCollapsed, navWidth),\n  };\n};\n\nconst computeNumberOfCollapsedItems = (itemWidths: Array<number>, navWidth: number | null): number => {\n  if (typeof navWidth !== 'number') {\n    return 0;\n  }\n  let usedWidth = itemWidths.reduce((acc, width) => acc + width, 0);\n  let collapsedItems = 0;\n  while (collapsedItems < itemWidths.length - 1) {\n    if (usedWidth <= navWidth) {\n      break;\n    }\n    collapsedItems += 1;\n    usedWidth = usedWidth - itemWidths[collapsedItems];\n    if (collapsedItems === 1) {\n      usedWidth += ELLIPSIS_WIDTH;\n    }\n  }\n  return collapsedItems;\n};\n"]}
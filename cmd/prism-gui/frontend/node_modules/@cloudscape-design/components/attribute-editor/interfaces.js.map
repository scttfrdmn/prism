{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/attribute-editor/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { ButtonDropdownProps } from '../button-dropdown/interfaces';\nimport { BaseComponentProps } from '../internal/base-component';\nimport { Breakpoint as InternalBreakpoint } from '../internal/breakpoints';\nimport { NonCancelableEventHandler } from '../internal/events';\n\n/*\n * HACK: Cast the component to a named parametrized interface.\n *\n * This lets us use React.forwardRef and still let the component have type\n * parameters, and the naming convention lets the documenter know that this is\n * a forwardRef-wrapped component.\n *\n * We don't need to expose this type to customers because it's just a simple\n * function type.\n */\nexport interface AttributeEditorForwardRefType {\n  <T>(props: AttributeEditorProps<T> & { ref?: React.Ref<AttributeEditorProps.Ref> }): JSX.Element;\n}\n\nexport namespace AttributeEditorProps {\n  export interface IsItemRemovableFunction<T> {\n    (item: T): boolean;\n  }\n\n  export type FieldRenderable<T> = (item: T, itemIndex: number) => React.ReactNode;\n  export interface FieldDefinition<T> {\n    label?: React.ReactNode;\n    info?: React.ReactNode;\n    control?: FieldRenderable<T> | React.ReactNode;\n    errorText?: FieldRenderable<T> | React.ReactNode;\n    warningText?: FieldRenderable<T> | React.ReactNode;\n    constraintText?: FieldRenderable<T> | React.ReactNode;\n  }\n\n  export type AddButtonVariant = 'normal' | 'inline-link';\n\n  export interface RemoveButtonClickDetail {\n    itemIndex: number;\n  }\n\n  export interface Ref {\n    /**\n     * Focuses the 'remove' button for the given row index.\n     */\n    focusRemoveButton(itemIndex: number): void;\n    /**\n     * Focuses the 'add' button. Use this, for example, after a user removes the last row.\n     */\n    focusAddButton(): void;\n  }\n\n  export interface RowActionsProps<T> {\n    item: T;\n    itemIndex: number;\n    ref: React.Ref<ButtonDropdownProps.Ref>;\n    breakpoint: Breakpoint | null;\n    ownRow: boolean;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  export interface I18nStrings<T = any> {\n    errorIconAriaLabel?: string;\n    warningIconAriaLabel?: string;\n    itemRemovedAriaLive?: string;\n\n    /**\n     * @deprecated Use `removeButtonAriaLabel` on the component instead.\n     */\n    removeButtonAriaLabel?: (item: T) => string;\n  }\n\n  export type Breakpoint = InternalBreakpoint;\n\n  export interface GridLayout {\n    breakpoint?: Breakpoint;\n    rows: ReadonlyArray<ReadonlyArray<number>>;\n    removeButton?: {\n      ownRow?: boolean;\n      width?: number | 'auto';\n    };\n  }\n}\n\nexport interface AttributeEditorProps<T> extends BaseComponentProps {\n  /**\n   * Displayed when there are no items to display.\n   */\n  empty?: React.ReactNode;\n\n  /**\n   * Displayed below the add button. Use it for additional information related to the attribute editor.\n   */\n  additionalInfo?: React.ReactNode;\n\n  /**\n   * Specifies the text that's displayed in the add button.\n   */\n  addButtonText: string;\n\n  /**\n   * Specifies the text that's displayed in the remove button.\n   * @i18n\n   */\n  removeButtonText?: string;\n\n  /**\n   * Adds an `aria-label` to the remove button.\n   */\n  removeButtonAriaLabel?: (item: T) => string;\n\n  /**\n   * Specifies the items that serve as the data source for all rows.\n   * The display of a row is handled by the `definition` property.\n   */\n  items?: ReadonlyArray<T>;\n\n  /**\n   * Function that determines whether an item is removable. When this function returns `false`, the remove\n   * button is not rendered and the user can't remove the item.\n   * By default, all items are removable.\n   */\n  isItemRemovable?: AttributeEditorProps.IsItemRemovableFunction<T>;\n\n  /**\n   * Determines whether the add button is disabled.\n   */\n  disableAddButton?: boolean;\n\n  /**\n   * Specifies the variant to use for the add button. By default a normal button is used.\n   * Use `inline-link` when using an attribute editor nested inside complex attribute editing\n   * with expandable sections.\n   */\n  addButtonVariant?: AttributeEditorProps.AddButtonVariant;\n\n  /**\n   * Defines the editor configuration. Each object in the array represents one form field in the row.\n   * If more than 6 attributes are specified, a `gridLayout` must be provided.\n   *\n   * * `label` (ReactNode) - Text label for the form field.\n   * * `info` (ReactNode) - Info link for the form field.\n   * * `errorText` ((item, itemIndex) => ReactNode) - Error message text to display as a control validation message.\n   *    It renders the form field as invalid if the returned value is not `null` or `undefined`.\n   * * `warningText` ((item, itemIndex) => ReactNode) - Warning message text to display as a control validation message.\n   *    It renders the form field in a warning state if the returned value is not `null` or `undefined`.\n   * * `constraintText` ((item, itemIndex) => ReactNode) - Text to display as a constraint message below the field.\n   * * `control` ((item, itemIndex) => ReactNode) - A control to use as the input for the field.\n   */\n  definition: ReadonlyArray<AttributeEditorProps.FieldDefinition<T>>;\n\n  /**\n   * Optionally specifies the layout of the attributes. By default, all attributes will be\n   * equally spaced and wrapped into multiple rows on smaller viewports.\n   *\n   * A `gridLayout` is an array of breakpoint definitions. Each definition consists of:\n   * - `rows` (`number[][]`): the rows in which to display the attributes. Each row consists of a list of numbers indicating\n   *   the relative width of each attribute. For example, `[[1, 1, 1, 1]]` is a single row of four evenly-spaced attributes,\n   *   or `[[1, 2], [1, 1, 1]]` splits five attributes onto two rows.\n   * - `breakpoint` (`string`): optionally specifies that the given entry should only be used when at least that much width is available.\n   * - `removeButton`: optionally configures the remove (or row action) button placement. If this is not provided, the button will be\n   *   placed at the end of a single row, or below if multiple rows are present. The `removeButton` property supports contains two properties:\n   *   - `ownRow` (`boolean`): forces the remove button onto its own row.\n   *   - `width` (`number | 'auto'`): a number indicating the relative width (equivalent to a `rows` entry), or 'auto' to fit to the button width.\n   */\n  gridLayout?: ReadonlyArray<AttributeEditorProps.GridLayout>;\n\n  /**\n   * Specifies a custom action trigger for each row, in place of the remove button.\n   * Only button and button dropdown components are supported.\n   * If you provide this, `removeButtonText`, `removeButtonAriaLabel`,\n   * and `onRemoveButtonClick` will be ignored.\n   * The trigger must be given the provided `ref` in order for `focusRemoveButton`\n   * to work.\n   * The function receives the following properties:\n   * - `item`: The item being rendered in the current row.\n   * - `itemIndex` (`number`): The index of the item.\n   * - `ref` (`ReactRef`): A React ref that should be passed to the rendered button.\n   * - `breakpoint` (`Breakpoint`): The current breakpoint, for responsive behavior.\n   * - `ownRow` (`boolean`): Whether the button is rendered on its own row.\n   */\n  customRowActions?: (props: AttributeEditorProps.RowActionsProps<T>) => React.ReactNode;\n\n  /**\n   * Called when add button is clicked.\n   */\n  onAddButtonClick?: NonCancelableEventHandler;\n\n  /**\n   * Called when remove button is clicked.\n   * The event `detail` contains the index of the corresponding item.\n   */\n  onRemoveButtonClick?: NonCancelableEventHandler<AttributeEditorProps.RemoveButtonClickDetail>;\n\n  /**\n   * An object containing all the necessary localized strings required by the component.\n   */\n  i18nStrings?: AttributeEditorProps.I18nStrings<T>;\n}\n"]}
{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../src/internal/analytics/interfaces.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nexport type FunnelType = 'single-page' | 'multi-page' | 'modal';\nexport type FlowType = 'create' | 'edit' | 'delete' | 'home' | 'dashboard' | 'view-resource';\n\ntype ErrorSubCategory =\n  | 'DATA_FORMAT_ISSUES'\n  | 'PARAMETER_VALIDATION_ISSUES'\n  | 'ACCESS_CONTROL_ISSUES'\n  | 'IDENTITY_MANAGEMENT_PROBLEMS'\n  | 'RESOURCE_STATE_ISSUES'\n  | 'RESOURCE_CAPACITY_PROBLEMS'\n  | 'CONNECTION_PROBLEMS'\n  | 'NETWORK_CONFIGURATION_ISSUES'\n  | 'RESOURCE_LIMIT_EXCEEDED'\n  | 'SERVICE_QUOTA_RESTRICTIONS'\n  | 'SERVICE_INTEGRATION_CONFLICTS'\n  | 'RESOURCE_CONFIGURATION_MISMATCHES'\n  | 'SERVICE_SPECIFIC_OPERATIONS'\n  | 'API_REQUEST_PROBLEMS'\n  | 'OTHER';\n\ntype ErrorCategory =\n  | 'INPUT_VALIDATION'\n  | 'PERMISSION_IAM'\n  | 'RESOURCE_AVAILABILITY'\n  | 'NETWORK_CONNECTIVITY'\n  | 'SERVICE_QUOTAS_LIMITS'\n  | 'CONFIGURATION_CONFLICTS'\n  | 'API_SPECIFIC'\n  | 'OTHER';\n\nexport interface ErrorContext {\n  errorCategory: ErrorCategory;\n  errorSubCategory: ErrorSubCategory;\n  errorMessage: string;\n}\n\nexport interface AnalyticsMetadata {\n  instanceIdentifier?: string;\n  flowType?: FlowType;\n  errorContext?: ErrorContext;\n  resourceType?: string;\n}\n\n// Common properties for all funnels\ninterface BaseFunnelProps {\n  funnelIdentifier?: string;\n  funnelInteractionId: string;\n  currentDocument?: Document;\n}\n\ninterface FunnelErrorProps extends BaseFunnelProps {\n  errorContext?: AnalyticsMetadata['errorContext'];\n}\n\nexport interface FunnelStartProps extends Omit<BaseFunnelProps, 'funnelInteractionId'> {\n  flowType?: FlowType;\n  resourceType?: string;\n  funnelName: string;\n  funnelNameSelector: string;\n  totalFunnelSteps: number;\n  optionalStepNumbers: number[];\n  stepConfiguration?: StepConfiguration[];\n  funnelType: FunnelType;\n  funnelVersion: string;\n  componentVersion: string;\n  componentTheme: string;\n  funnelInteractionId?: string;\n}\n\n// A function type for a generic funnel method\ntype FunnelMethod<T extends BaseFunnelProps> = (props: T) => void;\n\n// Interface for table interaction method props\nexport interface TableInteractionProps {\n  // Time to render table in either no data state or with data after user actions like filtering, pagination.\n  // in milliseconds\n  interactionTime: number;\n  // User action like sorting, filtering, pagination which triggered new data load in table.\n  userAction: string;\n  // Unique instance identifier for the component.\n  // Default: ''\n  instanceIdentifier?: string;\n  // Component identifier like table header which can be used to identify the table\n  // Default: ''\n  componentIdentifier?: string;\n  // Number of resources in table after user action\n  // Default: 0\n  noOfResourcesInTable?: number;\n  // Additional metadata related to user interaction\n  interactionMetadata?: string;\n}\n\ntype TableInteractionMethod = (props: TableInteractionProps) => void;\n\n// A function type specifically for funnelStart\ntype FunnelStartMethod = (props: FunnelStartProps) => string;\n\n// Define individual method props by extending the base\nexport interface FunnelStepProps extends BaseFunnelProps {\n  stepIdentifier?: string;\n  stepNumber: number;\n  stepName?: string | undefined;\n  stepNameSelector?: string;\n  subStepAllSelector: string;\n  totalSubSteps?: number;\n  subStepConfiguration?: SubStepConfiguration[];\n}\n\ninterface FunnelStepNavigationProps extends FunnelStepProps {\n  destinationStepNumber: number;\n  navigationType: string;\n  totalSubSteps?: number;\n}\n\ninterface FunnelStepErrorProps extends FunnelStepProps {\n  errorContext?: AnalyticsMetadata['errorContext'];\n  stepErrorSelector: string;\n}\n\ninterface FunnelSubStepProps extends FunnelStepProps {\n  subStepIdentifier?: string;\n  subStepSelector: string;\n  subStepName?: string | undefined;\n  subStepNameSelector: string;\n  subStepNumber?: number;\n}\n\ninterface OptionalFunnelSubStepErrorProps extends FunnelSubStepProps {\n  subStepErrorContext?: AnalyticsMetadata['errorContext'];\n  fieldIdentifier?: string;\n  errorContext?: AnalyticsMetadata['errorContext'];\n  fieldLabelSelector?: string;\n  fieldErrorSelector?: string;\n}\n\ninterface FunnelLinkInteractionProps extends FunnelSubStepProps {\n  elementSelector: string;\n}\n\ninterface FunnelChangeProps extends BaseFunnelProps {\n  stepConfiguration: StepConfiguration[];\n}\n\nexport interface StepConfiguration {\n  number: number;\n  name: string;\n  isOptional: boolean;\n  stepIdentifier?: string;\n}\n\nexport interface SubStepConfiguration {\n  number: number;\n  name: string;\n  subStepIdentifier?: string;\n}\n\n// Define the interface using the method type\nexport interface IFunnelMetrics {\n  funnelStart: FunnelStartMethod;\n  funnelError: FunnelMethod<FunnelErrorProps>;\n  funnelComplete: FunnelMethod<BaseFunnelProps>;\n  funnelSuccessful: FunnelMethod<BaseFunnelProps>;\n  funnelCancelled: FunnelMethod<BaseFunnelProps>;\n  funnelChange: FunnelMethod<FunnelChangeProps>;\n\n  funnelStepStart: FunnelMethod<FunnelStepProps>;\n  funnelStepComplete: FunnelMethod<FunnelStepProps>;\n  funnelStepNavigation: FunnelMethod<FunnelStepNavigationProps>;\n  funnelStepError: FunnelMethod<FunnelStepErrorProps>;\n  funnelStepChange: FunnelMethod<FunnelStepProps>;\n\n  funnelSubStepStart: FunnelMethod<FunnelSubStepProps>;\n  funnelSubStepComplete: FunnelMethod<FunnelSubStepProps>;\n  funnelSubStepError: FunnelMethod<OptionalFunnelSubStepErrorProps>;\n\n  helpPanelInteracted: FunnelMethod<FunnelLinkInteractionProps>;\n  externalLinkInteracted: FunnelMethod<FunnelLinkInteractionProps>;\n}\n\n// Interface for task completion method props\nexport interface TaskCompletionDataProps {\n  // Time taken to respond to customers after customers submit the form\n  // in milliseconds\n  timeToRespondAfterFormSubmit: number;\n  // Unique identifier for the task aka funnelInteractionId.\n  // Default: ''\n  taskInteractionId: string;\n  // Task name identifier to identify the task aka funnelName\n  // Default: ''\n  taskIdentifier?: string;\n  // To identify create or edit flow\n  // Default: ''\n  taskFlowType?: string;\n  //\"single-page\" | \"multi-page\"\n  // Default: ''\n  taskType?: FunnelType;\n  // Additional metadata related to completion such as success or error\n  completionMetadata?: string;\n}\n\ntype TaskCompletionDataMethod = (props: TaskCompletionDataProps) => void;\n\nexport interface IPerformanceMetrics {\n  tableInteraction: TableInteractionMethod;\n  taskCompletionData: TaskCompletionDataMethod;\n  modalPerformanceData: ModalPerformanceDataMethod;\n}\n\ntype JSONValue = string | number | boolean | null | undefined;\nexport interface JSONObject {\n  [key: string]: JSONObject | JSONValue | JSONObject[] | JSONValue[];\n}\n\ninterface ComponentMountedProps {\n  componentName: string;\n  taskInteractionId?: string;\n  componentConfiguration: JSONObject;\n}\n\ninterface ComponentUpdatedProps extends ComponentMountedProps {\n  taskInteractionId: string;\n  actionType: string;\n}\n\ntype ComponentMountedMethod = (props: ComponentMountedProps) => string;\ntype ComponentUpdatedMethod = (props: ComponentUpdatedProps) => void;\nexport interface IComponentMetrics {\n  componentMounted: ComponentMountedMethod;\n  componentUpdated: ComponentUpdatedMethod;\n}\n\n// Interface for modal metrics\nexport interface ModalPerformanceDataProps {\n  // Time span from when the modal begins loading to when the primary button or modal has finished loading.\n  // in milliseconds\n  timeToContentReadyInModal: number;\n  // Unique instance identifier for the component.\n  // Default: ''\n  instanceIdentifier?: string;\n  // Component identifier like modal header which can be used to identify the modal\n  // Default: ''\n  componentIdentifier?: string;\n  // Additional metadata related to modal\n  modalMetadata?: string;\n}\n\ntype ModalPerformanceDataMethod = (props: ModalPerformanceDataProps) => void;\n"]}
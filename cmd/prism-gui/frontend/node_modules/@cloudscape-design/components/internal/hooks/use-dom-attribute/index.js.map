{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/internal/hooks/use-dom-attribute/index.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AAEtC,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAE1C;;GAEG;AACH,MAAM,UAAU,eAAe,CAAC,UAAwC,EAAE,aAAqB,EAAE,KAAa;IAC5G,MAAM,iBAAiB,GAAG,MAAM,EAAsB,CAAC;IAEvD,SAAS,CAAC,GAAG,EAAE;;QACb,0FAA0F;QAC1F,iBAAiB,CAAC,OAAO,GAAG,KAAK,CAAC;QAClC,MAAA,UAAU,CAAC,OAAO,0CAAE,YAAY,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;IACzD,CAAC,EAAE,CAAC,aAAa,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;IAEvC,OAAO;QACL,CAAC,aAAa,CAAC,EAAE,iBAAiB,CAAC,OAAO;KAC3C,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useEffect, useRef } from 'react';\n\n/*\n * This hook allows setting an DOM attribute after the first render, without rerendering the component.\n */\nexport function useDOMAttribute(elementRef: React.RefObject<HTMLElement>, attributeName: string, value: string) {\n  const attributeValueRef = useRef<string | undefined>();\n\n  useEffect(() => {\n    // With this effect, we apply the attribute only on the client, to avoid hydration errors.\n    attributeValueRef.current = value;\n    elementRef.current?.setAttribute(attributeName, value);\n  }, [attributeName, value, elementRef]);\n\n  return {\n    [attributeName]: attributeValueRef.current,\n  };\n}\n"]}
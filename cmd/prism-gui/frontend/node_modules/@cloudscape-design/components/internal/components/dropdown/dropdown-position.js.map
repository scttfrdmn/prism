{"version":3,"file":"dropdown-position.js","sourceRoot":"","sources":["../../../../../src/internal/components/dropdown/dropdown-position.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AAatC,qFAAqF;AACrF,MAAM,UAAU,uCAAuC,CAAC,EACtD,QAAQ,EACR,eAAe,EACf,WAAW,EACX,QAAQ,GAMT;IACC,yFAAyF;IACzF,yDAAyD;IACzD,MAAM,sBAAsB,GAAG,QAAQ,CAAC;IAExC,2FAA2F;IAC3F,mEAAmE;IACnE,2GAA2G;IAC3G,MAAM,oBAAoB,GAAG,sBAAsB,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7F,MAAM,sBAAsB,GAAG,sBAAsB,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IAEhG,eAAe,CAAC,KAAK,CAAC,QAAQ,GAAG,sBAAsB,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC;IAE/E,IAAI,QAAQ,CAAC,cAAc,EAAE;QAC3B,eAAe,CAAC,KAAK,CAAC,aAAa,GAAG,eAAe,oBAAoB,GAAG,WAAW,CAAC,eAAe,KAAK,CAAC;KAC9G;SAAM;QACL,eAAe,CAAC,KAAK,CAAC,eAAe,GAAG,GAAG,oBAAoB,GAAG,WAAW,CAAC,aAAa,IAAI,CAAC;KACjG;IACD,IAAI,QAAQ,CAAC,eAAe,EAAE;QAC5B,eAAe,CAAC,KAAK,CAAC,gBAAgB,GAAG,QAAQ,sBAAsB,GAAG,WAAW,CAAC,cAAc,QAAQ,QAAQ,CAAC,UAAU,GAAG,CAAC;KACpI;SAAM;QACL,eAAe,CAAC,KAAK,CAAC,gBAAgB,GAAG,GAAG,sBAAsB,GAAG,WAAW,CAAC,gBAAgB,IAAI,CAAC;KACvG;AACH,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { DropdownPosition } from './dropdown-fit-handler';\n\nexport interface LogicalDOMRect {\n  blockSize: number;\n  inlineSize: number;\n  insetBlockStart: number;\n  insetBlockEnd: number;\n  insetInlineStart: number;\n  insetInlineEnd: number;\n}\n\n// Applies its position to the dropdown element when expandToViewport is set to true.\nexport function applyDropdownPositionRelativeToViewport({\n  position,\n  dropdownElement,\n  triggerRect,\n  isMobile,\n}: {\n  position: DropdownPosition;\n  dropdownElement: HTMLElement;\n  triggerRect: LogicalDOMRect;\n  isMobile: boolean;\n}) {\n  // Fixed positions are not respected in iOS when the virtual keyboard is being displayed.\n  // For this reason we use absolute positioning in mobile.\n  const useAbsolutePositioning = isMobile;\n\n  // Since when using expandToViewport=true the dropdown is attached to the root of the body,\n  // the same coordinates can be used for fixed or absolute position,\n  // except when using absolute position we need to take into account the scroll position of the body itself.\n  const verticalScrollOffset = useAbsolutePositioning ? document.documentElement.scrollTop : 0;\n  const horizontalScrollOffset = useAbsolutePositioning ? document.documentElement.scrollLeft : 0;\n\n  dropdownElement.style.position = useAbsolutePositioning ? 'absolute' : 'fixed';\n\n  if (position.dropBlockStart) {\n    dropdownElement.style.insetBlockEnd = `calc(100% - ${verticalScrollOffset + triggerRect.insetBlockStart}px)`;\n  } else {\n    dropdownElement.style.insetBlockStart = `${verticalScrollOffset + triggerRect.insetBlockEnd}px`;\n  }\n  if (position.dropInlineStart) {\n    dropdownElement.style.insetInlineStart = `calc(${horizontalScrollOffset + triggerRect.insetInlineEnd}px - ${position.inlineSize})`;\n  } else {\n    dropdownElement.style.insetInlineStart = `${horizontalScrollOffset + triggerRect.insetInlineStart}px`;\n  }\n}\n"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/internal/components/drag-handle/index.tsx"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAE1C,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AACpD,OAAO,iBAAiB,MAAM,wBAAwB,CAAC;AACvD,OAAO,gBAAgB,MAAM,UAAU,CAAC;AAKxC,MAAM,kBAAkB,GAAG,UAAU,CACnC,CACE,EAqBkB,EAClB,GAAuB,EACvB,EAAE;QAvBF,EACE,OAAO,EACP,IAAI,EACJ,SAAS,EACT,cAAc,EACd,eAAe,EACf,WAAW,EACX,SAAS,EACT,QAAQ,EACR,UAAU,GAAG,EAAE,EACf,aAAa,EACb,OAAO,EACP,SAAS,EACT,gBAAgB,EAChB,WAAW,EACX,kBAAkB,EAClB,qBAAqB,EACrB,iBAAiB,GAAG,KAAK,EACzB,kBAAkB,GAAG,CAAC,EACtB,MAAM,OAEU,EADb,IAAI,cApBT,2SAqBC,CADQ;IAIT,MAAM,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;IAErC,OAAO,CACL,oBAAC,iBAAiB,IAChB,UAAU,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,EACvC,WAAW,EAAE,WAAW,EACxB,gBAAgB,EAAE,gBAAgB,EAClC,WAAW,EAAE,WAAW,EACxB,kBAAkB,EAAE,kBAAkB,EACtC,qBAAqB,EAAE,qBAAqB,EAC5C,iBAAiB,EAAE,iBAAiB,EACpC,kBAAkB,EAAE,kBAAkB;QAEtC,oBAAC,gBAAgB,IACf,GAAG,EAAE,GAAG,EACR,SAAS,EAAE,SAAS,CAAC,SAAS,EAC9B,OAAO,EAAE,OAAO,EAChB,IAAI,EAAE,IAAI,EACV,SAAS,EAAE,SAAS,EACpB,cAAc,EAAE,cAAc,EAC9B,eAAe,EAAE,eAAe,EAChC,SAAS,EAAE,SAAS,EACpB,QAAQ,EAAE,QAAQ,EAClB,MAAM,EAAE,MAAM,EACd,aAAa,EAAE,aAAa,EAC5B,OAAO,EAAE,OAAO,EAChB,SAAS,EAAE,SAAS,GACpB,CACgB,CACrB,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,eAAe,kBAAkB,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef } from 'react';\n\nimport { getBaseProps } from '../../base-component';\nimport DragHandleWrapper from '../drag-handle-wrapper';\nimport DragHandleButton from './button';\nimport { DragHandleProps } from './interfaces';\n\nexport { DragHandleProps };\n\nconst InternalDragHandle = forwardRef(\n  (\n    {\n      variant,\n      size,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaDescribedby,\n      tooltipText,\n      ariaValue,\n      disabled,\n      directions = {},\n      onPointerDown,\n      onClick,\n      onKeyDown,\n      onDirectionClick,\n      triggerMode,\n      initialShowButtons,\n      controlledShowButtons,\n      hideButtonsOnDrag = false,\n      clickDragThreshold = 3,\n      active,\n      ...rest\n    }: DragHandleProps,\n    ref: React.Ref<Element>\n  ) => {\n    const baseProps = getBaseProps(rest);\n\n    return (\n      <DragHandleWrapper\n        directions={!disabled ? directions : {}}\n        tooltipText={tooltipText}\n        onDirectionClick={onDirectionClick}\n        triggerMode={triggerMode}\n        initialShowButtons={initialShowButtons}\n        controlledShowButtons={controlledShowButtons}\n        hideButtonsOnDrag={hideButtonsOnDrag}\n        clickDragThreshold={clickDragThreshold}\n      >\n        <DragHandleButton\n          ref={ref}\n          className={baseProps.className}\n          variant={variant}\n          size={size}\n          ariaLabel={ariaLabel}\n          ariaLabelledBy={ariaLabelledBy}\n          ariaDescribedby={ariaDescribedby}\n          ariaValue={ariaValue}\n          disabled={disabled}\n          active={active}\n          onPointerDown={onPointerDown}\n          onClick={onClick}\n          onKeyDown={onKeyDown}\n        />\n      </DragHandleWrapper>\n    );\n  }\n);\n\nexport default InternalDragHandle;\n"]}
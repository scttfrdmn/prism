import React, { ReactNode } from 'react';
export type NativeAttributes<T extends React.HTMLAttributes<HTMLElement>> = (Omit<T, 'children'> & Record<`data-${string}`, string>) | undefined;
export type SkipWarnings = boolean | string[];
type NativeAttributesProps<AT extends React.HTMLAttributes<HTMLElement>> = {
  tag: string;
  children?: ReactNode;
  skipWarnings?: SkipWarnings;
  nativeAttributes: NativeAttributes<AT>;
  componentName: string;
} & NativeAttributes<AT>;
interface ForwardRefType {
  <ET extends HTMLElement, AT extends React.HTMLAttributes<ET>>(props: NativeAttributesProps<AT> & {
    ref?: React.Ref<ET>;
  }): JSX.Element;
}
export declare function processAttributes<ET extends HTMLElement, AT extends React.HTMLAttributes<ET>>(rest: Omit<NativeAttributesProps<AT>, 'children' | 'tag' | 'skipWarnings' | 'componentName' | 'nativeAttributes'>, nativeAttributes: NativeAttributes<AT>, componentName: string, skipWarnings?: SkipWarnings): any;
declare const _default: ForwardRefType;
export default _default;
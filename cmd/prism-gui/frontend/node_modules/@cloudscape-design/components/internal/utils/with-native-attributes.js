import { __rest } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import clsx from 'clsx';
import { warnOnce } from '@cloudscape-design/component-toolkit/internal';
export function processAttributes(rest, nativeAttributes, componentName, skipWarnings) {
    return Object.entries(nativeAttributes || {}).reduce((acc, [key, value]) => {
        // concatenate className
        if (key === 'className') {
            acc[key] = clsx(rest.className, value);
            // merge style
        }
        else if (key === 'style') {
            acc[key] = Object.assign(Object.assign({}, rest.style), value);
            // chain event handlers
        }
        else if (key.match(/^on[A-Z]/) && typeof value === 'function' && key in rest) {
            acc[key] = (event) => {
                value(event);
                if (!event.defaultPrevented) {
                    rest[key](event);
                }
            };
            // override other attributes, warning if it already exists
        }
        else {
            if (key in rest && (!skipWarnings || (skipWarnings !== true && !skipWarnings.includes(key)))) {
                warnOnce(componentName, `Overriding native attribute [${key}] which has a Cloudscape-provided value`);
            }
            acc[key] = value;
        }
        return acc;
    }, Object.assign({}, rest));
}
export default React.forwardRef((_a, ref) => {
    var { tag, nativeAttributes, children, skipWarnings, componentName } = _a, rest = __rest(_a, ["tag", "nativeAttributes", "children", "skipWarnings", "componentName"]);
    const Tag = tag;
    const processedAttributes = processAttributes(rest, nativeAttributes, componentName, skipWarnings);
    return (React.createElement(Tag, Object.assign({}, processedAttributes, { ref: ref }), children));
});
//# sourceMappingURL=with-native-attributes.js.map
{"version":3,"file":"with-native-attributes.js","sourceRoot":"","sources":["../../../../src/internal/utils/with-native-attributes.tsx"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAoB,MAAM,OAAO,CAAC;AACzC,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,EAAE,QAAQ,EAAE,MAAM,+CAA+C,CAAC;AAqBzE,MAAM,UAAU,iBAAiB,CAC/B,IAAiH,EACjH,gBAAsC,EACtC,aAAqB,EACrB,YAA2B;IAE3B,OAAO,MAAM,CAAC,OAAO,CAAC,gBAAgB,IAAI,EAAE,CAAC,CAAC,MAAM,CAClD,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;QACpB,wBAAwB;QACxB,IAAI,GAAG,KAAK,WAAW,EAAE;YACvB,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAEvC,cAAc;SACf;aAAM,IAAI,GAAG,KAAK,OAAO,EAAE;YAC1B,GAAG,CAAC,GAAG,CAAC,mCAAQ,IAAI,CAAC,KAAK,GAAK,KAAK,CAAE,CAAC;YAEvC,uBAAuB;SACxB;aAAM,IAAI,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,OAAO,KAAK,KAAK,UAAU,IAAI,GAAG,IAAI,IAAI,EAAE;YAC9E,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAY,EAAE,EAAE;gBAC1B,KAAK,CAAC,KAAK,CAAC,CAAC;gBACb,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE;oBAC1B,IAAY,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;iBAC3B;YACH,CAAC,CAAC;YAEF,0DAA0D;SAC3D;aAAM;YACL,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,CAAC,YAAY,IAAI,CAAC,YAAY,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBAC5F,QAAQ,CAAC,aAAa,EAAE,gCAAgC,GAAG,yCAAyC,CAAC,CAAC;aACvG;YACD,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SAClB;QACD,OAAO,GAAG,CAAC;IACb,CAAC,EACD,kBAAK,IAAI,CAAS,CACnB,CAAC;AACJ,CAAC;AAED,eAAe,KAAK,CAAC,UAAU,CAC7B,CACE,EAAoG,EACpG,GAAkB,EAClB,EAAE;QAFF,EAAE,GAAG,EAAE,gBAAgB,EAAE,QAAQ,EAAE,YAAY,EAAE,aAAa,OAAsC,EAAjC,IAAI,cAAvE,wEAAyE,CAAF;IAGvE,MAAM,GAAG,GAAG,GAAG,CAAC;IAEhB,MAAM,mBAAmB,GAAG,iBAAiB,CAAS,IAAI,EAAE,gBAAgB,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC;IAE3G,OAAO,CACL,oBAAC,GAAG,oBAAK,mBAAmB,IAAE,GAAG,EAAE,GAAG,KACnC,QAAQ,CACL,CACP,CAAC;AACJ,CAAC,CACgB,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { ReactNode } from 'react';\nimport clsx from 'clsx';\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nexport type NativeAttributes<T extends React.HTMLAttributes<HTMLElement>> =\n  | (Omit<T, 'children'> & Record<`data-${string}`, string>)\n  | undefined;\n\nexport type SkipWarnings = boolean | string[];\n\ntype NativeAttributesProps<AT extends React.HTMLAttributes<HTMLElement>> = {\n  tag: string;\n  children?: ReactNode;\n  skipWarnings?: SkipWarnings;\n  nativeAttributes: NativeAttributes<AT>;\n  componentName: string;\n} & NativeAttributes<AT>;\ninterface ForwardRefType {\n  <ET extends HTMLElement, AT extends React.HTMLAttributes<ET>>(\n    props: NativeAttributesProps<AT> & { ref?: React.Ref<ET> }\n  ): JSX.Element;\n}\n\nexport function processAttributes<ET extends HTMLElement, AT extends React.HTMLAttributes<ET>>(\n  rest: Omit<NativeAttributesProps<AT>, 'children' | 'tag' | 'skipWarnings' | 'componentName' | 'nativeAttributes'>,\n  nativeAttributes: NativeAttributes<AT>,\n  componentName: string,\n  skipWarnings?: SkipWarnings\n) {\n  return Object.entries(nativeAttributes || {}).reduce(\n    (acc, [key, value]) => {\n      // concatenate className\n      if (key === 'className') {\n        acc[key] = clsx(rest.className, value);\n\n        // merge style\n      } else if (key === 'style') {\n        acc[key] = { ...rest.style, ...value };\n\n        // chain event handlers\n      } else if (key.match(/^on[A-Z]/) && typeof value === 'function' && key in rest) {\n        acc[key] = (event: Event) => {\n          value(event);\n          if (!event.defaultPrevented) {\n            (rest as any)[key](event);\n          }\n        };\n\n        // override other attributes, warning if it already exists\n      } else {\n        if (key in rest && (!skipWarnings || (skipWarnings !== true && !skipWarnings.includes(key)))) {\n          warnOnce(componentName, `Overriding native attribute [${key}] which has a Cloudscape-provided value`);\n        }\n        acc[key] = value;\n      }\n      return acc;\n    },\n    { ...rest } as any\n  );\n}\n\nexport default React.forwardRef(\n  <ET extends HTMLElement, AT extends React.HTMLAttributes<ET>>(\n    { tag, nativeAttributes, children, skipWarnings, componentName, ...rest }: NativeAttributesProps<AT>,\n    ref: React.Ref<ET>\n  ) => {\n    const Tag = tag;\n\n    const processedAttributes = processAttributes<ET, AT>(rest, nativeAttributes, componentName, skipWarnings);\n\n    return (\n      <Tag {...processedAttributes} ref={ref}>\n        {children}\n      </Tag>\n    );\n  }\n) as ForwardRefType;\n"]}
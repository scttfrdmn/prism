{"version":3,"file":"format-date-time-with-offset.js","sourceRoot":"","sources":["../../../../../src/internal/utils/date-time/format-date-time-with-offset.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AAGtC,OAAO,aAAa,MAAM,mBAAmB,CAAC;AAC9C,OAAO,mBAAmB,MAAM,yBAAyB,CAAC;AAC1D,OAAO,EAAE,aAAa,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAE9D,MAAM,UAAU,wBAAwB,CAAC,EACvC,IAAI,EACJ,MAAM,EACN,cAAc,EACd,UAAU,EACV,MAAM,GAOP;IACC,MAAM,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;IACvC,MAAM,WAAW,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;IACzC,QAAQ,MAAM,EAAE;QACd,KAAK,gBAAgB,CAAC,CAAC;YACrB,OAAO,mBAAmB,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;SACnG;QACD,KAAK,SAAS,CAAC,CAAC;YACd,MAAM,SAAS,GAAG,aAAa,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC1G,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;SACxF;QACD,OAAO,CAAC,CAAC;YACP,OAAO,aAAa,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC;SACrF;KACF;AACH,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { DateRangePickerProps } from '../../../date-range-picker/interfaces';\nimport formatDateIso from './format-date-iso';\nimport formatDateLocalized from './format-date-localized';\nimport { isIsoDateOnly, isIsoMonthOnly } from './is-iso-only';\n\nexport function formatDateTimeWithOffset({\n  date,\n  format,\n  hideTimeOffset,\n  timeOffset,\n  locale,\n}: {\n  date: string;\n  format: DateRangePickerProps.AbsoluteFormat;\n  hideTimeOffset?: boolean;\n  timeOffset?: number;\n  locale?: string;\n}) {\n  const isDateOnly = isIsoDateOnly(date);\n  const isMonthOnly = isIsoMonthOnly(date);\n  switch (format) {\n    case 'long-localized': {\n      return formatDateLocalized({ date, hideTimeOffset, isDateOnly, isMonthOnly, locale, timeOffset });\n    }\n    case 'slashed': {\n      const formatted = formatDateIso({ date, hideTimeOffset, isDateOnly, isMonthOnly, timeOffset }).split('T');\n      return `${formatted[0].split('-').join('/')}${formatted[1] ? `T${formatted[1]}` : ''}`;\n    }\n    default: {\n      return formatDateIso({ date, hideTimeOffset, isDateOnly, isMonthOnly, timeOffset });\n    }\n  }\n}\n"]}
import { __rest } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useRef } from 'react';
import clsx from 'clsx';
import { getBaseProps } from '../internal/base-component';
import { fireNonCancelableEvent } from '../internal/events';
import { useControllable } from '../internal/hooks/use-controllable';
import { KeyboardNavigationProvider } from './keyboard-navigation';
import InternalTreeItem from './tree-item';
import { getAllVisibleItemsIndices } from './utils';
import styles from './styles.css.js';
import testUtilStyles from './test-classes/styles.css.js';
const InternalTreeView = (_a) => {
    var { expandedItems: controlledExpandedItems, items, renderItem, getItemId, getItemChildren, onItemToggle, renderItemToggleIcon, ariaLabel, ariaLabelledby, ariaDescribedby, i18nStrings, __internalRootRef } = _a, rest = __rest(_a, ["expandedItems", "items", "renderItem", "getItemId", "getItemChildren", "onItemToggle", "renderItemToggleIcon", "ariaLabel", "ariaLabelledby", "ariaDescribedby", "i18nStrings", "__internalRootRef"]);
    const baseProps = getBaseProps(rest);
    const [expandedItems, setExpandedItems] = useControllable(controlledExpandedItems, onItemToggle, [], {
        componentName: 'TreeView',
        controlledProp: 'expandedItems',
        changeHandler: 'onItemToggle',
    });
    const treeViewRefObject = useRef(null);
    const allVisibleItemsIndices = getAllVisibleItemsIndices({ items, expandedItems, getItemId, getItemChildren });
    const onToggle = ({ id, item, expanded }) => {
        if (expanded) {
            setExpandedItems([...(expandedItems || []), id]);
        }
        else {
            setExpandedItems((expandedItems || []).filter(expandedId => expandedId !== id));
        }
        fireNonCancelableEvent(onItemToggle, { id, item, expanded });
    };
    return (React.createElement("div", Object.assign({}, baseProps, { ref: __internalRootRef, className: clsx(baseProps.className, styles.root, testUtilStyles.root) }),
        React.createElement(KeyboardNavigationProvider, { getTreeView: () => treeViewRefObject.current },
            React.createElement("ul", { role: "tree", ref: treeViewRefObject, className: clsx(styles.tree, testUtilStyles.tree), "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, "aria-describedby": ariaDescribedby }, items.map((item, index) => {
                const itemId = getItemId(item, index);
                return (React.createElement(InternalTreeItem, { key: itemId, item: item, level: 1, index: index, expandedItems: expandedItems, i18nStrings: i18nStrings, onItemToggle: onToggle, renderItem: renderItem, getItemId: getItemId, getItemChildren: getItemChildren, renderItemToggleIcon: renderItemToggleIcon, allVisibleItemsIndices: allVisibleItemsIndices }));
            })))));
};
export default InternalTreeView;
//# sourceMappingURL=internal.js.map
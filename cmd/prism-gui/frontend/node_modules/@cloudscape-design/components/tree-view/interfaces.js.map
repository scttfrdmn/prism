{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/tree-view/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { BaseComponentProps } from '../internal/base-component';\nimport { NonCancelableEventHandler } from '../internal/events';\n\nexport interface TreeViewProps<T = any> extends BaseComponentProps {\n  /**\n   * Specifies the top-level items to display in the tree view. Use `getItemChildren` to provide nested items.\n   */\n  items: ReadonlyArray<T>;\n\n  /**\n   * Use this property to map your data to tree view items. This property must return an object with the following properties:\n   * * `content` (ReactNode) - The content of the item.\n   * * `icon` (ReactNode) - (Optional) The icon of the item.\n   * * `secondaryContent` (ReactNode) - (Optional) Secondary content of the item, such as a description of the item.\n   * * `actions` (ReactNode) - (Optional) Actions related to the item. Use [button](/components/button/?tabId=playground&example=inline-icon-button) with inline-icon or inline-link variants. For items with multiple actions, use [button dropdown](/components/button-dropdown/?tabId=playground&example=inline-icon-button-dropdown) with the inline-icon variant.\n   * * `announcementLabel` (string) - (Optional) An announcement label for the item, used for labeling the toggle button. By default, the `content` is used. Make sure to provide the `announcementLabel` if `content` is not a string.\n   */\n  renderItem: (item: T, index: number) => TreeViewProps.TreeItem;\n\n  /**\n   * Provides a unique identifier for each tree view item.\n   */\n  getItemId: (item: T, index: number) => string;\n\n  /**\n   * Specifies the nested items that are displayed when a tree view item gets expanded.\n   */\n  getItemChildren: (item: T, index: number) => ReadonlyArray<T> | undefined;\n\n  /**\n   * Provides the IDs of the expanded tree view items. It controls whether an item is expanded or collapsed.\n   */\n  expandedItems?: ReadonlyArray<string>;\n\n  /**\n   * Provides an `aria-label` to the tree view that screen readers can read (for accessibility).\n   * Don't use `ariaLabel` and `ariaLabelledby` at the same time.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Sets the `aria-labelledby` property on the tree view.\n   * If there's a visible label element that you can reference, use this instead of `ariaLabel`.\n   * Don't use `ariaLabel` and `ariaLabelledby` at the same time.\n   */\n  ariaLabelledby?: string;\n\n  /**\n   * Sets the `aria-describedby` property on the tree view.\n   */\n  ariaDescribedby?: string;\n\n  /**\n   * Called when an item expands or collapses.\n   */\n  onItemToggle?: NonCancelableEventHandler<TreeViewProps.ItemToggleDetail<T>>;\n\n  /**\n   * An object containing all the necessary localized strings required by the component.\n   * @i18n\n   */\n  i18nStrings?: TreeViewProps.I18nStrings<T>;\n\n  /**\n   * Use this property to display a custom icon in the toggle button.\n   */\n  renderItemToggleIcon?: (data: TreeViewProps.ItemToggleRenderIconData) => React.ReactNode;\n}\n\nexport namespace TreeViewProps {\n  export interface TreeItem {\n    content: React.ReactNode;\n    icon?: React.ReactNode;\n    secondaryContent?: React.ReactNode;\n    actions?: React.ReactNode;\n    announcementLabel?: string;\n  }\n\n  export interface ItemToggleDetail<T> {\n    id: string;\n    item: T;\n    expanded: boolean;\n  }\n\n  export interface ItemToggleRenderIconData {\n    expanded: boolean;\n  }\n\n  export interface I18nStrings<T> {\n    collapseButtonLabel?: (item: T) => string;\n    expandButtonLabel?: (item: T) => string;\n  }\n}\n"]}
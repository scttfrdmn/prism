/// <reference types="react" />
import { FlashbarProps, InternalFlashbarProps } from './interfaces';
export declare const handleFlashDismissedInternal: (dismissedId: string | undefined, items: ReadonlyArray<FlashbarProps.MessageDefinition> | undefined, refCurrent: HTMLDivElement | null, flashRefsCurrent: Record<string | number, HTMLDivElement | null>) => void;
export declare function useFlashbar({
  items,
  onItemsAdded,
  onItemsChanged,
  onItemsRemoved,
  __internalRootRef,
  ...restProps
}: InternalFlashbarProps & {
  onItemsAdded?: (items: FlashbarProps.MessageDefinition[]) => void;
  onItemsRemoved?: (items: FlashbarProps.MessageDefinition[]) => void;
  onItemsChanged?: (options?: {
    allItemsHaveId?: boolean;
    isReducedMotion?: boolean;
  }) => void;
}): {
  allItemsHaveId: boolean;
  baseProps: import("../internal/base-component").BaseComponentProps;
  isReducedMotion: boolean;
  isVisualRefresh: boolean;
  mergedRef: ((instance: any) => void) | null;
  ref: import("react").MutableRefObject<HTMLDivElement | null>;
  flashRefs: import("react").MutableRefObject<Record<string | number, HTMLDivElement | null>>;
  handleFlashDismissed: (dismissedId?: string) => void;
};
import { createFilterPredicate } from './filter.js';
import { createPropertyFilterPredicate } from './property-filter.js';
import { createComparator } from './sort.js';
import { createPageProps } from './pagination.js';
import { ItemsTree } from './items-tree.js';
import { composeFilters } from './compose-filters.js';
export function processItems(items, { filteringText, sortingState, currentPageIndex, propertyFilteringQuery }, { filtering, sorting, pagination, propertyFiltering, expandableRows }) {
    const itemsTree = new ItemsTree(items, expandableRows);
    const filterPredicate = composeFilters(createPropertyFilterPredicate(propertyFiltering, propertyFilteringQuery), createFilterPredicate(filtering, filteringText));
    if (filterPredicate) {
        itemsTree.filter(filterPredicate);
    }
    const comparator = createComparator(sorting, sortingState);
    if (comparator) {
        itemsTree.sort(comparator);
    }
    const allPageItems = itemsTree.getItems();
    const filteredItemsCount = filterPredicate ? itemsTree.getSize() : undefined;
    const pageProps = createPageProps(pagination, currentPageIndex, allPageItems);
    if (pageProps) {
        return {
            items: allPageItems.slice((pageProps.pageIndex - 1) * pageProps.pageSize, pageProps.pageIndex * pageProps.pageSize),
            allPageItems: allPageItems,
            filteredItemsCount,
            pagesCount: pageProps === null || pageProps === void 0 ? void 0 : pageProps.pagesCount,
            actualPageIndex: pageProps === null || pageProps === void 0 ? void 0 : pageProps.pageIndex,
            itemsTree,
        };
    }
    return {
        items: allPageItems,
        allPageItems: allPageItems,
        filteredItemsCount,
        pagesCount: undefined,
        actualPageIndex: undefined,
        itemsTree,
    };
}
export const getTrackableValue = (trackBy, item) => {
    if (!trackBy) {
        return item;
    }
    if (typeof trackBy === 'function') {
        return trackBy(item);
    }
    return item[trackBy];
};
export const processSelectedItems = (items, selectedItems, trackBy) => {
    const selectedSet = new Set();
    selectedItems.forEach(item => selectedSet.add(getTrackableValue(trackBy, item)));
    return items.filter(item => selectedSet.has(getTrackableValue(trackBy, item)));
};
export const itemsAreEqual = (items1, items2, trackBy) => {
    if (items1.length !== items2.length) {
        return false;
    }
    const set1 = new Set();
    items1.forEach(item => set1.add(getTrackableValue(trackBy, item)));
    return items2.every(item => set1.has(getTrackableValue(trackBy, item)));
};

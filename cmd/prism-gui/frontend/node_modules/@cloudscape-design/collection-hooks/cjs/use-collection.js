"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCollection = useCollection;
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const react_1 = require("react");
const index_js_1 = require("./operations/index.js");
const utils_js_1 = require("./utils.js");
const use_collection_state_js_1 = require("./use-collection-state.js");
function useCollection(allItems, options) {
    const collectionRef = (0, react_1.useRef)(null);
    const [state, actions] = (0, use_collection_state_js_1.useCollectionState)(options, collectionRef);
    const { items, allPageItems, pagesCount, filteredItemsCount, actualPageIndex, itemsTree } = (0, index_js_1.processItems)(allItems, state, options);
    const expandedItemsSet = new Set();
    if (options.expandableRows) {
        for (const item of state.expandedItems) {
            expandedItemsSet.add(options.expandableRows.getId(item));
        }
    }
    let visibleItems = items;
    if (options.expandableRows) {
        const flatItems = new Array();
        const getId = options.expandableRows.getId;
        const traverse = (items) => {
            for (const item of items) {
                flatItems.push(item);
                if (expandedItemsSet.has(getId(item))) {
                    traverse(itemsTree.getChildren(item));
                }
            }
        };
        traverse(items);
        visibleItems = flatItems;
    }
    // Removing selected items that are no longer present in items unless keepSelection=true.
    if (options.selection && !options.selection.keepSelection) {
        const newSelectedItems = (0, index_js_1.processSelectedItems)(visibleItems, state.selectedItems, options.selection.trackBy);
        if (!(0, index_js_1.itemsAreEqual)(newSelectedItems, state.selectedItems, options.selection.trackBy)) {
            // This is a recommended pattern for how to handle the state, dependent on the incoming props
            // https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops
            actions.setSelectedItems(newSelectedItems);
        }
    }
    // Removing expanded items that are no longer present in items.
    if (options.expandableRows) {
        const newExpandedItems = visibleItems.filter(item => expandedItemsSet.has(options.expandableRows.getId(item)));
        if (!(0, index_js_1.itemsAreEqual)(newExpandedItems, state.expandedItems, options.expandableRows.getId)) {
            actions.setExpandedItems(newExpandedItems);
        }
    }
    return Object.assign({ items,
        allPageItems,
        filteredItemsCount,
        actions }, (0, utils_js_1.createSyncProps)(options, state, actions, collectionRef, {
        actualPageIndex,
        pagesCount,
        allItems,
        allPageItems,
        itemsTree,
    }));
}

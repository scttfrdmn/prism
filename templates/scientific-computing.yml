name: "Scientific Computing Environment"
base: "ubuntu-22.04-server-lts"
description: "Comprehensive scientific computing stack with R, Python, Julia and common libraries"

build_steps:
  - name: "System updates"
    script: |
      apt-get update -y && apt-get upgrade -y
      apt-get install -y build-essential curl wget software-properties-common git
      apt-get install -y cmake pkg-config autoconf automake
      apt-get install -y libopenblas-dev liblapack-dev gfortran

  - name: "Install Python scientific stack"
    script: |
      apt-get install -y python3 python3-pip python3-dev python3-venv
      python3 -m venv /opt/sci_env
      
      # Install Python scientific packages
      /opt/sci_env/bin/pip install --upgrade pip
      /opt/sci_env/bin/pip install numpy scipy pandas matplotlib scikit-learn
      /opt/sci_env/bin/pip install jupyterlab notebook ipywidgets
      
      # Specialized libraries
      /opt/sci_env/bin/pip install sympy statsmodels networkx scikit-image
      /opt/sci_env/bin/pip install biopython nibabel nltk gensim

  - name: "Install R and RStudio"
    script: |
      # Add R repository
      apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
      add-apt-repository "deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/"
      apt-get update -y
      
      # Install R
      apt-get install -y r-base r-base-dev
      
      # Install common R packages
      R -e "install.packages(c('tidyverse', 'ggplot2', 'dplyr', 'readr', 'shiny', 'rmarkdown', 'knitr', 'plotly', 'DT', 'openxlsx'), repos='http://cran.rstudio.com/')"
      
      # Install RStudio Server
      ARCH=$(uname -m)
      if [ "$ARCH" = "x86_64" ]; then
        wget -O rstudio.deb https://download2.rstudio.org/server/jammy/amd64/rstudio-server-2023.06.1-524-amd64.deb
      else
        wget -O rstudio.deb https://download2.rstudio.org/server/jammy/arm64/rstudio-server-2023.06.1-524-arm64.deb
      fi
      
      dpkg -i rstudio.deb || apt-get install -f -y
      systemctl enable rstudio-server
      
      # Configure RStudio
      echo "www-port=8787" >> /etc/rstudio/rserver.conf

  - name: "Install Julia"
    script: |
      # Download and install Julia
      JULIA_VERSION="1.9.3"
      ARCH=$(uname -m)
      
      if [ "$ARCH" = "x86_64" ]; then
        JULIA_URL="https://julialang-s3.julialang.org/bin/linux/x64/1.9/julia-${JULIA_VERSION}-linux-x86_64.tar.gz"
      else
        JULIA_URL="https://julialang-s3.julialang.org/bin/linux/aarch64/1.9/julia-${JULIA_VERSION}-linux-aarch64.tar.gz"
      fi
      
      mkdir -p /opt/julia
      curl -L $JULIA_URL | tar xz -C /opt/julia --strip-components=1
      
      # Add Julia to PATH
      ln -s /opt/julia/bin/julia /usr/local/bin/julia
      
      # Install common Julia packages
      julia -e 'using Pkg; Pkg.add(["IJulia", "DataFrames", "Plots", "Statistics", "LinearAlgebra", "DifferentialEquations", "Distributions"])'

  - name: "Configure Jupyter"
    script: |
      # Create Jupyter configuration
      mkdir -p /etc/jupyter
      
      # Generate configuration
      /opt/sci_env/bin/jupyter server --generate-config -f /etc/jupyter/jupyter_server_config.py
      
      # Configure Jupyter to allow remote access
      cat >> /etc/jupyter/jupyter_server_config.py << EOF
c.ServerApp.ip = '0.0.0.0'
c.ServerApp.port = 8888
c.ServerApp.open_browser = False
c.ServerApp.allow_root = True
c.ServerApp.allow_remote_access = True
c.ServerApp.token = ''
EOF
      
      # Add Julia kernel to Jupyter
      julia -e 'using Pkg; Pkg.add("IJulia")'
      
      # Create a service for Jupyter
      cat > /etc/systemd/system/jupyter.service << EOF
[Unit]
Description=Jupyter Server
After=network.target

[Service]
Type=simple
User=researcher
ExecStart=/opt/sci_env/bin/jupyter lab --config=/etc/jupyter/jupyter_server_config.py
WorkingDirectory=/home/researcher
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF
      
      systemctl enable jupyter.service

  - name: "Install HPC tools"
    script: |
      # Install MPI
      apt-get install -y openmpi-bin libopenmpi-dev
      
      # Install other HPC tools
      apt-get install -y parallel
      
      # Python MPI support
      /opt/sci_env/bin/pip install mpi4py

  - name: "Setup user environment"
    script: |
      # Create default researcher user
      useradd -m -s /bin/bash researcher
      echo "researcher:password123" | chpasswd
      usermod -aG sudo researcher
      
      # Create projects directory
      mkdir -p /home/researcher/projects
      chown -R researcher:researcher /home/researcher/projects
      
      # Configure environment for researcher
      echo 'source /opt/sci_env/bin/activate' >> /home/researcher/.bashrc
      echo 'export PATH=/opt/sci_env/bin:/opt/julia/bin:${PATH}' >> /home/researcher/.bashrc
      
      # Add aliases
      cat >> /home/researcher/.bashrc << 'EOF'
alias start-jupyter="sudo systemctl start jupyter.service"
alias stop-jupyter="sudo systemctl stop jupyter.service"
alias start-rstudio="sudo systemctl start rstudio-server"
alias stop-rstudio="sudo systemctl stop rstudio-server"
EOF

  - name: "Install sample notebooks"
    script: |
      # Create sample notebooks directory
      mkdir -p /home/researcher/projects/samples
      
      # Python sample
      cat > /home/researcher/projects/samples/python_example.ipynb << 'EOF'
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Scientific Computing with Python\n",
    "This notebook demonstrates basic scientific computing capabilities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy as sp\n",
    "\n",
    "# Generate some data\n",
    "x = np.linspace(0, 10, 100)\n",
    "y = np.sin(x)\n",
    "\n",
    "# Plot the data\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(x, y)\n",
    "plt.title('Sine Wave')\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('sin(x)')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 }
}
EOF
      
      # R script sample
      cat > /home/researcher/projects/samples/r_example.R << 'EOF'
# Example R script for data analysis

# Load tidyverse
library(tidyverse)

# Create some sample data
data <- data.frame(
  x = 1:100,
  y = rnorm(100, mean = 0, sd = 1)
)

# Create a plot
ggplot(data, aes(x = x, y = y)) +
  geom_line() +
  geom_smooth() +
  theme_minimal() +
  labs(title = "Random Data with Trend Line",
       x = "Index",
       y = "Value")

# Print summary statistics
summary(data$y)
EOF
      
      # Julia script sample
      cat > /home/researcher/projects/samples/julia_example.jl << 'EOF'
# Example Julia script for scientific computing

using Plots
using Statistics
using LinearAlgebra

# Generate some data
x = range(0, 10, length=100)
y = sin.(x)

# Compute some statistics
println("Mean of y: ", mean(y))
println("Standard deviation of y: ", std(y))

# Create a matrix and compute eigenvalues
A = [2 1; 1 3]
eigvals, eigvecs = eigen(A)
println("Eigenvalues: ", eigvals)

# Create a plot
p = plot(x, y, title="Sine Wave", label="sin(x)", 
         lw=2, legend=:bottomright, 
         xlabel="x", ylabel="y")
display(p)
EOF
      
      # Fix ownership
      chown -R researcher:researcher /home/researcher/projects

  - name: "Cleanup"
    script: |
      apt-get autoremove -y && apt-get autoclean
      rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
      rm -f rstudio.deb

validation:
  - name: "Python scientific packages"
    command: "/opt/sci_env/bin/python -c 'import numpy, scipy, pandas, matplotlib; print(\"All imports successful\")'"
    success: true
  
  - name: "R installed"
    command: "R --version"
    success: true
  
  - name: "RStudio Server configured"
    command: "systemctl is-enabled rstudio-server"
    equals: "enabled"
  
  - name: "Julia installed"
    command: "julia --version"
    success: true
  
  - name: "Julia packages"
    command: "julia -e 'using Pkg; Pkg.status()'"
    contains: "IJulia"
  
  - name: "Jupyter configured"
    command: "systemctl is-enabled jupyter.service"
    equals: "enabled"
  
  - name: "OpenMPI installed"
    command: "mpirun --version"
    success: true
  
  - name: "User setup"
    command: "id researcher"
    success: true

tags:
  Name: "scientific-computing"
  Type: "research"
  Software: "Python,R,Julia,Jupyter,RStudio"
  Purpose: "scientific-computing"

min_disk_size: 25
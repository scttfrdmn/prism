name: "Bioinformatics Research Environment"
description: "Comprehensive bioinformatics environment with BWA, GATK, Samtools, R Bioconductor, and Galaxy"
base: "ubuntu-22.04-server-lts"
architecture: "x86_64"  # Default architecture, will be overridden during build

build_steps:
  - name: Update system packages
    script: |
      apt-get update
      apt-get upgrade -y
    timeout_seconds: 300
    
  - name: Install system dependencies
    script: |
      DEBIAN_FRONTEND=noninteractive apt-get install -y \
        build-essential curl wget software-properties-common git \
        unzip libz-dev libbz2-dev liblzma-dev ncurses-dev libcurl4-openssl-dev \
        libssl-dev python3 python3-pip python3-dev default-jre default-jdk \
        libxml2-dev libcairo2-dev libpango1.0-dev libjpeg-dev libxt-dev libpcre2-dev \
        libpng-dev zlib1g-dev libblas-dev liblapack-dev gfortran nodejs npm \
        sqlite3 libsqlite3-dev libreadline-dev libncurses5-dev libncursesw5-dev \
        r-base r-base-dev \
        htop tmux vim
    timeout_seconds: 900

  - name: Install BWA
    script: |
      cd /opt
      git clone https://github.com/lh3/bwa.git
      cd bwa
      make
      ln -s /opt/bwa/bwa /usr/local/bin/
    timeout_seconds: 600
    
  - name: Install SAMtools
    script: |
      cd /opt
      wget https://github.com/samtools/samtools/releases/download/1.16.1/samtools-1.16.1.tar.bz2
      tar -xjf samtools-1.16.1.tar.bz2
      cd samtools-1.16.1
      ./configure --prefix=/usr/local
      make
      make install
      cd ..
      rm samtools-1.16.1.tar.bz2
    timeout_seconds: 900
    
  - name: Install BCFtools
    script: |
      cd /opt
      wget https://github.com/samtools/bcftools/releases/download/1.16/bcftools-1.16.tar.bz2
      tar -xjf bcftools-1.16.tar.bz2
      cd bcftools-1.16
      ./configure --prefix=/usr/local
      make
      make install
      cd ..
      rm bcftools-1.16.tar.bz2
    timeout_seconds: 900
    
  - name: Install GATK
    script: |
      cd /opt
      wget https://github.com/broadinstitute/gatk/releases/download/4.4.0.0/gatk-4.4.0.0.zip
      unzip gatk-4.4.0.0.zip
      rm gatk-4.4.0.0.zip
      ln -s /opt/gatk-4.4.0.0/gatk /usr/local/bin/
      
      # Create simplified script for easier usage
      mkdir -p /opt/gatk
      cat > /opt/gatk/gatk << 'EOF'
#!/bin/bash
/opt/gatk-4.4.0.0/gatk "$@"
EOF
      chmod +x /opt/gatk/gatk
      
      # Add GATK to path
      echo 'export PATH="/opt/gatk:$PATH"' > /etc/profile.d/gatk.sh
      chmod +x /etc/profile.d/gatk.sh
    timeout_seconds: 1200
    
  - name: Install Miniconda
    script: |
      # Download Miniconda installer
      ARCH=$(uname -m)
      if [ "$ARCH" = "x86_64" ]; then
        wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh
      elif [ "$ARCH" = "aarch64" ]; then
        wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh -O /tmp/miniconda.sh
      fi
      
      # Install Miniconda
      bash /tmp/miniconda.sh -b -p /opt/conda
      rm /tmp/miniconda.sh
      
      # Set up environment
      ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh
      echo '. /opt/conda/etc/profile.d/conda.sh' >> /etc/profile.d/conda.sh
      echo 'conda activate base' >> /etc/profile.d/conda.sh
      chmod +x /etc/profile.d/conda.sh
      
      # Initialize conda for bash shell
      source /opt/conda/etc/profile.d/conda.sh
      conda init bash
      conda config --add channels defaults
      conda config --add channels bioconda
      conda config --add channels conda-forge
      conda config --set auto_activate_base false
    timeout_seconds: 900
    
  - name: Install bioinformatics tools (conda)
    script: |
      # Source conda
      source /opt/conda/etc/profile.d/conda.sh
      
      # Create bioinformatics environment
      conda create -y -n bioinfo python=3.10
      conda activate bioinfo
      
      # Install core bioinformatics packages
      conda install -y -c bioconda -c conda-forge \
        bwa samtools bcftools bedtools vcftools igv igvtools \
        fastqc multiqc trimmomatic bowtie2 tophat star hisat2 \
        kallisto salmon featurecounts subread htseq minimap2 \
        deeptools macs2 samblaster picard bamtools plink \
        blast emboss muscle clustalo t_coffee
      
      # Install Jupyter for bioinformatics
      conda install -y -c conda-forge jupyterlab notebook ipykernel
      
      # Install python packages for bioinformatics
      conda install -y -c bioconda -c conda-forge \
        biopython pysam pyvcf pyfastx pybedtools pygenomeviz \
        scikit-bio pandas numpy matplotlib seaborn plotly \
        scipy scikit-learn statsmodels numba snakemake
    timeout_seconds: 3600
    
  - name: Install R Bioconductor packages
    script: |
      # Create an R script to install packages
      cat > /tmp/install_bioconductor.R << 'EOF'
      # Install BiocManager
      install.packages("BiocManager", repos="https://cloud.r-project.org")
      
      # Install core Bioconductor packages
      BiocManager::install(c(
        "DESeq2", "edgeR", "limma", 
        "GenomicRanges", "GenomicFeatures", 
        "rtracklayer", "Biostrings", 
        "AnnotationDbi", "org.Hs.eg.db", 
        "BSgenome", "biomaRt",
        "tximport", "ComplexHeatmap", "clusterProfiler"
      ), ask=FALSE)
      
      # Install additional useful packages
      install.packages(c(
        "ggplot2", "pheatmap", "RColorBrewer", 
        "dplyr", "tidyr", "reshape2", "tidyverse",
        "cowplot", "devtools", "remotes"
      ), repos="https://cloud.r-project.org")
      EOF
      
      # Run the R script
      Rscript /tmp/install_bioconductor.R
      
      # Clean up
      rm /tmp/install_bioconductor.R
    timeout_seconds: 2400
    
  - name: Setup RStudio Server
    script: |
      # Install RStudio Server
      ARCH=$(uname -m)
      if [ "$ARCH" = "x86_64" ]; then
        wget https://download2.rstudio.org/server/jammy/amd64/rstudio-server-2023.06.2-421-amd64.deb
        apt-get install -y ./rstudio-server-2023.06.2-421-amd64.deb
        rm ./rstudio-server-2023.06.2-421-amd64.deb
      elif [ "$ARCH" = "aarch64" ]; then
        wget https://download2.rstudio.org/server/jammy/arm64/rstudio-server-2023.06.2-421-arm64.deb
        apt-get install -y ./rstudio-server-2023.06.2-421-arm64.deb
        rm ./rstudio-server-2023.06.2-421-arm64.deb
      fi
      
      # Configure RStudio Server
      echo "www-port=8787" >> /etc/rstudio/rserver.conf
      systemctl restart rstudio-server
    timeout_seconds: 900

  - name: "Install Galaxy"
    script: |
      # Add Galaxy user
      adduser --system --group --home /srv/galaxy galaxy
      
      # Clone Galaxy repository
      su - galaxy -c "git clone https://github.com/galaxyproject/galaxy.git -b release_23.0 /srv/galaxy/galaxy"
      
      # Configure Galaxy
      cat > /srv/galaxy/galaxy/config/galaxy.yml << EOF
      uwsgi:
        http: 0.0.0.0:8080
        buffer-size: 16384
        processes: 2
        threads: 4
        offload-threads: 2
        static-map: /static=/srv/galaxy/galaxy/static
        static-map: /favicon.ico=/srv/galaxy/galaxy/static/favicon.ico
        static-map: /robots.txt=/srv/galaxy/galaxy/static/robots.txt
        master: true
        virtualenv: /srv/galaxy/galaxy/.venv
        pythonpath: /srv/galaxy/galaxy/lib
        module: galaxy.webapps.galaxy.buildapp:uwsgi_app()
        thunder-lock: true
        die-on-term: true
        hook-master-start: unix_signal:2 gracefully_kill_them_all
        hook-master-start: unix_signal:15 gracefully_kill_them_all
        py-call-osafterfork: true
        enable-threads: true
        mule: lib/galaxy/main.py
        farm: job-handlers:1
      
      galaxy:
        database_connection: sqlite:///database/universe.sqlite?isolation_level=IMMEDIATE
        file_path: /srv/galaxy/data
        new_file_path: /srv/galaxy/tmp
        job_working_directory: /srv/galaxy/jobs
        tool_data_path: /srv/galaxy/tool-data
        tool_dependency_dir: /srv/galaxy/tool_deps
        template_cache_path: /srv/galaxy/cache
        citation_cache_data_dir: /srv/galaxy/citation_cache_data
        object_store_cache_path: /srv/galaxy/object_store_cache
        visualization_plugins_directory: config/plugins/visualizations
        tour_config_dir: /srv/galaxy/galaxy/config/plugins/tours
        allow_user_creation: true
        allow_user_dataset_purge: true
        allow_library_path_paste: true
        tool_sheds_config_file: /srv/galaxy/galaxy/config/tool_sheds_conf.xml
        static_enabled: true
        static_dir: /srv/galaxy/galaxy/static/
        static_images_dir: /srv/galaxy/galaxy/static/images
        static_favicon_dir: /srv/galaxy/galaxy/static/favicon.ico
        static_scripts_dir: /srv/galaxy/galaxy/static/scripts/
        static_style_dir: /srv/galaxy/galaxy/static/style/blue/
      EOF
      
      # Create necessary directories
      mkdir -p /srv/galaxy/data /srv/galaxy/tmp /srv/galaxy/jobs /srv/galaxy/tool-data /srv/galaxy/tool_deps /srv/galaxy/cache /srv/galaxy/citation_cache_data /srv/galaxy/object_store_cache
      chown -R galaxy:galaxy /srv/galaxy
      
      # Create Galaxy systemd service
      cat > /etc/systemd/system/galaxy.service << EOF
      [Unit]
      Description=Galaxy web server
      After=network.target
      
      [Service]
      Type=simple
      User=galaxy
      Group=galaxy
      WorkingDirectory=/srv/galaxy/galaxy
      ExecStart=/srv/galaxy/galaxy/.venv/bin/python /srv/galaxy/galaxy/scripts/galaxy-main
      Restart=on-failure
      
      [Install]
      WantedBy=multi-user.target
      EOF
      
      # Initialize Galaxy virtual environment and start setup
      su - galaxy -c "cd /srv/galaxy/galaxy && python -m venv .venv && . .venv/bin/activate && pip install 'pip>=21.0' wheel && pip install -e ."
      
      # Enable and start Galaxy service
      systemctl daemon-reload
      systemctl enable galaxy
      systemctl start galaxy
    timeout_seconds: 3600

  - name: "Create example workflows"
    script: |
      # Create examples directory
      mkdir -p /home/ubuntu/examples
      
      # Create README with examples
      cat > /home/ubuntu/examples/README.md << 'EOF'
      # Bioinformatics Environment Examples

      This directory contains examples to help you get started with common bioinformatics workflows.

      ## Example Workflows

      ### 1. NGS Quality Control
      ```bash
      # Quality check with FastQC
      fastqc sample.fastq -o qc_results

      # Trim low quality reads with Trimmomatic
      trimmomatic SE sample.fastq sample_trimmed.fastq \
          ILLUMINACLIP:TruSeq3-SE.fa:2:30:10 LEADING:3 TRAILING:3 \
          SLIDINGWINDOW:4:15 MINLEN:36

      # Check quality after trimming
      fastqc sample_trimmed.fastq -o qc_results_post
      
      # Generate MultiQC report
      multiqc qc_results qc_results_post -o multiqc_report
      ```

      ### 2. Read Alignment
      ```bash
      # Index reference genome
      bwa index reference.fasta

      # Align reads
      bwa mem reference.fasta sample_trimmed.fastq > aligned.sam

      # Convert to BAM, sort and index
      samtools view -Sb aligned.sam > aligned.bam
      samtools sort aligned.bam -o aligned_sorted.bam
      samtools index aligned_sorted.bam
      ```

      ### 3. Variant Calling with GATK
      ```bash
      # Mark duplicates
      gatk MarkDuplicates -I aligned_sorted.bam -O marked_duplicates.bam \
          -M marked_dup_metrics.txt

      # Create sequence dictionary
      gatk CreateSequenceDictionary -R reference.fasta

      # Index reference
      samtools faidx reference.fasta

      # Base quality score recalibration
      gatk BaseRecalibrator -I marked_duplicates.bam -R reference.fasta \
          --known-sites known_variants.vcf -O recal_data.table

      # Apply BQSR
      gatk ApplyBQSR -I marked_duplicates.bam -R reference.fasta \
          --bqsr-recal-file recal_data.table -O recalibrated.bam

      # Call variants
      gatk HaplotypeCaller -R reference.fasta -I recalibrated.bam \
          -O raw_variants.vcf
          
      # Select SNPs
      gatk SelectVariants -R reference.fasta -V raw_variants.vcf \
          --select-type-to-include SNP -O raw_snps.vcf
          
      # Filter SNPs
      gatk VariantFiltration -R reference.fasta -V raw_snps.vcf \
          -O filtered_snps.vcf \
          --filter-name "QD_filter" --filter-expression "QD < 2.0" \
          --filter-name "FS_filter" --filter-expression "FS > 60.0" \
          --filter-name "MQ_filter" --filter-expression "MQ < 40.0" \
          --filter-name "SOR_filter" --filter-expression "SOR > 3.0" \
          --filter-name "MQRankSum_filter" --filter-expression "MQRankSum < -12.5" \
          --filter-name "ReadPosRankSum_filter" --filter-expression "ReadPosRankSum < -8.0"
      ```

      ### 4. RNA-Seq Analysis
      ```bash
      # Align with STAR
      STAR --genomeDir star_index --readFilesIn sample.fastq \
          --outFileNamePrefix star_output_ --outSAMtype BAM SortedByCoordinate

      # Quantify with featureCounts
      featureCounts -a annotation.gtf -o counts.txt star_output_Aligned.sortedByCoord.out.bam

      # Alternatively, use Salmon for transcript quantification
      salmon quant -i salmon_index -l A -r sample.fastq -o salmon_quant
      ```

      ### 5. R/Bioconductor Analysis
      ```R
      # Differential Expression Analysis with DESeq2
      library(DESeq2)

      # Load count data
      countData <- read.table("counts.txt", header=TRUE, row.names=1)
      colData <- data.frame(condition=factor(c("control", "control", "treatment", "treatment")))
      rownames(colData) <- colnames(countData)

      # Create DESeq dataset
      dds <- DESeqDataSetFromMatrix(countData=countData, 
                                   colData=colData, 
                                   design=~condition)

      # Run DESeq2
      dds <- DESeq(dds)
      res <- results(dds)
      summary(res)

      # MA plot
      plotMA(res, ylim=c(-5,5))

      # Volcano plot
      library(ggplot2)
      resDF <- as.data.frame(res)
      resDF$significant <- ifelse(resDF$padj < 0.05 & abs(resDF$log2FoldChange) > 1, "Yes", "No")
      
      ggplot(resDF, aes(x=log2FoldChange, y=-log10(padj), col=significant)) +
        geom_point() +
        theme_minimal() +
        scale_color_manual(values=c("black", "red")) +
        labs(title="Volcano Plot", x="Log2 Fold Change", y="-Log10 Adjusted P-value")
      ```
      EOF

      # Create R script example for RNA-seq analysis
      cat > /home/ubuntu/examples/deseq2_example.R << 'EOF'
      # Example DESeq2 Script for RNA-seq Analysis

      # Load required libraries
      library(DESeq2)
      library(ggplot2)
      library(pheatmap)
      library(RColorBrewer)

      # Create example count data (in real analysis, you would load your own data)
      set.seed(42)
      gene_count <- 1000
      sample_count <- 6
      
      # Generate counts with difference between conditions
      counts <- matrix(rnbinom(gene_count * sample_count, size=1, mu=10), ncol=sample_count)
      # Add some differentially expressed genes
      counts[1:100, 4:6] <- counts[1:100, 4:6] * 5
      counts[101:200, 4:6] <- counts[101:200, 4:6] * 0.2
      
      # Create row and column names
      colnames(counts) <- c(paste0("Control_", 1:3), paste0("Treatment_", 1:3))
      rownames(counts) <- paste0("gene", 1:gene_count)
      
      # Create sample metadata
      colData <- data.frame(
        condition = factor(rep(c("Control", "Treatment"), each=3)),
        row.names = colnames(counts)
      )
      
      # Create DESeq2 dataset
      dds <- DESeqDataSetFromMatrix(
        countData = counts,
        colData = colData,
        design = ~ condition
      )
      
      # Run DESeq2 analysis
      dds <- DESeq(dds)
      
      # Get results (Treatment vs Control)
      res <- results(dds, contrast=c("condition", "Treatment", "Control"))
      
      # Summary of results
      summary(res)
      
      # MA Plot
      png("ma_plot.png", width=800, height=600)
      plotMA(res, ylim=c(-5, 5))
      dev.off()
      
      # Volcano Plot
      png("volcano_plot.png", width=1000, height=800)
      plot(res$log2FoldChange, -log10(res$padj),
           col = ifelse(res$padj < 0.05 & abs(res$log2FoldChange) > 1, "red", "black"),
           pch = 20,
           main = "Volcano Plot",
           xlab = "Log2 Fold Change",
           ylab = "-Log10 Adjusted P-value")
      dev.off()
      
      # Extract normalized counts
      norm_counts <- counts(dds, normalized=TRUE)
      
      # Transform counts for visualization
      vsd <- vst(dds, blind=FALSE)
      
      # PCA plot
      png("pca_plot.png", width=800, height=600)
      plotPCA(vsd, intgroup="condition") + 
        theme_minimal() +
        ggtitle("PCA of RNA-seq samples")
      dev.off()
      
      # Sample distances heatmap
      png("sample_distance_heatmap.png", width=800, height=600)
      sampleDists <- dist(t(assay(vsd)))
      sampleDistMatrix <- as.matrix(sampleDists)
      colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
      pheatmap(sampleDistMatrix,
              clustering_distance_rows = sampleDists,
              clustering_distance_cols = sampleDists,
              col = colors)
      dev.off()
      
      # Get top differentially expressed genes
      res_ordered <- res[order(res$padj), ]
      top_genes <- head(rownames(res_ordered), 50)
      
      # Heatmap of top genes
      png("top_genes_heatmap.png", width=900, height=700)
      mat <- assay(vsd)[top_genes, ]
      mat <- mat - rowMeans(mat)
      pheatmap(mat, 
              annotation_col = colData,
              main = "Top 50 Differentially Expressed Genes")
      dev.off()
      
      # Save results to CSV file
      write.csv(as.data.frame(res), file="deseq2_results.csv")
      
      # Get significantly differentially expressed genes
      sig_genes <- subset(res, padj < 0.05 & abs(log2FoldChange) > 1)
      write.csv(as.data.frame(sig_genes), file="significant_genes.csv")
      
      # Print session information for reproducibility
      sessionInfo()
      EOF
      
      # Create BWA alignment example script
      cat > /home/ubuntu/examples/bwa_alignment.sh << 'EOF'
      #!/bin/bash
      
      # Example BWA alignment pipeline
      
      # Set variables
      REF="reference.fasta"
      SAMPLE="sample"
      FASTQ="${SAMPLE}.fastq"
      THREADS=4
      
      echo "Starting BWA alignment pipeline for $SAMPLE"
      echo "========================================"
      
      # Step 1: Index reference genome (if not already done)
      if [ ! -f "${REF}.bwt" ]; then
          echo "Indexing reference genome..."
          bwa index $REF
      else
          echo "Reference genome index already exists."
      fi
      
      # Step 2: Run BWA MEM alignment
      echo "Aligning reads with BWA MEM..."
      bwa mem -t $THREADS $REF $FASTQ > "${SAMPLE}.sam"
      
      # Step 3: Convert SAM to BAM
      echo "Converting SAM to BAM..."
      samtools view -Sb "${SAMPLE}.sam" > "${SAMPLE}.bam"
      
      # Step 4: Sort BAM file
      echo "Sorting BAM file..."
      samtools sort "${SAMPLE}.bam" -o "${SAMPLE}.sorted.bam"
      
      # Step 5: Index BAM file
      echo "Indexing BAM file..."
      samtools index "${SAMPLE}.sorted.bam"
      
      # Step 6: Generate alignment statistics
      echo "Generating alignment statistics..."
      samtools flagstat "${SAMPLE}.sorted.bam" > "${SAMPLE}.flagstat.txt"
      
      # Step 7: Calculate coverage
      echo "Calculating coverage..."
      samtools depth "${SAMPLE}.sorted.bam" | \
          awk '{sum+=$3} END {print "Average coverage = ",sum/NR}' > "${SAMPLE}.coverage.txt"
      
      # Step 8: Clean up intermediate files
      echo "Cleaning up..."
      rm "${SAMPLE}.sam"
      rm "${SAMPLE}.bam"
      
      echo "Pipeline completed successfully!"
      echo "Output files:"
      echo "  - ${SAMPLE}.sorted.bam"
      echo "  - ${SAMPLE}.sorted.bam.bai"
      echo "  - ${SAMPLE}.flagstat.txt"
      echo "  - ${SAMPLE}.coverage.txt"
      EOF
      
      # Set permissions
      chmod +x /home/ubuntu/examples/bwa_alignment.sh
      chown -R ubuntu:ubuntu /home/ubuntu/examples
    timeout_seconds: 300

  - name: "Configure Jupyter for bioinformatics"
    script: |
      # Source conda
      source /opt/conda/etc/profile.d/conda.sh
      conda activate bioinfo
      
      # Create jupyter configuration
      mkdir -p /etc/jupyter
      cat > /etc/jupyter/jupyter_notebook_config.py << 'EOF'
      c.NotebookApp.ip = '0.0.0.0'
      c.NotebookApp.port = 8888
      c.NotebookApp.open_browser = False
      c.NotebookApp.token = ''
      c.NotebookApp.password = ''
      EOF
      
      # Create a startup script for Jupyter
      cat > /etc/profile.d/jupyter.sh << 'EOF'
      #!/bin/bash
      alias start-jupyter='source /opt/conda/etc/profile.d/conda.sh && conda activate bioinfo && jupyter lab --config=/etc/jupyter/jupyter_notebook_config.py &'
      EOF
      chmod +x /etc/profile.d/jupyter.sh
      
      # Create a service file for Jupyter
      cat > /etc/systemd/system/jupyter.service << 'EOF'
      [Unit]
      Description=Jupyter Lab Server
      After=network.target

      [Service]
      Type=simple
      User=ubuntu
      Group=ubuntu
      WorkingDirectory=/home/ubuntu
      ExecStart=/bin/bash -c "source /opt/conda/etc/profile.d/conda.sh && conda activate bioinfo && /opt/conda/envs/bioinfo/bin/jupyter lab --config=/etc/jupyter/jupyter_notebook_config.py"
      Restart=on-failure
      RestartSec=10

      [Install]
      WantedBy=multi-user.target
      EOF
      
      # Enable and start Jupyter service
      systemctl daemon-reload
      systemctl enable jupyter
      systemctl start jupyter
    timeout_seconds: 600

  - name: "Set up user environment"
    script: |
      # Create ubuntu user if it doesn't exist
      id -u ubuntu &>/dev/null || useradd -m -s /bin/bash ubuntu
      echo "ubuntu:password123" | chpasswd
      
      # Add bioinformatics profile settings
      cat > /etc/skel/.bioinfo_additions << 'EOF'
      # Bioinformatics environment setup
      
      # Conda setup
      . /opt/conda/etc/profile.d/conda.sh
      
      # GATK setup
      export PATH="/opt/gatk:$PATH"
      
      # Useful aliases
      alias activate-bioinfo='conda activate bioinfo'
      alias start-jupyter='jupyter lab --no-browser'
      alias start-rstudio='echo "RStudio is running at http://localhost:8787"'
      alias start-galaxy='echo "Galaxy is running at http://localhost:8080"'
      
      # Activate bioinfo environment by default
      conda activate bioinfo
      
      # Show conda environment in prompt
      parse_git_branch() {
          git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
      }
      export PS1="\[\033[36m\]\$(conda info --envs | grep '*' | awk '{print \$1}')\[\033[m\] \[\033[32m\]\w\[\033[33m\]\$(parse_git_branch)\[\033[00m\] $ "
      EOF
      
      # Add to .bashrc for ubuntu user
      cat /etc/skel/.bioinfo_additions >> /home/ubuntu/.bashrc
      
      # Ensure correct ownership
      chown -R ubuntu:ubuntu /home/ubuntu
    timeout_seconds: 300

  - name: "Cleanup"
    script: |
      apt-get autoremove -y && apt-get autoclean
      rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
      
      # Create setup log
      echo "Setup complete" > /var/log/cws-setup.log
    timeout_seconds: 300

validation:
  - name: "R installed"
    command: "R --version"
    success: true
  
  - name: "RStudio Server installed"
    command: "systemctl status rstudio-server"
    success: true
  
  - name: "RStudio Server running"
    command: "systemctl is-active rstudio-server"
    equals: "active"
  
  - name: "Conda installed"
    command: "source /opt/conda/etc/profile.d/conda.sh && conda --version"
    success: true
  
  - name: "Bioinformatics conda environment"
    command: "source /opt/conda/etc/profile.d/conda.sh && conda env list | grep bioinfo"
    success: true
  
  - name: "BWA installed"
    command: "source /opt/conda/etc/profile.d/conda.sh && conda activate bioinfo && bwa 2>&1 | grep 'Program:'"
    success: true
  
  - name: "Samtools installed"
    command: "source /opt/conda/etc/profile.d/conda.sh && conda activate bioinfo && samtools --version"
    success: true
  
  - name: "GATK installed"
    command: "ls -la /opt/gatk/gatk"
    success: true
  
  - name: "Jupyter installed"
    command: "source /opt/conda/etc/profile.d/conda.sh && conda activate bioinfo && jupyter --version"
    success: true
  
  - name: "Jupyter service running"
    command: "systemctl is-active jupyter"
    equals: "active"
  
  - name: "Galaxy service running"
    command: "systemctl is-active galaxy"
    equals: "active"

tags:
  Name: "bioinformatics"
  Type: "research"
  Software: "BWA,GATK,Samtools,Bioconductor,Galaxy,R,Python"
  Category: "genomics"

instance_types:
  x86_64: "t3.xlarge"  # 4 vCPU, 16GB RAM
  arm64: "t4g.xlarge"  # 4 vCPU, 16GB RAM

ports:
  - 22    # SSH
  - 8787  # RStudio Server
  - 8888  # Jupyter Lab
  - 8080  # Galaxy

estimated_cost_per_hour:
  x86_64: 0.1664
  arm64: 0.1344
name: "Machine Learning"
description: "Python environment with machine learning libraries and GPU support"
base: "ubuntu-22.04-server-lts"
architecture: "x86_64"
version: "1.0.0"

domain:
  category: "computer-science"
  subcategory: "machine-learning"
  workload_type: "gpu-intensive"
  analysis_type: "deep-learning"
  data_scale: "large"
  common_tools:
    - "PyTorch"
    - "TensorFlow"
    - "Jupyter"
    - "scikit-learn"
  recommended_storage: 100
  idle_profile: "gpu"

resources:
  sizes:
    XS:
      instance_type: "t4g.medium"
      architecture: "arm64"
    S:
      instance_type: "t4g.large"
      architecture: "arm64"
    M:
      instance_type: "m6g.xlarge"
      architecture: "arm64"
    L:
      instance_type: "m6g.2xlarge"
      architecture: "arm64"
    XL:
      instance_type: "m6g.4xlarge"
      architecture: "arm64"
    GPU-S:
      instance_type: "g4dn.xlarge"
      architecture: "x86_64"
    GPU-M:
      instance_type: "g4dn.2xlarge"
      architecture: "x86_64"
    GPU-L:
      instance_type: "g4dn.4xlarge"
      architecture: "x86_64"
  default_size: "GPU-S"
  memory_required: 16
  cpu_required: 4
  gpu_recommended: true

cost:
  base_daily: 8.40
  xs_daily: 0.60
  s_daily: 1.20
  m_daily: 2.40
  l_daily: 4.80
  xl_daily: 9.60
  gpu_s_daily: 8.40
  gpu_m_daily: 16.80
  gpu_l_daily: 33.60

build_steps:
  - name: "System updates"
    script: |
      apt-get update
      apt-get upgrade -y
    timeout_seconds: 300
    
  - name: "Install system dependencies"
    script: |
      apt-get install -y build-essential python3-pip git curl wget software-properties-common
    timeout_seconds: 600
    
  - name: "Install NVIDIA drivers"
    script: |
      apt-get install -y nvidia-driver-525 nvidia-utils-525
    timeout_seconds: 900
    
  - name: "Install CUDA toolkit"
    script: |
      wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb
      dpkg -i cuda-keyring_1.0-1_all.deb
      apt-get update
      apt-get install -y cuda-toolkit-12.0
    timeout_seconds: 1800
    
  - name: "Install Python packages"
    script: |
      pip3 install numpy pandas scikit-learn matplotlib jupyter
      pip3 install torch torchvision torchaudio
      pip3 install tensorflow
      pip3 install transformers datasets
    timeout_seconds: 1800
    
  - name: "Install JupyterLab"
    script: |
      pip3 install jupyterlab
      mkdir -p /opt/jupyter/notebooks
      
      # Create jupyter config
      mkdir -p ~/.jupyter
      cat > ~/.jupyter/jupyter_server_config.py << EOL
      c.ServerApp.ip = '0.0.0.0'
      c.ServerApp.port = 8888
      c.ServerApp.open_browser = False
      c.ServerApp.notebook_dir = '/opt/jupyter/notebooks'
      c.ServerApp.allow_remote_access = True
      c.ServerApp.allow_root = True
      EOL
      
      # Create systemd service
      cat > /etc/systemd/system/jupyter.service << EOL
      [Unit]
      Description=JupyterLab Server
      After=network.target

      [Service]
      Type=simple
      User=ubuntu
      ExecStart=/usr/local/bin/jupyter lab
      WorkingDirectory=/opt/jupyter/notebooks
      Restart=always
      RestartSec=10

      [Install]
      WantedBy=multi-user.target
      EOL
      
      systemctl enable jupyter.service
      systemctl start jupyter.service
    timeout_seconds: 900
    
  - name: "Install example notebooks"
    script: |
      mkdir -p /opt/jupyter/notebooks/examples
      
      # PyTorch example
      cat > /opt/jupyter/notebooks/examples/pytorch_example.ipynb << EOL
      {
        "cells": [
          {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["# PyTorch Example: MNIST Classification"]
          },
          {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "source": [
              "import torch\n",
              "import torch.nn as nn\n",
              "import torch.optim as optim\n",
              "import torchvision\n",
              "import torchvision.transforms as transforms\n",
              "\n",
              "# Check if GPU is available\n",
              "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
              "print(f\"Using device: {device}\")\n",
              "\n",
              "# Load MNIST dataset\n",
              "transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))])\n",
              "trainset = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)\n",
              "testset = torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)\n",
              "\n",
              "trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)\n",
              "testloader = torch.utils.data.DataLoader(testset, batch_size=64, shuffle=False)"
            ]
          }
        ],
        "metadata": {
          "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
          }
        },
        "nbformat": 4,
        "nbformat_minor": 4
      }
      EOL
      
      # TensorFlow example
      cat > /opt/jupyter/notebooks/examples/tensorflow_example.ipynb << EOL
      {
        "cells": [
          {
            "cell_type": "markdown",
            "metadata": {},
            "source": ["# TensorFlow Example: MNIST Classification"]
          },
          {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "source": [
              "import tensorflow as tf\n",
              "print(f\"TensorFlow version: {tf.__version__}\")\n",
              "\n",
              "# Check for GPU\n",
              "print(f\"GPU available: {tf.test.is_gpu_available()}\")\n",
              "print(f\"GPU devices: {tf.config.list_physical_devices('GPU')}\")\n",
              "\n",
              "# Load MNIST dataset\n",
              "(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n",
              "\n",
              "# Normalize the data\n",
              "x_train, x_test = x_train / 255.0, x_test / 255.0"
            ]
          }
        ],
        "metadata": {
          "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
          }
        },
        "nbformat": 4,
        "nbformat_minor": 4
      }
      EOL
      
      # Set permissions
      chown -R ubuntu:ubuntu /opt/jupyter
    timeout_seconds: 300
    
  - name: "Install monitoring tools"
    script: |
      apt-get install -y htop iotop nvidia-smi
    timeout_seconds: 300
    
  - name: "Configure idle detection agent"
    script: |
      pip3 install psutil gputil
      
      # Create the idle detection agent script
      mkdir -p /opt/cloudworkstation/idle
      cat > /opt/cloudworkstation/idle/agent.py << EOL
      #!/usr/bin/env python3
      
      import psutil
      import gputil
      import time
      import json
      import os
      import sys
      import socket
      import requests
      
      # Configuration
      IDLE_CHECK_INTERVAL = 60  # seconds
      METRICS_FILE = "/var/log/cloudworkstation/idle_metrics.json"
      API_ENDPOINT = "http://localhost:8080/api/v1/idle/metrics"
      
      os.makedirs(os.path.dirname(METRICS_FILE), exist_ok=True)
      
      def get_metrics():
          metrics = {
              "timestamp": time.time(),
              "cpu": psutil.cpu_percent(interval=1),
              "memory": psutil.virtual_memory().percent,
              "network": 0,
              "disk": 0,
              "has_activity": False
          }
          
          # Get network I/O
          net_io = psutil.net_io_counters()
          time.sleep(1)
          net_io_after = psutil.net_io_counters()
          metrics["network"] = ((net_io_after.bytes_sent + net_io_after.bytes_recv) - 
                             (net_io.bytes_sent + net_io.bytes_recv)) / 1024  # KBps
          
          # Get disk I/O
          disk_io = psutil.disk_io_counters()
          time.sleep(1)
          disk_io_after = psutil.disk_io_counters()
          metrics["disk"] = ((disk_io_after.read_bytes + disk_io_after.write_bytes) - 
                          (disk_io.read_bytes + disk_io.write_bytes)) / 1024  # KBps
          
          # Get GPU metrics if available
          try:
              gpus = gputil.getGPUs()
              if gpus:
                  metrics["gpu"] = gpus[0].load * 100
          except:
              pass
          
          # Check for user activity (simplified)
          # In production, this would check keyboard/mouse activity
          metrics["has_activity"] = False
          
          return metrics
      
      def save_metrics(metrics):
          with open(METRICS_FILE, "w") as f:
              json.dump(metrics, f)
          
          # Try to send to API endpoint
          try:
              requests.post(API_ENDPOINT, json=metrics, timeout=5)
          except:
              pass
      
      def main():
          print(f"Starting CloudWorkstation idle detection agent")
          while True:
              try:
                  metrics = get_metrics()
                  save_metrics(metrics)
              except Exception as e:
                  print(f"Error: {e}")
              time.sleep(IDLE_CHECK_INTERVAL)
      
      if __name__ == "__main__":
          main()
      EOL
      
      chmod +x /opt/cloudworkstation/idle/agent.py
      
      # Create systemd service for idle agent
      cat > /etc/systemd/system/idle-agent.service << EOL
      [Unit]
      Description=CloudWorkstation Idle Detection Agent
      After=network.target
      
      [Service]
      Type=simple
      ExecStart=/usr/bin/python3 /opt/cloudworkstation/idle/agent.py
      Restart=always
      RestartSec=10
      
      [Install]
      WantedBy=multi-user.target
      EOL
      
      systemctl enable idle-agent.service
      systemctl start idle-agent.service
    timeout_seconds: 600

validation:
  - name: "Verify Python installation"
    command: "python3 --version"
    expected_output: "Python 3"
    
  - name: "Verify NVIDIA driver"
    command: "nvidia-smi"
    expected_exit_code: 0
    
  - name: "Verify CUDA"
    command: "nvcc --version"
    expected_exit_code: 0
    
  - name: "Verify PyTorch with CUDA"
    command: "python3 -c 'import torch; print(f\"CUDA available: {torch.cuda.is_available()}\")'"
    expected_output: "CUDA available: True"
    
  - name: "Verify TensorFlow with GPU"
    command: "python3 -c 'import tensorflow as tf; print(f\"GPU available: {tf.test.is_gpu_available()}\")'"
    expected_output: "GPU available: True"
    
  - name: "Verify JupyterLab service"
    command: "systemctl is-active jupyter.service"
    expected_output: "active"
    
  - name: "Verify idle detection agent"
    command: "systemctl is-active idle-agent.service"
    expected_output: "active"

idle_detection:
  profile: "gpu"
  cpu_threshold: 5
  memory_threshold: 20
  network_threshold: 50
  disk_threshold: 100
  gpu_threshold: 3
  idle_minutes: 15
  action: "stop"
  notification: true

repository:
  name: "default"
  url: "github.com/scttfrdmn/cloudworkstation-repository"
  maintainer: "CloudWorkstation Team"
  license: "MIT"

dependencies:
  - repository: "default"
    template: "base/ubuntu-server"
    version: "1.0.0"

docs:
  usage_examples:
    - description: "Launch JupyterLab server"
      command: "jupyter lab --ip=0.0.0.0 --no-browser"
    - description: "Run PyTorch GPU test"
      command: "python3 -c 'import torch; print(torch.cuda.is_available())'"
  common_workflows:
    - name: "Train a simple neural network"
      description: "Train a basic neural network on MNIST dataset"
      steps:
        - "Clone example repository: git clone https://github.com/example/mnist-pytorch.git"
        - "Run training script: cd mnist-pytorch && python3 train.py"
        - "View results: python3 visualize.py"
  troubleshooting:
    - problem: "GPU not detected by PyTorch"
      solution: "Check that NVIDIA drivers are installed with 'nvidia-smi'. If missing, run 'sudo apt-get install -y nvidia-driver-525'"
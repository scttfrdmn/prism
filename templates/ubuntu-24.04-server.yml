name: "Ubuntu 24.04 Server"
slug: "ubuntu-24-04-server"
description: "Minimal Ubuntu 24.04 server with essential development tools using APT package manager"
base: "ubuntu-24.04"

# EXPLICIT CONNECTION TYPE - SSH only (headless server)
connection_type: "ssh"  # Command-line only, no GUI or web interfaces

# Complexity and categorization
complexity: "simple"
category: "Base Systems"
domain: "base"

# Visual presentation
icon: "🐧"
color: "#e95420"
popular: true

# Use APT package manager
package_manager: "apt"

packages:
  system:  # APT packages
    - "build-essential"
    - "curl"
    - "wget"
    - "git"
    - "vim"
    - "htop"
    - "tree"
    - "unzip"
    - "software-properties-common"
    - "apt-transport-https"
    - "ca-certificates"
    - "gnupg"
    - "lsb-release"

users:
  - name: "ubuntu"
    groups: ["sudo"]

services: []

# Idle detection configuration
idle_detection:
  enabled: true
  idle_threshold_minutes: 5
  hibernate_threshold_minutes: 10
  check_interval_minutes: 2

user_data: |
  #!/bin/bash
  
  # Install CloudWorkstation Idle Detection Agent
  cat > /usr/local/bin/cloudworkstation-idle-check.sh << 'EOF'
  #!/bin/bash
  # CloudWorkstation Idle Detection Agent
  # Runs on each instance to detect idle state and set AWS tags
  
  set -euo pipefail
  
  # Configuration - will be replaced with actual values during launch
  IDLE_THRESHOLD_MINUTES={{IDLE_THRESHOLD_MINUTES}}
  HIBERNATE_THRESHOLD_MINUTES={{HIBERNATE_THRESHOLD_MINUTES}}
  LOG_FILE="/var/log/cloudworkstation-idle.log"
  
  # Logging function
  log() {
      echo "$(date '+%Y-%m-%d %H:%M:%S') [IDLE-AGENT] $*" | tee -a "$LOG_FILE"
  }
  
  # Get instance metadata
  get_instance_metadata() {
      INSTANCE_ID=$(curl -s --max-time 5 http://169.254.169.254/latest/meta-data/instance-id)
      
      # Try both methods for region
      REGION=$(curl -s --max-time 5 http://169.254.169.254/latest/meta-data/placement/region 2>/dev/null || \
               curl -s --max-time 5 http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/.$//')
      
      # Fallback to us-west-2 if metadata fails
      if [[ -z "$REGION" ]]; then
          REGION="us-west-2"
          log "Warning: Could not detect region, defaulting to us-west-2"
      fi
      
      log "Instance ID: $INSTANCE_ID, Region: $REGION"
  }
  
  # Check system activity
  check_system_activity() {
      # CPU load (1-minute average)
      CPU_LOAD=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | tr -d ',')
      log "CPU load: $CPU_LOAD"
      
      # Active users (excluding system users)
      USERS_LOGGED_IN=$(who | grep -v '^root' | wc -l)
      log "Users logged in: $USERS_LOGGED_IN"
      
      # GPU usage (if available)
      if command -v nvidia-smi &> /dev/null; then
          GPU_USAGE=$(nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits 2>/dev/null | head -1 || echo "0")
          log "GPU usage: ${GPU_USAGE}%"
      else
          GPU_USAGE="0"
          log "No GPU detected"
      fi
      
      # Check if system is busy
      if (( $(echo "$CPU_LOAD > 0.5" | bc -l) )) || [[ "$USERS_LOGGED_IN" -gt 0 ]] || [[ "$GPU_USAGE" -gt 10 ]]; then
          return 1  # System is busy
      else
          return 0  # System is idle
      fi
  }
  
  # Set AWS instance tag
  set_instance_tag() {
      local key="$1"
      local value="$2"
      
      log "Setting tag $key=$value"
      aws ec2 create-tags --region "$REGION" --resources "$INSTANCE_ID" --tags "Key=$key,Value=$value" || {
          log "ERROR: Failed to set tag $key=$value"
          return 1
      }
  }
  
  # Get AWS instance tag
  get_instance_tag() {
      local key="$1"
      
      aws ec2 describe-tags --region "$REGION" --filters "Name=resource-id,Values=$INSTANCE_ID" "Name=key,Values=$key" \
          --query 'Tags[0].Value' --output text 2>/dev/null || echo ""
  }
  
  # Calculate idle duration
  get_idle_duration() {
      local idle_since_tag=$(get_instance_tag "CloudWorkstation:IdleSince")
      
      if [[ -z "$idle_since_tag" || "$idle_since_tag" == "None" ]]; then
          echo "0"
          return
      fi
      
      local idle_since_epoch=$(date -d "$idle_since_tag" +%s 2>/dev/null || echo "0")
      local current_epoch=$(date +%s)
      local duration_seconds=$((current_epoch - idle_since_epoch))
      local duration_minutes=$((duration_seconds / 60))
      
      echo "$duration_minutes"
  }
  
  # Hibernate instance
  hibernate_instance() {
      log "🛌 HIBERNATING instance after prolonged idle period"
      
      # Set hibernating tag
      set_instance_tag "CloudWorkstation:IdleAction" "hibernating"
      
      # Attempt hibernation
      if aws ec2 stop-instances --region "$REGION" --instance-ids "$INSTANCE_ID" --hibernate; then
          log "✅ Hibernation initiated successfully"
          set_instance_tag "CloudWorkstation:IdleAction" "hibernated"
      else
          log "❌ Hibernation failed, attempting regular stop"
          if aws ec2 stop-instances --region "$REGION" --instance-ids "$INSTANCE_ID"; then
              log "✅ Stop initiated successfully"  
              set_instance_tag "CloudWorkstation:IdleAction" "stopped"
          else
              log "❌ Failed to stop instance"
              set_instance_tag "CloudWorkstation:IdleAction" "failed"
          fi
      fi
  }
  
  # Main logic
  main() {
      log "=== CloudWorkstation Idle Detection Check ==="
      
      # Get instance info
      get_instance_metadata
      
      # Configure AWS CLI to use instance role
      export AWS_DEFAULT_REGION="$REGION"
      
      # Check system activity
      if check_system_activity; then
          # System is idle
          log "🔍 System is IDLE"
          
          # Check if we were already idle
          local current_state=$(get_instance_tag "CloudWorkstation:IdleState")
          local idle_duration=$(get_idle_duration)
          
          if [[ "$current_state" == "idle" ]]; then
              log "System has been idle for $idle_duration minutes"
              
              # Check if we should hibernate
              if [[ "$idle_duration" -ge "$HIBERNATE_THRESHOLD_MINUTES" ]]; then
                  log "⏰ Idle threshold ($HIBERNATE_THRESHOLD_MINUTES min) exceeded, hibernating..."
                  hibernate_instance
                  exit 0
              fi
          else
              log "System just became idle, starting idle timer"
              set_instance_tag "CloudWorkstation:IdleState" "idle"
              set_instance_tag "CloudWorkstation:IdleSince" "$(date -Iseconds)"
          fi
      else
          # System is active
          log "⚡ System is ACTIVE"
          set_instance_tag "CloudWorkstation:IdleState" "active"
          set_instance_tag "CloudWorkstation:IdleSince" ""
          set_instance_tag "CloudWorkstation:IdleAction" ""
      fi
      
      log "=== Check complete ==="
  }
  
  # Run main function
  main "$@"
  EOF
  
  # Make script executable
  chmod +x /usr/local/bin/cloudworkstation-idle-check.sh
  
  # Create log directory
  touch /var/log/cloudworkstation-idle.log
  chown ubuntu:ubuntu /var/log/cloudworkstation-idle.log
  
  # Install cron job to run every {{CHECK_INTERVAL_MINUTES}} minutes
  cat > /etc/cron.d/cloudworkstation-idle << EOF
  # CloudWorkstation Idle Detection - runs every {{CHECK_INTERVAL_MINUTES}} minutes
  */{{CHECK_INTERVAL_MINUTES}} * * * * root /usr/local/bin/cloudworkstation-idle-check.sh >> /var/log/cloudworkstation-idle.log 2>&1
  EOF
  
  # Install bc for floating point math
  apt-get update && apt-get install -y bc awscli
  
  # Initial run after 2 minutes to let system settle
  (sleep 120 && /usr/local/bin/cloudworkstation-idle-check.sh) &

instance_defaults:
  ports: [22]

version: "1.0"
tags:
  type: "basic"
  purpose: "development"
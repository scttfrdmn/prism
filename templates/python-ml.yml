name: "Python Machine Learning Environment"
base: "ubuntu-22.04-server-lts"
description: "Python + Jupyter + PyTorch + TensorFlow for machine learning research"

build_steps:
  - name: "System updates"
    script: |
      apt-get update -y && apt-get upgrade -y
      apt-get install -y build-essential curl wget software-properties-common git
      apt-get install -y python3 python3-pip python3-dev python3-venv

  - name: "Install CUDA and GPU drivers"
    script: |
      # Detect architecture for GPU support
      ARCH=$(uname -m)
      if [ "$ARCH" = "x86_64" ]; then
        # Install NVIDIA drivers and CUDA
        apt-get install -y nvidia-driver-535 nvidia-cuda-toolkit
        
        # Add CUDA to PATH
        echo 'export PATH=/usr/local/cuda/bin:${PATH}' > /etc/profile.d/cuda.sh
        echo 'export LD_LIBRARY_PATH=/usr/local/cuda/lib64:${LD_LIBRARY_PATH}' >> /etc/profile.d/cuda.sh
        chmod +x /etc/profile.d/cuda.sh
      else
        echo "Skipping NVIDIA drivers on non-x86_64 architecture"
      fi

  - name: "Install Python ML packages"
    script: |
      # Create a Python virtual environment
      python3 -m venv /opt/ml_env
      
      # Install common data science and ML packages
      /opt/ml_env/bin/pip install --upgrade pip
      /opt/ml_env/bin/pip install numpy pandas matplotlib scipy scikit-learn
      /opt/ml_env/bin/pip install jupyterlab notebook ipywidgets
      
      # Install deep learning frameworks
      /opt/ml_env/bin/pip install torch torchvision torchaudio
      /opt/ml_env/bin/pip install tensorflow tensorflow-datasets
      
      # Install visualization and data tools
      /opt/ml_env/bin/pip install seaborn plotly dash bokeh
      /opt/ml_env/bin/pip install opencv-python pillow

  - name: "Configure Jupyter"
    script: |
      # Create Jupyter configuration
      mkdir -p /etc/jupyter
      
      # Generate configuration
      /opt/ml_env/bin/jupyter server --generate-config -f /etc/jupyter/jupyter_server_config.py
      
      # Configure Jupyter to allow remote access
      cat >> /etc/jupyter/jupyter_server_config.py << EOF
c.ServerApp.ip = '0.0.0.0'
c.ServerApp.port = 8888
c.ServerApp.open_browser = False
c.ServerApp.allow_root = True
c.ServerApp.allow_remote_access = True
c.ServerApp.token = ''  # No token for easy access (in production, use proper authentication)
EOF
      
      # Create a service for Jupyter
      cat > /etc/systemd/system/jupyter.service << EOF
[Unit]
Description=Jupyter Server
After=network.target

[Service]
Type=simple
User=researcher
ExecStart=/opt/ml_env/bin/jupyter lab --config=/etc/jupyter/jupyter_server_config.py
WorkingDirectory=/home/researcher
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF
      
      systemctl enable jupyter.service

  - name: "Setup user environment"
    script: |
      # Create default researcher user
      useradd -m -s /bin/bash researcher
      echo "researcher:password123" | chpasswd
      usermod -aG sudo researcher
      
      # Create ML projects directory
      mkdir -p /home/researcher/ml_projects
      chown -R researcher:researcher /home/researcher/ml_projects
      
      # Configure user environment
      echo 'source /opt/ml_env/bin/activate' >> /home/researcher/.bashrc
      echo 'export PATH=/opt/ml_env/bin:${PATH}' >> /home/researcher/.bashrc
      
      # Create convenient alias for Jupyter
      echo 'alias start-jupyter="sudo systemctl start jupyter.service"' >> /home/researcher/.bashrc
      echo 'alias stop-jupyter="sudo systemctl stop jupyter.service"' >> /home/researcher/.bashrc
      echo 'alias jupyter-status="sudo systemctl status jupyter.service"' >> /home/researcher/.bashrc

  - name: "Install sample notebooks"
    script: |
      # Download sample notebooks
      mkdir -p /home/researcher/ml_projects/samples
      
      # TensorFlow Getting Started
      wget -O /home/researcher/ml_projects/samples/tensorflow_quickstart.ipynb \
        https://raw.githubusercontent.com/tensorflow/docs/master/site/en/tutorials/quickstart/beginner.ipynb
      
      # PyTorch Getting Started
      wget -O /home/researcher/ml_projects/samples/pytorch_quickstart.ipynb \
        https://raw.githubusercontent.com/pytorch/tutorials/master/beginner_source/basics/quickstart_tutorial.py
      
      # Fix ownership
      chown -R researcher:researcher /home/researcher/ml_projects

  - name: "Cleanup"
    script: |
      apt-get autoremove -y && apt-get autoclean
      rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

validation:
  - name: "Python installed"
    command: "python3 --version"
    success: true
  
  - name: "Virtual environment created"
    command: "ls -l /opt/ml_env/bin/python"
    success: true
  
  - name: "PyTorch installed"
    command: "/opt/ml_env/bin/python -c 'import torch; print(torch.__version__)'"
    success: true
  
  - name: "TensorFlow installed"
    command: "/opt/ml_env/bin/python -c 'import tensorflow as tf; print(tf.__version__)'"
    success: true
  
  - name: "Jupyter configured"
    command: "systemctl is-enabled jupyter.service"
    equals: "enabled"
  
  - name: "User setup"
    command: "id researcher"
    success: true

tags:
  Name: "python-ml"
  Type: "research"
  Software: "Python,Jupyter,PyTorch,TensorFlow"
  Purpose: "machine-learning"

min_disk_size: 20
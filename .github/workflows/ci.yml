name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install dependencies
        run: |
          go mod download
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Verify dependencies
        run: go mod verify

      - name: Run code formatting
        run: |
          go fmt ./...
          if [ -n "$(git status --porcelain)" ]; then
            echo "Go code is not properly formatted"
            git diff
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run linter
        run: golangci-lint run --timeout=5m

      - name: Run gosec
        run: gosec -quiet ./...

      - name: Run unit tests
        run: go test -race -short ./... -coverprofile=unit-coverage.out

      - name: Run integration tests
        run: |
          docker-compose -f docker-compose.test.yml up -d localstack mock-oidc
          echo "Waiting for services to be ready..."
          sleep 15
          INTEGRATION_TESTS=1 go test -tags=integration ./pkg/aws -v -coverprofile=aws-integration-coverage.out
          INTEGRATION_TESTS=1 go test -tags=integration ./pkg/ami -v -coverprofile=ami-integration-coverage.out
          INTEGRATION_TESTS=1 go test -tags=integration ./pkg/usermgmt -v -coverprofile=usermgmt-integration-coverage.out
          docker-compose -f docker-compose.test.yml down

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: |
            unit-coverage.out
            aws-integration-coverage.out
            ami-integration-coverage.out
            usermgmt-integration-coverage.out

      - name: Check coverage thresholds
        run: ./scripts/check-coverage.sh

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install dependencies
        run: go mod download

      - name: Build Linux amd64
        run: GOOS=linux GOARCH=amd64 go build -o bin/cws-linux-amd64 ./cmd/cws

      - name: Build Linux arm64
        run: GOOS=linux GOARCH=arm64 go build -o bin/cws-linux-arm64 ./cmd/cws

      - name: Build macOS amd64
        run: GOOS=darwin GOARCH=amd64 go build -o bin/cws-macos-amd64 ./cmd/cws

      - name: Build macOS arm64
        run: GOOS=darwin GOARCH=arm64 go build -o bin/cws-macos-arm64 ./cmd/cws

      - name: Build Windows amd64
        run: GOOS=windows GOARCH=amd64 go build -o bin/cws-windows-amd64.exe ./cmd/cws

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: bin/
          retention-days: 7

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation standards
        run: ./scripts/check-docs.sh

      - name: Validate markdown
        uses: DavidAnson/markdownlint-cli2-action@v20
        with:
          globs: "**/*.md"
          config: ".markdownlint.json"

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, build, docs]
    if: ${{ always() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine workflow status
        id: status
        run: |
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" && "${{ needs.docs.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Send notification
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: echo "Workflow ${{ steps.status.outputs.status }}"
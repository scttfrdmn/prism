name: Cross-Platform Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GO_VERSION: '1.21'
  
jobs:
  test-matrix:
    name: Test ${{ matrix.os }} / ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux platforms
          - os: linux
            arch: amd64
            runner: ubuntu-latest
          - os: linux
            arch: arm64
            runner: ubuntu-latest
          
          # macOS platforms
          - os: darwin
            arch: amd64
            runner: macos-13  # Intel Mac
          - os: darwin
            arch: arm64
            runner: macos-latest  # M1/M2 Mac
          
          # Windows platforms
          - os: windows
            arch: amd64
            runner: windows-latest
          - os: windows
            arch: arm64
            runner: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      - name: Run unit tests
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}

      - name: Build binaries
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -v -o bin/cws-${{ matrix.os }}-${{ matrix.arch }} ./cmd/cws
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -v -o bin/cwsd-${{ matrix.os }}-${{ matrix.arch }} ./cmd/cwsd
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -v -o bin/cws-gui-${{ matrix.os }}-${{ matrix.arch }} ./cmd/cws-gui
        shell: bash

      - name: Test binary execution (Linux/macOS)
        if: matrix.os != 'windows'
        run: |
          chmod +x bin/cws-${{ matrix.os }}-${{ matrix.arch }}
          ./bin/cws-${{ matrix.os }}-${{ matrix.arch }} version
        shell: bash

      - name: Test binary execution (Windows)
        if: matrix.os == 'windows'
        run: |
          ./bin/cws-${{ matrix.os }}-${{ matrix.arch }}.exe version
        shell: pwsh

      - name: Upload coverage
        if: matrix.os == 'linux' && matrix.arch == 'amd64'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-matrix
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Run AWS integration tests
        run: |
          go test -v -tags=integration ./pkg/aws/...
        env:
          AWS_INTEGRATION_TESTS: "true"
          AWS_REGION: us-west-2
        continue-on-error: true  # Don't fail build on integration test failures

      - name: Run SSH connectivity tests
        run: |
          go test -v ./pkg/ssh/...
        continue-on-error: true

  gui-tests:
    name: GUI Tests
    runs-on: ${{ matrix.os }}
    needs: test-matrix
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install X11 dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libgl1-mesa-dev libxxf86vm-dev

      - name: Run GUI tests (Linux)
        if: runner.os == 'Linux'
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          go test -v ./cmd/cws-gui/...

      - name: Run GUI tests (macOS/Windows)
        if: runner.os != 'Linux'
        run: |
          go test -v ./cmd/cws-gui/...

  tui-tests:
    name: TUI Tests
    runs-on: ${{ matrix.os }}
    needs: test-matrix
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run TUI tests
        run: |
          go test -v ./internal/tui/...
        env:
          TERM: xterm-256color

  release-test:
    name: Release Build Test
    runs-on: ubuntu-latest
    needs: [test-matrix, integration-tests, gui-tests, tui-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install goreleaser
        run: |
          curl -sL https://github.com/goreleaser/goreleaser/releases/latest/download/goreleaser_Linux_x86_64.tar.gz | tar xz
          sudo mv goreleaser /usr/local/bin/

      - name: Test release build
        run: |
          goreleaser build --snapshot --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: dist/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: './...'

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run benchmarks
        run: |
          go test -bench=. -benchmem -run=^$ ./... | tee benchmark.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark.txt

      - name: Check for performance regression
        run: |
          # Compare with previous benchmark results if available
          echo "Benchmark comparison would go here"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-matrix, integration-tests, gui-tests, tui-tests, security-scan, performance-tests]
    if: always()
    
    steps:
      - name: Slack Notification
        if: github.event_name == 'schedule'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Cross-platform testing completed
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true